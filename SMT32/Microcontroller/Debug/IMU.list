
IMU.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a094  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000290  0800a220  0800a220  0001a220  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a4b0  0800a4b0  00020734  2**0
                  CONTENTS
  4 .ARM          00000000  0800a4b0  0800a4b0  00020734  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800a4b0  0800a4b0  00020734  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a4b0  0800a4b0  0001a4b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a4b4  0800a4b4  0001a4b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000734  20000000  0800a4b8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001284  20000734  0800abec  00020734  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200019b8  0800abec  000219b8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020734  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017c51  00000000  00000000  00020764  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003351  00000000  00000000  000383b5  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000f50  00000000  00000000  0003b708  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000dc8  00000000  00000000  0003c658  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002061f  00000000  00000000  0003d420  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00010a7a  00000000  00000000  0005da3f  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000b117e  00000000  00000000  0006e4b9  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0011f637  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004608  00000000  00000000  0011f6b4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000734 	.word	0x20000734
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800a204 	.word	0x0800a204

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000738 	.word	0x20000738
 80001c4:	0800a204 	.word	0x0800a204

080001c8 <strlen>:
 80001c8:	4603      	mov	r3, r0
 80001ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ce:	2a00      	cmp	r2, #0
 80001d0:	d1fb      	bne.n	80001ca <strlen+0x2>
 80001d2:	1a18      	subs	r0, r3, r0
 80001d4:	3801      	subs	r0, #1
 80001d6:	4770      	bx	lr

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	; 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000316:	f1a4 0401 	sub.w	r4, r4, #1
 800031a:	d1e9      	bne.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__gedf2>:
 8000974:	f04f 3cff 	mov.w	ip, #4294967295
 8000978:	e006      	b.n	8000988 <__cmpdf2+0x4>
 800097a:	bf00      	nop

0800097c <__ledf2>:
 800097c:	f04f 0c01 	mov.w	ip, #1
 8000980:	e002      	b.n	8000988 <__cmpdf2+0x4>
 8000982:	bf00      	nop

08000984 <__cmpdf2>:
 8000984:	f04f 0c01 	mov.w	ip, #1
 8000988:	f84d cd04 	str.w	ip, [sp, #-4]!
 800098c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000990:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000994:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800099e:	d01b      	beq.n	80009d8 <__cmpdf2+0x54>
 80009a0:	b001      	add	sp, #4
 80009a2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009a6:	bf0c      	ite	eq
 80009a8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ac:	ea91 0f03 	teqne	r1, r3
 80009b0:	bf02      	ittt	eq
 80009b2:	ea90 0f02 	teqeq	r0, r2
 80009b6:	2000      	moveq	r0, #0
 80009b8:	4770      	bxeq	lr
 80009ba:	f110 0f00 	cmn.w	r0, #0
 80009be:	ea91 0f03 	teq	r1, r3
 80009c2:	bf58      	it	pl
 80009c4:	4299      	cmppl	r1, r3
 80009c6:	bf08      	it	eq
 80009c8:	4290      	cmpeq	r0, r2
 80009ca:	bf2c      	ite	cs
 80009cc:	17d8      	asrcs	r0, r3, #31
 80009ce:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009d2:	f040 0001 	orr.w	r0, r0, #1
 80009d6:	4770      	bx	lr
 80009d8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d102      	bne.n	80009e8 <__cmpdf2+0x64>
 80009e2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009e6:	d107      	bne.n	80009f8 <__cmpdf2+0x74>
 80009e8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f0:	d1d6      	bne.n	80009a0 <__cmpdf2+0x1c>
 80009f2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009f6:	d0d3      	beq.n	80009a0 <__cmpdf2+0x1c>
 80009f8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdrcmple>:
 8000a00:	4684      	mov	ip, r0
 8000a02:	4610      	mov	r0, r2
 8000a04:	4662      	mov	r2, ip
 8000a06:	468c      	mov	ip, r1
 8000a08:	4619      	mov	r1, r3
 8000a0a:	4663      	mov	r3, ip
 8000a0c:	e000      	b.n	8000a10 <__aeabi_cdcmpeq>
 8000a0e:	bf00      	nop

08000a10 <__aeabi_cdcmpeq>:
 8000a10:	b501      	push	{r0, lr}
 8000a12:	f7ff ffb7 	bl	8000984 <__cmpdf2>
 8000a16:	2800      	cmp	r0, #0
 8000a18:	bf48      	it	mi
 8000a1a:	f110 0f00 	cmnmi.w	r0, #0
 8000a1e:	bd01      	pop	{r0, pc}

08000a20 <__aeabi_dcmpeq>:
 8000a20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a24:	f7ff fff4 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a28:	bf0c      	ite	eq
 8000a2a:	2001      	moveq	r0, #1
 8000a2c:	2000      	movne	r0, #0
 8000a2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a32:	bf00      	nop

08000a34 <__aeabi_dcmplt>:
 8000a34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a38:	f7ff ffea 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a3c:	bf34      	ite	cc
 8000a3e:	2001      	movcc	r0, #1
 8000a40:	2000      	movcs	r0, #0
 8000a42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a46:	bf00      	nop

08000a48 <__aeabi_dcmple>:
 8000a48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a4c:	f7ff ffe0 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a50:	bf94      	ite	ls
 8000a52:	2001      	movls	r0, #1
 8000a54:	2000      	movhi	r0, #0
 8000a56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5a:	bf00      	nop

08000a5c <__aeabi_dcmpge>:
 8000a5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a60:	f7ff ffce 	bl	8000a00 <__aeabi_cdrcmple>
 8000a64:	bf94      	ite	ls
 8000a66:	2001      	movls	r0, #1
 8000a68:	2000      	movhi	r0, #0
 8000a6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6e:	bf00      	nop

08000a70 <__aeabi_dcmpgt>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff ffc4 	bl	8000a00 <__aeabi_cdrcmple>
 8000a78:	bf34      	ite	cc
 8000a7a:	2001      	movcc	r0, #1
 8000a7c:	2000      	movcs	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_dcmpun>:
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	d102      	bne.n	8000a94 <__aeabi_dcmpun+0x10>
 8000a8e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a92:	d10a      	bne.n	8000aaa <__aeabi_dcmpun+0x26>
 8000a94:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	d102      	bne.n	8000aa4 <__aeabi_dcmpun+0x20>
 8000a9e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aa2:	d102      	bne.n	8000aaa <__aeabi_dcmpun+0x26>
 8000aa4:	f04f 0000 	mov.w	r0, #0
 8000aa8:	4770      	bx	lr
 8000aaa:	f04f 0001 	mov.w	r0, #1
 8000aae:	4770      	bx	lr

08000ab0 <__aeabi_d2iz>:
 8000ab0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ab4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ab8:	d215      	bcs.n	8000ae6 <__aeabi_d2iz+0x36>
 8000aba:	d511      	bpl.n	8000ae0 <__aeabi_d2iz+0x30>
 8000abc:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ac0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ac4:	d912      	bls.n	8000aec <__aeabi_d2iz+0x3c>
 8000ac6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aca:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ace:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ad2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ad6:	fa23 f002 	lsr.w	r0, r3, r2
 8000ada:	bf18      	it	ne
 8000adc:	4240      	negne	r0, r0
 8000ade:	4770      	bx	lr
 8000ae0:	f04f 0000 	mov.w	r0, #0
 8000ae4:	4770      	bx	lr
 8000ae6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aea:	d105      	bne.n	8000af8 <__aeabi_d2iz+0x48>
 8000aec:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000af0:	bf08      	it	eq
 8000af2:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000af6:	4770      	bx	lr
 8000af8:	f04f 0000 	mov.w	r0, #0
 8000afc:	4770      	bx	lr
 8000afe:	bf00      	nop

08000b00 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b04:	f000 fade 	bl	80010c4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b08:	f000 f822 	bl	8000b50 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b0c:	f000 f8fe 	bl	8000d0c <MX_GPIO_Init>
  MX_I2C1_Init();
 8000b10:	f000 f880 	bl	8000c14 <MX_I2C1_Init>
  MX_SPI1_Init();
 8000b14:	f000 f8bc 	bl	8000c90 <MX_SPI1_Init>
  MX_USB_DEVICE_Init();
 8000b18:	f007 f956 	bl	8007dc8 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
  __HAL_I2C_ENABLE(&hi2c1);
 8000b1c:	4b0a      	ldr	r3, [pc, #40]	; (8000b48 <main+0x48>)
 8000b1e:	681b      	ldr	r3, [r3, #0]
 8000b20:	681a      	ldr	r2, [r3, #0]
 8000b22:	4b09      	ldr	r3, [pc, #36]	; (8000b48 <main+0x48>)
 8000b24:	681b      	ldr	r3, [r3, #0]
 8000b26:	f042 0201 	orr.w	r2, r2, #1
 8000b2a:	601a      	str	r2, [r3, #0]
*/
    while (1)	// CTRL + SHIFT + F
    {
    	//GPIOE->BSRR = 0x400;

    	CDC_Transmit_FS((uint8_t*)&jsonBuffer, strlen(jsonBuffer));
 8000b2c:	4807      	ldr	r0, [pc, #28]	; (8000b4c <main+0x4c>)
 8000b2e:	f7ff fb4b 	bl	80001c8 <strlen>
 8000b32:	4603      	mov	r3, r0
 8000b34:	b29b      	uxth	r3, r3
 8000b36:	4619      	mov	r1, r3
 8000b38:	4804      	ldr	r0, [pc, #16]	; (8000b4c <main+0x4c>)
 8000b3a:	f007 fa03 	bl	8007f44 <CDC_Transmit_FS>
    	HAL_Delay(1000);
 8000b3e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000b42:	f000 fb25 	bl	8001190 <HAL_Delay>
    	CDC_Transmit_FS((uint8_t*)&jsonBuffer, strlen(jsonBuffer));
 8000b46:	e7f1      	b.n	8000b2c <main+0x2c>
 8000b48:	20000980 	.word	0x20000980
 8000b4c:	20000000 	.word	0x20000000

08000b50 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	b09e      	sub	sp, #120	; 0x78
 8000b54:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b56:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000b5a:	2228      	movs	r2, #40	; 0x28
 8000b5c:	2100      	movs	r1, #0
 8000b5e:	4618      	mov	r0, r3
 8000b60:	f007 fe24 	bl	80087ac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b64:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000b68:	2200      	movs	r2, #0
 8000b6a:	601a      	str	r2, [r3, #0]
 8000b6c:	605a      	str	r2, [r3, #4]
 8000b6e:	609a      	str	r2, [r3, #8]
 8000b70:	60da      	str	r2, [r3, #12]
 8000b72:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000b74:	463b      	mov	r3, r7
 8000b76:	223c      	movs	r2, #60	; 0x3c
 8000b78:	2100      	movs	r1, #0
 8000b7a:	4618      	mov	r0, r3
 8000b7c:	f007 fe16 	bl	80087ac <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8000b80:	2303      	movs	r3, #3
 8000b82:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000b84:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000b88:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000b8e:	2301      	movs	r3, #1
 8000b90:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000b92:	2310      	movs	r3, #16
 8000b94:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b96:	2302      	movs	r3, #2
 8000b98:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000b9a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000b9e:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8000ba0:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000ba4:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ba6:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000baa:	4618      	mov	r0, r3
 8000bac:	f002 f9c8 	bl	8002f40 <HAL_RCC_OscConfig>
 8000bb0:	4603      	mov	r3, r0
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	d001      	beq.n	8000bba <SystemClock_Config+0x6a>
  {
    Error_Handler();
 8000bb6:	f000 f929 	bl	8000e0c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000bba:	230f      	movs	r3, #15
 8000bbc:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000bbe:	2302      	movs	r3, #2
 8000bc0:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000bc6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000bca:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000bcc:	2300      	movs	r3, #0
 8000bce:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000bd0:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000bd4:	2101      	movs	r1, #1
 8000bd6:	4618      	mov	r0, r3
 8000bd8:	f003 f8ba 	bl	8003d50 <HAL_RCC_ClockConfig>
 8000bdc:	4603      	mov	r3, r0
 8000bde:	2b00      	cmp	r3, #0
 8000be0:	d001      	beq.n	8000be6 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000be2:	f000 f913 	bl	8000e0c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_I2C1;
 8000be6:	4b0a      	ldr	r3, [pc, #40]	; (8000c10 <SystemClock_Config+0xc0>)
 8000be8:	603b      	str	r3, [r7, #0]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8000bea:	2300      	movs	r3, #0
 8000bec:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.USBClockSelection = RCC_USBCLKSOURCE_PLL;
 8000bee:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000bf2:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000bf4:	463b      	mov	r3, r7
 8000bf6:	4618      	mov	r0, r3
 8000bf8:	f003 fa90 	bl	800411c <HAL_RCCEx_PeriphCLKConfig>
 8000bfc:	4603      	mov	r3, r0
 8000bfe:	2b00      	cmp	r3, #0
 8000c00:	d001      	beq.n	8000c06 <SystemClock_Config+0xb6>
  {
    Error_Handler();
 8000c02:	f000 f903 	bl	8000e0c <Error_Handler>
  }
}
 8000c06:	bf00      	nop
 8000c08:	3778      	adds	r7, #120	; 0x78
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	bd80      	pop	{r7, pc}
 8000c0e:	bf00      	nop
 8000c10:	00020020 	.word	0x00020020

08000c14 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000c18:	4b1b      	ldr	r3, [pc, #108]	; (8000c88 <MX_I2C1_Init+0x74>)
 8000c1a:	4a1c      	ldr	r2, [pc, #112]	; (8000c8c <MX_I2C1_Init+0x78>)
 8000c1c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x0000020B;
 8000c1e:	4b1a      	ldr	r3, [pc, #104]	; (8000c88 <MX_I2C1_Init+0x74>)
 8000c20:	f240 220b 	movw	r2, #523	; 0x20b
 8000c24:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000c26:	4b18      	ldr	r3, [pc, #96]	; (8000c88 <MX_I2C1_Init+0x74>)
 8000c28:	2200      	movs	r2, #0
 8000c2a:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000c2c:	4b16      	ldr	r3, [pc, #88]	; (8000c88 <MX_I2C1_Init+0x74>)
 8000c2e:	2201      	movs	r2, #1
 8000c30:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000c32:	4b15      	ldr	r3, [pc, #84]	; (8000c88 <MX_I2C1_Init+0x74>)
 8000c34:	2200      	movs	r2, #0
 8000c36:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000c38:	4b13      	ldr	r3, [pc, #76]	; (8000c88 <MX_I2C1_Init+0x74>)
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000c3e:	4b12      	ldr	r3, [pc, #72]	; (8000c88 <MX_I2C1_Init+0x74>)
 8000c40:	2200      	movs	r2, #0
 8000c42:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000c44:	4b10      	ldr	r3, [pc, #64]	; (8000c88 <MX_I2C1_Init+0x74>)
 8000c46:	2200      	movs	r2, #0
 8000c48:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000c4a:	4b0f      	ldr	r3, [pc, #60]	; (8000c88 <MX_I2C1_Init+0x74>)
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000c50:	480d      	ldr	r0, [pc, #52]	; (8000c88 <MX_I2C1_Init+0x74>)
 8000c52:	f000 fd63 	bl	800171c <HAL_I2C_Init>
 8000c56:	4603      	mov	r3, r0
 8000c58:	2b00      	cmp	r3, #0
 8000c5a:	d001      	beq.n	8000c60 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000c5c:	f000 f8d6 	bl	8000e0c <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000c60:	2100      	movs	r1, #0
 8000c62:	4809      	ldr	r0, [pc, #36]	; (8000c88 <MX_I2C1_Init+0x74>)
 8000c64:	f000 fde9 	bl	800183a <HAL_I2CEx_ConfigAnalogFilter>
 8000c68:	4603      	mov	r3, r0
 8000c6a:	2b00      	cmp	r3, #0
 8000c6c:	d001      	beq.n	8000c72 <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 8000c6e:	f000 f8cd 	bl	8000e0c <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000c72:	2100      	movs	r1, #0
 8000c74:	4804      	ldr	r0, [pc, #16]	; (8000c88 <MX_I2C1_Init+0x74>)
 8000c76:	f000 fe2b 	bl	80018d0 <HAL_I2CEx_ConfigDigitalFilter>
 8000c7a:	4603      	mov	r3, r0
 8000c7c:	2b00      	cmp	r3, #0
 8000c7e:	d001      	beq.n	8000c84 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 8000c80:	f000 f8c4 	bl	8000e0c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000c84:	bf00      	nop
 8000c86:	bd80      	pop	{r7, pc}
 8000c88:	20000980 	.word	0x20000980
 8000c8c:	40005400 	.word	0x40005400

08000c90 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000c94:	4b1b      	ldr	r3, [pc, #108]	; (8000d04 <MX_SPI1_Init+0x74>)
 8000c96:	4a1c      	ldr	r2, [pc, #112]	; (8000d08 <MX_SPI1_Init+0x78>)
 8000c98:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000c9a:	4b1a      	ldr	r3, [pc, #104]	; (8000d04 <MX_SPI1_Init+0x74>)
 8000c9c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000ca0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000ca2:	4b18      	ldr	r3, [pc, #96]	; (8000d04 <MX_SPI1_Init+0x74>)
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8000ca8:	4b16      	ldr	r3, [pc, #88]	; (8000d04 <MX_SPI1_Init+0x74>)
 8000caa:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000cae:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000cb0:	4b14      	ldr	r3, [pc, #80]	; (8000d04 <MX_SPI1_Init+0x74>)
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000cb6:	4b13      	ldr	r3, [pc, #76]	; (8000d04 <MX_SPI1_Init+0x74>)
 8000cb8:	2200      	movs	r2, #0
 8000cba:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000cbc:	4b11      	ldr	r3, [pc, #68]	; (8000d04 <MX_SPI1_Init+0x74>)
 8000cbe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000cc2:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000cc4:	4b0f      	ldr	r3, [pc, #60]	; (8000d04 <MX_SPI1_Init+0x74>)
 8000cc6:	2208      	movs	r2, #8
 8000cc8:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000cca:	4b0e      	ldr	r3, [pc, #56]	; (8000d04 <MX_SPI1_Init+0x74>)
 8000ccc:	2200      	movs	r2, #0
 8000cce:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000cd0:	4b0c      	ldr	r3, [pc, #48]	; (8000d04 <MX_SPI1_Init+0x74>)
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000cd6:	4b0b      	ldr	r3, [pc, #44]	; (8000d04 <MX_SPI1_Init+0x74>)
 8000cd8:	2200      	movs	r2, #0
 8000cda:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000cdc:	4b09      	ldr	r3, [pc, #36]	; (8000d04 <MX_SPI1_Init+0x74>)
 8000cde:	2207      	movs	r2, #7
 8000ce0:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000ce2:	4b08      	ldr	r3, [pc, #32]	; (8000d04 <MX_SPI1_Init+0x74>)
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000ce8:	4b06      	ldr	r3, [pc, #24]	; (8000d04 <MX_SPI1_Init+0x74>)
 8000cea:	2208      	movs	r2, #8
 8000cec:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000cee:	4805      	ldr	r0, [pc, #20]	; (8000d04 <MX_SPI1_Init+0x74>)
 8000cf0:	f003 fbc4 	bl	800447c <HAL_SPI_Init>
 8000cf4:	4603      	mov	r3, r0
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	d001      	beq.n	8000cfe <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000cfa:	f000 f887 	bl	8000e0c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000cfe:	bf00      	nop
 8000d00:	bd80      	pop	{r7, pc}
 8000d02:	bf00      	nop
 8000d04:	200009cc 	.word	0x200009cc
 8000d08:	40013000 	.word	0x40013000

08000d0c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	b08a      	sub	sp, #40	; 0x28
 8000d10:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d12:	f107 0314 	add.w	r3, r7, #20
 8000d16:	2200      	movs	r2, #0
 8000d18:	601a      	str	r2, [r3, #0]
 8000d1a:	605a      	str	r2, [r3, #4]
 8000d1c:	609a      	str	r2, [r3, #8]
 8000d1e:	60da      	str	r2, [r3, #12]
 8000d20:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000d22:	4b37      	ldr	r3, [pc, #220]	; (8000e00 <MX_GPIO_Init+0xf4>)
 8000d24:	695b      	ldr	r3, [r3, #20]
 8000d26:	4a36      	ldr	r2, [pc, #216]	; (8000e00 <MX_GPIO_Init+0xf4>)
 8000d28:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000d2c:	6153      	str	r3, [r2, #20]
 8000d2e:	4b34      	ldr	r3, [pc, #208]	; (8000e00 <MX_GPIO_Init+0xf4>)
 8000d30:	695b      	ldr	r3, [r3, #20]
 8000d32:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000d36:	613b      	str	r3, [r7, #16]
 8000d38:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d3a:	4b31      	ldr	r3, [pc, #196]	; (8000e00 <MX_GPIO_Init+0xf4>)
 8000d3c:	695b      	ldr	r3, [r3, #20]
 8000d3e:	4a30      	ldr	r2, [pc, #192]	; (8000e00 <MX_GPIO_Init+0xf4>)
 8000d40:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000d44:	6153      	str	r3, [r2, #20]
 8000d46:	4b2e      	ldr	r3, [pc, #184]	; (8000e00 <MX_GPIO_Init+0xf4>)
 8000d48:	695b      	ldr	r3, [r3, #20]
 8000d4a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000d4e:	60fb      	str	r3, [r7, #12]
 8000d50:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000d52:	4b2b      	ldr	r3, [pc, #172]	; (8000e00 <MX_GPIO_Init+0xf4>)
 8000d54:	695b      	ldr	r3, [r3, #20]
 8000d56:	4a2a      	ldr	r2, [pc, #168]	; (8000e00 <MX_GPIO_Init+0xf4>)
 8000d58:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000d5c:	6153      	str	r3, [r2, #20]
 8000d5e:	4b28      	ldr	r3, [pc, #160]	; (8000e00 <MX_GPIO_Init+0xf4>)
 8000d60:	695b      	ldr	r3, [r3, #20]
 8000d62:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000d66:	60bb      	str	r3, [r7, #8]
 8000d68:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d6a:	4b25      	ldr	r3, [pc, #148]	; (8000e00 <MX_GPIO_Init+0xf4>)
 8000d6c:	695b      	ldr	r3, [r3, #20]
 8000d6e:	4a24      	ldr	r2, [pc, #144]	; (8000e00 <MX_GPIO_Init+0xf4>)
 8000d70:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d74:	6153      	str	r3, [r2, #20]
 8000d76:	4b22      	ldr	r3, [pc, #136]	; (8000e00 <MX_GPIO_Init+0xf4>)
 8000d78:	695b      	ldr	r3, [r3, #20]
 8000d7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d7e:	607b      	str	r3, [r7, #4]
 8000d80:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d82:	4b1f      	ldr	r3, [pc, #124]	; (8000e00 <MX_GPIO_Init+0xf4>)
 8000d84:	695b      	ldr	r3, [r3, #20]
 8000d86:	4a1e      	ldr	r2, [pc, #120]	; (8000e00 <MX_GPIO_Init+0xf4>)
 8000d88:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000d8c:	6153      	str	r3, [r2, #20]
 8000d8e:	4b1c      	ldr	r3, [pc, #112]	; (8000e00 <MX_GPIO_Init+0xf4>)
 8000d90:	695b      	ldr	r3, [r3, #20]
 8000d92:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000d96:	603b      	str	r3, [r7, #0]
 8000d98:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	f64f 7108 	movw	r1, #65288	; 0xff08
 8000da0:	4818      	ldr	r0, [pc, #96]	; (8000e04 <MX_GPIO_Init+0xf8>)
 8000da2:	f000 fca3 	bl	80016ec <HAL_GPIO_WritePin>
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
                          |LD6_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : DRDY_Pin MEMS_INT3_Pin MEMS_INT4_Pin MEMS_INT1_Pin
                           MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = DRDY_Pin|MEMS_INT3_Pin|MEMS_INT4_Pin|MEMS_INT1_Pin
 8000da6:	2337      	movs	r3, #55	; 0x37
 8000da8:	617b      	str	r3, [r7, #20]
                          |MEMS_INT2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000daa:	4b17      	ldr	r3, [pc, #92]	; (8000e08 <MX_GPIO_Init+0xfc>)
 8000dac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dae:	2300      	movs	r3, #0
 8000db0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000db2:	f107 0314 	add.w	r3, r7, #20
 8000db6:	4619      	mov	r1, r3
 8000db8:	4812      	ldr	r0, [pc, #72]	; (8000e04 <MX_GPIO_Init+0xf8>)
 8000dba:	f000 fb1d 	bl	80013f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : CS_I2C_SPI_Pin LD4_Pin LD3_Pin LD5_Pin
                           LD7_Pin LD9_Pin LD10_Pin LD8_Pin
                           LD6_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 8000dbe:	f64f 7308 	movw	r3, #65288	; 0xff08
 8000dc2:	617b      	str	r3, [r7, #20]
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
                          |LD6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dc4:	2301      	movs	r3, #1
 8000dc6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dc8:	2300      	movs	r3, #0
 8000dca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dcc:	2300      	movs	r3, #0
 8000dce:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000dd0:	f107 0314 	add.w	r3, r7, #20
 8000dd4:	4619      	mov	r1, r3
 8000dd6:	480b      	ldr	r0, [pc, #44]	; (8000e04 <MX_GPIO_Init+0xf8>)
 8000dd8:	f000 fb0e 	bl	80013f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000ddc:	2301      	movs	r3, #1
 8000dde:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000de0:	2300      	movs	r3, #0
 8000de2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000de4:	2300      	movs	r3, #0
 8000de6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000de8:	f107 0314 	add.w	r3, r7, #20
 8000dec:	4619      	mov	r1, r3
 8000dee:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000df2:	f000 fb01 	bl	80013f8 <HAL_GPIO_Init>

}
 8000df6:	bf00      	nop
 8000df8:	3728      	adds	r7, #40	; 0x28
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	bd80      	pop	{r7, pc}
 8000dfe:	bf00      	nop
 8000e00:	40021000 	.word	0x40021000
 8000e04:	48001000 	.word	0x48001000
 8000e08:	10120000 	.word	0x10120000

08000e0c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e0c:	b480      	push	{r7}
 8000e0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000e10:	bf00      	nop
 8000e12:	46bd      	mov	sp, r7
 8000e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e18:	4770      	bx	lr
	...

08000e1c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	b082      	sub	sp, #8
 8000e20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e22:	4b0f      	ldr	r3, [pc, #60]	; (8000e60 <HAL_MspInit+0x44>)
 8000e24:	699b      	ldr	r3, [r3, #24]
 8000e26:	4a0e      	ldr	r2, [pc, #56]	; (8000e60 <HAL_MspInit+0x44>)
 8000e28:	f043 0301 	orr.w	r3, r3, #1
 8000e2c:	6193      	str	r3, [r2, #24]
 8000e2e:	4b0c      	ldr	r3, [pc, #48]	; (8000e60 <HAL_MspInit+0x44>)
 8000e30:	699b      	ldr	r3, [r3, #24]
 8000e32:	f003 0301 	and.w	r3, r3, #1
 8000e36:	607b      	str	r3, [r7, #4]
 8000e38:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e3a:	4b09      	ldr	r3, [pc, #36]	; (8000e60 <HAL_MspInit+0x44>)
 8000e3c:	69db      	ldr	r3, [r3, #28]
 8000e3e:	4a08      	ldr	r2, [pc, #32]	; (8000e60 <HAL_MspInit+0x44>)
 8000e40:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e44:	61d3      	str	r3, [r2, #28]
 8000e46:	4b06      	ldr	r3, [pc, #24]	; (8000e60 <HAL_MspInit+0x44>)
 8000e48:	69db      	ldr	r3, [r3, #28]
 8000e4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e4e:	603b      	str	r3, [r7, #0]
 8000e50:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000e52:	2007      	movs	r0, #7
 8000e54:	f000 fa8e 	bl	8001374 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e58:	bf00      	nop
 8000e5a:	3708      	adds	r7, #8
 8000e5c:	46bd      	mov	sp, r7
 8000e5e:	bd80      	pop	{r7, pc}
 8000e60:	40021000 	.word	0x40021000

08000e64 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	b08a      	sub	sp, #40	; 0x28
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e6c:	f107 0314 	add.w	r3, r7, #20
 8000e70:	2200      	movs	r2, #0
 8000e72:	601a      	str	r2, [r3, #0]
 8000e74:	605a      	str	r2, [r3, #4]
 8000e76:	609a      	str	r2, [r3, #8]
 8000e78:	60da      	str	r2, [r3, #12]
 8000e7a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	4a17      	ldr	r2, [pc, #92]	; (8000ee0 <HAL_I2C_MspInit+0x7c>)
 8000e82:	4293      	cmp	r3, r2
 8000e84:	d127      	bne.n	8000ed6 <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e86:	4b17      	ldr	r3, [pc, #92]	; (8000ee4 <HAL_I2C_MspInit+0x80>)
 8000e88:	695b      	ldr	r3, [r3, #20]
 8000e8a:	4a16      	ldr	r2, [pc, #88]	; (8000ee4 <HAL_I2C_MspInit+0x80>)
 8000e8c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000e90:	6153      	str	r3, [r2, #20]
 8000e92:	4b14      	ldr	r3, [pc, #80]	; (8000ee4 <HAL_I2C_MspInit+0x80>)
 8000e94:	695b      	ldr	r3, [r3, #20]
 8000e96:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000e9a:	613b      	str	r3, [r7, #16]
 8000e9c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C1_SCL_Pin|I2C1_SDA_Pin;
 8000e9e:	23c0      	movs	r3, #192	; 0xc0
 8000ea0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000ea2:	2312      	movs	r3, #18
 8000ea4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000ea6:	2301      	movs	r3, #1
 8000ea8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000eaa:	2303      	movs	r3, #3
 8000eac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000eae:	2304      	movs	r3, #4
 8000eb0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000eb2:	f107 0314 	add.w	r3, r7, #20
 8000eb6:	4619      	mov	r1, r3
 8000eb8:	480b      	ldr	r0, [pc, #44]	; (8000ee8 <HAL_I2C_MspInit+0x84>)
 8000eba:	f000 fa9d 	bl	80013f8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000ebe:	4b09      	ldr	r3, [pc, #36]	; (8000ee4 <HAL_I2C_MspInit+0x80>)
 8000ec0:	69db      	ldr	r3, [r3, #28]
 8000ec2:	4a08      	ldr	r2, [pc, #32]	; (8000ee4 <HAL_I2C_MspInit+0x80>)
 8000ec4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000ec8:	61d3      	str	r3, [r2, #28]
 8000eca:	4b06      	ldr	r3, [pc, #24]	; (8000ee4 <HAL_I2C_MspInit+0x80>)
 8000ecc:	69db      	ldr	r3, [r3, #28]
 8000ece:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000ed2:	60fb      	str	r3, [r7, #12]
 8000ed4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000ed6:	bf00      	nop
 8000ed8:	3728      	adds	r7, #40	; 0x28
 8000eda:	46bd      	mov	sp, r7
 8000edc:	bd80      	pop	{r7, pc}
 8000ede:	bf00      	nop
 8000ee0:	40005400 	.word	0x40005400
 8000ee4:	40021000 	.word	0x40021000
 8000ee8:	48000400 	.word	0x48000400

08000eec <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b08a      	sub	sp, #40	; 0x28
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ef4:	f107 0314 	add.w	r3, r7, #20
 8000ef8:	2200      	movs	r2, #0
 8000efa:	601a      	str	r2, [r3, #0]
 8000efc:	605a      	str	r2, [r3, #4]
 8000efe:	609a      	str	r2, [r3, #8]
 8000f00:	60da      	str	r2, [r3, #12]
 8000f02:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	4a17      	ldr	r2, [pc, #92]	; (8000f68 <HAL_SPI_MspInit+0x7c>)
 8000f0a:	4293      	cmp	r3, r2
 8000f0c:	d128      	bne.n	8000f60 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000f0e:	4b17      	ldr	r3, [pc, #92]	; (8000f6c <HAL_SPI_MspInit+0x80>)
 8000f10:	699b      	ldr	r3, [r3, #24]
 8000f12:	4a16      	ldr	r2, [pc, #88]	; (8000f6c <HAL_SPI_MspInit+0x80>)
 8000f14:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000f18:	6193      	str	r3, [r2, #24]
 8000f1a:	4b14      	ldr	r3, [pc, #80]	; (8000f6c <HAL_SPI_MspInit+0x80>)
 8000f1c:	699b      	ldr	r3, [r3, #24]
 8000f1e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000f22:	613b      	str	r3, [r7, #16]
 8000f24:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f26:	4b11      	ldr	r3, [pc, #68]	; (8000f6c <HAL_SPI_MspInit+0x80>)
 8000f28:	695b      	ldr	r3, [r3, #20]
 8000f2a:	4a10      	ldr	r2, [pc, #64]	; (8000f6c <HAL_SPI_MspInit+0x80>)
 8000f2c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f30:	6153      	str	r3, [r2, #20]
 8000f32:	4b0e      	ldr	r3, [pc, #56]	; (8000f6c <HAL_SPI_MspInit+0x80>)
 8000f34:	695b      	ldr	r3, [r3, #20]
 8000f36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f3a:	60fb      	str	r3, [r7, #12]
 8000f3c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MISOA7_Pin;
 8000f3e:	23e0      	movs	r3, #224	; 0xe0
 8000f40:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f42:	2302      	movs	r3, #2
 8000f44:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f46:	2300      	movs	r3, #0
 8000f48:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000f4a:	2303      	movs	r3, #3
 8000f4c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000f4e:	2305      	movs	r3, #5
 8000f50:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f52:	f107 0314 	add.w	r3, r7, #20
 8000f56:	4619      	mov	r1, r3
 8000f58:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f5c:	f000 fa4c 	bl	80013f8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000f60:	bf00      	nop
 8000f62:	3728      	adds	r7, #40	; 0x28
 8000f64:	46bd      	mov	sp, r7
 8000f66:	bd80      	pop	{r7, pc}
 8000f68:	40013000 	.word	0x40013000
 8000f6c:	40021000 	.word	0x40021000

08000f70 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f70:	b480      	push	{r7}
 8000f72:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000f74:	bf00      	nop
 8000f76:	46bd      	mov	sp, r7
 8000f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7c:	4770      	bx	lr

08000f7e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f7e:	b480      	push	{r7}
 8000f80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f82:	e7fe      	b.n	8000f82 <HardFault_Handler+0x4>

08000f84 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f84:	b480      	push	{r7}
 8000f86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f88:	e7fe      	b.n	8000f88 <MemManage_Handler+0x4>

08000f8a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f8a:	b480      	push	{r7}
 8000f8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f8e:	e7fe      	b.n	8000f8e <BusFault_Handler+0x4>

08000f90 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f90:	b480      	push	{r7}
 8000f92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f94:	e7fe      	b.n	8000f94 <UsageFault_Handler+0x4>

08000f96 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f96:	b480      	push	{r7}
 8000f98:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f9a:	bf00      	nop
 8000f9c:	46bd      	mov	sp, r7
 8000f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa2:	4770      	bx	lr

08000fa4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000fa4:	b480      	push	{r7}
 8000fa6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000fa8:	bf00      	nop
 8000faa:	46bd      	mov	sp, r7
 8000fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb0:	4770      	bx	lr

08000fb2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000fb2:	b480      	push	{r7}
 8000fb4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000fb6:	bf00      	nop
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fbe:	4770      	bx	lr

08000fc0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000fc4:	f000 f8c4 	bl	8001150 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000fc8:	bf00      	nop
 8000fca:	bd80      	pop	{r7, pc}

08000fcc <USB_LP_CAN_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN_RX0 interrupts.
  */
void USB_LP_CAN_RX0_IRQHandler(void)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000fd0:	4802      	ldr	r0, [pc, #8]	; (8000fdc <USB_LP_CAN_RX0_IRQHandler+0x10>)
 8000fd2:	f000 fdcd 	bl	8001b70 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN_RX0_IRQn 1 */
}
 8000fd6:	bf00      	nop
 8000fd8:	bd80      	pop	{r7, pc}
 8000fda:	bf00      	nop
 8000fdc:	200016c8 	.word	0x200016c8

08000fe0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b086      	sub	sp, #24
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000fe8:	4a14      	ldr	r2, [pc, #80]	; (800103c <_sbrk+0x5c>)
 8000fea:	4b15      	ldr	r3, [pc, #84]	; (8001040 <_sbrk+0x60>)
 8000fec:	1ad3      	subs	r3, r2, r3
 8000fee:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ff0:	697b      	ldr	r3, [r7, #20]
 8000ff2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ff4:	4b13      	ldr	r3, [pc, #76]	; (8001044 <_sbrk+0x64>)
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d102      	bne.n	8001002 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ffc:	4b11      	ldr	r3, [pc, #68]	; (8001044 <_sbrk+0x64>)
 8000ffe:	4a12      	ldr	r2, [pc, #72]	; (8001048 <_sbrk+0x68>)
 8001000:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001002:	4b10      	ldr	r3, [pc, #64]	; (8001044 <_sbrk+0x64>)
 8001004:	681a      	ldr	r2, [r3, #0]
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	4413      	add	r3, r2
 800100a:	693a      	ldr	r2, [r7, #16]
 800100c:	429a      	cmp	r2, r3
 800100e:	d207      	bcs.n	8001020 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001010:	f007 fba2 	bl	8008758 <__errno>
 8001014:	4602      	mov	r2, r0
 8001016:	230c      	movs	r3, #12
 8001018:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 800101a:	f04f 33ff 	mov.w	r3, #4294967295
 800101e:	e009      	b.n	8001034 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001020:	4b08      	ldr	r3, [pc, #32]	; (8001044 <_sbrk+0x64>)
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001026:	4b07      	ldr	r3, [pc, #28]	; (8001044 <_sbrk+0x64>)
 8001028:	681a      	ldr	r2, [r3, #0]
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	4413      	add	r3, r2
 800102e:	4a05      	ldr	r2, [pc, #20]	; (8001044 <_sbrk+0x64>)
 8001030:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001032:	68fb      	ldr	r3, [r7, #12]
}
 8001034:	4618      	mov	r0, r3
 8001036:	3718      	adds	r7, #24
 8001038:	46bd      	mov	sp, r7
 800103a:	bd80      	pop	{r7, pc}
 800103c:	2000a000 	.word	0x2000a000
 8001040:	00000400 	.word	0x00000400
 8001044:	20000750 	.word	0x20000750
 8001048:	200019b8 	.word	0x200019b8

0800104c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800104c:	b480      	push	{r7}
 800104e:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001050:	4b06      	ldr	r3, [pc, #24]	; (800106c <SystemInit+0x20>)
 8001052:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001056:	4a05      	ldr	r2, [pc, #20]	; (800106c <SystemInit+0x20>)
 8001058:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800105c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001060:	bf00      	nop
 8001062:	46bd      	mov	sp, r7
 8001064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001068:	4770      	bx	lr
 800106a:	bf00      	nop
 800106c:	e000ed00 	.word	0xe000ed00

08001070 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001070:	f8df d034 	ldr.w	sp, [pc, #52]	; 80010a8 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001074:	480d      	ldr	r0, [pc, #52]	; (80010ac <LoopForever+0x6>)
  ldr r1, =_edata
 8001076:	490e      	ldr	r1, [pc, #56]	; (80010b0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001078:	4a0e      	ldr	r2, [pc, #56]	; (80010b4 <LoopForever+0xe>)
  movs r3, #0
 800107a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800107c:	e002      	b.n	8001084 <LoopCopyDataInit>

0800107e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800107e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001080:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001082:	3304      	adds	r3, #4

08001084 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001084:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001086:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001088:	d3f9      	bcc.n	800107e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800108a:	4a0b      	ldr	r2, [pc, #44]	; (80010b8 <LoopForever+0x12>)
  ldr r4, =_ebss
 800108c:	4c0b      	ldr	r4, [pc, #44]	; (80010bc <LoopForever+0x16>)
  movs r3, #0
 800108e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001090:	e001      	b.n	8001096 <LoopFillZerobss>

08001092 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001092:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001094:	3204      	adds	r2, #4

08001096 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001096:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001098:	d3fb      	bcc.n	8001092 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800109a:	f7ff ffd7 	bl	800104c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800109e:	f007 fb61 	bl	8008764 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80010a2:	f7ff fd2d 	bl	8000b00 <main>

080010a6 <LoopForever>:

LoopForever:
    b LoopForever
 80010a6:	e7fe      	b.n	80010a6 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80010a8:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 80010ac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80010b0:	20000734 	.word	0x20000734
  ldr r2, =_sidata
 80010b4:	0800a4b8 	.word	0x0800a4b8
  ldr r2, =_sbss
 80010b8:	20000734 	.word	0x20000734
  ldr r4, =_ebss
 80010bc:	200019b8 	.word	0x200019b8

080010c0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80010c0:	e7fe      	b.n	80010c0 <ADC1_2_IRQHandler>
	...

080010c4 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80010c8:	4b08      	ldr	r3, [pc, #32]	; (80010ec <HAL_Init+0x28>)
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	4a07      	ldr	r2, [pc, #28]	; (80010ec <HAL_Init+0x28>)
 80010ce:	f043 0310 	orr.w	r3, r3, #16
 80010d2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010d4:	2003      	movs	r0, #3
 80010d6:	f000 f94d 	bl	8001374 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80010da:	2000      	movs	r0, #0
 80010dc:	f000 f808 	bl	80010f0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80010e0:	f7ff fe9c 	bl	8000e1c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80010e4:	2300      	movs	r3, #0
}
 80010e6:	4618      	mov	r0, r3
 80010e8:	bd80      	pop	{r7, pc}
 80010ea:	bf00      	nop
 80010ec:	40022000 	.word	0x40022000

080010f0 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b082      	sub	sp, #8
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80010f8:	4b12      	ldr	r3, [pc, #72]	; (8001144 <HAL_InitTick+0x54>)
 80010fa:	681a      	ldr	r2, [r3, #0]
 80010fc:	4b12      	ldr	r3, [pc, #72]	; (8001148 <HAL_InitTick+0x58>)
 80010fe:	781b      	ldrb	r3, [r3, #0]
 8001100:	4619      	mov	r1, r3
 8001102:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001106:	fbb3 f3f1 	udiv	r3, r3, r1
 800110a:	fbb2 f3f3 	udiv	r3, r2, r3
 800110e:	4618      	mov	r0, r3
 8001110:	f000 f965 	bl	80013de <HAL_SYSTICK_Config>
 8001114:	4603      	mov	r3, r0
 8001116:	2b00      	cmp	r3, #0
 8001118:	d001      	beq.n	800111e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800111a:	2301      	movs	r3, #1
 800111c:	e00e      	b.n	800113c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	2b0f      	cmp	r3, #15
 8001122:	d80a      	bhi.n	800113a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001124:	2200      	movs	r2, #0
 8001126:	6879      	ldr	r1, [r7, #4]
 8001128:	f04f 30ff 	mov.w	r0, #4294967295
 800112c:	f000 f92d 	bl	800138a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001130:	4a06      	ldr	r2, [pc, #24]	; (800114c <HAL_InitTick+0x5c>)
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8001136:	2300      	movs	r3, #0
 8001138:	e000      	b.n	800113c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800113a:	2301      	movs	r3, #1
}
 800113c:	4618      	mov	r0, r3
 800113e:	3708      	adds	r7, #8
 8001140:	46bd      	mov	sp, r7
 8001142:	bd80      	pop	{r7, pc}
 8001144:	200003e8 	.word	0x200003e8
 8001148:	200003f0 	.word	0x200003f0
 800114c:	200003ec 	.word	0x200003ec

08001150 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001150:	b480      	push	{r7}
 8001152:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001154:	4b06      	ldr	r3, [pc, #24]	; (8001170 <HAL_IncTick+0x20>)
 8001156:	781b      	ldrb	r3, [r3, #0]
 8001158:	461a      	mov	r2, r3
 800115a:	4b06      	ldr	r3, [pc, #24]	; (8001174 <HAL_IncTick+0x24>)
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	4413      	add	r3, r2
 8001160:	4a04      	ldr	r2, [pc, #16]	; (8001174 <HAL_IncTick+0x24>)
 8001162:	6013      	str	r3, [r2, #0]
}
 8001164:	bf00      	nop
 8001166:	46bd      	mov	sp, r7
 8001168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116c:	4770      	bx	lr
 800116e:	bf00      	nop
 8001170:	200003f0 	.word	0x200003f0
 8001174:	20000a30 	.word	0x20000a30

08001178 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001178:	b480      	push	{r7}
 800117a:	af00      	add	r7, sp, #0
  return uwTick;  
 800117c:	4b03      	ldr	r3, [pc, #12]	; (800118c <HAL_GetTick+0x14>)
 800117e:	681b      	ldr	r3, [r3, #0]
}
 8001180:	4618      	mov	r0, r3
 8001182:	46bd      	mov	sp, r7
 8001184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001188:	4770      	bx	lr
 800118a:	bf00      	nop
 800118c:	20000a30 	.word	0x20000a30

08001190 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	b084      	sub	sp, #16
 8001194:	af00      	add	r7, sp, #0
 8001196:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001198:	f7ff ffee 	bl	8001178 <HAL_GetTick>
 800119c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80011a2:	68fb      	ldr	r3, [r7, #12]
 80011a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80011a8:	d005      	beq.n	80011b6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80011aa:	4b09      	ldr	r3, [pc, #36]	; (80011d0 <HAL_Delay+0x40>)
 80011ac:	781b      	ldrb	r3, [r3, #0]
 80011ae:	461a      	mov	r2, r3
 80011b0:	68fb      	ldr	r3, [r7, #12]
 80011b2:	4413      	add	r3, r2
 80011b4:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80011b6:	bf00      	nop
 80011b8:	f7ff ffde 	bl	8001178 <HAL_GetTick>
 80011bc:	4602      	mov	r2, r0
 80011be:	68bb      	ldr	r3, [r7, #8]
 80011c0:	1ad3      	subs	r3, r2, r3
 80011c2:	68fa      	ldr	r2, [r7, #12]
 80011c4:	429a      	cmp	r2, r3
 80011c6:	d8f7      	bhi.n	80011b8 <HAL_Delay+0x28>
  {
  }
}
 80011c8:	bf00      	nop
 80011ca:	3710      	adds	r7, #16
 80011cc:	46bd      	mov	sp, r7
 80011ce:	bd80      	pop	{r7, pc}
 80011d0:	200003f0 	.word	0x200003f0

080011d4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011d4:	b480      	push	{r7}
 80011d6:	b085      	sub	sp, #20
 80011d8:	af00      	add	r7, sp, #0
 80011da:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	f003 0307 	and.w	r3, r3, #7
 80011e2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80011e4:	4b0c      	ldr	r3, [pc, #48]	; (8001218 <__NVIC_SetPriorityGrouping+0x44>)
 80011e6:	68db      	ldr	r3, [r3, #12]
 80011e8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80011ea:	68ba      	ldr	r2, [r7, #8]
 80011ec:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80011f0:	4013      	ands	r3, r2
 80011f2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80011f4:	68fb      	ldr	r3, [r7, #12]
 80011f6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80011f8:	68bb      	ldr	r3, [r7, #8]
 80011fa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80011fc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001200:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001204:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001206:	4a04      	ldr	r2, [pc, #16]	; (8001218 <__NVIC_SetPriorityGrouping+0x44>)
 8001208:	68bb      	ldr	r3, [r7, #8]
 800120a:	60d3      	str	r3, [r2, #12]
}
 800120c:	bf00      	nop
 800120e:	3714      	adds	r7, #20
 8001210:	46bd      	mov	sp, r7
 8001212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001216:	4770      	bx	lr
 8001218:	e000ed00 	.word	0xe000ed00

0800121c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800121c:	b480      	push	{r7}
 800121e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001220:	4b04      	ldr	r3, [pc, #16]	; (8001234 <__NVIC_GetPriorityGrouping+0x18>)
 8001222:	68db      	ldr	r3, [r3, #12]
 8001224:	0a1b      	lsrs	r3, r3, #8
 8001226:	f003 0307 	and.w	r3, r3, #7
}
 800122a:	4618      	mov	r0, r3
 800122c:	46bd      	mov	sp, r7
 800122e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001232:	4770      	bx	lr
 8001234:	e000ed00 	.word	0xe000ed00

08001238 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001238:	b480      	push	{r7}
 800123a:	b083      	sub	sp, #12
 800123c:	af00      	add	r7, sp, #0
 800123e:	4603      	mov	r3, r0
 8001240:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001242:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001246:	2b00      	cmp	r3, #0
 8001248:	db0b      	blt.n	8001262 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800124a:	79fb      	ldrb	r3, [r7, #7]
 800124c:	f003 021f 	and.w	r2, r3, #31
 8001250:	4907      	ldr	r1, [pc, #28]	; (8001270 <__NVIC_EnableIRQ+0x38>)
 8001252:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001256:	095b      	lsrs	r3, r3, #5
 8001258:	2001      	movs	r0, #1
 800125a:	fa00 f202 	lsl.w	r2, r0, r2
 800125e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001262:	bf00      	nop
 8001264:	370c      	adds	r7, #12
 8001266:	46bd      	mov	sp, r7
 8001268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126c:	4770      	bx	lr
 800126e:	bf00      	nop
 8001270:	e000e100 	.word	0xe000e100

08001274 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001274:	b480      	push	{r7}
 8001276:	b083      	sub	sp, #12
 8001278:	af00      	add	r7, sp, #0
 800127a:	4603      	mov	r3, r0
 800127c:	6039      	str	r1, [r7, #0]
 800127e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001280:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001284:	2b00      	cmp	r3, #0
 8001286:	db0a      	blt.n	800129e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001288:	683b      	ldr	r3, [r7, #0]
 800128a:	b2da      	uxtb	r2, r3
 800128c:	490c      	ldr	r1, [pc, #48]	; (80012c0 <__NVIC_SetPriority+0x4c>)
 800128e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001292:	0112      	lsls	r2, r2, #4
 8001294:	b2d2      	uxtb	r2, r2
 8001296:	440b      	add	r3, r1
 8001298:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800129c:	e00a      	b.n	80012b4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800129e:	683b      	ldr	r3, [r7, #0]
 80012a0:	b2da      	uxtb	r2, r3
 80012a2:	4908      	ldr	r1, [pc, #32]	; (80012c4 <__NVIC_SetPriority+0x50>)
 80012a4:	79fb      	ldrb	r3, [r7, #7]
 80012a6:	f003 030f 	and.w	r3, r3, #15
 80012aa:	3b04      	subs	r3, #4
 80012ac:	0112      	lsls	r2, r2, #4
 80012ae:	b2d2      	uxtb	r2, r2
 80012b0:	440b      	add	r3, r1
 80012b2:	761a      	strb	r2, [r3, #24]
}
 80012b4:	bf00      	nop
 80012b6:	370c      	adds	r7, #12
 80012b8:	46bd      	mov	sp, r7
 80012ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012be:	4770      	bx	lr
 80012c0:	e000e100 	.word	0xe000e100
 80012c4:	e000ed00 	.word	0xe000ed00

080012c8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012c8:	b480      	push	{r7}
 80012ca:	b089      	sub	sp, #36	; 0x24
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	60f8      	str	r0, [r7, #12]
 80012d0:	60b9      	str	r1, [r7, #8]
 80012d2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80012d4:	68fb      	ldr	r3, [r7, #12]
 80012d6:	f003 0307 	and.w	r3, r3, #7
 80012da:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80012dc:	69fb      	ldr	r3, [r7, #28]
 80012de:	f1c3 0307 	rsb	r3, r3, #7
 80012e2:	2b04      	cmp	r3, #4
 80012e4:	bf28      	it	cs
 80012e6:	2304      	movcs	r3, #4
 80012e8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80012ea:	69fb      	ldr	r3, [r7, #28]
 80012ec:	3304      	adds	r3, #4
 80012ee:	2b06      	cmp	r3, #6
 80012f0:	d902      	bls.n	80012f8 <NVIC_EncodePriority+0x30>
 80012f2:	69fb      	ldr	r3, [r7, #28]
 80012f4:	3b03      	subs	r3, #3
 80012f6:	e000      	b.n	80012fa <NVIC_EncodePriority+0x32>
 80012f8:	2300      	movs	r3, #0
 80012fa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012fc:	f04f 32ff 	mov.w	r2, #4294967295
 8001300:	69bb      	ldr	r3, [r7, #24]
 8001302:	fa02 f303 	lsl.w	r3, r2, r3
 8001306:	43da      	mvns	r2, r3
 8001308:	68bb      	ldr	r3, [r7, #8]
 800130a:	401a      	ands	r2, r3
 800130c:	697b      	ldr	r3, [r7, #20]
 800130e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001310:	f04f 31ff 	mov.w	r1, #4294967295
 8001314:	697b      	ldr	r3, [r7, #20]
 8001316:	fa01 f303 	lsl.w	r3, r1, r3
 800131a:	43d9      	mvns	r1, r3
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001320:	4313      	orrs	r3, r2
         );
}
 8001322:	4618      	mov	r0, r3
 8001324:	3724      	adds	r7, #36	; 0x24
 8001326:	46bd      	mov	sp, r7
 8001328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800132c:	4770      	bx	lr
	...

08001330 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	b082      	sub	sp, #8
 8001334:	af00      	add	r7, sp, #0
 8001336:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	3b01      	subs	r3, #1
 800133c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001340:	d301      	bcc.n	8001346 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001342:	2301      	movs	r3, #1
 8001344:	e00f      	b.n	8001366 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001346:	4a0a      	ldr	r2, [pc, #40]	; (8001370 <SysTick_Config+0x40>)
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	3b01      	subs	r3, #1
 800134c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800134e:	210f      	movs	r1, #15
 8001350:	f04f 30ff 	mov.w	r0, #4294967295
 8001354:	f7ff ff8e 	bl	8001274 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001358:	4b05      	ldr	r3, [pc, #20]	; (8001370 <SysTick_Config+0x40>)
 800135a:	2200      	movs	r2, #0
 800135c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800135e:	4b04      	ldr	r3, [pc, #16]	; (8001370 <SysTick_Config+0x40>)
 8001360:	2207      	movs	r2, #7
 8001362:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001364:	2300      	movs	r3, #0
}
 8001366:	4618      	mov	r0, r3
 8001368:	3708      	adds	r7, #8
 800136a:	46bd      	mov	sp, r7
 800136c:	bd80      	pop	{r7, pc}
 800136e:	bf00      	nop
 8001370:	e000e010 	.word	0xe000e010

08001374 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001374:	b580      	push	{r7, lr}
 8001376:	b082      	sub	sp, #8
 8001378:	af00      	add	r7, sp, #0
 800137a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800137c:	6878      	ldr	r0, [r7, #4]
 800137e:	f7ff ff29 	bl	80011d4 <__NVIC_SetPriorityGrouping>
}
 8001382:	bf00      	nop
 8001384:	3708      	adds	r7, #8
 8001386:	46bd      	mov	sp, r7
 8001388:	bd80      	pop	{r7, pc}

0800138a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800138a:	b580      	push	{r7, lr}
 800138c:	b086      	sub	sp, #24
 800138e:	af00      	add	r7, sp, #0
 8001390:	4603      	mov	r3, r0
 8001392:	60b9      	str	r1, [r7, #8]
 8001394:	607a      	str	r2, [r7, #4]
 8001396:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001398:	2300      	movs	r3, #0
 800139a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800139c:	f7ff ff3e 	bl	800121c <__NVIC_GetPriorityGrouping>
 80013a0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80013a2:	687a      	ldr	r2, [r7, #4]
 80013a4:	68b9      	ldr	r1, [r7, #8]
 80013a6:	6978      	ldr	r0, [r7, #20]
 80013a8:	f7ff ff8e 	bl	80012c8 <NVIC_EncodePriority>
 80013ac:	4602      	mov	r2, r0
 80013ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80013b2:	4611      	mov	r1, r2
 80013b4:	4618      	mov	r0, r3
 80013b6:	f7ff ff5d 	bl	8001274 <__NVIC_SetPriority>
}
 80013ba:	bf00      	nop
 80013bc:	3718      	adds	r7, #24
 80013be:	46bd      	mov	sp, r7
 80013c0:	bd80      	pop	{r7, pc}

080013c2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013c2:	b580      	push	{r7, lr}
 80013c4:	b082      	sub	sp, #8
 80013c6:	af00      	add	r7, sp, #0
 80013c8:	4603      	mov	r3, r0
 80013ca:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80013cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013d0:	4618      	mov	r0, r3
 80013d2:	f7ff ff31 	bl	8001238 <__NVIC_EnableIRQ>
}
 80013d6:	bf00      	nop
 80013d8:	3708      	adds	r7, #8
 80013da:	46bd      	mov	sp, r7
 80013dc:	bd80      	pop	{r7, pc}

080013de <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80013de:	b580      	push	{r7, lr}
 80013e0:	b082      	sub	sp, #8
 80013e2:	af00      	add	r7, sp, #0
 80013e4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80013e6:	6878      	ldr	r0, [r7, #4]
 80013e8:	f7ff ffa2 	bl	8001330 <SysTick_Config>
 80013ec:	4603      	mov	r3, r0
}
 80013ee:	4618      	mov	r0, r3
 80013f0:	3708      	adds	r7, #8
 80013f2:	46bd      	mov	sp, r7
 80013f4:	bd80      	pop	{r7, pc}
	...

080013f8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80013f8:	b480      	push	{r7}
 80013fa:	b087      	sub	sp, #28
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	6078      	str	r0, [r7, #4]
 8001400:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001402:	2300      	movs	r3, #0
 8001404:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001406:	e154      	b.n	80016b2 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001408:	683b      	ldr	r3, [r7, #0]
 800140a:	681a      	ldr	r2, [r3, #0]
 800140c:	2101      	movs	r1, #1
 800140e:	697b      	ldr	r3, [r7, #20]
 8001410:	fa01 f303 	lsl.w	r3, r1, r3
 8001414:	4013      	ands	r3, r2
 8001416:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001418:	68fb      	ldr	r3, [r7, #12]
 800141a:	2b00      	cmp	r3, #0
 800141c:	f000 8146 	beq.w	80016ac <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001420:	683b      	ldr	r3, [r7, #0]
 8001422:	685b      	ldr	r3, [r3, #4]
 8001424:	2b01      	cmp	r3, #1
 8001426:	d00b      	beq.n	8001440 <HAL_GPIO_Init+0x48>
 8001428:	683b      	ldr	r3, [r7, #0]
 800142a:	685b      	ldr	r3, [r3, #4]
 800142c:	2b02      	cmp	r3, #2
 800142e:	d007      	beq.n	8001440 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001430:	683b      	ldr	r3, [r7, #0]
 8001432:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001434:	2b11      	cmp	r3, #17
 8001436:	d003      	beq.n	8001440 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001438:	683b      	ldr	r3, [r7, #0]
 800143a:	685b      	ldr	r3, [r3, #4]
 800143c:	2b12      	cmp	r3, #18
 800143e:	d130      	bne.n	80014a2 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	689b      	ldr	r3, [r3, #8]
 8001444:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001446:	697b      	ldr	r3, [r7, #20]
 8001448:	005b      	lsls	r3, r3, #1
 800144a:	2203      	movs	r2, #3
 800144c:	fa02 f303 	lsl.w	r3, r2, r3
 8001450:	43db      	mvns	r3, r3
 8001452:	693a      	ldr	r2, [r7, #16]
 8001454:	4013      	ands	r3, r2
 8001456:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001458:	683b      	ldr	r3, [r7, #0]
 800145a:	68da      	ldr	r2, [r3, #12]
 800145c:	697b      	ldr	r3, [r7, #20]
 800145e:	005b      	lsls	r3, r3, #1
 8001460:	fa02 f303 	lsl.w	r3, r2, r3
 8001464:	693a      	ldr	r2, [r7, #16]
 8001466:	4313      	orrs	r3, r2
 8001468:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	693a      	ldr	r2, [r7, #16]
 800146e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	685b      	ldr	r3, [r3, #4]
 8001474:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001476:	2201      	movs	r2, #1
 8001478:	697b      	ldr	r3, [r7, #20]
 800147a:	fa02 f303 	lsl.w	r3, r2, r3
 800147e:	43db      	mvns	r3, r3
 8001480:	693a      	ldr	r2, [r7, #16]
 8001482:	4013      	ands	r3, r2
 8001484:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8001486:	683b      	ldr	r3, [r7, #0]
 8001488:	685b      	ldr	r3, [r3, #4]
 800148a:	091b      	lsrs	r3, r3, #4
 800148c:	f003 0201 	and.w	r2, r3, #1
 8001490:	697b      	ldr	r3, [r7, #20]
 8001492:	fa02 f303 	lsl.w	r3, r2, r3
 8001496:	693a      	ldr	r2, [r7, #16]
 8001498:	4313      	orrs	r3, r2
 800149a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	693a      	ldr	r2, [r7, #16]
 80014a0:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	68db      	ldr	r3, [r3, #12]
 80014a6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80014a8:	697b      	ldr	r3, [r7, #20]
 80014aa:	005b      	lsls	r3, r3, #1
 80014ac:	2203      	movs	r2, #3
 80014ae:	fa02 f303 	lsl.w	r3, r2, r3
 80014b2:	43db      	mvns	r3, r3
 80014b4:	693a      	ldr	r2, [r7, #16]
 80014b6:	4013      	ands	r3, r2
 80014b8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80014ba:	683b      	ldr	r3, [r7, #0]
 80014bc:	689a      	ldr	r2, [r3, #8]
 80014be:	697b      	ldr	r3, [r7, #20]
 80014c0:	005b      	lsls	r3, r3, #1
 80014c2:	fa02 f303 	lsl.w	r3, r2, r3
 80014c6:	693a      	ldr	r2, [r7, #16]
 80014c8:	4313      	orrs	r3, r2
 80014ca:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	693a      	ldr	r2, [r7, #16]
 80014d0:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80014d2:	683b      	ldr	r3, [r7, #0]
 80014d4:	685b      	ldr	r3, [r3, #4]
 80014d6:	2b02      	cmp	r3, #2
 80014d8:	d003      	beq.n	80014e2 <HAL_GPIO_Init+0xea>
 80014da:	683b      	ldr	r3, [r7, #0]
 80014dc:	685b      	ldr	r3, [r3, #4]
 80014de:	2b12      	cmp	r3, #18
 80014e0:	d123      	bne.n	800152a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80014e2:	697b      	ldr	r3, [r7, #20]
 80014e4:	08da      	lsrs	r2, r3, #3
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	3208      	adds	r2, #8
 80014ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80014ee:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80014f0:	697b      	ldr	r3, [r7, #20]
 80014f2:	f003 0307 	and.w	r3, r3, #7
 80014f6:	009b      	lsls	r3, r3, #2
 80014f8:	220f      	movs	r2, #15
 80014fa:	fa02 f303 	lsl.w	r3, r2, r3
 80014fe:	43db      	mvns	r3, r3
 8001500:	693a      	ldr	r2, [r7, #16]
 8001502:	4013      	ands	r3, r2
 8001504:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001506:	683b      	ldr	r3, [r7, #0]
 8001508:	691a      	ldr	r2, [r3, #16]
 800150a:	697b      	ldr	r3, [r7, #20]
 800150c:	f003 0307 	and.w	r3, r3, #7
 8001510:	009b      	lsls	r3, r3, #2
 8001512:	fa02 f303 	lsl.w	r3, r2, r3
 8001516:	693a      	ldr	r2, [r7, #16]
 8001518:	4313      	orrs	r3, r2
 800151a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800151c:	697b      	ldr	r3, [r7, #20]
 800151e:	08da      	lsrs	r2, r3, #3
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	3208      	adds	r2, #8
 8001524:	6939      	ldr	r1, [r7, #16]
 8001526:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001530:	697b      	ldr	r3, [r7, #20]
 8001532:	005b      	lsls	r3, r3, #1
 8001534:	2203      	movs	r2, #3
 8001536:	fa02 f303 	lsl.w	r3, r2, r3
 800153a:	43db      	mvns	r3, r3
 800153c:	693a      	ldr	r2, [r7, #16]
 800153e:	4013      	ands	r3, r2
 8001540:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001542:	683b      	ldr	r3, [r7, #0]
 8001544:	685b      	ldr	r3, [r3, #4]
 8001546:	f003 0203 	and.w	r2, r3, #3
 800154a:	697b      	ldr	r3, [r7, #20]
 800154c:	005b      	lsls	r3, r3, #1
 800154e:	fa02 f303 	lsl.w	r3, r2, r3
 8001552:	693a      	ldr	r2, [r7, #16]
 8001554:	4313      	orrs	r3, r2
 8001556:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	693a      	ldr	r2, [r7, #16]
 800155c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800155e:	683b      	ldr	r3, [r7, #0]
 8001560:	685b      	ldr	r3, [r3, #4]
 8001562:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001566:	2b00      	cmp	r3, #0
 8001568:	f000 80a0 	beq.w	80016ac <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800156c:	4b58      	ldr	r3, [pc, #352]	; (80016d0 <HAL_GPIO_Init+0x2d8>)
 800156e:	699b      	ldr	r3, [r3, #24]
 8001570:	4a57      	ldr	r2, [pc, #348]	; (80016d0 <HAL_GPIO_Init+0x2d8>)
 8001572:	f043 0301 	orr.w	r3, r3, #1
 8001576:	6193      	str	r3, [r2, #24]
 8001578:	4b55      	ldr	r3, [pc, #340]	; (80016d0 <HAL_GPIO_Init+0x2d8>)
 800157a:	699b      	ldr	r3, [r3, #24]
 800157c:	f003 0301 	and.w	r3, r3, #1
 8001580:	60bb      	str	r3, [r7, #8]
 8001582:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001584:	4a53      	ldr	r2, [pc, #332]	; (80016d4 <HAL_GPIO_Init+0x2dc>)
 8001586:	697b      	ldr	r3, [r7, #20]
 8001588:	089b      	lsrs	r3, r3, #2
 800158a:	3302      	adds	r3, #2
 800158c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001590:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001592:	697b      	ldr	r3, [r7, #20]
 8001594:	f003 0303 	and.w	r3, r3, #3
 8001598:	009b      	lsls	r3, r3, #2
 800159a:	220f      	movs	r2, #15
 800159c:	fa02 f303 	lsl.w	r3, r2, r3
 80015a0:	43db      	mvns	r3, r3
 80015a2:	693a      	ldr	r2, [r7, #16]
 80015a4:	4013      	ands	r3, r2
 80015a6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80015ae:	d019      	beq.n	80015e4 <HAL_GPIO_Init+0x1ec>
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	4a49      	ldr	r2, [pc, #292]	; (80016d8 <HAL_GPIO_Init+0x2e0>)
 80015b4:	4293      	cmp	r3, r2
 80015b6:	d013      	beq.n	80015e0 <HAL_GPIO_Init+0x1e8>
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	4a48      	ldr	r2, [pc, #288]	; (80016dc <HAL_GPIO_Init+0x2e4>)
 80015bc:	4293      	cmp	r3, r2
 80015be:	d00d      	beq.n	80015dc <HAL_GPIO_Init+0x1e4>
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	4a47      	ldr	r2, [pc, #284]	; (80016e0 <HAL_GPIO_Init+0x2e8>)
 80015c4:	4293      	cmp	r3, r2
 80015c6:	d007      	beq.n	80015d8 <HAL_GPIO_Init+0x1e0>
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	4a46      	ldr	r2, [pc, #280]	; (80016e4 <HAL_GPIO_Init+0x2ec>)
 80015cc:	4293      	cmp	r3, r2
 80015ce:	d101      	bne.n	80015d4 <HAL_GPIO_Init+0x1dc>
 80015d0:	2304      	movs	r3, #4
 80015d2:	e008      	b.n	80015e6 <HAL_GPIO_Init+0x1ee>
 80015d4:	2305      	movs	r3, #5
 80015d6:	e006      	b.n	80015e6 <HAL_GPIO_Init+0x1ee>
 80015d8:	2303      	movs	r3, #3
 80015da:	e004      	b.n	80015e6 <HAL_GPIO_Init+0x1ee>
 80015dc:	2302      	movs	r3, #2
 80015de:	e002      	b.n	80015e6 <HAL_GPIO_Init+0x1ee>
 80015e0:	2301      	movs	r3, #1
 80015e2:	e000      	b.n	80015e6 <HAL_GPIO_Init+0x1ee>
 80015e4:	2300      	movs	r3, #0
 80015e6:	697a      	ldr	r2, [r7, #20]
 80015e8:	f002 0203 	and.w	r2, r2, #3
 80015ec:	0092      	lsls	r2, r2, #2
 80015ee:	4093      	lsls	r3, r2
 80015f0:	693a      	ldr	r2, [r7, #16]
 80015f2:	4313      	orrs	r3, r2
 80015f4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80015f6:	4937      	ldr	r1, [pc, #220]	; (80016d4 <HAL_GPIO_Init+0x2dc>)
 80015f8:	697b      	ldr	r3, [r7, #20]
 80015fa:	089b      	lsrs	r3, r3, #2
 80015fc:	3302      	adds	r3, #2
 80015fe:	693a      	ldr	r2, [r7, #16]
 8001600:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001604:	4b38      	ldr	r3, [pc, #224]	; (80016e8 <HAL_GPIO_Init+0x2f0>)
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800160a:	68fb      	ldr	r3, [r7, #12]
 800160c:	43db      	mvns	r3, r3
 800160e:	693a      	ldr	r2, [r7, #16]
 8001610:	4013      	ands	r3, r2
 8001612:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001614:	683b      	ldr	r3, [r7, #0]
 8001616:	685b      	ldr	r3, [r3, #4]
 8001618:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800161c:	2b00      	cmp	r3, #0
 800161e:	d003      	beq.n	8001628 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8001620:	693a      	ldr	r2, [r7, #16]
 8001622:	68fb      	ldr	r3, [r7, #12]
 8001624:	4313      	orrs	r3, r2
 8001626:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001628:	4a2f      	ldr	r2, [pc, #188]	; (80016e8 <HAL_GPIO_Init+0x2f0>)
 800162a:	693b      	ldr	r3, [r7, #16]
 800162c:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800162e:	4b2e      	ldr	r3, [pc, #184]	; (80016e8 <HAL_GPIO_Init+0x2f0>)
 8001630:	685b      	ldr	r3, [r3, #4]
 8001632:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001634:	68fb      	ldr	r3, [r7, #12]
 8001636:	43db      	mvns	r3, r3
 8001638:	693a      	ldr	r2, [r7, #16]
 800163a:	4013      	ands	r3, r2
 800163c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800163e:	683b      	ldr	r3, [r7, #0]
 8001640:	685b      	ldr	r3, [r3, #4]
 8001642:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001646:	2b00      	cmp	r3, #0
 8001648:	d003      	beq.n	8001652 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 800164a:	693a      	ldr	r2, [r7, #16]
 800164c:	68fb      	ldr	r3, [r7, #12]
 800164e:	4313      	orrs	r3, r2
 8001650:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001652:	4a25      	ldr	r2, [pc, #148]	; (80016e8 <HAL_GPIO_Init+0x2f0>)
 8001654:	693b      	ldr	r3, [r7, #16]
 8001656:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001658:	4b23      	ldr	r3, [pc, #140]	; (80016e8 <HAL_GPIO_Init+0x2f0>)
 800165a:	689b      	ldr	r3, [r3, #8]
 800165c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800165e:	68fb      	ldr	r3, [r7, #12]
 8001660:	43db      	mvns	r3, r3
 8001662:	693a      	ldr	r2, [r7, #16]
 8001664:	4013      	ands	r3, r2
 8001666:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001668:	683b      	ldr	r3, [r7, #0]
 800166a:	685b      	ldr	r3, [r3, #4]
 800166c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001670:	2b00      	cmp	r3, #0
 8001672:	d003      	beq.n	800167c <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8001674:	693a      	ldr	r2, [r7, #16]
 8001676:	68fb      	ldr	r3, [r7, #12]
 8001678:	4313      	orrs	r3, r2
 800167a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800167c:	4a1a      	ldr	r2, [pc, #104]	; (80016e8 <HAL_GPIO_Init+0x2f0>)
 800167e:	693b      	ldr	r3, [r7, #16]
 8001680:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001682:	4b19      	ldr	r3, [pc, #100]	; (80016e8 <HAL_GPIO_Init+0x2f0>)
 8001684:	68db      	ldr	r3, [r3, #12]
 8001686:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001688:	68fb      	ldr	r3, [r7, #12]
 800168a:	43db      	mvns	r3, r3
 800168c:	693a      	ldr	r2, [r7, #16]
 800168e:	4013      	ands	r3, r2
 8001690:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001692:	683b      	ldr	r3, [r7, #0]
 8001694:	685b      	ldr	r3, [r3, #4]
 8001696:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800169a:	2b00      	cmp	r3, #0
 800169c:	d003      	beq.n	80016a6 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800169e:	693a      	ldr	r2, [r7, #16]
 80016a0:	68fb      	ldr	r3, [r7, #12]
 80016a2:	4313      	orrs	r3, r2
 80016a4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80016a6:	4a10      	ldr	r2, [pc, #64]	; (80016e8 <HAL_GPIO_Init+0x2f0>)
 80016a8:	693b      	ldr	r3, [r7, #16]
 80016aa:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80016ac:	697b      	ldr	r3, [r7, #20]
 80016ae:	3301      	adds	r3, #1
 80016b0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80016b2:	683b      	ldr	r3, [r7, #0]
 80016b4:	681a      	ldr	r2, [r3, #0]
 80016b6:	697b      	ldr	r3, [r7, #20]
 80016b8:	fa22 f303 	lsr.w	r3, r2, r3
 80016bc:	2b00      	cmp	r3, #0
 80016be:	f47f aea3 	bne.w	8001408 <HAL_GPIO_Init+0x10>
  }
}
 80016c2:	bf00      	nop
 80016c4:	371c      	adds	r7, #28
 80016c6:	46bd      	mov	sp, r7
 80016c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016cc:	4770      	bx	lr
 80016ce:	bf00      	nop
 80016d0:	40021000 	.word	0x40021000
 80016d4:	40010000 	.word	0x40010000
 80016d8:	48000400 	.word	0x48000400
 80016dc:	48000800 	.word	0x48000800
 80016e0:	48000c00 	.word	0x48000c00
 80016e4:	48001000 	.word	0x48001000
 80016e8:	40010400 	.word	0x40010400

080016ec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80016ec:	b480      	push	{r7}
 80016ee:	b083      	sub	sp, #12
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	6078      	str	r0, [r7, #4]
 80016f4:	460b      	mov	r3, r1
 80016f6:	807b      	strh	r3, [r7, #2]
 80016f8:	4613      	mov	r3, r2
 80016fa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80016fc:	787b      	ldrb	r3, [r7, #1]
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d003      	beq.n	800170a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001702:	887a      	ldrh	r2, [r7, #2]
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001708:	e002      	b.n	8001710 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800170a:	887a      	ldrh	r2, [r7, #2]
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001710:	bf00      	nop
 8001712:	370c      	adds	r7, #12
 8001714:	46bd      	mov	sp, r7
 8001716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171a:	4770      	bx	lr

0800171c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800171c:	b580      	push	{r7, lr}
 800171e:	b082      	sub	sp, #8
 8001720:	af00      	add	r7, sp, #0
 8001722:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	2b00      	cmp	r3, #0
 8001728:	d101      	bne.n	800172e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800172a:	2301      	movs	r3, #1
 800172c:	e081      	b.n	8001832 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001734:	b2db      	uxtb	r3, r3
 8001736:	2b00      	cmp	r3, #0
 8001738:	d106      	bne.n	8001748 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	2200      	movs	r2, #0
 800173e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001742:	6878      	ldr	r0, [r7, #4]
 8001744:	f7ff fb8e 	bl	8000e64 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	2224      	movs	r2, #36	; 0x24
 800174c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	681a      	ldr	r2, [r3, #0]
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	f022 0201 	bic.w	r2, r2, #1
 800175e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	685a      	ldr	r2, [r3, #4]
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800176c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	689a      	ldr	r2, [r3, #8]
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800177c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	68db      	ldr	r3, [r3, #12]
 8001782:	2b01      	cmp	r3, #1
 8001784:	d107      	bne.n	8001796 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	689a      	ldr	r2, [r3, #8]
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001792:	609a      	str	r2, [r3, #8]
 8001794:	e006      	b.n	80017a4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	689a      	ldr	r2, [r3, #8]
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80017a2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	68db      	ldr	r3, [r3, #12]
 80017a8:	2b02      	cmp	r3, #2
 80017aa:	d104      	bne.n	80017b6 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80017b4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	685b      	ldr	r3, [r3, #4]
 80017bc:	687a      	ldr	r2, [r7, #4]
 80017be:	6812      	ldr	r2, [r2, #0]
 80017c0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80017c4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80017c8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	68da      	ldr	r2, [r3, #12]
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80017d8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	691a      	ldr	r2, [r3, #16]
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	695b      	ldr	r3, [r3, #20]
 80017e2:	ea42 0103 	orr.w	r1, r2, r3
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	699b      	ldr	r3, [r3, #24]
 80017ea:	021a      	lsls	r2, r3, #8
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	430a      	orrs	r2, r1
 80017f2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	69d9      	ldr	r1, [r3, #28]
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	6a1a      	ldr	r2, [r3, #32]
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	430a      	orrs	r2, r1
 8001802:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	681a      	ldr	r2, [r3, #0]
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	f042 0201 	orr.w	r2, r2, #1
 8001812:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	2200      	movs	r2, #0
 8001818:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	2220      	movs	r2, #32
 800181e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	2200      	movs	r2, #0
 8001826:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	2200      	movs	r2, #0
 800182c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001830:	2300      	movs	r3, #0
}
 8001832:	4618      	mov	r0, r3
 8001834:	3708      	adds	r7, #8
 8001836:	46bd      	mov	sp, r7
 8001838:	bd80      	pop	{r7, pc}

0800183a <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800183a:	b480      	push	{r7}
 800183c:	b083      	sub	sp, #12
 800183e:	af00      	add	r7, sp, #0
 8001840:	6078      	str	r0, [r7, #4]
 8001842:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800184a:	b2db      	uxtb	r3, r3
 800184c:	2b20      	cmp	r3, #32
 800184e:	d138      	bne.n	80018c2 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001856:	2b01      	cmp	r3, #1
 8001858:	d101      	bne.n	800185e <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800185a:	2302      	movs	r3, #2
 800185c:	e032      	b.n	80018c4 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	2201      	movs	r2, #1
 8001862:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	2224      	movs	r2, #36	; 0x24
 800186a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	681a      	ldr	r2, [r3, #0]
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	f022 0201 	bic.w	r2, r2, #1
 800187c:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	681a      	ldr	r2, [r3, #0]
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800188c:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	6819      	ldr	r1, [r3, #0]
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	683a      	ldr	r2, [r7, #0]
 800189a:	430a      	orrs	r2, r1
 800189c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	681a      	ldr	r2, [r3, #0]
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	f042 0201 	orr.w	r2, r2, #1
 80018ac:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	2220      	movs	r2, #32
 80018b2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	2200      	movs	r2, #0
 80018ba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80018be:	2300      	movs	r3, #0
 80018c0:	e000      	b.n	80018c4 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80018c2:	2302      	movs	r3, #2
  }
}
 80018c4:	4618      	mov	r0, r3
 80018c6:	370c      	adds	r7, #12
 80018c8:	46bd      	mov	sp, r7
 80018ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ce:	4770      	bx	lr

080018d0 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80018d0:	b480      	push	{r7}
 80018d2:	b085      	sub	sp, #20
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	6078      	str	r0, [r7, #4]
 80018d8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80018e0:	b2db      	uxtb	r3, r3
 80018e2:	2b20      	cmp	r3, #32
 80018e4:	d139      	bne.n	800195a <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80018ec:	2b01      	cmp	r3, #1
 80018ee:	d101      	bne.n	80018f4 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80018f0:	2302      	movs	r3, #2
 80018f2:	e033      	b.n	800195c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	2201      	movs	r2, #1
 80018f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	2224      	movs	r2, #36	; 0x24
 8001900:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	681a      	ldr	r2, [r3, #0]
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	f022 0201 	bic.w	r2, r2, #1
 8001912:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001922:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001924:	683b      	ldr	r3, [r7, #0]
 8001926:	021b      	lsls	r3, r3, #8
 8001928:	68fa      	ldr	r2, [r7, #12]
 800192a:	4313      	orrs	r3, r2
 800192c:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	68fa      	ldr	r2, [r7, #12]
 8001934:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	681a      	ldr	r2, [r3, #0]
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	f042 0201 	orr.w	r2, r2, #1
 8001944:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	2220      	movs	r2, #32
 800194a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	2200      	movs	r2, #0
 8001952:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001956:	2300      	movs	r3, #0
 8001958:	e000      	b.n	800195c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800195a:	2302      	movs	r3, #2
  }
}
 800195c:	4618      	mov	r0, r3
 800195e:	3714      	adds	r7, #20
 8001960:	46bd      	mov	sp, r7
 8001962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001966:	4770      	bx	lr

08001968 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001968:	b5f0      	push	{r4, r5, r6, r7, lr}
 800196a:	b08b      	sub	sp, #44	; 0x2c
 800196c:	af06      	add	r7, sp, #24
 800196e:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	2b00      	cmp	r3, #0
 8001974:	d101      	bne.n	800197a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001976:	2301      	movs	r3, #1
 8001978:	e0d0      	b.n	8001b1c <HAL_PCD_Init+0x1b4>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8001980:	b2db      	uxtb	r3, r3
 8001982:	2b00      	cmp	r3, #0
 8001984:	d106      	bne.n	8001994 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	2200      	movs	r2, #0
 800198a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800198e:	6878      	ldr	r0, [r7, #4]
 8001990:	f006 fc0c 	bl	80081ac <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	2203      	movs	r2, #3
 8001998:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	4618      	mov	r0, r3
 80019a2:	f002 fe2d 	bl	8004600 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80019a6:	2300      	movs	r3, #0
 80019a8:	73fb      	strb	r3, [r7, #15]
 80019aa:	e04c      	b.n	8001a46 <HAL_PCD_Init+0xde>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80019ac:	7bfb      	ldrb	r3, [r7, #15]
 80019ae:	6879      	ldr	r1, [r7, #4]
 80019b0:	1c5a      	adds	r2, r3, #1
 80019b2:	4613      	mov	r3, r2
 80019b4:	009b      	lsls	r3, r3, #2
 80019b6:	4413      	add	r3, r2
 80019b8:	00db      	lsls	r3, r3, #3
 80019ba:	440b      	add	r3, r1
 80019bc:	3301      	adds	r3, #1
 80019be:	2201      	movs	r2, #1
 80019c0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80019c2:	7bfb      	ldrb	r3, [r7, #15]
 80019c4:	6879      	ldr	r1, [r7, #4]
 80019c6:	1c5a      	adds	r2, r3, #1
 80019c8:	4613      	mov	r3, r2
 80019ca:	009b      	lsls	r3, r3, #2
 80019cc:	4413      	add	r3, r2
 80019ce:	00db      	lsls	r3, r3, #3
 80019d0:	440b      	add	r3, r1
 80019d2:	7bfa      	ldrb	r2, [r7, #15]
 80019d4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80019d6:	7bfa      	ldrb	r2, [r7, #15]
 80019d8:	7bfb      	ldrb	r3, [r7, #15]
 80019da:	b298      	uxth	r0, r3
 80019dc:	6879      	ldr	r1, [r7, #4]
 80019de:	4613      	mov	r3, r2
 80019e0:	009b      	lsls	r3, r3, #2
 80019e2:	4413      	add	r3, r2
 80019e4:	00db      	lsls	r3, r3, #3
 80019e6:	440b      	add	r3, r1
 80019e8:	3336      	adds	r3, #54	; 0x36
 80019ea:	4602      	mov	r2, r0
 80019ec:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80019ee:	7bfb      	ldrb	r3, [r7, #15]
 80019f0:	6879      	ldr	r1, [r7, #4]
 80019f2:	1c5a      	adds	r2, r3, #1
 80019f4:	4613      	mov	r3, r2
 80019f6:	009b      	lsls	r3, r3, #2
 80019f8:	4413      	add	r3, r2
 80019fa:	00db      	lsls	r3, r3, #3
 80019fc:	440b      	add	r3, r1
 80019fe:	3303      	adds	r3, #3
 8001a00:	2200      	movs	r2, #0
 8001a02:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001a04:	7bfa      	ldrb	r2, [r7, #15]
 8001a06:	6879      	ldr	r1, [r7, #4]
 8001a08:	4613      	mov	r3, r2
 8001a0a:	009b      	lsls	r3, r3, #2
 8001a0c:	4413      	add	r3, r2
 8001a0e:	00db      	lsls	r3, r3, #3
 8001a10:	440b      	add	r3, r1
 8001a12:	3338      	adds	r3, #56	; 0x38
 8001a14:	2200      	movs	r2, #0
 8001a16:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001a18:	7bfa      	ldrb	r2, [r7, #15]
 8001a1a:	6879      	ldr	r1, [r7, #4]
 8001a1c:	4613      	mov	r3, r2
 8001a1e:	009b      	lsls	r3, r3, #2
 8001a20:	4413      	add	r3, r2
 8001a22:	00db      	lsls	r3, r3, #3
 8001a24:	440b      	add	r3, r1
 8001a26:	333c      	adds	r3, #60	; 0x3c
 8001a28:	2200      	movs	r2, #0
 8001a2a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001a2c:	7bfa      	ldrb	r2, [r7, #15]
 8001a2e:	6879      	ldr	r1, [r7, #4]
 8001a30:	4613      	mov	r3, r2
 8001a32:	009b      	lsls	r3, r3, #2
 8001a34:	4413      	add	r3, r2
 8001a36:	00db      	lsls	r3, r3, #3
 8001a38:	440b      	add	r3, r1
 8001a3a:	3340      	adds	r3, #64	; 0x40
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001a40:	7bfb      	ldrb	r3, [r7, #15]
 8001a42:	3301      	adds	r3, #1
 8001a44:	73fb      	strb	r3, [r7, #15]
 8001a46:	7bfa      	ldrb	r2, [r7, #15]
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	685b      	ldr	r3, [r3, #4]
 8001a4c:	429a      	cmp	r2, r3
 8001a4e:	d3ad      	bcc.n	80019ac <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001a50:	2300      	movs	r3, #0
 8001a52:	73fb      	strb	r3, [r7, #15]
 8001a54:	e044      	b.n	8001ae0 <HAL_PCD_Init+0x178>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001a56:	7bfa      	ldrb	r2, [r7, #15]
 8001a58:	6879      	ldr	r1, [r7, #4]
 8001a5a:	4613      	mov	r3, r2
 8001a5c:	009b      	lsls	r3, r3, #2
 8001a5e:	4413      	add	r3, r2
 8001a60:	00db      	lsls	r3, r3, #3
 8001a62:	440b      	add	r3, r1
 8001a64:	f203 1369 	addw	r3, r3, #361	; 0x169
 8001a68:	2200      	movs	r2, #0
 8001a6a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001a6c:	7bfa      	ldrb	r2, [r7, #15]
 8001a6e:	6879      	ldr	r1, [r7, #4]
 8001a70:	4613      	mov	r3, r2
 8001a72:	009b      	lsls	r3, r3, #2
 8001a74:	4413      	add	r3, r2
 8001a76:	00db      	lsls	r3, r3, #3
 8001a78:	440b      	add	r3, r1
 8001a7a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001a7e:	7bfa      	ldrb	r2, [r7, #15]
 8001a80:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001a82:	7bfa      	ldrb	r2, [r7, #15]
 8001a84:	6879      	ldr	r1, [r7, #4]
 8001a86:	4613      	mov	r3, r2
 8001a88:	009b      	lsls	r3, r3, #2
 8001a8a:	4413      	add	r3, r2
 8001a8c:	00db      	lsls	r3, r3, #3
 8001a8e:	440b      	add	r3, r1
 8001a90:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8001a94:	2200      	movs	r2, #0
 8001a96:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001a98:	7bfa      	ldrb	r2, [r7, #15]
 8001a9a:	6879      	ldr	r1, [r7, #4]
 8001a9c:	4613      	mov	r3, r2
 8001a9e:	009b      	lsls	r3, r3, #2
 8001aa0:	4413      	add	r3, r2
 8001aa2:	00db      	lsls	r3, r3, #3
 8001aa4:	440b      	add	r3, r1
 8001aa6:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8001aaa:	2200      	movs	r2, #0
 8001aac:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001aae:	7bfa      	ldrb	r2, [r7, #15]
 8001ab0:	6879      	ldr	r1, [r7, #4]
 8001ab2:	4613      	mov	r3, r2
 8001ab4:	009b      	lsls	r3, r3, #2
 8001ab6:	4413      	add	r3, r2
 8001ab8:	00db      	lsls	r3, r3, #3
 8001aba:	440b      	add	r3, r1
 8001abc:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001ac4:	7bfa      	ldrb	r2, [r7, #15]
 8001ac6:	6879      	ldr	r1, [r7, #4]
 8001ac8:	4613      	mov	r3, r2
 8001aca:	009b      	lsls	r3, r3, #2
 8001acc:	4413      	add	r3, r2
 8001ace:	00db      	lsls	r3, r3, #3
 8001ad0:	440b      	add	r3, r1
 8001ad2:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001ada:	7bfb      	ldrb	r3, [r7, #15]
 8001adc:	3301      	adds	r3, #1
 8001ade:	73fb      	strb	r3, [r7, #15]
 8001ae0:	7bfa      	ldrb	r2, [r7, #15]
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	685b      	ldr	r3, [r3, #4]
 8001ae6:	429a      	cmp	r2, r3
 8001ae8:	d3b5      	bcc.n	8001a56 <HAL_PCD_Init+0xee>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	603b      	str	r3, [r7, #0]
 8001af0:	687e      	ldr	r6, [r7, #4]
 8001af2:	466d      	mov	r5, sp
 8001af4:	f106 0410 	add.w	r4, r6, #16
 8001af8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001afa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001afc:	6823      	ldr	r3, [r4, #0]
 8001afe:	602b      	str	r3, [r5, #0]
 8001b00:	1d33      	adds	r3, r6, #4
 8001b02:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001b04:	6838      	ldr	r0, [r7, #0]
 8001b06:	f002 fd96 	bl	8004636 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	2201      	movs	r2, #1
 8001b16:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  return HAL_OK;
 8001b1a:	2300      	movs	r3, #0
}
 8001b1c:	4618      	mov	r0, r3
 8001b1e:	3714      	adds	r7, #20
 8001b20:	46bd      	mov	sp, r7
 8001b22:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001b24 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001b24:	b580      	push	{r7, lr}
 8001b26:	b082      	sub	sp, #8
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001b32:	2b01      	cmp	r3, #1
 8001b34:	d101      	bne.n	8001b3a <HAL_PCD_Start+0x16>
 8001b36:	2302      	movs	r3, #2
 8001b38:	e016      	b.n	8001b68 <HAL_PCD_Start+0x44>
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	2201      	movs	r2, #1
 8001b3e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	4618      	mov	r0, r3
 8001b48:	f002 fd43 	bl	80045d2 <USB_EnableGlobalInt>

  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8001b4c:	2101      	movs	r1, #1
 8001b4e:	6878      	ldr	r0, [r7, #4]
 8001b50:	f006 fdca 	bl	80086e8 <HAL_PCDEx_SetConnectionState>

  (void)USB_DevConnect(hpcd->Instance);
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	4618      	mov	r0, r3
 8001b5a:	f004 fd1b 	bl	8006594 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	2200      	movs	r2, #0
 8001b62:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001b66:	2300      	movs	r3, #0
}
 8001b68:	4618      	mov	r0, r3
 8001b6a:	3708      	adds	r7, #8
 8001b6c:	46bd      	mov	sp, r7
 8001b6e:	bd80      	pop	{r7, pc}

08001b70 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001b70:	b580      	push	{r7, lr}
 8001b72:	b082      	sub	sp, #8
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	6078      	str	r0, [r7, #4]
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	4618      	mov	r0, r3
 8001b7e:	f004 fd14 	bl	80065aa <USB_ReadInterrupts>
 8001b82:	4603      	mov	r3, r0
 8001b84:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001b88:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001b8c:	d102      	bne.n	8001b94 <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8001b8e:	6878      	ldr	r0, [r7, #4]
 8001b90:	f000 faf6 	bl	8002180 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	4618      	mov	r0, r3
 8001b9a:	f004 fd06 	bl	80065aa <USB_ReadInterrupts>
 8001b9e:	4603      	mov	r3, r0
 8001ba0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ba4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001ba8:	d112      	bne.n	8001bd0 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001bb2:	b29a      	uxth	r2, r3
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001bbc:	b292      	uxth	r2, r2
 8001bbe:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8001bc2:	6878      	ldr	r0, [r7, #4]
 8001bc4:	f006 fb93 	bl	80082ee <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8001bc8:	2100      	movs	r1, #0
 8001bca:	6878      	ldr	r0, [r7, #4]
 8001bcc:	f000 f8c7 	bl	8001d5e <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	4618      	mov	r0, r3
 8001bd6:	f004 fce8 	bl	80065aa <USB_ReadInterrupts>
 8001bda:	4603      	mov	r3, r0
 8001bdc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001be0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001be4:	d10b      	bne.n	8001bfe <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001bee:	b29a      	uxth	r2, r3
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001bf8:	b292      	uxth	r2, r2
 8001bfa:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	4618      	mov	r0, r3
 8001c04:	f004 fcd1 	bl	80065aa <USB_ReadInterrupts>
 8001c08:	4603      	mov	r3, r0
 8001c0a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001c0e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001c12:	d10b      	bne.n	8001c2c <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001c1c:	b29a      	uxth	r2, r3
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001c26:	b292      	uxth	r2, r2
 8001c28:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	4618      	mov	r0, r3
 8001c32:	f004 fcba 	bl	80065aa <USB_ReadInterrupts>
 8001c36:	4603      	mov	r3, r0
 8001c38:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001c3c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001c40:	d126      	bne.n	8001c90 <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001c4a:	b29a      	uxth	r2, r3
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	f022 0204 	bic.w	r2, r2, #4
 8001c54:	b292      	uxth	r2, r2
 8001c56:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001c62:	b29a      	uxth	r2, r3
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	f022 0208 	bic.w	r2, r2, #8
 8001c6c:	b292      	uxth	r2, r2
 8001c6e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8001c72:	6878      	ldr	r0, [r7, #4]
 8001c74:	f006 fb74 	bl	8008360 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001c80:	b29a      	uxth	r2, r3
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001c8a:	b292      	uxth	r2, r2
 8001c8c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	4618      	mov	r0, r3
 8001c96:	f004 fc88 	bl	80065aa <USB_ReadInterrupts>
 8001c9a:	4603      	mov	r3, r0
 8001c9c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001ca0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001ca4:	d126      	bne.n	8001cf4 <HAL_PCD_IRQHandler+0x184>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001cae:	b29a      	uxth	r2, r3
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	f042 0208 	orr.w	r2, r2, #8
 8001cb8:	b292      	uxth	r2, r2
 8001cba:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001cc6:	b29a      	uxth	r2, r3
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001cd0:	b292      	uxth	r2, r2
 8001cd2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001cde:	b29a      	uxth	r2, r3
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	f042 0204 	orr.w	r2, r2, #4
 8001ce8:	b292      	uxth	r2, r2
 8001cea:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8001cee:	6878      	ldr	r0, [r7, #4]
 8001cf0:	f006 fb1c 	bl	800832c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	4618      	mov	r0, r3
 8001cfa:	f004 fc56 	bl	80065aa <USB_ReadInterrupts>
 8001cfe:	4603      	mov	r3, r0
 8001d00:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001d04:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001d08:	d10e      	bne.n	8001d28 <HAL_PCD_IRQHandler+0x1b8>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001d12:	b29a      	uxth	r2, r3
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001d1c:	b292      	uxth	r2, r2
 8001d1e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8001d22:	6878      	ldr	r0, [r7, #4]
 8001d24:	f006 fad5 	bl	80082d2 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	4618      	mov	r0, r3
 8001d2e:	f004 fc3c 	bl	80065aa <USB_ReadInterrupts>
 8001d32:	4603      	mov	r3, r0
 8001d34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d38:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001d3c:	d10b      	bne.n	8001d56 <HAL_PCD_IRQHandler+0x1e6>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001d46:	b29a      	uxth	r2, r3
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001d50:	b292      	uxth	r2, r2
 8001d52:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 8001d56:	bf00      	nop
 8001d58:	3708      	adds	r7, #8
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	bd80      	pop	{r7, pc}

08001d5e <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001d5e:	b580      	push	{r7, lr}
 8001d60:	b082      	sub	sp, #8
 8001d62:	af00      	add	r7, sp, #0
 8001d64:	6078      	str	r0, [r7, #4]
 8001d66:	460b      	mov	r3, r1
 8001d68:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001d70:	2b01      	cmp	r3, #1
 8001d72:	d101      	bne.n	8001d78 <HAL_PCD_SetAddress+0x1a>
 8001d74:	2302      	movs	r3, #2
 8001d76:	e013      	b.n	8001da0 <HAL_PCD_SetAddress+0x42>
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	2201      	movs	r2, #1
 8001d7c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	78fa      	ldrb	r2, [r7, #3]
 8001d84:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	78fa      	ldrb	r2, [r7, #3]
 8001d8e:	4611      	mov	r1, r2
 8001d90:	4618      	mov	r0, r3
 8001d92:	f004 fbeb 	bl	800656c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	2200      	movs	r2, #0
 8001d9a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001d9e:	2300      	movs	r3, #0
}
 8001da0:	4618      	mov	r0, r3
 8001da2:	3708      	adds	r7, #8
 8001da4:	46bd      	mov	sp, r7
 8001da6:	bd80      	pop	{r7, pc}

08001da8 <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 8001da8:	b580      	push	{r7, lr}
 8001daa:	b084      	sub	sp, #16
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	6078      	str	r0, [r7, #4]
 8001db0:	4608      	mov	r0, r1
 8001db2:	4611      	mov	r1, r2
 8001db4:	461a      	mov	r2, r3
 8001db6:	4603      	mov	r3, r0
 8001db8:	70fb      	strb	r3, [r7, #3]
 8001dba:	460b      	mov	r3, r1
 8001dbc:	803b      	strh	r3, [r7, #0]
 8001dbe:	4613      	mov	r3, r2
 8001dc0:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001dc2:	2300      	movs	r3, #0
 8001dc4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001dc6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	da0e      	bge.n	8001dec <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001dce:	78fb      	ldrb	r3, [r7, #3]
 8001dd0:	f003 0307 	and.w	r3, r3, #7
 8001dd4:	1c5a      	adds	r2, r3, #1
 8001dd6:	4613      	mov	r3, r2
 8001dd8:	009b      	lsls	r3, r3, #2
 8001dda:	4413      	add	r3, r2
 8001ddc:	00db      	lsls	r3, r3, #3
 8001dde:	687a      	ldr	r2, [r7, #4]
 8001de0:	4413      	add	r3, r2
 8001de2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	2201      	movs	r2, #1
 8001de8:	705a      	strb	r2, [r3, #1]
 8001dea:	e00e      	b.n	8001e0a <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001dec:	78fb      	ldrb	r3, [r7, #3]
 8001dee:	f003 0207 	and.w	r2, r3, #7
 8001df2:	4613      	mov	r3, r2
 8001df4:	009b      	lsls	r3, r3, #2
 8001df6:	4413      	add	r3, r2
 8001df8:	00db      	lsls	r3, r3, #3
 8001dfa:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001dfe:	687a      	ldr	r2, [r7, #4]
 8001e00:	4413      	add	r3, r2
 8001e02:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	2200      	movs	r2, #0
 8001e08:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001e0a:	78fb      	ldrb	r3, [r7, #3]
 8001e0c:	f003 0307 	and.w	r3, r3, #7
 8001e10:	b2da      	uxtb	r2, r3
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001e16:	883a      	ldrh	r2, [r7, #0]
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	78ba      	ldrb	r2, [r7, #2]
 8001e20:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	785b      	ldrb	r3, [r3, #1]
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d004      	beq.n	8001e34 <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	781b      	ldrb	r3, [r3, #0]
 8001e2e:	b29a      	uxth	r2, r3
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001e34:	78bb      	ldrb	r3, [r7, #2]
 8001e36:	2b02      	cmp	r3, #2
 8001e38:	d102      	bne.n	8001e40 <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	2200      	movs	r2, #0
 8001e3e:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001e46:	2b01      	cmp	r3, #1
 8001e48:	d101      	bne.n	8001e4e <HAL_PCD_EP_Open+0xa6>
 8001e4a:	2302      	movs	r3, #2
 8001e4c:	e00e      	b.n	8001e6c <HAL_PCD_EP_Open+0xc4>
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	2201      	movs	r2, #1
 8001e52:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	68f9      	ldr	r1, [r7, #12]
 8001e5c:	4618      	mov	r0, r3
 8001e5e:	f002 fc0b 	bl	8004678 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	2200      	movs	r2, #0
 8001e66:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8001e6a:	7afb      	ldrb	r3, [r7, #11]
}
 8001e6c:	4618      	mov	r0, r3
 8001e6e:	3710      	adds	r7, #16
 8001e70:	46bd      	mov	sp, r7
 8001e72:	bd80      	pop	{r7, pc}

08001e74 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001e74:	b580      	push	{r7, lr}
 8001e76:	b084      	sub	sp, #16
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	6078      	str	r0, [r7, #4]
 8001e7c:	460b      	mov	r3, r1
 8001e7e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001e80:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	da0e      	bge.n	8001ea6 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001e88:	78fb      	ldrb	r3, [r7, #3]
 8001e8a:	f003 0307 	and.w	r3, r3, #7
 8001e8e:	1c5a      	adds	r2, r3, #1
 8001e90:	4613      	mov	r3, r2
 8001e92:	009b      	lsls	r3, r3, #2
 8001e94:	4413      	add	r3, r2
 8001e96:	00db      	lsls	r3, r3, #3
 8001e98:	687a      	ldr	r2, [r7, #4]
 8001e9a:	4413      	add	r3, r2
 8001e9c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	2201      	movs	r2, #1
 8001ea2:	705a      	strb	r2, [r3, #1]
 8001ea4:	e00e      	b.n	8001ec4 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001ea6:	78fb      	ldrb	r3, [r7, #3]
 8001ea8:	f003 0207 	and.w	r2, r3, #7
 8001eac:	4613      	mov	r3, r2
 8001eae:	009b      	lsls	r3, r3, #2
 8001eb0:	4413      	add	r3, r2
 8001eb2:	00db      	lsls	r3, r3, #3
 8001eb4:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001eb8:	687a      	ldr	r2, [r7, #4]
 8001eba:	4413      	add	r3, r2
 8001ebc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	2200      	movs	r2, #0
 8001ec2:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8001ec4:	78fb      	ldrb	r3, [r7, #3]
 8001ec6:	f003 0307 	and.w	r3, r3, #7
 8001eca:	b2da      	uxtb	r2, r3
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001ed6:	2b01      	cmp	r3, #1
 8001ed8:	d101      	bne.n	8001ede <HAL_PCD_EP_Close+0x6a>
 8001eda:	2302      	movs	r3, #2
 8001edc:	e00e      	b.n	8001efc <HAL_PCD_EP_Close+0x88>
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	2201      	movs	r2, #1
 8001ee2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	68f9      	ldr	r1, [r7, #12]
 8001eec:	4618      	mov	r0, r3
 8001eee:	f002 ff31 	bl	8004d54 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 8001efa:	2300      	movs	r3, #0
}
 8001efc:	4618      	mov	r0, r3
 8001efe:	3710      	adds	r7, #16
 8001f00:	46bd      	mov	sp, r7
 8001f02:	bd80      	pop	{r7, pc}

08001f04 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001f04:	b580      	push	{r7, lr}
 8001f06:	b086      	sub	sp, #24
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	60f8      	str	r0, [r7, #12]
 8001f0c:	607a      	str	r2, [r7, #4]
 8001f0e:	603b      	str	r3, [r7, #0]
 8001f10:	460b      	mov	r3, r1
 8001f12:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001f14:	7afb      	ldrb	r3, [r7, #11]
 8001f16:	f003 0207 	and.w	r2, r3, #7
 8001f1a:	4613      	mov	r3, r2
 8001f1c:	009b      	lsls	r3, r3, #2
 8001f1e:	4413      	add	r3, r2
 8001f20:	00db      	lsls	r3, r3, #3
 8001f22:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001f26:	68fa      	ldr	r2, [r7, #12]
 8001f28:	4413      	add	r3, r2
 8001f2a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001f2c:	697b      	ldr	r3, [r7, #20]
 8001f2e:	687a      	ldr	r2, [r7, #4]
 8001f30:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001f32:	697b      	ldr	r3, [r7, #20]
 8001f34:	683a      	ldr	r2, [r7, #0]
 8001f36:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8001f38:	697b      	ldr	r3, [r7, #20]
 8001f3a:	2200      	movs	r2, #0
 8001f3c:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8001f3e:	697b      	ldr	r3, [r7, #20]
 8001f40:	2200      	movs	r2, #0
 8001f42:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001f44:	7afb      	ldrb	r3, [r7, #11]
 8001f46:	f003 0307 	and.w	r3, r3, #7
 8001f4a:	b2da      	uxtb	r2, r3
 8001f4c:	697b      	ldr	r3, [r7, #20]
 8001f4e:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001f50:	7afb      	ldrb	r3, [r7, #11]
 8001f52:	f003 0307 	and.w	r3, r3, #7
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d106      	bne.n	8001f68 <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	6979      	ldr	r1, [r7, #20]
 8001f60:	4618      	mov	r0, r3
 8001f62:	f003 f8e4 	bl	800512e <USB_EPStartXfer>
 8001f66:	e005      	b.n	8001f74 <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	6979      	ldr	r1, [r7, #20]
 8001f6e:	4618      	mov	r0, r3
 8001f70:	f003 f8dd 	bl	800512e <USB_EPStartXfer>
  }

  return HAL_OK;
 8001f74:	2300      	movs	r3, #0
}
 8001f76:	4618      	mov	r0, r3
 8001f78:	3718      	adds	r7, #24
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	bd80      	pop	{r7, pc}

08001f7e <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001f7e:	b480      	push	{r7}
 8001f80:	b083      	sub	sp, #12
 8001f82:	af00      	add	r7, sp, #0
 8001f84:	6078      	str	r0, [r7, #4]
 8001f86:	460b      	mov	r3, r1
 8001f88:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8001f8a:	78fb      	ldrb	r3, [r7, #3]
 8001f8c:	f003 0207 	and.w	r2, r3, #7
 8001f90:	6879      	ldr	r1, [r7, #4]
 8001f92:	4613      	mov	r3, r2
 8001f94:	009b      	lsls	r3, r3, #2
 8001f96:	4413      	add	r3, r2
 8001f98:	00db      	lsls	r3, r3, #3
 8001f9a:	440b      	add	r3, r1
 8001f9c:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8001fa0:	681b      	ldr	r3, [r3, #0]
}
 8001fa2:	4618      	mov	r0, r3
 8001fa4:	370c      	adds	r7, #12
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fac:	4770      	bx	lr

08001fae <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001fae:	b580      	push	{r7, lr}
 8001fb0:	b086      	sub	sp, #24
 8001fb2:	af00      	add	r7, sp, #0
 8001fb4:	60f8      	str	r0, [r7, #12]
 8001fb6:	607a      	str	r2, [r7, #4]
 8001fb8:	603b      	str	r3, [r7, #0]
 8001fba:	460b      	mov	r3, r1
 8001fbc:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001fbe:	7afb      	ldrb	r3, [r7, #11]
 8001fc0:	f003 0307 	and.w	r3, r3, #7
 8001fc4:	1c5a      	adds	r2, r3, #1
 8001fc6:	4613      	mov	r3, r2
 8001fc8:	009b      	lsls	r3, r3, #2
 8001fca:	4413      	add	r3, r2
 8001fcc:	00db      	lsls	r3, r3, #3
 8001fce:	68fa      	ldr	r2, [r7, #12]
 8001fd0:	4413      	add	r3, r2
 8001fd2:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001fd4:	697b      	ldr	r3, [r7, #20]
 8001fd6:	687a      	ldr	r2, [r7, #4]
 8001fd8:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001fda:	697b      	ldr	r3, [r7, #20]
 8001fdc:	683a      	ldr	r2, [r7, #0]
 8001fde:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 8001fe0:	697b      	ldr	r3, [r7, #20]
 8001fe2:	2201      	movs	r2, #1
 8001fe4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8001fe8:	697b      	ldr	r3, [r7, #20]
 8001fea:	683a      	ldr	r2, [r7, #0]
 8001fec:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 8001fee:	697b      	ldr	r3, [r7, #20]
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8001ff4:	697b      	ldr	r3, [r7, #20]
 8001ff6:	2201      	movs	r2, #1
 8001ff8:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001ffa:	7afb      	ldrb	r3, [r7, #11]
 8001ffc:	f003 0307 	and.w	r3, r3, #7
 8002000:	b2da      	uxtb	r2, r3
 8002002:	697b      	ldr	r3, [r7, #20]
 8002004:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002006:	7afb      	ldrb	r3, [r7, #11]
 8002008:	f003 0307 	and.w	r3, r3, #7
 800200c:	2b00      	cmp	r3, #0
 800200e:	d106      	bne.n	800201e <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	6979      	ldr	r1, [r7, #20]
 8002016:	4618      	mov	r0, r3
 8002018:	f003 f889 	bl	800512e <USB_EPStartXfer>
 800201c:	e005      	b.n	800202a <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	6979      	ldr	r1, [r7, #20]
 8002024:	4618      	mov	r0, r3
 8002026:	f003 f882 	bl	800512e <USB_EPStartXfer>
  }

  return HAL_OK;
 800202a:	2300      	movs	r3, #0
}
 800202c:	4618      	mov	r0, r3
 800202e:	3718      	adds	r7, #24
 8002030:	46bd      	mov	sp, r7
 8002032:	bd80      	pop	{r7, pc}

08002034 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002034:	b580      	push	{r7, lr}
 8002036:	b084      	sub	sp, #16
 8002038:	af00      	add	r7, sp, #0
 800203a:	6078      	str	r0, [r7, #4]
 800203c:	460b      	mov	r3, r1
 800203e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002040:	78fb      	ldrb	r3, [r7, #3]
 8002042:	f003 0207 	and.w	r2, r3, #7
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	685b      	ldr	r3, [r3, #4]
 800204a:	429a      	cmp	r2, r3
 800204c:	d901      	bls.n	8002052 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800204e:	2301      	movs	r3, #1
 8002050:	e03e      	b.n	80020d0 <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002052:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002056:	2b00      	cmp	r3, #0
 8002058:	da0e      	bge.n	8002078 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800205a:	78fb      	ldrb	r3, [r7, #3]
 800205c:	f003 0307 	and.w	r3, r3, #7
 8002060:	1c5a      	adds	r2, r3, #1
 8002062:	4613      	mov	r3, r2
 8002064:	009b      	lsls	r3, r3, #2
 8002066:	4413      	add	r3, r2
 8002068:	00db      	lsls	r3, r3, #3
 800206a:	687a      	ldr	r2, [r7, #4]
 800206c:	4413      	add	r3, r2
 800206e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	2201      	movs	r2, #1
 8002074:	705a      	strb	r2, [r3, #1]
 8002076:	e00c      	b.n	8002092 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002078:	78fa      	ldrb	r2, [r7, #3]
 800207a:	4613      	mov	r3, r2
 800207c:	009b      	lsls	r3, r3, #2
 800207e:	4413      	add	r3, r2
 8002080:	00db      	lsls	r3, r3, #3
 8002082:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002086:	687a      	ldr	r2, [r7, #4]
 8002088:	4413      	add	r3, r2
 800208a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	2200      	movs	r2, #0
 8002090:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	2201      	movs	r2, #1
 8002096:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002098:	78fb      	ldrb	r3, [r7, #3]
 800209a:	f003 0307 	and.w	r3, r3, #7
 800209e:	b2da      	uxtb	r2, r3
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80020aa:	2b01      	cmp	r3, #1
 80020ac:	d101      	bne.n	80020b2 <HAL_PCD_EP_SetStall+0x7e>
 80020ae:	2302      	movs	r3, #2
 80020b0:	e00e      	b.n	80020d0 <HAL_PCD_EP_SetStall+0x9c>
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	2201      	movs	r2, #1
 80020b6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	68f9      	ldr	r1, [r7, #12]
 80020c0:	4618      	mov	r0, r3
 80020c2:	f004 f954 	bl	800636e <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	2200      	movs	r2, #0
 80020ca:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80020ce:	2300      	movs	r3, #0
}
 80020d0:	4618      	mov	r0, r3
 80020d2:	3710      	adds	r7, #16
 80020d4:	46bd      	mov	sp, r7
 80020d6:	bd80      	pop	{r7, pc}

080020d8 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80020d8:	b580      	push	{r7, lr}
 80020da:	b084      	sub	sp, #16
 80020dc:	af00      	add	r7, sp, #0
 80020de:	6078      	str	r0, [r7, #4]
 80020e0:	460b      	mov	r3, r1
 80020e2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80020e4:	78fb      	ldrb	r3, [r7, #3]
 80020e6:	f003 020f 	and.w	r2, r3, #15
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	685b      	ldr	r3, [r3, #4]
 80020ee:	429a      	cmp	r2, r3
 80020f0:	d901      	bls.n	80020f6 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80020f2:	2301      	movs	r3, #1
 80020f4:	e040      	b.n	8002178 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80020f6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	da0e      	bge.n	800211c <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80020fe:	78fb      	ldrb	r3, [r7, #3]
 8002100:	f003 0307 	and.w	r3, r3, #7
 8002104:	1c5a      	adds	r2, r3, #1
 8002106:	4613      	mov	r3, r2
 8002108:	009b      	lsls	r3, r3, #2
 800210a:	4413      	add	r3, r2
 800210c:	00db      	lsls	r3, r3, #3
 800210e:	687a      	ldr	r2, [r7, #4]
 8002110:	4413      	add	r3, r2
 8002112:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	2201      	movs	r2, #1
 8002118:	705a      	strb	r2, [r3, #1]
 800211a:	e00e      	b.n	800213a <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800211c:	78fb      	ldrb	r3, [r7, #3]
 800211e:	f003 0207 	and.w	r2, r3, #7
 8002122:	4613      	mov	r3, r2
 8002124:	009b      	lsls	r3, r3, #2
 8002126:	4413      	add	r3, r2
 8002128:	00db      	lsls	r3, r3, #3
 800212a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800212e:	687a      	ldr	r2, [r7, #4]
 8002130:	4413      	add	r3, r2
 8002132:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	2200      	movs	r2, #0
 8002138:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	2200      	movs	r2, #0
 800213e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002140:	78fb      	ldrb	r3, [r7, #3]
 8002142:	f003 0307 	and.w	r3, r3, #7
 8002146:	b2da      	uxtb	r2, r3
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002152:	2b01      	cmp	r3, #1
 8002154:	d101      	bne.n	800215a <HAL_PCD_EP_ClrStall+0x82>
 8002156:	2302      	movs	r3, #2
 8002158:	e00e      	b.n	8002178 <HAL_PCD_EP_ClrStall+0xa0>
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	2201      	movs	r2, #1
 800215e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	68f9      	ldr	r1, [r7, #12]
 8002168:	4618      	mov	r0, r3
 800216a:	f004 f951 	bl	8006410 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	2200      	movs	r2, #0
 8002172:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8002176:	2300      	movs	r3, #0
}
 8002178:	4618      	mov	r0, r3
 800217a:	3710      	adds	r7, #16
 800217c:	46bd      	mov	sp, r7
 800217e:	bd80      	pop	{r7, pc}

08002180 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8002180:	b580      	push	{r7, lr}
 8002182:	b08e      	sub	sp, #56	; 0x38
 8002184:	af00      	add	r7, sp, #0
 8002186:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002188:	e2df      	b.n	800274a <PCD_EP_ISR_Handler+0x5ca>
  {
    wIstr = hpcd->Instance->ISTR;
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002192:	85fb      	strh	r3, [r7, #46]	; 0x2e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8002194:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002196:	b2db      	uxtb	r3, r3
 8002198:	f003 030f 	and.w	r3, r3, #15
 800219c:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 80021a0:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	f040 8158 	bne.w	800245a <PCD_EP_ISR_Handler+0x2da>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 80021aa:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80021ac:	f003 0310 	and.w	r3, r3, #16
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d152      	bne.n	800225a <PCD_EP_ISR_Handler+0xda>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	881b      	ldrh	r3, [r3, #0]
 80021ba:	b29b      	uxth	r3, r3
 80021bc:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80021c0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80021c4:	81fb      	strh	r3, [r7, #14]
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681a      	ldr	r2, [r3, #0]
 80021ca:	89fb      	ldrh	r3, [r7, #14]
 80021cc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80021d0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80021d4:	b29b      	uxth	r3, r3
 80021d6:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	3328      	adds	r3, #40	; 0x28
 80021dc:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80021e6:	b29b      	uxth	r3, r3
 80021e8:	461a      	mov	r2, r3
 80021ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021ec:	781b      	ldrb	r3, [r3, #0]
 80021ee:	00db      	lsls	r3, r3, #3
 80021f0:	4413      	add	r3, r2
 80021f2:	3302      	adds	r3, #2
 80021f4:	005b      	lsls	r3, r3, #1
 80021f6:	687a      	ldr	r2, [r7, #4]
 80021f8:	6812      	ldr	r2, [r2, #0]
 80021fa:	4413      	add	r3, r2
 80021fc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002200:	881b      	ldrh	r3, [r3, #0]
 8002202:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002206:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002208:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 800220a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800220c:	695a      	ldr	r2, [r3, #20]
 800220e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002210:	69db      	ldr	r3, [r3, #28]
 8002212:	441a      	add	r2, r3
 8002214:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002216:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8002218:	2100      	movs	r1, #0
 800221a:	6878      	ldr	r0, [r7, #4]
 800221c:	f006 f83f 	bl	800829e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002226:	b2db      	uxtb	r3, r3
 8002228:	2b00      	cmp	r3, #0
 800222a:	f000 828e 	beq.w	800274a <PCD_EP_ISR_Handler+0x5ca>
 800222e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002230:	699b      	ldr	r3, [r3, #24]
 8002232:	2b00      	cmp	r3, #0
 8002234:	f040 8289 	bne.w	800274a <PCD_EP_ISR_Handler+0x5ca>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800223e:	b2db      	uxtb	r3, r3
 8002240:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002244:	b2da      	uxtb	r2, r3
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	b292      	uxth	r2, r2
 800224c:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	2200      	movs	r2, #0
 8002254:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002258:	e277      	b.n	800274a <PCD_EP_ISR_Handler+0x5ca>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002260:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	881b      	ldrh	r3, [r3, #0]
 8002268:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 800226a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800226c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002270:	2b00      	cmp	r3, #0
 8002272:	d034      	beq.n	80022de <PCD_EP_ISR_Handler+0x15e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800227c:	b29b      	uxth	r3, r3
 800227e:	461a      	mov	r2, r3
 8002280:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002282:	781b      	ldrb	r3, [r3, #0]
 8002284:	00db      	lsls	r3, r3, #3
 8002286:	4413      	add	r3, r2
 8002288:	3306      	adds	r3, #6
 800228a:	005b      	lsls	r3, r3, #1
 800228c:	687a      	ldr	r2, [r7, #4]
 800228e:	6812      	ldr	r2, [r2, #0]
 8002290:	4413      	add	r3, r2
 8002292:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002296:	881b      	ldrh	r3, [r3, #0]
 8002298:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800229c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800229e:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	6818      	ldr	r0, [r3, #0]
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 80022aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022ac:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 80022ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022b0:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80022b2:	b29b      	uxth	r3, r3
 80022b4:	f004 f9ce 	bl	8006654 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	881b      	ldrh	r3, [r3, #0]
 80022be:	b29a      	uxth	r2, r3
 80022c0:	f640 738f 	movw	r3, #3983	; 0xf8f
 80022c4:	4013      	ands	r3, r2
 80022c6:	823b      	strh	r3, [r7, #16]
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	8a3a      	ldrh	r2, [r7, #16]
 80022ce:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80022d2:	b292      	uxth	r2, r2
 80022d4:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 80022d6:	6878      	ldr	r0, [r7, #4]
 80022d8:	f005 ffb4 	bl	8008244 <HAL_PCD_SetupStageCallback>
 80022dc:	e235      	b.n	800274a <PCD_EP_ISR_Handler+0x5ca>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80022de:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	f280 8231 	bge.w	800274a <PCD_EP_ISR_Handler+0x5ca>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	881b      	ldrh	r3, [r3, #0]
 80022ee:	b29a      	uxth	r2, r3
 80022f0:	f640 738f 	movw	r3, #3983	; 0xf8f
 80022f4:	4013      	ands	r3, r2
 80022f6:	83bb      	strh	r3, [r7, #28]
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	8bba      	ldrh	r2, [r7, #28]
 80022fe:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002302:	b292      	uxth	r2, r2
 8002304:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800230e:	b29b      	uxth	r3, r3
 8002310:	461a      	mov	r2, r3
 8002312:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002314:	781b      	ldrb	r3, [r3, #0]
 8002316:	00db      	lsls	r3, r3, #3
 8002318:	4413      	add	r3, r2
 800231a:	3306      	adds	r3, #6
 800231c:	005b      	lsls	r3, r3, #1
 800231e:	687a      	ldr	r2, [r7, #4]
 8002320:	6812      	ldr	r2, [r2, #0]
 8002322:	4413      	add	r3, r2
 8002324:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002328:	881b      	ldrh	r3, [r3, #0]
 800232a:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800232e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002330:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8002332:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002334:	69db      	ldr	r3, [r3, #28]
 8002336:	2b00      	cmp	r3, #0
 8002338:	d019      	beq.n	800236e <PCD_EP_ISR_Handler+0x1ee>
 800233a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800233c:	695b      	ldr	r3, [r3, #20]
 800233e:	2b00      	cmp	r3, #0
 8002340:	d015      	beq.n	800236e <PCD_EP_ISR_Handler+0x1ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	6818      	ldr	r0, [r3, #0]
 8002346:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002348:	6959      	ldr	r1, [r3, #20]
 800234a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800234c:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 800234e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002350:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002352:	b29b      	uxth	r3, r3
 8002354:	f004 f97e 	bl	8006654 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8002358:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800235a:	695a      	ldr	r2, [r3, #20]
 800235c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800235e:	69db      	ldr	r3, [r3, #28]
 8002360:	441a      	add	r2, r3
 8002362:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002364:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8002366:	2100      	movs	r1, #0
 8002368:	6878      	ldr	r0, [r7, #4]
 800236a:	f005 ff7d 	bl	8008268 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	61bb      	str	r3, [r7, #24]
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800237c:	b29b      	uxth	r3, r3
 800237e:	461a      	mov	r2, r3
 8002380:	69bb      	ldr	r3, [r7, #24]
 8002382:	4413      	add	r3, r2
 8002384:	61bb      	str	r3, [r7, #24]
 8002386:	69bb      	ldr	r3, [r7, #24]
 8002388:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800238c:	617b      	str	r3, [r7, #20]
 800238e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002390:	691b      	ldr	r3, [r3, #16]
 8002392:	2b00      	cmp	r3, #0
 8002394:	d112      	bne.n	80023bc <PCD_EP_ISR_Handler+0x23c>
 8002396:	697b      	ldr	r3, [r7, #20]
 8002398:	881b      	ldrh	r3, [r3, #0]
 800239a:	b29b      	uxth	r3, r3
 800239c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80023a0:	b29a      	uxth	r2, r3
 80023a2:	697b      	ldr	r3, [r7, #20]
 80023a4:	801a      	strh	r2, [r3, #0]
 80023a6:	697b      	ldr	r3, [r7, #20]
 80023a8:	881b      	ldrh	r3, [r3, #0]
 80023aa:	b29b      	uxth	r3, r3
 80023ac:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80023b0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80023b4:	b29a      	uxth	r2, r3
 80023b6:	697b      	ldr	r3, [r7, #20]
 80023b8:	801a      	strh	r2, [r3, #0]
 80023ba:	e02f      	b.n	800241c <PCD_EP_ISR_Handler+0x29c>
 80023bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023be:	691b      	ldr	r3, [r3, #16]
 80023c0:	2b3e      	cmp	r3, #62	; 0x3e
 80023c2:	d813      	bhi.n	80023ec <PCD_EP_ISR_Handler+0x26c>
 80023c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023c6:	691b      	ldr	r3, [r3, #16]
 80023c8:	085b      	lsrs	r3, r3, #1
 80023ca:	633b      	str	r3, [r7, #48]	; 0x30
 80023cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023ce:	691b      	ldr	r3, [r3, #16]
 80023d0:	f003 0301 	and.w	r3, r3, #1
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d002      	beq.n	80023de <PCD_EP_ISR_Handler+0x25e>
 80023d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023da:	3301      	adds	r3, #1
 80023dc:	633b      	str	r3, [r7, #48]	; 0x30
 80023de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023e0:	b29b      	uxth	r3, r3
 80023e2:	029b      	lsls	r3, r3, #10
 80023e4:	b29a      	uxth	r2, r3
 80023e6:	697b      	ldr	r3, [r7, #20]
 80023e8:	801a      	strh	r2, [r3, #0]
 80023ea:	e017      	b.n	800241c <PCD_EP_ISR_Handler+0x29c>
 80023ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023ee:	691b      	ldr	r3, [r3, #16]
 80023f0:	095b      	lsrs	r3, r3, #5
 80023f2:	633b      	str	r3, [r7, #48]	; 0x30
 80023f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023f6:	691b      	ldr	r3, [r3, #16]
 80023f8:	f003 031f 	and.w	r3, r3, #31
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d102      	bne.n	8002406 <PCD_EP_ISR_Handler+0x286>
 8002400:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002402:	3b01      	subs	r3, #1
 8002404:	633b      	str	r3, [r7, #48]	; 0x30
 8002406:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002408:	b29b      	uxth	r3, r3
 800240a:	029b      	lsls	r3, r3, #10
 800240c:	b29b      	uxth	r3, r3
 800240e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002412:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002416:	b29a      	uxth	r2, r3
 8002418:	697b      	ldr	r3, [r7, #20]
 800241a:	801a      	strh	r2, [r3, #0]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	881b      	ldrh	r3, [r3, #0]
 8002422:	b29b      	uxth	r3, r3
 8002424:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002428:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800242c:	827b      	strh	r3, [r7, #18]
 800242e:	8a7b      	ldrh	r3, [r7, #18]
 8002430:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8002434:	827b      	strh	r3, [r7, #18]
 8002436:	8a7b      	ldrh	r3, [r7, #18]
 8002438:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800243c:	827b      	strh	r3, [r7, #18]
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681a      	ldr	r2, [r3, #0]
 8002442:	8a7b      	ldrh	r3, [r7, #18]
 8002444:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002448:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800244c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002450:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002454:	b29b      	uxth	r3, r3
 8002456:	8013      	strh	r3, [r2, #0]
 8002458:	e177      	b.n	800274a <PCD_EP_ISR_Handler+0x5ca>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	461a      	mov	r2, r3
 8002460:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002464:	009b      	lsls	r3, r3, #2
 8002466:	4413      	add	r3, r2
 8002468:	881b      	ldrh	r3, [r3, #0]
 800246a:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800246c:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8002470:	2b00      	cmp	r3, #0
 8002472:	f280 80ea 	bge.w	800264a <PCD_EP_ISR_Handler+0x4ca>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	461a      	mov	r2, r3
 800247c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002480:	009b      	lsls	r3, r3, #2
 8002482:	4413      	add	r3, r2
 8002484:	881b      	ldrh	r3, [r3, #0]
 8002486:	b29a      	uxth	r2, r3
 8002488:	f640 738f 	movw	r3, #3983	; 0xf8f
 800248c:	4013      	ands	r3, r2
 800248e:	853b      	strh	r3, [r7, #40]	; 0x28
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	461a      	mov	r2, r3
 8002496:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800249a:	009b      	lsls	r3, r3, #2
 800249c:	4413      	add	r3, r2
 800249e:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80024a0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80024a4:	b292      	uxth	r2, r2
 80024a6:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 80024a8:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 80024ac:	4613      	mov	r3, r2
 80024ae:	009b      	lsls	r3, r3, #2
 80024b0:	4413      	add	r3, r2
 80024b2:	00db      	lsls	r3, r3, #3
 80024b4:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80024b8:	687a      	ldr	r2, [r7, #4]
 80024ba:	4413      	add	r3, r2
 80024bc:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 80024be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024c0:	7b1b      	ldrb	r3, [r3, #12]
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d122      	bne.n	800250c <PCD_EP_ISR_Handler+0x38c>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80024ce:	b29b      	uxth	r3, r3
 80024d0:	461a      	mov	r2, r3
 80024d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024d4:	781b      	ldrb	r3, [r3, #0]
 80024d6:	00db      	lsls	r3, r3, #3
 80024d8:	4413      	add	r3, r2
 80024da:	3306      	adds	r3, #6
 80024dc:	005b      	lsls	r3, r3, #1
 80024de:	687a      	ldr	r2, [r7, #4]
 80024e0:	6812      	ldr	r2, [r2, #0]
 80024e2:	4413      	add	r3, r2
 80024e4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80024e8:	881b      	ldrh	r3, [r3, #0]
 80024ea:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80024ee:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 80024f0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	f000 8087 	beq.w	8002606 <PCD_EP_ISR_Handler+0x486>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	6818      	ldr	r0, [r3, #0]
 80024fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024fe:	6959      	ldr	r1, [r3, #20]
 8002500:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002502:	88da      	ldrh	r2, [r3, #6]
 8002504:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002506:	f004 f8a5 	bl	8006654 <USB_ReadPMA>
 800250a:	e07c      	b.n	8002606 <PCD_EP_ISR_Handler+0x486>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 800250c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800250e:	78db      	ldrb	r3, [r3, #3]
 8002510:	2b02      	cmp	r3, #2
 8002512:	d108      	bne.n	8002526 <PCD_EP_ISR_Handler+0x3a6>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8002514:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002516:	461a      	mov	r2, r3
 8002518:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800251a:	6878      	ldr	r0, [r7, #4]
 800251c:	f000 f923 	bl	8002766 <HAL_PCD_EP_DB_Receive>
 8002520:	4603      	mov	r3, r0
 8002522:	86fb      	strh	r3, [r7, #54]	; 0x36
 8002524:	e06f      	b.n	8002606 <PCD_EP_ISR_Handler+0x486>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	461a      	mov	r2, r3
 800252c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800252e:	781b      	ldrb	r3, [r3, #0]
 8002530:	009b      	lsls	r3, r3, #2
 8002532:	4413      	add	r3, r2
 8002534:	881b      	ldrh	r3, [r3, #0]
 8002536:	b29b      	uxth	r3, r3
 8002538:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800253c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002540:	847b      	strh	r3, [r7, #34]	; 0x22
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	461a      	mov	r2, r3
 8002548:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800254a:	781b      	ldrb	r3, [r3, #0]
 800254c:	009b      	lsls	r3, r3, #2
 800254e:	441a      	add	r2, r3
 8002550:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8002552:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002556:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800255a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800255e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002562:	b29b      	uxth	r3, r3
 8002564:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	461a      	mov	r2, r3
 800256c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800256e:	781b      	ldrb	r3, [r3, #0]
 8002570:	009b      	lsls	r3, r3, #2
 8002572:	4413      	add	r3, r2
 8002574:	881b      	ldrh	r3, [r3, #0]
 8002576:	b29b      	uxth	r3, r3
 8002578:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800257c:	2b00      	cmp	r3, #0
 800257e:	d021      	beq.n	80025c4 <PCD_EP_ISR_Handler+0x444>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002588:	b29b      	uxth	r3, r3
 800258a:	461a      	mov	r2, r3
 800258c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800258e:	781b      	ldrb	r3, [r3, #0]
 8002590:	00db      	lsls	r3, r3, #3
 8002592:	4413      	add	r3, r2
 8002594:	3302      	adds	r3, #2
 8002596:	005b      	lsls	r3, r3, #1
 8002598:	687a      	ldr	r2, [r7, #4]
 800259a:	6812      	ldr	r2, [r2, #0]
 800259c:	4413      	add	r3, r2
 800259e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80025a2:	881b      	ldrh	r3, [r3, #0]
 80025a4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80025a8:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 80025aa:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d02a      	beq.n	8002606 <PCD_EP_ISR_Handler+0x486>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	6818      	ldr	r0, [r3, #0]
 80025b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025b6:	6959      	ldr	r1, [r3, #20]
 80025b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025ba:	891a      	ldrh	r2, [r3, #8]
 80025bc:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80025be:	f004 f849 	bl	8006654 <USB_ReadPMA>
 80025c2:	e020      	b.n	8002606 <PCD_EP_ISR_Handler+0x486>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80025cc:	b29b      	uxth	r3, r3
 80025ce:	461a      	mov	r2, r3
 80025d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025d2:	781b      	ldrb	r3, [r3, #0]
 80025d4:	00db      	lsls	r3, r3, #3
 80025d6:	4413      	add	r3, r2
 80025d8:	3306      	adds	r3, #6
 80025da:	005b      	lsls	r3, r3, #1
 80025dc:	687a      	ldr	r2, [r7, #4]
 80025de:	6812      	ldr	r2, [r2, #0]
 80025e0:	4413      	add	r3, r2
 80025e2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80025e6:	881b      	ldrh	r3, [r3, #0]
 80025e8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80025ec:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 80025ee:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d008      	beq.n	8002606 <PCD_EP_ISR_Handler+0x486>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	6818      	ldr	r0, [r3, #0]
 80025f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025fa:	6959      	ldr	r1, [r3, #20]
 80025fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025fe:	895a      	ldrh	r2, [r3, #10]
 8002600:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002602:	f004 f827 	bl	8006654 <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8002606:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002608:	69da      	ldr	r2, [r3, #28]
 800260a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800260c:	441a      	add	r2, r3
 800260e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002610:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8002612:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002614:	695a      	ldr	r2, [r3, #20]
 8002616:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002618:	441a      	add	r2, r3
 800261a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800261c:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 800261e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002620:	699b      	ldr	r3, [r3, #24]
 8002622:	2b00      	cmp	r3, #0
 8002624:	d004      	beq.n	8002630 <PCD_EP_ISR_Handler+0x4b0>
 8002626:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8002628:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800262a:	691b      	ldr	r3, [r3, #16]
 800262c:	429a      	cmp	r2, r3
 800262e:	d206      	bcs.n	800263e <PCD_EP_ISR_Handler+0x4be>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8002630:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002632:	781b      	ldrb	r3, [r3, #0]
 8002634:	4619      	mov	r1, r3
 8002636:	6878      	ldr	r0, [r7, #4]
 8002638:	f005 fe16 	bl	8008268 <HAL_PCD_DataOutStageCallback>
 800263c:	e005      	b.n	800264a <PCD_EP_ISR_Handler+0x4ca>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002644:	4618      	mov	r0, r3
 8002646:	f002 fd72 	bl	800512e <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 800264a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800264c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002650:	2b00      	cmp	r3, #0
 8002652:	d07a      	beq.n	800274a <PCD_EP_ISR_Handler+0x5ca>
      {
        ep = &hpcd->IN_ep[epindex];
 8002654:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002658:	1c5a      	adds	r2, r3, #1
 800265a:	4613      	mov	r3, r2
 800265c:	009b      	lsls	r3, r3, #2
 800265e:	4413      	add	r3, r2
 8002660:	00db      	lsls	r3, r3, #3
 8002662:	687a      	ldr	r2, [r7, #4]
 8002664:	4413      	add	r3, r2
 8002666:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	461a      	mov	r2, r3
 800266e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002672:	009b      	lsls	r3, r3, #2
 8002674:	4413      	add	r3, r2
 8002676:	881b      	ldrh	r3, [r3, #0]
 8002678:	b29b      	uxth	r3, r3
 800267a:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 800267e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002682:	843b      	strh	r3, [r7, #32]
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	461a      	mov	r2, r3
 800268a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800268e:	009b      	lsls	r3, r3, #2
 8002690:	441a      	add	r2, r3
 8002692:	8c3b      	ldrh	r3, [r7, #32]
 8002694:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002698:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800269c:	b29b      	uxth	r3, r3
 800269e:	8013      	strh	r3, [r2, #0]

        /* Manage all non bulk transaction or Bulk Single Buffer Transaction */
        if ((ep->type != EP_TYPE_BULK) ||
 80026a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026a2:	78db      	ldrb	r3, [r3, #3]
 80026a4:	2b02      	cmp	r3, #2
 80026a6:	d108      	bne.n	80026ba <PCD_EP_ISR_Handler+0x53a>
            ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 80026a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026aa:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type != EP_TYPE_BULK) ||
 80026ac:	2b02      	cmp	r3, #2
 80026ae:	d146      	bne.n	800273e <PCD_EP_ISR_Handler+0x5be>
            ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 80026b0:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80026b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d141      	bne.n	800273e <PCD_EP_ISR_Handler+0x5be>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80026c2:	b29b      	uxth	r3, r3
 80026c4:	461a      	mov	r2, r3
 80026c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026c8:	781b      	ldrb	r3, [r3, #0]
 80026ca:	00db      	lsls	r3, r3, #3
 80026cc:	4413      	add	r3, r2
 80026ce:	3302      	adds	r3, #2
 80026d0:	005b      	lsls	r3, r3, #1
 80026d2:	687a      	ldr	r2, [r7, #4]
 80026d4:	6812      	ldr	r2, [r2, #0]
 80026d6:	4413      	add	r3, r2
 80026d8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80026dc:	881b      	ldrh	r3, [r3, #0]
 80026de:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80026e2:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 80026e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026e6:	699a      	ldr	r2, [r3, #24]
 80026e8:	8bfb      	ldrh	r3, [r7, #30]
 80026ea:	429a      	cmp	r2, r3
 80026ec:	d906      	bls.n	80026fc <PCD_EP_ISR_Handler+0x57c>
          {
            ep->xfer_len -= TxByteNbre;
 80026ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026f0:	699a      	ldr	r2, [r3, #24]
 80026f2:	8bfb      	ldrh	r3, [r7, #30]
 80026f4:	1ad2      	subs	r2, r2, r3
 80026f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026f8:	619a      	str	r2, [r3, #24]
 80026fa:	e002      	b.n	8002702 <PCD_EP_ISR_Handler+0x582>
          }
          else
          {
            ep->xfer_len = 0U;
 80026fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026fe:	2200      	movs	r2, #0
 8002700:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 8002702:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002704:	699b      	ldr	r3, [r3, #24]
 8002706:	2b00      	cmp	r3, #0
 8002708:	d106      	bne.n	8002718 <PCD_EP_ISR_Handler+0x598>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800270a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800270c:	781b      	ldrb	r3, [r3, #0]
 800270e:	4619      	mov	r1, r3
 8002710:	6878      	ldr	r0, [r7, #4]
 8002712:	f005 fdc4 	bl	800829e <HAL_PCD_DataInStageCallback>
 8002716:	e018      	b.n	800274a <PCD_EP_ISR_Handler+0x5ca>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 8002718:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800271a:	695a      	ldr	r2, [r3, #20]
 800271c:	8bfb      	ldrh	r3, [r7, #30]
 800271e:	441a      	add	r2, r3
 8002720:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002722:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 8002724:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002726:	69da      	ldr	r2, [r3, #28]
 8002728:	8bfb      	ldrh	r3, [r7, #30]
 800272a:	441a      	add	r2, r3
 800272c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800272e:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002736:	4618      	mov	r0, r3
 8002738:	f002 fcf9 	bl	800512e <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 800273c:	e005      	b.n	800274a <PCD_EP_ISR_Handler+0x5ca>
          }
        }
        /* bulk in double buffer enable in case of transferLen> Ep_Mps */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 800273e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002740:	461a      	mov	r2, r3
 8002742:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002744:	6878      	ldr	r0, [r7, #4]
 8002746:	f000 f91b 	bl	8002980 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002752:	b29b      	uxth	r3, r3
 8002754:	b21b      	sxth	r3, r3
 8002756:	2b00      	cmp	r3, #0
 8002758:	f6ff ad17 	blt.w	800218a <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 800275c:	2300      	movs	r3, #0
}
 800275e:	4618      	mov	r0, r3
 8002760:	3738      	adds	r7, #56	; 0x38
 8002762:	46bd      	mov	sp, r7
 8002764:	bd80      	pop	{r7, pc}

08002766 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002766:	b580      	push	{r7, lr}
 8002768:	b088      	sub	sp, #32
 800276a:	af00      	add	r7, sp, #0
 800276c:	60f8      	str	r0, [r7, #12]
 800276e:	60b9      	str	r1, [r7, #8]
 8002770:	4613      	mov	r3, r2
 8002772:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002774:	88fb      	ldrh	r3, [r7, #6]
 8002776:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800277a:	2b00      	cmp	r3, #0
 800277c:	d07e      	beq.n	800287c <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002786:	b29b      	uxth	r3, r3
 8002788:	461a      	mov	r2, r3
 800278a:	68bb      	ldr	r3, [r7, #8]
 800278c:	781b      	ldrb	r3, [r3, #0]
 800278e:	00db      	lsls	r3, r3, #3
 8002790:	4413      	add	r3, r2
 8002792:	3302      	adds	r3, #2
 8002794:	005b      	lsls	r3, r3, #1
 8002796:	68fa      	ldr	r2, [r7, #12]
 8002798:	6812      	ldr	r2, [r2, #0]
 800279a:	4413      	add	r3, r2
 800279c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80027a0:	881b      	ldrh	r3, [r3, #0]
 80027a2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80027a6:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80027a8:	68bb      	ldr	r3, [r7, #8]
 80027aa:	699a      	ldr	r2, [r3, #24]
 80027ac:	8b7b      	ldrh	r3, [r7, #26]
 80027ae:	429a      	cmp	r2, r3
 80027b0:	d306      	bcc.n	80027c0 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 80027b2:	68bb      	ldr	r3, [r7, #8]
 80027b4:	699a      	ldr	r2, [r3, #24]
 80027b6:	8b7b      	ldrh	r3, [r7, #26]
 80027b8:	1ad2      	subs	r2, r2, r3
 80027ba:	68bb      	ldr	r3, [r7, #8]
 80027bc:	619a      	str	r2, [r3, #24]
 80027be:	e002      	b.n	80027c6 <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 80027c0:	68bb      	ldr	r3, [r7, #8]
 80027c2:	2200      	movs	r2, #0
 80027c4:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80027c6:	68bb      	ldr	r3, [r7, #8]
 80027c8:	699b      	ldr	r3, [r3, #24]
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d123      	bne.n	8002816 <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	461a      	mov	r2, r3
 80027d4:	68bb      	ldr	r3, [r7, #8]
 80027d6:	781b      	ldrb	r3, [r3, #0]
 80027d8:	009b      	lsls	r3, r3, #2
 80027da:	4413      	add	r3, r2
 80027dc:	881b      	ldrh	r3, [r3, #0]
 80027de:	b29b      	uxth	r3, r3
 80027e0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80027e4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80027e8:	833b      	strh	r3, [r7, #24]
 80027ea:	8b3b      	ldrh	r3, [r7, #24]
 80027ec:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80027f0:	833b      	strh	r3, [r7, #24]
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	461a      	mov	r2, r3
 80027f8:	68bb      	ldr	r3, [r7, #8]
 80027fa:	781b      	ldrb	r3, [r3, #0]
 80027fc:	009b      	lsls	r3, r3, #2
 80027fe:	441a      	add	r2, r3
 8002800:	8b3b      	ldrh	r3, [r7, #24]
 8002802:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002806:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800280a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800280e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002812:	b29b      	uxth	r3, r3
 8002814:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002816:	88fb      	ldrh	r3, [r7, #6]
 8002818:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800281c:	2b00      	cmp	r3, #0
 800281e:	d01f      	beq.n	8002860 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	461a      	mov	r2, r3
 8002826:	68bb      	ldr	r3, [r7, #8]
 8002828:	781b      	ldrb	r3, [r3, #0]
 800282a:	009b      	lsls	r3, r3, #2
 800282c:	4413      	add	r3, r2
 800282e:	881b      	ldrh	r3, [r3, #0]
 8002830:	b29b      	uxth	r3, r3
 8002832:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002836:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800283a:	82fb      	strh	r3, [r7, #22]
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	461a      	mov	r2, r3
 8002842:	68bb      	ldr	r3, [r7, #8]
 8002844:	781b      	ldrb	r3, [r3, #0]
 8002846:	009b      	lsls	r3, r3, #2
 8002848:	441a      	add	r2, r3
 800284a:	8afb      	ldrh	r3, [r7, #22]
 800284c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002850:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002854:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002858:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800285c:	b29b      	uxth	r3, r3
 800285e:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002860:	8b7b      	ldrh	r3, [r7, #26]
 8002862:	2b00      	cmp	r3, #0
 8002864:	f000 8087 	beq.w	8002976 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	6818      	ldr	r0, [r3, #0]
 800286c:	68bb      	ldr	r3, [r7, #8]
 800286e:	6959      	ldr	r1, [r3, #20]
 8002870:	68bb      	ldr	r3, [r7, #8]
 8002872:	891a      	ldrh	r2, [r3, #8]
 8002874:	8b7b      	ldrh	r3, [r7, #26]
 8002876:	f003 feed 	bl	8006654 <USB_ReadPMA>
 800287a:	e07c      	b.n	8002976 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002884:	b29b      	uxth	r3, r3
 8002886:	461a      	mov	r2, r3
 8002888:	68bb      	ldr	r3, [r7, #8]
 800288a:	781b      	ldrb	r3, [r3, #0]
 800288c:	00db      	lsls	r3, r3, #3
 800288e:	4413      	add	r3, r2
 8002890:	3306      	adds	r3, #6
 8002892:	005b      	lsls	r3, r3, #1
 8002894:	68fa      	ldr	r2, [r7, #12]
 8002896:	6812      	ldr	r2, [r2, #0]
 8002898:	4413      	add	r3, r2
 800289a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800289e:	881b      	ldrh	r3, [r3, #0]
 80028a0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80028a4:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80028a6:	68bb      	ldr	r3, [r7, #8]
 80028a8:	699a      	ldr	r2, [r3, #24]
 80028aa:	8b7b      	ldrh	r3, [r7, #26]
 80028ac:	429a      	cmp	r2, r3
 80028ae:	d306      	bcc.n	80028be <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 80028b0:	68bb      	ldr	r3, [r7, #8]
 80028b2:	699a      	ldr	r2, [r3, #24]
 80028b4:	8b7b      	ldrh	r3, [r7, #26]
 80028b6:	1ad2      	subs	r2, r2, r3
 80028b8:	68bb      	ldr	r3, [r7, #8]
 80028ba:	619a      	str	r2, [r3, #24]
 80028bc:	e002      	b.n	80028c4 <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 80028be:	68bb      	ldr	r3, [r7, #8]
 80028c0:	2200      	movs	r2, #0
 80028c2:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80028c4:	68bb      	ldr	r3, [r7, #8]
 80028c6:	699b      	ldr	r3, [r3, #24]
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d123      	bne.n	8002914 <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	461a      	mov	r2, r3
 80028d2:	68bb      	ldr	r3, [r7, #8]
 80028d4:	781b      	ldrb	r3, [r3, #0]
 80028d6:	009b      	lsls	r3, r3, #2
 80028d8:	4413      	add	r3, r2
 80028da:	881b      	ldrh	r3, [r3, #0]
 80028dc:	b29b      	uxth	r3, r3
 80028de:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80028e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80028e6:	83fb      	strh	r3, [r7, #30]
 80028e8:	8bfb      	ldrh	r3, [r7, #30]
 80028ea:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80028ee:	83fb      	strh	r3, [r7, #30]
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	461a      	mov	r2, r3
 80028f6:	68bb      	ldr	r3, [r7, #8]
 80028f8:	781b      	ldrb	r3, [r3, #0]
 80028fa:	009b      	lsls	r3, r3, #2
 80028fc:	441a      	add	r2, r3
 80028fe:	8bfb      	ldrh	r3, [r7, #30]
 8002900:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002904:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002908:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800290c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002910:	b29b      	uxth	r3, r3
 8002912:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8002914:	88fb      	ldrh	r3, [r7, #6]
 8002916:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800291a:	2b00      	cmp	r3, #0
 800291c:	d11f      	bne.n	800295e <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	461a      	mov	r2, r3
 8002924:	68bb      	ldr	r3, [r7, #8]
 8002926:	781b      	ldrb	r3, [r3, #0]
 8002928:	009b      	lsls	r3, r3, #2
 800292a:	4413      	add	r3, r2
 800292c:	881b      	ldrh	r3, [r3, #0]
 800292e:	b29b      	uxth	r3, r3
 8002930:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002934:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002938:	83bb      	strh	r3, [r7, #28]
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	461a      	mov	r2, r3
 8002940:	68bb      	ldr	r3, [r7, #8]
 8002942:	781b      	ldrb	r3, [r3, #0]
 8002944:	009b      	lsls	r3, r3, #2
 8002946:	441a      	add	r2, r3
 8002948:	8bbb      	ldrh	r3, [r7, #28]
 800294a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800294e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002952:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002956:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800295a:	b29b      	uxth	r3, r3
 800295c:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 800295e:	8b7b      	ldrh	r3, [r7, #26]
 8002960:	2b00      	cmp	r3, #0
 8002962:	d008      	beq.n	8002976 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	6818      	ldr	r0, [r3, #0]
 8002968:	68bb      	ldr	r3, [r7, #8]
 800296a:	6959      	ldr	r1, [r3, #20]
 800296c:	68bb      	ldr	r3, [r7, #8]
 800296e:	895a      	ldrh	r2, [r3, #10]
 8002970:	8b7b      	ldrh	r3, [r7, #26]
 8002972:	f003 fe6f 	bl	8006654 <USB_ReadPMA>
    }
  }

  return count;
 8002976:	8b7b      	ldrh	r3, [r7, #26]
}
 8002978:	4618      	mov	r0, r3
 800297a:	3720      	adds	r7, #32
 800297c:	46bd      	mov	sp, r7
 800297e:	bd80      	pop	{r7, pc}

08002980 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002980:	b580      	push	{r7, lr}
 8002982:	b092      	sub	sp, #72	; 0x48
 8002984:	af00      	add	r7, sp, #0
 8002986:	60f8      	str	r0, [r7, #12]
 8002988:	60b9      	str	r1, [r7, #8]
 800298a:	4613      	mov	r3, r2
 800298c:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800298e:	88fb      	ldrh	r3, [r7, #6]
 8002990:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002994:	2b00      	cmp	r3, #0
 8002996:	f000 8132 	beq.w	8002bfe <HAL_PCD_EP_DB_Transmit+0x27e>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80029a2:	b29b      	uxth	r3, r3
 80029a4:	461a      	mov	r2, r3
 80029a6:	68bb      	ldr	r3, [r7, #8]
 80029a8:	781b      	ldrb	r3, [r3, #0]
 80029aa:	00db      	lsls	r3, r3, #3
 80029ac:	4413      	add	r3, r2
 80029ae:	3302      	adds	r3, #2
 80029b0:	005b      	lsls	r3, r3, #1
 80029b2:	68fa      	ldr	r2, [r7, #12]
 80029b4:	6812      	ldr	r2, [r2, #0]
 80029b6:	4413      	add	r3, r2
 80029b8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80029bc:	881b      	ldrh	r3, [r3, #0]
 80029be:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80029c2:	85fb      	strh	r3, [r7, #46]	; 0x2e

    if (ep->xfer_len > TxByteNbre)
 80029c4:	68bb      	ldr	r3, [r7, #8]
 80029c6:	699a      	ldr	r2, [r3, #24]
 80029c8:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80029ca:	429a      	cmp	r2, r3
 80029cc:	d906      	bls.n	80029dc <HAL_PCD_EP_DB_Transmit+0x5c>
    {
      ep->xfer_len -= TxByteNbre;
 80029ce:	68bb      	ldr	r3, [r7, #8]
 80029d0:	699a      	ldr	r2, [r3, #24]
 80029d2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80029d4:	1ad2      	subs	r2, r2, r3
 80029d6:	68bb      	ldr	r3, [r7, #8]
 80029d8:	619a      	str	r2, [r3, #24]
 80029da:	e002      	b.n	80029e2 <HAL_PCD_EP_DB_Transmit+0x62>
    }
    else
    {
      ep->xfer_len = 0U;
 80029dc:	68bb      	ldr	r3, [r7, #8]
 80029de:	2200      	movs	r2, #0
 80029e0:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80029e2:	68bb      	ldr	r3, [r7, #8]
 80029e4:	699b      	ldr	r3, [r3, #24]
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d12c      	bne.n	8002a44 <HAL_PCD_EP_DB_Transmit+0xc4>
    {
      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80029ea:	68bb      	ldr	r3, [r7, #8]
 80029ec:	781b      	ldrb	r3, [r3, #0]
 80029ee:	4619      	mov	r1, r3
 80029f0:	68f8      	ldr	r0, [r7, #12]
 80029f2:	f005 fc54 	bl	800829e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80029f6:	88fb      	ldrh	r3, [r7, #6]
 80029f8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	f000 822f 	beq.w	8002e60 <HAL_PCD_EP_DB_Transmit+0x4e0>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	461a      	mov	r2, r3
 8002a08:	68bb      	ldr	r3, [r7, #8]
 8002a0a:	781b      	ldrb	r3, [r3, #0]
 8002a0c:	009b      	lsls	r3, r3, #2
 8002a0e:	4413      	add	r3, r2
 8002a10:	881b      	ldrh	r3, [r3, #0]
 8002a12:	b29b      	uxth	r3, r3
 8002a14:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002a18:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a1c:	827b      	strh	r3, [r7, #18]
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	461a      	mov	r2, r3
 8002a24:	68bb      	ldr	r3, [r7, #8]
 8002a26:	781b      	ldrb	r3, [r3, #0]
 8002a28:	009b      	lsls	r3, r3, #2
 8002a2a:	441a      	add	r2, r3
 8002a2c:	8a7b      	ldrh	r3, [r7, #18]
 8002a2e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002a32:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002a36:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002a3a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002a3e:	b29b      	uxth	r3, r3
 8002a40:	8013      	strh	r3, [r2, #0]
 8002a42:	e20d      	b.n	8002e60 <HAL_PCD_EP_DB_Transmit+0x4e0>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002a44:	88fb      	ldrh	r3, [r7, #6]
 8002a46:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d01f      	beq.n	8002a8e <HAL_PCD_EP_DB_Transmit+0x10e>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	461a      	mov	r2, r3
 8002a54:	68bb      	ldr	r3, [r7, #8]
 8002a56:	781b      	ldrb	r3, [r3, #0]
 8002a58:	009b      	lsls	r3, r3, #2
 8002a5a:	4413      	add	r3, r2
 8002a5c:	881b      	ldrh	r3, [r3, #0]
 8002a5e:	b29b      	uxth	r3, r3
 8002a60:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002a64:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a68:	84bb      	strh	r3, [r7, #36]	; 0x24
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	461a      	mov	r2, r3
 8002a70:	68bb      	ldr	r3, [r7, #8]
 8002a72:	781b      	ldrb	r3, [r3, #0]
 8002a74:	009b      	lsls	r3, r3, #2
 8002a76:	441a      	add	r2, r3
 8002a78:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002a7a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002a7e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002a82:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002a86:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002a8a:	b29b      	uxth	r3, r3
 8002a8c:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002a8e:	68bb      	ldr	r3, [r7, #8]
 8002a90:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002a94:	2b01      	cmp	r3, #1
 8002a96:	f040 81e3 	bne.w	8002e60 <HAL_PCD_EP_DB_Transmit+0x4e0>
      {
        ep->xfer_buff += TxByteNbre;
 8002a9a:	68bb      	ldr	r3, [r7, #8]
 8002a9c:	695a      	ldr	r2, [r3, #20]
 8002a9e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002aa0:	441a      	add	r2, r3
 8002aa2:	68bb      	ldr	r3, [r7, #8]
 8002aa4:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8002aa6:	68bb      	ldr	r3, [r7, #8]
 8002aa8:	69da      	ldr	r2, [r3, #28]
 8002aaa:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002aac:	441a      	add	r2, r3
 8002aae:	68bb      	ldr	r3, [r7, #8]
 8002ab0:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002ab2:	68bb      	ldr	r3, [r7, #8]
 8002ab4:	6a1a      	ldr	r2, [r3, #32]
 8002ab6:	68bb      	ldr	r3, [r7, #8]
 8002ab8:	691b      	ldr	r3, [r3, #16]
 8002aba:	429a      	cmp	r2, r3
 8002abc:	d309      	bcc.n	8002ad2 <HAL_PCD_EP_DB_Transmit+0x152>
        {
          len = ep->maxpacket;
 8002abe:	68bb      	ldr	r3, [r7, #8]
 8002ac0:	691b      	ldr	r3, [r3, #16]
 8002ac2:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db -= len;
 8002ac4:	68bb      	ldr	r3, [r7, #8]
 8002ac6:	6a1a      	ldr	r2, [r3, #32]
 8002ac8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002aca:	1ad2      	subs	r2, r2, r3
 8002acc:	68bb      	ldr	r3, [r7, #8]
 8002ace:	621a      	str	r2, [r3, #32]
 8002ad0:	e014      	b.n	8002afc <HAL_PCD_EP_DB_Transmit+0x17c>
        }
        else if (ep->xfer_len_db == 0U)
 8002ad2:	68bb      	ldr	r3, [r7, #8]
 8002ad4:	6a1b      	ldr	r3, [r3, #32]
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d106      	bne.n	8002ae8 <HAL_PCD_EP_DB_Transmit+0x168>
        {
          len = TxByteNbre;
 8002ada:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002adc:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_fill_db = 0U;
 8002ade:	68bb      	ldr	r3, [r7, #8]
 8002ae0:	2200      	movs	r2, #0
 8002ae2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002ae6:	e009      	b.n	8002afc <HAL_PCD_EP_DB_Transmit+0x17c>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8002ae8:	68bb      	ldr	r3, [r7, #8]
 8002aea:	2200      	movs	r2, #0
 8002aec:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8002af0:	68bb      	ldr	r3, [r7, #8]
 8002af2:	6a1b      	ldr	r3, [r3, #32]
 8002af4:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db = 0U;
 8002af6:	68bb      	ldr	r3, [r7, #8]
 8002af8:	2200      	movs	r2, #0
 8002afa:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002afc:	68bb      	ldr	r3, [r7, #8]
 8002afe:	785b      	ldrb	r3, [r3, #1]
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d155      	bne.n	8002bb0 <HAL_PCD_EP_DB_Transmit+0x230>
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	61bb      	str	r3, [r7, #24]
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002b12:	b29b      	uxth	r3, r3
 8002b14:	461a      	mov	r2, r3
 8002b16:	69bb      	ldr	r3, [r7, #24]
 8002b18:	4413      	add	r3, r2
 8002b1a:	61bb      	str	r3, [r7, #24]
 8002b1c:	68bb      	ldr	r3, [r7, #8]
 8002b1e:	781b      	ldrb	r3, [r3, #0]
 8002b20:	011a      	lsls	r2, r3, #4
 8002b22:	69bb      	ldr	r3, [r7, #24]
 8002b24:	4413      	add	r3, r2
 8002b26:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002b2a:	617b      	str	r3, [r7, #20]
 8002b2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d112      	bne.n	8002b58 <HAL_PCD_EP_DB_Transmit+0x1d8>
 8002b32:	697b      	ldr	r3, [r7, #20]
 8002b34:	881b      	ldrh	r3, [r3, #0]
 8002b36:	b29b      	uxth	r3, r3
 8002b38:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002b3c:	b29a      	uxth	r2, r3
 8002b3e:	697b      	ldr	r3, [r7, #20]
 8002b40:	801a      	strh	r2, [r3, #0]
 8002b42:	697b      	ldr	r3, [r7, #20]
 8002b44:	881b      	ldrh	r3, [r3, #0]
 8002b46:	b29b      	uxth	r3, r3
 8002b48:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002b4c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002b50:	b29a      	uxth	r2, r3
 8002b52:	697b      	ldr	r3, [r7, #20]
 8002b54:	801a      	strh	r2, [r3, #0]
 8002b56:	e047      	b.n	8002be8 <HAL_PCD_EP_DB_Transmit+0x268>
 8002b58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b5a:	2b3e      	cmp	r3, #62	; 0x3e
 8002b5c:	d811      	bhi.n	8002b82 <HAL_PCD_EP_DB_Transmit+0x202>
 8002b5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b60:	085b      	lsrs	r3, r3, #1
 8002b62:	62bb      	str	r3, [r7, #40]	; 0x28
 8002b64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b66:	f003 0301 	and.w	r3, r3, #1
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d002      	beq.n	8002b74 <HAL_PCD_EP_DB_Transmit+0x1f4>
 8002b6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b70:	3301      	adds	r3, #1
 8002b72:	62bb      	str	r3, [r7, #40]	; 0x28
 8002b74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b76:	b29b      	uxth	r3, r3
 8002b78:	029b      	lsls	r3, r3, #10
 8002b7a:	b29a      	uxth	r2, r3
 8002b7c:	697b      	ldr	r3, [r7, #20]
 8002b7e:	801a      	strh	r2, [r3, #0]
 8002b80:	e032      	b.n	8002be8 <HAL_PCD_EP_DB_Transmit+0x268>
 8002b82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b84:	095b      	lsrs	r3, r3, #5
 8002b86:	62bb      	str	r3, [r7, #40]	; 0x28
 8002b88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b8a:	f003 031f 	and.w	r3, r3, #31
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d102      	bne.n	8002b98 <HAL_PCD_EP_DB_Transmit+0x218>
 8002b92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b94:	3b01      	subs	r3, #1
 8002b96:	62bb      	str	r3, [r7, #40]	; 0x28
 8002b98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b9a:	b29b      	uxth	r3, r3
 8002b9c:	029b      	lsls	r3, r3, #10
 8002b9e:	b29b      	uxth	r3, r3
 8002ba0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002ba4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002ba8:	b29a      	uxth	r2, r3
 8002baa:	697b      	ldr	r3, [r7, #20]
 8002bac:	801a      	strh	r2, [r3, #0]
 8002bae:	e01b      	b.n	8002be8 <HAL_PCD_EP_DB_Transmit+0x268>
 8002bb0:	68bb      	ldr	r3, [r7, #8]
 8002bb2:	785b      	ldrb	r3, [r3, #1]
 8002bb4:	2b01      	cmp	r3, #1
 8002bb6:	d117      	bne.n	8002be8 <HAL_PCD_EP_DB_Transmit+0x268>
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	623b      	str	r3, [r7, #32]
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002bc6:	b29b      	uxth	r3, r3
 8002bc8:	461a      	mov	r2, r3
 8002bca:	6a3b      	ldr	r3, [r7, #32]
 8002bcc:	4413      	add	r3, r2
 8002bce:	623b      	str	r3, [r7, #32]
 8002bd0:	68bb      	ldr	r3, [r7, #8]
 8002bd2:	781b      	ldrb	r3, [r3, #0]
 8002bd4:	011a      	lsls	r2, r3, #4
 8002bd6:	6a3b      	ldr	r3, [r7, #32]
 8002bd8:	4413      	add	r3, r2
 8002bda:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002bde:	61fb      	str	r3, [r7, #28]
 8002be0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002be2:	b29a      	uxth	r2, r3
 8002be4:	69fb      	ldr	r3, [r7, #28]
 8002be6:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	6818      	ldr	r0, [r3, #0]
 8002bec:	68bb      	ldr	r3, [r7, #8]
 8002bee:	6959      	ldr	r1, [r3, #20]
 8002bf0:	68bb      	ldr	r3, [r7, #8]
 8002bf2:	891a      	ldrh	r2, [r3, #8]
 8002bf4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002bf6:	b29b      	uxth	r3, r3
 8002bf8:	f003 fce7 	bl	80065ca <USB_WritePMA>
 8002bfc:	e130      	b.n	8002e60 <HAL_PCD_EP_DB_Transmit+0x4e0>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002c06:	b29b      	uxth	r3, r3
 8002c08:	461a      	mov	r2, r3
 8002c0a:	68bb      	ldr	r3, [r7, #8]
 8002c0c:	781b      	ldrb	r3, [r3, #0]
 8002c0e:	00db      	lsls	r3, r3, #3
 8002c10:	4413      	add	r3, r2
 8002c12:	3306      	adds	r3, #6
 8002c14:	005b      	lsls	r3, r3, #1
 8002c16:	68fa      	ldr	r2, [r7, #12]
 8002c18:	6812      	ldr	r2, [r2, #0]
 8002c1a:	4413      	add	r3, r2
 8002c1c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002c20:	881b      	ldrh	r3, [r3, #0]
 8002c22:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002c26:	85fb      	strh	r3, [r7, #46]	; 0x2e

    if (ep->xfer_len >= TxByteNbre)
 8002c28:	68bb      	ldr	r3, [r7, #8]
 8002c2a:	699a      	ldr	r2, [r3, #24]
 8002c2c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002c2e:	429a      	cmp	r2, r3
 8002c30:	d306      	bcc.n	8002c40 <HAL_PCD_EP_DB_Transmit+0x2c0>
    {
      ep->xfer_len -= TxByteNbre;
 8002c32:	68bb      	ldr	r3, [r7, #8]
 8002c34:	699a      	ldr	r2, [r3, #24]
 8002c36:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002c38:	1ad2      	subs	r2, r2, r3
 8002c3a:	68bb      	ldr	r3, [r7, #8]
 8002c3c:	619a      	str	r2, [r3, #24]
 8002c3e:	e002      	b.n	8002c46 <HAL_PCD_EP_DB_Transmit+0x2c6>
    }
    else
    {
      ep->xfer_len = 0U;
 8002c40:	68bb      	ldr	r3, [r7, #8]
 8002c42:	2200      	movs	r2, #0
 8002c44:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002c46:	68bb      	ldr	r3, [r7, #8]
 8002c48:	699b      	ldr	r3, [r3, #24]
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d12c      	bne.n	8002ca8 <HAL_PCD_EP_DB_Transmit+0x328>
    {
      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002c4e:	68bb      	ldr	r3, [r7, #8]
 8002c50:	781b      	ldrb	r3, [r3, #0]
 8002c52:	4619      	mov	r1, r3
 8002c54:	68f8      	ldr	r0, [r7, #12]
 8002c56:	f005 fb22 	bl	800829e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /*need to Free USB Buff*/
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002c5a:	88fb      	ldrh	r3, [r7, #6]
 8002c5c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	f040 80fd 	bne.w	8002e60 <HAL_PCD_EP_DB_Transmit+0x4e0>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	461a      	mov	r2, r3
 8002c6c:	68bb      	ldr	r3, [r7, #8]
 8002c6e:	781b      	ldrb	r3, [r3, #0]
 8002c70:	009b      	lsls	r3, r3, #2
 8002c72:	4413      	add	r3, r2
 8002c74:	881b      	ldrh	r3, [r3, #0]
 8002c76:	b29b      	uxth	r3, r3
 8002c78:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002c7c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c80:	84fb      	strh	r3, [r7, #38]	; 0x26
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	461a      	mov	r2, r3
 8002c88:	68bb      	ldr	r3, [r7, #8]
 8002c8a:	781b      	ldrb	r3, [r3, #0]
 8002c8c:	009b      	lsls	r3, r3, #2
 8002c8e:	441a      	add	r2, r3
 8002c90:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8002c92:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002c96:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002c9a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002c9e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002ca2:	b29b      	uxth	r3, r3
 8002ca4:	8013      	strh	r3, [r2, #0]
 8002ca6:	e0db      	b.n	8002e60 <HAL_PCD_EP_DB_Transmit+0x4e0>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002ca8:	88fb      	ldrh	r3, [r7, #6]
 8002caa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d11f      	bne.n	8002cf2 <HAL_PCD_EP_DB_Transmit+0x372>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	461a      	mov	r2, r3
 8002cb8:	68bb      	ldr	r3, [r7, #8]
 8002cba:	781b      	ldrb	r3, [r3, #0]
 8002cbc:	009b      	lsls	r3, r3, #2
 8002cbe:	4413      	add	r3, r2
 8002cc0:	881b      	ldrh	r3, [r3, #0]
 8002cc2:	b29b      	uxth	r3, r3
 8002cc4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002cc8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ccc:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	461a      	mov	r2, r3
 8002cd4:	68bb      	ldr	r3, [r7, #8]
 8002cd6:	781b      	ldrb	r3, [r3, #0]
 8002cd8:	009b      	lsls	r3, r3, #2
 8002cda:	441a      	add	r2, r3
 8002cdc:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8002cde:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002ce2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002ce6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002cea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002cee:	b29b      	uxth	r3, r3
 8002cf0:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002cf2:	68bb      	ldr	r3, [r7, #8]
 8002cf4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002cf8:	2b01      	cmp	r3, #1
 8002cfa:	f040 80b1 	bne.w	8002e60 <HAL_PCD_EP_DB_Transmit+0x4e0>
      {
        ep->xfer_buff += TxByteNbre;
 8002cfe:	68bb      	ldr	r3, [r7, #8]
 8002d00:	695a      	ldr	r2, [r3, #20]
 8002d02:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002d04:	441a      	add	r2, r3
 8002d06:	68bb      	ldr	r3, [r7, #8]
 8002d08:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8002d0a:	68bb      	ldr	r3, [r7, #8]
 8002d0c:	69da      	ldr	r2, [r3, #28]
 8002d0e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002d10:	441a      	add	r2, r3
 8002d12:	68bb      	ldr	r3, [r7, #8]
 8002d14:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002d16:	68bb      	ldr	r3, [r7, #8]
 8002d18:	6a1a      	ldr	r2, [r3, #32]
 8002d1a:	68bb      	ldr	r3, [r7, #8]
 8002d1c:	691b      	ldr	r3, [r3, #16]
 8002d1e:	429a      	cmp	r2, r3
 8002d20:	d309      	bcc.n	8002d36 <HAL_PCD_EP_DB_Transmit+0x3b6>
        {
          len = ep->maxpacket;
 8002d22:	68bb      	ldr	r3, [r7, #8]
 8002d24:	691b      	ldr	r3, [r3, #16]
 8002d26:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db -= len;
 8002d28:	68bb      	ldr	r3, [r7, #8]
 8002d2a:	6a1a      	ldr	r2, [r3, #32]
 8002d2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d2e:	1ad2      	subs	r2, r2, r3
 8002d30:	68bb      	ldr	r3, [r7, #8]
 8002d32:	621a      	str	r2, [r3, #32]
 8002d34:	e014      	b.n	8002d60 <HAL_PCD_EP_DB_Transmit+0x3e0>
        }
        else if (ep->xfer_len_db == 0U)
 8002d36:	68bb      	ldr	r3, [r7, #8]
 8002d38:	6a1b      	ldr	r3, [r3, #32]
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d106      	bne.n	8002d4c <HAL_PCD_EP_DB_Transmit+0x3cc>
        {
          len = TxByteNbre;
 8002d3e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002d40:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_fill_db = 0U;
 8002d42:	68bb      	ldr	r3, [r7, #8]
 8002d44:	2200      	movs	r2, #0
 8002d46:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002d4a:	e009      	b.n	8002d60 <HAL_PCD_EP_DB_Transmit+0x3e0>
        }
        else
        {
          len = ep->xfer_len_db;
 8002d4c:	68bb      	ldr	r3, [r7, #8]
 8002d4e:	6a1b      	ldr	r3, [r3, #32]
 8002d50:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db = 0U;
 8002d52:	68bb      	ldr	r3, [r7, #8]
 8002d54:	2200      	movs	r2, #0
 8002d56:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8002d58:	68bb      	ldr	r3, [r7, #8]
 8002d5a:	2200      	movs	r2, #0
 8002d5c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	637b      	str	r3, [r7, #52]	; 0x34
 8002d66:	68bb      	ldr	r3, [r7, #8]
 8002d68:	785b      	ldrb	r3, [r3, #1]
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d155      	bne.n	8002e1a <HAL_PCD_EP_DB_Transmit+0x49a>
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	647b      	str	r3, [r7, #68]	; 0x44
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002d7c:	b29b      	uxth	r3, r3
 8002d7e:	461a      	mov	r2, r3
 8002d80:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002d82:	4413      	add	r3, r2
 8002d84:	647b      	str	r3, [r7, #68]	; 0x44
 8002d86:	68bb      	ldr	r3, [r7, #8]
 8002d88:	781b      	ldrb	r3, [r3, #0]
 8002d8a:	011a      	lsls	r2, r3, #4
 8002d8c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002d8e:	4413      	add	r3, r2
 8002d90:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002d94:	643b      	str	r3, [r7, #64]	; 0x40
 8002d96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d112      	bne.n	8002dc2 <HAL_PCD_EP_DB_Transmit+0x442>
 8002d9c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002d9e:	881b      	ldrh	r3, [r3, #0]
 8002da0:	b29b      	uxth	r3, r3
 8002da2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002da6:	b29a      	uxth	r2, r3
 8002da8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002daa:	801a      	strh	r2, [r3, #0]
 8002dac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002dae:	881b      	ldrh	r3, [r3, #0]
 8002db0:	b29b      	uxth	r3, r3
 8002db2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002db6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002dba:	b29a      	uxth	r2, r3
 8002dbc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002dbe:	801a      	strh	r2, [r3, #0]
 8002dc0:	e044      	b.n	8002e4c <HAL_PCD_EP_DB_Transmit+0x4cc>
 8002dc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002dc4:	2b3e      	cmp	r3, #62	; 0x3e
 8002dc6:	d811      	bhi.n	8002dec <HAL_PCD_EP_DB_Transmit+0x46c>
 8002dc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002dca:	085b      	lsrs	r3, r3, #1
 8002dcc:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002dce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002dd0:	f003 0301 	and.w	r3, r3, #1
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d002      	beq.n	8002dde <HAL_PCD_EP_DB_Transmit+0x45e>
 8002dd8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002dda:	3301      	adds	r3, #1
 8002ddc:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002dde:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002de0:	b29b      	uxth	r3, r3
 8002de2:	029b      	lsls	r3, r3, #10
 8002de4:	b29a      	uxth	r2, r3
 8002de6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002de8:	801a      	strh	r2, [r3, #0]
 8002dea:	e02f      	b.n	8002e4c <HAL_PCD_EP_DB_Transmit+0x4cc>
 8002dec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002dee:	095b      	lsrs	r3, r3, #5
 8002df0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002df2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002df4:	f003 031f 	and.w	r3, r3, #31
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d102      	bne.n	8002e02 <HAL_PCD_EP_DB_Transmit+0x482>
 8002dfc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002dfe:	3b01      	subs	r3, #1
 8002e00:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002e02:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002e04:	b29b      	uxth	r3, r3
 8002e06:	029b      	lsls	r3, r3, #10
 8002e08:	b29b      	uxth	r3, r3
 8002e0a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002e0e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002e12:	b29a      	uxth	r2, r3
 8002e14:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002e16:	801a      	strh	r2, [r3, #0]
 8002e18:	e018      	b.n	8002e4c <HAL_PCD_EP_DB_Transmit+0x4cc>
 8002e1a:	68bb      	ldr	r3, [r7, #8]
 8002e1c:	785b      	ldrb	r3, [r3, #1]
 8002e1e:	2b01      	cmp	r3, #1
 8002e20:	d114      	bne.n	8002e4c <HAL_PCD_EP_DB_Transmit+0x4cc>
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002e2a:	b29b      	uxth	r3, r3
 8002e2c:	461a      	mov	r2, r3
 8002e2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e30:	4413      	add	r3, r2
 8002e32:	637b      	str	r3, [r7, #52]	; 0x34
 8002e34:	68bb      	ldr	r3, [r7, #8]
 8002e36:	781b      	ldrb	r3, [r3, #0]
 8002e38:	011a      	lsls	r2, r3, #4
 8002e3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e3c:	4413      	add	r3, r2
 8002e3e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002e42:	633b      	str	r3, [r7, #48]	; 0x30
 8002e44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e46:	b29a      	uxth	r2, r3
 8002e48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e4a:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	6818      	ldr	r0, [r3, #0]
 8002e50:	68bb      	ldr	r3, [r7, #8]
 8002e52:	6959      	ldr	r1, [r3, #20]
 8002e54:	68bb      	ldr	r3, [r7, #8]
 8002e56:	895a      	ldrh	r2, [r3, #10]
 8002e58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e5a:	b29b      	uxth	r3, r3
 8002e5c:	f003 fbb5 	bl	80065ca <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	461a      	mov	r2, r3
 8002e66:	68bb      	ldr	r3, [r7, #8]
 8002e68:	781b      	ldrb	r3, [r3, #0]
 8002e6a:	009b      	lsls	r3, r3, #2
 8002e6c:	4413      	add	r3, r2
 8002e6e:	881b      	ldrh	r3, [r3, #0]
 8002e70:	b29b      	uxth	r3, r3
 8002e72:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002e76:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002e7a:	823b      	strh	r3, [r7, #16]
 8002e7c:	8a3b      	ldrh	r3, [r7, #16]
 8002e7e:	f083 0310 	eor.w	r3, r3, #16
 8002e82:	823b      	strh	r3, [r7, #16]
 8002e84:	8a3b      	ldrh	r3, [r7, #16]
 8002e86:	f083 0320 	eor.w	r3, r3, #32
 8002e8a:	823b      	strh	r3, [r7, #16]
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	461a      	mov	r2, r3
 8002e92:	68bb      	ldr	r3, [r7, #8]
 8002e94:	781b      	ldrb	r3, [r3, #0]
 8002e96:	009b      	lsls	r3, r3, #2
 8002e98:	441a      	add	r2, r3
 8002e9a:	8a3b      	ldrh	r3, [r7, #16]
 8002e9c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002ea0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002ea4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002ea8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002eac:	b29b      	uxth	r3, r3
 8002eae:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8002eb0:	2300      	movs	r3, #0
}
 8002eb2:	4618      	mov	r0, r3
 8002eb4:	3748      	adds	r7, #72	; 0x48
 8002eb6:	46bd      	mov	sp, r7
 8002eb8:	bd80      	pop	{r7, pc}

08002eba <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8002eba:	b480      	push	{r7}
 8002ebc:	b087      	sub	sp, #28
 8002ebe:	af00      	add	r7, sp, #0
 8002ec0:	60f8      	str	r0, [r7, #12]
 8002ec2:	607b      	str	r3, [r7, #4]
 8002ec4:	460b      	mov	r3, r1
 8002ec6:	817b      	strh	r3, [r7, #10]
 8002ec8:	4613      	mov	r3, r2
 8002eca:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8002ecc:	897b      	ldrh	r3, [r7, #10]
 8002ece:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ed2:	b29b      	uxth	r3, r3
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d00b      	beq.n	8002ef0 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002ed8:	897b      	ldrh	r3, [r7, #10]
 8002eda:	f003 0307 	and.w	r3, r3, #7
 8002ede:	1c5a      	adds	r2, r3, #1
 8002ee0:	4613      	mov	r3, r2
 8002ee2:	009b      	lsls	r3, r3, #2
 8002ee4:	4413      	add	r3, r2
 8002ee6:	00db      	lsls	r3, r3, #3
 8002ee8:	68fa      	ldr	r2, [r7, #12]
 8002eea:	4413      	add	r3, r2
 8002eec:	617b      	str	r3, [r7, #20]
 8002eee:	e009      	b.n	8002f04 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002ef0:	897a      	ldrh	r2, [r7, #10]
 8002ef2:	4613      	mov	r3, r2
 8002ef4:	009b      	lsls	r3, r3, #2
 8002ef6:	4413      	add	r3, r2
 8002ef8:	00db      	lsls	r3, r3, #3
 8002efa:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002efe:	68fa      	ldr	r2, [r7, #12]
 8002f00:	4413      	add	r3, r2
 8002f02:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8002f04:	893b      	ldrh	r3, [r7, #8]
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d107      	bne.n	8002f1a <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8002f0a:	697b      	ldr	r3, [r7, #20]
 8002f0c:	2200      	movs	r2, #0
 8002f0e:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	b29a      	uxth	r2, r3
 8002f14:	697b      	ldr	r3, [r7, #20]
 8002f16:	80da      	strh	r2, [r3, #6]
 8002f18:	e00b      	b.n	8002f32 <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8002f1a:	697b      	ldr	r3, [r7, #20]
 8002f1c:	2201      	movs	r2, #1
 8002f1e:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	b29a      	uxth	r2, r3
 8002f24:	697b      	ldr	r3, [r7, #20]
 8002f26:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	0c1b      	lsrs	r3, r3, #16
 8002f2c:	b29a      	uxth	r2, r3
 8002f2e:	697b      	ldr	r3, [r7, #20]
 8002f30:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 8002f32:	2300      	movs	r3, #0
}
 8002f34:	4618      	mov	r0, r3
 8002f36:	371c      	adds	r7, #28
 8002f38:	46bd      	mov	sp, r7
 8002f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f3e:	4770      	bx	lr

08002f40 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002f40:	b580      	push	{r7, lr}
 8002f42:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8002f46:	af00      	add	r7, sp, #0
 8002f48:	1d3b      	adds	r3, r7, #4
 8002f4a:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002f4c:	1d3b      	adds	r3, r7, #4
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d102      	bne.n	8002f5a <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8002f54:	2301      	movs	r3, #1
 8002f56:	f000 bef4 	b.w	8003d42 <HAL_RCC_OscConfig+0xe02>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002f5a:	1d3b      	adds	r3, r7, #4
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	f003 0301 	and.w	r3, r3, #1
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	f000 816a 	beq.w	800323e <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8002f6a:	4bb3      	ldr	r3, [pc, #716]	; (8003238 <HAL_RCC_OscConfig+0x2f8>)
 8002f6c:	685b      	ldr	r3, [r3, #4]
 8002f6e:	f003 030c 	and.w	r3, r3, #12
 8002f72:	2b04      	cmp	r3, #4
 8002f74:	d00c      	beq.n	8002f90 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002f76:	4bb0      	ldr	r3, [pc, #704]	; (8003238 <HAL_RCC_OscConfig+0x2f8>)
 8002f78:	685b      	ldr	r3, [r3, #4]
 8002f7a:	f003 030c 	and.w	r3, r3, #12
 8002f7e:	2b08      	cmp	r3, #8
 8002f80:	d159      	bne.n	8003036 <HAL_RCC_OscConfig+0xf6>
 8002f82:	4bad      	ldr	r3, [pc, #692]	; (8003238 <HAL_RCC_OscConfig+0x2f8>)
 8002f84:	685b      	ldr	r3, [r3, #4]
 8002f86:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f8a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f8e:	d152      	bne.n	8003036 <HAL_RCC_OscConfig+0xf6>
 8002f90:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002f94:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f98:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8002f9c:	fa93 f3a3 	rbit	r3, r3
 8002fa0:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002fa4:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002fa8:	fab3 f383 	clz	r3, r3
 8002fac:	b2db      	uxtb	r3, r3
 8002fae:	095b      	lsrs	r3, r3, #5
 8002fb0:	b2db      	uxtb	r3, r3
 8002fb2:	f043 0301 	orr.w	r3, r3, #1
 8002fb6:	b2db      	uxtb	r3, r3
 8002fb8:	2b01      	cmp	r3, #1
 8002fba:	d102      	bne.n	8002fc2 <HAL_RCC_OscConfig+0x82>
 8002fbc:	4b9e      	ldr	r3, [pc, #632]	; (8003238 <HAL_RCC_OscConfig+0x2f8>)
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	e015      	b.n	8002fee <HAL_RCC_OscConfig+0xae>
 8002fc2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002fc6:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fca:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8002fce:	fa93 f3a3 	rbit	r3, r3
 8002fd2:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8002fd6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002fda:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8002fde:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8002fe2:	fa93 f3a3 	rbit	r3, r3
 8002fe6:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8002fea:	4b93      	ldr	r3, [pc, #588]	; (8003238 <HAL_RCC_OscConfig+0x2f8>)
 8002fec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fee:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002ff2:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8002ff6:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8002ffa:	fa92 f2a2 	rbit	r2, r2
 8002ffe:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8003002:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8003006:	fab2 f282 	clz	r2, r2
 800300a:	b2d2      	uxtb	r2, r2
 800300c:	f042 0220 	orr.w	r2, r2, #32
 8003010:	b2d2      	uxtb	r2, r2
 8003012:	f002 021f 	and.w	r2, r2, #31
 8003016:	2101      	movs	r1, #1
 8003018:	fa01 f202 	lsl.w	r2, r1, r2
 800301c:	4013      	ands	r3, r2
 800301e:	2b00      	cmp	r3, #0
 8003020:	f000 810c 	beq.w	800323c <HAL_RCC_OscConfig+0x2fc>
 8003024:	1d3b      	adds	r3, r7, #4
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	685b      	ldr	r3, [r3, #4]
 800302a:	2b00      	cmp	r3, #0
 800302c:	f040 8106 	bne.w	800323c <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 8003030:	2301      	movs	r3, #1
 8003032:	f000 be86 	b.w	8003d42 <HAL_RCC_OscConfig+0xe02>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003036:	1d3b      	adds	r3, r7, #4
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	685b      	ldr	r3, [r3, #4]
 800303c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003040:	d106      	bne.n	8003050 <HAL_RCC_OscConfig+0x110>
 8003042:	4b7d      	ldr	r3, [pc, #500]	; (8003238 <HAL_RCC_OscConfig+0x2f8>)
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	4a7c      	ldr	r2, [pc, #496]	; (8003238 <HAL_RCC_OscConfig+0x2f8>)
 8003048:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800304c:	6013      	str	r3, [r2, #0]
 800304e:	e030      	b.n	80030b2 <HAL_RCC_OscConfig+0x172>
 8003050:	1d3b      	adds	r3, r7, #4
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	685b      	ldr	r3, [r3, #4]
 8003056:	2b00      	cmp	r3, #0
 8003058:	d10c      	bne.n	8003074 <HAL_RCC_OscConfig+0x134>
 800305a:	4b77      	ldr	r3, [pc, #476]	; (8003238 <HAL_RCC_OscConfig+0x2f8>)
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	4a76      	ldr	r2, [pc, #472]	; (8003238 <HAL_RCC_OscConfig+0x2f8>)
 8003060:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003064:	6013      	str	r3, [r2, #0]
 8003066:	4b74      	ldr	r3, [pc, #464]	; (8003238 <HAL_RCC_OscConfig+0x2f8>)
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	4a73      	ldr	r2, [pc, #460]	; (8003238 <HAL_RCC_OscConfig+0x2f8>)
 800306c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003070:	6013      	str	r3, [r2, #0]
 8003072:	e01e      	b.n	80030b2 <HAL_RCC_OscConfig+0x172>
 8003074:	1d3b      	adds	r3, r7, #4
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	685b      	ldr	r3, [r3, #4]
 800307a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800307e:	d10c      	bne.n	800309a <HAL_RCC_OscConfig+0x15a>
 8003080:	4b6d      	ldr	r3, [pc, #436]	; (8003238 <HAL_RCC_OscConfig+0x2f8>)
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	4a6c      	ldr	r2, [pc, #432]	; (8003238 <HAL_RCC_OscConfig+0x2f8>)
 8003086:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800308a:	6013      	str	r3, [r2, #0]
 800308c:	4b6a      	ldr	r3, [pc, #424]	; (8003238 <HAL_RCC_OscConfig+0x2f8>)
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	4a69      	ldr	r2, [pc, #420]	; (8003238 <HAL_RCC_OscConfig+0x2f8>)
 8003092:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003096:	6013      	str	r3, [r2, #0]
 8003098:	e00b      	b.n	80030b2 <HAL_RCC_OscConfig+0x172>
 800309a:	4b67      	ldr	r3, [pc, #412]	; (8003238 <HAL_RCC_OscConfig+0x2f8>)
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	4a66      	ldr	r2, [pc, #408]	; (8003238 <HAL_RCC_OscConfig+0x2f8>)
 80030a0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80030a4:	6013      	str	r3, [r2, #0]
 80030a6:	4b64      	ldr	r3, [pc, #400]	; (8003238 <HAL_RCC_OscConfig+0x2f8>)
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	4a63      	ldr	r2, [pc, #396]	; (8003238 <HAL_RCC_OscConfig+0x2f8>)
 80030ac:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80030b0:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80030b2:	4b61      	ldr	r3, [pc, #388]	; (8003238 <HAL_RCC_OscConfig+0x2f8>)
 80030b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030b6:	f023 020f 	bic.w	r2, r3, #15
 80030ba:	1d3b      	adds	r3, r7, #4
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	689b      	ldr	r3, [r3, #8]
 80030c0:	495d      	ldr	r1, [pc, #372]	; (8003238 <HAL_RCC_OscConfig+0x2f8>)
 80030c2:	4313      	orrs	r3, r2
 80030c4:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80030c6:	1d3b      	adds	r3, r7, #4
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	685b      	ldr	r3, [r3, #4]
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d059      	beq.n	8003184 <HAL_RCC_OscConfig+0x244>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030d0:	f7fe f852 	bl	8001178 <HAL_GetTick>
 80030d4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80030d8:	e00a      	b.n	80030f0 <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80030da:	f7fe f84d 	bl	8001178 <HAL_GetTick>
 80030de:	4602      	mov	r2, r0
 80030e0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80030e4:	1ad3      	subs	r3, r2, r3
 80030e6:	2b64      	cmp	r3, #100	; 0x64
 80030e8:	d902      	bls.n	80030f0 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 80030ea:	2303      	movs	r3, #3
 80030ec:	f000 be29 	b.w	8003d42 <HAL_RCC_OscConfig+0xe02>
 80030f0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80030f4:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030f8:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 80030fc:	fa93 f3a3 	rbit	r3, r3
 8003100:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8003104:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003108:	fab3 f383 	clz	r3, r3
 800310c:	b2db      	uxtb	r3, r3
 800310e:	095b      	lsrs	r3, r3, #5
 8003110:	b2db      	uxtb	r3, r3
 8003112:	f043 0301 	orr.w	r3, r3, #1
 8003116:	b2db      	uxtb	r3, r3
 8003118:	2b01      	cmp	r3, #1
 800311a:	d102      	bne.n	8003122 <HAL_RCC_OscConfig+0x1e2>
 800311c:	4b46      	ldr	r3, [pc, #280]	; (8003238 <HAL_RCC_OscConfig+0x2f8>)
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	e015      	b.n	800314e <HAL_RCC_OscConfig+0x20e>
 8003122:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003126:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800312a:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 800312e:	fa93 f3a3 	rbit	r3, r3
 8003132:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8003136:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800313a:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 800313e:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8003142:	fa93 f3a3 	rbit	r3, r3
 8003146:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 800314a:	4b3b      	ldr	r3, [pc, #236]	; (8003238 <HAL_RCC_OscConfig+0x2f8>)
 800314c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800314e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003152:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8003156:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 800315a:	fa92 f2a2 	rbit	r2, r2
 800315e:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8003162:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8003166:	fab2 f282 	clz	r2, r2
 800316a:	b2d2      	uxtb	r2, r2
 800316c:	f042 0220 	orr.w	r2, r2, #32
 8003170:	b2d2      	uxtb	r2, r2
 8003172:	f002 021f 	and.w	r2, r2, #31
 8003176:	2101      	movs	r1, #1
 8003178:	fa01 f202 	lsl.w	r2, r1, r2
 800317c:	4013      	ands	r3, r2
 800317e:	2b00      	cmp	r3, #0
 8003180:	d0ab      	beq.n	80030da <HAL_RCC_OscConfig+0x19a>
 8003182:	e05c      	b.n	800323e <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003184:	f7fd fff8 	bl	8001178 <HAL_GetTick>
 8003188:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800318c:	e00a      	b.n	80031a4 <HAL_RCC_OscConfig+0x264>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800318e:	f7fd fff3 	bl	8001178 <HAL_GetTick>
 8003192:	4602      	mov	r2, r0
 8003194:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003198:	1ad3      	subs	r3, r2, r3
 800319a:	2b64      	cmp	r3, #100	; 0x64
 800319c:	d902      	bls.n	80031a4 <HAL_RCC_OscConfig+0x264>
          {
            return HAL_TIMEOUT;
 800319e:	2303      	movs	r3, #3
 80031a0:	f000 bdcf 	b.w	8003d42 <HAL_RCC_OscConfig+0xe02>
 80031a4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80031a8:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031ac:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 80031b0:	fa93 f3a3 	rbit	r3, r3
 80031b4:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 80031b8:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80031bc:	fab3 f383 	clz	r3, r3
 80031c0:	b2db      	uxtb	r3, r3
 80031c2:	095b      	lsrs	r3, r3, #5
 80031c4:	b2db      	uxtb	r3, r3
 80031c6:	f043 0301 	orr.w	r3, r3, #1
 80031ca:	b2db      	uxtb	r3, r3
 80031cc:	2b01      	cmp	r3, #1
 80031ce:	d102      	bne.n	80031d6 <HAL_RCC_OscConfig+0x296>
 80031d0:	4b19      	ldr	r3, [pc, #100]	; (8003238 <HAL_RCC_OscConfig+0x2f8>)
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	e015      	b.n	8003202 <HAL_RCC_OscConfig+0x2c2>
 80031d6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80031da:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031de:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 80031e2:	fa93 f3a3 	rbit	r3, r3
 80031e6:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 80031ea:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80031ee:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 80031f2:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 80031f6:	fa93 f3a3 	rbit	r3, r3
 80031fa:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 80031fe:	4b0e      	ldr	r3, [pc, #56]	; (8003238 <HAL_RCC_OscConfig+0x2f8>)
 8003200:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003202:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003206:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 800320a:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 800320e:	fa92 f2a2 	rbit	r2, r2
 8003212:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8003216:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 800321a:	fab2 f282 	clz	r2, r2
 800321e:	b2d2      	uxtb	r2, r2
 8003220:	f042 0220 	orr.w	r2, r2, #32
 8003224:	b2d2      	uxtb	r2, r2
 8003226:	f002 021f 	and.w	r2, r2, #31
 800322a:	2101      	movs	r1, #1
 800322c:	fa01 f202 	lsl.w	r2, r1, r2
 8003230:	4013      	ands	r3, r2
 8003232:	2b00      	cmp	r3, #0
 8003234:	d1ab      	bne.n	800318e <HAL_RCC_OscConfig+0x24e>
 8003236:	e002      	b.n	800323e <HAL_RCC_OscConfig+0x2fe>
 8003238:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800323c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800323e:	1d3b      	adds	r3, r7, #4
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	f003 0302 	and.w	r3, r3, #2
 8003248:	2b00      	cmp	r3, #0
 800324a:	f000 816f 	beq.w	800352c <HAL_RCC_OscConfig+0x5ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800324e:	4bd0      	ldr	r3, [pc, #832]	; (8003590 <HAL_RCC_OscConfig+0x650>)
 8003250:	685b      	ldr	r3, [r3, #4]
 8003252:	f003 030c 	and.w	r3, r3, #12
 8003256:	2b00      	cmp	r3, #0
 8003258:	d00b      	beq.n	8003272 <HAL_RCC_OscConfig+0x332>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800325a:	4bcd      	ldr	r3, [pc, #820]	; (8003590 <HAL_RCC_OscConfig+0x650>)
 800325c:	685b      	ldr	r3, [r3, #4]
 800325e:	f003 030c 	and.w	r3, r3, #12
 8003262:	2b08      	cmp	r3, #8
 8003264:	d16c      	bne.n	8003340 <HAL_RCC_OscConfig+0x400>
 8003266:	4bca      	ldr	r3, [pc, #808]	; (8003590 <HAL_RCC_OscConfig+0x650>)
 8003268:	685b      	ldr	r3, [r3, #4]
 800326a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800326e:	2b00      	cmp	r3, #0
 8003270:	d166      	bne.n	8003340 <HAL_RCC_OscConfig+0x400>
 8003272:	2302      	movs	r3, #2
 8003274:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003278:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 800327c:	fa93 f3a3 	rbit	r3, r3
 8003280:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8003284:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003288:	fab3 f383 	clz	r3, r3
 800328c:	b2db      	uxtb	r3, r3
 800328e:	095b      	lsrs	r3, r3, #5
 8003290:	b2db      	uxtb	r3, r3
 8003292:	f043 0301 	orr.w	r3, r3, #1
 8003296:	b2db      	uxtb	r3, r3
 8003298:	2b01      	cmp	r3, #1
 800329a:	d102      	bne.n	80032a2 <HAL_RCC_OscConfig+0x362>
 800329c:	4bbc      	ldr	r3, [pc, #752]	; (8003590 <HAL_RCC_OscConfig+0x650>)
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	e013      	b.n	80032ca <HAL_RCC_OscConfig+0x38a>
 80032a2:	2302      	movs	r3, #2
 80032a4:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032a8:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 80032ac:	fa93 f3a3 	rbit	r3, r3
 80032b0:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 80032b4:	2302      	movs	r3, #2
 80032b6:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 80032ba:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80032be:	fa93 f3a3 	rbit	r3, r3
 80032c2:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 80032c6:	4bb2      	ldr	r3, [pc, #712]	; (8003590 <HAL_RCC_OscConfig+0x650>)
 80032c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032ca:	2202      	movs	r2, #2
 80032cc:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 80032d0:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 80032d4:	fa92 f2a2 	rbit	r2, r2
 80032d8:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 80032dc:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 80032e0:	fab2 f282 	clz	r2, r2
 80032e4:	b2d2      	uxtb	r2, r2
 80032e6:	f042 0220 	orr.w	r2, r2, #32
 80032ea:	b2d2      	uxtb	r2, r2
 80032ec:	f002 021f 	and.w	r2, r2, #31
 80032f0:	2101      	movs	r1, #1
 80032f2:	fa01 f202 	lsl.w	r2, r1, r2
 80032f6:	4013      	ands	r3, r2
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d007      	beq.n	800330c <HAL_RCC_OscConfig+0x3cc>
 80032fc:	1d3b      	adds	r3, r7, #4
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	691b      	ldr	r3, [r3, #16]
 8003302:	2b01      	cmp	r3, #1
 8003304:	d002      	beq.n	800330c <HAL_RCC_OscConfig+0x3cc>
      {
        return HAL_ERROR;
 8003306:	2301      	movs	r3, #1
 8003308:	f000 bd1b 	b.w	8003d42 <HAL_RCC_OscConfig+0xe02>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800330c:	4ba0      	ldr	r3, [pc, #640]	; (8003590 <HAL_RCC_OscConfig+0x650>)
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003314:	1d3b      	adds	r3, r7, #4
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	695b      	ldr	r3, [r3, #20]
 800331a:	21f8      	movs	r1, #248	; 0xf8
 800331c:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003320:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8003324:	fa91 f1a1 	rbit	r1, r1
 8003328:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 800332c:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8003330:	fab1 f181 	clz	r1, r1
 8003334:	b2c9      	uxtb	r1, r1
 8003336:	408b      	lsls	r3, r1
 8003338:	4995      	ldr	r1, [pc, #596]	; (8003590 <HAL_RCC_OscConfig+0x650>)
 800333a:	4313      	orrs	r3, r2
 800333c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800333e:	e0f5      	b.n	800352c <HAL_RCC_OscConfig+0x5ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003340:	1d3b      	adds	r3, r7, #4
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	691b      	ldr	r3, [r3, #16]
 8003346:	2b00      	cmp	r3, #0
 8003348:	f000 8085 	beq.w	8003456 <HAL_RCC_OscConfig+0x516>
 800334c:	2301      	movs	r3, #1
 800334e:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003352:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8003356:	fa93 f3a3 	rbit	r3, r3
 800335a:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 800335e:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003362:	fab3 f383 	clz	r3, r3
 8003366:	b2db      	uxtb	r3, r3
 8003368:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800336c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003370:	009b      	lsls	r3, r3, #2
 8003372:	461a      	mov	r2, r3
 8003374:	2301      	movs	r3, #1
 8003376:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003378:	f7fd fefe 	bl	8001178 <HAL_GetTick>
 800337c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003380:	e00a      	b.n	8003398 <HAL_RCC_OscConfig+0x458>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003382:	f7fd fef9 	bl	8001178 <HAL_GetTick>
 8003386:	4602      	mov	r2, r0
 8003388:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800338c:	1ad3      	subs	r3, r2, r3
 800338e:	2b02      	cmp	r3, #2
 8003390:	d902      	bls.n	8003398 <HAL_RCC_OscConfig+0x458>
          {
            return HAL_TIMEOUT;
 8003392:	2303      	movs	r3, #3
 8003394:	f000 bcd5 	b.w	8003d42 <HAL_RCC_OscConfig+0xe02>
 8003398:	2302      	movs	r3, #2
 800339a:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800339e:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 80033a2:	fa93 f3a3 	rbit	r3, r3
 80033a6:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 80033aa:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80033ae:	fab3 f383 	clz	r3, r3
 80033b2:	b2db      	uxtb	r3, r3
 80033b4:	095b      	lsrs	r3, r3, #5
 80033b6:	b2db      	uxtb	r3, r3
 80033b8:	f043 0301 	orr.w	r3, r3, #1
 80033bc:	b2db      	uxtb	r3, r3
 80033be:	2b01      	cmp	r3, #1
 80033c0:	d102      	bne.n	80033c8 <HAL_RCC_OscConfig+0x488>
 80033c2:	4b73      	ldr	r3, [pc, #460]	; (8003590 <HAL_RCC_OscConfig+0x650>)
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	e013      	b.n	80033f0 <HAL_RCC_OscConfig+0x4b0>
 80033c8:	2302      	movs	r3, #2
 80033ca:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033ce:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 80033d2:	fa93 f3a3 	rbit	r3, r3
 80033d6:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 80033da:	2302      	movs	r3, #2
 80033dc:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 80033e0:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 80033e4:	fa93 f3a3 	rbit	r3, r3
 80033e8:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 80033ec:	4b68      	ldr	r3, [pc, #416]	; (8003590 <HAL_RCC_OscConfig+0x650>)
 80033ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033f0:	2202      	movs	r2, #2
 80033f2:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 80033f6:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 80033fa:	fa92 f2a2 	rbit	r2, r2
 80033fe:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8003402:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8003406:	fab2 f282 	clz	r2, r2
 800340a:	b2d2      	uxtb	r2, r2
 800340c:	f042 0220 	orr.w	r2, r2, #32
 8003410:	b2d2      	uxtb	r2, r2
 8003412:	f002 021f 	and.w	r2, r2, #31
 8003416:	2101      	movs	r1, #1
 8003418:	fa01 f202 	lsl.w	r2, r1, r2
 800341c:	4013      	ands	r3, r2
 800341e:	2b00      	cmp	r3, #0
 8003420:	d0af      	beq.n	8003382 <HAL_RCC_OscConfig+0x442>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003422:	4b5b      	ldr	r3, [pc, #364]	; (8003590 <HAL_RCC_OscConfig+0x650>)
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800342a:	1d3b      	adds	r3, r7, #4
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	695b      	ldr	r3, [r3, #20]
 8003430:	21f8      	movs	r1, #248	; 0xf8
 8003432:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003436:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 800343a:	fa91 f1a1 	rbit	r1, r1
 800343e:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8003442:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8003446:	fab1 f181 	clz	r1, r1
 800344a:	b2c9      	uxtb	r1, r1
 800344c:	408b      	lsls	r3, r1
 800344e:	4950      	ldr	r1, [pc, #320]	; (8003590 <HAL_RCC_OscConfig+0x650>)
 8003450:	4313      	orrs	r3, r2
 8003452:	600b      	str	r3, [r1, #0]
 8003454:	e06a      	b.n	800352c <HAL_RCC_OscConfig+0x5ec>
 8003456:	2301      	movs	r3, #1
 8003458:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800345c:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8003460:	fa93 f3a3 	rbit	r3, r3
 8003464:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8003468:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800346c:	fab3 f383 	clz	r3, r3
 8003470:	b2db      	uxtb	r3, r3
 8003472:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003476:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800347a:	009b      	lsls	r3, r3, #2
 800347c:	461a      	mov	r2, r3
 800347e:	2300      	movs	r3, #0
 8003480:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003482:	f7fd fe79 	bl	8001178 <HAL_GetTick>
 8003486:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800348a:	e00a      	b.n	80034a2 <HAL_RCC_OscConfig+0x562>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800348c:	f7fd fe74 	bl	8001178 <HAL_GetTick>
 8003490:	4602      	mov	r2, r0
 8003492:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003496:	1ad3      	subs	r3, r2, r3
 8003498:	2b02      	cmp	r3, #2
 800349a:	d902      	bls.n	80034a2 <HAL_RCC_OscConfig+0x562>
          {
            return HAL_TIMEOUT;
 800349c:	2303      	movs	r3, #3
 800349e:	f000 bc50 	b.w	8003d42 <HAL_RCC_OscConfig+0xe02>
 80034a2:	2302      	movs	r3, #2
 80034a4:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034a8:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80034ac:	fa93 f3a3 	rbit	r3, r3
 80034b0:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 80034b4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80034b8:	fab3 f383 	clz	r3, r3
 80034bc:	b2db      	uxtb	r3, r3
 80034be:	095b      	lsrs	r3, r3, #5
 80034c0:	b2db      	uxtb	r3, r3
 80034c2:	f043 0301 	orr.w	r3, r3, #1
 80034c6:	b2db      	uxtb	r3, r3
 80034c8:	2b01      	cmp	r3, #1
 80034ca:	d102      	bne.n	80034d2 <HAL_RCC_OscConfig+0x592>
 80034cc:	4b30      	ldr	r3, [pc, #192]	; (8003590 <HAL_RCC_OscConfig+0x650>)
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	e013      	b.n	80034fa <HAL_RCC_OscConfig+0x5ba>
 80034d2:	2302      	movs	r3, #2
 80034d4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034d8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80034dc:	fa93 f3a3 	rbit	r3, r3
 80034e0:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80034e4:	2302      	movs	r3, #2
 80034e6:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80034ea:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80034ee:	fa93 f3a3 	rbit	r3, r3
 80034f2:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80034f6:	4b26      	ldr	r3, [pc, #152]	; (8003590 <HAL_RCC_OscConfig+0x650>)
 80034f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034fa:	2202      	movs	r2, #2
 80034fc:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8003500:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8003504:	fa92 f2a2 	rbit	r2, r2
 8003508:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 800350c:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8003510:	fab2 f282 	clz	r2, r2
 8003514:	b2d2      	uxtb	r2, r2
 8003516:	f042 0220 	orr.w	r2, r2, #32
 800351a:	b2d2      	uxtb	r2, r2
 800351c:	f002 021f 	and.w	r2, r2, #31
 8003520:	2101      	movs	r1, #1
 8003522:	fa01 f202 	lsl.w	r2, r1, r2
 8003526:	4013      	ands	r3, r2
 8003528:	2b00      	cmp	r3, #0
 800352a:	d1af      	bne.n	800348c <HAL_RCC_OscConfig+0x54c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800352c:	1d3b      	adds	r3, r7, #4
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	f003 0308 	and.w	r3, r3, #8
 8003536:	2b00      	cmp	r3, #0
 8003538:	f000 80da 	beq.w	80036f0 <HAL_RCC_OscConfig+0x7b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800353c:	1d3b      	adds	r3, r7, #4
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	699b      	ldr	r3, [r3, #24]
 8003542:	2b00      	cmp	r3, #0
 8003544:	d069      	beq.n	800361a <HAL_RCC_OscConfig+0x6da>
 8003546:	2301      	movs	r3, #1
 8003548:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800354c:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8003550:	fa93 f3a3 	rbit	r3, r3
 8003554:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8003558:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800355c:	fab3 f383 	clz	r3, r3
 8003560:	b2db      	uxtb	r3, r3
 8003562:	461a      	mov	r2, r3
 8003564:	4b0b      	ldr	r3, [pc, #44]	; (8003594 <HAL_RCC_OscConfig+0x654>)
 8003566:	4413      	add	r3, r2
 8003568:	009b      	lsls	r3, r3, #2
 800356a:	461a      	mov	r2, r3
 800356c:	2301      	movs	r3, #1
 800356e:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003570:	f7fd fe02 	bl	8001178 <HAL_GetTick>
 8003574:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003578:	e00e      	b.n	8003598 <HAL_RCC_OscConfig+0x658>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800357a:	f7fd fdfd 	bl	8001178 <HAL_GetTick>
 800357e:	4602      	mov	r2, r0
 8003580:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003584:	1ad3      	subs	r3, r2, r3
 8003586:	2b02      	cmp	r3, #2
 8003588:	d906      	bls.n	8003598 <HAL_RCC_OscConfig+0x658>
        {
          return HAL_TIMEOUT;
 800358a:	2303      	movs	r3, #3
 800358c:	e3d9      	b.n	8003d42 <HAL_RCC_OscConfig+0xe02>
 800358e:	bf00      	nop
 8003590:	40021000 	.word	0x40021000
 8003594:	10908120 	.word	0x10908120
 8003598:	2302      	movs	r3, #2
 800359a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800359e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80035a2:	fa93 f3a3 	rbit	r3, r3
 80035a6:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80035aa:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80035ae:	2202      	movs	r2, #2
 80035b0:	601a      	str	r2, [r3, #0]
 80035b2:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	fa93 f2a3 	rbit	r2, r3
 80035bc:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 80035c0:	601a      	str	r2, [r3, #0]
 80035c2:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 80035c6:	2202      	movs	r2, #2
 80035c8:	601a      	str	r2, [r3, #0]
 80035ca:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	fa93 f2a3 	rbit	r2, r3
 80035d4:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 80035d8:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80035da:	4ba5      	ldr	r3, [pc, #660]	; (8003870 <HAL_RCC_OscConfig+0x930>)
 80035dc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80035de:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 80035e2:	2102      	movs	r1, #2
 80035e4:	6019      	str	r1, [r3, #0]
 80035e6:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	fa93 f1a3 	rbit	r1, r3
 80035f0:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80035f4:	6019      	str	r1, [r3, #0]
  return result;
 80035f6:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	fab3 f383 	clz	r3, r3
 8003600:	b2db      	uxtb	r3, r3
 8003602:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8003606:	b2db      	uxtb	r3, r3
 8003608:	f003 031f 	and.w	r3, r3, #31
 800360c:	2101      	movs	r1, #1
 800360e:	fa01 f303 	lsl.w	r3, r1, r3
 8003612:	4013      	ands	r3, r2
 8003614:	2b00      	cmp	r3, #0
 8003616:	d0b0      	beq.n	800357a <HAL_RCC_OscConfig+0x63a>
 8003618:	e06a      	b.n	80036f0 <HAL_RCC_OscConfig+0x7b0>
 800361a:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 800361e:	2201      	movs	r2, #1
 8003620:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003622:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	fa93 f2a3 	rbit	r2, r3
 800362c:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8003630:	601a      	str	r2, [r3, #0]
  return result;
 8003632:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8003636:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003638:	fab3 f383 	clz	r3, r3
 800363c:	b2db      	uxtb	r3, r3
 800363e:	461a      	mov	r2, r3
 8003640:	4b8c      	ldr	r3, [pc, #560]	; (8003874 <HAL_RCC_OscConfig+0x934>)
 8003642:	4413      	add	r3, r2
 8003644:	009b      	lsls	r3, r3, #2
 8003646:	461a      	mov	r2, r3
 8003648:	2300      	movs	r3, #0
 800364a:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800364c:	f7fd fd94 	bl	8001178 <HAL_GetTick>
 8003650:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003654:	e009      	b.n	800366a <HAL_RCC_OscConfig+0x72a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003656:	f7fd fd8f 	bl	8001178 <HAL_GetTick>
 800365a:	4602      	mov	r2, r0
 800365c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003660:	1ad3      	subs	r3, r2, r3
 8003662:	2b02      	cmp	r3, #2
 8003664:	d901      	bls.n	800366a <HAL_RCC_OscConfig+0x72a>
        {
          return HAL_TIMEOUT;
 8003666:	2303      	movs	r3, #3
 8003668:	e36b      	b.n	8003d42 <HAL_RCC_OscConfig+0xe02>
 800366a:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 800366e:	2202      	movs	r2, #2
 8003670:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003672:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	fa93 f2a3 	rbit	r2, r3
 800367c:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8003680:	601a      	str	r2, [r3, #0]
 8003682:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8003686:	2202      	movs	r2, #2
 8003688:	601a      	str	r2, [r3, #0]
 800368a:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	fa93 f2a3 	rbit	r2, r3
 8003694:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8003698:	601a      	str	r2, [r3, #0]
 800369a:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 800369e:	2202      	movs	r2, #2
 80036a0:	601a      	str	r2, [r3, #0]
 80036a2:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	fa93 f2a3 	rbit	r2, r3
 80036ac:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80036b0:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80036b2:	4b6f      	ldr	r3, [pc, #444]	; (8003870 <HAL_RCC_OscConfig+0x930>)
 80036b4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80036b6:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80036ba:	2102      	movs	r1, #2
 80036bc:	6019      	str	r1, [r3, #0]
 80036be:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	fa93 f1a3 	rbit	r1, r3
 80036c8:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80036cc:	6019      	str	r1, [r3, #0]
  return result;
 80036ce:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	fab3 f383 	clz	r3, r3
 80036d8:	b2db      	uxtb	r3, r3
 80036da:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80036de:	b2db      	uxtb	r3, r3
 80036e0:	f003 031f 	and.w	r3, r3, #31
 80036e4:	2101      	movs	r1, #1
 80036e6:	fa01 f303 	lsl.w	r3, r1, r3
 80036ea:	4013      	ands	r3, r2
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d1b2      	bne.n	8003656 <HAL_RCC_OscConfig+0x716>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80036f0:	1d3b      	adds	r3, r7, #4
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	f003 0304 	and.w	r3, r3, #4
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	f000 8158 	beq.w	80039b0 <HAL_RCC_OscConfig+0xa70>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003700:	2300      	movs	r3, #0
 8003702:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003706:	4b5a      	ldr	r3, [pc, #360]	; (8003870 <HAL_RCC_OscConfig+0x930>)
 8003708:	69db      	ldr	r3, [r3, #28]
 800370a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800370e:	2b00      	cmp	r3, #0
 8003710:	d112      	bne.n	8003738 <HAL_RCC_OscConfig+0x7f8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003712:	4b57      	ldr	r3, [pc, #348]	; (8003870 <HAL_RCC_OscConfig+0x930>)
 8003714:	69db      	ldr	r3, [r3, #28]
 8003716:	4a56      	ldr	r2, [pc, #344]	; (8003870 <HAL_RCC_OscConfig+0x930>)
 8003718:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800371c:	61d3      	str	r3, [r2, #28]
 800371e:	4b54      	ldr	r3, [pc, #336]	; (8003870 <HAL_RCC_OscConfig+0x930>)
 8003720:	69db      	ldr	r3, [r3, #28]
 8003722:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8003726:	f107 0308 	add.w	r3, r7, #8
 800372a:	601a      	str	r2, [r3, #0]
 800372c:	f107 0308 	add.w	r3, r7, #8
 8003730:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8003732:	2301      	movs	r3, #1
 8003734:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003738:	4b4f      	ldr	r3, [pc, #316]	; (8003878 <HAL_RCC_OscConfig+0x938>)
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003740:	2b00      	cmp	r3, #0
 8003742:	d11a      	bne.n	800377a <HAL_RCC_OscConfig+0x83a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003744:	4b4c      	ldr	r3, [pc, #304]	; (8003878 <HAL_RCC_OscConfig+0x938>)
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	4a4b      	ldr	r2, [pc, #300]	; (8003878 <HAL_RCC_OscConfig+0x938>)
 800374a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800374e:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003750:	f7fd fd12 	bl	8001178 <HAL_GetTick>
 8003754:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003758:	e009      	b.n	800376e <HAL_RCC_OscConfig+0x82e>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800375a:	f7fd fd0d 	bl	8001178 <HAL_GetTick>
 800375e:	4602      	mov	r2, r0
 8003760:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003764:	1ad3      	subs	r3, r2, r3
 8003766:	2b64      	cmp	r3, #100	; 0x64
 8003768:	d901      	bls.n	800376e <HAL_RCC_OscConfig+0x82e>
        {
          return HAL_TIMEOUT;
 800376a:	2303      	movs	r3, #3
 800376c:	e2e9      	b.n	8003d42 <HAL_RCC_OscConfig+0xe02>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800376e:	4b42      	ldr	r3, [pc, #264]	; (8003878 <HAL_RCC_OscConfig+0x938>)
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003776:	2b00      	cmp	r3, #0
 8003778:	d0ef      	beq.n	800375a <HAL_RCC_OscConfig+0x81a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800377a:	1d3b      	adds	r3, r7, #4
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	68db      	ldr	r3, [r3, #12]
 8003780:	2b01      	cmp	r3, #1
 8003782:	d106      	bne.n	8003792 <HAL_RCC_OscConfig+0x852>
 8003784:	4b3a      	ldr	r3, [pc, #232]	; (8003870 <HAL_RCC_OscConfig+0x930>)
 8003786:	6a1b      	ldr	r3, [r3, #32]
 8003788:	4a39      	ldr	r2, [pc, #228]	; (8003870 <HAL_RCC_OscConfig+0x930>)
 800378a:	f043 0301 	orr.w	r3, r3, #1
 800378e:	6213      	str	r3, [r2, #32]
 8003790:	e02f      	b.n	80037f2 <HAL_RCC_OscConfig+0x8b2>
 8003792:	1d3b      	adds	r3, r7, #4
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	68db      	ldr	r3, [r3, #12]
 8003798:	2b00      	cmp	r3, #0
 800379a:	d10c      	bne.n	80037b6 <HAL_RCC_OscConfig+0x876>
 800379c:	4b34      	ldr	r3, [pc, #208]	; (8003870 <HAL_RCC_OscConfig+0x930>)
 800379e:	6a1b      	ldr	r3, [r3, #32]
 80037a0:	4a33      	ldr	r2, [pc, #204]	; (8003870 <HAL_RCC_OscConfig+0x930>)
 80037a2:	f023 0301 	bic.w	r3, r3, #1
 80037a6:	6213      	str	r3, [r2, #32]
 80037a8:	4b31      	ldr	r3, [pc, #196]	; (8003870 <HAL_RCC_OscConfig+0x930>)
 80037aa:	6a1b      	ldr	r3, [r3, #32]
 80037ac:	4a30      	ldr	r2, [pc, #192]	; (8003870 <HAL_RCC_OscConfig+0x930>)
 80037ae:	f023 0304 	bic.w	r3, r3, #4
 80037b2:	6213      	str	r3, [r2, #32]
 80037b4:	e01d      	b.n	80037f2 <HAL_RCC_OscConfig+0x8b2>
 80037b6:	1d3b      	adds	r3, r7, #4
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	68db      	ldr	r3, [r3, #12]
 80037bc:	2b05      	cmp	r3, #5
 80037be:	d10c      	bne.n	80037da <HAL_RCC_OscConfig+0x89a>
 80037c0:	4b2b      	ldr	r3, [pc, #172]	; (8003870 <HAL_RCC_OscConfig+0x930>)
 80037c2:	6a1b      	ldr	r3, [r3, #32]
 80037c4:	4a2a      	ldr	r2, [pc, #168]	; (8003870 <HAL_RCC_OscConfig+0x930>)
 80037c6:	f043 0304 	orr.w	r3, r3, #4
 80037ca:	6213      	str	r3, [r2, #32]
 80037cc:	4b28      	ldr	r3, [pc, #160]	; (8003870 <HAL_RCC_OscConfig+0x930>)
 80037ce:	6a1b      	ldr	r3, [r3, #32]
 80037d0:	4a27      	ldr	r2, [pc, #156]	; (8003870 <HAL_RCC_OscConfig+0x930>)
 80037d2:	f043 0301 	orr.w	r3, r3, #1
 80037d6:	6213      	str	r3, [r2, #32]
 80037d8:	e00b      	b.n	80037f2 <HAL_RCC_OscConfig+0x8b2>
 80037da:	4b25      	ldr	r3, [pc, #148]	; (8003870 <HAL_RCC_OscConfig+0x930>)
 80037dc:	6a1b      	ldr	r3, [r3, #32]
 80037de:	4a24      	ldr	r2, [pc, #144]	; (8003870 <HAL_RCC_OscConfig+0x930>)
 80037e0:	f023 0301 	bic.w	r3, r3, #1
 80037e4:	6213      	str	r3, [r2, #32]
 80037e6:	4b22      	ldr	r3, [pc, #136]	; (8003870 <HAL_RCC_OscConfig+0x930>)
 80037e8:	6a1b      	ldr	r3, [r3, #32]
 80037ea:	4a21      	ldr	r2, [pc, #132]	; (8003870 <HAL_RCC_OscConfig+0x930>)
 80037ec:	f023 0304 	bic.w	r3, r3, #4
 80037f0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80037f2:	1d3b      	adds	r3, r7, #4
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	68db      	ldr	r3, [r3, #12]
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d06b      	beq.n	80038d4 <HAL_RCC_OscConfig+0x994>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80037fc:	f7fd fcbc 	bl	8001178 <HAL_GetTick>
 8003800:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003804:	e00b      	b.n	800381e <HAL_RCC_OscConfig+0x8de>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003806:	f7fd fcb7 	bl	8001178 <HAL_GetTick>
 800380a:	4602      	mov	r2, r0
 800380c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003810:	1ad3      	subs	r3, r2, r3
 8003812:	f241 3288 	movw	r2, #5000	; 0x1388
 8003816:	4293      	cmp	r3, r2
 8003818:	d901      	bls.n	800381e <HAL_RCC_OscConfig+0x8de>
        {
          return HAL_TIMEOUT;
 800381a:	2303      	movs	r3, #3
 800381c:	e291      	b.n	8003d42 <HAL_RCC_OscConfig+0xe02>
 800381e:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8003822:	2202      	movs	r2, #2
 8003824:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003826:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	fa93 f2a3 	rbit	r2, r3
 8003830:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8003834:	601a      	str	r2, [r3, #0]
 8003836:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 800383a:	2202      	movs	r2, #2
 800383c:	601a      	str	r2, [r3, #0]
 800383e:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	fa93 f2a3 	rbit	r2, r3
 8003848:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 800384c:	601a      	str	r2, [r3, #0]
  return result;
 800384e:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8003852:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003854:	fab3 f383 	clz	r3, r3
 8003858:	b2db      	uxtb	r3, r3
 800385a:	095b      	lsrs	r3, r3, #5
 800385c:	b2db      	uxtb	r3, r3
 800385e:	f043 0302 	orr.w	r3, r3, #2
 8003862:	b2db      	uxtb	r3, r3
 8003864:	2b02      	cmp	r3, #2
 8003866:	d109      	bne.n	800387c <HAL_RCC_OscConfig+0x93c>
 8003868:	4b01      	ldr	r3, [pc, #4]	; (8003870 <HAL_RCC_OscConfig+0x930>)
 800386a:	6a1b      	ldr	r3, [r3, #32]
 800386c:	e014      	b.n	8003898 <HAL_RCC_OscConfig+0x958>
 800386e:	bf00      	nop
 8003870:	40021000 	.word	0x40021000
 8003874:	10908120 	.word	0x10908120
 8003878:	40007000 	.word	0x40007000
 800387c:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8003880:	2202      	movs	r2, #2
 8003882:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003884:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	fa93 f2a3 	rbit	r2, r3
 800388e:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8003892:	601a      	str	r2, [r3, #0]
 8003894:	4bbb      	ldr	r3, [pc, #748]	; (8003b84 <HAL_RCC_OscConfig+0xc44>)
 8003896:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003898:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 800389c:	2102      	movs	r1, #2
 800389e:	6011      	str	r1, [r2, #0]
 80038a0:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 80038a4:	6812      	ldr	r2, [r2, #0]
 80038a6:	fa92 f1a2 	rbit	r1, r2
 80038aa:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 80038ae:	6011      	str	r1, [r2, #0]
  return result;
 80038b0:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 80038b4:	6812      	ldr	r2, [r2, #0]
 80038b6:	fab2 f282 	clz	r2, r2
 80038ba:	b2d2      	uxtb	r2, r2
 80038bc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80038c0:	b2d2      	uxtb	r2, r2
 80038c2:	f002 021f 	and.w	r2, r2, #31
 80038c6:	2101      	movs	r1, #1
 80038c8:	fa01 f202 	lsl.w	r2, r1, r2
 80038cc:	4013      	ands	r3, r2
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d099      	beq.n	8003806 <HAL_RCC_OscConfig+0x8c6>
 80038d2:	e063      	b.n	800399c <HAL_RCC_OscConfig+0xa5c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80038d4:	f7fd fc50 	bl	8001178 <HAL_GetTick>
 80038d8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80038dc:	e00b      	b.n	80038f6 <HAL_RCC_OscConfig+0x9b6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80038de:	f7fd fc4b 	bl	8001178 <HAL_GetTick>
 80038e2:	4602      	mov	r2, r0
 80038e4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80038e8:	1ad3      	subs	r3, r2, r3
 80038ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80038ee:	4293      	cmp	r3, r2
 80038f0:	d901      	bls.n	80038f6 <HAL_RCC_OscConfig+0x9b6>
        {
          return HAL_TIMEOUT;
 80038f2:	2303      	movs	r3, #3
 80038f4:	e225      	b.n	8003d42 <HAL_RCC_OscConfig+0xe02>
 80038f6:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80038fa:	2202      	movs	r2, #2
 80038fc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038fe:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	fa93 f2a3 	rbit	r2, r3
 8003908:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800390c:	601a      	str	r2, [r3, #0]
 800390e:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8003912:	2202      	movs	r2, #2
 8003914:	601a      	str	r2, [r3, #0]
 8003916:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	fa93 f2a3 	rbit	r2, r3
 8003920:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8003924:	601a      	str	r2, [r3, #0]
  return result;
 8003926:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800392a:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800392c:	fab3 f383 	clz	r3, r3
 8003930:	b2db      	uxtb	r3, r3
 8003932:	095b      	lsrs	r3, r3, #5
 8003934:	b2db      	uxtb	r3, r3
 8003936:	f043 0302 	orr.w	r3, r3, #2
 800393a:	b2db      	uxtb	r3, r3
 800393c:	2b02      	cmp	r3, #2
 800393e:	d102      	bne.n	8003946 <HAL_RCC_OscConfig+0xa06>
 8003940:	4b90      	ldr	r3, [pc, #576]	; (8003b84 <HAL_RCC_OscConfig+0xc44>)
 8003942:	6a1b      	ldr	r3, [r3, #32]
 8003944:	e00d      	b.n	8003962 <HAL_RCC_OscConfig+0xa22>
 8003946:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800394a:	2202      	movs	r2, #2
 800394c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800394e:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	fa93 f2a3 	rbit	r2, r3
 8003958:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800395c:	601a      	str	r2, [r3, #0]
 800395e:	4b89      	ldr	r3, [pc, #548]	; (8003b84 <HAL_RCC_OscConfig+0xc44>)
 8003960:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003962:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8003966:	2102      	movs	r1, #2
 8003968:	6011      	str	r1, [r2, #0]
 800396a:	f107 0288 	add.w	r2, r7, #136	; 0x88
 800396e:	6812      	ldr	r2, [r2, #0]
 8003970:	fa92 f1a2 	rbit	r1, r2
 8003974:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8003978:	6011      	str	r1, [r2, #0]
  return result;
 800397a:	f107 0284 	add.w	r2, r7, #132	; 0x84
 800397e:	6812      	ldr	r2, [r2, #0]
 8003980:	fab2 f282 	clz	r2, r2
 8003984:	b2d2      	uxtb	r2, r2
 8003986:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800398a:	b2d2      	uxtb	r2, r2
 800398c:	f002 021f 	and.w	r2, r2, #31
 8003990:	2101      	movs	r1, #1
 8003992:	fa01 f202 	lsl.w	r2, r1, r2
 8003996:	4013      	ands	r3, r2
 8003998:	2b00      	cmp	r3, #0
 800399a:	d1a0      	bne.n	80038de <HAL_RCC_OscConfig+0x99e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800399c:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 80039a0:	2b01      	cmp	r3, #1
 80039a2:	d105      	bne.n	80039b0 <HAL_RCC_OscConfig+0xa70>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80039a4:	4b77      	ldr	r3, [pc, #476]	; (8003b84 <HAL_RCC_OscConfig+0xc44>)
 80039a6:	69db      	ldr	r3, [r3, #28]
 80039a8:	4a76      	ldr	r2, [pc, #472]	; (8003b84 <HAL_RCC_OscConfig+0xc44>)
 80039aa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80039ae:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80039b0:	1d3b      	adds	r3, r7, #4
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	69db      	ldr	r3, [r3, #28]
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	f000 81c2 	beq.w	8003d40 <HAL_RCC_OscConfig+0xe00>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80039bc:	4b71      	ldr	r3, [pc, #452]	; (8003b84 <HAL_RCC_OscConfig+0xc44>)
 80039be:	685b      	ldr	r3, [r3, #4]
 80039c0:	f003 030c 	and.w	r3, r3, #12
 80039c4:	2b08      	cmp	r3, #8
 80039c6:	f000 819c 	beq.w	8003d02 <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80039ca:	1d3b      	adds	r3, r7, #4
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	69db      	ldr	r3, [r3, #28]
 80039d0:	2b02      	cmp	r3, #2
 80039d2:	f040 8114 	bne.w	8003bfe <HAL_RCC_OscConfig+0xcbe>
 80039d6:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80039da:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80039de:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039e0:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	fa93 f2a3 	rbit	r2, r3
 80039ea:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80039ee:	601a      	str	r2, [r3, #0]
  return result;
 80039f0:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80039f4:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80039f6:	fab3 f383 	clz	r3, r3
 80039fa:	b2db      	uxtb	r3, r3
 80039fc:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003a00:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003a04:	009b      	lsls	r3, r3, #2
 8003a06:	461a      	mov	r2, r3
 8003a08:	2300      	movs	r3, #0
 8003a0a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a0c:	f7fd fbb4 	bl	8001178 <HAL_GetTick>
 8003a10:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003a14:	e009      	b.n	8003a2a <HAL_RCC_OscConfig+0xaea>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003a16:	f7fd fbaf 	bl	8001178 <HAL_GetTick>
 8003a1a:	4602      	mov	r2, r0
 8003a1c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003a20:	1ad3      	subs	r3, r2, r3
 8003a22:	2b02      	cmp	r3, #2
 8003a24:	d901      	bls.n	8003a2a <HAL_RCC_OscConfig+0xaea>
          {
            return HAL_TIMEOUT;
 8003a26:	2303      	movs	r3, #3
 8003a28:	e18b      	b.n	8003d42 <HAL_RCC_OscConfig+0xe02>
 8003a2a:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8003a2e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003a32:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a34:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	fa93 f2a3 	rbit	r2, r3
 8003a3e:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8003a42:	601a      	str	r2, [r3, #0]
  return result;
 8003a44:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8003a48:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003a4a:	fab3 f383 	clz	r3, r3
 8003a4e:	b2db      	uxtb	r3, r3
 8003a50:	095b      	lsrs	r3, r3, #5
 8003a52:	b2db      	uxtb	r3, r3
 8003a54:	f043 0301 	orr.w	r3, r3, #1
 8003a58:	b2db      	uxtb	r3, r3
 8003a5a:	2b01      	cmp	r3, #1
 8003a5c:	d102      	bne.n	8003a64 <HAL_RCC_OscConfig+0xb24>
 8003a5e:	4b49      	ldr	r3, [pc, #292]	; (8003b84 <HAL_RCC_OscConfig+0xc44>)
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	e01b      	b.n	8003a9c <HAL_RCC_OscConfig+0xb5c>
 8003a64:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8003a68:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003a6c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a6e:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	fa93 f2a3 	rbit	r2, r3
 8003a78:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8003a7c:	601a      	str	r2, [r3, #0]
 8003a7e:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8003a82:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003a86:	601a      	str	r2, [r3, #0]
 8003a88:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	fa93 f2a3 	rbit	r2, r3
 8003a92:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8003a96:	601a      	str	r2, [r3, #0]
 8003a98:	4b3a      	ldr	r3, [pc, #232]	; (8003b84 <HAL_RCC_OscConfig+0xc44>)
 8003a9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a9c:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8003aa0:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003aa4:	6011      	str	r1, [r2, #0]
 8003aa6:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8003aaa:	6812      	ldr	r2, [r2, #0]
 8003aac:	fa92 f1a2 	rbit	r1, r2
 8003ab0:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8003ab4:	6011      	str	r1, [r2, #0]
  return result;
 8003ab6:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8003aba:	6812      	ldr	r2, [r2, #0]
 8003abc:	fab2 f282 	clz	r2, r2
 8003ac0:	b2d2      	uxtb	r2, r2
 8003ac2:	f042 0220 	orr.w	r2, r2, #32
 8003ac6:	b2d2      	uxtb	r2, r2
 8003ac8:	f002 021f 	and.w	r2, r2, #31
 8003acc:	2101      	movs	r1, #1
 8003ace:	fa01 f202 	lsl.w	r2, r1, r2
 8003ad2:	4013      	ands	r3, r2
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d19e      	bne.n	8003a16 <HAL_RCC_OscConfig+0xad6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003ad8:	4b2a      	ldr	r3, [pc, #168]	; (8003b84 <HAL_RCC_OscConfig+0xc44>)
 8003ada:	685b      	ldr	r3, [r3, #4]
 8003adc:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003ae0:	1d3b      	adds	r3, r7, #4
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8003ae6:	1d3b      	adds	r3, r7, #4
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	6a1b      	ldr	r3, [r3, #32]
 8003aec:	430b      	orrs	r3, r1
 8003aee:	4925      	ldr	r1, [pc, #148]	; (8003b84 <HAL_RCC_OscConfig+0xc44>)
 8003af0:	4313      	orrs	r3, r2
 8003af2:	604b      	str	r3, [r1, #4]
 8003af4:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8003af8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003afc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003afe:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	fa93 f2a3 	rbit	r2, r3
 8003b08:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003b0c:	601a      	str	r2, [r3, #0]
  return result;
 8003b0e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003b12:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003b14:	fab3 f383 	clz	r3, r3
 8003b18:	b2db      	uxtb	r3, r3
 8003b1a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003b1e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003b22:	009b      	lsls	r3, r3, #2
 8003b24:	461a      	mov	r2, r3
 8003b26:	2301      	movs	r3, #1
 8003b28:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b2a:	f7fd fb25 	bl	8001178 <HAL_GetTick>
 8003b2e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003b32:	e009      	b.n	8003b48 <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003b34:	f7fd fb20 	bl	8001178 <HAL_GetTick>
 8003b38:	4602      	mov	r2, r0
 8003b3a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003b3e:	1ad3      	subs	r3, r2, r3
 8003b40:	2b02      	cmp	r3, #2
 8003b42:	d901      	bls.n	8003b48 <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 8003b44:	2303      	movs	r3, #3
 8003b46:	e0fc      	b.n	8003d42 <HAL_RCC_OscConfig+0xe02>
 8003b48:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8003b4c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003b50:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b52:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	fa93 f2a3 	rbit	r2, r3
 8003b5c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8003b60:	601a      	str	r2, [r3, #0]
  return result;
 8003b62:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8003b66:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003b68:	fab3 f383 	clz	r3, r3
 8003b6c:	b2db      	uxtb	r3, r3
 8003b6e:	095b      	lsrs	r3, r3, #5
 8003b70:	b2db      	uxtb	r3, r3
 8003b72:	f043 0301 	orr.w	r3, r3, #1
 8003b76:	b2db      	uxtb	r3, r3
 8003b78:	2b01      	cmp	r3, #1
 8003b7a:	d105      	bne.n	8003b88 <HAL_RCC_OscConfig+0xc48>
 8003b7c:	4b01      	ldr	r3, [pc, #4]	; (8003b84 <HAL_RCC_OscConfig+0xc44>)
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	e01e      	b.n	8003bc0 <HAL_RCC_OscConfig+0xc80>
 8003b82:	bf00      	nop
 8003b84:	40021000 	.word	0x40021000
 8003b88:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003b8c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003b90:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b92:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	fa93 f2a3 	rbit	r2, r3
 8003b9c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8003ba0:	601a      	str	r2, [r3, #0]
 8003ba2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003ba6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003baa:	601a      	str	r2, [r3, #0]
 8003bac:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	fa93 f2a3 	rbit	r2, r3
 8003bb6:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8003bba:	601a      	str	r2, [r3, #0]
 8003bbc:	4b63      	ldr	r3, [pc, #396]	; (8003d4c <HAL_RCC_OscConfig+0xe0c>)
 8003bbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bc0:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8003bc4:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003bc8:	6011      	str	r1, [r2, #0]
 8003bca:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8003bce:	6812      	ldr	r2, [r2, #0]
 8003bd0:	fa92 f1a2 	rbit	r1, r2
 8003bd4:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8003bd8:	6011      	str	r1, [r2, #0]
  return result;
 8003bda:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8003bde:	6812      	ldr	r2, [r2, #0]
 8003be0:	fab2 f282 	clz	r2, r2
 8003be4:	b2d2      	uxtb	r2, r2
 8003be6:	f042 0220 	orr.w	r2, r2, #32
 8003bea:	b2d2      	uxtb	r2, r2
 8003bec:	f002 021f 	and.w	r2, r2, #31
 8003bf0:	2101      	movs	r1, #1
 8003bf2:	fa01 f202 	lsl.w	r2, r1, r2
 8003bf6:	4013      	ands	r3, r2
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d09b      	beq.n	8003b34 <HAL_RCC_OscConfig+0xbf4>
 8003bfc:	e0a0      	b.n	8003d40 <HAL_RCC_OscConfig+0xe00>
 8003bfe:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003c02:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003c06:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c08:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	fa93 f2a3 	rbit	r2, r3
 8003c12:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003c16:	601a      	str	r2, [r3, #0]
  return result;
 8003c18:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003c1c:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c1e:	fab3 f383 	clz	r3, r3
 8003c22:	b2db      	uxtb	r3, r3
 8003c24:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003c28:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003c2c:	009b      	lsls	r3, r3, #2
 8003c2e:	461a      	mov	r2, r3
 8003c30:	2300      	movs	r3, #0
 8003c32:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c34:	f7fd faa0 	bl	8001178 <HAL_GetTick>
 8003c38:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003c3c:	e009      	b.n	8003c52 <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003c3e:	f7fd fa9b 	bl	8001178 <HAL_GetTick>
 8003c42:	4602      	mov	r2, r0
 8003c44:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003c48:	1ad3      	subs	r3, r2, r3
 8003c4a:	2b02      	cmp	r3, #2
 8003c4c:	d901      	bls.n	8003c52 <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 8003c4e:	2303      	movs	r3, #3
 8003c50:	e077      	b.n	8003d42 <HAL_RCC_OscConfig+0xe02>
 8003c52:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003c56:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003c5a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c5c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	fa93 f2a3 	rbit	r2, r3
 8003c66:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003c6a:	601a      	str	r2, [r3, #0]
  return result;
 8003c6c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003c70:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003c72:	fab3 f383 	clz	r3, r3
 8003c76:	b2db      	uxtb	r3, r3
 8003c78:	095b      	lsrs	r3, r3, #5
 8003c7a:	b2db      	uxtb	r3, r3
 8003c7c:	f043 0301 	orr.w	r3, r3, #1
 8003c80:	b2db      	uxtb	r3, r3
 8003c82:	2b01      	cmp	r3, #1
 8003c84:	d102      	bne.n	8003c8c <HAL_RCC_OscConfig+0xd4c>
 8003c86:	4b31      	ldr	r3, [pc, #196]	; (8003d4c <HAL_RCC_OscConfig+0xe0c>)
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	e01b      	b.n	8003cc4 <HAL_RCC_OscConfig+0xd84>
 8003c8c:	f107 0320 	add.w	r3, r7, #32
 8003c90:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003c94:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c96:	f107 0320 	add.w	r3, r7, #32
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	fa93 f2a3 	rbit	r2, r3
 8003ca0:	f107 031c 	add.w	r3, r7, #28
 8003ca4:	601a      	str	r2, [r3, #0]
 8003ca6:	f107 0318 	add.w	r3, r7, #24
 8003caa:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003cae:	601a      	str	r2, [r3, #0]
 8003cb0:	f107 0318 	add.w	r3, r7, #24
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	fa93 f2a3 	rbit	r2, r3
 8003cba:	f107 0314 	add.w	r3, r7, #20
 8003cbe:	601a      	str	r2, [r3, #0]
 8003cc0:	4b22      	ldr	r3, [pc, #136]	; (8003d4c <HAL_RCC_OscConfig+0xe0c>)
 8003cc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cc4:	f107 0210 	add.w	r2, r7, #16
 8003cc8:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003ccc:	6011      	str	r1, [r2, #0]
 8003cce:	f107 0210 	add.w	r2, r7, #16
 8003cd2:	6812      	ldr	r2, [r2, #0]
 8003cd4:	fa92 f1a2 	rbit	r1, r2
 8003cd8:	f107 020c 	add.w	r2, r7, #12
 8003cdc:	6011      	str	r1, [r2, #0]
  return result;
 8003cde:	f107 020c 	add.w	r2, r7, #12
 8003ce2:	6812      	ldr	r2, [r2, #0]
 8003ce4:	fab2 f282 	clz	r2, r2
 8003ce8:	b2d2      	uxtb	r2, r2
 8003cea:	f042 0220 	orr.w	r2, r2, #32
 8003cee:	b2d2      	uxtb	r2, r2
 8003cf0:	f002 021f 	and.w	r2, r2, #31
 8003cf4:	2101      	movs	r1, #1
 8003cf6:	fa01 f202 	lsl.w	r2, r1, r2
 8003cfa:	4013      	ands	r3, r2
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d19e      	bne.n	8003c3e <HAL_RCC_OscConfig+0xcfe>
 8003d00:	e01e      	b.n	8003d40 <HAL_RCC_OscConfig+0xe00>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003d02:	1d3b      	adds	r3, r7, #4
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	69db      	ldr	r3, [r3, #28]
 8003d08:	2b01      	cmp	r3, #1
 8003d0a:	d101      	bne.n	8003d10 <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 8003d0c:	2301      	movs	r3, #1
 8003d0e:	e018      	b.n	8003d42 <HAL_RCC_OscConfig+0xe02>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003d10:	4b0e      	ldr	r3, [pc, #56]	; (8003d4c <HAL_RCC_OscConfig+0xe0c>)
 8003d12:	685b      	ldr	r3, [r3, #4]
 8003d14:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003d18:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8003d1c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003d20:	1d3b      	adds	r3, r7, #4
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	6a1b      	ldr	r3, [r3, #32]
 8003d26:	429a      	cmp	r2, r3
 8003d28:	d108      	bne.n	8003d3c <HAL_RCC_OscConfig+0xdfc>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8003d2a:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8003d2e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003d32:	1d3b      	adds	r3, r7, #4
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003d38:	429a      	cmp	r2, r3
 8003d3a:	d001      	beq.n	8003d40 <HAL_RCC_OscConfig+0xe00>
#endif
        {
          return HAL_ERROR;
 8003d3c:	2301      	movs	r3, #1
 8003d3e:	e000      	b.n	8003d42 <HAL_RCC_OscConfig+0xe02>
        }
      }
    }
  }

  return HAL_OK;
 8003d40:	2300      	movs	r3, #0
}
 8003d42:	4618      	mov	r0, r3
 8003d44:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8003d48:	46bd      	mov	sp, r7
 8003d4a:	bd80      	pop	{r7, pc}
 8003d4c:	40021000 	.word	0x40021000

08003d50 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003d50:	b580      	push	{r7, lr}
 8003d52:	b09e      	sub	sp, #120	; 0x78
 8003d54:	af00      	add	r7, sp, #0
 8003d56:	6078      	str	r0, [r7, #4]
 8003d58:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8003d5a:	2300      	movs	r3, #0
 8003d5c:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d101      	bne.n	8003d68 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003d64:	2301      	movs	r3, #1
 8003d66:	e162      	b.n	800402e <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003d68:	4b90      	ldr	r3, [pc, #576]	; (8003fac <HAL_RCC_ClockConfig+0x25c>)
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	f003 0307 	and.w	r3, r3, #7
 8003d70:	683a      	ldr	r2, [r7, #0]
 8003d72:	429a      	cmp	r2, r3
 8003d74:	d910      	bls.n	8003d98 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d76:	4b8d      	ldr	r3, [pc, #564]	; (8003fac <HAL_RCC_ClockConfig+0x25c>)
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	f023 0207 	bic.w	r2, r3, #7
 8003d7e:	498b      	ldr	r1, [pc, #556]	; (8003fac <HAL_RCC_ClockConfig+0x25c>)
 8003d80:	683b      	ldr	r3, [r7, #0]
 8003d82:	4313      	orrs	r3, r2
 8003d84:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d86:	4b89      	ldr	r3, [pc, #548]	; (8003fac <HAL_RCC_ClockConfig+0x25c>)
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	f003 0307 	and.w	r3, r3, #7
 8003d8e:	683a      	ldr	r2, [r7, #0]
 8003d90:	429a      	cmp	r2, r3
 8003d92:	d001      	beq.n	8003d98 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003d94:	2301      	movs	r3, #1
 8003d96:	e14a      	b.n	800402e <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	f003 0302 	and.w	r3, r3, #2
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d008      	beq.n	8003db6 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003da4:	4b82      	ldr	r3, [pc, #520]	; (8003fb0 <HAL_RCC_ClockConfig+0x260>)
 8003da6:	685b      	ldr	r3, [r3, #4]
 8003da8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	689b      	ldr	r3, [r3, #8]
 8003db0:	497f      	ldr	r1, [pc, #508]	; (8003fb0 <HAL_RCC_ClockConfig+0x260>)
 8003db2:	4313      	orrs	r3, r2
 8003db4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	f003 0301 	and.w	r3, r3, #1
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	f000 80dc 	beq.w	8003f7c <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	685b      	ldr	r3, [r3, #4]
 8003dc8:	2b01      	cmp	r3, #1
 8003dca:	d13c      	bne.n	8003e46 <HAL_RCC_ClockConfig+0xf6>
 8003dcc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003dd0:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003dd2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003dd4:	fa93 f3a3 	rbit	r3, r3
 8003dd8:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8003dda:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003ddc:	fab3 f383 	clz	r3, r3
 8003de0:	b2db      	uxtb	r3, r3
 8003de2:	095b      	lsrs	r3, r3, #5
 8003de4:	b2db      	uxtb	r3, r3
 8003de6:	f043 0301 	orr.w	r3, r3, #1
 8003dea:	b2db      	uxtb	r3, r3
 8003dec:	2b01      	cmp	r3, #1
 8003dee:	d102      	bne.n	8003df6 <HAL_RCC_ClockConfig+0xa6>
 8003df0:	4b6f      	ldr	r3, [pc, #444]	; (8003fb0 <HAL_RCC_ClockConfig+0x260>)
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	e00f      	b.n	8003e16 <HAL_RCC_ClockConfig+0xc6>
 8003df6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003dfa:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003dfc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003dfe:	fa93 f3a3 	rbit	r3, r3
 8003e02:	667b      	str	r3, [r7, #100]	; 0x64
 8003e04:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003e08:	663b      	str	r3, [r7, #96]	; 0x60
 8003e0a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003e0c:	fa93 f3a3 	rbit	r3, r3
 8003e10:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003e12:	4b67      	ldr	r3, [pc, #412]	; (8003fb0 <HAL_RCC_ClockConfig+0x260>)
 8003e14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e16:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003e1a:	65ba      	str	r2, [r7, #88]	; 0x58
 8003e1c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003e1e:	fa92 f2a2 	rbit	r2, r2
 8003e22:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8003e24:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003e26:	fab2 f282 	clz	r2, r2
 8003e2a:	b2d2      	uxtb	r2, r2
 8003e2c:	f042 0220 	orr.w	r2, r2, #32
 8003e30:	b2d2      	uxtb	r2, r2
 8003e32:	f002 021f 	and.w	r2, r2, #31
 8003e36:	2101      	movs	r1, #1
 8003e38:	fa01 f202 	lsl.w	r2, r1, r2
 8003e3c:	4013      	ands	r3, r2
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d17b      	bne.n	8003f3a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003e42:	2301      	movs	r3, #1
 8003e44:	e0f3      	b.n	800402e <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	685b      	ldr	r3, [r3, #4]
 8003e4a:	2b02      	cmp	r3, #2
 8003e4c:	d13c      	bne.n	8003ec8 <HAL_RCC_ClockConfig+0x178>
 8003e4e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003e52:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e54:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003e56:	fa93 f3a3 	rbit	r3, r3
 8003e5a:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8003e5c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003e5e:	fab3 f383 	clz	r3, r3
 8003e62:	b2db      	uxtb	r3, r3
 8003e64:	095b      	lsrs	r3, r3, #5
 8003e66:	b2db      	uxtb	r3, r3
 8003e68:	f043 0301 	orr.w	r3, r3, #1
 8003e6c:	b2db      	uxtb	r3, r3
 8003e6e:	2b01      	cmp	r3, #1
 8003e70:	d102      	bne.n	8003e78 <HAL_RCC_ClockConfig+0x128>
 8003e72:	4b4f      	ldr	r3, [pc, #316]	; (8003fb0 <HAL_RCC_ClockConfig+0x260>)
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	e00f      	b.n	8003e98 <HAL_RCC_ClockConfig+0x148>
 8003e78:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003e7c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e7e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003e80:	fa93 f3a3 	rbit	r3, r3
 8003e84:	647b      	str	r3, [r7, #68]	; 0x44
 8003e86:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003e8a:	643b      	str	r3, [r7, #64]	; 0x40
 8003e8c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003e8e:	fa93 f3a3 	rbit	r3, r3
 8003e92:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003e94:	4b46      	ldr	r3, [pc, #280]	; (8003fb0 <HAL_RCC_ClockConfig+0x260>)
 8003e96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e98:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003e9c:	63ba      	str	r2, [r7, #56]	; 0x38
 8003e9e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003ea0:	fa92 f2a2 	rbit	r2, r2
 8003ea4:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8003ea6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003ea8:	fab2 f282 	clz	r2, r2
 8003eac:	b2d2      	uxtb	r2, r2
 8003eae:	f042 0220 	orr.w	r2, r2, #32
 8003eb2:	b2d2      	uxtb	r2, r2
 8003eb4:	f002 021f 	and.w	r2, r2, #31
 8003eb8:	2101      	movs	r1, #1
 8003eba:	fa01 f202 	lsl.w	r2, r1, r2
 8003ebe:	4013      	ands	r3, r2
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d13a      	bne.n	8003f3a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003ec4:	2301      	movs	r3, #1
 8003ec6:	e0b2      	b.n	800402e <HAL_RCC_ClockConfig+0x2de>
 8003ec8:	2302      	movs	r3, #2
 8003eca:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ecc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ece:	fa93 f3a3 	rbit	r3, r3
 8003ed2:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003ed4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ed6:	fab3 f383 	clz	r3, r3
 8003eda:	b2db      	uxtb	r3, r3
 8003edc:	095b      	lsrs	r3, r3, #5
 8003ede:	b2db      	uxtb	r3, r3
 8003ee0:	f043 0301 	orr.w	r3, r3, #1
 8003ee4:	b2db      	uxtb	r3, r3
 8003ee6:	2b01      	cmp	r3, #1
 8003ee8:	d102      	bne.n	8003ef0 <HAL_RCC_ClockConfig+0x1a0>
 8003eea:	4b31      	ldr	r3, [pc, #196]	; (8003fb0 <HAL_RCC_ClockConfig+0x260>)
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	e00d      	b.n	8003f0c <HAL_RCC_ClockConfig+0x1bc>
 8003ef0:	2302      	movs	r3, #2
 8003ef2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ef4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ef6:	fa93 f3a3 	rbit	r3, r3
 8003efa:	627b      	str	r3, [r7, #36]	; 0x24
 8003efc:	2302      	movs	r3, #2
 8003efe:	623b      	str	r3, [r7, #32]
 8003f00:	6a3b      	ldr	r3, [r7, #32]
 8003f02:	fa93 f3a3 	rbit	r3, r3
 8003f06:	61fb      	str	r3, [r7, #28]
 8003f08:	4b29      	ldr	r3, [pc, #164]	; (8003fb0 <HAL_RCC_ClockConfig+0x260>)
 8003f0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f0c:	2202      	movs	r2, #2
 8003f0e:	61ba      	str	r2, [r7, #24]
 8003f10:	69ba      	ldr	r2, [r7, #24]
 8003f12:	fa92 f2a2 	rbit	r2, r2
 8003f16:	617a      	str	r2, [r7, #20]
  return result;
 8003f18:	697a      	ldr	r2, [r7, #20]
 8003f1a:	fab2 f282 	clz	r2, r2
 8003f1e:	b2d2      	uxtb	r2, r2
 8003f20:	f042 0220 	orr.w	r2, r2, #32
 8003f24:	b2d2      	uxtb	r2, r2
 8003f26:	f002 021f 	and.w	r2, r2, #31
 8003f2a:	2101      	movs	r1, #1
 8003f2c:	fa01 f202 	lsl.w	r2, r1, r2
 8003f30:	4013      	ands	r3, r2
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d101      	bne.n	8003f3a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003f36:	2301      	movs	r3, #1
 8003f38:	e079      	b.n	800402e <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003f3a:	4b1d      	ldr	r3, [pc, #116]	; (8003fb0 <HAL_RCC_ClockConfig+0x260>)
 8003f3c:	685b      	ldr	r3, [r3, #4]
 8003f3e:	f023 0203 	bic.w	r2, r3, #3
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	685b      	ldr	r3, [r3, #4]
 8003f46:	491a      	ldr	r1, [pc, #104]	; (8003fb0 <HAL_RCC_ClockConfig+0x260>)
 8003f48:	4313      	orrs	r3, r2
 8003f4a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003f4c:	f7fd f914 	bl	8001178 <HAL_GetTick>
 8003f50:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f52:	e00a      	b.n	8003f6a <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003f54:	f7fd f910 	bl	8001178 <HAL_GetTick>
 8003f58:	4602      	mov	r2, r0
 8003f5a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003f5c:	1ad3      	subs	r3, r2, r3
 8003f5e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f62:	4293      	cmp	r3, r2
 8003f64:	d901      	bls.n	8003f6a <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8003f66:	2303      	movs	r3, #3
 8003f68:	e061      	b.n	800402e <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f6a:	4b11      	ldr	r3, [pc, #68]	; (8003fb0 <HAL_RCC_ClockConfig+0x260>)
 8003f6c:	685b      	ldr	r3, [r3, #4]
 8003f6e:	f003 020c 	and.w	r2, r3, #12
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	685b      	ldr	r3, [r3, #4]
 8003f76:	009b      	lsls	r3, r3, #2
 8003f78:	429a      	cmp	r2, r3
 8003f7a:	d1eb      	bne.n	8003f54 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003f7c:	4b0b      	ldr	r3, [pc, #44]	; (8003fac <HAL_RCC_ClockConfig+0x25c>)
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	f003 0307 	and.w	r3, r3, #7
 8003f84:	683a      	ldr	r2, [r7, #0]
 8003f86:	429a      	cmp	r2, r3
 8003f88:	d214      	bcs.n	8003fb4 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f8a:	4b08      	ldr	r3, [pc, #32]	; (8003fac <HAL_RCC_ClockConfig+0x25c>)
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	f023 0207 	bic.w	r2, r3, #7
 8003f92:	4906      	ldr	r1, [pc, #24]	; (8003fac <HAL_RCC_ClockConfig+0x25c>)
 8003f94:	683b      	ldr	r3, [r7, #0]
 8003f96:	4313      	orrs	r3, r2
 8003f98:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f9a:	4b04      	ldr	r3, [pc, #16]	; (8003fac <HAL_RCC_ClockConfig+0x25c>)
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	f003 0307 	and.w	r3, r3, #7
 8003fa2:	683a      	ldr	r2, [r7, #0]
 8003fa4:	429a      	cmp	r2, r3
 8003fa6:	d005      	beq.n	8003fb4 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8003fa8:	2301      	movs	r3, #1
 8003faa:	e040      	b.n	800402e <HAL_RCC_ClockConfig+0x2de>
 8003fac:	40022000 	.word	0x40022000
 8003fb0:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	f003 0304 	and.w	r3, r3, #4
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d008      	beq.n	8003fd2 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003fc0:	4b1d      	ldr	r3, [pc, #116]	; (8004038 <HAL_RCC_ClockConfig+0x2e8>)
 8003fc2:	685b      	ldr	r3, [r3, #4]
 8003fc4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	68db      	ldr	r3, [r3, #12]
 8003fcc:	491a      	ldr	r1, [pc, #104]	; (8004038 <HAL_RCC_ClockConfig+0x2e8>)
 8003fce:	4313      	orrs	r3, r2
 8003fd0:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	f003 0308 	and.w	r3, r3, #8
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d009      	beq.n	8003ff2 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003fde:	4b16      	ldr	r3, [pc, #88]	; (8004038 <HAL_RCC_ClockConfig+0x2e8>)
 8003fe0:	685b      	ldr	r3, [r3, #4]
 8003fe2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	691b      	ldr	r3, [r3, #16]
 8003fea:	00db      	lsls	r3, r3, #3
 8003fec:	4912      	ldr	r1, [pc, #72]	; (8004038 <HAL_RCC_ClockConfig+0x2e8>)
 8003fee:	4313      	orrs	r3, r2
 8003ff0:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8003ff2:	f000 f829 	bl	8004048 <HAL_RCC_GetSysClockFreq>
 8003ff6:	4601      	mov	r1, r0
 8003ff8:	4b0f      	ldr	r3, [pc, #60]	; (8004038 <HAL_RCC_ClockConfig+0x2e8>)
 8003ffa:	685b      	ldr	r3, [r3, #4]
 8003ffc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004000:	22f0      	movs	r2, #240	; 0xf0
 8004002:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004004:	693a      	ldr	r2, [r7, #16]
 8004006:	fa92 f2a2 	rbit	r2, r2
 800400a:	60fa      	str	r2, [r7, #12]
  return result;
 800400c:	68fa      	ldr	r2, [r7, #12]
 800400e:	fab2 f282 	clz	r2, r2
 8004012:	b2d2      	uxtb	r2, r2
 8004014:	40d3      	lsrs	r3, r2
 8004016:	4a09      	ldr	r2, [pc, #36]	; (800403c <HAL_RCC_ClockConfig+0x2ec>)
 8004018:	5cd3      	ldrb	r3, [r2, r3]
 800401a:	fa21 f303 	lsr.w	r3, r1, r3
 800401e:	4a08      	ldr	r2, [pc, #32]	; (8004040 <HAL_RCC_ClockConfig+0x2f0>)
 8004020:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8004022:	4b08      	ldr	r3, [pc, #32]	; (8004044 <HAL_RCC_ClockConfig+0x2f4>)
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	4618      	mov	r0, r3
 8004028:	f7fd f862 	bl	80010f0 <HAL_InitTick>
  
  return HAL_OK;
 800402c:	2300      	movs	r3, #0
}
 800402e:	4618      	mov	r0, r3
 8004030:	3778      	adds	r7, #120	; 0x78
 8004032:	46bd      	mov	sp, r7
 8004034:	bd80      	pop	{r7, pc}
 8004036:	bf00      	nop
 8004038:	40021000 	.word	0x40021000
 800403c:	0800a258 	.word	0x0800a258
 8004040:	200003e8 	.word	0x200003e8
 8004044:	200003ec 	.word	0x200003ec

08004048 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004048:	b480      	push	{r7}
 800404a:	b08b      	sub	sp, #44	; 0x2c
 800404c:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800404e:	2300      	movs	r3, #0
 8004050:	61fb      	str	r3, [r7, #28]
 8004052:	2300      	movs	r3, #0
 8004054:	61bb      	str	r3, [r7, #24]
 8004056:	2300      	movs	r3, #0
 8004058:	627b      	str	r3, [r7, #36]	; 0x24
 800405a:	2300      	movs	r3, #0
 800405c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800405e:	2300      	movs	r3, #0
 8004060:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8004062:	4b29      	ldr	r3, [pc, #164]	; (8004108 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004064:	685b      	ldr	r3, [r3, #4]
 8004066:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004068:	69fb      	ldr	r3, [r7, #28]
 800406a:	f003 030c 	and.w	r3, r3, #12
 800406e:	2b04      	cmp	r3, #4
 8004070:	d002      	beq.n	8004078 <HAL_RCC_GetSysClockFreq+0x30>
 8004072:	2b08      	cmp	r3, #8
 8004074:	d003      	beq.n	800407e <HAL_RCC_GetSysClockFreq+0x36>
 8004076:	e03c      	b.n	80040f2 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004078:	4b24      	ldr	r3, [pc, #144]	; (800410c <HAL_RCC_GetSysClockFreq+0xc4>)
 800407a:	623b      	str	r3, [r7, #32]
      break;
 800407c:	e03c      	b.n	80040f8 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 800407e:	69fb      	ldr	r3, [r7, #28]
 8004080:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8004084:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8004088:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800408a:	68ba      	ldr	r2, [r7, #8]
 800408c:	fa92 f2a2 	rbit	r2, r2
 8004090:	607a      	str	r2, [r7, #4]
  return result;
 8004092:	687a      	ldr	r2, [r7, #4]
 8004094:	fab2 f282 	clz	r2, r2
 8004098:	b2d2      	uxtb	r2, r2
 800409a:	40d3      	lsrs	r3, r2
 800409c:	4a1c      	ldr	r2, [pc, #112]	; (8004110 <HAL_RCC_GetSysClockFreq+0xc8>)
 800409e:	5cd3      	ldrb	r3, [r2, r3]
 80040a0:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80040a2:	4b19      	ldr	r3, [pc, #100]	; (8004108 <HAL_RCC_GetSysClockFreq+0xc0>)
 80040a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040a6:	f003 030f 	and.w	r3, r3, #15
 80040aa:	220f      	movs	r2, #15
 80040ac:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040ae:	693a      	ldr	r2, [r7, #16]
 80040b0:	fa92 f2a2 	rbit	r2, r2
 80040b4:	60fa      	str	r2, [r7, #12]
  return result;
 80040b6:	68fa      	ldr	r2, [r7, #12]
 80040b8:	fab2 f282 	clz	r2, r2
 80040bc:	b2d2      	uxtb	r2, r2
 80040be:	40d3      	lsrs	r3, r2
 80040c0:	4a14      	ldr	r2, [pc, #80]	; (8004114 <HAL_RCC_GetSysClockFreq+0xcc>)
 80040c2:	5cd3      	ldrb	r3, [r2, r3]
 80040c4:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 80040c6:	69fb      	ldr	r3, [r7, #28]
 80040c8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d008      	beq.n	80040e2 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80040d0:	4a0e      	ldr	r2, [pc, #56]	; (800410c <HAL_RCC_GetSysClockFreq+0xc4>)
 80040d2:	69bb      	ldr	r3, [r7, #24]
 80040d4:	fbb2 f2f3 	udiv	r2, r2, r3
 80040d8:	697b      	ldr	r3, [r7, #20]
 80040da:	fb02 f303 	mul.w	r3, r2, r3
 80040de:	627b      	str	r3, [r7, #36]	; 0x24
 80040e0:	e004      	b.n	80040ec <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80040e2:	697b      	ldr	r3, [r7, #20]
 80040e4:	4a0c      	ldr	r2, [pc, #48]	; (8004118 <HAL_RCC_GetSysClockFreq+0xd0>)
 80040e6:	fb02 f303 	mul.w	r3, r2, r3
 80040ea:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 80040ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040ee:	623b      	str	r3, [r7, #32]
      break;
 80040f0:	e002      	b.n	80040f8 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80040f2:	4b06      	ldr	r3, [pc, #24]	; (800410c <HAL_RCC_GetSysClockFreq+0xc4>)
 80040f4:	623b      	str	r3, [r7, #32]
      break;
 80040f6:	bf00      	nop
    }
  }
  return sysclockfreq;
 80040f8:	6a3b      	ldr	r3, [r7, #32]
}
 80040fa:	4618      	mov	r0, r3
 80040fc:	372c      	adds	r7, #44	; 0x2c
 80040fe:	46bd      	mov	sp, r7
 8004100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004104:	4770      	bx	lr
 8004106:	bf00      	nop
 8004108:	40021000 	.word	0x40021000
 800410c:	007a1200 	.word	0x007a1200
 8004110:	0800a268 	.word	0x0800a268
 8004114:	0800a278 	.word	0x0800a278
 8004118:	003d0900 	.word	0x003d0900

0800411c <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800411c:	b580      	push	{r7, lr}
 800411e:	b092      	sub	sp, #72	; 0x48
 8004120:	af00      	add	r7, sp, #0
 8004122:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004124:	2300      	movs	r3, #0
 8004126:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8004128:	2300      	movs	r3, #0
 800412a:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 800412c:	2300      	movs	r3, #0
 800412e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800413a:	2b00      	cmp	r3, #0
 800413c:	f000 80d4 	beq.w	80042e8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004140:	4b4e      	ldr	r3, [pc, #312]	; (800427c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004142:	69db      	ldr	r3, [r3, #28]
 8004144:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004148:	2b00      	cmp	r3, #0
 800414a:	d10e      	bne.n	800416a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800414c:	4b4b      	ldr	r3, [pc, #300]	; (800427c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800414e:	69db      	ldr	r3, [r3, #28]
 8004150:	4a4a      	ldr	r2, [pc, #296]	; (800427c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004152:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004156:	61d3      	str	r3, [r2, #28]
 8004158:	4b48      	ldr	r3, [pc, #288]	; (800427c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800415a:	69db      	ldr	r3, [r3, #28]
 800415c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004160:	60bb      	str	r3, [r7, #8]
 8004162:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004164:	2301      	movs	r3, #1
 8004166:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800416a:	4b45      	ldr	r3, [pc, #276]	; (8004280 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004172:	2b00      	cmp	r3, #0
 8004174:	d118      	bne.n	80041a8 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004176:	4b42      	ldr	r3, [pc, #264]	; (8004280 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	4a41      	ldr	r2, [pc, #260]	; (8004280 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800417c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004180:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004182:	f7fc fff9 	bl	8001178 <HAL_GetTick>
 8004186:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004188:	e008      	b.n	800419c <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800418a:	f7fc fff5 	bl	8001178 <HAL_GetTick>
 800418e:	4602      	mov	r2, r0
 8004190:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004192:	1ad3      	subs	r3, r2, r3
 8004194:	2b64      	cmp	r3, #100	; 0x64
 8004196:	d901      	bls.n	800419c <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8004198:	2303      	movs	r3, #3
 800419a:	e169      	b.n	8004470 <HAL_RCCEx_PeriphCLKConfig+0x354>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800419c:	4b38      	ldr	r3, [pc, #224]	; (8004280 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d0f0      	beq.n	800418a <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80041a8:	4b34      	ldr	r3, [pc, #208]	; (800427c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80041aa:	6a1b      	ldr	r3, [r3, #32]
 80041ac:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80041b0:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80041b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	f000 8084 	beq.w	80042c2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	685b      	ldr	r3, [r3, #4]
 80041be:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80041c2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80041c4:	429a      	cmp	r2, r3
 80041c6:	d07c      	beq.n	80042c2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80041c8:	4b2c      	ldr	r3, [pc, #176]	; (800427c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80041ca:	6a1b      	ldr	r3, [r3, #32]
 80041cc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80041d0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80041d2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80041d6:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041da:	fa93 f3a3 	rbit	r3, r3
 80041de:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80041e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80041e2:	fab3 f383 	clz	r3, r3
 80041e6:	b2db      	uxtb	r3, r3
 80041e8:	461a      	mov	r2, r3
 80041ea:	4b26      	ldr	r3, [pc, #152]	; (8004284 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80041ec:	4413      	add	r3, r2
 80041ee:	009b      	lsls	r3, r3, #2
 80041f0:	461a      	mov	r2, r3
 80041f2:	2301      	movs	r3, #1
 80041f4:	6013      	str	r3, [r2, #0]
 80041f6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80041fa:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041fe:	fa93 f3a3 	rbit	r3, r3
 8004202:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8004204:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004206:	fab3 f383 	clz	r3, r3
 800420a:	b2db      	uxtb	r3, r3
 800420c:	461a      	mov	r2, r3
 800420e:	4b1d      	ldr	r3, [pc, #116]	; (8004284 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004210:	4413      	add	r3, r2
 8004212:	009b      	lsls	r3, r3, #2
 8004214:	461a      	mov	r2, r3
 8004216:	2300      	movs	r3, #0
 8004218:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800421a:	4a18      	ldr	r2, [pc, #96]	; (800427c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800421c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800421e:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004220:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004222:	f003 0301 	and.w	r3, r3, #1
 8004226:	2b00      	cmp	r3, #0
 8004228:	d04b      	beq.n	80042c2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800422a:	f7fc ffa5 	bl	8001178 <HAL_GetTick>
 800422e:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004230:	e00a      	b.n	8004248 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004232:	f7fc ffa1 	bl	8001178 <HAL_GetTick>
 8004236:	4602      	mov	r2, r0
 8004238:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800423a:	1ad3      	subs	r3, r2, r3
 800423c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004240:	4293      	cmp	r3, r2
 8004242:	d901      	bls.n	8004248 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8004244:	2303      	movs	r3, #3
 8004246:	e113      	b.n	8004470 <HAL_RCCEx_PeriphCLKConfig+0x354>
 8004248:	2302      	movs	r3, #2
 800424a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800424c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800424e:	fa93 f3a3 	rbit	r3, r3
 8004252:	627b      	str	r3, [r7, #36]	; 0x24
 8004254:	2302      	movs	r3, #2
 8004256:	623b      	str	r3, [r7, #32]
 8004258:	6a3b      	ldr	r3, [r7, #32]
 800425a:	fa93 f3a3 	rbit	r3, r3
 800425e:	61fb      	str	r3, [r7, #28]
  return result;
 8004260:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004262:	fab3 f383 	clz	r3, r3
 8004266:	b2db      	uxtb	r3, r3
 8004268:	095b      	lsrs	r3, r3, #5
 800426a:	b2db      	uxtb	r3, r3
 800426c:	f043 0302 	orr.w	r3, r3, #2
 8004270:	b2db      	uxtb	r3, r3
 8004272:	2b02      	cmp	r3, #2
 8004274:	d108      	bne.n	8004288 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8004276:	4b01      	ldr	r3, [pc, #4]	; (800427c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004278:	6a1b      	ldr	r3, [r3, #32]
 800427a:	e00d      	b.n	8004298 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 800427c:	40021000 	.word	0x40021000
 8004280:	40007000 	.word	0x40007000
 8004284:	10908100 	.word	0x10908100
 8004288:	2302      	movs	r3, #2
 800428a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800428c:	69bb      	ldr	r3, [r7, #24]
 800428e:	fa93 f3a3 	rbit	r3, r3
 8004292:	617b      	str	r3, [r7, #20]
 8004294:	4b78      	ldr	r3, [pc, #480]	; (8004478 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004296:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004298:	2202      	movs	r2, #2
 800429a:	613a      	str	r2, [r7, #16]
 800429c:	693a      	ldr	r2, [r7, #16]
 800429e:	fa92 f2a2 	rbit	r2, r2
 80042a2:	60fa      	str	r2, [r7, #12]
  return result;
 80042a4:	68fa      	ldr	r2, [r7, #12]
 80042a6:	fab2 f282 	clz	r2, r2
 80042aa:	b2d2      	uxtb	r2, r2
 80042ac:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80042b0:	b2d2      	uxtb	r2, r2
 80042b2:	f002 021f 	and.w	r2, r2, #31
 80042b6:	2101      	movs	r1, #1
 80042b8:	fa01 f202 	lsl.w	r2, r1, r2
 80042bc:	4013      	ands	r3, r2
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d0b7      	beq.n	8004232 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80042c2:	4b6d      	ldr	r3, [pc, #436]	; (8004478 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80042c4:	6a1b      	ldr	r3, [r3, #32]
 80042c6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	685b      	ldr	r3, [r3, #4]
 80042ce:	496a      	ldr	r1, [pc, #424]	; (8004478 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80042d0:	4313      	orrs	r3, r2
 80042d2:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80042d4:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80042d8:	2b01      	cmp	r3, #1
 80042da:	d105      	bne.n	80042e8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80042dc:	4b66      	ldr	r3, [pc, #408]	; (8004478 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80042de:	69db      	ldr	r3, [r3, #28]
 80042e0:	4a65      	ldr	r2, [pc, #404]	; (8004478 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80042e2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80042e6:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	f003 0301 	and.w	r3, r3, #1
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d008      	beq.n	8004306 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80042f4:	4b60      	ldr	r3, [pc, #384]	; (8004478 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80042f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042f8:	f023 0203 	bic.w	r2, r3, #3
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	689b      	ldr	r3, [r3, #8]
 8004300:	495d      	ldr	r1, [pc, #372]	; (8004478 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004302:	4313      	orrs	r3, r2
 8004304:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	f003 0302 	and.w	r3, r3, #2
 800430e:	2b00      	cmp	r3, #0
 8004310:	d008      	beq.n	8004324 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004312:	4b59      	ldr	r3, [pc, #356]	; (8004478 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004314:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004316:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	68db      	ldr	r3, [r3, #12]
 800431e:	4956      	ldr	r1, [pc, #344]	; (8004478 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004320:	4313      	orrs	r3, r2
 8004322:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	f003 0304 	and.w	r3, r3, #4
 800432c:	2b00      	cmp	r3, #0
 800432e:	d008      	beq.n	8004342 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004330:	4b51      	ldr	r3, [pc, #324]	; (8004478 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004332:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004334:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	691b      	ldr	r3, [r3, #16]
 800433c:	494e      	ldr	r1, [pc, #312]	; (8004478 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800433e:	4313      	orrs	r3, r2
 8004340:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	f003 0320 	and.w	r3, r3, #32
 800434a:	2b00      	cmp	r3, #0
 800434c:	d008      	beq.n	8004360 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800434e:	4b4a      	ldr	r3, [pc, #296]	; (8004478 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004350:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004352:	f023 0210 	bic.w	r2, r3, #16
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	69db      	ldr	r3, [r3, #28]
 800435a:	4947      	ldr	r1, [pc, #284]	; (8004478 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800435c:	4313      	orrs	r3, r2
 800435e:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004368:	2b00      	cmp	r3, #0
 800436a:	d008      	beq.n	800437e <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 800436c:	4b42      	ldr	r3, [pc, #264]	; (8004478 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800436e:	685b      	ldr	r3, [r3, #4]
 8004370:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004378:	493f      	ldr	r1, [pc, #252]	; (8004478 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800437a:	4313      	orrs	r3, r2
 800437c:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004386:	2b00      	cmp	r3, #0
 8004388:	d008      	beq.n	800439c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800438a:	4b3b      	ldr	r3, [pc, #236]	; (8004478 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800438c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800438e:	f023 0220 	bic.w	r2, r3, #32
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	6a1b      	ldr	r3, [r3, #32]
 8004396:	4938      	ldr	r1, [pc, #224]	; (8004478 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004398:	4313      	orrs	r3, r2
 800439a:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	f003 0308 	and.w	r3, r3, #8
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d008      	beq.n	80043ba <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80043a8:	4b33      	ldr	r3, [pc, #204]	; (8004478 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80043aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043ac:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	695b      	ldr	r3, [r3, #20]
 80043b4:	4930      	ldr	r1, [pc, #192]	; (8004478 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80043b6:	4313      	orrs	r3, r2
 80043b8:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	f003 0310 	and.w	r3, r3, #16
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d008      	beq.n	80043d8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80043c6:	4b2c      	ldr	r3, [pc, #176]	; (8004478 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80043c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043ca:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	699b      	ldr	r3, [r3, #24]
 80043d2:	4929      	ldr	r1, [pc, #164]	; (8004478 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80043d4:	4313      	orrs	r3, r2
 80043d6:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d008      	beq.n	80043f6 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80043e4:	4b24      	ldr	r3, [pc, #144]	; (8004478 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80043e6:	685b      	ldr	r3, [r3, #4]
 80043e8:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043f0:	4921      	ldr	r1, [pc, #132]	; (8004478 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80043f2:	4313      	orrs	r3, r2
 80043f4:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d008      	beq.n	8004414 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8004402:	4b1d      	ldr	r3, [pc, #116]	; (8004478 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004404:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004406:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800440e:	491a      	ldr	r1, [pc, #104]	; (8004478 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004410:	4313      	orrs	r3, r2
 8004412:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800441c:	2b00      	cmp	r3, #0
 800441e:	d008      	beq.n	8004432 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8004420:	4b15      	ldr	r3, [pc, #84]	; (8004478 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004422:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004424:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800442c:	4912      	ldr	r1, [pc, #72]	; (8004478 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800442e:	4313      	orrs	r3, r2
 8004430:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800443a:	2b00      	cmp	r3, #0
 800443c:	d008      	beq.n	8004450 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 800443e:	4b0e      	ldr	r3, [pc, #56]	; (8004478 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004440:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004442:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800444a:	490b      	ldr	r1, [pc, #44]	; (8004478 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800444c:	4313      	orrs	r3, r2
 800444e:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004458:	2b00      	cmp	r3, #0
 800445a:	d008      	beq.n	800446e <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 800445c:	4b06      	ldr	r3, [pc, #24]	; (8004478 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800445e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004460:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004468:	4903      	ldr	r1, [pc, #12]	; (8004478 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800446a:	4313      	orrs	r3, r2
 800446c:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 800446e:	2300      	movs	r3, #0
}
 8004470:	4618      	mov	r0, r3
 8004472:	3748      	adds	r7, #72	; 0x48
 8004474:	46bd      	mov	sp, r7
 8004476:	bd80      	pop	{r7, pc}
 8004478:	40021000 	.word	0x40021000

0800447c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800447c:	b580      	push	{r7, lr}
 800447e:	b084      	sub	sp, #16
 8004480:	af00      	add	r7, sp, #0
 8004482:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	2b00      	cmp	r3, #0
 8004488:	d101      	bne.n	800448e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800448a:	2301      	movs	r3, #1
 800448c:	e09d      	b.n	80045ca <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004492:	2b00      	cmp	r3, #0
 8004494:	d108      	bne.n	80044a8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	685b      	ldr	r3, [r3, #4]
 800449a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800449e:	d009      	beq.n	80044b4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	2200      	movs	r2, #0
 80044a4:	61da      	str	r2, [r3, #28]
 80044a6:	e005      	b.n	80044b4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	2200      	movs	r2, #0
 80044ac:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	2200      	movs	r2, #0
 80044b2:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	2200      	movs	r2, #0
 80044b8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80044c0:	b2db      	uxtb	r3, r3
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d106      	bne.n	80044d4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	2200      	movs	r2, #0
 80044ca:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80044ce:	6878      	ldr	r0, [r7, #4]
 80044d0:	f7fc fd0c 	bl	8000eec <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	2202      	movs	r2, #2
 80044d8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	681a      	ldr	r2, [r3, #0]
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80044ea:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	68db      	ldr	r3, [r3, #12]
 80044f0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80044f4:	d902      	bls.n	80044fc <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80044f6:	2300      	movs	r3, #0
 80044f8:	60fb      	str	r3, [r7, #12]
 80044fa:	e002      	b.n	8004502 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80044fc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004500:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	68db      	ldr	r3, [r3, #12]
 8004506:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800450a:	d007      	beq.n	800451c <HAL_SPI_Init+0xa0>
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	68db      	ldr	r3, [r3, #12]
 8004510:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004514:	d002      	beq.n	800451c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	2200      	movs	r2, #0
 800451a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	685b      	ldr	r3, [r3, #4]
 8004520:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	689b      	ldr	r3, [r3, #8]
 8004528:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800452c:	431a      	orrs	r2, r3
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	691b      	ldr	r3, [r3, #16]
 8004532:	f003 0302 	and.w	r3, r3, #2
 8004536:	431a      	orrs	r2, r3
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	695b      	ldr	r3, [r3, #20]
 800453c:	f003 0301 	and.w	r3, r3, #1
 8004540:	431a      	orrs	r2, r3
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	699b      	ldr	r3, [r3, #24]
 8004546:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800454a:	431a      	orrs	r2, r3
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	69db      	ldr	r3, [r3, #28]
 8004550:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004554:	431a      	orrs	r2, r3
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	6a1b      	ldr	r3, [r3, #32]
 800455a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800455e:	ea42 0103 	orr.w	r1, r2, r3
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004566:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	430a      	orrs	r2, r1
 8004570:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	699b      	ldr	r3, [r3, #24]
 8004576:	0c1b      	lsrs	r3, r3, #16
 8004578:	f003 0204 	and.w	r2, r3, #4
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004580:	f003 0310 	and.w	r3, r3, #16
 8004584:	431a      	orrs	r2, r3
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800458a:	f003 0308 	and.w	r3, r3, #8
 800458e:	431a      	orrs	r2, r3
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	68db      	ldr	r3, [r3, #12]
 8004594:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8004598:	ea42 0103 	orr.w	r1, r2, r3
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	430a      	orrs	r2, r1
 80045a8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	69da      	ldr	r2, [r3, #28]
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80045b8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	2200      	movs	r2, #0
 80045be:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	2201      	movs	r2, #1
 80045c4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80045c8:	2300      	movs	r3, #0
}
 80045ca:	4618      	mov	r0, r3
 80045cc:	3710      	adds	r7, #16
 80045ce:	46bd      	mov	sp, r7
 80045d0:	bd80      	pop	{r7, pc}

080045d2 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 80045d2:	b480      	push	{r7}
 80045d4:	b085      	sub	sp, #20
 80045d6:	af00      	add	r7, sp, #0
 80045d8:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	2200      	movs	r2, #0
 80045de:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80045e2:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 80045e6:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	b29a      	uxth	r2, r3
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80045f2:	2300      	movs	r3, #0
}
 80045f4:	4618      	mov	r0, r3
 80045f6:	3714      	adds	r7, #20
 80045f8:	46bd      	mov	sp, r7
 80045fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045fe:	4770      	bx	lr

08004600 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8004600:	b480      	push	{r7}
 8004602:	b085      	sub	sp, #20
 8004604:	af00      	add	r7, sp, #0
 8004606:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8004608:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 800460c:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004614:	b29a      	uxth	r2, r3
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	b29b      	uxth	r3, r3
 800461a:	43db      	mvns	r3, r3
 800461c:	b29b      	uxth	r3, r3
 800461e:	4013      	ands	r3, r2
 8004620:	b29a      	uxth	r2, r3
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8004628:	2300      	movs	r3, #0
}
 800462a:	4618      	mov	r0, r3
 800462c:	3714      	adds	r7, #20
 800462e:	46bd      	mov	sp, r7
 8004630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004634:	4770      	bx	lr

08004636 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8004636:	b084      	sub	sp, #16
 8004638:	b480      	push	{r7}
 800463a:	b083      	sub	sp, #12
 800463c:	af00      	add	r7, sp, #0
 800463e:	6078      	str	r0, [r7, #4]
 8004640:	f107 0014 	add.w	r0, r7, #20
 8004644:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	2201      	movs	r2, #1
 800464c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	2200      	movs	r2, #0
 8004654:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	2200      	movs	r2, #0
 800465c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	2200      	movs	r2, #0
 8004664:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8004668:	2300      	movs	r3, #0
}
 800466a:	4618      	mov	r0, r3
 800466c:	370c      	adds	r7, #12
 800466e:	46bd      	mov	sp, r7
 8004670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004674:	b004      	add	sp, #16
 8004676:	4770      	bx	lr

08004678 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004678:	b480      	push	{r7}
 800467a:	b09b      	sub	sp, #108	; 0x6c
 800467c:	af00      	add	r7, sp, #0
 800467e:	6078      	str	r0, [r7, #4]
 8004680:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8004682:	2300      	movs	r3, #0
 8004684:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8004688:	687a      	ldr	r2, [r7, #4]
 800468a:	683b      	ldr	r3, [r7, #0]
 800468c:	781b      	ldrb	r3, [r3, #0]
 800468e:	009b      	lsls	r3, r3, #2
 8004690:	4413      	add	r3, r2
 8004692:	881b      	ldrh	r3, [r3, #0]
 8004694:	b29b      	uxth	r3, r3
 8004696:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 800469a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800469e:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 80046a2:	683b      	ldr	r3, [r7, #0]
 80046a4:	78db      	ldrb	r3, [r3, #3]
 80046a6:	2b03      	cmp	r3, #3
 80046a8:	d81f      	bhi.n	80046ea <USB_ActivateEndpoint+0x72>
 80046aa:	a201      	add	r2, pc, #4	; (adr r2, 80046b0 <USB_ActivateEndpoint+0x38>)
 80046ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046b0:	080046c1 	.word	0x080046c1
 80046b4:	080046dd 	.word	0x080046dd
 80046b8:	080046f3 	.word	0x080046f3
 80046bc:	080046cf 	.word	0x080046cf
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 80046c0:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80046c4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80046c8:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 80046cc:	e012      	b.n	80046f4 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 80046ce:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80046d2:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 80046d6:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 80046da:	e00b      	b.n	80046f4 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 80046dc:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80046e0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80046e4:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 80046e8:	e004      	b.n	80046f4 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 80046ea:	2301      	movs	r3, #1
 80046ec:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 80046f0:	e000      	b.n	80046f4 <USB_ActivateEndpoint+0x7c>
      break;
 80046f2:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 80046f4:	687a      	ldr	r2, [r7, #4]
 80046f6:	683b      	ldr	r3, [r7, #0]
 80046f8:	781b      	ldrb	r3, [r3, #0]
 80046fa:	009b      	lsls	r3, r3, #2
 80046fc:	441a      	add	r2, r3
 80046fe:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8004702:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004706:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800470a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800470e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004712:	b29b      	uxth	r3, r3
 8004714:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8004716:	687a      	ldr	r2, [r7, #4]
 8004718:	683b      	ldr	r3, [r7, #0]
 800471a:	781b      	ldrb	r3, [r3, #0]
 800471c:	009b      	lsls	r3, r3, #2
 800471e:	4413      	add	r3, r2
 8004720:	881b      	ldrh	r3, [r3, #0]
 8004722:	b29b      	uxth	r3, r3
 8004724:	b21b      	sxth	r3, r3
 8004726:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800472a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800472e:	b21a      	sxth	r2, r3
 8004730:	683b      	ldr	r3, [r7, #0]
 8004732:	781b      	ldrb	r3, [r3, #0]
 8004734:	b21b      	sxth	r3, r3
 8004736:	4313      	orrs	r3, r2
 8004738:	b21b      	sxth	r3, r3
 800473a:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 800473e:	687a      	ldr	r2, [r7, #4]
 8004740:	683b      	ldr	r3, [r7, #0]
 8004742:	781b      	ldrb	r3, [r3, #0]
 8004744:	009b      	lsls	r3, r3, #2
 8004746:	441a      	add	r2, r3
 8004748:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 800474c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004750:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004754:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004758:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800475c:	b29b      	uxth	r3, r3
 800475e:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8004760:	683b      	ldr	r3, [r7, #0]
 8004762:	7b1b      	ldrb	r3, [r3, #12]
 8004764:	2b00      	cmp	r3, #0
 8004766:	f040 8149 	bne.w	80049fc <USB_ActivateEndpoint+0x384>
  {
    if (ep->is_in != 0U)
 800476a:	683b      	ldr	r3, [r7, #0]
 800476c:	785b      	ldrb	r3, [r3, #1]
 800476e:	2b00      	cmp	r3, #0
 8004770:	f000 8084 	beq.w	800487c <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	617b      	str	r3, [r7, #20]
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800477e:	b29b      	uxth	r3, r3
 8004780:	461a      	mov	r2, r3
 8004782:	697b      	ldr	r3, [r7, #20]
 8004784:	4413      	add	r3, r2
 8004786:	617b      	str	r3, [r7, #20]
 8004788:	683b      	ldr	r3, [r7, #0]
 800478a:	781b      	ldrb	r3, [r3, #0]
 800478c:	011a      	lsls	r2, r3, #4
 800478e:	697b      	ldr	r3, [r7, #20]
 8004790:	4413      	add	r3, r2
 8004792:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004796:	613b      	str	r3, [r7, #16]
 8004798:	683b      	ldr	r3, [r7, #0]
 800479a:	88db      	ldrh	r3, [r3, #6]
 800479c:	085b      	lsrs	r3, r3, #1
 800479e:	b29b      	uxth	r3, r3
 80047a0:	005b      	lsls	r3, r3, #1
 80047a2:	b29a      	uxth	r2, r3
 80047a4:	693b      	ldr	r3, [r7, #16]
 80047a6:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80047a8:	687a      	ldr	r2, [r7, #4]
 80047aa:	683b      	ldr	r3, [r7, #0]
 80047ac:	781b      	ldrb	r3, [r3, #0]
 80047ae:	009b      	lsls	r3, r3, #2
 80047b0:	4413      	add	r3, r2
 80047b2:	881b      	ldrh	r3, [r3, #0]
 80047b4:	81fb      	strh	r3, [r7, #14]
 80047b6:	89fb      	ldrh	r3, [r7, #14]
 80047b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d01b      	beq.n	80047f8 <USB_ActivateEndpoint+0x180>
 80047c0:	687a      	ldr	r2, [r7, #4]
 80047c2:	683b      	ldr	r3, [r7, #0]
 80047c4:	781b      	ldrb	r3, [r3, #0]
 80047c6:	009b      	lsls	r3, r3, #2
 80047c8:	4413      	add	r3, r2
 80047ca:	881b      	ldrh	r3, [r3, #0]
 80047cc:	b29b      	uxth	r3, r3
 80047ce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80047d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80047d6:	81bb      	strh	r3, [r7, #12]
 80047d8:	687a      	ldr	r2, [r7, #4]
 80047da:	683b      	ldr	r3, [r7, #0]
 80047dc:	781b      	ldrb	r3, [r3, #0]
 80047de:	009b      	lsls	r3, r3, #2
 80047e0:	441a      	add	r2, r3
 80047e2:	89bb      	ldrh	r3, [r7, #12]
 80047e4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80047e8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80047ec:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80047f0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80047f4:	b29b      	uxth	r3, r3
 80047f6:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80047f8:	683b      	ldr	r3, [r7, #0]
 80047fa:	78db      	ldrb	r3, [r3, #3]
 80047fc:	2b01      	cmp	r3, #1
 80047fe:	d020      	beq.n	8004842 <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004800:	687a      	ldr	r2, [r7, #4]
 8004802:	683b      	ldr	r3, [r7, #0]
 8004804:	781b      	ldrb	r3, [r3, #0]
 8004806:	009b      	lsls	r3, r3, #2
 8004808:	4413      	add	r3, r2
 800480a:	881b      	ldrh	r3, [r3, #0]
 800480c:	b29b      	uxth	r3, r3
 800480e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004812:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004816:	813b      	strh	r3, [r7, #8]
 8004818:	893b      	ldrh	r3, [r7, #8]
 800481a:	f083 0320 	eor.w	r3, r3, #32
 800481e:	813b      	strh	r3, [r7, #8]
 8004820:	687a      	ldr	r2, [r7, #4]
 8004822:	683b      	ldr	r3, [r7, #0]
 8004824:	781b      	ldrb	r3, [r3, #0]
 8004826:	009b      	lsls	r3, r3, #2
 8004828:	441a      	add	r2, r3
 800482a:	893b      	ldrh	r3, [r7, #8]
 800482c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004830:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004834:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004838:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800483c:	b29b      	uxth	r3, r3
 800483e:	8013      	strh	r3, [r2, #0]
 8004840:	e27f      	b.n	8004d42 <USB_ActivateEndpoint+0x6ca>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004842:	687a      	ldr	r2, [r7, #4]
 8004844:	683b      	ldr	r3, [r7, #0]
 8004846:	781b      	ldrb	r3, [r3, #0]
 8004848:	009b      	lsls	r3, r3, #2
 800484a:	4413      	add	r3, r2
 800484c:	881b      	ldrh	r3, [r3, #0]
 800484e:	b29b      	uxth	r3, r3
 8004850:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004854:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004858:	817b      	strh	r3, [r7, #10]
 800485a:	687a      	ldr	r2, [r7, #4]
 800485c:	683b      	ldr	r3, [r7, #0]
 800485e:	781b      	ldrb	r3, [r3, #0]
 8004860:	009b      	lsls	r3, r3, #2
 8004862:	441a      	add	r2, r3
 8004864:	897b      	ldrh	r3, [r7, #10]
 8004866:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800486a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800486e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004872:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004876:	b29b      	uxth	r3, r3
 8004878:	8013      	strh	r3, [r2, #0]
 800487a:	e262      	b.n	8004d42 <USB_ActivateEndpoint+0x6ca>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004886:	b29b      	uxth	r3, r3
 8004888:	461a      	mov	r2, r3
 800488a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800488c:	4413      	add	r3, r2
 800488e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004890:	683b      	ldr	r3, [r7, #0]
 8004892:	781b      	ldrb	r3, [r3, #0]
 8004894:	011a      	lsls	r2, r3, #4
 8004896:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004898:	4413      	add	r3, r2
 800489a:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 800489e:	62bb      	str	r3, [r7, #40]	; 0x28
 80048a0:	683b      	ldr	r3, [r7, #0]
 80048a2:	88db      	ldrh	r3, [r3, #6]
 80048a4:	085b      	lsrs	r3, r3, #1
 80048a6:	b29b      	uxth	r3, r3
 80048a8:	005b      	lsls	r3, r3, #1
 80048aa:	b29a      	uxth	r2, r3
 80048ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048ae:	801a      	strh	r2, [r3, #0]

      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	627b      	str	r3, [r7, #36]	; 0x24
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80048ba:	b29b      	uxth	r3, r3
 80048bc:	461a      	mov	r2, r3
 80048be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048c0:	4413      	add	r3, r2
 80048c2:	627b      	str	r3, [r7, #36]	; 0x24
 80048c4:	683b      	ldr	r3, [r7, #0]
 80048c6:	781b      	ldrb	r3, [r3, #0]
 80048c8:	011a      	lsls	r2, r3, #4
 80048ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048cc:	4413      	add	r3, r2
 80048ce:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80048d2:	623b      	str	r3, [r7, #32]
 80048d4:	683b      	ldr	r3, [r7, #0]
 80048d6:	691b      	ldr	r3, [r3, #16]
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d112      	bne.n	8004902 <USB_ActivateEndpoint+0x28a>
 80048dc:	6a3b      	ldr	r3, [r7, #32]
 80048de:	881b      	ldrh	r3, [r3, #0]
 80048e0:	b29b      	uxth	r3, r3
 80048e2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80048e6:	b29a      	uxth	r2, r3
 80048e8:	6a3b      	ldr	r3, [r7, #32]
 80048ea:	801a      	strh	r2, [r3, #0]
 80048ec:	6a3b      	ldr	r3, [r7, #32]
 80048ee:	881b      	ldrh	r3, [r3, #0]
 80048f0:	b29b      	uxth	r3, r3
 80048f2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80048f6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80048fa:	b29a      	uxth	r2, r3
 80048fc:	6a3b      	ldr	r3, [r7, #32]
 80048fe:	801a      	strh	r2, [r3, #0]
 8004900:	e02f      	b.n	8004962 <USB_ActivateEndpoint+0x2ea>
 8004902:	683b      	ldr	r3, [r7, #0]
 8004904:	691b      	ldr	r3, [r3, #16]
 8004906:	2b3e      	cmp	r3, #62	; 0x3e
 8004908:	d813      	bhi.n	8004932 <USB_ActivateEndpoint+0x2ba>
 800490a:	683b      	ldr	r3, [r7, #0]
 800490c:	691b      	ldr	r3, [r3, #16]
 800490e:	085b      	lsrs	r3, r3, #1
 8004910:	663b      	str	r3, [r7, #96]	; 0x60
 8004912:	683b      	ldr	r3, [r7, #0]
 8004914:	691b      	ldr	r3, [r3, #16]
 8004916:	f003 0301 	and.w	r3, r3, #1
 800491a:	2b00      	cmp	r3, #0
 800491c:	d002      	beq.n	8004924 <USB_ActivateEndpoint+0x2ac>
 800491e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004920:	3301      	adds	r3, #1
 8004922:	663b      	str	r3, [r7, #96]	; 0x60
 8004924:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004926:	b29b      	uxth	r3, r3
 8004928:	029b      	lsls	r3, r3, #10
 800492a:	b29a      	uxth	r2, r3
 800492c:	6a3b      	ldr	r3, [r7, #32]
 800492e:	801a      	strh	r2, [r3, #0]
 8004930:	e017      	b.n	8004962 <USB_ActivateEndpoint+0x2ea>
 8004932:	683b      	ldr	r3, [r7, #0]
 8004934:	691b      	ldr	r3, [r3, #16]
 8004936:	095b      	lsrs	r3, r3, #5
 8004938:	663b      	str	r3, [r7, #96]	; 0x60
 800493a:	683b      	ldr	r3, [r7, #0]
 800493c:	691b      	ldr	r3, [r3, #16]
 800493e:	f003 031f 	and.w	r3, r3, #31
 8004942:	2b00      	cmp	r3, #0
 8004944:	d102      	bne.n	800494c <USB_ActivateEndpoint+0x2d4>
 8004946:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004948:	3b01      	subs	r3, #1
 800494a:	663b      	str	r3, [r7, #96]	; 0x60
 800494c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800494e:	b29b      	uxth	r3, r3
 8004950:	029b      	lsls	r3, r3, #10
 8004952:	b29b      	uxth	r3, r3
 8004954:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004958:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800495c:	b29a      	uxth	r2, r3
 800495e:	6a3b      	ldr	r3, [r7, #32]
 8004960:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004962:	687a      	ldr	r2, [r7, #4]
 8004964:	683b      	ldr	r3, [r7, #0]
 8004966:	781b      	ldrb	r3, [r3, #0]
 8004968:	009b      	lsls	r3, r3, #2
 800496a:	4413      	add	r3, r2
 800496c:	881b      	ldrh	r3, [r3, #0]
 800496e:	83fb      	strh	r3, [r7, #30]
 8004970:	8bfb      	ldrh	r3, [r7, #30]
 8004972:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004976:	2b00      	cmp	r3, #0
 8004978:	d01b      	beq.n	80049b2 <USB_ActivateEndpoint+0x33a>
 800497a:	687a      	ldr	r2, [r7, #4]
 800497c:	683b      	ldr	r3, [r7, #0]
 800497e:	781b      	ldrb	r3, [r3, #0]
 8004980:	009b      	lsls	r3, r3, #2
 8004982:	4413      	add	r3, r2
 8004984:	881b      	ldrh	r3, [r3, #0]
 8004986:	b29b      	uxth	r3, r3
 8004988:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800498c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004990:	83bb      	strh	r3, [r7, #28]
 8004992:	687a      	ldr	r2, [r7, #4]
 8004994:	683b      	ldr	r3, [r7, #0]
 8004996:	781b      	ldrb	r3, [r3, #0]
 8004998:	009b      	lsls	r3, r3, #2
 800499a:	441a      	add	r2, r3
 800499c:	8bbb      	ldrh	r3, [r7, #28]
 800499e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80049a2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80049a6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80049aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80049ae:	b29b      	uxth	r3, r3
 80049b0:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80049b2:	687a      	ldr	r2, [r7, #4]
 80049b4:	683b      	ldr	r3, [r7, #0]
 80049b6:	781b      	ldrb	r3, [r3, #0]
 80049b8:	009b      	lsls	r3, r3, #2
 80049ba:	4413      	add	r3, r2
 80049bc:	881b      	ldrh	r3, [r3, #0]
 80049be:	b29b      	uxth	r3, r3
 80049c0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80049c4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80049c8:	837b      	strh	r3, [r7, #26]
 80049ca:	8b7b      	ldrh	r3, [r7, #26]
 80049cc:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80049d0:	837b      	strh	r3, [r7, #26]
 80049d2:	8b7b      	ldrh	r3, [r7, #26]
 80049d4:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80049d8:	837b      	strh	r3, [r7, #26]
 80049da:	687a      	ldr	r2, [r7, #4]
 80049dc:	683b      	ldr	r3, [r7, #0]
 80049de:	781b      	ldrb	r3, [r3, #0]
 80049e0:	009b      	lsls	r3, r3, #2
 80049e2:	441a      	add	r2, r3
 80049e4:	8b7b      	ldrh	r3, [r7, #26]
 80049e6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80049ea:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80049ee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80049f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80049f6:	b29b      	uxth	r3, r3
 80049f8:	8013      	strh	r3, [r2, #0]
 80049fa:	e1a2      	b.n	8004d42 <USB_ActivateEndpoint+0x6ca>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 80049fc:	687a      	ldr	r2, [r7, #4]
 80049fe:	683b      	ldr	r3, [r7, #0]
 8004a00:	781b      	ldrb	r3, [r3, #0]
 8004a02:	009b      	lsls	r3, r3, #2
 8004a04:	4413      	add	r3, r2
 8004a06:	881b      	ldrh	r3, [r3, #0]
 8004a08:	b29b      	uxth	r3, r3
 8004a0a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004a0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a12:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 8004a16:	687a      	ldr	r2, [r7, #4]
 8004a18:	683b      	ldr	r3, [r7, #0]
 8004a1a:	781b      	ldrb	r3, [r3, #0]
 8004a1c:	009b      	lsls	r3, r3, #2
 8004a1e:	441a      	add	r2, r3
 8004a20:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8004a24:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004a28:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004a2c:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8004a30:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004a34:	b29b      	uxth	r3, r3
 8004a36:	8013      	strh	r3, [r2, #0]

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	65bb      	str	r3, [r7, #88]	; 0x58
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004a42:	b29b      	uxth	r3, r3
 8004a44:	461a      	mov	r2, r3
 8004a46:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004a48:	4413      	add	r3, r2
 8004a4a:	65bb      	str	r3, [r7, #88]	; 0x58
 8004a4c:	683b      	ldr	r3, [r7, #0]
 8004a4e:	781b      	ldrb	r3, [r3, #0]
 8004a50:	011a      	lsls	r2, r3, #4
 8004a52:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004a54:	4413      	add	r3, r2
 8004a56:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004a5a:	657b      	str	r3, [r7, #84]	; 0x54
 8004a5c:	683b      	ldr	r3, [r7, #0]
 8004a5e:	891b      	ldrh	r3, [r3, #8]
 8004a60:	085b      	lsrs	r3, r3, #1
 8004a62:	b29b      	uxth	r3, r3
 8004a64:	005b      	lsls	r3, r3, #1
 8004a66:	b29a      	uxth	r2, r3
 8004a68:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004a6a:	801a      	strh	r2, [r3, #0]
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	653b      	str	r3, [r7, #80]	; 0x50
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004a76:	b29b      	uxth	r3, r3
 8004a78:	461a      	mov	r2, r3
 8004a7a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004a7c:	4413      	add	r3, r2
 8004a7e:	653b      	str	r3, [r7, #80]	; 0x50
 8004a80:	683b      	ldr	r3, [r7, #0]
 8004a82:	781b      	ldrb	r3, [r3, #0]
 8004a84:	011a      	lsls	r2, r3, #4
 8004a86:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004a88:	4413      	add	r3, r2
 8004a8a:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8004a8e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004a90:	683b      	ldr	r3, [r7, #0]
 8004a92:	895b      	ldrh	r3, [r3, #10]
 8004a94:	085b      	lsrs	r3, r3, #1
 8004a96:	b29b      	uxth	r3, r3
 8004a98:	005b      	lsls	r3, r3, #1
 8004a9a:	b29a      	uxth	r2, r3
 8004a9c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004a9e:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8004aa0:	683b      	ldr	r3, [r7, #0]
 8004aa2:	785b      	ldrb	r3, [r3, #1]
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	f040 8091 	bne.w	8004bcc <USB_ActivateEndpoint+0x554>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004aaa:	687a      	ldr	r2, [r7, #4]
 8004aac:	683b      	ldr	r3, [r7, #0]
 8004aae:	781b      	ldrb	r3, [r3, #0]
 8004ab0:	009b      	lsls	r3, r3, #2
 8004ab2:	4413      	add	r3, r2
 8004ab4:	881b      	ldrh	r3, [r3, #0]
 8004ab6:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8004ab8:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8004aba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d01b      	beq.n	8004afa <USB_ActivateEndpoint+0x482>
 8004ac2:	687a      	ldr	r2, [r7, #4]
 8004ac4:	683b      	ldr	r3, [r7, #0]
 8004ac6:	781b      	ldrb	r3, [r3, #0]
 8004ac8:	009b      	lsls	r3, r3, #2
 8004aca:	4413      	add	r3, r2
 8004acc:	881b      	ldrh	r3, [r3, #0]
 8004ace:	b29b      	uxth	r3, r3
 8004ad0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004ad4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ad8:	877b      	strh	r3, [r7, #58]	; 0x3a
 8004ada:	687a      	ldr	r2, [r7, #4]
 8004adc:	683b      	ldr	r3, [r7, #0]
 8004ade:	781b      	ldrb	r3, [r3, #0]
 8004ae0:	009b      	lsls	r3, r3, #2
 8004ae2:	441a      	add	r2, r3
 8004ae4:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8004ae6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004aea:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004aee:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004af2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004af6:	b29b      	uxth	r3, r3
 8004af8:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004afa:	687a      	ldr	r2, [r7, #4]
 8004afc:	683b      	ldr	r3, [r7, #0]
 8004afe:	781b      	ldrb	r3, [r3, #0]
 8004b00:	009b      	lsls	r3, r3, #2
 8004b02:	4413      	add	r3, r2
 8004b04:	881b      	ldrh	r3, [r3, #0]
 8004b06:	873b      	strh	r3, [r7, #56]	; 0x38
 8004b08:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8004b0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d01b      	beq.n	8004b4a <USB_ActivateEndpoint+0x4d2>
 8004b12:	687a      	ldr	r2, [r7, #4]
 8004b14:	683b      	ldr	r3, [r7, #0]
 8004b16:	781b      	ldrb	r3, [r3, #0]
 8004b18:	009b      	lsls	r3, r3, #2
 8004b1a:	4413      	add	r3, r2
 8004b1c:	881b      	ldrh	r3, [r3, #0]
 8004b1e:	b29b      	uxth	r3, r3
 8004b20:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004b24:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b28:	86fb      	strh	r3, [r7, #54]	; 0x36
 8004b2a:	687a      	ldr	r2, [r7, #4]
 8004b2c:	683b      	ldr	r3, [r7, #0]
 8004b2e:	781b      	ldrb	r3, [r3, #0]
 8004b30:	009b      	lsls	r3, r3, #2
 8004b32:	441a      	add	r2, r3
 8004b34:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004b36:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004b3a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004b3e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004b42:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004b46:	b29b      	uxth	r3, r3
 8004b48:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004b4a:	687a      	ldr	r2, [r7, #4]
 8004b4c:	683b      	ldr	r3, [r7, #0]
 8004b4e:	781b      	ldrb	r3, [r3, #0]
 8004b50:	009b      	lsls	r3, r3, #2
 8004b52:	4413      	add	r3, r2
 8004b54:	881b      	ldrh	r3, [r3, #0]
 8004b56:	b29b      	uxth	r3, r3
 8004b58:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004b5c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b60:	86bb      	strh	r3, [r7, #52]	; 0x34
 8004b62:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8004b64:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8004b68:	86bb      	strh	r3, [r7, #52]	; 0x34
 8004b6a:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8004b6c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004b70:	86bb      	strh	r3, [r7, #52]	; 0x34
 8004b72:	687a      	ldr	r2, [r7, #4]
 8004b74:	683b      	ldr	r3, [r7, #0]
 8004b76:	781b      	ldrb	r3, [r3, #0]
 8004b78:	009b      	lsls	r3, r3, #2
 8004b7a:	441a      	add	r2, r3
 8004b7c:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8004b7e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004b82:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004b86:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004b8a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004b8e:	b29b      	uxth	r3, r3
 8004b90:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004b92:	687a      	ldr	r2, [r7, #4]
 8004b94:	683b      	ldr	r3, [r7, #0]
 8004b96:	781b      	ldrb	r3, [r3, #0]
 8004b98:	009b      	lsls	r3, r3, #2
 8004b9a:	4413      	add	r3, r2
 8004b9c:	881b      	ldrh	r3, [r3, #0]
 8004b9e:	b29b      	uxth	r3, r3
 8004ba0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004ba4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004ba8:	867b      	strh	r3, [r7, #50]	; 0x32
 8004baa:	687a      	ldr	r2, [r7, #4]
 8004bac:	683b      	ldr	r3, [r7, #0]
 8004bae:	781b      	ldrb	r3, [r3, #0]
 8004bb0:	009b      	lsls	r3, r3, #2
 8004bb2:	441a      	add	r2, r3
 8004bb4:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8004bb6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004bba:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004bbe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004bc2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004bc6:	b29b      	uxth	r3, r3
 8004bc8:	8013      	strh	r3, [r2, #0]
 8004bca:	e0ba      	b.n	8004d42 <USB_ActivateEndpoint+0x6ca>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004bcc:	687a      	ldr	r2, [r7, #4]
 8004bce:	683b      	ldr	r3, [r7, #0]
 8004bd0:	781b      	ldrb	r3, [r3, #0]
 8004bd2:	009b      	lsls	r3, r3, #2
 8004bd4:	4413      	add	r3, r2
 8004bd6:	881b      	ldrh	r3, [r3, #0]
 8004bd8:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8004bdc:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8004be0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d01d      	beq.n	8004c24 <USB_ActivateEndpoint+0x5ac>
 8004be8:	687a      	ldr	r2, [r7, #4]
 8004bea:	683b      	ldr	r3, [r7, #0]
 8004bec:	781b      	ldrb	r3, [r3, #0]
 8004bee:	009b      	lsls	r3, r3, #2
 8004bf0:	4413      	add	r3, r2
 8004bf2:	881b      	ldrh	r3, [r3, #0]
 8004bf4:	b29b      	uxth	r3, r3
 8004bf6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004bfa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004bfe:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8004c02:	687a      	ldr	r2, [r7, #4]
 8004c04:	683b      	ldr	r3, [r7, #0]
 8004c06:	781b      	ldrb	r3, [r3, #0]
 8004c08:	009b      	lsls	r3, r3, #2
 8004c0a:	441a      	add	r2, r3
 8004c0c:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8004c10:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004c14:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004c18:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004c1c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004c20:	b29b      	uxth	r3, r3
 8004c22:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004c24:	687a      	ldr	r2, [r7, #4]
 8004c26:	683b      	ldr	r3, [r7, #0]
 8004c28:	781b      	ldrb	r3, [r3, #0]
 8004c2a:	009b      	lsls	r3, r3, #2
 8004c2c:	4413      	add	r3, r2
 8004c2e:	881b      	ldrh	r3, [r3, #0]
 8004c30:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8004c34:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8004c38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d01d      	beq.n	8004c7c <USB_ActivateEndpoint+0x604>
 8004c40:	687a      	ldr	r2, [r7, #4]
 8004c42:	683b      	ldr	r3, [r7, #0]
 8004c44:	781b      	ldrb	r3, [r3, #0]
 8004c46:	009b      	lsls	r3, r3, #2
 8004c48:	4413      	add	r3, r2
 8004c4a:	881b      	ldrh	r3, [r3, #0]
 8004c4c:	b29b      	uxth	r3, r3
 8004c4e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004c52:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c56:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8004c5a:	687a      	ldr	r2, [r7, #4]
 8004c5c:	683b      	ldr	r3, [r7, #0]
 8004c5e:	781b      	ldrb	r3, [r3, #0]
 8004c60:	009b      	lsls	r3, r3, #2
 8004c62:	441a      	add	r2, r3
 8004c64:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8004c68:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004c6c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004c70:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004c74:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004c78:	b29b      	uxth	r3, r3
 8004c7a:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004c7c:	683b      	ldr	r3, [r7, #0]
 8004c7e:	78db      	ldrb	r3, [r3, #3]
 8004c80:	2b01      	cmp	r3, #1
 8004c82:	d024      	beq.n	8004cce <USB_ActivateEndpoint+0x656>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004c84:	687a      	ldr	r2, [r7, #4]
 8004c86:	683b      	ldr	r3, [r7, #0]
 8004c88:	781b      	ldrb	r3, [r3, #0]
 8004c8a:	009b      	lsls	r3, r3, #2
 8004c8c:	4413      	add	r3, r2
 8004c8e:	881b      	ldrh	r3, [r3, #0]
 8004c90:	b29b      	uxth	r3, r3
 8004c92:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004c96:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004c9a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8004c9e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8004ca2:	f083 0320 	eor.w	r3, r3, #32
 8004ca6:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8004caa:	687a      	ldr	r2, [r7, #4]
 8004cac:	683b      	ldr	r3, [r7, #0]
 8004cae:	781b      	ldrb	r3, [r3, #0]
 8004cb0:	009b      	lsls	r3, r3, #2
 8004cb2:	441a      	add	r2, r3
 8004cb4:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8004cb8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004cbc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004cc0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004cc4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004cc8:	b29b      	uxth	r3, r3
 8004cca:	8013      	strh	r3, [r2, #0]
 8004ccc:	e01d      	b.n	8004d0a <USB_ActivateEndpoint+0x692>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004cce:	687a      	ldr	r2, [r7, #4]
 8004cd0:	683b      	ldr	r3, [r7, #0]
 8004cd2:	781b      	ldrb	r3, [r3, #0]
 8004cd4:	009b      	lsls	r3, r3, #2
 8004cd6:	4413      	add	r3, r2
 8004cd8:	881b      	ldrh	r3, [r3, #0]
 8004cda:	b29b      	uxth	r3, r3
 8004cdc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004ce0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004ce4:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8004ce8:	687a      	ldr	r2, [r7, #4]
 8004cea:	683b      	ldr	r3, [r7, #0]
 8004cec:	781b      	ldrb	r3, [r3, #0]
 8004cee:	009b      	lsls	r3, r3, #2
 8004cf0:	441a      	add	r2, r3
 8004cf2:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8004cf6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004cfa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004cfe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004d02:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004d06:	b29b      	uxth	r3, r3
 8004d08:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004d0a:	687a      	ldr	r2, [r7, #4]
 8004d0c:	683b      	ldr	r3, [r7, #0]
 8004d0e:	781b      	ldrb	r3, [r3, #0]
 8004d10:	009b      	lsls	r3, r3, #2
 8004d12:	4413      	add	r3, r2
 8004d14:	881b      	ldrh	r3, [r3, #0]
 8004d16:	b29b      	uxth	r3, r3
 8004d18:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004d1c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d20:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8004d22:	687a      	ldr	r2, [r7, #4]
 8004d24:	683b      	ldr	r3, [r7, #0]
 8004d26:	781b      	ldrb	r3, [r3, #0]
 8004d28:	009b      	lsls	r3, r3, #2
 8004d2a:	441a      	add	r2, r3
 8004d2c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8004d2e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004d32:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004d36:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004d3a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004d3e:	b29b      	uxth	r3, r3
 8004d40:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 8004d42:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8004d46:	4618      	mov	r0, r3
 8004d48:	376c      	adds	r7, #108	; 0x6c
 8004d4a:	46bd      	mov	sp, r7
 8004d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d50:	4770      	bx	lr
 8004d52:	bf00      	nop

08004d54 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004d54:	b480      	push	{r7}
 8004d56:	b08d      	sub	sp, #52	; 0x34
 8004d58:	af00      	add	r7, sp, #0
 8004d5a:	6078      	str	r0, [r7, #4]
 8004d5c:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8004d5e:	683b      	ldr	r3, [r7, #0]
 8004d60:	7b1b      	ldrb	r3, [r3, #12]
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	f040 808e 	bne.w	8004e84 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8004d68:	683b      	ldr	r3, [r7, #0]
 8004d6a:	785b      	ldrb	r3, [r3, #1]
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d044      	beq.n	8004dfa <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004d70:	687a      	ldr	r2, [r7, #4]
 8004d72:	683b      	ldr	r3, [r7, #0]
 8004d74:	781b      	ldrb	r3, [r3, #0]
 8004d76:	009b      	lsls	r3, r3, #2
 8004d78:	4413      	add	r3, r2
 8004d7a:	881b      	ldrh	r3, [r3, #0]
 8004d7c:	81bb      	strh	r3, [r7, #12]
 8004d7e:	89bb      	ldrh	r3, [r7, #12]
 8004d80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d01b      	beq.n	8004dc0 <USB_DeactivateEndpoint+0x6c>
 8004d88:	687a      	ldr	r2, [r7, #4]
 8004d8a:	683b      	ldr	r3, [r7, #0]
 8004d8c:	781b      	ldrb	r3, [r3, #0]
 8004d8e:	009b      	lsls	r3, r3, #2
 8004d90:	4413      	add	r3, r2
 8004d92:	881b      	ldrh	r3, [r3, #0]
 8004d94:	b29b      	uxth	r3, r3
 8004d96:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004d9a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d9e:	817b      	strh	r3, [r7, #10]
 8004da0:	687a      	ldr	r2, [r7, #4]
 8004da2:	683b      	ldr	r3, [r7, #0]
 8004da4:	781b      	ldrb	r3, [r3, #0]
 8004da6:	009b      	lsls	r3, r3, #2
 8004da8:	441a      	add	r2, r3
 8004daa:	897b      	ldrh	r3, [r7, #10]
 8004dac:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004db0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004db4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004db8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004dbc:	b29b      	uxth	r3, r3
 8004dbe:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004dc0:	687a      	ldr	r2, [r7, #4]
 8004dc2:	683b      	ldr	r3, [r7, #0]
 8004dc4:	781b      	ldrb	r3, [r3, #0]
 8004dc6:	009b      	lsls	r3, r3, #2
 8004dc8:	4413      	add	r3, r2
 8004dca:	881b      	ldrh	r3, [r3, #0]
 8004dcc:	b29b      	uxth	r3, r3
 8004dce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004dd2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004dd6:	813b      	strh	r3, [r7, #8]
 8004dd8:	687a      	ldr	r2, [r7, #4]
 8004dda:	683b      	ldr	r3, [r7, #0]
 8004ddc:	781b      	ldrb	r3, [r3, #0]
 8004dde:	009b      	lsls	r3, r3, #2
 8004de0:	441a      	add	r2, r3
 8004de2:	893b      	ldrh	r3, [r7, #8]
 8004de4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004de8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004dec:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004df0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004df4:	b29b      	uxth	r3, r3
 8004df6:	8013      	strh	r3, [r2, #0]
 8004df8:	e192      	b.n	8005120 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004dfa:	687a      	ldr	r2, [r7, #4]
 8004dfc:	683b      	ldr	r3, [r7, #0]
 8004dfe:	781b      	ldrb	r3, [r3, #0]
 8004e00:	009b      	lsls	r3, r3, #2
 8004e02:	4413      	add	r3, r2
 8004e04:	881b      	ldrh	r3, [r3, #0]
 8004e06:	827b      	strh	r3, [r7, #18]
 8004e08:	8a7b      	ldrh	r3, [r7, #18]
 8004e0a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d01b      	beq.n	8004e4a <USB_DeactivateEndpoint+0xf6>
 8004e12:	687a      	ldr	r2, [r7, #4]
 8004e14:	683b      	ldr	r3, [r7, #0]
 8004e16:	781b      	ldrb	r3, [r3, #0]
 8004e18:	009b      	lsls	r3, r3, #2
 8004e1a:	4413      	add	r3, r2
 8004e1c:	881b      	ldrh	r3, [r3, #0]
 8004e1e:	b29b      	uxth	r3, r3
 8004e20:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004e24:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e28:	823b      	strh	r3, [r7, #16]
 8004e2a:	687a      	ldr	r2, [r7, #4]
 8004e2c:	683b      	ldr	r3, [r7, #0]
 8004e2e:	781b      	ldrb	r3, [r3, #0]
 8004e30:	009b      	lsls	r3, r3, #2
 8004e32:	441a      	add	r2, r3
 8004e34:	8a3b      	ldrh	r3, [r7, #16]
 8004e36:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004e3a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004e3e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004e42:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004e46:	b29b      	uxth	r3, r3
 8004e48:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004e4a:	687a      	ldr	r2, [r7, #4]
 8004e4c:	683b      	ldr	r3, [r7, #0]
 8004e4e:	781b      	ldrb	r3, [r3, #0]
 8004e50:	009b      	lsls	r3, r3, #2
 8004e52:	4413      	add	r3, r2
 8004e54:	881b      	ldrh	r3, [r3, #0]
 8004e56:	b29b      	uxth	r3, r3
 8004e58:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004e5c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e60:	81fb      	strh	r3, [r7, #14]
 8004e62:	687a      	ldr	r2, [r7, #4]
 8004e64:	683b      	ldr	r3, [r7, #0]
 8004e66:	781b      	ldrb	r3, [r3, #0]
 8004e68:	009b      	lsls	r3, r3, #2
 8004e6a:	441a      	add	r2, r3
 8004e6c:	89fb      	ldrh	r3, [r7, #14]
 8004e6e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004e72:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004e76:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004e7a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004e7e:	b29b      	uxth	r3, r3
 8004e80:	8013      	strh	r3, [r2, #0]
 8004e82:	e14d      	b.n	8005120 <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 8004e84:	683b      	ldr	r3, [r7, #0]
 8004e86:	785b      	ldrb	r3, [r3, #1]
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	f040 80a5 	bne.w	8004fd8 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004e8e:	687a      	ldr	r2, [r7, #4]
 8004e90:	683b      	ldr	r3, [r7, #0]
 8004e92:	781b      	ldrb	r3, [r3, #0]
 8004e94:	009b      	lsls	r3, r3, #2
 8004e96:	4413      	add	r3, r2
 8004e98:	881b      	ldrh	r3, [r3, #0]
 8004e9a:	843b      	strh	r3, [r7, #32]
 8004e9c:	8c3b      	ldrh	r3, [r7, #32]
 8004e9e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d01b      	beq.n	8004ede <USB_DeactivateEndpoint+0x18a>
 8004ea6:	687a      	ldr	r2, [r7, #4]
 8004ea8:	683b      	ldr	r3, [r7, #0]
 8004eaa:	781b      	ldrb	r3, [r3, #0]
 8004eac:	009b      	lsls	r3, r3, #2
 8004eae:	4413      	add	r3, r2
 8004eb0:	881b      	ldrh	r3, [r3, #0]
 8004eb2:	b29b      	uxth	r3, r3
 8004eb4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004eb8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ebc:	83fb      	strh	r3, [r7, #30]
 8004ebe:	687a      	ldr	r2, [r7, #4]
 8004ec0:	683b      	ldr	r3, [r7, #0]
 8004ec2:	781b      	ldrb	r3, [r3, #0]
 8004ec4:	009b      	lsls	r3, r3, #2
 8004ec6:	441a      	add	r2, r3
 8004ec8:	8bfb      	ldrh	r3, [r7, #30]
 8004eca:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004ece:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004ed2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004ed6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004eda:	b29b      	uxth	r3, r3
 8004edc:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004ede:	687a      	ldr	r2, [r7, #4]
 8004ee0:	683b      	ldr	r3, [r7, #0]
 8004ee2:	781b      	ldrb	r3, [r3, #0]
 8004ee4:	009b      	lsls	r3, r3, #2
 8004ee6:	4413      	add	r3, r2
 8004ee8:	881b      	ldrh	r3, [r3, #0]
 8004eea:	83bb      	strh	r3, [r7, #28]
 8004eec:	8bbb      	ldrh	r3, [r7, #28]
 8004eee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d01b      	beq.n	8004f2e <USB_DeactivateEndpoint+0x1da>
 8004ef6:	687a      	ldr	r2, [r7, #4]
 8004ef8:	683b      	ldr	r3, [r7, #0]
 8004efa:	781b      	ldrb	r3, [r3, #0]
 8004efc:	009b      	lsls	r3, r3, #2
 8004efe:	4413      	add	r3, r2
 8004f00:	881b      	ldrh	r3, [r3, #0]
 8004f02:	b29b      	uxth	r3, r3
 8004f04:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004f08:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f0c:	837b      	strh	r3, [r7, #26]
 8004f0e:	687a      	ldr	r2, [r7, #4]
 8004f10:	683b      	ldr	r3, [r7, #0]
 8004f12:	781b      	ldrb	r3, [r3, #0]
 8004f14:	009b      	lsls	r3, r3, #2
 8004f16:	441a      	add	r2, r3
 8004f18:	8b7b      	ldrh	r3, [r7, #26]
 8004f1a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004f1e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004f22:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004f26:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004f2a:	b29b      	uxth	r3, r3
 8004f2c:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8004f2e:	687a      	ldr	r2, [r7, #4]
 8004f30:	683b      	ldr	r3, [r7, #0]
 8004f32:	781b      	ldrb	r3, [r3, #0]
 8004f34:	009b      	lsls	r3, r3, #2
 8004f36:	4413      	add	r3, r2
 8004f38:	881b      	ldrh	r3, [r3, #0]
 8004f3a:	b29b      	uxth	r3, r3
 8004f3c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004f40:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f44:	833b      	strh	r3, [r7, #24]
 8004f46:	687a      	ldr	r2, [r7, #4]
 8004f48:	683b      	ldr	r3, [r7, #0]
 8004f4a:	781b      	ldrb	r3, [r3, #0]
 8004f4c:	009b      	lsls	r3, r3, #2
 8004f4e:	441a      	add	r2, r3
 8004f50:	8b3b      	ldrh	r3, [r7, #24]
 8004f52:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004f56:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004f5a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004f5e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004f62:	b29b      	uxth	r3, r3
 8004f64:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004f66:	687a      	ldr	r2, [r7, #4]
 8004f68:	683b      	ldr	r3, [r7, #0]
 8004f6a:	781b      	ldrb	r3, [r3, #0]
 8004f6c:	009b      	lsls	r3, r3, #2
 8004f6e:	4413      	add	r3, r2
 8004f70:	881b      	ldrh	r3, [r3, #0]
 8004f72:	b29b      	uxth	r3, r3
 8004f74:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004f78:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f7c:	82fb      	strh	r3, [r7, #22]
 8004f7e:	687a      	ldr	r2, [r7, #4]
 8004f80:	683b      	ldr	r3, [r7, #0]
 8004f82:	781b      	ldrb	r3, [r3, #0]
 8004f84:	009b      	lsls	r3, r3, #2
 8004f86:	441a      	add	r2, r3
 8004f88:	8afb      	ldrh	r3, [r7, #22]
 8004f8a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004f8e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004f92:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004f96:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004f9a:	b29b      	uxth	r3, r3
 8004f9c:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004f9e:	687a      	ldr	r2, [r7, #4]
 8004fa0:	683b      	ldr	r3, [r7, #0]
 8004fa2:	781b      	ldrb	r3, [r3, #0]
 8004fa4:	009b      	lsls	r3, r3, #2
 8004fa6:	4413      	add	r3, r2
 8004fa8:	881b      	ldrh	r3, [r3, #0]
 8004faa:	b29b      	uxth	r3, r3
 8004fac:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004fb0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004fb4:	82bb      	strh	r3, [r7, #20]
 8004fb6:	687a      	ldr	r2, [r7, #4]
 8004fb8:	683b      	ldr	r3, [r7, #0]
 8004fba:	781b      	ldrb	r3, [r3, #0]
 8004fbc:	009b      	lsls	r3, r3, #2
 8004fbe:	441a      	add	r2, r3
 8004fc0:	8abb      	ldrh	r3, [r7, #20]
 8004fc2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004fc6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004fca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004fce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004fd2:	b29b      	uxth	r3, r3
 8004fd4:	8013      	strh	r3, [r2, #0]
 8004fd6:	e0a3      	b.n	8005120 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004fd8:	687a      	ldr	r2, [r7, #4]
 8004fda:	683b      	ldr	r3, [r7, #0]
 8004fdc:	781b      	ldrb	r3, [r3, #0]
 8004fde:	009b      	lsls	r3, r3, #2
 8004fe0:	4413      	add	r3, r2
 8004fe2:	881b      	ldrh	r3, [r3, #0]
 8004fe4:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8004fe6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8004fe8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d01b      	beq.n	8005028 <USB_DeactivateEndpoint+0x2d4>
 8004ff0:	687a      	ldr	r2, [r7, #4]
 8004ff2:	683b      	ldr	r3, [r7, #0]
 8004ff4:	781b      	ldrb	r3, [r3, #0]
 8004ff6:	009b      	lsls	r3, r3, #2
 8004ff8:	4413      	add	r3, r2
 8004ffa:	881b      	ldrh	r3, [r3, #0]
 8004ffc:	b29b      	uxth	r3, r3
 8004ffe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005002:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005006:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8005008:	687a      	ldr	r2, [r7, #4]
 800500a:	683b      	ldr	r3, [r7, #0]
 800500c:	781b      	ldrb	r3, [r3, #0]
 800500e:	009b      	lsls	r3, r3, #2
 8005010:	441a      	add	r2, r3
 8005012:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8005014:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005018:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800501c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005020:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005024:	b29b      	uxth	r3, r3
 8005026:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005028:	687a      	ldr	r2, [r7, #4]
 800502a:	683b      	ldr	r3, [r7, #0]
 800502c:	781b      	ldrb	r3, [r3, #0]
 800502e:	009b      	lsls	r3, r3, #2
 8005030:	4413      	add	r3, r2
 8005032:	881b      	ldrh	r3, [r3, #0]
 8005034:	857b      	strh	r3, [r7, #42]	; 0x2a
 8005036:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8005038:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800503c:	2b00      	cmp	r3, #0
 800503e:	d01b      	beq.n	8005078 <USB_DeactivateEndpoint+0x324>
 8005040:	687a      	ldr	r2, [r7, #4]
 8005042:	683b      	ldr	r3, [r7, #0]
 8005044:	781b      	ldrb	r3, [r3, #0]
 8005046:	009b      	lsls	r3, r3, #2
 8005048:	4413      	add	r3, r2
 800504a:	881b      	ldrh	r3, [r3, #0]
 800504c:	b29b      	uxth	r3, r3
 800504e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005052:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005056:	853b      	strh	r3, [r7, #40]	; 0x28
 8005058:	687a      	ldr	r2, [r7, #4]
 800505a:	683b      	ldr	r3, [r7, #0]
 800505c:	781b      	ldrb	r3, [r3, #0]
 800505e:	009b      	lsls	r3, r3, #2
 8005060:	441a      	add	r2, r3
 8005062:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8005064:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005068:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800506c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005070:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005074:	b29b      	uxth	r3, r3
 8005076:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8005078:	687a      	ldr	r2, [r7, #4]
 800507a:	683b      	ldr	r3, [r7, #0]
 800507c:	781b      	ldrb	r3, [r3, #0]
 800507e:	009b      	lsls	r3, r3, #2
 8005080:	4413      	add	r3, r2
 8005082:	881b      	ldrh	r3, [r3, #0]
 8005084:	b29b      	uxth	r3, r3
 8005086:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800508a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800508e:	84fb      	strh	r3, [r7, #38]	; 0x26
 8005090:	687a      	ldr	r2, [r7, #4]
 8005092:	683b      	ldr	r3, [r7, #0]
 8005094:	781b      	ldrb	r3, [r3, #0]
 8005096:	009b      	lsls	r3, r3, #2
 8005098:	441a      	add	r2, r3
 800509a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800509c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80050a0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80050a4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80050a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80050ac:	b29b      	uxth	r3, r3
 80050ae:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80050b0:	687a      	ldr	r2, [r7, #4]
 80050b2:	683b      	ldr	r3, [r7, #0]
 80050b4:	781b      	ldrb	r3, [r3, #0]
 80050b6:	009b      	lsls	r3, r3, #2
 80050b8:	4413      	add	r3, r2
 80050ba:	881b      	ldrh	r3, [r3, #0]
 80050bc:	b29b      	uxth	r3, r3
 80050be:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80050c2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80050c6:	84bb      	strh	r3, [r7, #36]	; 0x24
 80050c8:	687a      	ldr	r2, [r7, #4]
 80050ca:	683b      	ldr	r3, [r7, #0]
 80050cc:	781b      	ldrb	r3, [r3, #0]
 80050ce:	009b      	lsls	r3, r3, #2
 80050d0:	441a      	add	r2, r3
 80050d2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80050d4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80050d8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80050dc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80050e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80050e4:	b29b      	uxth	r3, r3
 80050e6:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80050e8:	687a      	ldr	r2, [r7, #4]
 80050ea:	683b      	ldr	r3, [r7, #0]
 80050ec:	781b      	ldrb	r3, [r3, #0]
 80050ee:	009b      	lsls	r3, r3, #2
 80050f0:	4413      	add	r3, r2
 80050f2:	881b      	ldrh	r3, [r3, #0]
 80050f4:	b29b      	uxth	r3, r3
 80050f6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80050fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80050fe:	847b      	strh	r3, [r7, #34]	; 0x22
 8005100:	687a      	ldr	r2, [r7, #4]
 8005102:	683b      	ldr	r3, [r7, #0]
 8005104:	781b      	ldrb	r3, [r3, #0]
 8005106:	009b      	lsls	r3, r3, #2
 8005108:	441a      	add	r2, r3
 800510a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800510c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005110:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005114:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005118:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800511c:	b29b      	uxth	r3, r3
 800511e:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8005120:	2300      	movs	r3, #0
}
 8005122:	4618      	mov	r0, r3
 8005124:	3734      	adds	r7, #52	; 0x34
 8005126:	46bd      	mov	sp, r7
 8005128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800512c:	4770      	bx	lr

0800512e <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800512e:	b580      	push	{r7, lr}
 8005130:	b0c4      	sub	sp, #272	; 0x110
 8005132:	af00      	add	r7, sp, #0
 8005134:	1d3b      	adds	r3, r7, #4
 8005136:	6018      	str	r0, [r3, #0]
 8005138:	463b      	mov	r3, r7
 800513a:	6019      	str	r1, [r3, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800513c:	463b      	mov	r3, r7
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	785b      	ldrb	r3, [r3, #1]
 8005142:	2b01      	cmp	r3, #1
 8005144:	f040 8557 	bne.w	8005bf6 <USB_EPStartXfer+0xac8>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8005148:	463b      	mov	r3, r7
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	699a      	ldr	r2, [r3, #24]
 800514e:	463b      	mov	r3, r7
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	691b      	ldr	r3, [r3, #16]
 8005154:	429a      	cmp	r2, r3
 8005156:	d905      	bls.n	8005164 <USB_EPStartXfer+0x36>
    {
      len = ep->maxpacket;
 8005158:	463b      	mov	r3, r7
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	691b      	ldr	r3, [r3, #16]
 800515e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8005162:	e004      	b.n	800516e <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 8005164:	463b      	mov	r3, r7
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	699b      	ldr	r3, [r3, #24]
 800516a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 800516e:	463b      	mov	r3, r7
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	7b1b      	ldrb	r3, [r3, #12]
 8005174:	2b00      	cmp	r3, #0
 8005176:	d12c      	bne.n	80051d2 <USB_EPStartXfer+0xa4>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8005178:	463b      	mov	r3, r7
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	6959      	ldr	r1, [r3, #20]
 800517e:	463b      	mov	r3, r7
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	88da      	ldrh	r2, [r3, #6]
 8005184:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005188:	b29b      	uxth	r3, r3
 800518a:	1d38      	adds	r0, r7, #4
 800518c:	6800      	ldr	r0, [r0, #0]
 800518e:	f001 fa1c 	bl	80065ca <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8005192:	1d3b      	adds	r3, r7, #4
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	617b      	str	r3, [r7, #20]
 8005198:	1d3b      	adds	r3, r7, #4
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80051a0:	b29b      	uxth	r3, r3
 80051a2:	461a      	mov	r2, r3
 80051a4:	697b      	ldr	r3, [r7, #20]
 80051a6:	4413      	add	r3, r2
 80051a8:	617b      	str	r3, [r7, #20]
 80051aa:	463b      	mov	r3, r7
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	781b      	ldrb	r3, [r3, #0]
 80051b0:	011a      	lsls	r2, r3, #4
 80051b2:	697b      	ldr	r3, [r7, #20]
 80051b4:	4413      	add	r3, r2
 80051b6:	f203 4204 	addw	r2, r3, #1028	; 0x404
 80051ba:	f107 0310 	add.w	r3, r7, #16
 80051be:	601a      	str	r2, [r3, #0]
 80051c0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80051c4:	b29a      	uxth	r2, r3
 80051c6:	f107 0310 	add.w	r3, r7, #16
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	801a      	strh	r2, [r3, #0]
 80051ce:	f000 bcdd 	b.w	8005b8c <USB_EPStartXfer+0xa5e>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 80051d2:	463b      	mov	r3, r7
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	78db      	ldrb	r3, [r3, #3]
 80051d8:	2b02      	cmp	r3, #2
 80051da:	f040 8347 	bne.w	800586c <USB_EPStartXfer+0x73e>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 80051de:	463b      	mov	r3, r7
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	6a1a      	ldr	r2, [r3, #32]
 80051e4:	463b      	mov	r3, r7
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	691b      	ldr	r3, [r3, #16]
 80051ea:	429a      	cmp	r2, r3
 80051ec:	f240 82eb 	bls.w	80057c6 <USB_EPStartXfer+0x698>
        {
          /* enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 80051f0:	1d3b      	adds	r3, r7, #4
 80051f2:	681a      	ldr	r2, [r3, #0]
 80051f4:	463b      	mov	r3, r7
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	781b      	ldrb	r3, [r3, #0]
 80051fa:	009b      	lsls	r3, r3, #2
 80051fc:	4413      	add	r3, r2
 80051fe:	881b      	ldrh	r3, [r3, #0]
 8005200:	b29b      	uxth	r3, r3
 8005202:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005206:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800520a:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
 800520e:	1d3b      	adds	r3, r7, #4
 8005210:	681a      	ldr	r2, [r3, #0]
 8005212:	463b      	mov	r3, r7
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	781b      	ldrb	r3, [r3, #0]
 8005218:	009b      	lsls	r3, r3, #2
 800521a:	441a      	add	r2, r3
 800521c:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 8005220:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005224:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005228:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800522c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005230:	b29b      	uxth	r3, r3
 8005232:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8005234:	463b      	mov	r3, r7
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	6a1a      	ldr	r2, [r3, #32]
 800523a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800523e:	1ad2      	subs	r2, r2, r3
 8005240:	463b      	mov	r3, r7
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8005246:	1d3b      	adds	r3, r7, #4
 8005248:	681a      	ldr	r2, [r3, #0]
 800524a:	463b      	mov	r3, r7
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	781b      	ldrb	r3, [r3, #0]
 8005250:	009b      	lsls	r3, r3, #2
 8005252:	4413      	add	r3, r2
 8005254:	881b      	ldrh	r3, [r3, #0]
 8005256:	b29b      	uxth	r3, r3
 8005258:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800525c:	2b00      	cmp	r3, #0
 800525e:	f000 8159 	beq.w	8005514 <USB_EPStartXfer+0x3e6>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005262:	1d3b      	adds	r3, r7, #4
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	637b      	str	r3, [r7, #52]	; 0x34
 8005268:	463b      	mov	r3, r7
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	785b      	ldrb	r3, [r3, #1]
 800526e:	2b00      	cmp	r3, #0
 8005270:	d164      	bne.n	800533c <USB_EPStartXfer+0x20e>
 8005272:	1d3b      	adds	r3, r7, #4
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005278:	1d3b      	adds	r3, r7, #4
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005280:	b29b      	uxth	r3, r3
 8005282:	461a      	mov	r2, r3
 8005284:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005286:	4413      	add	r3, r2
 8005288:	62fb      	str	r3, [r7, #44]	; 0x2c
 800528a:	463b      	mov	r3, r7
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	781b      	ldrb	r3, [r3, #0]
 8005290:	011a      	lsls	r2, r3, #4
 8005292:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005294:	4413      	add	r3, r2
 8005296:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800529a:	62bb      	str	r3, [r7, #40]	; 0x28
 800529c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d112      	bne.n	80052ca <USB_EPStartXfer+0x19c>
 80052a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052a6:	881b      	ldrh	r3, [r3, #0]
 80052a8:	b29b      	uxth	r3, r3
 80052aa:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80052ae:	b29a      	uxth	r2, r3
 80052b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052b2:	801a      	strh	r2, [r3, #0]
 80052b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052b6:	881b      	ldrh	r3, [r3, #0]
 80052b8:	b29b      	uxth	r3, r3
 80052ba:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80052be:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80052c2:	b29a      	uxth	r2, r3
 80052c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052c6:	801a      	strh	r2, [r3, #0]
 80052c8:	e054      	b.n	8005374 <USB_EPStartXfer+0x246>
 80052ca:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80052ce:	2b3e      	cmp	r3, #62	; 0x3e
 80052d0:	d817      	bhi.n	8005302 <USB_EPStartXfer+0x1d4>
 80052d2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80052d6:	085b      	lsrs	r3, r3, #1
 80052d8:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80052dc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80052e0:	f003 0301 	and.w	r3, r3, #1
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d004      	beq.n	80052f2 <USB_EPStartXfer+0x1c4>
 80052e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80052ec:	3301      	adds	r3, #1
 80052ee:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80052f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80052f6:	b29b      	uxth	r3, r3
 80052f8:	029b      	lsls	r3, r3, #10
 80052fa:	b29a      	uxth	r2, r3
 80052fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052fe:	801a      	strh	r2, [r3, #0]
 8005300:	e038      	b.n	8005374 <USB_EPStartXfer+0x246>
 8005302:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005306:	095b      	lsrs	r3, r3, #5
 8005308:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800530c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005310:	f003 031f 	and.w	r3, r3, #31
 8005314:	2b00      	cmp	r3, #0
 8005316:	d104      	bne.n	8005322 <USB_EPStartXfer+0x1f4>
 8005318:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800531c:	3b01      	subs	r3, #1
 800531e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8005322:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005326:	b29b      	uxth	r3, r3
 8005328:	029b      	lsls	r3, r3, #10
 800532a:	b29b      	uxth	r3, r3
 800532c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005330:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005334:	b29a      	uxth	r2, r3
 8005336:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005338:	801a      	strh	r2, [r3, #0]
 800533a:	e01b      	b.n	8005374 <USB_EPStartXfer+0x246>
 800533c:	463b      	mov	r3, r7
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	785b      	ldrb	r3, [r3, #1]
 8005342:	2b01      	cmp	r3, #1
 8005344:	d116      	bne.n	8005374 <USB_EPStartXfer+0x246>
 8005346:	1d3b      	adds	r3, r7, #4
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800534e:	b29b      	uxth	r3, r3
 8005350:	461a      	mov	r2, r3
 8005352:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005354:	4413      	add	r3, r2
 8005356:	637b      	str	r3, [r7, #52]	; 0x34
 8005358:	463b      	mov	r3, r7
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	781b      	ldrb	r3, [r3, #0]
 800535e:	011a      	lsls	r2, r3, #4
 8005360:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005362:	4413      	add	r3, r2
 8005364:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005368:	633b      	str	r3, [r7, #48]	; 0x30
 800536a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800536e:	b29a      	uxth	r2, r3
 8005370:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005372:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8005374:	463b      	mov	r3, r7
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	895b      	ldrh	r3, [r3, #10]
 800537a:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800537e:	463b      	mov	r3, r7
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	6959      	ldr	r1, [r3, #20]
 8005384:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005388:	b29b      	uxth	r3, r3
 800538a:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 800538e:	1d38      	adds	r0, r7, #4
 8005390:	6800      	ldr	r0, [r0, #0]
 8005392:	f001 f91a 	bl	80065ca <USB_WritePMA>
            ep->xfer_buff += len;
 8005396:	463b      	mov	r3, r7
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	695a      	ldr	r2, [r3, #20]
 800539c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80053a0:	441a      	add	r2, r3
 80053a2:	463b      	mov	r3, r7
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80053a8:	463b      	mov	r3, r7
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	6a1a      	ldr	r2, [r3, #32]
 80053ae:	463b      	mov	r3, r7
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	691b      	ldr	r3, [r3, #16]
 80053b4:	429a      	cmp	r2, r3
 80053b6:	d909      	bls.n	80053cc <USB_EPStartXfer+0x29e>
            {
              ep->xfer_len_db -= len;
 80053b8:	463b      	mov	r3, r7
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	6a1a      	ldr	r2, [r3, #32]
 80053be:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80053c2:	1ad2      	subs	r2, r2, r3
 80053c4:	463b      	mov	r3, r7
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	621a      	str	r2, [r3, #32]
 80053ca:	e008      	b.n	80053de <USB_EPStartXfer+0x2b0>
            }
            else
            {
              len = ep->xfer_len_db;
 80053cc:	463b      	mov	r3, r7
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	6a1b      	ldr	r3, [r3, #32]
 80053d2:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
              ep->xfer_len_db = 0U;
 80053d6:	463b      	mov	r3, r7
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	2200      	movs	r2, #0
 80053dc:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80053de:	463b      	mov	r3, r7
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	785b      	ldrb	r3, [r3, #1]
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d164      	bne.n	80054b2 <USB_EPStartXfer+0x384>
 80053e8:	1d3b      	adds	r3, r7, #4
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	61fb      	str	r3, [r7, #28]
 80053ee:	1d3b      	adds	r3, r7, #4
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80053f6:	b29b      	uxth	r3, r3
 80053f8:	461a      	mov	r2, r3
 80053fa:	69fb      	ldr	r3, [r7, #28]
 80053fc:	4413      	add	r3, r2
 80053fe:	61fb      	str	r3, [r7, #28]
 8005400:	463b      	mov	r3, r7
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	781b      	ldrb	r3, [r3, #0]
 8005406:	011a      	lsls	r2, r3, #4
 8005408:	69fb      	ldr	r3, [r7, #28]
 800540a:	4413      	add	r3, r2
 800540c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005410:	61bb      	str	r3, [r7, #24]
 8005412:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005416:	2b00      	cmp	r3, #0
 8005418:	d112      	bne.n	8005440 <USB_EPStartXfer+0x312>
 800541a:	69bb      	ldr	r3, [r7, #24]
 800541c:	881b      	ldrh	r3, [r3, #0]
 800541e:	b29b      	uxth	r3, r3
 8005420:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005424:	b29a      	uxth	r2, r3
 8005426:	69bb      	ldr	r3, [r7, #24]
 8005428:	801a      	strh	r2, [r3, #0]
 800542a:	69bb      	ldr	r3, [r7, #24]
 800542c:	881b      	ldrh	r3, [r3, #0]
 800542e:	b29b      	uxth	r3, r3
 8005430:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005434:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005438:	b29a      	uxth	r2, r3
 800543a:	69bb      	ldr	r3, [r7, #24]
 800543c:	801a      	strh	r2, [r3, #0]
 800543e:	e057      	b.n	80054f0 <USB_EPStartXfer+0x3c2>
 8005440:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005444:	2b3e      	cmp	r3, #62	; 0x3e
 8005446:	d817      	bhi.n	8005478 <USB_EPStartXfer+0x34a>
 8005448:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800544c:	085b      	lsrs	r3, r3, #1
 800544e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005452:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005456:	f003 0301 	and.w	r3, r3, #1
 800545a:	2b00      	cmp	r3, #0
 800545c:	d004      	beq.n	8005468 <USB_EPStartXfer+0x33a>
 800545e:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005462:	3301      	adds	r3, #1
 8005464:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005468:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800546c:	b29b      	uxth	r3, r3
 800546e:	029b      	lsls	r3, r3, #10
 8005470:	b29a      	uxth	r2, r3
 8005472:	69bb      	ldr	r3, [r7, #24]
 8005474:	801a      	strh	r2, [r3, #0]
 8005476:	e03b      	b.n	80054f0 <USB_EPStartXfer+0x3c2>
 8005478:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800547c:	095b      	lsrs	r3, r3, #5
 800547e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005482:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005486:	f003 031f 	and.w	r3, r3, #31
 800548a:	2b00      	cmp	r3, #0
 800548c:	d104      	bne.n	8005498 <USB_EPStartXfer+0x36a>
 800548e:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005492:	3b01      	subs	r3, #1
 8005494:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005498:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800549c:	b29b      	uxth	r3, r3
 800549e:	029b      	lsls	r3, r3, #10
 80054a0:	b29b      	uxth	r3, r3
 80054a2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80054a6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80054aa:	b29a      	uxth	r2, r3
 80054ac:	69bb      	ldr	r3, [r7, #24]
 80054ae:	801a      	strh	r2, [r3, #0]
 80054b0:	e01e      	b.n	80054f0 <USB_EPStartXfer+0x3c2>
 80054b2:	463b      	mov	r3, r7
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	785b      	ldrb	r3, [r3, #1]
 80054b8:	2b01      	cmp	r3, #1
 80054ba:	d119      	bne.n	80054f0 <USB_EPStartXfer+0x3c2>
 80054bc:	1d3b      	adds	r3, r7, #4
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	627b      	str	r3, [r7, #36]	; 0x24
 80054c2:	1d3b      	adds	r3, r7, #4
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80054ca:	b29b      	uxth	r3, r3
 80054cc:	461a      	mov	r2, r3
 80054ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054d0:	4413      	add	r3, r2
 80054d2:	627b      	str	r3, [r7, #36]	; 0x24
 80054d4:	463b      	mov	r3, r7
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	781b      	ldrb	r3, [r3, #0]
 80054da:	011a      	lsls	r2, r3, #4
 80054dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054de:	4413      	add	r3, r2
 80054e0:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80054e4:	623b      	str	r3, [r7, #32]
 80054e6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80054ea:	b29a      	uxth	r2, r3
 80054ec:	6a3b      	ldr	r3, [r7, #32]
 80054ee:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80054f0:	463b      	mov	r3, r7
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	891b      	ldrh	r3, [r3, #8]
 80054f6:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80054fa:	463b      	mov	r3, r7
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	6959      	ldr	r1, [r3, #20]
 8005500:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005504:	b29b      	uxth	r3, r3
 8005506:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 800550a:	1d38      	adds	r0, r7, #4
 800550c:	6800      	ldr	r0, [r0, #0]
 800550e:	f001 f85c 	bl	80065ca <USB_WritePMA>
 8005512:	e33b      	b.n	8005b8c <USB_EPStartXfer+0xa5e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005514:	463b      	mov	r3, r7
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	785b      	ldrb	r3, [r3, #1]
 800551a:	2b00      	cmp	r3, #0
 800551c:	d164      	bne.n	80055e8 <USB_EPStartXfer+0x4ba>
 800551e:	1d3b      	adds	r3, r7, #4
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005524:	1d3b      	adds	r3, r7, #4
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800552c:	b29b      	uxth	r3, r3
 800552e:	461a      	mov	r2, r3
 8005530:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005532:	4413      	add	r3, r2
 8005534:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005536:	463b      	mov	r3, r7
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	781b      	ldrb	r3, [r3, #0]
 800553c:	011a      	lsls	r2, r3, #4
 800553e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005540:	4413      	add	r3, r2
 8005542:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005546:	64bb      	str	r3, [r7, #72]	; 0x48
 8005548:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800554c:	2b00      	cmp	r3, #0
 800554e:	d112      	bne.n	8005576 <USB_EPStartXfer+0x448>
 8005550:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005552:	881b      	ldrh	r3, [r3, #0]
 8005554:	b29b      	uxth	r3, r3
 8005556:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800555a:	b29a      	uxth	r2, r3
 800555c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800555e:	801a      	strh	r2, [r3, #0]
 8005560:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005562:	881b      	ldrh	r3, [r3, #0]
 8005564:	b29b      	uxth	r3, r3
 8005566:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800556a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800556e:	b29a      	uxth	r2, r3
 8005570:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005572:	801a      	strh	r2, [r3, #0]
 8005574:	e057      	b.n	8005626 <USB_EPStartXfer+0x4f8>
 8005576:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800557a:	2b3e      	cmp	r3, #62	; 0x3e
 800557c:	d817      	bhi.n	80055ae <USB_EPStartXfer+0x480>
 800557e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005582:	085b      	lsrs	r3, r3, #1
 8005584:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005588:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800558c:	f003 0301 	and.w	r3, r3, #1
 8005590:	2b00      	cmp	r3, #0
 8005592:	d004      	beq.n	800559e <USB_EPStartXfer+0x470>
 8005594:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005598:	3301      	adds	r3, #1
 800559a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800559e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80055a2:	b29b      	uxth	r3, r3
 80055a4:	029b      	lsls	r3, r3, #10
 80055a6:	b29a      	uxth	r2, r3
 80055a8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80055aa:	801a      	strh	r2, [r3, #0]
 80055ac:	e03b      	b.n	8005626 <USB_EPStartXfer+0x4f8>
 80055ae:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80055b2:	095b      	lsrs	r3, r3, #5
 80055b4:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80055b8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80055bc:	f003 031f 	and.w	r3, r3, #31
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d104      	bne.n	80055ce <USB_EPStartXfer+0x4a0>
 80055c4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80055c8:	3b01      	subs	r3, #1
 80055ca:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80055ce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80055d2:	b29b      	uxth	r3, r3
 80055d4:	029b      	lsls	r3, r3, #10
 80055d6:	b29b      	uxth	r3, r3
 80055d8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80055dc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80055e0:	b29a      	uxth	r2, r3
 80055e2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80055e4:	801a      	strh	r2, [r3, #0]
 80055e6:	e01e      	b.n	8005626 <USB_EPStartXfer+0x4f8>
 80055e8:	463b      	mov	r3, r7
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	785b      	ldrb	r3, [r3, #1]
 80055ee:	2b01      	cmp	r3, #1
 80055f0:	d119      	bne.n	8005626 <USB_EPStartXfer+0x4f8>
 80055f2:	1d3b      	adds	r3, r7, #4
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	657b      	str	r3, [r7, #84]	; 0x54
 80055f8:	1d3b      	adds	r3, r7, #4
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005600:	b29b      	uxth	r3, r3
 8005602:	461a      	mov	r2, r3
 8005604:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005606:	4413      	add	r3, r2
 8005608:	657b      	str	r3, [r7, #84]	; 0x54
 800560a:	463b      	mov	r3, r7
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	781b      	ldrb	r3, [r3, #0]
 8005610:	011a      	lsls	r2, r3, #4
 8005612:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005614:	4413      	add	r3, r2
 8005616:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800561a:	653b      	str	r3, [r7, #80]	; 0x50
 800561c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005620:	b29a      	uxth	r2, r3
 8005622:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005624:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8005626:	463b      	mov	r3, r7
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	891b      	ldrh	r3, [r3, #8]
 800562c:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005630:	463b      	mov	r3, r7
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	6959      	ldr	r1, [r3, #20]
 8005636:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800563a:	b29b      	uxth	r3, r3
 800563c:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8005640:	1d38      	adds	r0, r7, #4
 8005642:	6800      	ldr	r0, [r0, #0]
 8005644:	f000 ffc1 	bl	80065ca <USB_WritePMA>
            ep->xfer_buff += len;
 8005648:	463b      	mov	r3, r7
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	695a      	ldr	r2, [r3, #20]
 800564e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005652:	441a      	add	r2, r3
 8005654:	463b      	mov	r3, r7
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800565a:	463b      	mov	r3, r7
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	6a1a      	ldr	r2, [r3, #32]
 8005660:	463b      	mov	r3, r7
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	691b      	ldr	r3, [r3, #16]
 8005666:	429a      	cmp	r2, r3
 8005668:	d909      	bls.n	800567e <USB_EPStartXfer+0x550>
            {
              ep->xfer_len_db -= len;
 800566a:	463b      	mov	r3, r7
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	6a1a      	ldr	r2, [r3, #32]
 8005670:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005674:	1ad2      	subs	r2, r2, r3
 8005676:	463b      	mov	r3, r7
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	621a      	str	r2, [r3, #32]
 800567c:	e008      	b.n	8005690 <USB_EPStartXfer+0x562>
            }
            else
            {
              len = ep->xfer_len_db;
 800567e:	463b      	mov	r3, r7
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	6a1b      	ldr	r3, [r3, #32]
 8005684:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
              ep->xfer_len_db = 0U;
 8005688:	463b      	mov	r3, r7
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	2200      	movs	r2, #0
 800568e:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005690:	1d3b      	adds	r3, r7, #4
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	647b      	str	r3, [r7, #68]	; 0x44
 8005696:	463b      	mov	r3, r7
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	785b      	ldrb	r3, [r3, #1]
 800569c:	2b00      	cmp	r3, #0
 800569e:	d164      	bne.n	800576a <USB_EPStartXfer+0x63c>
 80056a0:	1d3b      	adds	r3, r7, #4
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80056a6:	1d3b      	adds	r3, r7, #4
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80056ae:	b29b      	uxth	r3, r3
 80056b0:	461a      	mov	r2, r3
 80056b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80056b4:	4413      	add	r3, r2
 80056b6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80056b8:	463b      	mov	r3, r7
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	781b      	ldrb	r3, [r3, #0]
 80056be:	011a      	lsls	r2, r3, #4
 80056c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80056c2:	4413      	add	r3, r2
 80056c4:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80056c8:	63bb      	str	r3, [r7, #56]	; 0x38
 80056ca:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d112      	bne.n	80056f8 <USB_EPStartXfer+0x5ca>
 80056d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056d4:	881b      	ldrh	r3, [r3, #0]
 80056d6:	b29b      	uxth	r3, r3
 80056d8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80056dc:	b29a      	uxth	r2, r3
 80056de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056e0:	801a      	strh	r2, [r3, #0]
 80056e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056e4:	881b      	ldrh	r3, [r3, #0]
 80056e6:	b29b      	uxth	r3, r3
 80056e8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80056ec:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80056f0:	b29a      	uxth	r2, r3
 80056f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056f4:	801a      	strh	r2, [r3, #0]
 80056f6:	e054      	b.n	80057a2 <USB_EPStartXfer+0x674>
 80056f8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80056fc:	2b3e      	cmp	r3, #62	; 0x3e
 80056fe:	d817      	bhi.n	8005730 <USB_EPStartXfer+0x602>
 8005700:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005704:	085b      	lsrs	r3, r3, #1
 8005706:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800570a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800570e:	f003 0301 	and.w	r3, r3, #1
 8005712:	2b00      	cmp	r3, #0
 8005714:	d004      	beq.n	8005720 <USB_EPStartXfer+0x5f2>
 8005716:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800571a:	3301      	adds	r3, #1
 800571c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8005720:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005724:	b29b      	uxth	r3, r3
 8005726:	029b      	lsls	r3, r3, #10
 8005728:	b29a      	uxth	r2, r3
 800572a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800572c:	801a      	strh	r2, [r3, #0]
 800572e:	e038      	b.n	80057a2 <USB_EPStartXfer+0x674>
 8005730:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005734:	095b      	lsrs	r3, r3, #5
 8005736:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800573a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800573e:	f003 031f 	and.w	r3, r3, #31
 8005742:	2b00      	cmp	r3, #0
 8005744:	d104      	bne.n	8005750 <USB_EPStartXfer+0x622>
 8005746:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800574a:	3b01      	subs	r3, #1
 800574c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8005750:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005754:	b29b      	uxth	r3, r3
 8005756:	029b      	lsls	r3, r3, #10
 8005758:	b29b      	uxth	r3, r3
 800575a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800575e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005762:	b29a      	uxth	r2, r3
 8005764:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005766:	801a      	strh	r2, [r3, #0]
 8005768:	e01b      	b.n	80057a2 <USB_EPStartXfer+0x674>
 800576a:	463b      	mov	r3, r7
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	785b      	ldrb	r3, [r3, #1]
 8005770:	2b01      	cmp	r3, #1
 8005772:	d116      	bne.n	80057a2 <USB_EPStartXfer+0x674>
 8005774:	1d3b      	adds	r3, r7, #4
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800577c:	b29b      	uxth	r3, r3
 800577e:	461a      	mov	r2, r3
 8005780:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005782:	4413      	add	r3, r2
 8005784:	647b      	str	r3, [r7, #68]	; 0x44
 8005786:	463b      	mov	r3, r7
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	781b      	ldrb	r3, [r3, #0]
 800578c:	011a      	lsls	r2, r3, #4
 800578e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005790:	4413      	add	r3, r2
 8005792:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005796:	643b      	str	r3, [r7, #64]	; 0x40
 8005798:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800579c:	b29a      	uxth	r2, r3
 800579e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80057a0:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80057a2:	463b      	mov	r3, r7
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	895b      	ldrh	r3, [r3, #10]
 80057a8:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80057ac:	463b      	mov	r3, r7
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	6959      	ldr	r1, [r3, #20]
 80057b2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80057b6:	b29b      	uxth	r3, r3
 80057b8:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 80057bc:	1d38      	adds	r0, r7, #4
 80057be:	6800      	ldr	r0, [r0, #0]
 80057c0:	f000 ff03 	bl	80065ca <USB_WritePMA>
 80057c4:	e1e2      	b.n	8005b8c <USB_EPStartXfer+0xa5e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 80057c6:	463b      	mov	r3, r7
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	6a1b      	ldr	r3, [r3, #32]
 80057cc:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c

          /* disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 80057d0:	1d3b      	adds	r3, r7, #4
 80057d2:	681a      	ldr	r2, [r3, #0]
 80057d4:	463b      	mov	r3, r7
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	781b      	ldrb	r3, [r3, #0]
 80057da:	009b      	lsls	r3, r3, #2
 80057dc:	4413      	add	r3, r2
 80057de:	881b      	ldrh	r3, [r3, #0]
 80057e0:	b29b      	uxth	r3, r3
 80057e2:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 80057e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80057ea:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 80057ee:	1d3b      	adds	r3, r7, #4
 80057f0:	681a      	ldr	r2, [r3, #0]
 80057f2:	463b      	mov	r3, r7
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	781b      	ldrb	r3, [r3, #0]
 80057f8:	009b      	lsls	r3, r3, #2
 80057fa:	441a      	add	r2, r3
 80057fc:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8005800:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005804:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005808:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800580c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005810:	b29b      	uxth	r3, r3
 8005812:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8005814:	1d3b      	adds	r3, r7, #4
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	663b      	str	r3, [r7, #96]	; 0x60
 800581a:	1d3b      	adds	r3, r7, #4
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005822:	b29b      	uxth	r3, r3
 8005824:	461a      	mov	r2, r3
 8005826:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005828:	4413      	add	r3, r2
 800582a:	663b      	str	r3, [r7, #96]	; 0x60
 800582c:	463b      	mov	r3, r7
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	781b      	ldrb	r3, [r3, #0]
 8005832:	011a      	lsls	r2, r3, #4
 8005834:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005836:	4413      	add	r3, r2
 8005838:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800583c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800583e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005842:	b29a      	uxth	r2, r3
 8005844:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005846:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8005848:	463b      	mov	r3, r7
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	891b      	ldrh	r3, [r3, #8]
 800584e:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005852:	463b      	mov	r3, r7
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	6959      	ldr	r1, [r3, #20]
 8005858:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800585c:	b29b      	uxth	r3, r3
 800585e:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8005862:	1d38      	adds	r0, r7, #4
 8005864:	6800      	ldr	r0, [r0, #0]
 8005866:	f000 feb0 	bl	80065ca <USB_WritePMA>
 800586a:	e18f      	b.n	8005b8c <USB_EPStartXfer+0xa5e>

      /* manage isochronous double buffer IN mode */
      else
      {
        /* Write the data to the USB endpoint */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800586c:	1d3b      	adds	r3, r7, #4
 800586e:	681a      	ldr	r2, [r3, #0]
 8005870:	463b      	mov	r3, r7
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	781b      	ldrb	r3, [r3, #0]
 8005876:	009b      	lsls	r3, r3, #2
 8005878:	4413      	add	r3, r2
 800587a:	881b      	ldrh	r3, [r3, #0]
 800587c:	b29b      	uxth	r3, r3
 800587e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005882:	2b00      	cmp	r3, #0
 8005884:	f000 808f 	beq.w	80059a6 <USB_EPStartXfer+0x878>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005888:	1d3b      	adds	r3, r7, #4
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	67bb      	str	r3, [r7, #120]	; 0x78
 800588e:	463b      	mov	r3, r7
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	785b      	ldrb	r3, [r3, #1]
 8005894:	2b00      	cmp	r3, #0
 8005896:	d164      	bne.n	8005962 <USB_EPStartXfer+0x834>
 8005898:	1d3b      	adds	r3, r7, #4
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	673b      	str	r3, [r7, #112]	; 0x70
 800589e:	1d3b      	adds	r3, r7, #4
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80058a6:	b29b      	uxth	r3, r3
 80058a8:	461a      	mov	r2, r3
 80058aa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80058ac:	4413      	add	r3, r2
 80058ae:	673b      	str	r3, [r7, #112]	; 0x70
 80058b0:	463b      	mov	r3, r7
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	781b      	ldrb	r3, [r3, #0]
 80058b6:	011a      	lsls	r2, r3, #4
 80058b8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80058ba:	4413      	add	r3, r2
 80058bc:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80058c0:	66fb      	str	r3, [r7, #108]	; 0x6c
 80058c2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d112      	bne.n	80058f0 <USB_EPStartXfer+0x7c2>
 80058ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80058cc:	881b      	ldrh	r3, [r3, #0]
 80058ce:	b29b      	uxth	r3, r3
 80058d0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80058d4:	b29a      	uxth	r2, r3
 80058d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80058d8:	801a      	strh	r2, [r3, #0]
 80058da:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80058dc:	881b      	ldrh	r3, [r3, #0]
 80058de:	b29b      	uxth	r3, r3
 80058e0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80058e4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80058e8:	b29a      	uxth	r2, r3
 80058ea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80058ec:	801a      	strh	r2, [r3, #0]
 80058ee:	e054      	b.n	800599a <USB_EPStartXfer+0x86c>
 80058f0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80058f4:	2b3e      	cmp	r3, #62	; 0x3e
 80058f6:	d817      	bhi.n	8005928 <USB_EPStartXfer+0x7fa>
 80058f8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80058fc:	085b      	lsrs	r3, r3, #1
 80058fe:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8005902:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005906:	f003 0301 	and.w	r3, r3, #1
 800590a:	2b00      	cmp	r3, #0
 800590c:	d004      	beq.n	8005918 <USB_EPStartXfer+0x7ea>
 800590e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005912:	3301      	adds	r3, #1
 8005914:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8005918:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800591c:	b29b      	uxth	r3, r3
 800591e:	029b      	lsls	r3, r3, #10
 8005920:	b29a      	uxth	r2, r3
 8005922:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005924:	801a      	strh	r2, [r3, #0]
 8005926:	e038      	b.n	800599a <USB_EPStartXfer+0x86c>
 8005928:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800592c:	095b      	lsrs	r3, r3, #5
 800592e:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8005932:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005936:	f003 031f 	and.w	r3, r3, #31
 800593a:	2b00      	cmp	r3, #0
 800593c:	d104      	bne.n	8005948 <USB_EPStartXfer+0x81a>
 800593e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005942:	3b01      	subs	r3, #1
 8005944:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8005948:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800594c:	b29b      	uxth	r3, r3
 800594e:	029b      	lsls	r3, r3, #10
 8005950:	b29b      	uxth	r3, r3
 8005952:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005956:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800595a:	b29a      	uxth	r2, r3
 800595c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800595e:	801a      	strh	r2, [r3, #0]
 8005960:	e01b      	b.n	800599a <USB_EPStartXfer+0x86c>
 8005962:	463b      	mov	r3, r7
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	785b      	ldrb	r3, [r3, #1]
 8005968:	2b01      	cmp	r3, #1
 800596a:	d116      	bne.n	800599a <USB_EPStartXfer+0x86c>
 800596c:	1d3b      	adds	r3, r7, #4
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005974:	b29b      	uxth	r3, r3
 8005976:	461a      	mov	r2, r3
 8005978:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800597a:	4413      	add	r3, r2
 800597c:	67bb      	str	r3, [r7, #120]	; 0x78
 800597e:	463b      	mov	r3, r7
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	781b      	ldrb	r3, [r3, #0]
 8005984:	011a      	lsls	r2, r3, #4
 8005986:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005988:	4413      	add	r3, r2
 800598a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800598e:	677b      	str	r3, [r7, #116]	; 0x74
 8005990:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005994:	b29a      	uxth	r2, r3
 8005996:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005998:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 800599a:	463b      	mov	r3, r7
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	895b      	ldrh	r3, [r3, #10]
 80059a0:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a
 80059a4:	e097      	b.n	8005ad6 <USB_EPStartXfer+0x9a8>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80059a6:	463b      	mov	r3, r7
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	785b      	ldrb	r3, [r3, #1]
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d168      	bne.n	8005a82 <USB_EPStartXfer+0x954>
 80059b0:	1d3b      	adds	r3, r7, #4
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80059b8:	1d3b      	adds	r3, r7, #4
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80059c0:	b29b      	uxth	r3, r3
 80059c2:	461a      	mov	r2, r3
 80059c4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80059c8:	4413      	add	r3, r2
 80059ca:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80059ce:	463b      	mov	r3, r7
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	781b      	ldrb	r3, [r3, #0]
 80059d4:	011a      	lsls	r2, r3, #4
 80059d6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80059da:	4413      	add	r3, r2
 80059dc:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80059e0:	67fb      	str	r3, [r7, #124]	; 0x7c
 80059e2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d112      	bne.n	8005a10 <USB_EPStartXfer+0x8e2>
 80059ea:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80059ec:	881b      	ldrh	r3, [r3, #0]
 80059ee:	b29b      	uxth	r3, r3
 80059f0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80059f4:	b29a      	uxth	r2, r3
 80059f6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80059f8:	801a      	strh	r2, [r3, #0]
 80059fa:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80059fc:	881b      	ldrh	r3, [r3, #0]
 80059fe:	b29b      	uxth	r3, r3
 8005a00:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005a04:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005a08:	b29a      	uxth	r2, r3
 8005a0a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005a0c:	801a      	strh	r2, [r3, #0]
 8005a0e:	e05d      	b.n	8005acc <USB_EPStartXfer+0x99e>
 8005a10:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005a14:	2b3e      	cmp	r3, #62	; 0x3e
 8005a16:	d817      	bhi.n	8005a48 <USB_EPStartXfer+0x91a>
 8005a18:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005a1c:	085b      	lsrs	r3, r3, #1
 8005a1e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8005a22:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005a26:	f003 0301 	and.w	r3, r3, #1
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d004      	beq.n	8005a38 <USB_EPStartXfer+0x90a>
 8005a2e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8005a32:	3301      	adds	r3, #1
 8005a34:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8005a38:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8005a3c:	b29b      	uxth	r3, r3
 8005a3e:	029b      	lsls	r3, r3, #10
 8005a40:	b29a      	uxth	r2, r3
 8005a42:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005a44:	801a      	strh	r2, [r3, #0]
 8005a46:	e041      	b.n	8005acc <USB_EPStartXfer+0x99e>
 8005a48:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005a4c:	095b      	lsrs	r3, r3, #5
 8005a4e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8005a52:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005a56:	f003 031f 	and.w	r3, r3, #31
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d104      	bne.n	8005a68 <USB_EPStartXfer+0x93a>
 8005a5e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8005a62:	3b01      	subs	r3, #1
 8005a64:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8005a68:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8005a6c:	b29b      	uxth	r3, r3
 8005a6e:	029b      	lsls	r3, r3, #10
 8005a70:	b29b      	uxth	r3, r3
 8005a72:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005a76:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005a7a:	b29a      	uxth	r2, r3
 8005a7c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005a7e:	801a      	strh	r2, [r3, #0]
 8005a80:	e024      	b.n	8005acc <USB_EPStartXfer+0x99e>
 8005a82:	463b      	mov	r3, r7
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	785b      	ldrb	r3, [r3, #1]
 8005a88:	2b01      	cmp	r3, #1
 8005a8a:	d11f      	bne.n	8005acc <USB_EPStartXfer+0x99e>
 8005a8c:	1d3b      	adds	r3, r7, #4
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005a94:	1d3b      	adds	r3, r7, #4
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005a9c:	b29b      	uxth	r3, r3
 8005a9e:	461a      	mov	r2, r3
 8005aa0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005aa4:	4413      	add	r3, r2
 8005aa6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005aaa:	463b      	mov	r3, r7
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	781b      	ldrb	r3, [r3, #0]
 8005ab0:	011a      	lsls	r2, r3, #4
 8005ab2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005ab6:	4413      	add	r3, r2
 8005ab8:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005abc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005ac0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005ac4:	b29a      	uxth	r2, r3
 8005ac6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005aca:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8005acc:	463b      	mov	r3, r7
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	891b      	ldrh	r3, [r3, #8]
 8005ad2:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a
        }

        USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005ad6:	463b      	mov	r3, r7
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	6959      	ldr	r1, [r3, #20]
 8005adc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005ae0:	b29b      	uxth	r3, r3
 8005ae2:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8005ae6:	1d38      	adds	r0, r7, #4
 8005ae8:	6800      	ldr	r0, [r0, #0]
 8005aea:	f000 fd6e 	bl	80065ca <USB_WritePMA>
        PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 8005aee:	463b      	mov	r3, r7
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	785b      	ldrb	r3, [r3, #1]
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d122      	bne.n	8005b3e <USB_EPStartXfer+0xa10>
 8005af8:	1d3b      	adds	r3, r7, #4
 8005afa:	681a      	ldr	r2, [r3, #0]
 8005afc:	463b      	mov	r3, r7
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	781b      	ldrb	r3, [r3, #0]
 8005b02:	009b      	lsls	r3, r3, #2
 8005b04:	4413      	add	r3, r2
 8005b06:	881b      	ldrh	r3, [r3, #0]
 8005b08:	b29b      	uxth	r3, r3
 8005b0a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005b0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b12:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
 8005b16:	1d3b      	adds	r3, r7, #4
 8005b18:	681a      	ldr	r2, [r3, #0]
 8005b1a:	463b      	mov	r3, r7
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	781b      	ldrb	r3, [r3, #0]
 8005b20:	009b      	lsls	r3, r3, #2
 8005b22:	441a      	add	r2, r3
 8005b24:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 8005b28:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005b2c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005b30:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005b34:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005b38:	b29b      	uxth	r3, r3
 8005b3a:	8013      	strh	r3, [r2, #0]
 8005b3c:	e026      	b.n	8005b8c <USB_EPStartXfer+0xa5e>
 8005b3e:	463b      	mov	r3, r7
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	785b      	ldrb	r3, [r3, #1]
 8005b44:	2b01      	cmp	r3, #1
 8005b46:	d121      	bne.n	8005b8c <USB_EPStartXfer+0xa5e>
 8005b48:	1d3b      	adds	r3, r7, #4
 8005b4a:	681a      	ldr	r2, [r3, #0]
 8005b4c:	463b      	mov	r3, r7
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	781b      	ldrb	r3, [r3, #0]
 8005b52:	009b      	lsls	r3, r3, #2
 8005b54:	4413      	add	r3, r2
 8005b56:	881b      	ldrh	r3, [r3, #0]
 8005b58:	b29b      	uxth	r3, r3
 8005b5a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005b5e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b62:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
 8005b66:	1d3b      	adds	r3, r7, #4
 8005b68:	681a      	ldr	r2, [r3, #0]
 8005b6a:	463b      	mov	r3, r7
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	781b      	ldrb	r3, [r3, #0]
 8005b70:	009b      	lsls	r3, r3, #2
 8005b72:	441a      	add	r2, r3
 8005b74:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
 8005b78:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005b7c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005b80:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005b84:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005b88:	b29b      	uxth	r3, r3
 8005b8a:	8013      	strh	r3, [r2, #0]
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8005b8c:	1d3b      	adds	r3, r7, #4
 8005b8e:	681a      	ldr	r2, [r3, #0]
 8005b90:	463b      	mov	r3, r7
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	781b      	ldrb	r3, [r3, #0]
 8005b96:	009b      	lsls	r3, r3, #2
 8005b98:	4413      	add	r3, r2
 8005b9a:	881b      	ldrh	r3, [r3, #0]
 8005b9c:	b29b      	uxth	r3, r3
 8005b9e:	f107 020e 	add.w	r2, r7, #14
 8005ba2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005ba6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005baa:	8013      	strh	r3, [r2, #0]
 8005bac:	f107 030e 	add.w	r3, r7, #14
 8005bb0:	f107 020e 	add.w	r2, r7, #14
 8005bb4:	8812      	ldrh	r2, [r2, #0]
 8005bb6:	f082 0210 	eor.w	r2, r2, #16
 8005bba:	801a      	strh	r2, [r3, #0]
 8005bbc:	f107 030e 	add.w	r3, r7, #14
 8005bc0:	f107 020e 	add.w	r2, r7, #14
 8005bc4:	8812      	ldrh	r2, [r2, #0]
 8005bc6:	f082 0220 	eor.w	r2, r2, #32
 8005bca:	801a      	strh	r2, [r3, #0]
 8005bcc:	1d3b      	adds	r3, r7, #4
 8005bce:	681a      	ldr	r2, [r3, #0]
 8005bd0:	463b      	mov	r3, r7
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	781b      	ldrb	r3, [r3, #0]
 8005bd6:	009b      	lsls	r3, r3, #2
 8005bd8:	441a      	add	r2, r3
 8005bda:	f107 030e 	add.w	r3, r7, #14
 8005bde:	881b      	ldrh	r3, [r3, #0]
 8005be0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005be4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005be8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005bec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005bf0:	b29b      	uxth	r3, r3
 8005bf2:	8013      	strh	r3, [r2, #0]
 8005bf4:	e3b5      	b.n	8006362 <USB_EPStartXfer+0x1234>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8005bf6:	463b      	mov	r3, r7
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	7b1b      	ldrb	r3, [r3, #12]
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	f040 8090 	bne.w	8005d22 <USB_EPStartXfer+0xbf4>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8005c02:	463b      	mov	r3, r7
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	699a      	ldr	r2, [r3, #24]
 8005c08:	463b      	mov	r3, r7
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	691b      	ldr	r3, [r3, #16]
 8005c0e:	429a      	cmp	r2, r3
 8005c10:	d90e      	bls.n	8005c30 <USB_EPStartXfer+0xb02>
      {
        len = ep->maxpacket;
 8005c12:	463b      	mov	r3, r7
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	691b      	ldr	r3, [r3, #16]
 8005c18:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        ep->xfer_len -= len;
 8005c1c:	463b      	mov	r3, r7
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	699a      	ldr	r2, [r3, #24]
 8005c22:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005c26:	1ad2      	subs	r2, r2, r3
 8005c28:	463b      	mov	r3, r7
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	619a      	str	r2, [r3, #24]
 8005c2e:	e008      	b.n	8005c42 <USB_EPStartXfer+0xb14>
      }
      else
      {
        len = ep->xfer_len;
 8005c30:	463b      	mov	r3, r7
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	699b      	ldr	r3, [r3, #24]
 8005c36:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        ep->xfer_len = 0U;
 8005c3a:	463b      	mov	r3, r7
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	2200      	movs	r2, #0
 8005c40:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8005c42:	1d3b      	adds	r3, r7, #4
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8005c4a:	1d3b      	adds	r3, r7, #4
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005c52:	b29b      	uxth	r3, r3
 8005c54:	461a      	mov	r2, r3
 8005c56:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8005c5a:	4413      	add	r3, r2
 8005c5c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8005c60:	463b      	mov	r3, r7
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	781b      	ldrb	r3, [r3, #0]
 8005c66:	011a      	lsls	r2, r3, #4
 8005c68:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8005c6c:	4413      	add	r3, r2
 8005c6e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005c72:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005c76:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d116      	bne.n	8005cac <USB_EPStartXfer+0xb7e>
 8005c7e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005c82:	881b      	ldrh	r3, [r3, #0]
 8005c84:	b29b      	uxth	r3, r3
 8005c86:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005c8a:	b29a      	uxth	r2, r3
 8005c8c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005c90:	801a      	strh	r2, [r3, #0]
 8005c92:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005c96:	881b      	ldrh	r3, [r3, #0]
 8005c98:	b29b      	uxth	r3, r3
 8005c9a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005c9e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005ca2:	b29a      	uxth	r2, r3
 8005ca4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005ca8:	801a      	strh	r2, [r3, #0]
 8005caa:	e32c      	b.n	8006306 <USB_EPStartXfer+0x11d8>
 8005cac:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005cb0:	2b3e      	cmp	r3, #62	; 0x3e
 8005cb2:	d818      	bhi.n	8005ce6 <USB_EPStartXfer+0xbb8>
 8005cb4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005cb8:	085b      	lsrs	r3, r3, #1
 8005cba:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8005cbe:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005cc2:	f003 0301 	and.w	r3, r3, #1
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d004      	beq.n	8005cd4 <USB_EPStartXfer+0xba6>
 8005cca:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8005cce:	3301      	adds	r3, #1
 8005cd0:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8005cd4:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8005cd8:	b29b      	uxth	r3, r3
 8005cda:	029b      	lsls	r3, r3, #10
 8005cdc:	b29a      	uxth	r2, r3
 8005cde:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005ce2:	801a      	strh	r2, [r3, #0]
 8005ce4:	e30f      	b.n	8006306 <USB_EPStartXfer+0x11d8>
 8005ce6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005cea:	095b      	lsrs	r3, r3, #5
 8005cec:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8005cf0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005cf4:	f003 031f 	and.w	r3, r3, #31
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d104      	bne.n	8005d06 <USB_EPStartXfer+0xbd8>
 8005cfc:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8005d00:	3b01      	subs	r3, #1
 8005d02:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8005d06:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8005d0a:	b29b      	uxth	r3, r3
 8005d0c:	029b      	lsls	r3, r3, #10
 8005d0e:	b29b      	uxth	r3, r3
 8005d10:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005d14:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005d18:	b29a      	uxth	r2, r3
 8005d1a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005d1e:	801a      	strh	r2, [r3, #0]
 8005d20:	e2f1      	b.n	8006306 <USB_EPStartXfer+0x11d8>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8005d22:	463b      	mov	r3, r7
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	78db      	ldrb	r3, [r3, #3]
 8005d28:	2b02      	cmp	r3, #2
 8005d2a:	f040 818f 	bne.w	800604c <USB_EPStartXfer+0xf1e>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8005d2e:	463b      	mov	r3, r7
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	785b      	ldrb	r3, [r3, #1]
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d175      	bne.n	8005e24 <USB_EPStartXfer+0xcf6>
 8005d38:	1d3b      	adds	r3, r7, #4
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005d40:	1d3b      	adds	r3, r7, #4
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005d48:	b29b      	uxth	r3, r3
 8005d4a:	461a      	mov	r2, r3
 8005d4c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8005d50:	4413      	add	r3, r2
 8005d52:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005d56:	463b      	mov	r3, r7
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	781b      	ldrb	r3, [r3, #0]
 8005d5c:	011a      	lsls	r2, r3, #4
 8005d5e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8005d62:	4413      	add	r3, r2
 8005d64:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005d68:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005d6c:	463b      	mov	r3, r7
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	691b      	ldr	r3, [r3, #16]
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d116      	bne.n	8005da4 <USB_EPStartXfer+0xc76>
 8005d76:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005d7a:	881b      	ldrh	r3, [r3, #0]
 8005d7c:	b29b      	uxth	r3, r3
 8005d7e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005d82:	b29a      	uxth	r2, r3
 8005d84:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005d88:	801a      	strh	r2, [r3, #0]
 8005d8a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005d8e:	881b      	ldrh	r3, [r3, #0]
 8005d90:	b29b      	uxth	r3, r3
 8005d92:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005d96:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005d9a:	b29a      	uxth	r2, r3
 8005d9c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005da0:	801a      	strh	r2, [r3, #0]
 8005da2:	e065      	b.n	8005e70 <USB_EPStartXfer+0xd42>
 8005da4:	463b      	mov	r3, r7
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	691b      	ldr	r3, [r3, #16]
 8005daa:	2b3e      	cmp	r3, #62	; 0x3e
 8005dac:	d81a      	bhi.n	8005de4 <USB_EPStartXfer+0xcb6>
 8005dae:	463b      	mov	r3, r7
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	691b      	ldr	r3, [r3, #16]
 8005db4:	085b      	lsrs	r3, r3, #1
 8005db6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005dba:	463b      	mov	r3, r7
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	691b      	ldr	r3, [r3, #16]
 8005dc0:	f003 0301 	and.w	r3, r3, #1
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d004      	beq.n	8005dd2 <USB_EPStartXfer+0xca4>
 8005dc8:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005dcc:	3301      	adds	r3, #1
 8005dce:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005dd2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005dd6:	b29b      	uxth	r3, r3
 8005dd8:	029b      	lsls	r3, r3, #10
 8005dda:	b29a      	uxth	r2, r3
 8005ddc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005de0:	801a      	strh	r2, [r3, #0]
 8005de2:	e045      	b.n	8005e70 <USB_EPStartXfer+0xd42>
 8005de4:	463b      	mov	r3, r7
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	691b      	ldr	r3, [r3, #16]
 8005dea:	095b      	lsrs	r3, r3, #5
 8005dec:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005df0:	463b      	mov	r3, r7
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	691b      	ldr	r3, [r3, #16]
 8005df6:	f003 031f 	and.w	r3, r3, #31
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d104      	bne.n	8005e08 <USB_EPStartXfer+0xcda>
 8005dfe:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005e02:	3b01      	subs	r3, #1
 8005e04:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005e08:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005e0c:	b29b      	uxth	r3, r3
 8005e0e:	029b      	lsls	r3, r3, #10
 8005e10:	b29b      	uxth	r3, r3
 8005e12:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005e16:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005e1a:	b29a      	uxth	r2, r3
 8005e1c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005e20:	801a      	strh	r2, [r3, #0]
 8005e22:	e025      	b.n	8005e70 <USB_EPStartXfer+0xd42>
 8005e24:	463b      	mov	r3, r7
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	785b      	ldrb	r3, [r3, #1]
 8005e2a:	2b01      	cmp	r3, #1
 8005e2c:	d120      	bne.n	8005e70 <USB_EPStartXfer+0xd42>
 8005e2e:	1d3b      	adds	r3, r7, #4
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005e36:	1d3b      	adds	r3, r7, #4
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005e3e:	b29b      	uxth	r3, r3
 8005e40:	461a      	mov	r2, r3
 8005e42:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005e46:	4413      	add	r3, r2
 8005e48:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005e4c:	463b      	mov	r3, r7
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	781b      	ldrb	r3, [r3, #0]
 8005e52:	011a      	lsls	r2, r3, #4
 8005e54:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005e58:	4413      	add	r3, r2
 8005e5a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005e5e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005e62:	463b      	mov	r3, r7
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	691b      	ldr	r3, [r3, #16]
 8005e68:	b29a      	uxth	r2, r3
 8005e6a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8005e6e:	801a      	strh	r2, [r3, #0]
 8005e70:	1d3b      	adds	r3, r7, #4
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005e78:	463b      	mov	r3, r7
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	785b      	ldrb	r3, [r3, #1]
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d175      	bne.n	8005f6e <USB_EPStartXfer+0xe40>
 8005e82:	1d3b      	adds	r3, r7, #4
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005e8a:	1d3b      	adds	r3, r7, #4
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005e92:	b29b      	uxth	r3, r3
 8005e94:	461a      	mov	r2, r3
 8005e96:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005e9a:	4413      	add	r3, r2
 8005e9c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005ea0:	463b      	mov	r3, r7
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	781b      	ldrb	r3, [r3, #0]
 8005ea6:	011a      	lsls	r2, r3, #4
 8005ea8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005eac:	4413      	add	r3, r2
 8005eae:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005eb2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005eb6:	463b      	mov	r3, r7
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	691b      	ldr	r3, [r3, #16]
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d116      	bne.n	8005eee <USB_EPStartXfer+0xdc0>
 8005ec0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005ec4:	881b      	ldrh	r3, [r3, #0]
 8005ec6:	b29b      	uxth	r3, r3
 8005ec8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005ecc:	b29a      	uxth	r2, r3
 8005ece:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005ed2:	801a      	strh	r2, [r3, #0]
 8005ed4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005ed8:	881b      	ldrh	r3, [r3, #0]
 8005eda:	b29b      	uxth	r3, r3
 8005edc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005ee0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005ee4:	b29a      	uxth	r2, r3
 8005ee6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005eea:	801a      	strh	r2, [r3, #0]
 8005eec:	e061      	b.n	8005fb2 <USB_EPStartXfer+0xe84>
 8005eee:	463b      	mov	r3, r7
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	691b      	ldr	r3, [r3, #16]
 8005ef4:	2b3e      	cmp	r3, #62	; 0x3e
 8005ef6:	d81a      	bhi.n	8005f2e <USB_EPStartXfer+0xe00>
 8005ef8:	463b      	mov	r3, r7
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	691b      	ldr	r3, [r3, #16]
 8005efe:	085b      	lsrs	r3, r3, #1
 8005f00:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005f04:	463b      	mov	r3, r7
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	691b      	ldr	r3, [r3, #16]
 8005f0a:	f003 0301 	and.w	r3, r3, #1
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d004      	beq.n	8005f1c <USB_EPStartXfer+0xdee>
 8005f12:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005f16:	3301      	adds	r3, #1
 8005f18:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005f1c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005f20:	b29b      	uxth	r3, r3
 8005f22:	029b      	lsls	r3, r3, #10
 8005f24:	b29a      	uxth	r2, r3
 8005f26:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005f2a:	801a      	strh	r2, [r3, #0]
 8005f2c:	e041      	b.n	8005fb2 <USB_EPStartXfer+0xe84>
 8005f2e:	463b      	mov	r3, r7
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	691b      	ldr	r3, [r3, #16]
 8005f34:	095b      	lsrs	r3, r3, #5
 8005f36:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005f3a:	463b      	mov	r3, r7
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	691b      	ldr	r3, [r3, #16]
 8005f40:	f003 031f 	and.w	r3, r3, #31
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d104      	bne.n	8005f52 <USB_EPStartXfer+0xe24>
 8005f48:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005f4c:	3b01      	subs	r3, #1
 8005f4e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005f52:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005f56:	b29b      	uxth	r3, r3
 8005f58:	029b      	lsls	r3, r3, #10
 8005f5a:	b29b      	uxth	r3, r3
 8005f5c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005f60:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005f64:	b29a      	uxth	r2, r3
 8005f66:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005f6a:	801a      	strh	r2, [r3, #0]
 8005f6c:	e021      	b.n	8005fb2 <USB_EPStartXfer+0xe84>
 8005f6e:	463b      	mov	r3, r7
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	785b      	ldrb	r3, [r3, #1]
 8005f74:	2b01      	cmp	r3, #1
 8005f76:	d11c      	bne.n	8005fb2 <USB_EPStartXfer+0xe84>
 8005f78:	1d3b      	adds	r3, r7, #4
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005f80:	b29b      	uxth	r3, r3
 8005f82:	461a      	mov	r2, r3
 8005f84:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005f88:	4413      	add	r3, r2
 8005f8a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005f8e:	463b      	mov	r3, r7
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	781b      	ldrb	r3, [r3, #0]
 8005f94:	011a      	lsls	r2, r3, #4
 8005f96:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005f9a:	4413      	add	r3, r2
 8005f9c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005fa0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8005fa4:	463b      	mov	r3, r7
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	691b      	ldr	r3, [r3, #16]
 8005faa:	b29a      	uxth	r2, r3
 8005fac:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8005fb0:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8005fb2:	463b      	mov	r3, r7
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	69db      	ldr	r3, [r3, #28]
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	f000 81a4 	beq.w	8006306 <USB_EPStartXfer+0x11d8>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8005fbe:	1d3b      	adds	r3, r7, #4
 8005fc0:	681a      	ldr	r2, [r3, #0]
 8005fc2:	463b      	mov	r3, r7
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	781b      	ldrb	r3, [r3, #0]
 8005fc8:	009b      	lsls	r3, r3, #2
 8005fca:	4413      	add	r3, r2
 8005fcc:	881b      	ldrh	r3, [r3, #0]
 8005fce:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8005fd2:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8005fd6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d005      	beq.n	8005fea <USB_EPStartXfer+0xebc>
 8005fde:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8005fe2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d10d      	bne.n	8006006 <USB_EPStartXfer+0xed8>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8005fea:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8005fee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	f040 8187 	bne.w	8006306 <USB_EPStartXfer+0x11d8>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8005ff8:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8005ffc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006000:	2b00      	cmp	r3, #0
 8006002:	f040 8180 	bne.w	8006306 <USB_EPStartXfer+0x11d8>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 8006006:	1d3b      	adds	r3, r7, #4
 8006008:	681a      	ldr	r2, [r3, #0]
 800600a:	463b      	mov	r3, r7
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	781b      	ldrb	r3, [r3, #0]
 8006010:	009b      	lsls	r3, r3, #2
 8006012:	4413      	add	r3, r2
 8006014:	881b      	ldrh	r3, [r3, #0]
 8006016:	b29b      	uxth	r3, r3
 8006018:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800601c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006020:	f8a7 3098 	strh.w	r3, [r7, #152]	; 0x98
 8006024:	1d3b      	adds	r3, r7, #4
 8006026:	681a      	ldr	r2, [r3, #0]
 8006028:	463b      	mov	r3, r7
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	781b      	ldrb	r3, [r3, #0]
 800602e:	009b      	lsls	r3, r3, #2
 8006030:	441a      	add	r2, r3
 8006032:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 8006036:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800603a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800603e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006042:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006046:	b29b      	uxth	r3, r3
 8006048:	8013      	strh	r3, [r2, #0]
 800604a:	e15c      	b.n	8006306 <USB_EPStartXfer+0x11d8>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800604c:	463b      	mov	r3, r7
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	78db      	ldrb	r3, [r3, #3]
 8006052:	2b01      	cmp	r3, #1
 8006054:	f040 8155 	bne.w	8006302 <USB_EPStartXfer+0x11d4>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8006058:	463b      	mov	r3, r7
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	699a      	ldr	r2, [r3, #24]
 800605e:	463b      	mov	r3, r7
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	691b      	ldr	r3, [r3, #16]
 8006064:	429a      	cmp	r2, r3
 8006066:	d90e      	bls.n	8006086 <USB_EPStartXfer+0xf58>
        {
          len = ep->maxpacket;
 8006068:	463b      	mov	r3, r7
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	691b      	ldr	r3, [r3, #16]
 800606e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
          ep->xfer_len -= len;
 8006072:	463b      	mov	r3, r7
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	699a      	ldr	r2, [r3, #24]
 8006078:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800607c:	1ad2      	subs	r2, r2, r3
 800607e:	463b      	mov	r3, r7
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	619a      	str	r2, [r3, #24]
 8006084:	e008      	b.n	8006098 <USB_EPStartXfer+0xf6a>
        }
        else
        {
          len = ep->xfer_len;
 8006086:	463b      	mov	r3, r7
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	699b      	ldr	r3, [r3, #24]
 800608c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
          ep->xfer_len = 0U;
 8006090:	463b      	mov	r3, r7
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	2200      	movs	r2, #0
 8006096:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8006098:	463b      	mov	r3, r7
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	785b      	ldrb	r3, [r3, #1]
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d16f      	bne.n	8006182 <USB_EPStartXfer+0x1054>
 80060a2:	1d3b      	adds	r3, r7, #4
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80060aa:	1d3b      	adds	r3, r7, #4
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80060b2:	b29b      	uxth	r3, r3
 80060b4:	461a      	mov	r2, r3
 80060b6:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80060ba:	4413      	add	r3, r2
 80060bc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80060c0:	463b      	mov	r3, r7
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	781b      	ldrb	r3, [r3, #0]
 80060c6:	011a      	lsls	r2, r3, #4
 80060c8:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80060cc:	4413      	add	r3, r2
 80060ce:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80060d2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80060d6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d116      	bne.n	800610c <USB_EPStartXfer+0xfde>
 80060de:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80060e2:	881b      	ldrh	r3, [r3, #0]
 80060e4:	b29b      	uxth	r3, r3
 80060e6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80060ea:	b29a      	uxth	r2, r3
 80060ec:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80060f0:	801a      	strh	r2, [r3, #0]
 80060f2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80060f6:	881b      	ldrh	r3, [r3, #0]
 80060f8:	b29b      	uxth	r3, r3
 80060fa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80060fe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006102:	b29a      	uxth	r2, r3
 8006104:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006108:	801a      	strh	r2, [r3, #0]
 800610a:	e05f      	b.n	80061cc <USB_EPStartXfer+0x109e>
 800610c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006110:	2b3e      	cmp	r3, #62	; 0x3e
 8006112:	d818      	bhi.n	8006146 <USB_EPStartXfer+0x1018>
 8006114:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006118:	085b      	lsrs	r3, r3, #1
 800611a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800611e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006122:	f003 0301 	and.w	r3, r3, #1
 8006126:	2b00      	cmp	r3, #0
 8006128:	d004      	beq.n	8006134 <USB_EPStartXfer+0x1006>
 800612a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800612e:	3301      	adds	r3, #1
 8006130:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006134:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006138:	b29b      	uxth	r3, r3
 800613a:	029b      	lsls	r3, r3, #10
 800613c:	b29a      	uxth	r2, r3
 800613e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006142:	801a      	strh	r2, [r3, #0]
 8006144:	e042      	b.n	80061cc <USB_EPStartXfer+0x109e>
 8006146:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800614a:	095b      	lsrs	r3, r3, #5
 800614c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006150:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006154:	f003 031f 	and.w	r3, r3, #31
 8006158:	2b00      	cmp	r3, #0
 800615a:	d104      	bne.n	8006166 <USB_EPStartXfer+0x1038>
 800615c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006160:	3b01      	subs	r3, #1
 8006162:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006166:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800616a:	b29b      	uxth	r3, r3
 800616c:	029b      	lsls	r3, r3, #10
 800616e:	b29b      	uxth	r3, r3
 8006170:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006174:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006178:	b29a      	uxth	r2, r3
 800617a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800617e:	801a      	strh	r2, [r3, #0]
 8006180:	e024      	b.n	80061cc <USB_EPStartXfer+0x109e>
 8006182:	463b      	mov	r3, r7
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	785b      	ldrb	r3, [r3, #1]
 8006188:	2b01      	cmp	r3, #1
 800618a:	d11f      	bne.n	80061cc <USB_EPStartXfer+0x109e>
 800618c:	1d3b      	adds	r3, r7, #4
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006194:	1d3b      	adds	r3, r7, #4
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800619c:	b29b      	uxth	r3, r3
 800619e:	461a      	mov	r2, r3
 80061a0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80061a4:	4413      	add	r3, r2
 80061a6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80061aa:	463b      	mov	r3, r7
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	781b      	ldrb	r3, [r3, #0]
 80061b0:	011a      	lsls	r2, r3, #4
 80061b2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80061b6:	4413      	add	r3, r2
 80061b8:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80061bc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80061c0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80061c4:	b29a      	uxth	r2, r3
 80061c6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80061ca:	801a      	strh	r2, [r3, #0]
 80061cc:	1d3b      	adds	r3, r7, #4
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80061d4:	463b      	mov	r3, r7
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	785b      	ldrb	r3, [r3, #1]
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d16f      	bne.n	80062be <USB_EPStartXfer+0x1190>
 80061de:	1d3b      	adds	r3, r7, #4
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80061e6:	1d3b      	adds	r3, r7, #4
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80061ee:	b29b      	uxth	r3, r3
 80061f0:	461a      	mov	r2, r3
 80061f2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80061f6:	4413      	add	r3, r2
 80061f8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80061fc:	463b      	mov	r3, r7
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	781b      	ldrb	r3, [r3, #0]
 8006202:	011a      	lsls	r2, r3, #4
 8006204:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006208:	4413      	add	r3, r2
 800620a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800620e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8006212:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006216:	2b00      	cmp	r3, #0
 8006218:	d116      	bne.n	8006248 <USB_EPStartXfer+0x111a>
 800621a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800621e:	881b      	ldrh	r3, [r3, #0]
 8006220:	b29b      	uxth	r3, r3
 8006222:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006226:	b29a      	uxth	r2, r3
 8006228:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800622c:	801a      	strh	r2, [r3, #0]
 800622e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8006232:	881b      	ldrh	r3, [r3, #0]
 8006234:	b29b      	uxth	r3, r3
 8006236:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800623a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800623e:	b29a      	uxth	r2, r3
 8006240:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8006244:	801a      	strh	r2, [r3, #0]
 8006246:	e05e      	b.n	8006306 <USB_EPStartXfer+0x11d8>
 8006248:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800624c:	2b3e      	cmp	r3, #62	; 0x3e
 800624e:	d818      	bhi.n	8006282 <USB_EPStartXfer+0x1154>
 8006250:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006254:	085b      	lsrs	r3, r3, #1
 8006256:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800625a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800625e:	f003 0301 	and.w	r3, r3, #1
 8006262:	2b00      	cmp	r3, #0
 8006264:	d004      	beq.n	8006270 <USB_EPStartXfer+0x1142>
 8006266:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800626a:	3301      	adds	r3, #1
 800626c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8006270:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006274:	b29b      	uxth	r3, r3
 8006276:	029b      	lsls	r3, r3, #10
 8006278:	b29a      	uxth	r2, r3
 800627a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800627e:	801a      	strh	r2, [r3, #0]
 8006280:	e041      	b.n	8006306 <USB_EPStartXfer+0x11d8>
 8006282:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006286:	095b      	lsrs	r3, r3, #5
 8006288:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800628c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006290:	f003 031f 	and.w	r3, r3, #31
 8006294:	2b00      	cmp	r3, #0
 8006296:	d104      	bne.n	80062a2 <USB_EPStartXfer+0x1174>
 8006298:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800629c:	3b01      	subs	r3, #1
 800629e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80062a2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80062a6:	b29b      	uxth	r3, r3
 80062a8:	029b      	lsls	r3, r3, #10
 80062aa:	b29b      	uxth	r3, r3
 80062ac:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80062b0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80062b4:	b29a      	uxth	r2, r3
 80062b6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80062ba:	801a      	strh	r2, [r3, #0]
 80062bc:	e023      	b.n	8006306 <USB_EPStartXfer+0x11d8>
 80062be:	463b      	mov	r3, r7
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	785b      	ldrb	r3, [r3, #1]
 80062c4:	2b01      	cmp	r3, #1
 80062c6:	d11e      	bne.n	8006306 <USB_EPStartXfer+0x11d8>
 80062c8:	1d3b      	adds	r3, r7, #4
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80062d0:	b29b      	uxth	r3, r3
 80062d2:	461a      	mov	r2, r3
 80062d4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80062d8:	4413      	add	r3, r2
 80062da:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80062de:	463b      	mov	r3, r7
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	781b      	ldrb	r3, [r3, #0]
 80062e4:	011a      	lsls	r2, r3, #4
 80062e6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80062ea:	4413      	add	r3, r2
 80062ec:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80062f0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80062f4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80062f8:	b29a      	uxth	r2, r3
 80062fa:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80062fe:	801a      	strh	r2, [r3, #0]
 8006300:	e001      	b.n	8006306 <USB_EPStartXfer+0x11d8>
      }
      else
      {
        return HAL_ERROR;
 8006302:	2301      	movs	r3, #1
 8006304:	e02e      	b.n	8006364 <USB_EPStartXfer+0x1236>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006306:	1d3b      	adds	r3, r7, #4
 8006308:	681a      	ldr	r2, [r3, #0]
 800630a:	463b      	mov	r3, r7
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	781b      	ldrb	r3, [r3, #0]
 8006310:	009b      	lsls	r3, r3, #2
 8006312:	4413      	add	r3, r2
 8006314:	881b      	ldrh	r3, [r3, #0]
 8006316:	b29b      	uxth	r3, r3
 8006318:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800631c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006320:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 8006324:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8006328:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800632c:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 8006330:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8006334:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006338:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 800633c:	1d3b      	adds	r3, r7, #4
 800633e:	681a      	ldr	r2, [r3, #0]
 8006340:	463b      	mov	r3, r7
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	781b      	ldrb	r3, [r3, #0]
 8006346:	009b      	lsls	r3, r3, #2
 8006348:	441a      	add	r2, r3
 800634a:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 800634e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006352:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006356:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800635a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800635e:	b29b      	uxth	r3, r3
 8006360:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8006362:	2300      	movs	r3, #0
}
 8006364:	4618      	mov	r0, r3
 8006366:	f507 7788 	add.w	r7, r7, #272	; 0x110
 800636a:	46bd      	mov	sp, r7
 800636c:	bd80      	pop	{r7, pc}

0800636e <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800636e:	b480      	push	{r7}
 8006370:	b085      	sub	sp, #20
 8006372:	af00      	add	r7, sp, #0
 8006374:	6078      	str	r0, [r7, #4]
 8006376:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8006378:	683b      	ldr	r3, [r7, #0]
 800637a:	785b      	ldrb	r3, [r3, #1]
 800637c:	2b00      	cmp	r3, #0
 800637e:	d020      	beq.n	80063c2 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8006380:	687a      	ldr	r2, [r7, #4]
 8006382:	683b      	ldr	r3, [r7, #0]
 8006384:	781b      	ldrb	r3, [r3, #0]
 8006386:	009b      	lsls	r3, r3, #2
 8006388:	4413      	add	r3, r2
 800638a:	881b      	ldrh	r3, [r3, #0]
 800638c:	b29b      	uxth	r3, r3
 800638e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006392:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006396:	81bb      	strh	r3, [r7, #12]
 8006398:	89bb      	ldrh	r3, [r7, #12]
 800639a:	f083 0310 	eor.w	r3, r3, #16
 800639e:	81bb      	strh	r3, [r7, #12]
 80063a0:	687a      	ldr	r2, [r7, #4]
 80063a2:	683b      	ldr	r3, [r7, #0]
 80063a4:	781b      	ldrb	r3, [r3, #0]
 80063a6:	009b      	lsls	r3, r3, #2
 80063a8:	441a      	add	r2, r3
 80063aa:	89bb      	ldrh	r3, [r7, #12]
 80063ac:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80063b0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80063b4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80063b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80063bc:	b29b      	uxth	r3, r3
 80063be:	8013      	strh	r3, [r2, #0]
 80063c0:	e01f      	b.n	8006402 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 80063c2:	687a      	ldr	r2, [r7, #4]
 80063c4:	683b      	ldr	r3, [r7, #0]
 80063c6:	781b      	ldrb	r3, [r3, #0]
 80063c8:	009b      	lsls	r3, r3, #2
 80063ca:	4413      	add	r3, r2
 80063cc:	881b      	ldrh	r3, [r3, #0]
 80063ce:	b29b      	uxth	r3, r3
 80063d0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80063d4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80063d8:	81fb      	strh	r3, [r7, #14]
 80063da:	89fb      	ldrh	r3, [r7, #14]
 80063dc:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80063e0:	81fb      	strh	r3, [r7, #14]
 80063e2:	687a      	ldr	r2, [r7, #4]
 80063e4:	683b      	ldr	r3, [r7, #0]
 80063e6:	781b      	ldrb	r3, [r3, #0]
 80063e8:	009b      	lsls	r3, r3, #2
 80063ea:	441a      	add	r2, r3
 80063ec:	89fb      	ldrh	r3, [r7, #14]
 80063ee:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80063f2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80063f6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80063fa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80063fe:	b29b      	uxth	r3, r3
 8006400:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8006402:	2300      	movs	r3, #0
}
 8006404:	4618      	mov	r0, r3
 8006406:	3714      	adds	r7, #20
 8006408:	46bd      	mov	sp, r7
 800640a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800640e:	4770      	bx	lr

08006410 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006410:	b480      	push	{r7}
 8006412:	b087      	sub	sp, #28
 8006414:	af00      	add	r7, sp, #0
 8006416:	6078      	str	r0, [r7, #4]
 8006418:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800641a:	683b      	ldr	r3, [r7, #0]
 800641c:	7b1b      	ldrb	r3, [r3, #12]
 800641e:	2b00      	cmp	r3, #0
 8006420:	f040 809d 	bne.w	800655e <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8006424:	683b      	ldr	r3, [r7, #0]
 8006426:	785b      	ldrb	r3, [r3, #1]
 8006428:	2b00      	cmp	r3, #0
 800642a:	d04c      	beq.n	80064c6 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800642c:	687a      	ldr	r2, [r7, #4]
 800642e:	683b      	ldr	r3, [r7, #0]
 8006430:	781b      	ldrb	r3, [r3, #0]
 8006432:	009b      	lsls	r3, r3, #2
 8006434:	4413      	add	r3, r2
 8006436:	881b      	ldrh	r3, [r3, #0]
 8006438:	823b      	strh	r3, [r7, #16]
 800643a:	8a3b      	ldrh	r3, [r7, #16]
 800643c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006440:	2b00      	cmp	r3, #0
 8006442:	d01b      	beq.n	800647c <USB_EPClearStall+0x6c>
 8006444:	687a      	ldr	r2, [r7, #4]
 8006446:	683b      	ldr	r3, [r7, #0]
 8006448:	781b      	ldrb	r3, [r3, #0]
 800644a:	009b      	lsls	r3, r3, #2
 800644c:	4413      	add	r3, r2
 800644e:	881b      	ldrh	r3, [r3, #0]
 8006450:	b29b      	uxth	r3, r3
 8006452:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006456:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800645a:	81fb      	strh	r3, [r7, #14]
 800645c:	687a      	ldr	r2, [r7, #4]
 800645e:	683b      	ldr	r3, [r7, #0]
 8006460:	781b      	ldrb	r3, [r3, #0]
 8006462:	009b      	lsls	r3, r3, #2
 8006464:	441a      	add	r2, r3
 8006466:	89fb      	ldrh	r3, [r7, #14]
 8006468:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800646c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006470:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006474:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006478:	b29b      	uxth	r3, r3
 800647a:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800647c:	683b      	ldr	r3, [r7, #0]
 800647e:	78db      	ldrb	r3, [r3, #3]
 8006480:	2b01      	cmp	r3, #1
 8006482:	d06c      	beq.n	800655e <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8006484:	687a      	ldr	r2, [r7, #4]
 8006486:	683b      	ldr	r3, [r7, #0]
 8006488:	781b      	ldrb	r3, [r3, #0]
 800648a:	009b      	lsls	r3, r3, #2
 800648c:	4413      	add	r3, r2
 800648e:	881b      	ldrh	r3, [r3, #0]
 8006490:	b29b      	uxth	r3, r3
 8006492:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006496:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800649a:	81bb      	strh	r3, [r7, #12]
 800649c:	89bb      	ldrh	r3, [r7, #12]
 800649e:	f083 0320 	eor.w	r3, r3, #32
 80064a2:	81bb      	strh	r3, [r7, #12]
 80064a4:	687a      	ldr	r2, [r7, #4]
 80064a6:	683b      	ldr	r3, [r7, #0]
 80064a8:	781b      	ldrb	r3, [r3, #0]
 80064aa:	009b      	lsls	r3, r3, #2
 80064ac:	441a      	add	r2, r3
 80064ae:	89bb      	ldrh	r3, [r7, #12]
 80064b0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80064b4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80064b8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80064bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80064c0:	b29b      	uxth	r3, r3
 80064c2:	8013      	strh	r3, [r2, #0]
 80064c4:	e04b      	b.n	800655e <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80064c6:	687a      	ldr	r2, [r7, #4]
 80064c8:	683b      	ldr	r3, [r7, #0]
 80064ca:	781b      	ldrb	r3, [r3, #0]
 80064cc:	009b      	lsls	r3, r3, #2
 80064ce:	4413      	add	r3, r2
 80064d0:	881b      	ldrh	r3, [r3, #0]
 80064d2:	82fb      	strh	r3, [r7, #22]
 80064d4:	8afb      	ldrh	r3, [r7, #22]
 80064d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d01b      	beq.n	8006516 <USB_EPClearStall+0x106>
 80064de:	687a      	ldr	r2, [r7, #4]
 80064e0:	683b      	ldr	r3, [r7, #0]
 80064e2:	781b      	ldrb	r3, [r3, #0]
 80064e4:	009b      	lsls	r3, r3, #2
 80064e6:	4413      	add	r3, r2
 80064e8:	881b      	ldrh	r3, [r3, #0]
 80064ea:	b29b      	uxth	r3, r3
 80064ec:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80064f0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80064f4:	82bb      	strh	r3, [r7, #20]
 80064f6:	687a      	ldr	r2, [r7, #4]
 80064f8:	683b      	ldr	r3, [r7, #0]
 80064fa:	781b      	ldrb	r3, [r3, #0]
 80064fc:	009b      	lsls	r3, r3, #2
 80064fe:	441a      	add	r2, r3
 8006500:	8abb      	ldrh	r3, [r7, #20]
 8006502:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006506:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800650a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800650e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006512:	b29b      	uxth	r3, r3
 8006514:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006516:	687a      	ldr	r2, [r7, #4]
 8006518:	683b      	ldr	r3, [r7, #0]
 800651a:	781b      	ldrb	r3, [r3, #0]
 800651c:	009b      	lsls	r3, r3, #2
 800651e:	4413      	add	r3, r2
 8006520:	881b      	ldrh	r3, [r3, #0]
 8006522:	b29b      	uxth	r3, r3
 8006524:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006528:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800652c:	827b      	strh	r3, [r7, #18]
 800652e:	8a7b      	ldrh	r3, [r7, #18]
 8006530:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006534:	827b      	strh	r3, [r7, #18]
 8006536:	8a7b      	ldrh	r3, [r7, #18]
 8006538:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800653c:	827b      	strh	r3, [r7, #18]
 800653e:	687a      	ldr	r2, [r7, #4]
 8006540:	683b      	ldr	r3, [r7, #0]
 8006542:	781b      	ldrb	r3, [r3, #0]
 8006544:	009b      	lsls	r3, r3, #2
 8006546:	441a      	add	r2, r3
 8006548:	8a7b      	ldrh	r3, [r7, #18]
 800654a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800654e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006552:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006556:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800655a:	b29b      	uxth	r3, r3
 800655c:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800655e:	2300      	movs	r3, #0
}
 8006560:	4618      	mov	r0, r3
 8006562:	371c      	adds	r7, #28
 8006564:	46bd      	mov	sp, r7
 8006566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800656a:	4770      	bx	lr

0800656c <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800656c:	b480      	push	{r7}
 800656e:	b083      	sub	sp, #12
 8006570:	af00      	add	r7, sp, #0
 8006572:	6078      	str	r0, [r7, #4]
 8006574:	460b      	mov	r3, r1
 8006576:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8006578:	78fb      	ldrb	r3, [r7, #3]
 800657a:	2b00      	cmp	r3, #0
 800657c:	d103      	bne.n	8006586 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	2280      	movs	r2, #128	; 0x80
 8006582:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8006586:	2300      	movs	r3, #0
}
 8006588:	4618      	mov	r0, r3
 800658a:	370c      	adds	r7, #12
 800658c:	46bd      	mov	sp, r7
 800658e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006592:	4770      	bx	lr

08006594 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8006594:	b480      	push	{r7}
 8006596:	b083      	sub	sp, #12
 8006598:	af00      	add	r7, sp, #0
 800659a:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800659c:	2300      	movs	r3, #0
}
 800659e:	4618      	mov	r0, r3
 80065a0:	370c      	adds	r7, #12
 80065a2:	46bd      	mov	sp, r7
 80065a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065a8:	4770      	bx	lr

080065aa <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 80065aa:	b480      	push	{r7}
 80065ac:	b085      	sub	sp, #20
 80065ae:	af00      	add	r7, sp, #0
 80065b0:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80065b8:	b29b      	uxth	r3, r3
 80065ba:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 80065bc:	68fb      	ldr	r3, [r7, #12]
}
 80065be:	4618      	mov	r0, r3
 80065c0:	3714      	adds	r7, #20
 80065c2:	46bd      	mov	sp, r7
 80065c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065c8:	4770      	bx	lr

080065ca <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80065ca:	b480      	push	{r7}
 80065cc:	b08d      	sub	sp, #52	; 0x34
 80065ce:	af00      	add	r7, sp, #0
 80065d0:	60f8      	str	r0, [r7, #12]
 80065d2:	60b9      	str	r1, [r7, #8]
 80065d4:	4611      	mov	r1, r2
 80065d6:	461a      	mov	r2, r3
 80065d8:	460b      	mov	r3, r1
 80065da:	80fb      	strh	r3, [r7, #6]
 80065dc:	4613      	mov	r3, r2
 80065de:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 80065e0:	88bb      	ldrh	r3, [r7, #4]
 80065e2:	3301      	adds	r3, #1
 80065e4:	085b      	lsrs	r3, r3, #1
 80065e6:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80065ec:	68bb      	ldr	r3, [r7, #8]
 80065ee:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80065f0:	88fb      	ldrh	r3, [r7, #6]
 80065f2:	005a      	lsls	r2, r3, #1
 80065f4:	69fb      	ldr	r3, [r7, #28]
 80065f6:	4413      	add	r3, r2
 80065f8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80065fc:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 80065fe:	6a3b      	ldr	r3, [r7, #32]
 8006600:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006602:	e01e      	b.n	8006642 <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 8006604:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006606:	781b      	ldrb	r3, [r3, #0]
 8006608:	61bb      	str	r3, [r7, #24]
    pBuf++;
 800660a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800660c:	3301      	adds	r3, #1
 800660e:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 8006610:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006612:	781b      	ldrb	r3, [r3, #0]
 8006614:	b29b      	uxth	r3, r3
 8006616:	021b      	lsls	r3, r3, #8
 8006618:	b29b      	uxth	r3, r3
 800661a:	461a      	mov	r2, r3
 800661c:	69bb      	ldr	r3, [r7, #24]
 800661e:	4313      	orrs	r3, r2
 8006620:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 8006622:	697b      	ldr	r3, [r7, #20]
 8006624:	b29a      	uxth	r2, r3
 8006626:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006628:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800662a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800662c:	3302      	adds	r3, #2
 800662e:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 8006630:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006632:	3302      	adds	r3, #2
 8006634:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 8006636:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006638:	3301      	adds	r3, #1
 800663a:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 800663c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800663e:	3b01      	subs	r3, #1
 8006640:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006642:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006644:	2b00      	cmp	r3, #0
 8006646:	d1dd      	bne.n	8006604 <USB_WritePMA+0x3a>
  }
}
 8006648:	bf00      	nop
 800664a:	3734      	adds	r7, #52	; 0x34
 800664c:	46bd      	mov	sp, r7
 800664e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006652:	4770      	bx	lr

08006654 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8006654:	b480      	push	{r7}
 8006656:	b08b      	sub	sp, #44	; 0x2c
 8006658:	af00      	add	r7, sp, #0
 800665a:	60f8      	str	r0, [r7, #12]
 800665c:	60b9      	str	r1, [r7, #8]
 800665e:	4611      	mov	r1, r2
 8006660:	461a      	mov	r2, r3
 8006662:	460b      	mov	r3, r1
 8006664:	80fb      	strh	r3, [r7, #6]
 8006666:	4613      	mov	r3, r2
 8006668:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800666a:	88bb      	ldrh	r3, [r7, #4]
 800666c:	085b      	lsrs	r3, r3, #1
 800666e:	b29b      	uxth	r3, r3
 8006670:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8006676:	68bb      	ldr	r3, [r7, #8]
 8006678:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800667a:	88fb      	ldrh	r3, [r7, #6]
 800667c:	005a      	lsls	r2, r3, #1
 800667e:	697b      	ldr	r3, [r7, #20]
 8006680:	4413      	add	r3, r2
 8006682:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006686:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 8006688:	69bb      	ldr	r3, [r7, #24]
 800668a:	627b      	str	r3, [r7, #36]	; 0x24
 800668c:	e01b      	b.n	80066c6 <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 800668e:	6a3b      	ldr	r3, [r7, #32]
 8006690:	881b      	ldrh	r3, [r3, #0]
 8006692:	b29b      	uxth	r3, r3
 8006694:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8006696:	6a3b      	ldr	r3, [r7, #32]
 8006698:	3302      	adds	r3, #2
 800669a:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800669c:	693b      	ldr	r3, [r7, #16]
 800669e:	b2da      	uxtb	r2, r3
 80066a0:	69fb      	ldr	r3, [r7, #28]
 80066a2:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80066a4:	69fb      	ldr	r3, [r7, #28]
 80066a6:	3301      	adds	r3, #1
 80066a8:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 80066aa:	693b      	ldr	r3, [r7, #16]
 80066ac:	0a1b      	lsrs	r3, r3, #8
 80066ae:	b2da      	uxtb	r2, r3
 80066b0:	69fb      	ldr	r3, [r7, #28]
 80066b2:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80066b4:	69fb      	ldr	r3, [r7, #28]
 80066b6:	3301      	adds	r3, #1
 80066b8:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 80066ba:	6a3b      	ldr	r3, [r7, #32]
 80066bc:	3302      	adds	r3, #2
 80066be:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 80066c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066c2:	3b01      	subs	r3, #1
 80066c4:	627b      	str	r3, [r7, #36]	; 0x24
 80066c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	d1e0      	bne.n	800668e <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 80066cc:	88bb      	ldrh	r3, [r7, #4]
 80066ce:	f003 0301 	and.w	r3, r3, #1
 80066d2:	b29b      	uxth	r3, r3
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	d007      	beq.n	80066e8 <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 80066d8:	6a3b      	ldr	r3, [r7, #32]
 80066da:	881b      	ldrh	r3, [r3, #0]
 80066dc:	b29b      	uxth	r3, r3
 80066de:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 80066e0:	693b      	ldr	r3, [r7, #16]
 80066e2:	b2da      	uxtb	r2, r3
 80066e4:	69fb      	ldr	r3, [r7, #28]
 80066e6:	701a      	strb	r2, [r3, #0]
  }
}
 80066e8:	bf00      	nop
 80066ea:	372c      	adds	r7, #44	; 0x2c
 80066ec:	46bd      	mov	sp, r7
 80066ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066f2:	4770      	bx	lr

080066f4 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80066f4:	b580      	push	{r7, lr}
 80066f6:	b084      	sub	sp, #16
 80066f8:	af00      	add	r7, sp, #0
 80066fa:	6078      	str	r0, [r7, #4]
 80066fc:	460b      	mov	r3, r1
 80066fe:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8006700:	2300      	movs	r3, #0
 8006702:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	7c1b      	ldrb	r3, [r3, #16]
 8006708:	2b00      	cmp	r3, #0
 800670a:	d115      	bne.n	8006738 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800670c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006710:	2202      	movs	r2, #2
 8006712:	2181      	movs	r1, #129	; 0x81
 8006714:	6878      	ldr	r0, [r7, #4]
 8006716:	f001 fea6 	bl	8008466 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	2201      	movs	r2, #1
 800671e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8006720:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006724:	2202      	movs	r2, #2
 8006726:	2101      	movs	r1, #1
 8006728:	6878      	ldr	r0, [r7, #4]
 800672a:	f001 fe9c 	bl	8008466 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	2201      	movs	r2, #1
 8006732:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 8006736:	e012      	b.n	800675e <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8006738:	2340      	movs	r3, #64	; 0x40
 800673a:	2202      	movs	r2, #2
 800673c:	2181      	movs	r1, #129	; 0x81
 800673e:	6878      	ldr	r0, [r7, #4]
 8006740:	f001 fe91 	bl	8008466 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	2201      	movs	r2, #1
 8006748:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800674a:	2340      	movs	r3, #64	; 0x40
 800674c:	2202      	movs	r2, #2
 800674e:	2101      	movs	r1, #1
 8006750:	6878      	ldr	r0, [r7, #4]
 8006752:	f001 fe88 	bl	8008466 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	2201      	movs	r2, #1
 800675a:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800675e:	2308      	movs	r3, #8
 8006760:	2203      	movs	r2, #3
 8006762:	2182      	movs	r1, #130	; 0x82
 8006764:	6878      	ldr	r0, [r7, #4]
 8006766:	f001 fe7e 	bl	8008466 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	2201      	movs	r2, #1
 800676e:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8006770:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8006774:	f001 ffa0 	bl	80086b8 <USBD_static_malloc>
 8006778:	4602      	mov	r2, r0
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006786:	2b00      	cmp	r3, #0
 8006788:	d102      	bne.n	8006790 <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 800678a:	2301      	movs	r3, #1
 800678c:	73fb      	strb	r3, [r7, #15]
 800678e:	e026      	b.n	80067de <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006796:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 80067a2:	68bb      	ldr	r3, [r7, #8]
 80067a4:	2200      	movs	r2, #0
 80067a6:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 80067aa:	68bb      	ldr	r3, [r7, #8]
 80067ac:	2200      	movs	r2, #0
 80067ae:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	7c1b      	ldrb	r3, [r3, #16]
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d109      	bne.n	80067ce <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80067ba:	68bb      	ldr	r3, [r7, #8]
 80067bc:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80067c0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80067c4:	2101      	movs	r1, #1
 80067c6:	6878      	ldr	r0, [r7, #4]
 80067c8:	f001 ff3f 	bl	800864a <USBD_LL_PrepareReceive>
 80067cc:	e007      	b.n	80067de <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80067ce:	68bb      	ldr	r3, [r7, #8]
 80067d0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80067d4:	2340      	movs	r3, #64	; 0x40
 80067d6:	2101      	movs	r1, #1
 80067d8:	6878      	ldr	r0, [r7, #4]
 80067da:	f001 ff36 	bl	800864a <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 80067de:	7bfb      	ldrb	r3, [r7, #15]
}
 80067e0:	4618      	mov	r0, r3
 80067e2:	3710      	adds	r7, #16
 80067e4:	46bd      	mov	sp, r7
 80067e6:	bd80      	pop	{r7, pc}

080067e8 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80067e8:	b580      	push	{r7, lr}
 80067ea:	b084      	sub	sp, #16
 80067ec:	af00      	add	r7, sp, #0
 80067ee:	6078      	str	r0, [r7, #4]
 80067f0:	460b      	mov	r3, r1
 80067f2:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 80067f4:	2300      	movs	r3, #0
 80067f6:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 80067f8:	2181      	movs	r1, #129	; 0x81
 80067fa:	6878      	ldr	r0, [r7, #4]
 80067fc:	f001 fe59 	bl	80084b2 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	2200      	movs	r2, #0
 8006804:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8006806:	2101      	movs	r1, #1
 8006808:	6878      	ldr	r0, [r7, #4]
 800680a:	f001 fe52 	bl	80084b2 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	2200      	movs	r2, #0
 8006812:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8006816:	2182      	movs	r1, #130	; 0x82
 8006818:	6878      	ldr	r0, [r7, #4]
 800681a:	f001 fe4a 	bl	80084b2 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	2200      	movs	r2, #0
 8006822:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800682a:	2b00      	cmp	r3, #0
 800682c:	d00e      	beq.n	800684c <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006834:	685b      	ldr	r3, [r3, #4]
 8006836:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800683e:	4618      	mov	r0, r3
 8006840:	f001 ff48 	bl	80086d4 <USBD_static_free>
    pdev->pClassData = NULL;
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	2200      	movs	r2, #0
 8006848:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 800684c:	7bfb      	ldrb	r3, [r7, #15]
}
 800684e:	4618      	mov	r0, r3
 8006850:	3710      	adds	r7, #16
 8006852:	46bd      	mov	sp, r7
 8006854:	bd80      	pop	{r7, pc}

08006856 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8006856:	b580      	push	{r7, lr}
 8006858:	b086      	sub	sp, #24
 800685a:	af00      	add	r7, sp, #0
 800685c:	6078      	str	r0, [r7, #4]
 800685e:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006866:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8006868:	2300      	movs	r3, #0
 800686a:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 800686c:	2300      	movs	r3, #0
 800686e:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 8006870:	2300      	movs	r3, #0
 8006872:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006874:	683b      	ldr	r3, [r7, #0]
 8006876:	781b      	ldrb	r3, [r3, #0]
 8006878:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800687c:	2b00      	cmp	r3, #0
 800687e:	d039      	beq.n	80068f4 <USBD_CDC_Setup+0x9e>
 8006880:	2b20      	cmp	r3, #32
 8006882:	d17c      	bne.n	800697e <USBD_CDC_Setup+0x128>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 8006884:	683b      	ldr	r3, [r7, #0]
 8006886:	88db      	ldrh	r3, [r3, #6]
 8006888:	2b00      	cmp	r3, #0
 800688a:	d029      	beq.n	80068e0 <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 800688c:	683b      	ldr	r3, [r7, #0]
 800688e:	781b      	ldrb	r3, [r3, #0]
 8006890:	b25b      	sxtb	r3, r3
 8006892:	2b00      	cmp	r3, #0
 8006894:	da11      	bge.n	80068ba <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800689c:	689b      	ldr	r3, [r3, #8]
 800689e:	683a      	ldr	r2, [r7, #0]
 80068a0:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 80068a2:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80068a4:	683a      	ldr	r2, [r7, #0]
 80068a6:	88d2      	ldrh	r2, [r2, #6]
 80068a8:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 80068aa:	6939      	ldr	r1, [r7, #16]
 80068ac:	683b      	ldr	r3, [r7, #0]
 80068ae:	88db      	ldrh	r3, [r3, #6]
 80068b0:	461a      	mov	r2, r3
 80068b2:	6878      	ldr	r0, [r7, #4]
 80068b4:	f001 fa04 	bl	8007cc0 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 80068b8:	e068      	b.n	800698c <USBD_CDC_Setup+0x136>
          hcdc->CmdOpCode = req->bRequest;
 80068ba:	683b      	ldr	r3, [r7, #0]
 80068bc:	785a      	ldrb	r2, [r3, #1]
 80068be:	693b      	ldr	r3, [r7, #16]
 80068c0:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 80068c4:	683b      	ldr	r3, [r7, #0]
 80068c6:	88db      	ldrh	r3, [r3, #6]
 80068c8:	b2da      	uxtb	r2, r3
 80068ca:	693b      	ldr	r3, [r7, #16]
 80068cc:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 80068d0:	6939      	ldr	r1, [r7, #16]
 80068d2:	683b      	ldr	r3, [r7, #0]
 80068d4:	88db      	ldrh	r3, [r3, #6]
 80068d6:	461a      	mov	r2, r3
 80068d8:	6878      	ldr	r0, [r7, #4]
 80068da:	f001 fa1f 	bl	8007d1c <USBD_CtlPrepareRx>
      break;
 80068de:	e055      	b.n	800698c <USBD_CDC_Setup+0x136>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80068e6:	689b      	ldr	r3, [r3, #8]
 80068e8:	683a      	ldr	r2, [r7, #0]
 80068ea:	7850      	ldrb	r0, [r2, #1]
 80068ec:	2200      	movs	r2, #0
 80068ee:	6839      	ldr	r1, [r7, #0]
 80068f0:	4798      	blx	r3
      break;
 80068f2:	e04b      	b.n	800698c <USBD_CDC_Setup+0x136>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80068f4:	683b      	ldr	r3, [r7, #0]
 80068f6:	785b      	ldrb	r3, [r3, #1]
 80068f8:	2b0a      	cmp	r3, #10
 80068fa:	d017      	beq.n	800692c <USBD_CDC_Setup+0xd6>
 80068fc:	2b0b      	cmp	r3, #11
 80068fe:	d029      	beq.n	8006954 <USBD_CDC_Setup+0xfe>
 8006900:	2b00      	cmp	r3, #0
 8006902:	d133      	bne.n	800696c <USBD_CDC_Setup+0x116>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800690a:	2b03      	cmp	r3, #3
 800690c:	d107      	bne.n	800691e <USBD_CDC_Setup+0xc8>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 800690e:	f107 030c 	add.w	r3, r7, #12
 8006912:	2202      	movs	r2, #2
 8006914:	4619      	mov	r1, r3
 8006916:	6878      	ldr	r0, [r7, #4]
 8006918:	f001 f9d2 	bl	8007cc0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800691c:	e02e      	b.n	800697c <USBD_CDC_Setup+0x126>
            USBD_CtlError(pdev, req);
 800691e:	6839      	ldr	r1, [r7, #0]
 8006920:	6878      	ldr	r0, [r7, #4]
 8006922:	f001 f962 	bl	8007bea <USBD_CtlError>
            ret = USBD_FAIL;
 8006926:	2302      	movs	r3, #2
 8006928:	75fb      	strb	r3, [r7, #23]
          break;
 800692a:	e027      	b.n	800697c <USBD_CDC_Setup+0x126>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006932:	2b03      	cmp	r3, #3
 8006934:	d107      	bne.n	8006946 <USBD_CDC_Setup+0xf0>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8006936:	f107 030f 	add.w	r3, r7, #15
 800693a:	2201      	movs	r2, #1
 800693c:	4619      	mov	r1, r3
 800693e:	6878      	ldr	r0, [r7, #4]
 8006940:	f001 f9be 	bl	8007cc0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006944:	e01a      	b.n	800697c <USBD_CDC_Setup+0x126>
            USBD_CtlError(pdev, req);
 8006946:	6839      	ldr	r1, [r7, #0]
 8006948:	6878      	ldr	r0, [r7, #4]
 800694a:	f001 f94e 	bl	8007bea <USBD_CtlError>
            ret = USBD_FAIL;
 800694e:	2302      	movs	r3, #2
 8006950:	75fb      	strb	r3, [r7, #23]
          break;
 8006952:	e013      	b.n	800697c <USBD_CDC_Setup+0x126>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800695a:	2b03      	cmp	r3, #3
 800695c:	d00d      	beq.n	800697a <USBD_CDC_Setup+0x124>
          {
            USBD_CtlError(pdev, req);
 800695e:	6839      	ldr	r1, [r7, #0]
 8006960:	6878      	ldr	r0, [r7, #4]
 8006962:	f001 f942 	bl	8007bea <USBD_CtlError>
            ret = USBD_FAIL;
 8006966:	2302      	movs	r3, #2
 8006968:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800696a:	e006      	b.n	800697a <USBD_CDC_Setup+0x124>

        default:
          USBD_CtlError(pdev, req);
 800696c:	6839      	ldr	r1, [r7, #0]
 800696e:	6878      	ldr	r0, [r7, #4]
 8006970:	f001 f93b 	bl	8007bea <USBD_CtlError>
          ret = USBD_FAIL;
 8006974:	2302      	movs	r3, #2
 8006976:	75fb      	strb	r3, [r7, #23]
          break;
 8006978:	e000      	b.n	800697c <USBD_CDC_Setup+0x126>
          break;
 800697a:	bf00      	nop
      }
      break;
 800697c:	e006      	b.n	800698c <USBD_CDC_Setup+0x136>

    default:
      USBD_CtlError(pdev, req);
 800697e:	6839      	ldr	r1, [r7, #0]
 8006980:	6878      	ldr	r0, [r7, #4]
 8006982:	f001 f932 	bl	8007bea <USBD_CtlError>
      ret = USBD_FAIL;
 8006986:	2302      	movs	r3, #2
 8006988:	75fb      	strb	r3, [r7, #23]
      break;
 800698a:	bf00      	nop
  }

  return ret;
 800698c:	7dfb      	ldrb	r3, [r7, #23]
}
 800698e:	4618      	mov	r0, r3
 8006990:	3718      	adds	r7, #24
 8006992:	46bd      	mov	sp, r7
 8006994:	bd80      	pop	{r7, pc}

08006996 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006996:	b580      	push	{r7, lr}
 8006998:	b084      	sub	sp, #16
 800699a:	af00      	add	r7, sp, #0
 800699c:	6078      	str	r0, [r7, #4]
 800699e:	460b      	mov	r3, r1
 80069a0:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80069a8:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80069b0:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	d03a      	beq.n	8006a32 <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 80069bc:	78fa      	ldrb	r2, [r7, #3]
 80069be:	6879      	ldr	r1, [r7, #4]
 80069c0:	4613      	mov	r3, r2
 80069c2:	009b      	lsls	r3, r3, #2
 80069c4:	4413      	add	r3, r2
 80069c6:	009b      	lsls	r3, r3, #2
 80069c8:	440b      	add	r3, r1
 80069ca:	331c      	adds	r3, #28
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d029      	beq.n	8006a26 <USBD_CDC_DataIn+0x90>
 80069d2:	78fa      	ldrb	r2, [r7, #3]
 80069d4:	6879      	ldr	r1, [r7, #4]
 80069d6:	4613      	mov	r3, r2
 80069d8:	009b      	lsls	r3, r3, #2
 80069da:	4413      	add	r3, r2
 80069dc:	009b      	lsls	r3, r3, #2
 80069de:	440b      	add	r3, r1
 80069e0:	331c      	adds	r3, #28
 80069e2:	681a      	ldr	r2, [r3, #0]
 80069e4:	78f9      	ldrb	r1, [r7, #3]
 80069e6:	68b8      	ldr	r0, [r7, #8]
 80069e8:	460b      	mov	r3, r1
 80069ea:	009b      	lsls	r3, r3, #2
 80069ec:	440b      	add	r3, r1
 80069ee:	00db      	lsls	r3, r3, #3
 80069f0:	4403      	add	r3, r0
 80069f2:	3338      	adds	r3, #56	; 0x38
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	fbb2 f1f3 	udiv	r1, r2, r3
 80069fa:	fb03 f301 	mul.w	r3, r3, r1
 80069fe:	1ad3      	subs	r3, r2, r3
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	d110      	bne.n	8006a26 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8006a04:	78fa      	ldrb	r2, [r7, #3]
 8006a06:	6879      	ldr	r1, [r7, #4]
 8006a08:	4613      	mov	r3, r2
 8006a0a:	009b      	lsls	r3, r3, #2
 8006a0c:	4413      	add	r3, r2
 8006a0e:	009b      	lsls	r3, r3, #2
 8006a10:	440b      	add	r3, r1
 8006a12:	331c      	adds	r3, #28
 8006a14:	2200      	movs	r2, #0
 8006a16:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8006a18:	78f9      	ldrb	r1, [r7, #3]
 8006a1a:	2300      	movs	r3, #0
 8006a1c:	2200      	movs	r2, #0
 8006a1e:	6878      	ldr	r0, [r7, #4]
 8006a20:	f001 fdf0 	bl	8008604 <USBD_LL_Transmit>
 8006a24:	e003      	b.n	8006a2e <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	2200      	movs	r2, #0
 8006a2a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 8006a2e:	2300      	movs	r3, #0
 8006a30:	e000      	b.n	8006a34 <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 8006a32:	2302      	movs	r3, #2
  }
}
 8006a34:	4618      	mov	r0, r3
 8006a36:	3710      	adds	r7, #16
 8006a38:	46bd      	mov	sp, r7
 8006a3a:	bd80      	pop	{r7, pc}

08006a3c <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006a3c:	b580      	push	{r7, lr}
 8006a3e:	b084      	sub	sp, #16
 8006a40:	af00      	add	r7, sp, #0
 8006a42:	6078      	str	r0, [r7, #4]
 8006a44:	460b      	mov	r3, r1
 8006a46:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006a4e:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8006a50:	78fb      	ldrb	r3, [r7, #3]
 8006a52:	4619      	mov	r1, r3
 8006a54:	6878      	ldr	r0, [r7, #4]
 8006a56:	f001 fe1b 	bl	8008690 <USBD_LL_GetRxDataSize>
 8006a5a:	4602      	mov	r2, r0
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	d00d      	beq.n	8006a88 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006a72:	68db      	ldr	r3, [r3, #12]
 8006a74:	68fa      	ldr	r2, [r7, #12]
 8006a76:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8006a7a:	68fa      	ldr	r2, [r7, #12]
 8006a7c:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8006a80:	4611      	mov	r1, r2
 8006a82:	4798      	blx	r3

    return USBD_OK;
 8006a84:	2300      	movs	r3, #0
 8006a86:	e000      	b.n	8006a8a <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 8006a88:	2302      	movs	r3, #2
  }
}
 8006a8a:	4618      	mov	r0, r3
 8006a8c:	3710      	adds	r7, #16
 8006a8e:	46bd      	mov	sp, r7
 8006a90:	bd80      	pop	{r7, pc}

08006a92 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8006a92:	b580      	push	{r7, lr}
 8006a94:	b084      	sub	sp, #16
 8006a96:	af00      	add	r7, sp, #0
 8006a98:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006aa0:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	d015      	beq.n	8006ad8 <USBD_CDC_EP0_RxReady+0x46>
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8006ab2:	2bff      	cmp	r3, #255	; 0xff
 8006ab4:	d010      	beq.n	8006ad8 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006abc:	689b      	ldr	r3, [r3, #8]
 8006abe:	68fa      	ldr	r2, [r7, #12]
 8006ac0:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 8006ac4:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8006ac6:	68fa      	ldr	r2, [r7, #12]
 8006ac8:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8006acc:	b292      	uxth	r2, r2
 8006ace:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	22ff      	movs	r2, #255	; 0xff
 8006ad4:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 8006ad8:	2300      	movs	r3, #0
}
 8006ada:	4618      	mov	r0, r3
 8006adc:	3710      	adds	r7, #16
 8006ade:	46bd      	mov	sp, r7
 8006ae0:	bd80      	pop	{r7, pc}
	...

08006ae4 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8006ae4:	b480      	push	{r7}
 8006ae6:	b083      	sub	sp, #12
 8006ae8:	af00      	add	r7, sp, #0
 8006aea:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	2243      	movs	r2, #67	; 0x43
 8006af0:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 8006af2:	4b03      	ldr	r3, [pc, #12]	; (8006b00 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8006af4:	4618      	mov	r0, r3
 8006af6:	370c      	adds	r7, #12
 8006af8:	46bd      	mov	sp, r7
 8006afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006afe:	4770      	bx	lr
 8006b00:	2000047c 	.word	0x2000047c

08006b04 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8006b04:	b480      	push	{r7}
 8006b06:	b083      	sub	sp, #12
 8006b08:	af00      	add	r7, sp, #0
 8006b0a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	2243      	movs	r2, #67	; 0x43
 8006b10:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 8006b12:	4b03      	ldr	r3, [pc, #12]	; (8006b20 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8006b14:	4618      	mov	r0, r3
 8006b16:	370c      	adds	r7, #12
 8006b18:	46bd      	mov	sp, r7
 8006b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b1e:	4770      	bx	lr
 8006b20:	20000438 	.word	0x20000438

08006b24 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8006b24:	b480      	push	{r7}
 8006b26:	b083      	sub	sp, #12
 8006b28:	af00      	add	r7, sp, #0
 8006b2a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	2243      	movs	r2, #67	; 0x43
 8006b30:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 8006b32:	4b03      	ldr	r3, [pc, #12]	; (8006b40 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8006b34:	4618      	mov	r0, r3
 8006b36:	370c      	adds	r7, #12
 8006b38:	46bd      	mov	sp, r7
 8006b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b3e:	4770      	bx	lr
 8006b40:	200004c0 	.word	0x200004c0

08006b44 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8006b44:	b480      	push	{r7}
 8006b46:	b083      	sub	sp, #12
 8006b48:	af00      	add	r7, sp, #0
 8006b4a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	220a      	movs	r2, #10
 8006b50:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 8006b52:	4b03      	ldr	r3, [pc, #12]	; (8006b60 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8006b54:	4618      	mov	r0, r3
 8006b56:	370c      	adds	r7, #12
 8006b58:	46bd      	mov	sp, r7
 8006b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b5e:	4770      	bx	lr
 8006b60:	200003f4 	.word	0x200003f4

08006b64 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 8006b64:	b480      	push	{r7}
 8006b66:	b085      	sub	sp, #20
 8006b68:	af00      	add	r7, sp, #0
 8006b6a:	6078      	str	r0, [r7, #4]
 8006b6c:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8006b6e:	2302      	movs	r3, #2
 8006b70:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 8006b72:	683b      	ldr	r3, [r7, #0]
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	d005      	beq.n	8006b84 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	683a      	ldr	r2, [r7, #0]
 8006b7c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 8006b80:	2300      	movs	r3, #0
 8006b82:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8006b84:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b86:	4618      	mov	r0, r3
 8006b88:	3714      	adds	r7, #20
 8006b8a:	46bd      	mov	sp, r7
 8006b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b90:	4770      	bx	lr

08006b92 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 8006b92:	b480      	push	{r7}
 8006b94:	b087      	sub	sp, #28
 8006b96:	af00      	add	r7, sp, #0
 8006b98:	60f8      	str	r0, [r7, #12]
 8006b9a:	60b9      	str	r1, [r7, #8]
 8006b9c:	4613      	mov	r3, r2
 8006b9e:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006ba6:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8006ba8:	697b      	ldr	r3, [r7, #20]
 8006baa:	68ba      	ldr	r2, [r7, #8]
 8006bac:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8006bb0:	88fa      	ldrh	r2, [r7, #6]
 8006bb2:	697b      	ldr	r3, [r7, #20]
 8006bb4:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 8006bb8:	2300      	movs	r3, #0
}
 8006bba:	4618      	mov	r0, r3
 8006bbc:	371c      	adds	r7, #28
 8006bbe:	46bd      	mov	sp, r7
 8006bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bc4:	4770      	bx	lr

08006bc6 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 8006bc6:	b480      	push	{r7}
 8006bc8:	b085      	sub	sp, #20
 8006bca:	af00      	add	r7, sp, #0
 8006bcc:	6078      	str	r0, [r7, #4]
 8006bce:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006bd6:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	683a      	ldr	r2, [r7, #0]
 8006bdc:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 8006be0:	2300      	movs	r3, #0
}
 8006be2:	4618      	mov	r0, r3
 8006be4:	3714      	adds	r7, #20
 8006be6:	46bd      	mov	sp, r7
 8006be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bec:	4770      	bx	lr

08006bee <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8006bee:	b580      	push	{r7, lr}
 8006bf0:	b084      	sub	sp, #16
 8006bf2:	af00      	add	r7, sp, #0
 8006bf4:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006bfc:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	d01c      	beq.n	8006c42 <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	d115      	bne.n	8006c3e <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	2201      	movs	r2, #1
 8006c16:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8006c30:	b29b      	uxth	r3, r3
 8006c32:	2181      	movs	r1, #129	; 0x81
 8006c34:	6878      	ldr	r0, [r7, #4]
 8006c36:	f001 fce5 	bl	8008604 <USBD_LL_Transmit>

      return USBD_OK;
 8006c3a:	2300      	movs	r3, #0
 8006c3c:	e002      	b.n	8006c44 <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 8006c3e:	2301      	movs	r3, #1
 8006c40:	e000      	b.n	8006c44 <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 8006c42:	2302      	movs	r3, #2
  }
}
 8006c44:	4618      	mov	r0, r3
 8006c46:	3710      	adds	r7, #16
 8006c48:	46bd      	mov	sp, r7
 8006c4a:	bd80      	pop	{r7, pc}

08006c4c <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8006c4c:	b580      	push	{r7, lr}
 8006c4e:	b084      	sub	sp, #16
 8006c50:	af00      	add	r7, sp, #0
 8006c52:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006c5a:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	d017      	beq.n	8006c96 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	7c1b      	ldrb	r3, [r3, #16]
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	d109      	bne.n	8006c82 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006c74:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006c78:	2101      	movs	r1, #1
 8006c7a:	6878      	ldr	r0, [r7, #4]
 8006c7c:	f001 fce5 	bl	800864a <USBD_LL_PrepareReceive>
 8006c80:	e007      	b.n	8006c92 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006c88:	2340      	movs	r3, #64	; 0x40
 8006c8a:	2101      	movs	r1, #1
 8006c8c:	6878      	ldr	r0, [r7, #4]
 8006c8e:	f001 fcdc 	bl	800864a <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8006c92:	2300      	movs	r3, #0
 8006c94:	e000      	b.n	8006c98 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 8006c96:	2302      	movs	r3, #2
  }
}
 8006c98:	4618      	mov	r0, r3
 8006c9a:	3710      	adds	r7, #16
 8006c9c:	46bd      	mov	sp, r7
 8006c9e:	bd80      	pop	{r7, pc}

08006ca0 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8006ca0:	b580      	push	{r7, lr}
 8006ca2:	b084      	sub	sp, #16
 8006ca4:	af00      	add	r7, sp, #0
 8006ca6:	60f8      	str	r0, [r7, #12]
 8006ca8:	60b9      	str	r1, [r7, #8]
 8006caa:	4613      	mov	r3, r2
 8006cac:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	d101      	bne.n	8006cb8 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8006cb4:	2302      	movs	r3, #2
 8006cb6:	e01a      	b.n	8006cee <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	d003      	beq.n	8006cca <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	2200      	movs	r2, #0
 8006cc6:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8006cca:	68bb      	ldr	r3, [r7, #8]
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	d003      	beq.n	8006cd8 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	68ba      	ldr	r2, [r7, #8]
 8006cd4:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	2201      	movs	r2, #1
 8006cdc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	79fa      	ldrb	r2, [r7, #7]
 8006ce4:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8006ce6:	68f8      	ldr	r0, [r7, #12]
 8006ce8:	f001 fb48 	bl	800837c <USBD_LL_Init>

  return USBD_OK;
 8006cec:	2300      	movs	r3, #0
}
 8006cee:	4618      	mov	r0, r3
 8006cf0:	3710      	adds	r7, #16
 8006cf2:	46bd      	mov	sp, r7
 8006cf4:	bd80      	pop	{r7, pc}

08006cf6 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8006cf6:	b480      	push	{r7}
 8006cf8:	b085      	sub	sp, #20
 8006cfa:	af00      	add	r7, sp, #0
 8006cfc:	6078      	str	r0, [r7, #4]
 8006cfe:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8006d00:	2300      	movs	r3, #0
 8006d02:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 8006d04:	683b      	ldr	r3, [r7, #0]
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	d006      	beq.n	8006d18 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	683a      	ldr	r2, [r7, #0]
 8006d0e:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 8006d12:	2300      	movs	r3, #0
 8006d14:	73fb      	strb	r3, [r7, #15]
 8006d16:	e001      	b.n	8006d1c <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8006d18:	2302      	movs	r3, #2
 8006d1a:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8006d1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d1e:	4618      	mov	r0, r3
 8006d20:	3714      	adds	r7, #20
 8006d22:	46bd      	mov	sp, r7
 8006d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d28:	4770      	bx	lr

08006d2a <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8006d2a:	b580      	push	{r7, lr}
 8006d2c:	b082      	sub	sp, #8
 8006d2e:	af00      	add	r7, sp, #0
 8006d30:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8006d32:	6878      	ldr	r0, [r7, #4]
 8006d34:	f001 fb7c 	bl	8008430 <USBD_LL_Start>

  return USBD_OK;
 8006d38:	2300      	movs	r3, #0
}
 8006d3a:	4618      	mov	r0, r3
 8006d3c:	3708      	adds	r7, #8
 8006d3e:	46bd      	mov	sp, r7
 8006d40:	bd80      	pop	{r7, pc}

08006d42 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8006d42:	b480      	push	{r7}
 8006d44:	b083      	sub	sp, #12
 8006d46:	af00      	add	r7, sp, #0
 8006d48:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006d4a:	2300      	movs	r3, #0
}
 8006d4c:	4618      	mov	r0, r3
 8006d4e:	370c      	adds	r7, #12
 8006d50:	46bd      	mov	sp, r7
 8006d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d56:	4770      	bx	lr

08006d58 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8006d58:	b580      	push	{r7, lr}
 8006d5a:	b084      	sub	sp, #16
 8006d5c:	af00      	add	r7, sp, #0
 8006d5e:	6078      	str	r0, [r7, #4]
 8006d60:	460b      	mov	r3, r1
 8006d62:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8006d64:	2302      	movs	r3, #2
 8006d66:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	d00c      	beq.n	8006d8c <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	78fa      	ldrb	r2, [r7, #3]
 8006d7c:	4611      	mov	r1, r2
 8006d7e:	6878      	ldr	r0, [r7, #4]
 8006d80:	4798      	blx	r3
 8006d82:	4603      	mov	r3, r0
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	d101      	bne.n	8006d8c <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8006d88:	2300      	movs	r3, #0
 8006d8a:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8006d8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d8e:	4618      	mov	r0, r3
 8006d90:	3710      	adds	r7, #16
 8006d92:	46bd      	mov	sp, r7
 8006d94:	bd80      	pop	{r7, pc}

08006d96 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8006d96:	b580      	push	{r7, lr}
 8006d98:	b082      	sub	sp, #8
 8006d9a:	af00      	add	r7, sp, #0
 8006d9c:	6078      	str	r0, [r7, #4]
 8006d9e:	460b      	mov	r3, r1
 8006da0:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006da8:	685b      	ldr	r3, [r3, #4]
 8006daa:	78fa      	ldrb	r2, [r7, #3]
 8006dac:	4611      	mov	r1, r2
 8006dae:	6878      	ldr	r0, [r7, #4]
 8006db0:	4798      	blx	r3

  return USBD_OK;
 8006db2:	2300      	movs	r3, #0
}
 8006db4:	4618      	mov	r0, r3
 8006db6:	3708      	adds	r7, #8
 8006db8:	46bd      	mov	sp, r7
 8006dba:	bd80      	pop	{r7, pc}

08006dbc <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8006dbc:	b580      	push	{r7, lr}
 8006dbe:	b082      	sub	sp, #8
 8006dc0:	af00      	add	r7, sp, #0
 8006dc2:	6078      	str	r0, [r7, #4]
 8006dc4:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8006dcc:	6839      	ldr	r1, [r7, #0]
 8006dce:	4618      	mov	r0, r3
 8006dd0:	f000 fece 	bl	8007b70 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	2201      	movs	r2, #1
 8006dd8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8006de2:	461a      	mov	r2, r3
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8006df0:	f003 031f 	and.w	r3, r3, #31
 8006df4:	2b01      	cmp	r3, #1
 8006df6:	d00c      	beq.n	8006e12 <USBD_LL_SetupStage+0x56>
 8006df8:	2b01      	cmp	r3, #1
 8006dfa:	d302      	bcc.n	8006e02 <USBD_LL_SetupStage+0x46>
 8006dfc:	2b02      	cmp	r3, #2
 8006dfe:	d010      	beq.n	8006e22 <USBD_LL_SetupStage+0x66>
 8006e00:	e017      	b.n	8006e32 <USBD_LL_SetupStage+0x76>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8006e08:	4619      	mov	r1, r3
 8006e0a:	6878      	ldr	r0, [r7, #4]
 8006e0c:	f000 f9ce 	bl	80071ac <USBD_StdDevReq>
      break;
 8006e10:	e01a      	b.n	8006e48 <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8006e18:	4619      	mov	r1, r3
 8006e1a:	6878      	ldr	r0, [r7, #4]
 8006e1c:	f000 fa30 	bl	8007280 <USBD_StdItfReq>
      break;
 8006e20:	e012      	b.n	8006e48 <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8006e28:	4619      	mov	r1, r3
 8006e2a:	6878      	ldr	r0, [r7, #4]
 8006e2c:	f000 fa6e 	bl	800730c <USBD_StdEPReq>
      break;
 8006e30:	e00a      	b.n	8006e48 <USBD_LL_SetupStage+0x8c>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8006e38:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006e3c:	b2db      	uxtb	r3, r3
 8006e3e:	4619      	mov	r1, r3
 8006e40:	6878      	ldr	r0, [r7, #4]
 8006e42:	f001 fb55 	bl	80084f0 <USBD_LL_StallEP>
      break;
 8006e46:	bf00      	nop
  }

  return USBD_OK;
 8006e48:	2300      	movs	r3, #0
}
 8006e4a:	4618      	mov	r0, r3
 8006e4c:	3708      	adds	r7, #8
 8006e4e:	46bd      	mov	sp, r7
 8006e50:	bd80      	pop	{r7, pc}

08006e52 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8006e52:	b580      	push	{r7, lr}
 8006e54:	b086      	sub	sp, #24
 8006e56:	af00      	add	r7, sp, #0
 8006e58:	60f8      	str	r0, [r7, #12]
 8006e5a:	460b      	mov	r3, r1
 8006e5c:	607a      	str	r2, [r7, #4]
 8006e5e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8006e60:	7afb      	ldrb	r3, [r7, #11]
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	d14b      	bne.n	8006efe <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8006e6c:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006e74:	2b03      	cmp	r3, #3
 8006e76:	d134      	bne.n	8006ee2 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8006e78:	697b      	ldr	r3, [r7, #20]
 8006e7a:	68da      	ldr	r2, [r3, #12]
 8006e7c:	697b      	ldr	r3, [r7, #20]
 8006e7e:	691b      	ldr	r3, [r3, #16]
 8006e80:	429a      	cmp	r2, r3
 8006e82:	d919      	bls.n	8006eb8 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8006e84:	697b      	ldr	r3, [r7, #20]
 8006e86:	68da      	ldr	r2, [r3, #12]
 8006e88:	697b      	ldr	r3, [r7, #20]
 8006e8a:	691b      	ldr	r3, [r3, #16]
 8006e8c:	1ad2      	subs	r2, r2, r3
 8006e8e:	697b      	ldr	r3, [r7, #20]
 8006e90:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8006e92:	697b      	ldr	r3, [r7, #20]
 8006e94:	68da      	ldr	r2, [r3, #12]
 8006e96:	697b      	ldr	r3, [r7, #20]
 8006e98:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8006e9a:	429a      	cmp	r2, r3
 8006e9c:	d203      	bcs.n	8006ea6 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8006e9e:	697b      	ldr	r3, [r7, #20]
 8006ea0:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8006ea2:	b29b      	uxth	r3, r3
 8006ea4:	e002      	b.n	8006eac <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8006ea6:	697b      	ldr	r3, [r7, #20]
 8006ea8:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8006eaa:	b29b      	uxth	r3, r3
 8006eac:	461a      	mov	r2, r3
 8006eae:	6879      	ldr	r1, [r7, #4]
 8006eb0:	68f8      	ldr	r0, [r7, #12]
 8006eb2:	f000 ff51 	bl	8007d58 <USBD_CtlContinueRx>
 8006eb6:	e038      	b.n	8006f2a <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006ebe:	691b      	ldr	r3, [r3, #16]
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	d00a      	beq.n	8006eda <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8006eca:	2b03      	cmp	r3, #3
 8006ecc:	d105      	bne.n	8006eda <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006ed4:	691b      	ldr	r3, [r3, #16]
 8006ed6:	68f8      	ldr	r0, [r7, #12]
 8006ed8:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8006eda:	68f8      	ldr	r0, [r7, #12]
 8006edc:	f000 ff4e 	bl	8007d7c <USBD_CtlSendStatus>
 8006ee0:	e023      	b.n	8006f2a <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006ee8:	2b05      	cmp	r3, #5
 8006eea:	d11e      	bne.n	8006f2a <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	2200      	movs	r2, #0
 8006ef0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 8006ef4:	2100      	movs	r1, #0
 8006ef6:	68f8      	ldr	r0, [r7, #12]
 8006ef8:	f001 fafa 	bl	80084f0 <USBD_LL_StallEP>
 8006efc:	e015      	b.n	8006f2a <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006f04:	699b      	ldr	r3, [r3, #24]
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	d00d      	beq.n	8006f26 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8006f10:	2b03      	cmp	r3, #3
 8006f12:	d108      	bne.n	8006f26 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006f1a:	699b      	ldr	r3, [r3, #24]
 8006f1c:	7afa      	ldrb	r2, [r7, #11]
 8006f1e:	4611      	mov	r1, r2
 8006f20:	68f8      	ldr	r0, [r7, #12]
 8006f22:	4798      	blx	r3
 8006f24:	e001      	b.n	8006f2a <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8006f26:	2302      	movs	r3, #2
 8006f28:	e000      	b.n	8006f2c <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8006f2a:	2300      	movs	r3, #0
}
 8006f2c:	4618      	mov	r0, r3
 8006f2e:	3718      	adds	r7, #24
 8006f30:	46bd      	mov	sp, r7
 8006f32:	bd80      	pop	{r7, pc}

08006f34 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8006f34:	b580      	push	{r7, lr}
 8006f36:	b086      	sub	sp, #24
 8006f38:	af00      	add	r7, sp, #0
 8006f3a:	60f8      	str	r0, [r7, #12]
 8006f3c:	460b      	mov	r3, r1
 8006f3e:	607a      	str	r2, [r7, #4]
 8006f40:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8006f42:	7afb      	ldrb	r3, [r7, #11]
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	d17f      	bne.n	8007048 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	3314      	adds	r3, #20
 8006f4c:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8006f4e:	68fb      	ldr	r3, [r7, #12]
 8006f50:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006f54:	2b02      	cmp	r3, #2
 8006f56:	d15c      	bne.n	8007012 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8006f58:	697b      	ldr	r3, [r7, #20]
 8006f5a:	68da      	ldr	r2, [r3, #12]
 8006f5c:	697b      	ldr	r3, [r7, #20]
 8006f5e:	691b      	ldr	r3, [r3, #16]
 8006f60:	429a      	cmp	r2, r3
 8006f62:	d915      	bls.n	8006f90 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8006f64:	697b      	ldr	r3, [r7, #20]
 8006f66:	68da      	ldr	r2, [r3, #12]
 8006f68:	697b      	ldr	r3, [r7, #20]
 8006f6a:	691b      	ldr	r3, [r3, #16]
 8006f6c:	1ad2      	subs	r2, r2, r3
 8006f6e:	697b      	ldr	r3, [r7, #20]
 8006f70:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8006f72:	697b      	ldr	r3, [r7, #20]
 8006f74:	68db      	ldr	r3, [r3, #12]
 8006f76:	b29b      	uxth	r3, r3
 8006f78:	461a      	mov	r2, r3
 8006f7a:	6879      	ldr	r1, [r7, #4]
 8006f7c:	68f8      	ldr	r0, [r7, #12]
 8006f7e:	f000 febb 	bl	8007cf8 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006f82:	2300      	movs	r3, #0
 8006f84:	2200      	movs	r2, #0
 8006f86:	2100      	movs	r1, #0
 8006f88:	68f8      	ldr	r0, [r7, #12]
 8006f8a:	f001 fb5e 	bl	800864a <USBD_LL_PrepareReceive>
 8006f8e:	e04e      	b.n	800702e <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8006f90:	697b      	ldr	r3, [r7, #20]
 8006f92:	689b      	ldr	r3, [r3, #8]
 8006f94:	697a      	ldr	r2, [r7, #20]
 8006f96:	6912      	ldr	r2, [r2, #16]
 8006f98:	fbb3 f1f2 	udiv	r1, r3, r2
 8006f9c:	fb02 f201 	mul.w	r2, r2, r1
 8006fa0:	1a9b      	subs	r3, r3, r2
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	d11c      	bne.n	8006fe0 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 8006fa6:	697b      	ldr	r3, [r7, #20]
 8006fa8:	689a      	ldr	r2, [r3, #8]
 8006faa:	697b      	ldr	r3, [r7, #20]
 8006fac:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8006fae:	429a      	cmp	r2, r3
 8006fb0:	d316      	bcc.n	8006fe0 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8006fb2:	697b      	ldr	r3, [r7, #20]
 8006fb4:	689a      	ldr	r2, [r3, #8]
 8006fb6:	68fb      	ldr	r3, [r7, #12]
 8006fb8:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8006fbc:	429a      	cmp	r2, r3
 8006fbe:	d20f      	bcs.n	8006fe0 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8006fc0:	2200      	movs	r2, #0
 8006fc2:	2100      	movs	r1, #0
 8006fc4:	68f8      	ldr	r0, [r7, #12]
 8006fc6:	f000 fe97 	bl	8007cf8 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8006fca:	68fb      	ldr	r3, [r7, #12]
 8006fcc:	2200      	movs	r2, #0
 8006fce:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006fd2:	2300      	movs	r3, #0
 8006fd4:	2200      	movs	r2, #0
 8006fd6:	2100      	movs	r1, #0
 8006fd8:	68f8      	ldr	r0, [r7, #12]
 8006fda:	f001 fb36 	bl	800864a <USBD_LL_PrepareReceive>
 8006fde:	e026      	b.n	800702e <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006fe6:	68db      	ldr	r3, [r3, #12]
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	d00a      	beq.n	8007002 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8006ff2:	2b03      	cmp	r3, #3
 8006ff4:	d105      	bne.n	8007002 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006ffc:	68db      	ldr	r3, [r3, #12]
 8006ffe:	68f8      	ldr	r0, [r7, #12]
 8007000:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8007002:	2180      	movs	r1, #128	; 0x80
 8007004:	68f8      	ldr	r0, [r7, #12]
 8007006:	f001 fa73 	bl	80084f0 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 800700a:	68f8      	ldr	r0, [r7, #12]
 800700c:	f000 fec9 	bl	8007da2 <USBD_CtlReceiveStatus>
 8007010:	e00d      	b.n	800702e <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8007012:	68fb      	ldr	r3, [r7, #12]
 8007014:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007018:	2b04      	cmp	r3, #4
 800701a:	d004      	beq.n	8007026 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 800701c:	68fb      	ldr	r3, [r7, #12]
 800701e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8007022:	2b00      	cmp	r3, #0
 8007024:	d103      	bne.n	800702e <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8007026:	2180      	movs	r1, #128	; 0x80
 8007028:	68f8      	ldr	r0, [r7, #12]
 800702a:	f001 fa61 	bl	80084f0 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8007034:	2b01      	cmp	r3, #1
 8007036:	d11d      	bne.n	8007074 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8007038:	68f8      	ldr	r0, [r7, #12]
 800703a:	f7ff fe82 	bl	8006d42 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	2200      	movs	r2, #0
 8007042:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8007046:	e015      	b.n	8007074 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800704e:	695b      	ldr	r3, [r3, #20]
 8007050:	2b00      	cmp	r3, #0
 8007052:	d00d      	beq.n	8007070 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 800705a:	2b03      	cmp	r3, #3
 800705c:	d108      	bne.n	8007070 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007064:	695b      	ldr	r3, [r3, #20]
 8007066:	7afa      	ldrb	r2, [r7, #11]
 8007068:	4611      	mov	r1, r2
 800706a:	68f8      	ldr	r0, [r7, #12]
 800706c:	4798      	blx	r3
 800706e:	e001      	b.n	8007074 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8007070:	2302      	movs	r3, #2
 8007072:	e000      	b.n	8007076 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8007074:	2300      	movs	r3, #0
}
 8007076:	4618      	mov	r0, r3
 8007078:	3718      	adds	r7, #24
 800707a:	46bd      	mov	sp, r7
 800707c:	bd80      	pop	{r7, pc}

0800707e <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800707e:	b580      	push	{r7, lr}
 8007080:	b082      	sub	sp, #8
 8007082:	af00      	add	r7, sp, #0
 8007084:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007086:	2340      	movs	r3, #64	; 0x40
 8007088:	2200      	movs	r2, #0
 800708a:	2100      	movs	r1, #0
 800708c:	6878      	ldr	r0, [r7, #4]
 800708e:	f001 f9ea 	bl	8008466 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	2201      	movs	r2, #1
 8007096:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	2240      	movs	r2, #64	; 0x40
 800709e:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80070a2:	2340      	movs	r3, #64	; 0x40
 80070a4:	2200      	movs	r2, #0
 80070a6:	2180      	movs	r1, #128	; 0x80
 80070a8:	6878      	ldr	r0, [r7, #4]
 80070aa:	f001 f9dc 	bl	8008466 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	2201      	movs	r2, #1
 80070b2:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	2240      	movs	r2, #64	; 0x40
 80070b8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	2201      	movs	r2, #1
 80070be:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	2200      	movs	r2, #0
 80070c6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	2200      	movs	r2, #0
 80070ce:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	2200      	movs	r2, #0
 80070d4:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80070de:	2b00      	cmp	r3, #0
 80070e0:	d009      	beq.n	80070f6 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80070e8:	685b      	ldr	r3, [r3, #4]
 80070ea:	687a      	ldr	r2, [r7, #4]
 80070ec:	6852      	ldr	r2, [r2, #4]
 80070ee:	b2d2      	uxtb	r2, r2
 80070f0:	4611      	mov	r1, r2
 80070f2:	6878      	ldr	r0, [r7, #4]
 80070f4:	4798      	blx	r3
  }

  return USBD_OK;
 80070f6:	2300      	movs	r3, #0
}
 80070f8:	4618      	mov	r0, r3
 80070fa:	3708      	adds	r7, #8
 80070fc:	46bd      	mov	sp, r7
 80070fe:	bd80      	pop	{r7, pc}

08007100 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8007100:	b480      	push	{r7}
 8007102:	b083      	sub	sp, #12
 8007104:	af00      	add	r7, sp, #0
 8007106:	6078      	str	r0, [r7, #4]
 8007108:	460b      	mov	r3, r1
 800710a:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	78fa      	ldrb	r2, [r7, #3]
 8007110:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8007112:	2300      	movs	r3, #0
}
 8007114:	4618      	mov	r0, r3
 8007116:	370c      	adds	r7, #12
 8007118:	46bd      	mov	sp, r7
 800711a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800711e:	4770      	bx	lr

08007120 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8007120:	b480      	push	{r7}
 8007122:	b083      	sub	sp, #12
 8007124:	af00      	add	r7, sp, #0
 8007126:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	2204      	movs	r2, #4
 8007138:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800713c:	2300      	movs	r3, #0
}
 800713e:	4618      	mov	r0, r3
 8007140:	370c      	adds	r7, #12
 8007142:	46bd      	mov	sp, r7
 8007144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007148:	4770      	bx	lr

0800714a <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800714a:	b480      	push	{r7}
 800714c:	b083      	sub	sp, #12
 800714e:	af00      	add	r7, sp, #0
 8007150:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007158:	2b04      	cmp	r3, #4
 800715a:	d105      	bne.n	8007168 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8007168:	2300      	movs	r3, #0
}
 800716a:	4618      	mov	r0, r3
 800716c:	370c      	adds	r7, #12
 800716e:	46bd      	mov	sp, r7
 8007170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007174:	4770      	bx	lr

08007176 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8007176:	b580      	push	{r7, lr}
 8007178:	b082      	sub	sp, #8
 800717a:	af00      	add	r7, sp, #0
 800717c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007184:	2b03      	cmp	r3, #3
 8007186:	d10b      	bne.n	80071a0 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800718e:	69db      	ldr	r3, [r3, #28]
 8007190:	2b00      	cmp	r3, #0
 8007192:	d005      	beq.n	80071a0 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800719a:	69db      	ldr	r3, [r3, #28]
 800719c:	6878      	ldr	r0, [r7, #4]
 800719e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80071a0:	2300      	movs	r3, #0
}
 80071a2:	4618      	mov	r0, r3
 80071a4:	3708      	adds	r7, #8
 80071a6:	46bd      	mov	sp, r7
 80071a8:	bd80      	pop	{r7, pc}
	...

080071ac <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 80071ac:	b580      	push	{r7, lr}
 80071ae:	b084      	sub	sp, #16
 80071b0:	af00      	add	r7, sp, #0
 80071b2:	6078      	str	r0, [r7, #4]
 80071b4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80071b6:	2300      	movs	r3, #0
 80071b8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80071ba:	683b      	ldr	r3, [r7, #0]
 80071bc:	781b      	ldrb	r3, [r3, #0]
 80071be:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80071c2:	2b20      	cmp	r3, #32
 80071c4:	d004      	beq.n	80071d0 <USBD_StdDevReq+0x24>
 80071c6:	2b40      	cmp	r3, #64	; 0x40
 80071c8:	d002      	beq.n	80071d0 <USBD_StdDevReq+0x24>
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	d008      	beq.n	80071e0 <USBD_StdDevReq+0x34>
 80071ce:	e04c      	b.n	800726a <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80071d6:	689b      	ldr	r3, [r3, #8]
 80071d8:	6839      	ldr	r1, [r7, #0]
 80071da:	6878      	ldr	r0, [r7, #4]
 80071dc:	4798      	blx	r3
      break;
 80071de:	e049      	b.n	8007274 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80071e0:	683b      	ldr	r3, [r7, #0]
 80071e2:	785b      	ldrb	r3, [r3, #1]
 80071e4:	2b09      	cmp	r3, #9
 80071e6:	d83a      	bhi.n	800725e <USBD_StdDevReq+0xb2>
 80071e8:	a201      	add	r2, pc, #4	; (adr r2, 80071f0 <USBD_StdDevReq+0x44>)
 80071ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071ee:	bf00      	nop
 80071f0:	08007241 	.word	0x08007241
 80071f4:	08007255 	.word	0x08007255
 80071f8:	0800725f 	.word	0x0800725f
 80071fc:	0800724b 	.word	0x0800724b
 8007200:	0800725f 	.word	0x0800725f
 8007204:	08007223 	.word	0x08007223
 8007208:	08007219 	.word	0x08007219
 800720c:	0800725f 	.word	0x0800725f
 8007210:	08007237 	.word	0x08007237
 8007214:	0800722d 	.word	0x0800722d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8007218:	6839      	ldr	r1, [r7, #0]
 800721a:	6878      	ldr	r0, [r7, #4]
 800721c:	f000 f9d4 	bl	80075c8 <USBD_GetDescriptor>
          break;
 8007220:	e022      	b.n	8007268 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8007222:	6839      	ldr	r1, [r7, #0]
 8007224:	6878      	ldr	r0, [r7, #4]
 8007226:	f000 fb37 	bl	8007898 <USBD_SetAddress>
          break;
 800722a:	e01d      	b.n	8007268 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 800722c:	6839      	ldr	r1, [r7, #0]
 800722e:	6878      	ldr	r0, [r7, #4]
 8007230:	f000 fb74 	bl	800791c <USBD_SetConfig>
          break;
 8007234:	e018      	b.n	8007268 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8007236:	6839      	ldr	r1, [r7, #0]
 8007238:	6878      	ldr	r0, [r7, #4]
 800723a:	f000 fbfd 	bl	8007a38 <USBD_GetConfig>
          break;
 800723e:	e013      	b.n	8007268 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8007240:	6839      	ldr	r1, [r7, #0]
 8007242:	6878      	ldr	r0, [r7, #4]
 8007244:	f000 fc2c 	bl	8007aa0 <USBD_GetStatus>
          break;
 8007248:	e00e      	b.n	8007268 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800724a:	6839      	ldr	r1, [r7, #0]
 800724c:	6878      	ldr	r0, [r7, #4]
 800724e:	f000 fc5a 	bl	8007b06 <USBD_SetFeature>
          break;
 8007252:	e009      	b.n	8007268 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8007254:	6839      	ldr	r1, [r7, #0]
 8007256:	6878      	ldr	r0, [r7, #4]
 8007258:	f000 fc69 	bl	8007b2e <USBD_ClrFeature>
          break;
 800725c:	e004      	b.n	8007268 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 800725e:	6839      	ldr	r1, [r7, #0]
 8007260:	6878      	ldr	r0, [r7, #4]
 8007262:	f000 fcc2 	bl	8007bea <USBD_CtlError>
          break;
 8007266:	bf00      	nop
      }
      break;
 8007268:	e004      	b.n	8007274 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 800726a:	6839      	ldr	r1, [r7, #0]
 800726c:	6878      	ldr	r0, [r7, #4]
 800726e:	f000 fcbc 	bl	8007bea <USBD_CtlError>
      break;
 8007272:	bf00      	nop
  }

  return ret;
 8007274:	7bfb      	ldrb	r3, [r7, #15]
}
 8007276:	4618      	mov	r0, r3
 8007278:	3710      	adds	r7, #16
 800727a:	46bd      	mov	sp, r7
 800727c:	bd80      	pop	{r7, pc}
 800727e:	bf00      	nop

08007280 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8007280:	b580      	push	{r7, lr}
 8007282:	b084      	sub	sp, #16
 8007284:	af00      	add	r7, sp, #0
 8007286:	6078      	str	r0, [r7, #4]
 8007288:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800728a:	2300      	movs	r3, #0
 800728c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800728e:	683b      	ldr	r3, [r7, #0]
 8007290:	781b      	ldrb	r3, [r3, #0]
 8007292:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007296:	2b20      	cmp	r3, #32
 8007298:	d003      	beq.n	80072a2 <USBD_StdItfReq+0x22>
 800729a:	2b40      	cmp	r3, #64	; 0x40
 800729c:	d001      	beq.n	80072a2 <USBD_StdItfReq+0x22>
 800729e:	2b00      	cmp	r3, #0
 80072a0:	d12a      	bne.n	80072f8 <USBD_StdItfReq+0x78>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80072a8:	3b01      	subs	r3, #1
 80072aa:	2b02      	cmp	r3, #2
 80072ac:	d81d      	bhi.n	80072ea <USBD_StdItfReq+0x6a>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80072ae:	683b      	ldr	r3, [r7, #0]
 80072b0:	889b      	ldrh	r3, [r3, #4]
 80072b2:	b2db      	uxtb	r3, r3
 80072b4:	2b01      	cmp	r3, #1
 80072b6:	d813      	bhi.n	80072e0 <USBD_StdItfReq+0x60>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80072be:	689b      	ldr	r3, [r3, #8]
 80072c0:	6839      	ldr	r1, [r7, #0]
 80072c2:	6878      	ldr	r0, [r7, #4]
 80072c4:	4798      	blx	r3
 80072c6:	4603      	mov	r3, r0
 80072c8:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80072ca:	683b      	ldr	r3, [r7, #0]
 80072cc:	88db      	ldrh	r3, [r3, #6]
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	d110      	bne.n	80072f4 <USBD_StdItfReq+0x74>
 80072d2:	7bfb      	ldrb	r3, [r7, #15]
 80072d4:	2b00      	cmp	r3, #0
 80072d6:	d10d      	bne.n	80072f4 <USBD_StdItfReq+0x74>
            {
              USBD_CtlSendStatus(pdev);
 80072d8:	6878      	ldr	r0, [r7, #4]
 80072da:	f000 fd4f 	bl	8007d7c <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80072de:	e009      	b.n	80072f4 <USBD_StdItfReq+0x74>
            USBD_CtlError(pdev, req);
 80072e0:	6839      	ldr	r1, [r7, #0]
 80072e2:	6878      	ldr	r0, [r7, #4]
 80072e4:	f000 fc81 	bl	8007bea <USBD_CtlError>
          break;
 80072e8:	e004      	b.n	80072f4 <USBD_StdItfReq+0x74>

        default:
          USBD_CtlError(pdev, req);
 80072ea:	6839      	ldr	r1, [r7, #0]
 80072ec:	6878      	ldr	r0, [r7, #4]
 80072ee:	f000 fc7c 	bl	8007bea <USBD_CtlError>
          break;
 80072f2:	e000      	b.n	80072f6 <USBD_StdItfReq+0x76>
          break;
 80072f4:	bf00      	nop
      }
      break;
 80072f6:	e004      	b.n	8007302 <USBD_StdItfReq+0x82>

    default:
      USBD_CtlError(pdev, req);
 80072f8:	6839      	ldr	r1, [r7, #0]
 80072fa:	6878      	ldr	r0, [r7, #4]
 80072fc:	f000 fc75 	bl	8007bea <USBD_CtlError>
      break;
 8007300:	bf00      	nop
  }

  return USBD_OK;
 8007302:	2300      	movs	r3, #0
}
 8007304:	4618      	mov	r0, r3
 8007306:	3710      	adds	r7, #16
 8007308:	46bd      	mov	sp, r7
 800730a:	bd80      	pop	{r7, pc}

0800730c <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 800730c:	b580      	push	{r7, lr}
 800730e:	b084      	sub	sp, #16
 8007310:	af00      	add	r7, sp, #0
 8007312:	6078      	str	r0, [r7, #4]
 8007314:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8007316:	2300      	movs	r3, #0
 8007318:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 800731a:	683b      	ldr	r3, [r7, #0]
 800731c:	889b      	ldrh	r3, [r3, #4]
 800731e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007320:	683b      	ldr	r3, [r7, #0]
 8007322:	781b      	ldrb	r3, [r3, #0]
 8007324:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007328:	2b20      	cmp	r3, #32
 800732a:	d004      	beq.n	8007336 <USBD_StdEPReq+0x2a>
 800732c:	2b40      	cmp	r3, #64	; 0x40
 800732e:	d002      	beq.n	8007336 <USBD_StdEPReq+0x2a>
 8007330:	2b00      	cmp	r3, #0
 8007332:	d008      	beq.n	8007346 <USBD_StdEPReq+0x3a>
 8007334:	e13d      	b.n	80075b2 <USBD_StdEPReq+0x2a6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800733c:	689b      	ldr	r3, [r3, #8]
 800733e:	6839      	ldr	r1, [r7, #0]
 8007340:	6878      	ldr	r0, [r7, #4]
 8007342:	4798      	blx	r3
      break;
 8007344:	e13a      	b.n	80075bc <USBD_StdEPReq+0x2b0>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8007346:	683b      	ldr	r3, [r7, #0]
 8007348:	781b      	ldrb	r3, [r3, #0]
 800734a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800734e:	2b20      	cmp	r3, #32
 8007350:	d10a      	bne.n	8007368 <USBD_StdEPReq+0x5c>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007358:	689b      	ldr	r3, [r3, #8]
 800735a:	6839      	ldr	r1, [r7, #0]
 800735c:	6878      	ldr	r0, [r7, #4]
 800735e:	4798      	blx	r3
 8007360:	4603      	mov	r3, r0
 8007362:	73fb      	strb	r3, [r7, #15]

        return ret;
 8007364:	7bfb      	ldrb	r3, [r7, #15]
 8007366:	e12a      	b.n	80075be <USBD_StdEPReq+0x2b2>
      }

      switch (req->bRequest)
 8007368:	683b      	ldr	r3, [r7, #0]
 800736a:	785b      	ldrb	r3, [r3, #1]
 800736c:	2b01      	cmp	r3, #1
 800736e:	d03e      	beq.n	80073ee <USBD_StdEPReq+0xe2>
 8007370:	2b03      	cmp	r3, #3
 8007372:	d002      	beq.n	800737a <USBD_StdEPReq+0x6e>
 8007374:	2b00      	cmp	r3, #0
 8007376:	d070      	beq.n	800745a <USBD_StdEPReq+0x14e>
 8007378:	e115      	b.n	80075a6 <USBD_StdEPReq+0x29a>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007380:	2b02      	cmp	r3, #2
 8007382:	d002      	beq.n	800738a <USBD_StdEPReq+0x7e>
 8007384:	2b03      	cmp	r3, #3
 8007386:	d015      	beq.n	80073b4 <USBD_StdEPReq+0xa8>
 8007388:	e02b      	b.n	80073e2 <USBD_StdEPReq+0xd6>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800738a:	7bbb      	ldrb	r3, [r7, #14]
 800738c:	2b00      	cmp	r3, #0
 800738e:	d00c      	beq.n	80073aa <USBD_StdEPReq+0x9e>
 8007390:	7bbb      	ldrb	r3, [r7, #14]
 8007392:	2b80      	cmp	r3, #128	; 0x80
 8007394:	d009      	beq.n	80073aa <USBD_StdEPReq+0x9e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8007396:	7bbb      	ldrb	r3, [r7, #14]
 8007398:	4619      	mov	r1, r3
 800739a:	6878      	ldr	r0, [r7, #4]
 800739c:	f001 f8a8 	bl	80084f0 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 80073a0:	2180      	movs	r1, #128	; 0x80
 80073a2:	6878      	ldr	r0, [r7, #4]
 80073a4:	f001 f8a4 	bl	80084f0 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80073a8:	e020      	b.n	80073ec <USBD_StdEPReq+0xe0>
                USBD_CtlError(pdev, req);
 80073aa:	6839      	ldr	r1, [r7, #0]
 80073ac:	6878      	ldr	r0, [r7, #4]
 80073ae:	f000 fc1c 	bl	8007bea <USBD_CtlError>
              break;
 80073b2:	e01b      	b.n	80073ec <USBD_StdEPReq+0xe0>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80073b4:	683b      	ldr	r3, [r7, #0]
 80073b6:	885b      	ldrh	r3, [r3, #2]
 80073b8:	2b00      	cmp	r3, #0
 80073ba:	d10e      	bne.n	80073da <USBD_StdEPReq+0xce>
              {
                if ((ep_addr != 0x00U) &&
 80073bc:	7bbb      	ldrb	r3, [r7, #14]
 80073be:	2b00      	cmp	r3, #0
 80073c0:	d00b      	beq.n	80073da <USBD_StdEPReq+0xce>
 80073c2:	7bbb      	ldrb	r3, [r7, #14]
 80073c4:	2b80      	cmp	r3, #128	; 0x80
 80073c6:	d008      	beq.n	80073da <USBD_StdEPReq+0xce>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80073c8:	683b      	ldr	r3, [r7, #0]
 80073ca:	88db      	ldrh	r3, [r3, #6]
 80073cc:	2b00      	cmp	r3, #0
 80073ce:	d104      	bne.n	80073da <USBD_StdEPReq+0xce>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 80073d0:	7bbb      	ldrb	r3, [r7, #14]
 80073d2:	4619      	mov	r1, r3
 80073d4:	6878      	ldr	r0, [r7, #4]
 80073d6:	f001 f88b 	bl	80084f0 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 80073da:	6878      	ldr	r0, [r7, #4]
 80073dc:	f000 fcce 	bl	8007d7c <USBD_CtlSendStatus>

              break;
 80073e0:	e004      	b.n	80073ec <USBD_StdEPReq+0xe0>

            default:
              USBD_CtlError(pdev, req);
 80073e2:	6839      	ldr	r1, [r7, #0]
 80073e4:	6878      	ldr	r0, [r7, #4]
 80073e6:	f000 fc00 	bl	8007bea <USBD_CtlError>
              break;
 80073ea:	bf00      	nop
          }
          break;
 80073ec:	e0e0      	b.n	80075b0 <USBD_StdEPReq+0x2a4>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80073f4:	2b02      	cmp	r3, #2
 80073f6:	d002      	beq.n	80073fe <USBD_StdEPReq+0xf2>
 80073f8:	2b03      	cmp	r3, #3
 80073fa:	d015      	beq.n	8007428 <USBD_StdEPReq+0x11c>
 80073fc:	e026      	b.n	800744c <USBD_StdEPReq+0x140>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80073fe:	7bbb      	ldrb	r3, [r7, #14]
 8007400:	2b00      	cmp	r3, #0
 8007402:	d00c      	beq.n	800741e <USBD_StdEPReq+0x112>
 8007404:	7bbb      	ldrb	r3, [r7, #14]
 8007406:	2b80      	cmp	r3, #128	; 0x80
 8007408:	d009      	beq.n	800741e <USBD_StdEPReq+0x112>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800740a:	7bbb      	ldrb	r3, [r7, #14]
 800740c:	4619      	mov	r1, r3
 800740e:	6878      	ldr	r0, [r7, #4]
 8007410:	f001 f86e 	bl	80084f0 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8007414:	2180      	movs	r1, #128	; 0x80
 8007416:	6878      	ldr	r0, [r7, #4]
 8007418:	f001 f86a 	bl	80084f0 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800741c:	e01c      	b.n	8007458 <USBD_StdEPReq+0x14c>
                USBD_CtlError(pdev, req);
 800741e:	6839      	ldr	r1, [r7, #0]
 8007420:	6878      	ldr	r0, [r7, #4]
 8007422:	f000 fbe2 	bl	8007bea <USBD_CtlError>
              break;
 8007426:	e017      	b.n	8007458 <USBD_StdEPReq+0x14c>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007428:	683b      	ldr	r3, [r7, #0]
 800742a:	885b      	ldrh	r3, [r3, #2]
 800742c:	2b00      	cmp	r3, #0
 800742e:	d112      	bne.n	8007456 <USBD_StdEPReq+0x14a>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8007430:	7bbb      	ldrb	r3, [r7, #14]
 8007432:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007436:	2b00      	cmp	r3, #0
 8007438:	d004      	beq.n	8007444 <USBD_StdEPReq+0x138>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 800743a:	7bbb      	ldrb	r3, [r7, #14]
 800743c:	4619      	mov	r1, r3
 800743e:	6878      	ldr	r0, [r7, #4]
 8007440:	f001 f875 	bl	800852e <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8007444:	6878      	ldr	r0, [r7, #4]
 8007446:	f000 fc99 	bl	8007d7c <USBD_CtlSendStatus>
              }
              break;
 800744a:	e004      	b.n	8007456 <USBD_StdEPReq+0x14a>

            default:
              USBD_CtlError(pdev, req);
 800744c:	6839      	ldr	r1, [r7, #0]
 800744e:	6878      	ldr	r0, [r7, #4]
 8007450:	f000 fbcb 	bl	8007bea <USBD_CtlError>
              break;
 8007454:	e000      	b.n	8007458 <USBD_StdEPReq+0x14c>
              break;
 8007456:	bf00      	nop
          }
          break;
 8007458:	e0aa      	b.n	80075b0 <USBD_StdEPReq+0x2a4>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007460:	2b02      	cmp	r3, #2
 8007462:	d002      	beq.n	800746a <USBD_StdEPReq+0x15e>
 8007464:	2b03      	cmp	r3, #3
 8007466:	d032      	beq.n	80074ce <USBD_StdEPReq+0x1c2>
 8007468:	e097      	b.n	800759a <USBD_StdEPReq+0x28e>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800746a:	7bbb      	ldrb	r3, [r7, #14]
 800746c:	2b00      	cmp	r3, #0
 800746e:	d007      	beq.n	8007480 <USBD_StdEPReq+0x174>
 8007470:	7bbb      	ldrb	r3, [r7, #14]
 8007472:	2b80      	cmp	r3, #128	; 0x80
 8007474:	d004      	beq.n	8007480 <USBD_StdEPReq+0x174>
              {
                USBD_CtlError(pdev, req);
 8007476:	6839      	ldr	r1, [r7, #0]
 8007478:	6878      	ldr	r0, [r7, #4]
 800747a:	f000 fbb6 	bl	8007bea <USBD_CtlError>
                break;
 800747e:	e091      	b.n	80075a4 <USBD_StdEPReq+0x298>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007480:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007484:	2b00      	cmp	r3, #0
 8007486:	da0b      	bge.n	80074a0 <USBD_StdEPReq+0x194>
 8007488:	7bbb      	ldrb	r3, [r7, #14]
 800748a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800748e:	4613      	mov	r3, r2
 8007490:	009b      	lsls	r3, r3, #2
 8007492:	4413      	add	r3, r2
 8007494:	009b      	lsls	r3, r3, #2
 8007496:	3310      	adds	r3, #16
 8007498:	687a      	ldr	r2, [r7, #4]
 800749a:	4413      	add	r3, r2
 800749c:	3304      	adds	r3, #4
 800749e:	e00b      	b.n	80074b8 <USBD_StdEPReq+0x1ac>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80074a0:	7bbb      	ldrb	r3, [r7, #14]
 80074a2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80074a6:	4613      	mov	r3, r2
 80074a8:	009b      	lsls	r3, r3, #2
 80074aa:	4413      	add	r3, r2
 80074ac:	009b      	lsls	r3, r3, #2
 80074ae:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80074b2:	687a      	ldr	r2, [r7, #4]
 80074b4:	4413      	add	r3, r2
 80074b6:	3304      	adds	r3, #4
 80074b8:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80074ba:	68bb      	ldr	r3, [r7, #8]
 80074bc:	2200      	movs	r2, #0
 80074be:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 80074c0:	68bb      	ldr	r3, [r7, #8]
 80074c2:	2202      	movs	r2, #2
 80074c4:	4619      	mov	r1, r3
 80074c6:	6878      	ldr	r0, [r7, #4]
 80074c8:	f000 fbfa 	bl	8007cc0 <USBD_CtlSendData>
              break;
 80074cc:	e06a      	b.n	80075a4 <USBD_StdEPReq+0x298>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80074ce:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80074d2:	2b00      	cmp	r3, #0
 80074d4:	da11      	bge.n	80074fa <USBD_StdEPReq+0x1ee>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80074d6:	7bbb      	ldrb	r3, [r7, #14]
 80074d8:	f003 020f 	and.w	r2, r3, #15
 80074dc:	6879      	ldr	r1, [r7, #4]
 80074de:	4613      	mov	r3, r2
 80074e0:	009b      	lsls	r3, r3, #2
 80074e2:	4413      	add	r3, r2
 80074e4:	009b      	lsls	r3, r3, #2
 80074e6:	440b      	add	r3, r1
 80074e8:	3318      	adds	r3, #24
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	2b00      	cmp	r3, #0
 80074ee:	d117      	bne.n	8007520 <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 80074f0:	6839      	ldr	r1, [r7, #0]
 80074f2:	6878      	ldr	r0, [r7, #4]
 80074f4:	f000 fb79 	bl	8007bea <USBD_CtlError>
                  break;
 80074f8:	e054      	b.n	80075a4 <USBD_StdEPReq+0x298>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80074fa:	7bbb      	ldrb	r3, [r7, #14]
 80074fc:	f003 020f 	and.w	r2, r3, #15
 8007500:	6879      	ldr	r1, [r7, #4]
 8007502:	4613      	mov	r3, r2
 8007504:	009b      	lsls	r3, r3, #2
 8007506:	4413      	add	r3, r2
 8007508:	009b      	lsls	r3, r3, #2
 800750a:	440b      	add	r3, r1
 800750c:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	2b00      	cmp	r3, #0
 8007514:	d104      	bne.n	8007520 <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 8007516:	6839      	ldr	r1, [r7, #0]
 8007518:	6878      	ldr	r0, [r7, #4]
 800751a:	f000 fb66 	bl	8007bea <USBD_CtlError>
                  break;
 800751e:	e041      	b.n	80075a4 <USBD_StdEPReq+0x298>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007520:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007524:	2b00      	cmp	r3, #0
 8007526:	da0b      	bge.n	8007540 <USBD_StdEPReq+0x234>
 8007528:	7bbb      	ldrb	r3, [r7, #14]
 800752a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800752e:	4613      	mov	r3, r2
 8007530:	009b      	lsls	r3, r3, #2
 8007532:	4413      	add	r3, r2
 8007534:	009b      	lsls	r3, r3, #2
 8007536:	3310      	adds	r3, #16
 8007538:	687a      	ldr	r2, [r7, #4]
 800753a:	4413      	add	r3, r2
 800753c:	3304      	adds	r3, #4
 800753e:	e00b      	b.n	8007558 <USBD_StdEPReq+0x24c>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007540:	7bbb      	ldrb	r3, [r7, #14]
 8007542:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007546:	4613      	mov	r3, r2
 8007548:	009b      	lsls	r3, r3, #2
 800754a:	4413      	add	r3, r2
 800754c:	009b      	lsls	r3, r3, #2
 800754e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007552:	687a      	ldr	r2, [r7, #4]
 8007554:	4413      	add	r3, r2
 8007556:	3304      	adds	r3, #4
 8007558:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800755a:	7bbb      	ldrb	r3, [r7, #14]
 800755c:	2b00      	cmp	r3, #0
 800755e:	d002      	beq.n	8007566 <USBD_StdEPReq+0x25a>
 8007560:	7bbb      	ldrb	r3, [r7, #14]
 8007562:	2b80      	cmp	r3, #128	; 0x80
 8007564:	d103      	bne.n	800756e <USBD_StdEPReq+0x262>
              {
                pep->status = 0x0000U;
 8007566:	68bb      	ldr	r3, [r7, #8]
 8007568:	2200      	movs	r2, #0
 800756a:	601a      	str	r2, [r3, #0]
 800756c:	e00e      	b.n	800758c <USBD_StdEPReq+0x280>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 800756e:	7bbb      	ldrb	r3, [r7, #14]
 8007570:	4619      	mov	r1, r3
 8007572:	6878      	ldr	r0, [r7, #4]
 8007574:	f000 fffa 	bl	800856c <USBD_LL_IsStallEP>
 8007578:	4603      	mov	r3, r0
 800757a:	2b00      	cmp	r3, #0
 800757c:	d003      	beq.n	8007586 <USBD_StdEPReq+0x27a>
              {
                pep->status = 0x0001U;
 800757e:	68bb      	ldr	r3, [r7, #8]
 8007580:	2201      	movs	r2, #1
 8007582:	601a      	str	r2, [r3, #0]
 8007584:	e002      	b.n	800758c <USBD_StdEPReq+0x280>
              }
              else
              {
                pep->status = 0x0000U;
 8007586:	68bb      	ldr	r3, [r7, #8]
 8007588:	2200      	movs	r2, #0
 800758a:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800758c:	68bb      	ldr	r3, [r7, #8]
 800758e:	2202      	movs	r2, #2
 8007590:	4619      	mov	r1, r3
 8007592:	6878      	ldr	r0, [r7, #4]
 8007594:	f000 fb94 	bl	8007cc0 <USBD_CtlSendData>
              break;
 8007598:	e004      	b.n	80075a4 <USBD_StdEPReq+0x298>

            default:
              USBD_CtlError(pdev, req);
 800759a:	6839      	ldr	r1, [r7, #0]
 800759c:	6878      	ldr	r0, [r7, #4]
 800759e:	f000 fb24 	bl	8007bea <USBD_CtlError>
              break;
 80075a2:	bf00      	nop
          }
          break;
 80075a4:	e004      	b.n	80075b0 <USBD_StdEPReq+0x2a4>

        default:
          USBD_CtlError(pdev, req);
 80075a6:	6839      	ldr	r1, [r7, #0]
 80075a8:	6878      	ldr	r0, [r7, #4]
 80075aa:	f000 fb1e 	bl	8007bea <USBD_CtlError>
          break;
 80075ae:	bf00      	nop
      }
      break;
 80075b0:	e004      	b.n	80075bc <USBD_StdEPReq+0x2b0>

    default:
      USBD_CtlError(pdev, req);
 80075b2:	6839      	ldr	r1, [r7, #0]
 80075b4:	6878      	ldr	r0, [r7, #4]
 80075b6:	f000 fb18 	bl	8007bea <USBD_CtlError>
      break;
 80075ba:	bf00      	nop
  }

  return ret;
 80075bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80075be:	4618      	mov	r0, r3
 80075c0:	3710      	adds	r7, #16
 80075c2:	46bd      	mov	sp, r7
 80075c4:	bd80      	pop	{r7, pc}
	...

080075c8 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 80075c8:	b580      	push	{r7, lr}
 80075ca:	b084      	sub	sp, #16
 80075cc:	af00      	add	r7, sp, #0
 80075ce:	6078      	str	r0, [r7, #4]
 80075d0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80075d2:	2300      	movs	r3, #0
 80075d4:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80075d6:	2300      	movs	r3, #0
 80075d8:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80075da:	2300      	movs	r3, #0
 80075dc:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80075de:	683b      	ldr	r3, [r7, #0]
 80075e0:	885b      	ldrh	r3, [r3, #2]
 80075e2:	0a1b      	lsrs	r3, r3, #8
 80075e4:	b29b      	uxth	r3, r3
 80075e6:	3b01      	subs	r3, #1
 80075e8:	2b06      	cmp	r3, #6
 80075ea:	f200 8128 	bhi.w	800783e <USBD_GetDescriptor+0x276>
 80075ee:	a201      	add	r2, pc, #4	; (adr r2, 80075f4 <USBD_GetDescriptor+0x2c>)
 80075f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075f4:	08007611 	.word	0x08007611
 80075f8:	08007629 	.word	0x08007629
 80075fc:	08007669 	.word	0x08007669
 8007600:	0800783f 	.word	0x0800783f
 8007604:	0800783f 	.word	0x0800783f
 8007608:	080077df 	.word	0x080077df
 800760c:	0800780b 	.word	0x0800780b
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	687a      	ldr	r2, [r7, #4]
 800761a:	7c12      	ldrb	r2, [r2, #16]
 800761c:	f107 0108 	add.w	r1, r7, #8
 8007620:	4610      	mov	r0, r2
 8007622:	4798      	blx	r3
 8007624:	60f8      	str	r0, [r7, #12]
      break;
 8007626:	e112      	b.n	800784e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	7c1b      	ldrb	r3, [r3, #16]
 800762c:	2b00      	cmp	r3, #0
 800762e:	d10d      	bne.n	800764c <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007636:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007638:	f107 0208 	add.w	r2, r7, #8
 800763c:	4610      	mov	r0, r2
 800763e:	4798      	blx	r3
 8007640:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007642:	68fb      	ldr	r3, [r7, #12]
 8007644:	3301      	adds	r3, #1
 8007646:	2202      	movs	r2, #2
 8007648:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800764a:	e100      	b.n	800784e <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007652:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007654:	f107 0208 	add.w	r2, r7, #8
 8007658:	4610      	mov	r0, r2
 800765a:	4798      	blx	r3
 800765c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800765e:	68fb      	ldr	r3, [r7, #12]
 8007660:	3301      	adds	r3, #1
 8007662:	2202      	movs	r2, #2
 8007664:	701a      	strb	r2, [r3, #0]
      break;
 8007666:	e0f2      	b.n	800784e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8007668:	683b      	ldr	r3, [r7, #0]
 800766a:	885b      	ldrh	r3, [r3, #2]
 800766c:	b2db      	uxtb	r3, r3
 800766e:	2b05      	cmp	r3, #5
 8007670:	f200 80ac 	bhi.w	80077cc <USBD_GetDescriptor+0x204>
 8007674:	a201      	add	r2, pc, #4	; (adr r2, 800767c <USBD_GetDescriptor+0xb4>)
 8007676:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800767a:	bf00      	nop
 800767c:	08007695 	.word	0x08007695
 8007680:	080076c9 	.word	0x080076c9
 8007684:	080076fd 	.word	0x080076fd
 8007688:	08007731 	.word	0x08007731
 800768c:	08007765 	.word	0x08007765
 8007690:	08007799 	.word	0x08007799
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800769a:	685b      	ldr	r3, [r3, #4]
 800769c:	2b00      	cmp	r3, #0
 800769e:	d00b      	beq.n	80076b8 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80076a6:	685b      	ldr	r3, [r3, #4]
 80076a8:	687a      	ldr	r2, [r7, #4]
 80076aa:	7c12      	ldrb	r2, [r2, #16]
 80076ac:	f107 0108 	add.w	r1, r7, #8
 80076b0:	4610      	mov	r0, r2
 80076b2:	4798      	blx	r3
 80076b4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80076b6:	e091      	b.n	80077dc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80076b8:	6839      	ldr	r1, [r7, #0]
 80076ba:	6878      	ldr	r0, [r7, #4]
 80076bc:	f000 fa95 	bl	8007bea <USBD_CtlError>
            err++;
 80076c0:	7afb      	ldrb	r3, [r7, #11]
 80076c2:	3301      	adds	r3, #1
 80076c4:	72fb      	strb	r3, [r7, #11]
          break;
 80076c6:	e089      	b.n	80077dc <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80076ce:	689b      	ldr	r3, [r3, #8]
 80076d0:	2b00      	cmp	r3, #0
 80076d2:	d00b      	beq.n	80076ec <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80076da:	689b      	ldr	r3, [r3, #8]
 80076dc:	687a      	ldr	r2, [r7, #4]
 80076de:	7c12      	ldrb	r2, [r2, #16]
 80076e0:	f107 0108 	add.w	r1, r7, #8
 80076e4:	4610      	mov	r0, r2
 80076e6:	4798      	blx	r3
 80076e8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80076ea:	e077      	b.n	80077dc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80076ec:	6839      	ldr	r1, [r7, #0]
 80076ee:	6878      	ldr	r0, [r7, #4]
 80076f0:	f000 fa7b 	bl	8007bea <USBD_CtlError>
            err++;
 80076f4:	7afb      	ldrb	r3, [r7, #11]
 80076f6:	3301      	adds	r3, #1
 80076f8:	72fb      	strb	r3, [r7, #11]
          break;
 80076fa:	e06f      	b.n	80077dc <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007702:	68db      	ldr	r3, [r3, #12]
 8007704:	2b00      	cmp	r3, #0
 8007706:	d00b      	beq.n	8007720 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800770e:	68db      	ldr	r3, [r3, #12]
 8007710:	687a      	ldr	r2, [r7, #4]
 8007712:	7c12      	ldrb	r2, [r2, #16]
 8007714:	f107 0108 	add.w	r1, r7, #8
 8007718:	4610      	mov	r0, r2
 800771a:	4798      	blx	r3
 800771c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800771e:	e05d      	b.n	80077dc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007720:	6839      	ldr	r1, [r7, #0]
 8007722:	6878      	ldr	r0, [r7, #4]
 8007724:	f000 fa61 	bl	8007bea <USBD_CtlError>
            err++;
 8007728:	7afb      	ldrb	r3, [r7, #11]
 800772a:	3301      	adds	r3, #1
 800772c:	72fb      	strb	r3, [r7, #11]
          break;
 800772e:	e055      	b.n	80077dc <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007736:	691b      	ldr	r3, [r3, #16]
 8007738:	2b00      	cmp	r3, #0
 800773a:	d00b      	beq.n	8007754 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007742:	691b      	ldr	r3, [r3, #16]
 8007744:	687a      	ldr	r2, [r7, #4]
 8007746:	7c12      	ldrb	r2, [r2, #16]
 8007748:	f107 0108 	add.w	r1, r7, #8
 800774c:	4610      	mov	r0, r2
 800774e:	4798      	blx	r3
 8007750:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007752:	e043      	b.n	80077dc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007754:	6839      	ldr	r1, [r7, #0]
 8007756:	6878      	ldr	r0, [r7, #4]
 8007758:	f000 fa47 	bl	8007bea <USBD_CtlError>
            err++;
 800775c:	7afb      	ldrb	r3, [r7, #11]
 800775e:	3301      	adds	r3, #1
 8007760:	72fb      	strb	r3, [r7, #11]
          break;
 8007762:	e03b      	b.n	80077dc <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800776a:	695b      	ldr	r3, [r3, #20]
 800776c:	2b00      	cmp	r3, #0
 800776e:	d00b      	beq.n	8007788 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007776:	695b      	ldr	r3, [r3, #20]
 8007778:	687a      	ldr	r2, [r7, #4]
 800777a:	7c12      	ldrb	r2, [r2, #16]
 800777c:	f107 0108 	add.w	r1, r7, #8
 8007780:	4610      	mov	r0, r2
 8007782:	4798      	blx	r3
 8007784:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007786:	e029      	b.n	80077dc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007788:	6839      	ldr	r1, [r7, #0]
 800778a:	6878      	ldr	r0, [r7, #4]
 800778c:	f000 fa2d 	bl	8007bea <USBD_CtlError>
            err++;
 8007790:	7afb      	ldrb	r3, [r7, #11]
 8007792:	3301      	adds	r3, #1
 8007794:	72fb      	strb	r3, [r7, #11]
          break;
 8007796:	e021      	b.n	80077dc <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800779e:	699b      	ldr	r3, [r3, #24]
 80077a0:	2b00      	cmp	r3, #0
 80077a2:	d00b      	beq.n	80077bc <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80077aa:	699b      	ldr	r3, [r3, #24]
 80077ac:	687a      	ldr	r2, [r7, #4]
 80077ae:	7c12      	ldrb	r2, [r2, #16]
 80077b0:	f107 0108 	add.w	r1, r7, #8
 80077b4:	4610      	mov	r0, r2
 80077b6:	4798      	blx	r3
 80077b8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80077ba:	e00f      	b.n	80077dc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80077bc:	6839      	ldr	r1, [r7, #0]
 80077be:	6878      	ldr	r0, [r7, #4]
 80077c0:	f000 fa13 	bl	8007bea <USBD_CtlError>
            err++;
 80077c4:	7afb      	ldrb	r3, [r7, #11]
 80077c6:	3301      	adds	r3, #1
 80077c8:	72fb      	strb	r3, [r7, #11]
          break;
 80077ca:	e007      	b.n	80077dc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 80077cc:	6839      	ldr	r1, [r7, #0]
 80077ce:	6878      	ldr	r0, [r7, #4]
 80077d0:	f000 fa0b 	bl	8007bea <USBD_CtlError>
          err++;
 80077d4:	7afb      	ldrb	r3, [r7, #11]
 80077d6:	3301      	adds	r3, #1
 80077d8:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 80077da:	e038      	b.n	800784e <USBD_GetDescriptor+0x286>
 80077dc:	e037      	b.n	800784e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	7c1b      	ldrb	r3, [r3, #16]
 80077e2:	2b00      	cmp	r3, #0
 80077e4:	d109      	bne.n	80077fa <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80077ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80077ee:	f107 0208 	add.w	r2, r7, #8
 80077f2:	4610      	mov	r0, r2
 80077f4:	4798      	blx	r3
 80077f6:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80077f8:	e029      	b.n	800784e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80077fa:	6839      	ldr	r1, [r7, #0]
 80077fc:	6878      	ldr	r0, [r7, #4]
 80077fe:	f000 f9f4 	bl	8007bea <USBD_CtlError>
        err++;
 8007802:	7afb      	ldrb	r3, [r7, #11]
 8007804:	3301      	adds	r3, #1
 8007806:	72fb      	strb	r3, [r7, #11]
      break;
 8007808:	e021      	b.n	800784e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	7c1b      	ldrb	r3, [r3, #16]
 800780e:	2b00      	cmp	r3, #0
 8007810:	d10d      	bne.n	800782e <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007818:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800781a:	f107 0208 	add.w	r2, r7, #8
 800781e:	4610      	mov	r0, r2
 8007820:	4798      	blx	r3
 8007822:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007824:	68fb      	ldr	r3, [r7, #12]
 8007826:	3301      	adds	r3, #1
 8007828:	2207      	movs	r2, #7
 800782a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800782c:	e00f      	b.n	800784e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800782e:	6839      	ldr	r1, [r7, #0]
 8007830:	6878      	ldr	r0, [r7, #4]
 8007832:	f000 f9da 	bl	8007bea <USBD_CtlError>
        err++;
 8007836:	7afb      	ldrb	r3, [r7, #11]
 8007838:	3301      	adds	r3, #1
 800783a:	72fb      	strb	r3, [r7, #11]
      break;
 800783c:	e007      	b.n	800784e <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800783e:	6839      	ldr	r1, [r7, #0]
 8007840:	6878      	ldr	r0, [r7, #4]
 8007842:	f000 f9d2 	bl	8007bea <USBD_CtlError>
      err++;
 8007846:	7afb      	ldrb	r3, [r7, #11]
 8007848:	3301      	adds	r3, #1
 800784a:	72fb      	strb	r3, [r7, #11]
      break;
 800784c:	bf00      	nop
  }

  if (err != 0U)
 800784e:	7afb      	ldrb	r3, [r7, #11]
 8007850:	2b00      	cmp	r3, #0
 8007852:	d11c      	bne.n	800788e <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8007854:	893b      	ldrh	r3, [r7, #8]
 8007856:	2b00      	cmp	r3, #0
 8007858:	d011      	beq.n	800787e <USBD_GetDescriptor+0x2b6>
 800785a:	683b      	ldr	r3, [r7, #0]
 800785c:	88db      	ldrh	r3, [r3, #6]
 800785e:	2b00      	cmp	r3, #0
 8007860:	d00d      	beq.n	800787e <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 8007862:	683b      	ldr	r3, [r7, #0]
 8007864:	88da      	ldrh	r2, [r3, #6]
 8007866:	893b      	ldrh	r3, [r7, #8]
 8007868:	4293      	cmp	r3, r2
 800786a:	bf28      	it	cs
 800786c:	4613      	movcs	r3, r2
 800786e:	b29b      	uxth	r3, r3
 8007870:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8007872:	893b      	ldrh	r3, [r7, #8]
 8007874:	461a      	mov	r2, r3
 8007876:	68f9      	ldr	r1, [r7, #12]
 8007878:	6878      	ldr	r0, [r7, #4]
 800787a:	f000 fa21 	bl	8007cc0 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 800787e:	683b      	ldr	r3, [r7, #0]
 8007880:	88db      	ldrh	r3, [r3, #6]
 8007882:	2b00      	cmp	r3, #0
 8007884:	d104      	bne.n	8007890 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 8007886:	6878      	ldr	r0, [r7, #4]
 8007888:	f000 fa78 	bl	8007d7c <USBD_CtlSendStatus>
 800788c:	e000      	b.n	8007890 <USBD_GetDescriptor+0x2c8>
    return;
 800788e:	bf00      	nop
    }
  }
}
 8007890:	3710      	adds	r7, #16
 8007892:	46bd      	mov	sp, r7
 8007894:	bd80      	pop	{r7, pc}
 8007896:	bf00      	nop

08007898 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8007898:	b580      	push	{r7, lr}
 800789a:	b084      	sub	sp, #16
 800789c:	af00      	add	r7, sp, #0
 800789e:	6078      	str	r0, [r7, #4]
 80078a0:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80078a2:	683b      	ldr	r3, [r7, #0]
 80078a4:	889b      	ldrh	r3, [r3, #4]
 80078a6:	2b00      	cmp	r3, #0
 80078a8:	d130      	bne.n	800790c <USBD_SetAddress+0x74>
 80078aa:	683b      	ldr	r3, [r7, #0]
 80078ac:	88db      	ldrh	r3, [r3, #6]
 80078ae:	2b00      	cmp	r3, #0
 80078b0:	d12c      	bne.n	800790c <USBD_SetAddress+0x74>
 80078b2:	683b      	ldr	r3, [r7, #0]
 80078b4:	885b      	ldrh	r3, [r3, #2]
 80078b6:	2b7f      	cmp	r3, #127	; 0x7f
 80078b8:	d828      	bhi.n	800790c <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80078ba:	683b      	ldr	r3, [r7, #0]
 80078bc:	885b      	ldrh	r3, [r3, #2]
 80078be:	b2db      	uxtb	r3, r3
 80078c0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80078c4:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80078cc:	2b03      	cmp	r3, #3
 80078ce:	d104      	bne.n	80078da <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 80078d0:	6839      	ldr	r1, [r7, #0]
 80078d2:	6878      	ldr	r0, [r7, #4]
 80078d4:	f000 f989 	bl	8007bea <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80078d8:	e01c      	b.n	8007914 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	7bfa      	ldrb	r2, [r7, #15]
 80078de:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 80078e2:	7bfb      	ldrb	r3, [r7, #15]
 80078e4:	4619      	mov	r1, r3
 80078e6:	6878      	ldr	r0, [r7, #4]
 80078e8:	f000 fe6d 	bl	80085c6 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 80078ec:	6878      	ldr	r0, [r7, #4]
 80078ee:	f000 fa45 	bl	8007d7c <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80078f2:	7bfb      	ldrb	r3, [r7, #15]
 80078f4:	2b00      	cmp	r3, #0
 80078f6:	d004      	beq.n	8007902 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	2202      	movs	r2, #2
 80078fc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007900:	e008      	b.n	8007914 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	2201      	movs	r2, #1
 8007906:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800790a:	e003      	b.n	8007914 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800790c:	6839      	ldr	r1, [r7, #0]
 800790e:	6878      	ldr	r0, [r7, #4]
 8007910:	f000 f96b 	bl	8007bea <USBD_CtlError>
  }
}
 8007914:	bf00      	nop
 8007916:	3710      	adds	r7, #16
 8007918:	46bd      	mov	sp, r7
 800791a:	bd80      	pop	{r7, pc}

0800791c <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800791c:	b580      	push	{r7, lr}
 800791e:	b082      	sub	sp, #8
 8007920:	af00      	add	r7, sp, #0
 8007922:	6078      	str	r0, [r7, #4]
 8007924:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8007926:	683b      	ldr	r3, [r7, #0]
 8007928:	885b      	ldrh	r3, [r3, #2]
 800792a:	b2da      	uxtb	r2, r3
 800792c:	4b41      	ldr	r3, [pc, #260]	; (8007a34 <USBD_SetConfig+0x118>)
 800792e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007930:	4b40      	ldr	r3, [pc, #256]	; (8007a34 <USBD_SetConfig+0x118>)
 8007932:	781b      	ldrb	r3, [r3, #0]
 8007934:	2b01      	cmp	r3, #1
 8007936:	d904      	bls.n	8007942 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8007938:	6839      	ldr	r1, [r7, #0]
 800793a:	6878      	ldr	r0, [r7, #4]
 800793c:	f000 f955 	bl	8007bea <USBD_CtlError>
 8007940:	e075      	b.n	8007a2e <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007948:	2b02      	cmp	r3, #2
 800794a:	d002      	beq.n	8007952 <USBD_SetConfig+0x36>
 800794c:	2b03      	cmp	r3, #3
 800794e:	d023      	beq.n	8007998 <USBD_SetConfig+0x7c>
 8007950:	e062      	b.n	8007a18 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8007952:	4b38      	ldr	r3, [pc, #224]	; (8007a34 <USBD_SetConfig+0x118>)
 8007954:	781b      	ldrb	r3, [r3, #0]
 8007956:	2b00      	cmp	r3, #0
 8007958:	d01a      	beq.n	8007990 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 800795a:	4b36      	ldr	r3, [pc, #216]	; (8007a34 <USBD_SetConfig+0x118>)
 800795c:	781b      	ldrb	r3, [r3, #0]
 800795e:	461a      	mov	r2, r3
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	2203      	movs	r2, #3
 8007968:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800796c:	4b31      	ldr	r3, [pc, #196]	; (8007a34 <USBD_SetConfig+0x118>)
 800796e:	781b      	ldrb	r3, [r3, #0]
 8007970:	4619      	mov	r1, r3
 8007972:	6878      	ldr	r0, [r7, #4]
 8007974:	f7ff f9f0 	bl	8006d58 <USBD_SetClassConfig>
 8007978:	4603      	mov	r3, r0
 800797a:	2b02      	cmp	r3, #2
 800797c:	d104      	bne.n	8007988 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 800797e:	6839      	ldr	r1, [r7, #0]
 8007980:	6878      	ldr	r0, [r7, #4]
 8007982:	f000 f932 	bl	8007bea <USBD_CtlError>
            return;
 8007986:	e052      	b.n	8007a2e <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8007988:	6878      	ldr	r0, [r7, #4]
 800798a:	f000 f9f7 	bl	8007d7c <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800798e:	e04e      	b.n	8007a2e <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8007990:	6878      	ldr	r0, [r7, #4]
 8007992:	f000 f9f3 	bl	8007d7c <USBD_CtlSendStatus>
        break;
 8007996:	e04a      	b.n	8007a2e <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8007998:	4b26      	ldr	r3, [pc, #152]	; (8007a34 <USBD_SetConfig+0x118>)
 800799a:	781b      	ldrb	r3, [r3, #0]
 800799c:	2b00      	cmp	r3, #0
 800799e:	d112      	bne.n	80079c6 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	2202      	movs	r2, #2
 80079a4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 80079a8:	4b22      	ldr	r3, [pc, #136]	; (8007a34 <USBD_SetConfig+0x118>)
 80079aa:	781b      	ldrb	r3, [r3, #0]
 80079ac:	461a      	mov	r2, r3
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 80079b2:	4b20      	ldr	r3, [pc, #128]	; (8007a34 <USBD_SetConfig+0x118>)
 80079b4:	781b      	ldrb	r3, [r3, #0]
 80079b6:	4619      	mov	r1, r3
 80079b8:	6878      	ldr	r0, [r7, #4]
 80079ba:	f7ff f9ec 	bl	8006d96 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 80079be:	6878      	ldr	r0, [r7, #4]
 80079c0:	f000 f9dc 	bl	8007d7c <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 80079c4:	e033      	b.n	8007a2e <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 80079c6:	4b1b      	ldr	r3, [pc, #108]	; (8007a34 <USBD_SetConfig+0x118>)
 80079c8:	781b      	ldrb	r3, [r3, #0]
 80079ca:	461a      	mov	r2, r3
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	685b      	ldr	r3, [r3, #4]
 80079d0:	429a      	cmp	r2, r3
 80079d2:	d01d      	beq.n	8007a10 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	685b      	ldr	r3, [r3, #4]
 80079d8:	b2db      	uxtb	r3, r3
 80079da:	4619      	mov	r1, r3
 80079dc:	6878      	ldr	r0, [r7, #4]
 80079de:	f7ff f9da 	bl	8006d96 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 80079e2:	4b14      	ldr	r3, [pc, #80]	; (8007a34 <USBD_SetConfig+0x118>)
 80079e4:	781b      	ldrb	r3, [r3, #0]
 80079e6:	461a      	mov	r2, r3
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 80079ec:	4b11      	ldr	r3, [pc, #68]	; (8007a34 <USBD_SetConfig+0x118>)
 80079ee:	781b      	ldrb	r3, [r3, #0]
 80079f0:	4619      	mov	r1, r3
 80079f2:	6878      	ldr	r0, [r7, #4]
 80079f4:	f7ff f9b0 	bl	8006d58 <USBD_SetClassConfig>
 80079f8:	4603      	mov	r3, r0
 80079fa:	2b02      	cmp	r3, #2
 80079fc:	d104      	bne.n	8007a08 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 80079fe:	6839      	ldr	r1, [r7, #0]
 8007a00:	6878      	ldr	r0, [r7, #4]
 8007a02:	f000 f8f2 	bl	8007bea <USBD_CtlError>
            return;
 8007a06:	e012      	b.n	8007a2e <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8007a08:	6878      	ldr	r0, [r7, #4]
 8007a0a:	f000 f9b7 	bl	8007d7c <USBD_CtlSendStatus>
        break;
 8007a0e:	e00e      	b.n	8007a2e <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8007a10:	6878      	ldr	r0, [r7, #4]
 8007a12:	f000 f9b3 	bl	8007d7c <USBD_CtlSendStatus>
        break;
 8007a16:	e00a      	b.n	8007a2e <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 8007a18:	6839      	ldr	r1, [r7, #0]
 8007a1a:	6878      	ldr	r0, [r7, #4]
 8007a1c:	f000 f8e5 	bl	8007bea <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8007a20:	4b04      	ldr	r3, [pc, #16]	; (8007a34 <USBD_SetConfig+0x118>)
 8007a22:	781b      	ldrb	r3, [r3, #0]
 8007a24:	4619      	mov	r1, r3
 8007a26:	6878      	ldr	r0, [r7, #4]
 8007a28:	f7ff f9b5 	bl	8006d96 <USBD_ClrClassConfig>
        break;
 8007a2c:	bf00      	nop
    }
  }
}
 8007a2e:	3708      	adds	r7, #8
 8007a30:	46bd      	mov	sp, r7
 8007a32:	bd80      	pop	{r7, pc}
 8007a34:	20000754 	.word	0x20000754

08007a38 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007a38:	b580      	push	{r7, lr}
 8007a3a:	b082      	sub	sp, #8
 8007a3c:	af00      	add	r7, sp, #0
 8007a3e:	6078      	str	r0, [r7, #4]
 8007a40:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8007a42:	683b      	ldr	r3, [r7, #0]
 8007a44:	88db      	ldrh	r3, [r3, #6]
 8007a46:	2b01      	cmp	r3, #1
 8007a48:	d004      	beq.n	8007a54 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8007a4a:	6839      	ldr	r1, [r7, #0]
 8007a4c:	6878      	ldr	r0, [r7, #4]
 8007a4e:	f000 f8cc 	bl	8007bea <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8007a52:	e021      	b.n	8007a98 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007a5a:	2b01      	cmp	r3, #1
 8007a5c:	db17      	blt.n	8007a8e <USBD_GetConfig+0x56>
 8007a5e:	2b02      	cmp	r3, #2
 8007a60:	dd02      	ble.n	8007a68 <USBD_GetConfig+0x30>
 8007a62:	2b03      	cmp	r3, #3
 8007a64:	d00b      	beq.n	8007a7e <USBD_GetConfig+0x46>
 8007a66:	e012      	b.n	8007a8e <USBD_GetConfig+0x56>
        pdev->dev_default_config = 0U;
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	2200      	movs	r2, #0
 8007a6c:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	3308      	adds	r3, #8
 8007a72:	2201      	movs	r2, #1
 8007a74:	4619      	mov	r1, r3
 8007a76:	6878      	ldr	r0, [r7, #4]
 8007a78:	f000 f922 	bl	8007cc0 <USBD_CtlSendData>
        break;
 8007a7c:	e00c      	b.n	8007a98 <USBD_GetConfig+0x60>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	3304      	adds	r3, #4
 8007a82:	2201      	movs	r2, #1
 8007a84:	4619      	mov	r1, r3
 8007a86:	6878      	ldr	r0, [r7, #4]
 8007a88:	f000 f91a 	bl	8007cc0 <USBD_CtlSendData>
        break;
 8007a8c:	e004      	b.n	8007a98 <USBD_GetConfig+0x60>
        USBD_CtlError(pdev, req);
 8007a8e:	6839      	ldr	r1, [r7, #0]
 8007a90:	6878      	ldr	r0, [r7, #4]
 8007a92:	f000 f8aa 	bl	8007bea <USBD_CtlError>
        break;
 8007a96:	bf00      	nop
}
 8007a98:	bf00      	nop
 8007a9a:	3708      	adds	r7, #8
 8007a9c:	46bd      	mov	sp, r7
 8007a9e:	bd80      	pop	{r7, pc}

08007aa0 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007aa0:	b580      	push	{r7, lr}
 8007aa2:	b082      	sub	sp, #8
 8007aa4:	af00      	add	r7, sp, #0
 8007aa6:	6078      	str	r0, [r7, #4]
 8007aa8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007ab0:	3b01      	subs	r3, #1
 8007ab2:	2b02      	cmp	r3, #2
 8007ab4:	d81e      	bhi.n	8007af4 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8007ab6:	683b      	ldr	r3, [r7, #0]
 8007ab8:	88db      	ldrh	r3, [r3, #6]
 8007aba:	2b02      	cmp	r3, #2
 8007abc:	d004      	beq.n	8007ac8 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 8007abe:	6839      	ldr	r1, [r7, #0]
 8007ac0:	6878      	ldr	r0, [r7, #4]
 8007ac2:	f000 f892 	bl	8007bea <USBD_CtlError>
        break;
 8007ac6:	e01a      	b.n	8007afe <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	2201      	movs	r2, #1
 8007acc:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8007ad4:	2b00      	cmp	r3, #0
 8007ad6:	d005      	beq.n	8007ae4 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	68db      	ldr	r3, [r3, #12]
 8007adc:	f043 0202 	orr.w	r2, r3, #2
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	330c      	adds	r3, #12
 8007ae8:	2202      	movs	r2, #2
 8007aea:	4619      	mov	r1, r3
 8007aec:	6878      	ldr	r0, [r7, #4]
 8007aee:	f000 f8e7 	bl	8007cc0 <USBD_CtlSendData>
      break;
 8007af2:	e004      	b.n	8007afe <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 8007af4:	6839      	ldr	r1, [r7, #0]
 8007af6:	6878      	ldr	r0, [r7, #4]
 8007af8:	f000 f877 	bl	8007bea <USBD_CtlError>
      break;
 8007afc:	bf00      	nop
  }
}
 8007afe:	bf00      	nop
 8007b00:	3708      	adds	r7, #8
 8007b02:	46bd      	mov	sp, r7
 8007b04:	bd80      	pop	{r7, pc}

08007b06 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8007b06:	b580      	push	{r7, lr}
 8007b08:	b082      	sub	sp, #8
 8007b0a:	af00      	add	r7, sp, #0
 8007b0c:	6078      	str	r0, [r7, #4]
 8007b0e:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007b10:	683b      	ldr	r3, [r7, #0]
 8007b12:	885b      	ldrh	r3, [r3, #2]
 8007b14:	2b01      	cmp	r3, #1
 8007b16:	d106      	bne.n	8007b26 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	2201      	movs	r2, #1
 8007b1c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 8007b20:	6878      	ldr	r0, [r7, #4]
 8007b22:	f000 f92b 	bl	8007d7c <USBD_CtlSendStatus>
  }
}
 8007b26:	bf00      	nop
 8007b28:	3708      	adds	r7, #8
 8007b2a:	46bd      	mov	sp, r7
 8007b2c:	bd80      	pop	{r7, pc}

08007b2e <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8007b2e:	b580      	push	{r7, lr}
 8007b30:	b082      	sub	sp, #8
 8007b32:	af00      	add	r7, sp, #0
 8007b34:	6078      	str	r0, [r7, #4]
 8007b36:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007b3e:	3b01      	subs	r3, #1
 8007b40:	2b02      	cmp	r3, #2
 8007b42:	d80b      	bhi.n	8007b5c <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007b44:	683b      	ldr	r3, [r7, #0]
 8007b46:	885b      	ldrh	r3, [r3, #2]
 8007b48:	2b01      	cmp	r3, #1
 8007b4a:	d10c      	bne.n	8007b66 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	2200      	movs	r2, #0
 8007b50:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 8007b54:	6878      	ldr	r0, [r7, #4]
 8007b56:	f000 f911 	bl	8007d7c <USBD_CtlSendStatus>
      }
      break;
 8007b5a:	e004      	b.n	8007b66 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8007b5c:	6839      	ldr	r1, [r7, #0]
 8007b5e:	6878      	ldr	r0, [r7, #4]
 8007b60:	f000 f843 	bl	8007bea <USBD_CtlError>
      break;
 8007b64:	e000      	b.n	8007b68 <USBD_ClrFeature+0x3a>
      break;
 8007b66:	bf00      	nop
  }
}
 8007b68:	bf00      	nop
 8007b6a:	3708      	adds	r7, #8
 8007b6c:	46bd      	mov	sp, r7
 8007b6e:	bd80      	pop	{r7, pc}

08007b70 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8007b70:	b480      	push	{r7}
 8007b72:	b083      	sub	sp, #12
 8007b74:	af00      	add	r7, sp, #0
 8007b76:	6078      	str	r0, [r7, #4]
 8007b78:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8007b7a:	683b      	ldr	r3, [r7, #0]
 8007b7c:	781a      	ldrb	r2, [r3, #0]
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8007b82:	683b      	ldr	r3, [r7, #0]
 8007b84:	785a      	ldrb	r2, [r3, #1]
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8007b8a:	683b      	ldr	r3, [r7, #0]
 8007b8c:	3302      	adds	r3, #2
 8007b8e:	781b      	ldrb	r3, [r3, #0]
 8007b90:	b29a      	uxth	r2, r3
 8007b92:	683b      	ldr	r3, [r7, #0]
 8007b94:	3303      	adds	r3, #3
 8007b96:	781b      	ldrb	r3, [r3, #0]
 8007b98:	b29b      	uxth	r3, r3
 8007b9a:	021b      	lsls	r3, r3, #8
 8007b9c:	b29b      	uxth	r3, r3
 8007b9e:	4413      	add	r3, r2
 8007ba0:	b29a      	uxth	r2, r3
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8007ba6:	683b      	ldr	r3, [r7, #0]
 8007ba8:	3304      	adds	r3, #4
 8007baa:	781b      	ldrb	r3, [r3, #0]
 8007bac:	b29a      	uxth	r2, r3
 8007bae:	683b      	ldr	r3, [r7, #0]
 8007bb0:	3305      	adds	r3, #5
 8007bb2:	781b      	ldrb	r3, [r3, #0]
 8007bb4:	b29b      	uxth	r3, r3
 8007bb6:	021b      	lsls	r3, r3, #8
 8007bb8:	b29b      	uxth	r3, r3
 8007bba:	4413      	add	r3, r2
 8007bbc:	b29a      	uxth	r2, r3
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8007bc2:	683b      	ldr	r3, [r7, #0]
 8007bc4:	3306      	adds	r3, #6
 8007bc6:	781b      	ldrb	r3, [r3, #0]
 8007bc8:	b29a      	uxth	r2, r3
 8007bca:	683b      	ldr	r3, [r7, #0]
 8007bcc:	3307      	adds	r3, #7
 8007bce:	781b      	ldrb	r3, [r3, #0]
 8007bd0:	b29b      	uxth	r3, r3
 8007bd2:	021b      	lsls	r3, r3, #8
 8007bd4:	b29b      	uxth	r3, r3
 8007bd6:	4413      	add	r3, r2
 8007bd8:	b29a      	uxth	r2, r3
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	80da      	strh	r2, [r3, #6]

}
 8007bde:	bf00      	nop
 8007be0:	370c      	adds	r7, #12
 8007be2:	46bd      	mov	sp, r7
 8007be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007be8:	4770      	bx	lr

08007bea <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8007bea:	b580      	push	{r7, lr}
 8007bec:	b082      	sub	sp, #8
 8007bee:	af00      	add	r7, sp, #0
 8007bf0:	6078      	str	r0, [r7, #4]
 8007bf2:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8007bf4:	2180      	movs	r1, #128	; 0x80
 8007bf6:	6878      	ldr	r0, [r7, #4]
 8007bf8:	f000 fc7a 	bl	80084f0 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8007bfc:	2100      	movs	r1, #0
 8007bfe:	6878      	ldr	r0, [r7, #4]
 8007c00:	f000 fc76 	bl	80084f0 <USBD_LL_StallEP>
}
 8007c04:	bf00      	nop
 8007c06:	3708      	adds	r7, #8
 8007c08:	46bd      	mov	sp, r7
 8007c0a:	bd80      	pop	{r7, pc}

08007c0c <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8007c0c:	b580      	push	{r7, lr}
 8007c0e:	b086      	sub	sp, #24
 8007c10:	af00      	add	r7, sp, #0
 8007c12:	60f8      	str	r0, [r7, #12]
 8007c14:	60b9      	str	r1, [r7, #8]
 8007c16:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8007c18:	2300      	movs	r3, #0
 8007c1a:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8007c1c:	68fb      	ldr	r3, [r7, #12]
 8007c1e:	2b00      	cmp	r3, #0
 8007c20:	d032      	beq.n	8007c88 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8007c22:	68f8      	ldr	r0, [r7, #12]
 8007c24:	f000 f834 	bl	8007c90 <USBD_GetLen>
 8007c28:	4603      	mov	r3, r0
 8007c2a:	3301      	adds	r3, #1
 8007c2c:	b29b      	uxth	r3, r3
 8007c2e:	005b      	lsls	r3, r3, #1
 8007c30:	b29a      	uxth	r2, r3
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8007c36:	7dfb      	ldrb	r3, [r7, #23]
 8007c38:	1c5a      	adds	r2, r3, #1
 8007c3a:	75fa      	strb	r2, [r7, #23]
 8007c3c:	461a      	mov	r2, r3
 8007c3e:	68bb      	ldr	r3, [r7, #8]
 8007c40:	4413      	add	r3, r2
 8007c42:	687a      	ldr	r2, [r7, #4]
 8007c44:	7812      	ldrb	r2, [r2, #0]
 8007c46:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8007c48:	7dfb      	ldrb	r3, [r7, #23]
 8007c4a:	1c5a      	adds	r2, r3, #1
 8007c4c:	75fa      	strb	r2, [r7, #23]
 8007c4e:	461a      	mov	r2, r3
 8007c50:	68bb      	ldr	r3, [r7, #8]
 8007c52:	4413      	add	r3, r2
 8007c54:	2203      	movs	r2, #3
 8007c56:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8007c58:	e012      	b.n	8007c80 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8007c5a:	68fb      	ldr	r3, [r7, #12]
 8007c5c:	1c5a      	adds	r2, r3, #1
 8007c5e:	60fa      	str	r2, [r7, #12]
 8007c60:	7dfa      	ldrb	r2, [r7, #23]
 8007c62:	1c51      	adds	r1, r2, #1
 8007c64:	75f9      	strb	r1, [r7, #23]
 8007c66:	4611      	mov	r1, r2
 8007c68:	68ba      	ldr	r2, [r7, #8]
 8007c6a:	440a      	add	r2, r1
 8007c6c:	781b      	ldrb	r3, [r3, #0]
 8007c6e:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8007c70:	7dfb      	ldrb	r3, [r7, #23]
 8007c72:	1c5a      	adds	r2, r3, #1
 8007c74:	75fa      	strb	r2, [r7, #23]
 8007c76:	461a      	mov	r2, r3
 8007c78:	68bb      	ldr	r3, [r7, #8]
 8007c7a:	4413      	add	r3, r2
 8007c7c:	2200      	movs	r2, #0
 8007c7e:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8007c80:	68fb      	ldr	r3, [r7, #12]
 8007c82:	781b      	ldrb	r3, [r3, #0]
 8007c84:	2b00      	cmp	r3, #0
 8007c86:	d1e8      	bne.n	8007c5a <USBD_GetString+0x4e>
    }
  }
}
 8007c88:	bf00      	nop
 8007c8a:	3718      	adds	r7, #24
 8007c8c:	46bd      	mov	sp, r7
 8007c8e:	bd80      	pop	{r7, pc}

08007c90 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8007c90:	b480      	push	{r7}
 8007c92:	b085      	sub	sp, #20
 8007c94:	af00      	add	r7, sp, #0
 8007c96:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8007c98:	2300      	movs	r3, #0
 8007c9a:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 8007c9c:	e005      	b.n	8007caa <USBD_GetLen+0x1a>
  {
    len++;
 8007c9e:	7bfb      	ldrb	r3, [r7, #15]
 8007ca0:	3301      	adds	r3, #1
 8007ca2:	73fb      	strb	r3, [r7, #15]
    buf++;
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	3301      	adds	r3, #1
 8007ca8:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	781b      	ldrb	r3, [r3, #0]
 8007cae:	2b00      	cmp	r3, #0
 8007cb0:	d1f5      	bne.n	8007c9e <USBD_GetLen+0xe>
  }

  return len;
 8007cb2:	7bfb      	ldrb	r3, [r7, #15]
}
 8007cb4:	4618      	mov	r0, r3
 8007cb6:	3714      	adds	r7, #20
 8007cb8:	46bd      	mov	sp, r7
 8007cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cbe:	4770      	bx	lr

08007cc0 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8007cc0:	b580      	push	{r7, lr}
 8007cc2:	b084      	sub	sp, #16
 8007cc4:	af00      	add	r7, sp, #0
 8007cc6:	60f8      	str	r0, [r7, #12]
 8007cc8:	60b9      	str	r1, [r7, #8]
 8007cca:	4613      	mov	r3, r2
 8007ccc:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8007cce:	68fb      	ldr	r3, [r7, #12]
 8007cd0:	2202      	movs	r2, #2
 8007cd2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8007cd6:	88fa      	ldrh	r2, [r7, #6]
 8007cd8:	68fb      	ldr	r3, [r7, #12]
 8007cda:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8007cdc:	88fa      	ldrh	r2, [r7, #6]
 8007cde:	68fb      	ldr	r3, [r7, #12]
 8007ce0:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007ce2:	88fb      	ldrh	r3, [r7, #6]
 8007ce4:	68ba      	ldr	r2, [r7, #8]
 8007ce6:	2100      	movs	r1, #0
 8007ce8:	68f8      	ldr	r0, [r7, #12]
 8007cea:	f000 fc8b 	bl	8008604 <USBD_LL_Transmit>

  return USBD_OK;
 8007cee:	2300      	movs	r3, #0
}
 8007cf0:	4618      	mov	r0, r3
 8007cf2:	3710      	adds	r7, #16
 8007cf4:	46bd      	mov	sp, r7
 8007cf6:	bd80      	pop	{r7, pc}

08007cf8 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8007cf8:	b580      	push	{r7, lr}
 8007cfa:	b084      	sub	sp, #16
 8007cfc:	af00      	add	r7, sp, #0
 8007cfe:	60f8      	str	r0, [r7, #12]
 8007d00:	60b9      	str	r1, [r7, #8]
 8007d02:	4613      	mov	r3, r2
 8007d04:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007d06:	88fb      	ldrh	r3, [r7, #6]
 8007d08:	68ba      	ldr	r2, [r7, #8]
 8007d0a:	2100      	movs	r1, #0
 8007d0c:	68f8      	ldr	r0, [r7, #12]
 8007d0e:	f000 fc79 	bl	8008604 <USBD_LL_Transmit>

  return USBD_OK;
 8007d12:	2300      	movs	r3, #0
}
 8007d14:	4618      	mov	r0, r3
 8007d16:	3710      	adds	r7, #16
 8007d18:	46bd      	mov	sp, r7
 8007d1a:	bd80      	pop	{r7, pc}

08007d1c <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 8007d1c:	b580      	push	{r7, lr}
 8007d1e:	b084      	sub	sp, #16
 8007d20:	af00      	add	r7, sp, #0
 8007d22:	60f8      	str	r0, [r7, #12]
 8007d24:	60b9      	str	r1, [r7, #8]
 8007d26:	4613      	mov	r3, r2
 8007d28:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8007d2a:	68fb      	ldr	r3, [r7, #12]
 8007d2c:	2203      	movs	r2, #3
 8007d2e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8007d32:	88fa      	ldrh	r2, [r7, #6]
 8007d34:	68fb      	ldr	r3, [r7, #12]
 8007d36:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 8007d3a:	88fa      	ldrh	r2, [r7, #6]
 8007d3c:	68fb      	ldr	r3, [r7, #12]
 8007d3e:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007d42:	88fb      	ldrh	r3, [r7, #6]
 8007d44:	68ba      	ldr	r2, [r7, #8]
 8007d46:	2100      	movs	r1, #0
 8007d48:	68f8      	ldr	r0, [r7, #12]
 8007d4a:	f000 fc7e 	bl	800864a <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007d4e:	2300      	movs	r3, #0
}
 8007d50:	4618      	mov	r0, r3
 8007d52:	3710      	adds	r7, #16
 8007d54:	46bd      	mov	sp, r7
 8007d56:	bd80      	pop	{r7, pc}

08007d58 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8007d58:	b580      	push	{r7, lr}
 8007d5a:	b084      	sub	sp, #16
 8007d5c:	af00      	add	r7, sp, #0
 8007d5e:	60f8      	str	r0, [r7, #12]
 8007d60:	60b9      	str	r1, [r7, #8]
 8007d62:	4613      	mov	r3, r2
 8007d64:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007d66:	88fb      	ldrh	r3, [r7, #6]
 8007d68:	68ba      	ldr	r2, [r7, #8]
 8007d6a:	2100      	movs	r1, #0
 8007d6c:	68f8      	ldr	r0, [r7, #12]
 8007d6e:	f000 fc6c 	bl	800864a <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007d72:	2300      	movs	r3, #0
}
 8007d74:	4618      	mov	r0, r3
 8007d76:	3710      	adds	r7, #16
 8007d78:	46bd      	mov	sp, r7
 8007d7a:	bd80      	pop	{r7, pc}

08007d7c <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8007d7c:	b580      	push	{r7, lr}
 8007d7e:	b082      	sub	sp, #8
 8007d80:	af00      	add	r7, sp, #0
 8007d82:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	2204      	movs	r2, #4
 8007d88:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8007d8c:	2300      	movs	r3, #0
 8007d8e:	2200      	movs	r2, #0
 8007d90:	2100      	movs	r1, #0
 8007d92:	6878      	ldr	r0, [r7, #4]
 8007d94:	f000 fc36 	bl	8008604 <USBD_LL_Transmit>

  return USBD_OK;
 8007d98:	2300      	movs	r3, #0
}
 8007d9a:	4618      	mov	r0, r3
 8007d9c:	3708      	adds	r7, #8
 8007d9e:	46bd      	mov	sp, r7
 8007da0:	bd80      	pop	{r7, pc}

08007da2 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8007da2:	b580      	push	{r7, lr}
 8007da4:	b082      	sub	sp, #8
 8007da6:	af00      	add	r7, sp, #0
 8007da8:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	2205      	movs	r2, #5
 8007dae:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007db2:	2300      	movs	r3, #0
 8007db4:	2200      	movs	r2, #0
 8007db6:	2100      	movs	r1, #0
 8007db8:	6878      	ldr	r0, [r7, #4]
 8007dba:	f000 fc46 	bl	800864a <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007dbe:	2300      	movs	r3, #0
}
 8007dc0:	4618      	mov	r0, r3
 8007dc2:	3708      	adds	r7, #8
 8007dc4:	46bd      	mov	sp, r7
 8007dc6:	bd80      	pop	{r7, pc}

08007dc8 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8007dc8:	b580      	push	{r7, lr}
 8007dca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8007dcc:	2200      	movs	r2, #0
 8007dce:	4912      	ldr	r1, [pc, #72]	; (8007e18 <MX_USB_DEVICE_Init+0x50>)
 8007dd0:	4812      	ldr	r0, [pc, #72]	; (8007e1c <MX_USB_DEVICE_Init+0x54>)
 8007dd2:	f7fe ff65 	bl	8006ca0 <USBD_Init>
 8007dd6:	4603      	mov	r3, r0
 8007dd8:	2b00      	cmp	r3, #0
 8007dda:	d001      	beq.n	8007de0 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8007ddc:	f7f9 f816 	bl	8000e0c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8007de0:	490f      	ldr	r1, [pc, #60]	; (8007e20 <MX_USB_DEVICE_Init+0x58>)
 8007de2:	480e      	ldr	r0, [pc, #56]	; (8007e1c <MX_USB_DEVICE_Init+0x54>)
 8007de4:	f7fe ff87 	bl	8006cf6 <USBD_RegisterClass>
 8007de8:	4603      	mov	r3, r0
 8007dea:	2b00      	cmp	r3, #0
 8007dec:	d001      	beq.n	8007df2 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8007dee:	f7f9 f80d 	bl	8000e0c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8007df2:	490c      	ldr	r1, [pc, #48]	; (8007e24 <MX_USB_DEVICE_Init+0x5c>)
 8007df4:	4809      	ldr	r0, [pc, #36]	; (8007e1c <MX_USB_DEVICE_Init+0x54>)
 8007df6:	f7fe feb5 	bl	8006b64 <USBD_CDC_RegisterInterface>
 8007dfa:	4603      	mov	r3, r0
 8007dfc:	2b00      	cmp	r3, #0
 8007dfe:	d001      	beq.n	8007e04 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8007e00:	f7f9 f804 	bl	8000e0c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8007e04:	4805      	ldr	r0, [pc, #20]	; (8007e1c <MX_USB_DEVICE_Init+0x54>)
 8007e06:	f7fe ff90 	bl	8006d2a <USBD_Start>
 8007e0a:	4603      	mov	r3, r0
 8007e0c:	2b00      	cmp	r3, #0
 8007e0e:	d001      	beq.n	8007e14 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8007e10:	f7f8 fffc 	bl	8000e0c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8007e14:	bf00      	nop
 8007e16:	bd80      	pop	{r7, pc}
 8007e18:	20000514 	.word	0x20000514
 8007e1c:	20000a34 	.word	0x20000a34
 8007e20:	20000400 	.word	0x20000400
 8007e24:	20000504 	.word	0x20000504

08007e28 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8007e28:	b580      	push	{r7, lr}
 8007e2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8007e2c:	2200      	movs	r2, #0
 8007e2e:	4905      	ldr	r1, [pc, #20]	; (8007e44 <CDC_Init_FS+0x1c>)
 8007e30:	4805      	ldr	r0, [pc, #20]	; (8007e48 <CDC_Init_FS+0x20>)
 8007e32:	f7fe feae 	bl	8006b92 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8007e36:	4905      	ldr	r1, [pc, #20]	; (8007e4c <CDC_Init_FS+0x24>)
 8007e38:	4803      	ldr	r0, [pc, #12]	; (8007e48 <CDC_Init_FS+0x20>)
 8007e3a:	f7fe fec4 	bl	8006bc6 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8007e3e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8007e40:	4618      	mov	r0, r3
 8007e42:	bd80      	pop	{r7, pc}
 8007e44:	200010e0 	.word	0x200010e0
 8007e48:	20000a34 	.word	0x20000a34
 8007e4c:	20000cf8 	.word	0x20000cf8

08007e50 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8007e50:	b480      	push	{r7}
 8007e52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8007e54:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8007e56:	4618      	mov	r0, r3
 8007e58:	46bd      	mov	sp, r7
 8007e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e5e:	4770      	bx	lr

08007e60 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8007e60:	b480      	push	{r7}
 8007e62:	b083      	sub	sp, #12
 8007e64:	af00      	add	r7, sp, #0
 8007e66:	4603      	mov	r3, r0
 8007e68:	6039      	str	r1, [r7, #0]
 8007e6a:	71fb      	strb	r3, [r7, #7]
 8007e6c:	4613      	mov	r3, r2
 8007e6e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8007e70:	79fb      	ldrb	r3, [r7, #7]
 8007e72:	2b23      	cmp	r3, #35	; 0x23
 8007e74:	d84a      	bhi.n	8007f0c <CDC_Control_FS+0xac>
 8007e76:	a201      	add	r2, pc, #4	; (adr r2, 8007e7c <CDC_Control_FS+0x1c>)
 8007e78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e7c:	08007f0d 	.word	0x08007f0d
 8007e80:	08007f0d 	.word	0x08007f0d
 8007e84:	08007f0d 	.word	0x08007f0d
 8007e88:	08007f0d 	.word	0x08007f0d
 8007e8c:	08007f0d 	.word	0x08007f0d
 8007e90:	08007f0d 	.word	0x08007f0d
 8007e94:	08007f0d 	.word	0x08007f0d
 8007e98:	08007f0d 	.word	0x08007f0d
 8007e9c:	08007f0d 	.word	0x08007f0d
 8007ea0:	08007f0d 	.word	0x08007f0d
 8007ea4:	08007f0d 	.word	0x08007f0d
 8007ea8:	08007f0d 	.word	0x08007f0d
 8007eac:	08007f0d 	.word	0x08007f0d
 8007eb0:	08007f0d 	.word	0x08007f0d
 8007eb4:	08007f0d 	.word	0x08007f0d
 8007eb8:	08007f0d 	.word	0x08007f0d
 8007ebc:	08007f0d 	.word	0x08007f0d
 8007ec0:	08007f0d 	.word	0x08007f0d
 8007ec4:	08007f0d 	.word	0x08007f0d
 8007ec8:	08007f0d 	.word	0x08007f0d
 8007ecc:	08007f0d 	.word	0x08007f0d
 8007ed0:	08007f0d 	.word	0x08007f0d
 8007ed4:	08007f0d 	.word	0x08007f0d
 8007ed8:	08007f0d 	.word	0x08007f0d
 8007edc:	08007f0d 	.word	0x08007f0d
 8007ee0:	08007f0d 	.word	0x08007f0d
 8007ee4:	08007f0d 	.word	0x08007f0d
 8007ee8:	08007f0d 	.word	0x08007f0d
 8007eec:	08007f0d 	.word	0x08007f0d
 8007ef0:	08007f0d 	.word	0x08007f0d
 8007ef4:	08007f0d 	.word	0x08007f0d
 8007ef8:	08007f0d 	.word	0x08007f0d
 8007efc:	08007f0d 	.word	0x08007f0d
 8007f00:	08007f0d 	.word	0x08007f0d
 8007f04:	08007f0d 	.word	0x08007f0d
 8007f08:	08007f0d 	.word	0x08007f0d
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8007f0c:	bf00      	nop
  }

  return (USBD_OK);
 8007f0e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8007f10:	4618      	mov	r0, r3
 8007f12:	370c      	adds	r7, #12
 8007f14:	46bd      	mov	sp, r7
 8007f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f1a:	4770      	bx	lr

08007f1c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8007f1c:	b580      	push	{r7, lr}
 8007f1e:	b082      	sub	sp, #8
 8007f20:	af00      	add	r7, sp, #0
 8007f22:	6078      	str	r0, [r7, #4]
 8007f24:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8007f26:	6879      	ldr	r1, [r7, #4]
 8007f28:	4805      	ldr	r0, [pc, #20]	; (8007f40 <CDC_Receive_FS+0x24>)
 8007f2a:	f7fe fe4c 	bl	8006bc6 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8007f2e:	4804      	ldr	r0, [pc, #16]	; (8007f40 <CDC_Receive_FS+0x24>)
 8007f30:	f7fe fe8c 	bl	8006c4c <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8007f34:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8007f36:	4618      	mov	r0, r3
 8007f38:	3708      	adds	r7, #8
 8007f3a:	46bd      	mov	sp, r7
 8007f3c:	bd80      	pop	{r7, pc}
 8007f3e:	bf00      	nop
 8007f40:	20000a34 	.word	0x20000a34

08007f44 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8007f44:	b580      	push	{r7, lr}
 8007f46:	b084      	sub	sp, #16
 8007f48:	af00      	add	r7, sp, #0
 8007f4a:	6078      	str	r0, [r7, #4]
 8007f4c:	460b      	mov	r3, r1
 8007f4e:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8007f50:	2300      	movs	r3, #0
 8007f52:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8007f54:	4b0d      	ldr	r3, [pc, #52]	; (8007f8c <CDC_Transmit_FS+0x48>)
 8007f56:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007f5a:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8007f5c:	68bb      	ldr	r3, [r7, #8]
 8007f5e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007f62:	2b00      	cmp	r3, #0
 8007f64:	d001      	beq.n	8007f6a <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8007f66:	2301      	movs	r3, #1
 8007f68:	e00b      	b.n	8007f82 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8007f6a:	887b      	ldrh	r3, [r7, #2]
 8007f6c:	461a      	mov	r2, r3
 8007f6e:	6879      	ldr	r1, [r7, #4]
 8007f70:	4806      	ldr	r0, [pc, #24]	; (8007f8c <CDC_Transmit_FS+0x48>)
 8007f72:	f7fe fe0e 	bl	8006b92 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8007f76:	4805      	ldr	r0, [pc, #20]	; (8007f8c <CDC_Transmit_FS+0x48>)
 8007f78:	f7fe fe39 	bl	8006bee <USBD_CDC_TransmitPacket>
 8007f7c:	4603      	mov	r3, r0
 8007f7e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8007f80:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f82:	4618      	mov	r0, r3
 8007f84:	3710      	adds	r7, #16
 8007f86:	46bd      	mov	sp, r7
 8007f88:	bd80      	pop	{r7, pc}
 8007f8a:	bf00      	nop
 8007f8c:	20000a34 	.word	0x20000a34

08007f90 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007f90:	b480      	push	{r7}
 8007f92:	b083      	sub	sp, #12
 8007f94:	af00      	add	r7, sp, #0
 8007f96:	4603      	mov	r3, r0
 8007f98:	6039      	str	r1, [r7, #0]
 8007f9a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8007f9c:	683b      	ldr	r3, [r7, #0]
 8007f9e:	2212      	movs	r2, #18
 8007fa0:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8007fa2:	4b03      	ldr	r3, [pc, #12]	; (8007fb0 <USBD_FS_DeviceDescriptor+0x20>)
}
 8007fa4:	4618      	mov	r0, r3
 8007fa6:	370c      	adds	r7, #12
 8007fa8:	46bd      	mov	sp, r7
 8007faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fae:	4770      	bx	lr
 8007fb0:	20000530 	.word	0x20000530

08007fb4 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007fb4:	b480      	push	{r7}
 8007fb6:	b083      	sub	sp, #12
 8007fb8:	af00      	add	r7, sp, #0
 8007fba:	4603      	mov	r3, r0
 8007fbc:	6039      	str	r1, [r7, #0]
 8007fbe:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8007fc0:	683b      	ldr	r3, [r7, #0]
 8007fc2:	2204      	movs	r2, #4
 8007fc4:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8007fc6:	4b03      	ldr	r3, [pc, #12]	; (8007fd4 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8007fc8:	4618      	mov	r0, r3
 8007fca:	370c      	adds	r7, #12
 8007fcc:	46bd      	mov	sp, r7
 8007fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fd2:	4770      	bx	lr
 8007fd4:	20000544 	.word	0x20000544

08007fd8 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007fd8:	b580      	push	{r7, lr}
 8007fda:	b082      	sub	sp, #8
 8007fdc:	af00      	add	r7, sp, #0
 8007fde:	4603      	mov	r3, r0
 8007fe0:	6039      	str	r1, [r7, #0]
 8007fe2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007fe4:	79fb      	ldrb	r3, [r7, #7]
 8007fe6:	2b00      	cmp	r3, #0
 8007fe8:	d105      	bne.n	8007ff6 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007fea:	683a      	ldr	r2, [r7, #0]
 8007fec:	4907      	ldr	r1, [pc, #28]	; (800800c <USBD_FS_ProductStrDescriptor+0x34>)
 8007fee:	4808      	ldr	r0, [pc, #32]	; (8008010 <USBD_FS_ProductStrDescriptor+0x38>)
 8007ff0:	f7ff fe0c 	bl	8007c0c <USBD_GetString>
 8007ff4:	e004      	b.n	8008000 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007ff6:	683a      	ldr	r2, [r7, #0]
 8007ff8:	4904      	ldr	r1, [pc, #16]	; (800800c <USBD_FS_ProductStrDescriptor+0x34>)
 8007ffa:	4805      	ldr	r0, [pc, #20]	; (8008010 <USBD_FS_ProductStrDescriptor+0x38>)
 8007ffc:	f7ff fe06 	bl	8007c0c <USBD_GetString>
  }
  return USBD_StrDesc;
 8008000:	4b02      	ldr	r3, [pc, #8]	; (800800c <USBD_FS_ProductStrDescriptor+0x34>)
}
 8008002:	4618      	mov	r0, r3
 8008004:	3708      	adds	r7, #8
 8008006:	46bd      	mov	sp, r7
 8008008:	bd80      	pop	{r7, pc}
 800800a:	bf00      	nop
 800800c:	200014c8 	.word	0x200014c8
 8008010:	0800a220 	.word	0x0800a220

08008014 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008014:	b580      	push	{r7, lr}
 8008016:	b082      	sub	sp, #8
 8008018:	af00      	add	r7, sp, #0
 800801a:	4603      	mov	r3, r0
 800801c:	6039      	str	r1, [r7, #0]
 800801e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8008020:	683a      	ldr	r2, [r7, #0]
 8008022:	4904      	ldr	r1, [pc, #16]	; (8008034 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8008024:	4804      	ldr	r0, [pc, #16]	; (8008038 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8008026:	f7ff fdf1 	bl	8007c0c <USBD_GetString>
  return USBD_StrDesc;
 800802a:	4b02      	ldr	r3, [pc, #8]	; (8008034 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800802c:	4618      	mov	r0, r3
 800802e:	3708      	adds	r7, #8
 8008030:	46bd      	mov	sp, r7
 8008032:	bd80      	pop	{r7, pc}
 8008034:	200014c8 	.word	0x200014c8
 8008038:	0800a228 	.word	0x0800a228

0800803c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800803c:	b580      	push	{r7, lr}
 800803e:	b082      	sub	sp, #8
 8008040:	af00      	add	r7, sp, #0
 8008042:	4603      	mov	r3, r0
 8008044:	6039      	str	r1, [r7, #0]
 8008046:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8008048:	683b      	ldr	r3, [r7, #0]
 800804a:	221a      	movs	r2, #26
 800804c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800804e:	f000 f843 	bl	80080d8 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8008052:	4b02      	ldr	r3, [pc, #8]	; (800805c <USBD_FS_SerialStrDescriptor+0x20>)
}
 8008054:	4618      	mov	r0, r3
 8008056:	3708      	adds	r7, #8
 8008058:	46bd      	mov	sp, r7
 800805a:	bd80      	pop	{r7, pc}
 800805c:	20000548 	.word	0x20000548

08008060 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008060:	b580      	push	{r7, lr}
 8008062:	b082      	sub	sp, #8
 8008064:	af00      	add	r7, sp, #0
 8008066:	4603      	mov	r3, r0
 8008068:	6039      	str	r1, [r7, #0]
 800806a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800806c:	79fb      	ldrb	r3, [r7, #7]
 800806e:	2b00      	cmp	r3, #0
 8008070:	d105      	bne.n	800807e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008072:	683a      	ldr	r2, [r7, #0]
 8008074:	4907      	ldr	r1, [pc, #28]	; (8008094 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008076:	4808      	ldr	r0, [pc, #32]	; (8008098 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008078:	f7ff fdc8 	bl	8007c0c <USBD_GetString>
 800807c:	e004      	b.n	8008088 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800807e:	683a      	ldr	r2, [r7, #0]
 8008080:	4904      	ldr	r1, [pc, #16]	; (8008094 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008082:	4805      	ldr	r0, [pc, #20]	; (8008098 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008084:	f7ff fdc2 	bl	8007c0c <USBD_GetString>
  }
  return USBD_StrDesc;
 8008088:	4b02      	ldr	r3, [pc, #8]	; (8008094 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800808a:	4618      	mov	r0, r3
 800808c:	3708      	adds	r7, #8
 800808e:	46bd      	mov	sp, r7
 8008090:	bd80      	pop	{r7, pc}
 8008092:	bf00      	nop
 8008094:	200014c8 	.word	0x200014c8
 8008098:	0800a23c 	.word	0x0800a23c

0800809c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800809c:	b580      	push	{r7, lr}
 800809e:	b082      	sub	sp, #8
 80080a0:	af00      	add	r7, sp, #0
 80080a2:	4603      	mov	r3, r0
 80080a4:	6039      	str	r1, [r7, #0]
 80080a6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80080a8:	79fb      	ldrb	r3, [r7, #7]
 80080aa:	2b00      	cmp	r3, #0
 80080ac:	d105      	bne.n	80080ba <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80080ae:	683a      	ldr	r2, [r7, #0]
 80080b0:	4907      	ldr	r1, [pc, #28]	; (80080d0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80080b2:	4808      	ldr	r0, [pc, #32]	; (80080d4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80080b4:	f7ff fdaa 	bl	8007c0c <USBD_GetString>
 80080b8:	e004      	b.n	80080c4 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80080ba:	683a      	ldr	r2, [r7, #0]
 80080bc:	4904      	ldr	r1, [pc, #16]	; (80080d0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80080be:	4805      	ldr	r0, [pc, #20]	; (80080d4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80080c0:	f7ff fda4 	bl	8007c0c <USBD_GetString>
  }
  return USBD_StrDesc;
 80080c4:	4b02      	ldr	r3, [pc, #8]	; (80080d0 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80080c6:	4618      	mov	r0, r3
 80080c8:	3708      	adds	r7, #8
 80080ca:	46bd      	mov	sp, r7
 80080cc:	bd80      	pop	{r7, pc}
 80080ce:	bf00      	nop
 80080d0:	200014c8 	.word	0x200014c8
 80080d4:	0800a248 	.word	0x0800a248

080080d8 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80080d8:	b580      	push	{r7, lr}
 80080da:	b084      	sub	sp, #16
 80080dc:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80080de:	4b0f      	ldr	r3, [pc, #60]	; (800811c <Get_SerialNum+0x44>)
 80080e0:	681b      	ldr	r3, [r3, #0]
 80080e2:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80080e4:	4b0e      	ldr	r3, [pc, #56]	; (8008120 <Get_SerialNum+0x48>)
 80080e6:	681b      	ldr	r3, [r3, #0]
 80080e8:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80080ea:	4b0e      	ldr	r3, [pc, #56]	; (8008124 <Get_SerialNum+0x4c>)
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80080f0:	68fa      	ldr	r2, [r7, #12]
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	4413      	add	r3, r2
 80080f6:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80080f8:	68fb      	ldr	r3, [r7, #12]
 80080fa:	2b00      	cmp	r3, #0
 80080fc:	d009      	beq.n	8008112 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80080fe:	2208      	movs	r2, #8
 8008100:	4909      	ldr	r1, [pc, #36]	; (8008128 <Get_SerialNum+0x50>)
 8008102:	68f8      	ldr	r0, [r7, #12]
 8008104:	f000 f814 	bl	8008130 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8008108:	2204      	movs	r2, #4
 800810a:	4908      	ldr	r1, [pc, #32]	; (800812c <Get_SerialNum+0x54>)
 800810c:	68b8      	ldr	r0, [r7, #8]
 800810e:	f000 f80f 	bl	8008130 <IntToUnicode>
  }
}
 8008112:	bf00      	nop
 8008114:	3710      	adds	r7, #16
 8008116:	46bd      	mov	sp, r7
 8008118:	bd80      	pop	{r7, pc}
 800811a:	bf00      	nop
 800811c:	1ffff7ac 	.word	0x1ffff7ac
 8008120:	1ffff7b0 	.word	0x1ffff7b0
 8008124:	1ffff7b4 	.word	0x1ffff7b4
 8008128:	2000054a 	.word	0x2000054a
 800812c:	2000055a 	.word	0x2000055a

08008130 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8008130:	b480      	push	{r7}
 8008132:	b087      	sub	sp, #28
 8008134:	af00      	add	r7, sp, #0
 8008136:	60f8      	str	r0, [r7, #12]
 8008138:	60b9      	str	r1, [r7, #8]
 800813a:	4613      	mov	r3, r2
 800813c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800813e:	2300      	movs	r3, #0
 8008140:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8008142:	2300      	movs	r3, #0
 8008144:	75fb      	strb	r3, [r7, #23]
 8008146:	e027      	b.n	8008198 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8008148:	68fb      	ldr	r3, [r7, #12]
 800814a:	0f1b      	lsrs	r3, r3, #28
 800814c:	2b09      	cmp	r3, #9
 800814e:	d80b      	bhi.n	8008168 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8008150:	68fb      	ldr	r3, [r7, #12]
 8008152:	0f1b      	lsrs	r3, r3, #28
 8008154:	b2da      	uxtb	r2, r3
 8008156:	7dfb      	ldrb	r3, [r7, #23]
 8008158:	005b      	lsls	r3, r3, #1
 800815a:	4619      	mov	r1, r3
 800815c:	68bb      	ldr	r3, [r7, #8]
 800815e:	440b      	add	r3, r1
 8008160:	3230      	adds	r2, #48	; 0x30
 8008162:	b2d2      	uxtb	r2, r2
 8008164:	701a      	strb	r2, [r3, #0]
 8008166:	e00a      	b.n	800817e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8008168:	68fb      	ldr	r3, [r7, #12]
 800816a:	0f1b      	lsrs	r3, r3, #28
 800816c:	b2da      	uxtb	r2, r3
 800816e:	7dfb      	ldrb	r3, [r7, #23]
 8008170:	005b      	lsls	r3, r3, #1
 8008172:	4619      	mov	r1, r3
 8008174:	68bb      	ldr	r3, [r7, #8]
 8008176:	440b      	add	r3, r1
 8008178:	3237      	adds	r2, #55	; 0x37
 800817a:	b2d2      	uxtb	r2, r2
 800817c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800817e:	68fb      	ldr	r3, [r7, #12]
 8008180:	011b      	lsls	r3, r3, #4
 8008182:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8008184:	7dfb      	ldrb	r3, [r7, #23]
 8008186:	005b      	lsls	r3, r3, #1
 8008188:	3301      	adds	r3, #1
 800818a:	68ba      	ldr	r2, [r7, #8]
 800818c:	4413      	add	r3, r2
 800818e:	2200      	movs	r2, #0
 8008190:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8008192:	7dfb      	ldrb	r3, [r7, #23]
 8008194:	3301      	adds	r3, #1
 8008196:	75fb      	strb	r3, [r7, #23]
 8008198:	7dfa      	ldrb	r2, [r7, #23]
 800819a:	79fb      	ldrb	r3, [r7, #7]
 800819c:	429a      	cmp	r2, r3
 800819e:	d3d3      	bcc.n	8008148 <IntToUnicode+0x18>
  }
}
 80081a0:	bf00      	nop
 80081a2:	371c      	adds	r7, #28
 80081a4:	46bd      	mov	sp, r7
 80081a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081aa:	4770      	bx	lr

080081ac <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80081ac:	b580      	push	{r7, lr}
 80081ae:	b08a      	sub	sp, #40	; 0x28
 80081b0:	af00      	add	r7, sp, #0
 80081b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80081b4:	f107 0314 	add.w	r3, r7, #20
 80081b8:	2200      	movs	r2, #0
 80081ba:	601a      	str	r2, [r3, #0]
 80081bc:	605a      	str	r2, [r3, #4]
 80081be:	609a      	str	r2, [r3, #8]
 80081c0:	60da      	str	r2, [r3, #12]
 80081c2:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB)
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	4a1c      	ldr	r2, [pc, #112]	; (800823c <HAL_PCD_MspInit+0x90>)
 80081ca:	4293      	cmp	r3, r2
 80081cc:	d131      	bne.n	8008232 <HAL_PCD_MspInit+0x86>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80081ce:	4b1c      	ldr	r3, [pc, #112]	; (8008240 <HAL_PCD_MspInit+0x94>)
 80081d0:	695b      	ldr	r3, [r3, #20]
 80081d2:	4a1b      	ldr	r2, [pc, #108]	; (8008240 <HAL_PCD_MspInit+0x94>)
 80081d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80081d8:	6153      	str	r3, [r2, #20]
 80081da:	4b19      	ldr	r3, [pc, #100]	; (8008240 <HAL_PCD_MspInit+0x94>)
 80081dc:	695b      	ldr	r3, [r3, #20]
 80081de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80081e2:	613b      	str	r3, [r7, #16]
 80081e4:	693b      	ldr	r3, [r7, #16]
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = DM_Pin|DP_Pin;
 80081e6:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80081ea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80081ec:	2302      	movs	r3, #2
 80081ee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80081f0:	2300      	movs	r3, #0
 80081f2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80081f4:	2303      	movs	r3, #3
 80081f6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF14_USB;
 80081f8:	230e      	movs	r3, #14
 80081fa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80081fc:	f107 0314 	add.w	r3, r7, #20
 8008200:	4619      	mov	r1, r3
 8008202:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8008206:	f7f9 f8f7 	bl	80013f8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800820a:	4b0d      	ldr	r3, [pc, #52]	; (8008240 <HAL_PCD_MspInit+0x94>)
 800820c:	69db      	ldr	r3, [r3, #28]
 800820e:	4a0c      	ldr	r2, [pc, #48]	; (8008240 <HAL_PCD_MspInit+0x94>)
 8008210:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8008214:	61d3      	str	r3, [r2, #28]
 8008216:	4b0a      	ldr	r3, [pc, #40]	; (8008240 <HAL_PCD_MspInit+0x94>)
 8008218:	69db      	ldr	r3, [r3, #28]
 800821a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800821e:	60fb      	str	r3, [r7, #12]
 8008220:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN_RX0_IRQn, 0, 0);
 8008222:	2200      	movs	r2, #0
 8008224:	2100      	movs	r1, #0
 8008226:	2014      	movs	r0, #20
 8008228:	f7f9 f8af 	bl	800138a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN_RX0_IRQn);
 800822c:	2014      	movs	r0, #20
 800822e:	f7f9 f8c8 	bl	80013c2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8008232:	bf00      	nop
 8008234:	3728      	adds	r7, #40	; 0x28
 8008236:	46bd      	mov	sp, r7
 8008238:	bd80      	pop	{r7, pc}
 800823a:	bf00      	nop
 800823c:	40005c00 	.word	0x40005c00
 8008240:	40021000 	.word	0x40021000

08008244 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008244:	b580      	push	{r7, lr}
 8008246:	b082      	sub	sp, #8
 8008248:	af00      	add	r7, sp, #0
 800824a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	f8d3 22e8 	ldr.w	r2, [r3, #744]	; 0x2e8
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8008258:	4619      	mov	r1, r3
 800825a:	4610      	mov	r0, r2
 800825c:	f7fe fdae 	bl	8006dbc <USBD_LL_SetupStage>
}
 8008260:	bf00      	nop
 8008262:	3708      	adds	r7, #8
 8008264:	46bd      	mov	sp, r7
 8008266:	bd80      	pop	{r7, pc}

08008268 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008268:	b580      	push	{r7, lr}
 800826a:	b082      	sub	sp, #8
 800826c:	af00      	add	r7, sp, #0
 800826e:	6078      	str	r0, [r7, #4]
 8008270:	460b      	mov	r3, r1
 8008272:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 800827a:	78fa      	ldrb	r2, [r7, #3]
 800827c:	6879      	ldr	r1, [r7, #4]
 800827e:	4613      	mov	r3, r2
 8008280:	009b      	lsls	r3, r3, #2
 8008282:	4413      	add	r3, r2
 8008284:	00db      	lsls	r3, r3, #3
 8008286:	440b      	add	r3, r1
 8008288:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800828c:	681a      	ldr	r2, [r3, #0]
 800828e:	78fb      	ldrb	r3, [r7, #3]
 8008290:	4619      	mov	r1, r3
 8008292:	f7fe fdde 	bl	8006e52 <USBD_LL_DataOutStage>
}
 8008296:	bf00      	nop
 8008298:	3708      	adds	r7, #8
 800829a:	46bd      	mov	sp, r7
 800829c:	bd80      	pop	{r7, pc}

0800829e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800829e:	b580      	push	{r7, lr}
 80082a0:	b082      	sub	sp, #8
 80082a2:	af00      	add	r7, sp, #0
 80082a4:	6078      	str	r0, [r7, #4]
 80082a6:	460b      	mov	r3, r1
 80082a8:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 80082b0:	78fa      	ldrb	r2, [r7, #3]
 80082b2:	6879      	ldr	r1, [r7, #4]
 80082b4:	4613      	mov	r3, r2
 80082b6:	009b      	lsls	r3, r3, #2
 80082b8:	4413      	add	r3, r2
 80082ba:	00db      	lsls	r3, r3, #3
 80082bc:	440b      	add	r3, r1
 80082be:	333c      	adds	r3, #60	; 0x3c
 80082c0:	681a      	ldr	r2, [r3, #0]
 80082c2:	78fb      	ldrb	r3, [r7, #3]
 80082c4:	4619      	mov	r1, r3
 80082c6:	f7fe fe35 	bl	8006f34 <USBD_LL_DataInStage>
}
 80082ca:	bf00      	nop
 80082cc:	3708      	adds	r7, #8
 80082ce:	46bd      	mov	sp, r7
 80082d0:	bd80      	pop	{r7, pc}

080082d2 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80082d2:	b580      	push	{r7, lr}
 80082d4:	b082      	sub	sp, #8
 80082d6:	af00      	add	r7, sp, #0
 80082d8:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 80082e0:	4618      	mov	r0, r3
 80082e2:	f7fe ff48 	bl	8007176 <USBD_LL_SOF>
}
 80082e6:	bf00      	nop
 80082e8:	3708      	adds	r7, #8
 80082ea:	46bd      	mov	sp, r7
 80082ec:	bd80      	pop	{r7, pc}

080082ee <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80082ee:	b580      	push	{r7, lr}
 80082f0:	b084      	sub	sp, #16
 80082f2:	af00      	add	r7, sp, #0
 80082f4:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80082f6:	2301      	movs	r3, #1
 80082f8:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	689b      	ldr	r3, [r3, #8]
 80082fe:	2b02      	cmp	r3, #2
 8008300:	d001      	beq.n	8008306 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8008302:	f7f8 fd83 	bl	8000e0c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800830c:	7bfa      	ldrb	r2, [r7, #15]
 800830e:	4611      	mov	r1, r2
 8008310:	4618      	mov	r0, r3
 8008312:	f7fe fef5 	bl	8007100 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800831c:	4618      	mov	r0, r3
 800831e:	f7fe feae 	bl	800707e <USBD_LL_Reset>
}
 8008322:	bf00      	nop
 8008324:	3710      	adds	r7, #16
 8008326:	46bd      	mov	sp, r7
 8008328:	bd80      	pop	{r7, pc}
	...

0800832c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800832c:	b580      	push	{r7, lr}
 800832e:	b082      	sub	sp, #8
 8008330:	af00      	add	r7, sp, #0
 8008332:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800833a:	4618      	mov	r0, r3
 800833c:	f7fe fef0 	bl	8007120 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	699b      	ldr	r3, [r3, #24]
 8008344:	2b00      	cmp	r3, #0
 8008346:	d005      	beq.n	8008354 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008348:	4b04      	ldr	r3, [pc, #16]	; (800835c <HAL_PCD_SuspendCallback+0x30>)
 800834a:	691b      	ldr	r3, [r3, #16]
 800834c:	4a03      	ldr	r2, [pc, #12]	; (800835c <HAL_PCD_SuspendCallback+0x30>)
 800834e:	f043 0306 	orr.w	r3, r3, #6
 8008352:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8008354:	bf00      	nop
 8008356:	3708      	adds	r7, #8
 8008358:	46bd      	mov	sp, r7
 800835a:	bd80      	pop	{r7, pc}
 800835c:	e000ed00 	.word	0xe000ed00

08008360 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008360:	b580      	push	{r7, lr}
 8008362:	b082      	sub	sp, #8
 8008364:	af00      	add	r7, sp, #0
 8008366:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800836e:	4618      	mov	r0, r3
 8008370:	f7fe feeb 	bl	800714a <USBD_LL_Resume>
}
 8008374:	bf00      	nop
 8008376:	3708      	adds	r7, #8
 8008378:	46bd      	mov	sp, r7
 800837a:	bd80      	pop	{r7, pc}

0800837c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800837c:	b580      	push	{r7, lr}
 800837e:	b082      	sub	sp, #8
 8008380:	af00      	add	r7, sp, #0
 8008382:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 8008384:	4a28      	ldr	r2, [pc, #160]	; (8008428 <USBD_LL_Init+0xac>)
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	f8c2 32e8 	str.w	r3, [r2, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	4a26      	ldr	r2, [pc, #152]	; (8008428 <USBD_LL_Init+0xac>)
 8008390:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 8008394:	4b24      	ldr	r3, [pc, #144]	; (8008428 <USBD_LL_Init+0xac>)
 8008396:	4a25      	ldr	r2, [pc, #148]	; (800842c <USBD_LL_Init+0xb0>)
 8008398:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800839a:	4b23      	ldr	r3, [pc, #140]	; (8008428 <USBD_LL_Init+0xac>)
 800839c:	2208      	movs	r2, #8
 800839e:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 80083a0:	4b21      	ldr	r3, [pc, #132]	; (8008428 <USBD_LL_Init+0xac>)
 80083a2:	2202      	movs	r2, #2
 80083a4:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80083a6:	4b20      	ldr	r3, [pc, #128]	; (8008428 <USBD_LL_Init+0xac>)
 80083a8:	2202      	movs	r2, #2
 80083aa:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 80083ac:	4b1e      	ldr	r3, [pc, #120]	; (8008428 <USBD_LL_Init+0xac>)
 80083ae:	2200      	movs	r2, #0
 80083b0:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 80083b2:	4b1d      	ldr	r3, [pc, #116]	; (8008428 <USBD_LL_Init+0xac>)
 80083b4:	2200      	movs	r2, #0
 80083b6:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 80083b8:	481b      	ldr	r0, [pc, #108]	; (8008428 <USBD_LL_Init+0xac>)
 80083ba:	f7f9 fad5 	bl	8001968 <HAL_PCD_Init>
 80083be:	4603      	mov	r3, r0
 80083c0:	2b00      	cmp	r3, #0
 80083c2:	d001      	beq.n	80083c8 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 80083c4:	f7f8 fd22 	bl	8000e0c <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80083ce:	2318      	movs	r3, #24
 80083d0:	2200      	movs	r2, #0
 80083d2:	2100      	movs	r1, #0
 80083d4:	f7fa fd71 	bl	8002eba <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80083de:	2358      	movs	r3, #88	; 0x58
 80083e0:	2200      	movs	r2, #0
 80083e2:	2180      	movs	r1, #128	; 0x80
 80083e4:	f7fa fd69 	bl	8002eba <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80083ee:	23c0      	movs	r3, #192	; 0xc0
 80083f0:	2200      	movs	r2, #0
 80083f2:	2181      	movs	r1, #129	; 0x81
 80083f4:	f7fa fd61 	bl	8002eba <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80083fe:	f44f 7388 	mov.w	r3, #272	; 0x110
 8008402:	2200      	movs	r2, #0
 8008404:	2101      	movs	r1, #1
 8008406:	f7fa fd58 	bl	8002eba <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008410:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008414:	2200      	movs	r2, #0
 8008416:	2182      	movs	r1, #130	; 0x82
 8008418:	f7fa fd4f 	bl	8002eba <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800841c:	2300      	movs	r3, #0
}
 800841e:	4618      	mov	r0, r3
 8008420:	3708      	adds	r7, #8
 8008422:	46bd      	mov	sp, r7
 8008424:	bd80      	pop	{r7, pc}
 8008426:	bf00      	nop
 8008428:	200016c8 	.word	0x200016c8
 800842c:	40005c00 	.word	0x40005c00

08008430 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8008430:	b580      	push	{r7, lr}
 8008432:	b084      	sub	sp, #16
 8008434:	af00      	add	r7, sp, #0
 8008436:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008438:	2300      	movs	r3, #0
 800843a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800843c:	2300      	movs	r3, #0
 800843e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008446:	4618      	mov	r0, r3
 8008448:	f7f9 fb6c 	bl	8001b24 <HAL_PCD_Start>
 800844c:	4603      	mov	r3, r0
 800844e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008450:	7bfb      	ldrb	r3, [r7, #15]
 8008452:	4618      	mov	r0, r3
 8008454:	f000 f954 	bl	8008700 <USBD_Get_USB_Status>
 8008458:	4603      	mov	r3, r0
 800845a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800845c:	7bbb      	ldrb	r3, [r7, #14]
}
 800845e:	4618      	mov	r0, r3
 8008460:	3710      	adds	r7, #16
 8008462:	46bd      	mov	sp, r7
 8008464:	bd80      	pop	{r7, pc}

08008466 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8008466:	b580      	push	{r7, lr}
 8008468:	b084      	sub	sp, #16
 800846a:	af00      	add	r7, sp, #0
 800846c:	6078      	str	r0, [r7, #4]
 800846e:	4608      	mov	r0, r1
 8008470:	4611      	mov	r1, r2
 8008472:	461a      	mov	r2, r3
 8008474:	4603      	mov	r3, r0
 8008476:	70fb      	strb	r3, [r7, #3]
 8008478:	460b      	mov	r3, r1
 800847a:	70bb      	strb	r3, [r7, #2]
 800847c:	4613      	mov	r3, r2
 800847e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008480:	2300      	movs	r3, #0
 8008482:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008484:	2300      	movs	r3, #0
 8008486:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800848e:	78bb      	ldrb	r3, [r7, #2]
 8008490:	883a      	ldrh	r2, [r7, #0]
 8008492:	78f9      	ldrb	r1, [r7, #3]
 8008494:	f7f9 fc88 	bl	8001da8 <HAL_PCD_EP_Open>
 8008498:	4603      	mov	r3, r0
 800849a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800849c:	7bfb      	ldrb	r3, [r7, #15]
 800849e:	4618      	mov	r0, r3
 80084a0:	f000 f92e 	bl	8008700 <USBD_Get_USB_Status>
 80084a4:	4603      	mov	r3, r0
 80084a6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80084a8:	7bbb      	ldrb	r3, [r7, #14]
}
 80084aa:	4618      	mov	r0, r3
 80084ac:	3710      	adds	r7, #16
 80084ae:	46bd      	mov	sp, r7
 80084b0:	bd80      	pop	{r7, pc}

080084b2 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80084b2:	b580      	push	{r7, lr}
 80084b4:	b084      	sub	sp, #16
 80084b6:	af00      	add	r7, sp, #0
 80084b8:	6078      	str	r0, [r7, #4]
 80084ba:	460b      	mov	r3, r1
 80084bc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80084be:	2300      	movs	r3, #0
 80084c0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80084c2:	2300      	movs	r3, #0
 80084c4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80084cc:	78fa      	ldrb	r2, [r7, #3]
 80084ce:	4611      	mov	r1, r2
 80084d0:	4618      	mov	r0, r3
 80084d2:	f7f9 fccf 	bl	8001e74 <HAL_PCD_EP_Close>
 80084d6:	4603      	mov	r3, r0
 80084d8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80084da:	7bfb      	ldrb	r3, [r7, #15]
 80084dc:	4618      	mov	r0, r3
 80084de:	f000 f90f 	bl	8008700 <USBD_Get_USB_Status>
 80084e2:	4603      	mov	r3, r0
 80084e4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80084e6:	7bbb      	ldrb	r3, [r7, #14]
}
 80084e8:	4618      	mov	r0, r3
 80084ea:	3710      	adds	r7, #16
 80084ec:	46bd      	mov	sp, r7
 80084ee:	bd80      	pop	{r7, pc}

080084f0 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80084f0:	b580      	push	{r7, lr}
 80084f2:	b084      	sub	sp, #16
 80084f4:	af00      	add	r7, sp, #0
 80084f6:	6078      	str	r0, [r7, #4]
 80084f8:	460b      	mov	r3, r1
 80084fa:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80084fc:	2300      	movs	r3, #0
 80084fe:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008500:	2300      	movs	r3, #0
 8008502:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800850a:	78fa      	ldrb	r2, [r7, #3]
 800850c:	4611      	mov	r1, r2
 800850e:	4618      	mov	r0, r3
 8008510:	f7f9 fd90 	bl	8002034 <HAL_PCD_EP_SetStall>
 8008514:	4603      	mov	r3, r0
 8008516:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008518:	7bfb      	ldrb	r3, [r7, #15]
 800851a:	4618      	mov	r0, r3
 800851c:	f000 f8f0 	bl	8008700 <USBD_Get_USB_Status>
 8008520:	4603      	mov	r3, r0
 8008522:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008524:	7bbb      	ldrb	r3, [r7, #14]
}
 8008526:	4618      	mov	r0, r3
 8008528:	3710      	adds	r7, #16
 800852a:	46bd      	mov	sp, r7
 800852c:	bd80      	pop	{r7, pc}

0800852e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800852e:	b580      	push	{r7, lr}
 8008530:	b084      	sub	sp, #16
 8008532:	af00      	add	r7, sp, #0
 8008534:	6078      	str	r0, [r7, #4]
 8008536:	460b      	mov	r3, r1
 8008538:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800853a:	2300      	movs	r3, #0
 800853c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800853e:	2300      	movs	r3, #0
 8008540:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008548:	78fa      	ldrb	r2, [r7, #3]
 800854a:	4611      	mov	r1, r2
 800854c:	4618      	mov	r0, r3
 800854e:	f7f9 fdc3 	bl	80020d8 <HAL_PCD_EP_ClrStall>
 8008552:	4603      	mov	r3, r0
 8008554:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008556:	7bfb      	ldrb	r3, [r7, #15]
 8008558:	4618      	mov	r0, r3
 800855a:	f000 f8d1 	bl	8008700 <USBD_Get_USB_Status>
 800855e:	4603      	mov	r3, r0
 8008560:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008562:	7bbb      	ldrb	r3, [r7, #14]
}
 8008564:	4618      	mov	r0, r3
 8008566:	3710      	adds	r7, #16
 8008568:	46bd      	mov	sp, r7
 800856a:	bd80      	pop	{r7, pc}

0800856c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800856c:	b480      	push	{r7}
 800856e:	b085      	sub	sp, #20
 8008570:	af00      	add	r7, sp, #0
 8008572:	6078      	str	r0, [r7, #4]
 8008574:	460b      	mov	r3, r1
 8008576:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800857e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8008580:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008584:	2b00      	cmp	r3, #0
 8008586:	da0c      	bge.n	80085a2 <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8008588:	78fb      	ldrb	r3, [r7, #3]
 800858a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800858e:	68f9      	ldr	r1, [r7, #12]
 8008590:	1c5a      	adds	r2, r3, #1
 8008592:	4613      	mov	r3, r2
 8008594:	009b      	lsls	r3, r3, #2
 8008596:	4413      	add	r3, r2
 8008598:	00db      	lsls	r3, r3, #3
 800859a:	440b      	add	r3, r1
 800859c:	3302      	adds	r3, #2
 800859e:	781b      	ldrb	r3, [r3, #0]
 80085a0:	e00b      	b.n	80085ba <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80085a2:	78fb      	ldrb	r3, [r7, #3]
 80085a4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80085a8:	68f9      	ldr	r1, [r7, #12]
 80085aa:	4613      	mov	r3, r2
 80085ac:	009b      	lsls	r3, r3, #2
 80085ae:	4413      	add	r3, r2
 80085b0:	00db      	lsls	r3, r3, #3
 80085b2:	440b      	add	r3, r1
 80085b4:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 80085b8:	781b      	ldrb	r3, [r3, #0]
  }
}
 80085ba:	4618      	mov	r0, r3
 80085bc:	3714      	adds	r7, #20
 80085be:	46bd      	mov	sp, r7
 80085c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085c4:	4770      	bx	lr

080085c6 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80085c6:	b580      	push	{r7, lr}
 80085c8:	b084      	sub	sp, #16
 80085ca:	af00      	add	r7, sp, #0
 80085cc:	6078      	str	r0, [r7, #4]
 80085ce:	460b      	mov	r3, r1
 80085d0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80085d2:	2300      	movs	r3, #0
 80085d4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80085d6:	2300      	movs	r3, #0
 80085d8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80085e0:	78fa      	ldrb	r2, [r7, #3]
 80085e2:	4611      	mov	r1, r2
 80085e4:	4618      	mov	r0, r3
 80085e6:	f7f9 fbba 	bl	8001d5e <HAL_PCD_SetAddress>
 80085ea:	4603      	mov	r3, r0
 80085ec:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80085ee:	7bfb      	ldrb	r3, [r7, #15]
 80085f0:	4618      	mov	r0, r3
 80085f2:	f000 f885 	bl	8008700 <USBD_Get_USB_Status>
 80085f6:	4603      	mov	r3, r0
 80085f8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80085fa:	7bbb      	ldrb	r3, [r7, #14]
}
 80085fc:	4618      	mov	r0, r3
 80085fe:	3710      	adds	r7, #16
 8008600:	46bd      	mov	sp, r7
 8008602:	bd80      	pop	{r7, pc}

08008604 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8008604:	b580      	push	{r7, lr}
 8008606:	b086      	sub	sp, #24
 8008608:	af00      	add	r7, sp, #0
 800860a:	60f8      	str	r0, [r7, #12]
 800860c:	607a      	str	r2, [r7, #4]
 800860e:	461a      	mov	r2, r3
 8008610:	460b      	mov	r3, r1
 8008612:	72fb      	strb	r3, [r7, #11]
 8008614:	4613      	mov	r3, r2
 8008616:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008618:	2300      	movs	r3, #0
 800861a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800861c:	2300      	movs	r3, #0
 800861e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8008620:	68fb      	ldr	r3, [r7, #12]
 8008622:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008626:	893b      	ldrh	r3, [r7, #8]
 8008628:	7af9      	ldrb	r1, [r7, #11]
 800862a:	687a      	ldr	r2, [r7, #4]
 800862c:	f7f9 fcbf 	bl	8001fae <HAL_PCD_EP_Transmit>
 8008630:	4603      	mov	r3, r0
 8008632:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008634:	7dfb      	ldrb	r3, [r7, #23]
 8008636:	4618      	mov	r0, r3
 8008638:	f000 f862 	bl	8008700 <USBD_Get_USB_Status>
 800863c:	4603      	mov	r3, r0
 800863e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008640:	7dbb      	ldrb	r3, [r7, #22]
}
 8008642:	4618      	mov	r0, r3
 8008644:	3718      	adds	r7, #24
 8008646:	46bd      	mov	sp, r7
 8008648:	bd80      	pop	{r7, pc}

0800864a <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800864a:	b580      	push	{r7, lr}
 800864c:	b086      	sub	sp, #24
 800864e:	af00      	add	r7, sp, #0
 8008650:	60f8      	str	r0, [r7, #12]
 8008652:	607a      	str	r2, [r7, #4]
 8008654:	461a      	mov	r2, r3
 8008656:	460b      	mov	r3, r1
 8008658:	72fb      	strb	r3, [r7, #11]
 800865a:	4613      	mov	r3, r2
 800865c:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800865e:	2300      	movs	r3, #0
 8008660:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008662:	2300      	movs	r3, #0
 8008664:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8008666:	68fb      	ldr	r3, [r7, #12]
 8008668:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800866c:	893b      	ldrh	r3, [r7, #8]
 800866e:	7af9      	ldrb	r1, [r7, #11]
 8008670:	687a      	ldr	r2, [r7, #4]
 8008672:	f7f9 fc47 	bl	8001f04 <HAL_PCD_EP_Receive>
 8008676:	4603      	mov	r3, r0
 8008678:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800867a:	7dfb      	ldrb	r3, [r7, #23]
 800867c:	4618      	mov	r0, r3
 800867e:	f000 f83f 	bl	8008700 <USBD_Get_USB_Status>
 8008682:	4603      	mov	r3, r0
 8008684:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008686:	7dbb      	ldrb	r3, [r7, #22]
}
 8008688:	4618      	mov	r0, r3
 800868a:	3718      	adds	r7, #24
 800868c:	46bd      	mov	sp, r7
 800868e:	bd80      	pop	{r7, pc}

08008690 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008690:	b580      	push	{r7, lr}
 8008692:	b082      	sub	sp, #8
 8008694:	af00      	add	r7, sp, #0
 8008696:	6078      	str	r0, [r7, #4]
 8008698:	460b      	mov	r3, r1
 800869a:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80086a2:	78fa      	ldrb	r2, [r7, #3]
 80086a4:	4611      	mov	r1, r2
 80086a6:	4618      	mov	r0, r3
 80086a8:	f7f9 fc69 	bl	8001f7e <HAL_PCD_EP_GetRxCount>
 80086ac:	4603      	mov	r3, r0
}
 80086ae:	4618      	mov	r0, r3
 80086b0:	3708      	adds	r7, #8
 80086b2:	46bd      	mov	sp, r7
 80086b4:	bd80      	pop	{r7, pc}
	...

080086b8 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80086b8:	b480      	push	{r7}
 80086ba:	b083      	sub	sp, #12
 80086bc:	af00      	add	r7, sp, #0
 80086be:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80086c0:	4b03      	ldr	r3, [pc, #12]	; (80086d0 <USBD_static_malloc+0x18>)
}
 80086c2:	4618      	mov	r0, r3
 80086c4:	370c      	adds	r7, #12
 80086c6:	46bd      	mov	sp, r7
 80086c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086cc:	4770      	bx	lr
 80086ce:	bf00      	nop
 80086d0:	20000758 	.word	0x20000758

080086d4 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80086d4:	b480      	push	{r7}
 80086d6:	b083      	sub	sp, #12
 80086d8:	af00      	add	r7, sp, #0
 80086da:	6078      	str	r0, [r7, #4]

}
 80086dc:	bf00      	nop
 80086de:	370c      	adds	r7, #12
 80086e0:	46bd      	mov	sp, r7
 80086e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086e6:	4770      	bx	lr

080086e8 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80086e8:	b480      	push	{r7}
 80086ea:	b083      	sub	sp, #12
 80086ec:	af00      	add	r7, sp, #0
 80086ee:	6078      	str	r0, [r7, #4]
 80086f0:	460b      	mov	r3, r1
 80086f2:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 80086f4:	bf00      	nop
 80086f6:	370c      	adds	r7, #12
 80086f8:	46bd      	mov	sp, r7
 80086fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086fe:	4770      	bx	lr

08008700 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008700:	b480      	push	{r7}
 8008702:	b085      	sub	sp, #20
 8008704:	af00      	add	r7, sp, #0
 8008706:	4603      	mov	r3, r0
 8008708:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800870a:	2300      	movs	r3, #0
 800870c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800870e:	79fb      	ldrb	r3, [r7, #7]
 8008710:	2b03      	cmp	r3, #3
 8008712:	d817      	bhi.n	8008744 <USBD_Get_USB_Status+0x44>
 8008714:	a201      	add	r2, pc, #4	; (adr r2, 800871c <USBD_Get_USB_Status+0x1c>)
 8008716:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800871a:	bf00      	nop
 800871c:	0800872d 	.word	0x0800872d
 8008720:	08008733 	.word	0x08008733
 8008724:	08008739 	.word	0x08008739
 8008728:	0800873f 	.word	0x0800873f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800872c:	2300      	movs	r3, #0
 800872e:	73fb      	strb	r3, [r7, #15]
    break;
 8008730:	e00b      	b.n	800874a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008732:	2302      	movs	r3, #2
 8008734:	73fb      	strb	r3, [r7, #15]
    break;
 8008736:	e008      	b.n	800874a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008738:	2301      	movs	r3, #1
 800873a:	73fb      	strb	r3, [r7, #15]
    break;
 800873c:	e005      	b.n	800874a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800873e:	2302      	movs	r3, #2
 8008740:	73fb      	strb	r3, [r7, #15]
    break;
 8008742:	e002      	b.n	800874a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8008744:	2302      	movs	r3, #2
 8008746:	73fb      	strb	r3, [r7, #15]
    break;
 8008748:	bf00      	nop
  }
  return usb_status;
 800874a:	7bfb      	ldrb	r3, [r7, #15]
}
 800874c:	4618      	mov	r0, r3
 800874e:	3714      	adds	r7, #20
 8008750:	46bd      	mov	sp, r7
 8008752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008756:	4770      	bx	lr

08008758 <__errno>:
 8008758:	4b01      	ldr	r3, [pc, #4]	; (8008760 <__errno+0x8>)
 800875a:	6818      	ldr	r0, [r3, #0]
 800875c:	4770      	bx	lr
 800875e:	bf00      	nop
 8008760:	20000564 	.word	0x20000564

08008764 <__libc_init_array>:
 8008764:	b570      	push	{r4, r5, r6, lr}
 8008766:	4e0d      	ldr	r6, [pc, #52]	; (800879c <__libc_init_array+0x38>)
 8008768:	4c0d      	ldr	r4, [pc, #52]	; (80087a0 <__libc_init_array+0x3c>)
 800876a:	1ba4      	subs	r4, r4, r6
 800876c:	10a4      	asrs	r4, r4, #2
 800876e:	2500      	movs	r5, #0
 8008770:	42a5      	cmp	r5, r4
 8008772:	d109      	bne.n	8008788 <__libc_init_array+0x24>
 8008774:	4e0b      	ldr	r6, [pc, #44]	; (80087a4 <__libc_init_array+0x40>)
 8008776:	4c0c      	ldr	r4, [pc, #48]	; (80087a8 <__libc_init_array+0x44>)
 8008778:	f001 fd44 	bl	800a204 <_init>
 800877c:	1ba4      	subs	r4, r4, r6
 800877e:	10a4      	asrs	r4, r4, #2
 8008780:	2500      	movs	r5, #0
 8008782:	42a5      	cmp	r5, r4
 8008784:	d105      	bne.n	8008792 <__libc_init_array+0x2e>
 8008786:	bd70      	pop	{r4, r5, r6, pc}
 8008788:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800878c:	4798      	blx	r3
 800878e:	3501      	adds	r5, #1
 8008790:	e7ee      	b.n	8008770 <__libc_init_array+0xc>
 8008792:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008796:	4798      	blx	r3
 8008798:	3501      	adds	r5, #1
 800879a:	e7f2      	b.n	8008782 <__libc_init_array+0x1e>
 800879c:	0800a4b0 	.word	0x0800a4b0
 80087a0:	0800a4b0 	.word	0x0800a4b0
 80087a4:	0800a4b0 	.word	0x0800a4b0
 80087a8:	0800a4b4 	.word	0x0800a4b4

080087ac <memset>:
 80087ac:	4402      	add	r2, r0
 80087ae:	4603      	mov	r3, r0
 80087b0:	4293      	cmp	r3, r2
 80087b2:	d100      	bne.n	80087b6 <memset+0xa>
 80087b4:	4770      	bx	lr
 80087b6:	f803 1b01 	strb.w	r1, [r3], #1
 80087ba:	e7f9      	b.n	80087b0 <memset+0x4>

080087bc <__cvt>:
 80087bc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80087c0:	ec55 4b10 	vmov	r4, r5, d0
 80087c4:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 80087c6:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80087ca:	2d00      	cmp	r5, #0
 80087cc:	460e      	mov	r6, r1
 80087ce:	4691      	mov	r9, r2
 80087d0:	4619      	mov	r1, r3
 80087d2:	bfb8      	it	lt
 80087d4:	4622      	movlt	r2, r4
 80087d6:	462b      	mov	r3, r5
 80087d8:	f027 0720 	bic.w	r7, r7, #32
 80087dc:	bfbb      	ittet	lt
 80087de:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80087e2:	461d      	movlt	r5, r3
 80087e4:	2300      	movge	r3, #0
 80087e6:	232d      	movlt	r3, #45	; 0x2d
 80087e8:	bfb8      	it	lt
 80087ea:	4614      	movlt	r4, r2
 80087ec:	2f46      	cmp	r7, #70	; 0x46
 80087ee:	700b      	strb	r3, [r1, #0]
 80087f0:	d004      	beq.n	80087fc <__cvt+0x40>
 80087f2:	2f45      	cmp	r7, #69	; 0x45
 80087f4:	d100      	bne.n	80087f8 <__cvt+0x3c>
 80087f6:	3601      	adds	r6, #1
 80087f8:	2102      	movs	r1, #2
 80087fa:	e000      	b.n	80087fe <__cvt+0x42>
 80087fc:	2103      	movs	r1, #3
 80087fe:	ab03      	add	r3, sp, #12
 8008800:	9301      	str	r3, [sp, #4]
 8008802:	ab02      	add	r3, sp, #8
 8008804:	9300      	str	r3, [sp, #0]
 8008806:	4632      	mov	r2, r6
 8008808:	4653      	mov	r3, sl
 800880a:	ec45 4b10 	vmov	d0, r4, r5
 800880e:	f000 fbab 	bl	8008f68 <_dtoa_r>
 8008812:	2f47      	cmp	r7, #71	; 0x47
 8008814:	4680      	mov	r8, r0
 8008816:	d102      	bne.n	800881e <__cvt+0x62>
 8008818:	f019 0f01 	tst.w	r9, #1
 800881c:	d026      	beq.n	800886c <__cvt+0xb0>
 800881e:	2f46      	cmp	r7, #70	; 0x46
 8008820:	eb08 0906 	add.w	r9, r8, r6
 8008824:	d111      	bne.n	800884a <__cvt+0x8e>
 8008826:	f898 3000 	ldrb.w	r3, [r8]
 800882a:	2b30      	cmp	r3, #48	; 0x30
 800882c:	d10a      	bne.n	8008844 <__cvt+0x88>
 800882e:	2200      	movs	r2, #0
 8008830:	2300      	movs	r3, #0
 8008832:	4620      	mov	r0, r4
 8008834:	4629      	mov	r1, r5
 8008836:	f7f8 f8f3 	bl	8000a20 <__aeabi_dcmpeq>
 800883a:	b918      	cbnz	r0, 8008844 <__cvt+0x88>
 800883c:	f1c6 0601 	rsb	r6, r6, #1
 8008840:	f8ca 6000 	str.w	r6, [sl]
 8008844:	f8da 3000 	ldr.w	r3, [sl]
 8008848:	4499      	add	r9, r3
 800884a:	2200      	movs	r2, #0
 800884c:	2300      	movs	r3, #0
 800884e:	4620      	mov	r0, r4
 8008850:	4629      	mov	r1, r5
 8008852:	f7f8 f8e5 	bl	8000a20 <__aeabi_dcmpeq>
 8008856:	b938      	cbnz	r0, 8008868 <__cvt+0xac>
 8008858:	2230      	movs	r2, #48	; 0x30
 800885a:	9b03      	ldr	r3, [sp, #12]
 800885c:	454b      	cmp	r3, r9
 800885e:	d205      	bcs.n	800886c <__cvt+0xb0>
 8008860:	1c59      	adds	r1, r3, #1
 8008862:	9103      	str	r1, [sp, #12]
 8008864:	701a      	strb	r2, [r3, #0]
 8008866:	e7f8      	b.n	800885a <__cvt+0x9e>
 8008868:	f8cd 900c 	str.w	r9, [sp, #12]
 800886c:	9b03      	ldr	r3, [sp, #12]
 800886e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008870:	eba3 0308 	sub.w	r3, r3, r8
 8008874:	4640      	mov	r0, r8
 8008876:	6013      	str	r3, [r2, #0]
 8008878:	b004      	add	sp, #16
 800887a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800887e <__exponent>:
 800887e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008880:	2900      	cmp	r1, #0
 8008882:	4604      	mov	r4, r0
 8008884:	bfba      	itte	lt
 8008886:	4249      	neglt	r1, r1
 8008888:	232d      	movlt	r3, #45	; 0x2d
 800888a:	232b      	movge	r3, #43	; 0x2b
 800888c:	2909      	cmp	r1, #9
 800888e:	f804 2b02 	strb.w	r2, [r4], #2
 8008892:	7043      	strb	r3, [r0, #1]
 8008894:	dd20      	ble.n	80088d8 <__exponent+0x5a>
 8008896:	f10d 0307 	add.w	r3, sp, #7
 800889a:	461f      	mov	r7, r3
 800889c:	260a      	movs	r6, #10
 800889e:	fb91 f5f6 	sdiv	r5, r1, r6
 80088a2:	fb06 1115 	mls	r1, r6, r5, r1
 80088a6:	3130      	adds	r1, #48	; 0x30
 80088a8:	2d09      	cmp	r5, #9
 80088aa:	f803 1c01 	strb.w	r1, [r3, #-1]
 80088ae:	f103 32ff 	add.w	r2, r3, #4294967295
 80088b2:	4629      	mov	r1, r5
 80088b4:	dc09      	bgt.n	80088ca <__exponent+0x4c>
 80088b6:	3130      	adds	r1, #48	; 0x30
 80088b8:	3b02      	subs	r3, #2
 80088ba:	f802 1c01 	strb.w	r1, [r2, #-1]
 80088be:	42bb      	cmp	r3, r7
 80088c0:	4622      	mov	r2, r4
 80088c2:	d304      	bcc.n	80088ce <__exponent+0x50>
 80088c4:	1a10      	subs	r0, r2, r0
 80088c6:	b003      	add	sp, #12
 80088c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80088ca:	4613      	mov	r3, r2
 80088cc:	e7e7      	b.n	800889e <__exponent+0x20>
 80088ce:	f813 2b01 	ldrb.w	r2, [r3], #1
 80088d2:	f804 2b01 	strb.w	r2, [r4], #1
 80088d6:	e7f2      	b.n	80088be <__exponent+0x40>
 80088d8:	2330      	movs	r3, #48	; 0x30
 80088da:	4419      	add	r1, r3
 80088dc:	7083      	strb	r3, [r0, #2]
 80088de:	1d02      	adds	r2, r0, #4
 80088e0:	70c1      	strb	r1, [r0, #3]
 80088e2:	e7ef      	b.n	80088c4 <__exponent+0x46>

080088e4 <_printf_float>:
 80088e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80088e8:	b08d      	sub	sp, #52	; 0x34
 80088ea:	460c      	mov	r4, r1
 80088ec:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 80088f0:	4616      	mov	r6, r2
 80088f2:	461f      	mov	r7, r3
 80088f4:	4605      	mov	r5, r0
 80088f6:	f001 f8ef 	bl	8009ad8 <_localeconv_r>
 80088fa:	6803      	ldr	r3, [r0, #0]
 80088fc:	9304      	str	r3, [sp, #16]
 80088fe:	4618      	mov	r0, r3
 8008900:	f7f7 fc62 	bl	80001c8 <strlen>
 8008904:	2300      	movs	r3, #0
 8008906:	930a      	str	r3, [sp, #40]	; 0x28
 8008908:	f8d8 3000 	ldr.w	r3, [r8]
 800890c:	9005      	str	r0, [sp, #20]
 800890e:	3307      	adds	r3, #7
 8008910:	f023 0307 	bic.w	r3, r3, #7
 8008914:	f103 0208 	add.w	r2, r3, #8
 8008918:	f894 a018 	ldrb.w	sl, [r4, #24]
 800891c:	f8d4 b000 	ldr.w	fp, [r4]
 8008920:	f8c8 2000 	str.w	r2, [r8]
 8008924:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008928:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800892c:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8008930:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8008934:	9307      	str	r3, [sp, #28]
 8008936:	f8cd 8018 	str.w	r8, [sp, #24]
 800893a:	f04f 32ff 	mov.w	r2, #4294967295
 800893e:	4ba7      	ldr	r3, [pc, #668]	; (8008bdc <_printf_float+0x2f8>)
 8008940:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008944:	f7f8 f89e 	bl	8000a84 <__aeabi_dcmpun>
 8008948:	bb70      	cbnz	r0, 80089a8 <_printf_float+0xc4>
 800894a:	f04f 32ff 	mov.w	r2, #4294967295
 800894e:	4ba3      	ldr	r3, [pc, #652]	; (8008bdc <_printf_float+0x2f8>)
 8008950:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008954:	f7f8 f878 	bl	8000a48 <__aeabi_dcmple>
 8008958:	bb30      	cbnz	r0, 80089a8 <_printf_float+0xc4>
 800895a:	2200      	movs	r2, #0
 800895c:	2300      	movs	r3, #0
 800895e:	4640      	mov	r0, r8
 8008960:	4649      	mov	r1, r9
 8008962:	f7f8 f867 	bl	8000a34 <__aeabi_dcmplt>
 8008966:	b110      	cbz	r0, 800896e <_printf_float+0x8a>
 8008968:	232d      	movs	r3, #45	; 0x2d
 800896a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800896e:	4a9c      	ldr	r2, [pc, #624]	; (8008be0 <_printf_float+0x2fc>)
 8008970:	4b9c      	ldr	r3, [pc, #624]	; (8008be4 <_printf_float+0x300>)
 8008972:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8008976:	bf8c      	ite	hi
 8008978:	4690      	movhi	r8, r2
 800897a:	4698      	movls	r8, r3
 800897c:	2303      	movs	r3, #3
 800897e:	f02b 0204 	bic.w	r2, fp, #4
 8008982:	6123      	str	r3, [r4, #16]
 8008984:	6022      	str	r2, [r4, #0]
 8008986:	f04f 0900 	mov.w	r9, #0
 800898a:	9700      	str	r7, [sp, #0]
 800898c:	4633      	mov	r3, r6
 800898e:	aa0b      	add	r2, sp, #44	; 0x2c
 8008990:	4621      	mov	r1, r4
 8008992:	4628      	mov	r0, r5
 8008994:	f000 f9e6 	bl	8008d64 <_printf_common>
 8008998:	3001      	adds	r0, #1
 800899a:	f040 808d 	bne.w	8008ab8 <_printf_float+0x1d4>
 800899e:	f04f 30ff 	mov.w	r0, #4294967295
 80089a2:	b00d      	add	sp, #52	; 0x34
 80089a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80089a8:	4642      	mov	r2, r8
 80089aa:	464b      	mov	r3, r9
 80089ac:	4640      	mov	r0, r8
 80089ae:	4649      	mov	r1, r9
 80089b0:	f7f8 f868 	bl	8000a84 <__aeabi_dcmpun>
 80089b4:	b110      	cbz	r0, 80089bc <_printf_float+0xd8>
 80089b6:	4a8c      	ldr	r2, [pc, #560]	; (8008be8 <_printf_float+0x304>)
 80089b8:	4b8c      	ldr	r3, [pc, #560]	; (8008bec <_printf_float+0x308>)
 80089ba:	e7da      	b.n	8008972 <_printf_float+0x8e>
 80089bc:	6861      	ldr	r1, [r4, #4]
 80089be:	1c4b      	adds	r3, r1, #1
 80089c0:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 80089c4:	a80a      	add	r0, sp, #40	; 0x28
 80089c6:	d13e      	bne.n	8008a46 <_printf_float+0x162>
 80089c8:	2306      	movs	r3, #6
 80089ca:	6063      	str	r3, [r4, #4]
 80089cc:	2300      	movs	r3, #0
 80089ce:	e9cd 0302 	strd	r0, r3, [sp, #8]
 80089d2:	ab09      	add	r3, sp, #36	; 0x24
 80089d4:	9300      	str	r3, [sp, #0]
 80089d6:	ec49 8b10 	vmov	d0, r8, r9
 80089da:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80089de:	6022      	str	r2, [r4, #0]
 80089e0:	f8cd a004 	str.w	sl, [sp, #4]
 80089e4:	6861      	ldr	r1, [r4, #4]
 80089e6:	4628      	mov	r0, r5
 80089e8:	f7ff fee8 	bl	80087bc <__cvt>
 80089ec:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 80089f0:	2b47      	cmp	r3, #71	; 0x47
 80089f2:	4680      	mov	r8, r0
 80089f4:	d109      	bne.n	8008a0a <_printf_float+0x126>
 80089f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80089f8:	1cd8      	adds	r0, r3, #3
 80089fa:	db02      	blt.n	8008a02 <_printf_float+0x11e>
 80089fc:	6862      	ldr	r2, [r4, #4]
 80089fe:	4293      	cmp	r3, r2
 8008a00:	dd47      	ble.n	8008a92 <_printf_float+0x1ae>
 8008a02:	f1aa 0a02 	sub.w	sl, sl, #2
 8008a06:	fa5f fa8a 	uxtb.w	sl, sl
 8008a0a:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8008a0e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008a10:	d824      	bhi.n	8008a5c <_printf_float+0x178>
 8008a12:	3901      	subs	r1, #1
 8008a14:	4652      	mov	r2, sl
 8008a16:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8008a1a:	9109      	str	r1, [sp, #36]	; 0x24
 8008a1c:	f7ff ff2f 	bl	800887e <__exponent>
 8008a20:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008a22:	1813      	adds	r3, r2, r0
 8008a24:	2a01      	cmp	r2, #1
 8008a26:	4681      	mov	r9, r0
 8008a28:	6123      	str	r3, [r4, #16]
 8008a2a:	dc02      	bgt.n	8008a32 <_printf_float+0x14e>
 8008a2c:	6822      	ldr	r2, [r4, #0]
 8008a2e:	07d1      	lsls	r1, r2, #31
 8008a30:	d501      	bpl.n	8008a36 <_printf_float+0x152>
 8008a32:	3301      	adds	r3, #1
 8008a34:	6123      	str	r3, [r4, #16]
 8008a36:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8008a3a:	2b00      	cmp	r3, #0
 8008a3c:	d0a5      	beq.n	800898a <_printf_float+0xa6>
 8008a3e:	232d      	movs	r3, #45	; 0x2d
 8008a40:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008a44:	e7a1      	b.n	800898a <_printf_float+0xa6>
 8008a46:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 8008a4a:	f000 8177 	beq.w	8008d3c <_printf_float+0x458>
 8008a4e:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8008a52:	d1bb      	bne.n	80089cc <_printf_float+0xe8>
 8008a54:	2900      	cmp	r1, #0
 8008a56:	d1b9      	bne.n	80089cc <_printf_float+0xe8>
 8008a58:	2301      	movs	r3, #1
 8008a5a:	e7b6      	b.n	80089ca <_printf_float+0xe6>
 8008a5c:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 8008a60:	d119      	bne.n	8008a96 <_printf_float+0x1b2>
 8008a62:	2900      	cmp	r1, #0
 8008a64:	6863      	ldr	r3, [r4, #4]
 8008a66:	dd0c      	ble.n	8008a82 <_printf_float+0x19e>
 8008a68:	6121      	str	r1, [r4, #16]
 8008a6a:	b913      	cbnz	r3, 8008a72 <_printf_float+0x18e>
 8008a6c:	6822      	ldr	r2, [r4, #0]
 8008a6e:	07d2      	lsls	r2, r2, #31
 8008a70:	d502      	bpl.n	8008a78 <_printf_float+0x194>
 8008a72:	3301      	adds	r3, #1
 8008a74:	440b      	add	r3, r1
 8008a76:	6123      	str	r3, [r4, #16]
 8008a78:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008a7a:	65a3      	str	r3, [r4, #88]	; 0x58
 8008a7c:	f04f 0900 	mov.w	r9, #0
 8008a80:	e7d9      	b.n	8008a36 <_printf_float+0x152>
 8008a82:	b913      	cbnz	r3, 8008a8a <_printf_float+0x1a6>
 8008a84:	6822      	ldr	r2, [r4, #0]
 8008a86:	07d0      	lsls	r0, r2, #31
 8008a88:	d501      	bpl.n	8008a8e <_printf_float+0x1aa>
 8008a8a:	3302      	adds	r3, #2
 8008a8c:	e7f3      	b.n	8008a76 <_printf_float+0x192>
 8008a8e:	2301      	movs	r3, #1
 8008a90:	e7f1      	b.n	8008a76 <_printf_float+0x192>
 8008a92:	f04f 0a67 	mov.w	sl, #103	; 0x67
 8008a96:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8008a9a:	4293      	cmp	r3, r2
 8008a9c:	db05      	blt.n	8008aaa <_printf_float+0x1c6>
 8008a9e:	6822      	ldr	r2, [r4, #0]
 8008aa0:	6123      	str	r3, [r4, #16]
 8008aa2:	07d1      	lsls	r1, r2, #31
 8008aa4:	d5e8      	bpl.n	8008a78 <_printf_float+0x194>
 8008aa6:	3301      	adds	r3, #1
 8008aa8:	e7e5      	b.n	8008a76 <_printf_float+0x192>
 8008aaa:	2b00      	cmp	r3, #0
 8008aac:	bfd4      	ite	le
 8008aae:	f1c3 0302 	rsble	r3, r3, #2
 8008ab2:	2301      	movgt	r3, #1
 8008ab4:	4413      	add	r3, r2
 8008ab6:	e7de      	b.n	8008a76 <_printf_float+0x192>
 8008ab8:	6823      	ldr	r3, [r4, #0]
 8008aba:	055a      	lsls	r2, r3, #21
 8008abc:	d407      	bmi.n	8008ace <_printf_float+0x1ea>
 8008abe:	6923      	ldr	r3, [r4, #16]
 8008ac0:	4642      	mov	r2, r8
 8008ac2:	4631      	mov	r1, r6
 8008ac4:	4628      	mov	r0, r5
 8008ac6:	47b8      	blx	r7
 8008ac8:	3001      	adds	r0, #1
 8008aca:	d12b      	bne.n	8008b24 <_printf_float+0x240>
 8008acc:	e767      	b.n	800899e <_printf_float+0xba>
 8008ace:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8008ad2:	f240 80dc 	bls.w	8008c8e <_printf_float+0x3aa>
 8008ad6:	2200      	movs	r2, #0
 8008ad8:	2300      	movs	r3, #0
 8008ada:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008ade:	f7f7 ff9f 	bl	8000a20 <__aeabi_dcmpeq>
 8008ae2:	2800      	cmp	r0, #0
 8008ae4:	d033      	beq.n	8008b4e <_printf_float+0x26a>
 8008ae6:	2301      	movs	r3, #1
 8008ae8:	4a41      	ldr	r2, [pc, #260]	; (8008bf0 <_printf_float+0x30c>)
 8008aea:	4631      	mov	r1, r6
 8008aec:	4628      	mov	r0, r5
 8008aee:	47b8      	blx	r7
 8008af0:	3001      	adds	r0, #1
 8008af2:	f43f af54 	beq.w	800899e <_printf_float+0xba>
 8008af6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008afa:	429a      	cmp	r2, r3
 8008afc:	db02      	blt.n	8008b04 <_printf_float+0x220>
 8008afe:	6823      	ldr	r3, [r4, #0]
 8008b00:	07d8      	lsls	r0, r3, #31
 8008b02:	d50f      	bpl.n	8008b24 <_printf_float+0x240>
 8008b04:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008b08:	4631      	mov	r1, r6
 8008b0a:	4628      	mov	r0, r5
 8008b0c:	47b8      	blx	r7
 8008b0e:	3001      	adds	r0, #1
 8008b10:	f43f af45 	beq.w	800899e <_printf_float+0xba>
 8008b14:	f04f 0800 	mov.w	r8, #0
 8008b18:	f104 091a 	add.w	r9, r4, #26
 8008b1c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008b1e:	3b01      	subs	r3, #1
 8008b20:	4543      	cmp	r3, r8
 8008b22:	dc09      	bgt.n	8008b38 <_printf_float+0x254>
 8008b24:	6823      	ldr	r3, [r4, #0]
 8008b26:	079b      	lsls	r3, r3, #30
 8008b28:	f100 8103 	bmi.w	8008d32 <_printf_float+0x44e>
 8008b2c:	68e0      	ldr	r0, [r4, #12]
 8008b2e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008b30:	4298      	cmp	r0, r3
 8008b32:	bfb8      	it	lt
 8008b34:	4618      	movlt	r0, r3
 8008b36:	e734      	b.n	80089a2 <_printf_float+0xbe>
 8008b38:	2301      	movs	r3, #1
 8008b3a:	464a      	mov	r2, r9
 8008b3c:	4631      	mov	r1, r6
 8008b3e:	4628      	mov	r0, r5
 8008b40:	47b8      	blx	r7
 8008b42:	3001      	adds	r0, #1
 8008b44:	f43f af2b 	beq.w	800899e <_printf_float+0xba>
 8008b48:	f108 0801 	add.w	r8, r8, #1
 8008b4c:	e7e6      	b.n	8008b1c <_printf_float+0x238>
 8008b4e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008b50:	2b00      	cmp	r3, #0
 8008b52:	dc2b      	bgt.n	8008bac <_printf_float+0x2c8>
 8008b54:	2301      	movs	r3, #1
 8008b56:	4a26      	ldr	r2, [pc, #152]	; (8008bf0 <_printf_float+0x30c>)
 8008b58:	4631      	mov	r1, r6
 8008b5a:	4628      	mov	r0, r5
 8008b5c:	47b8      	blx	r7
 8008b5e:	3001      	adds	r0, #1
 8008b60:	f43f af1d 	beq.w	800899e <_printf_float+0xba>
 8008b64:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008b66:	b923      	cbnz	r3, 8008b72 <_printf_float+0x28e>
 8008b68:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008b6a:	b913      	cbnz	r3, 8008b72 <_printf_float+0x28e>
 8008b6c:	6823      	ldr	r3, [r4, #0]
 8008b6e:	07d9      	lsls	r1, r3, #31
 8008b70:	d5d8      	bpl.n	8008b24 <_printf_float+0x240>
 8008b72:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008b76:	4631      	mov	r1, r6
 8008b78:	4628      	mov	r0, r5
 8008b7a:	47b8      	blx	r7
 8008b7c:	3001      	adds	r0, #1
 8008b7e:	f43f af0e 	beq.w	800899e <_printf_float+0xba>
 8008b82:	f04f 0900 	mov.w	r9, #0
 8008b86:	f104 0a1a 	add.w	sl, r4, #26
 8008b8a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008b8c:	425b      	negs	r3, r3
 8008b8e:	454b      	cmp	r3, r9
 8008b90:	dc01      	bgt.n	8008b96 <_printf_float+0x2b2>
 8008b92:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008b94:	e794      	b.n	8008ac0 <_printf_float+0x1dc>
 8008b96:	2301      	movs	r3, #1
 8008b98:	4652      	mov	r2, sl
 8008b9a:	4631      	mov	r1, r6
 8008b9c:	4628      	mov	r0, r5
 8008b9e:	47b8      	blx	r7
 8008ba0:	3001      	adds	r0, #1
 8008ba2:	f43f aefc 	beq.w	800899e <_printf_float+0xba>
 8008ba6:	f109 0901 	add.w	r9, r9, #1
 8008baa:	e7ee      	b.n	8008b8a <_printf_float+0x2a6>
 8008bac:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008bae:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008bb0:	429a      	cmp	r2, r3
 8008bb2:	bfa8      	it	ge
 8008bb4:	461a      	movge	r2, r3
 8008bb6:	2a00      	cmp	r2, #0
 8008bb8:	4691      	mov	r9, r2
 8008bba:	dd07      	ble.n	8008bcc <_printf_float+0x2e8>
 8008bbc:	4613      	mov	r3, r2
 8008bbe:	4631      	mov	r1, r6
 8008bc0:	4642      	mov	r2, r8
 8008bc2:	4628      	mov	r0, r5
 8008bc4:	47b8      	blx	r7
 8008bc6:	3001      	adds	r0, #1
 8008bc8:	f43f aee9 	beq.w	800899e <_printf_float+0xba>
 8008bcc:	f104 031a 	add.w	r3, r4, #26
 8008bd0:	f04f 0b00 	mov.w	fp, #0
 8008bd4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008bd8:	9306      	str	r3, [sp, #24]
 8008bda:	e015      	b.n	8008c08 <_printf_float+0x324>
 8008bdc:	7fefffff 	.word	0x7fefffff
 8008be0:	0800a28c 	.word	0x0800a28c
 8008be4:	0800a288 	.word	0x0800a288
 8008be8:	0800a294 	.word	0x0800a294
 8008bec:	0800a290 	.word	0x0800a290
 8008bf0:	0800a298 	.word	0x0800a298
 8008bf4:	2301      	movs	r3, #1
 8008bf6:	9a06      	ldr	r2, [sp, #24]
 8008bf8:	4631      	mov	r1, r6
 8008bfa:	4628      	mov	r0, r5
 8008bfc:	47b8      	blx	r7
 8008bfe:	3001      	adds	r0, #1
 8008c00:	f43f aecd 	beq.w	800899e <_printf_float+0xba>
 8008c04:	f10b 0b01 	add.w	fp, fp, #1
 8008c08:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8008c0c:	ebaa 0309 	sub.w	r3, sl, r9
 8008c10:	455b      	cmp	r3, fp
 8008c12:	dcef      	bgt.n	8008bf4 <_printf_float+0x310>
 8008c14:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008c18:	429a      	cmp	r2, r3
 8008c1a:	44d0      	add	r8, sl
 8008c1c:	db15      	blt.n	8008c4a <_printf_float+0x366>
 8008c1e:	6823      	ldr	r3, [r4, #0]
 8008c20:	07da      	lsls	r2, r3, #31
 8008c22:	d412      	bmi.n	8008c4a <_printf_float+0x366>
 8008c24:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008c26:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008c28:	eba3 020a 	sub.w	r2, r3, sl
 8008c2c:	eba3 0a01 	sub.w	sl, r3, r1
 8008c30:	4592      	cmp	sl, r2
 8008c32:	bfa8      	it	ge
 8008c34:	4692      	movge	sl, r2
 8008c36:	f1ba 0f00 	cmp.w	sl, #0
 8008c3a:	dc0e      	bgt.n	8008c5a <_printf_float+0x376>
 8008c3c:	f04f 0800 	mov.w	r8, #0
 8008c40:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008c44:	f104 091a 	add.w	r9, r4, #26
 8008c48:	e019      	b.n	8008c7e <_printf_float+0x39a>
 8008c4a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008c4e:	4631      	mov	r1, r6
 8008c50:	4628      	mov	r0, r5
 8008c52:	47b8      	blx	r7
 8008c54:	3001      	adds	r0, #1
 8008c56:	d1e5      	bne.n	8008c24 <_printf_float+0x340>
 8008c58:	e6a1      	b.n	800899e <_printf_float+0xba>
 8008c5a:	4653      	mov	r3, sl
 8008c5c:	4642      	mov	r2, r8
 8008c5e:	4631      	mov	r1, r6
 8008c60:	4628      	mov	r0, r5
 8008c62:	47b8      	blx	r7
 8008c64:	3001      	adds	r0, #1
 8008c66:	d1e9      	bne.n	8008c3c <_printf_float+0x358>
 8008c68:	e699      	b.n	800899e <_printf_float+0xba>
 8008c6a:	2301      	movs	r3, #1
 8008c6c:	464a      	mov	r2, r9
 8008c6e:	4631      	mov	r1, r6
 8008c70:	4628      	mov	r0, r5
 8008c72:	47b8      	blx	r7
 8008c74:	3001      	adds	r0, #1
 8008c76:	f43f ae92 	beq.w	800899e <_printf_float+0xba>
 8008c7a:	f108 0801 	add.w	r8, r8, #1
 8008c7e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008c82:	1a9b      	subs	r3, r3, r2
 8008c84:	eba3 030a 	sub.w	r3, r3, sl
 8008c88:	4543      	cmp	r3, r8
 8008c8a:	dcee      	bgt.n	8008c6a <_printf_float+0x386>
 8008c8c:	e74a      	b.n	8008b24 <_printf_float+0x240>
 8008c8e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008c90:	2a01      	cmp	r2, #1
 8008c92:	dc01      	bgt.n	8008c98 <_printf_float+0x3b4>
 8008c94:	07db      	lsls	r3, r3, #31
 8008c96:	d53a      	bpl.n	8008d0e <_printf_float+0x42a>
 8008c98:	2301      	movs	r3, #1
 8008c9a:	4642      	mov	r2, r8
 8008c9c:	4631      	mov	r1, r6
 8008c9e:	4628      	mov	r0, r5
 8008ca0:	47b8      	blx	r7
 8008ca2:	3001      	adds	r0, #1
 8008ca4:	f43f ae7b 	beq.w	800899e <_printf_float+0xba>
 8008ca8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008cac:	4631      	mov	r1, r6
 8008cae:	4628      	mov	r0, r5
 8008cb0:	47b8      	blx	r7
 8008cb2:	3001      	adds	r0, #1
 8008cb4:	f108 0801 	add.w	r8, r8, #1
 8008cb8:	f43f ae71 	beq.w	800899e <_printf_float+0xba>
 8008cbc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008cbe:	2200      	movs	r2, #0
 8008cc0:	f103 3aff 	add.w	sl, r3, #4294967295
 8008cc4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008cc8:	2300      	movs	r3, #0
 8008cca:	f7f7 fea9 	bl	8000a20 <__aeabi_dcmpeq>
 8008cce:	b9c8      	cbnz	r0, 8008d04 <_printf_float+0x420>
 8008cd0:	4653      	mov	r3, sl
 8008cd2:	4642      	mov	r2, r8
 8008cd4:	4631      	mov	r1, r6
 8008cd6:	4628      	mov	r0, r5
 8008cd8:	47b8      	blx	r7
 8008cda:	3001      	adds	r0, #1
 8008cdc:	d10e      	bne.n	8008cfc <_printf_float+0x418>
 8008cde:	e65e      	b.n	800899e <_printf_float+0xba>
 8008ce0:	2301      	movs	r3, #1
 8008ce2:	4652      	mov	r2, sl
 8008ce4:	4631      	mov	r1, r6
 8008ce6:	4628      	mov	r0, r5
 8008ce8:	47b8      	blx	r7
 8008cea:	3001      	adds	r0, #1
 8008cec:	f43f ae57 	beq.w	800899e <_printf_float+0xba>
 8008cf0:	f108 0801 	add.w	r8, r8, #1
 8008cf4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008cf6:	3b01      	subs	r3, #1
 8008cf8:	4543      	cmp	r3, r8
 8008cfa:	dcf1      	bgt.n	8008ce0 <_printf_float+0x3fc>
 8008cfc:	464b      	mov	r3, r9
 8008cfe:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8008d02:	e6de      	b.n	8008ac2 <_printf_float+0x1de>
 8008d04:	f04f 0800 	mov.w	r8, #0
 8008d08:	f104 0a1a 	add.w	sl, r4, #26
 8008d0c:	e7f2      	b.n	8008cf4 <_printf_float+0x410>
 8008d0e:	2301      	movs	r3, #1
 8008d10:	e7df      	b.n	8008cd2 <_printf_float+0x3ee>
 8008d12:	2301      	movs	r3, #1
 8008d14:	464a      	mov	r2, r9
 8008d16:	4631      	mov	r1, r6
 8008d18:	4628      	mov	r0, r5
 8008d1a:	47b8      	blx	r7
 8008d1c:	3001      	adds	r0, #1
 8008d1e:	f43f ae3e 	beq.w	800899e <_printf_float+0xba>
 8008d22:	f108 0801 	add.w	r8, r8, #1
 8008d26:	68e3      	ldr	r3, [r4, #12]
 8008d28:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008d2a:	1a9b      	subs	r3, r3, r2
 8008d2c:	4543      	cmp	r3, r8
 8008d2e:	dcf0      	bgt.n	8008d12 <_printf_float+0x42e>
 8008d30:	e6fc      	b.n	8008b2c <_printf_float+0x248>
 8008d32:	f04f 0800 	mov.w	r8, #0
 8008d36:	f104 0919 	add.w	r9, r4, #25
 8008d3a:	e7f4      	b.n	8008d26 <_printf_float+0x442>
 8008d3c:	2900      	cmp	r1, #0
 8008d3e:	f43f ae8b 	beq.w	8008a58 <_printf_float+0x174>
 8008d42:	2300      	movs	r3, #0
 8008d44:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8008d48:	ab09      	add	r3, sp, #36	; 0x24
 8008d4a:	9300      	str	r3, [sp, #0]
 8008d4c:	ec49 8b10 	vmov	d0, r8, r9
 8008d50:	6022      	str	r2, [r4, #0]
 8008d52:	f8cd a004 	str.w	sl, [sp, #4]
 8008d56:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8008d5a:	4628      	mov	r0, r5
 8008d5c:	f7ff fd2e 	bl	80087bc <__cvt>
 8008d60:	4680      	mov	r8, r0
 8008d62:	e648      	b.n	80089f6 <_printf_float+0x112>

08008d64 <_printf_common>:
 8008d64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008d68:	4691      	mov	r9, r2
 8008d6a:	461f      	mov	r7, r3
 8008d6c:	688a      	ldr	r2, [r1, #8]
 8008d6e:	690b      	ldr	r3, [r1, #16]
 8008d70:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008d74:	4293      	cmp	r3, r2
 8008d76:	bfb8      	it	lt
 8008d78:	4613      	movlt	r3, r2
 8008d7a:	f8c9 3000 	str.w	r3, [r9]
 8008d7e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008d82:	4606      	mov	r6, r0
 8008d84:	460c      	mov	r4, r1
 8008d86:	b112      	cbz	r2, 8008d8e <_printf_common+0x2a>
 8008d88:	3301      	adds	r3, #1
 8008d8a:	f8c9 3000 	str.w	r3, [r9]
 8008d8e:	6823      	ldr	r3, [r4, #0]
 8008d90:	0699      	lsls	r1, r3, #26
 8008d92:	bf42      	ittt	mi
 8008d94:	f8d9 3000 	ldrmi.w	r3, [r9]
 8008d98:	3302      	addmi	r3, #2
 8008d9a:	f8c9 3000 	strmi.w	r3, [r9]
 8008d9e:	6825      	ldr	r5, [r4, #0]
 8008da0:	f015 0506 	ands.w	r5, r5, #6
 8008da4:	d107      	bne.n	8008db6 <_printf_common+0x52>
 8008da6:	f104 0a19 	add.w	sl, r4, #25
 8008daa:	68e3      	ldr	r3, [r4, #12]
 8008dac:	f8d9 2000 	ldr.w	r2, [r9]
 8008db0:	1a9b      	subs	r3, r3, r2
 8008db2:	42ab      	cmp	r3, r5
 8008db4:	dc28      	bgt.n	8008e08 <_printf_common+0xa4>
 8008db6:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8008dba:	6822      	ldr	r2, [r4, #0]
 8008dbc:	3300      	adds	r3, #0
 8008dbe:	bf18      	it	ne
 8008dc0:	2301      	movne	r3, #1
 8008dc2:	0692      	lsls	r2, r2, #26
 8008dc4:	d42d      	bmi.n	8008e22 <_printf_common+0xbe>
 8008dc6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008dca:	4639      	mov	r1, r7
 8008dcc:	4630      	mov	r0, r6
 8008dce:	47c0      	blx	r8
 8008dd0:	3001      	adds	r0, #1
 8008dd2:	d020      	beq.n	8008e16 <_printf_common+0xb2>
 8008dd4:	6823      	ldr	r3, [r4, #0]
 8008dd6:	68e5      	ldr	r5, [r4, #12]
 8008dd8:	f8d9 2000 	ldr.w	r2, [r9]
 8008ddc:	f003 0306 	and.w	r3, r3, #6
 8008de0:	2b04      	cmp	r3, #4
 8008de2:	bf08      	it	eq
 8008de4:	1aad      	subeq	r5, r5, r2
 8008de6:	68a3      	ldr	r3, [r4, #8]
 8008de8:	6922      	ldr	r2, [r4, #16]
 8008dea:	bf0c      	ite	eq
 8008dec:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008df0:	2500      	movne	r5, #0
 8008df2:	4293      	cmp	r3, r2
 8008df4:	bfc4      	itt	gt
 8008df6:	1a9b      	subgt	r3, r3, r2
 8008df8:	18ed      	addgt	r5, r5, r3
 8008dfa:	f04f 0900 	mov.w	r9, #0
 8008dfe:	341a      	adds	r4, #26
 8008e00:	454d      	cmp	r5, r9
 8008e02:	d11a      	bne.n	8008e3a <_printf_common+0xd6>
 8008e04:	2000      	movs	r0, #0
 8008e06:	e008      	b.n	8008e1a <_printf_common+0xb6>
 8008e08:	2301      	movs	r3, #1
 8008e0a:	4652      	mov	r2, sl
 8008e0c:	4639      	mov	r1, r7
 8008e0e:	4630      	mov	r0, r6
 8008e10:	47c0      	blx	r8
 8008e12:	3001      	adds	r0, #1
 8008e14:	d103      	bne.n	8008e1e <_printf_common+0xba>
 8008e16:	f04f 30ff 	mov.w	r0, #4294967295
 8008e1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008e1e:	3501      	adds	r5, #1
 8008e20:	e7c3      	b.n	8008daa <_printf_common+0x46>
 8008e22:	18e1      	adds	r1, r4, r3
 8008e24:	1c5a      	adds	r2, r3, #1
 8008e26:	2030      	movs	r0, #48	; 0x30
 8008e28:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008e2c:	4422      	add	r2, r4
 8008e2e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008e32:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008e36:	3302      	adds	r3, #2
 8008e38:	e7c5      	b.n	8008dc6 <_printf_common+0x62>
 8008e3a:	2301      	movs	r3, #1
 8008e3c:	4622      	mov	r2, r4
 8008e3e:	4639      	mov	r1, r7
 8008e40:	4630      	mov	r0, r6
 8008e42:	47c0      	blx	r8
 8008e44:	3001      	adds	r0, #1
 8008e46:	d0e6      	beq.n	8008e16 <_printf_common+0xb2>
 8008e48:	f109 0901 	add.w	r9, r9, #1
 8008e4c:	e7d8      	b.n	8008e00 <_printf_common+0x9c>

08008e4e <quorem>:
 8008e4e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e52:	6903      	ldr	r3, [r0, #16]
 8008e54:	690c      	ldr	r4, [r1, #16]
 8008e56:	42a3      	cmp	r3, r4
 8008e58:	4680      	mov	r8, r0
 8008e5a:	f2c0 8082 	blt.w	8008f62 <quorem+0x114>
 8008e5e:	3c01      	subs	r4, #1
 8008e60:	f101 0714 	add.w	r7, r1, #20
 8008e64:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8008e68:	f100 0614 	add.w	r6, r0, #20
 8008e6c:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8008e70:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8008e74:	eb06 030c 	add.w	r3, r6, ip
 8008e78:	3501      	adds	r5, #1
 8008e7a:	eb07 090c 	add.w	r9, r7, ip
 8008e7e:	9301      	str	r3, [sp, #4]
 8008e80:	fbb0 f5f5 	udiv	r5, r0, r5
 8008e84:	b395      	cbz	r5, 8008eec <quorem+0x9e>
 8008e86:	f04f 0a00 	mov.w	sl, #0
 8008e8a:	4638      	mov	r0, r7
 8008e8c:	46b6      	mov	lr, r6
 8008e8e:	46d3      	mov	fp, sl
 8008e90:	f850 2b04 	ldr.w	r2, [r0], #4
 8008e94:	b293      	uxth	r3, r2
 8008e96:	fb05 a303 	mla	r3, r5, r3, sl
 8008e9a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008e9e:	b29b      	uxth	r3, r3
 8008ea0:	ebab 0303 	sub.w	r3, fp, r3
 8008ea4:	0c12      	lsrs	r2, r2, #16
 8008ea6:	f8de b000 	ldr.w	fp, [lr]
 8008eaa:	fb05 a202 	mla	r2, r5, r2, sl
 8008eae:	fa13 f38b 	uxtah	r3, r3, fp
 8008eb2:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8008eb6:	fa1f fb82 	uxth.w	fp, r2
 8008eba:	f8de 2000 	ldr.w	r2, [lr]
 8008ebe:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8008ec2:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008ec6:	b29b      	uxth	r3, r3
 8008ec8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008ecc:	4581      	cmp	r9, r0
 8008ece:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8008ed2:	f84e 3b04 	str.w	r3, [lr], #4
 8008ed6:	d2db      	bcs.n	8008e90 <quorem+0x42>
 8008ed8:	f856 300c 	ldr.w	r3, [r6, ip]
 8008edc:	b933      	cbnz	r3, 8008eec <quorem+0x9e>
 8008ede:	9b01      	ldr	r3, [sp, #4]
 8008ee0:	3b04      	subs	r3, #4
 8008ee2:	429e      	cmp	r6, r3
 8008ee4:	461a      	mov	r2, r3
 8008ee6:	d330      	bcc.n	8008f4a <quorem+0xfc>
 8008ee8:	f8c8 4010 	str.w	r4, [r8, #16]
 8008eec:	4640      	mov	r0, r8
 8008eee:	f001 f829 	bl	8009f44 <__mcmp>
 8008ef2:	2800      	cmp	r0, #0
 8008ef4:	db25      	blt.n	8008f42 <quorem+0xf4>
 8008ef6:	3501      	adds	r5, #1
 8008ef8:	4630      	mov	r0, r6
 8008efa:	f04f 0c00 	mov.w	ip, #0
 8008efe:	f857 2b04 	ldr.w	r2, [r7], #4
 8008f02:	f8d0 e000 	ldr.w	lr, [r0]
 8008f06:	b293      	uxth	r3, r2
 8008f08:	ebac 0303 	sub.w	r3, ip, r3
 8008f0c:	0c12      	lsrs	r2, r2, #16
 8008f0e:	fa13 f38e 	uxtah	r3, r3, lr
 8008f12:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8008f16:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008f1a:	b29b      	uxth	r3, r3
 8008f1c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008f20:	45b9      	cmp	r9, r7
 8008f22:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8008f26:	f840 3b04 	str.w	r3, [r0], #4
 8008f2a:	d2e8      	bcs.n	8008efe <quorem+0xb0>
 8008f2c:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8008f30:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8008f34:	b92a      	cbnz	r2, 8008f42 <quorem+0xf4>
 8008f36:	3b04      	subs	r3, #4
 8008f38:	429e      	cmp	r6, r3
 8008f3a:	461a      	mov	r2, r3
 8008f3c:	d30b      	bcc.n	8008f56 <quorem+0x108>
 8008f3e:	f8c8 4010 	str.w	r4, [r8, #16]
 8008f42:	4628      	mov	r0, r5
 8008f44:	b003      	add	sp, #12
 8008f46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008f4a:	6812      	ldr	r2, [r2, #0]
 8008f4c:	3b04      	subs	r3, #4
 8008f4e:	2a00      	cmp	r2, #0
 8008f50:	d1ca      	bne.n	8008ee8 <quorem+0x9a>
 8008f52:	3c01      	subs	r4, #1
 8008f54:	e7c5      	b.n	8008ee2 <quorem+0x94>
 8008f56:	6812      	ldr	r2, [r2, #0]
 8008f58:	3b04      	subs	r3, #4
 8008f5a:	2a00      	cmp	r2, #0
 8008f5c:	d1ef      	bne.n	8008f3e <quorem+0xf0>
 8008f5e:	3c01      	subs	r4, #1
 8008f60:	e7ea      	b.n	8008f38 <quorem+0xea>
 8008f62:	2000      	movs	r0, #0
 8008f64:	e7ee      	b.n	8008f44 <quorem+0xf6>
	...

08008f68 <_dtoa_r>:
 8008f68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f6c:	ec57 6b10 	vmov	r6, r7, d0
 8008f70:	b097      	sub	sp, #92	; 0x5c
 8008f72:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8008f74:	9106      	str	r1, [sp, #24]
 8008f76:	4604      	mov	r4, r0
 8008f78:	920b      	str	r2, [sp, #44]	; 0x2c
 8008f7a:	9312      	str	r3, [sp, #72]	; 0x48
 8008f7c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8008f80:	e9cd 6700 	strd	r6, r7, [sp]
 8008f84:	b93d      	cbnz	r5, 8008f96 <_dtoa_r+0x2e>
 8008f86:	2010      	movs	r0, #16
 8008f88:	f000 fdb4 	bl	8009af4 <malloc>
 8008f8c:	6260      	str	r0, [r4, #36]	; 0x24
 8008f8e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8008f92:	6005      	str	r5, [r0, #0]
 8008f94:	60c5      	str	r5, [r0, #12]
 8008f96:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008f98:	6819      	ldr	r1, [r3, #0]
 8008f9a:	b151      	cbz	r1, 8008fb2 <_dtoa_r+0x4a>
 8008f9c:	685a      	ldr	r2, [r3, #4]
 8008f9e:	604a      	str	r2, [r1, #4]
 8008fa0:	2301      	movs	r3, #1
 8008fa2:	4093      	lsls	r3, r2
 8008fa4:	608b      	str	r3, [r1, #8]
 8008fa6:	4620      	mov	r0, r4
 8008fa8:	f000 fdeb 	bl	8009b82 <_Bfree>
 8008fac:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008fae:	2200      	movs	r2, #0
 8008fb0:	601a      	str	r2, [r3, #0]
 8008fb2:	1e3b      	subs	r3, r7, #0
 8008fb4:	bfbb      	ittet	lt
 8008fb6:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8008fba:	9301      	strlt	r3, [sp, #4]
 8008fbc:	2300      	movge	r3, #0
 8008fbe:	2201      	movlt	r2, #1
 8008fc0:	bfac      	ite	ge
 8008fc2:	f8c8 3000 	strge.w	r3, [r8]
 8008fc6:	f8c8 2000 	strlt.w	r2, [r8]
 8008fca:	4baf      	ldr	r3, [pc, #700]	; (8009288 <_dtoa_r+0x320>)
 8008fcc:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8008fd0:	ea33 0308 	bics.w	r3, r3, r8
 8008fd4:	d114      	bne.n	8009000 <_dtoa_r+0x98>
 8008fd6:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008fd8:	f242 730f 	movw	r3, #9999	; 0x270f
 8008fdc:	6013      	str	r3, [r2, #0]
 8008fde:	9b00      	ldr	r3, [sp, #0]
 8008fe0:	b923      	cbnz	r3, 8008fec <_dtoa_r+0x84>
 8008fe2:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8008fe6:	2800      	cmp	r0, #0
 8008fe8:	f000 8542 	beq.w	8009a70 <_dtoa_r+0xb08>
 8008fec:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008fee:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 800929c <_dtoa_r+0x334>
 8008ff2:	2b00      	cmp	r3, #0
 8008ff4:	f000 8544 	beq.w	8009a80 <_dtoa_r+0xb18>
 8008ff8:	f10b 0303 	add.w	r3, fp, #3
 8008ffc:	f000 bd3e 	b.w	8009a7c <_dtoa_r+0xb14>
 8009000:	e9dd 6700 	ldrd	r6, r7, [sp]
 8009004:	2200      	movs	r2, #0
 8009006:	2300      	movs	r3, #0
 8009008:	4630      	mov	r0, r6
 800900a:	4639      	mov	r1, r7
 800900c:	f7f7 fd08 	bl	8000a20 <__aeabi_dcmpeq>
 8009010:	4681      	mov	r9, r0
 8009012:	b168      	cbz	r0, 8009030 <_dtoa_r+0xc8>
 8009014:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8009016:	2301      	movs	r3, #1
 8009018:	6013      	str	r3, [r2, #0]
 800901a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800901c:	2b00      	cmp	r3, #0
 800901e:	f000 8524 	beq.w	8009a6a <_dtoa_r+0xb02>
 8009022:	4b9a      	ldr	r3, [pc, #616]	; (800928c <_dtoa_r+0x324>)
 8009024:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8009026:	f103 3bff 	add.w	fp, r3, #4294967295
 800902a:	6013      	str	r3, [r2, #0]
 800902c:	f000 bd28 	b.w	8009a80 <_dtoa_r+0xb18>
 8009030:	aa14      	add	r2, sp, #80	; 0x50
 8009032:	a915      	add	r1, sp, #84	; 0x54
 8009034:	ec47 6b10 	vmov	d0, r6, r7
 8009038:	4620      	mov	r0, r4
 800903a:	f000 fffa 	bl	800a032 <__d2b>
 800903e:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8009042:	9004      	str	r0, [sp, #16]
 8009044:	2d00      	cmp	r5, #0
 8009046:	d07c      	beq.n	8009142 <_dtoa_r+0x1da>
 8009048:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800904c:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 8009050:	46b2      	mov	sl, r6
 8009052:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 8009056:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800905a:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 800905e:	2200      	movs	r2, #0
 8009060:	4b8b      	ldr	r3, [pc, #556]	; (8009290 <_dtoa_r+0x328>)
 8009062:	4650      	mov	r0, sl
 8009064:	4659      	mov	r1, fp
 8009066:	f7f7 f8bb 	bl	80001e0 <__aeabi_dsub>
 800906a:	a381      	add	r3, pc, #516	; (adr r3, 8009270 <_dtoa_r+0x308>)
 800906c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009070:	f7f7 fa6e 	bl	8000550 <__aeabi_dmul>
 8009074:	a380      	add	r3, pc, #512	; (adr r3, 8009278 <_dtoa_r+0x310>)
 8009076:	e9d3 2300 	ldrd	r2, r3, [r3]
 800907a:	f7f7 f8b3 	bl	80001e4 <__adddf3>
 800907e:	4606      	mov	r6, r0
 8009080:	4628      	mov	r0, r5
 8009082:	460f      	mov	r7, r1
 8009084:	f7f7 f9fa 	bl	800047c <__aeabi_i2d>
 8009088:	a37d      	add	r3, pc, #500	; (adr r3, 8009280 <_dtoa_r+0x318>)
 800908a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800908e:	f7f7 fa5f 	bl	8000550 <__aeabi_dmul>
 8009092:	4602      	mov	r2, r0
 8009094:	460b      	mov	r3, r1
 8009096:	4630      	mov	r0, r6
 8009098:	4639      	mov	r1, r7
 800909a:	f7f7 f8a3 	bl	80001e4 <__adddf3>
 800909e:	4606      	mov	r6, r0
 80090a0:	460f      	mov	r7, r1
 80090a2:	f7f7 fd05 	bl	8000ab0 <__aeabi_d2iz>
 80090a6:	2200      	movs	r2, #0
 80090a8:	4682      	mov	sl, r0
 80090aa:	2300      	movs	r3, #0
 80090ac:	4630      	mov	r0, r6
 80090ae:	4639      	mov	r1, r7
 80090b0:	f7f7 fcc0 	bl	8000a34 <__aeabi_dcmplt>
 80090b4:	b148      	cbz	r0, 80090ca <_dtoa_r+0x162>
 80090b6:	4650      	mov	r0, sl
 80090b8:	f7f7 f9e0 	bl	800047c <__aeabi_i2d>
 80090bc:	4632      	mov	r2, r6
 80090be:	463b      	mov	r3, r7
 80090c0:	f7f7 fcae 	bl	8000a20 <__aeabi_dcmpeq>
 80090c4:	b908      	cbnz	r0, 80090ca <_dtoa_r+0x162>
 80090c6:	f10a 3aff 	add.w	sl, sl, #4294967295
 80090ca:	f1ba 0f16 	cmp.w	sl, #22
 80090ce:	d859      	bhi.n	8009184 <_dtoa_r+0x21c>
 80090d0:	4970      	ldr	r1, [pc, #448]	; (8009294 <_dtoa_r+0x32c>)
 80090d2:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 80090d6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80090da:	e9d1 0100 	ldrd	r0, r1, [r1]
 80090de:	f7f7 fcc7 	bl	8000a70 <__aeabi_dcmpgt>
 80090e2:	2800      	cmp	r0, #0
 80090e4:	d050      	beq.n	8009188 <_dtoa_r+0x220>
 80090e6:	f10a 3aff 	add.w	sl, sl, #4294967295
 80090ea:	2300      	movs	r3, #0
 80090ec:	930f      	str	r3, [sp, #60]	; 0x3c
 80090ee:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80090f0:	1b5d      	subs	r5, r3, r5
 80090f2:	f1b5 0801 	subs.w	r8, r5, #1
 80090f6:	bf49      	itett	mi
 80090f8:	f1c5 0301 	rsbmi	r3, r5, #1
 80090fc:	2300      	movpl	r3, #0
 80090fe:	9305      	strmi	r3, [sp, #20]
 8009100:	f04f 0800 	movmi.w	r8, #0
 8009104:	bf58      	it	pl
 8009106:	9305      	strpl	r3, [sp, #20]
 8009108:	f1ba 0f00 	cmp.w	sl, #0
 800910c:	db3e      	blt.n	800918c <_dtoa_r+0x224>
 800910e:	2300      	movs	r3, #0
 8009110:	44d0      	add	r8, sl
 8009112:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8009116:	9307      	str	r3, [sp, #28]
 8009118:	9b06      	ldr	r3, [sp, #24]
 800911a:	2b09      	cmp	r3, #9
 800911c:	f200 8090 	bhi.w	8009240 <_dtoa_r+0x2d8>
 8009120:	2b05      	cmp	r3, #5
 8009122:	bfc4      	itt	gt
 8009124:	3b04      	subgt	r3, #4
 8009126:	9306      	strgt	r3, [sp, #24]
 8009128:	9b06      	ldr	r3, [sp, #24]
 800912a:	f1a3 0302 	sub.w	r3, r3, #2
 800912e:	bfcc      	ite	gt
 8009130:	2500      	movgt	r5, #0
 8009132:	2501      	movle	r5, #1
 8009134:	2b03      	cmp	r3, #3
 8009136:	f200 808f 	bhi.w	8009258 <_dtoa_r+0x2f0>
 800913a:	e8df f003 	tbb	[pc, r3]
 800913e:	7f7d      	.short	0x7f7d
 8009140:	7131      	.short	0x7131
 8009142:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 8009146:	441d      	add	r5, r3
 8009148:	f205 4032 	addw	r0, r5, #1074	; 0x432
 800914c:	2820      	cmp	r0, #32
 800914e:	dd13      	ble.n	8009178 <_dtoa_r+0x210>
 8009150:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8009154:	9b00      	ldr	r3, [sp, #0]
 8009156:	fa08 f800 	lsl.w	r8, r8, r0
 800915a:	f205 4012 	addw	r0, r5, #1042	; 0x412
 800915e:	fa23 f000 	lsr.w	r0, r3, r0
 8009162:	ea48 0000 	orr.w	r0, r8, r0
 8009166:	f7f7 f979 	bl	800045c <__aeabi_ui2d>
 800916a:	2301      	movs	r3, #1
 800916c:	4682      	mov	sl, r0
 800916e:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 8009172:	3d01      	subs	r5, #1
 8009174:	9313      	str	r3, [sp, #76]	; 0x4c
 8009176:	e772      	b.n	800905e <_dtoa_r+0xf6>
 8009178:	9b00      	ldr	r3, [sp, #0]
 800917a:	f1c0 0020 	rsb	r0, r0, #32
 800917e:	fa03 f000 	lsl.w	r0, r3, r0
 8009182:	e7f0      	b.n	8009166 <_dtoa_r+0x1fe>
 8009184:	2301      	movs	r3, #1
 8009186:	e7b1      	b.n	80090ec <_dtoa_r+0x184>
 8009188:	900f      	str	r0, [sp, #60]	; 0x3c
 800918a:	e7b0      	b.n	80090ee <_dtoa_r+0x186>
 800918c:	9b05      	ldr	r3, [sp, #20]
 800918e:	eba3 030a 	sub.w	r3, r3, sl
 8009192:	9305      	str	r3, [sp, #20]
 8009194:	f1ca 0300 	rsb	r3, sl, #0
 8009198:	9307      	str	r3, [sp, #28]
 800919a:	2300      	movs	r3, #0
 800919c:	930e      	str	r3, [sp, #56]	; 0x38
 800919e:	e7bb      	b.n	8009118 <_dtoa_r+0x1b0>
 80091a0:	2301      	movs	r3, #1
 80091a2:	930a      	str	r3, [sp, #40]	; 0x28
 80091a4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80091a6:	2b00      	cmp	r3, #0
 80091a8:	dd59      	ble.n	800925e <_dtoa_r+0x2f6>
 80091aa:	9302      	str	r3, [sp, #8]
 80091ac:	4699      	mov	r9, r3
 80091ae:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80091b0:	2200      	movs	r2, #0
 80091b2:	6072      	str	r2, [r6, #4]
 80091b4:	2204      	movs	r2, #4
 80091b6:	f102 0014 	add.w	r0, r2, #20
 80091ba:	4298      	cmp	r0, r3
 80091bc:	6871      	ldr	r1, [r6, #4]
 80091be:	d953      	bls.n	8009268 <_dtoa_r+0x300>
 80091c0:	4620      	mov	r0, r4
 80091c2:	f000 fcaa 	bl	8009b1a <_Balloc>
 80091c6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80091c8:	6030      	str	r0, [r6, #0]
 80091ca:	f1b9 0f0e 	cmp.w	r9, #14
 80091ce:	f8d3 b000 	ldr.w	fp, [r3]
 80091d2:	f200 80e6 	bhi.w	80093a2 <_dtoa_r+0x43a>
 80091d6:	2d00      	cmp	r5, #0
 80091d8:	f000 80e3 	beq.w	80093a2 <_dtoa_r+0x43a>
 80091dc:	ed9d 7b00 	vldr	d7, [sp]
 80091e0:	f1ba 0f00 	cmp.w	sl, #0
 80091e4:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 80091e8:	dd74      	ble.n	80092d4 <_dtoa_r+0x36c>
 80091ea:	4a2a      	ldr	r2, [pc, #168]	; (8009294 <_dtoa_r+0x32c>)
 80091ec:	f00a 030f 	and.w	r3, sl, #15
 80091f0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80091f4:	ed93 7b00 	vldr	d7, [r3]
 80091f8:	ea4f 162a 	mov.w	r6, sl, asr #4
 80091fc:	06f0      	lsls	r0, r6, #27
 80091fe:	ed8d 7b08 	vstr	d7, [sp, #32]
 8009202:	d565      	bpl.n	80092d0 <_dtoa_r+0x368>
 8009204:	4b24      	ldr	r3, [pc, #144]	; (8009298 <_dtoa_r+0x330>)
 8009206:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800920a:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800920e:	f7f7 fac9 	bl	80007a4 <__aeabi_ddiv>
 8009212:	e9cd 0100 	strd	r0, r1, [sp]
 8009216:	f006 060f 	and.w	r6, r6, #15
 800921a:	2503      	movs	r5, #3
 800921c:	4f1e      	ldr	r7, [pc, #120]	; (8009298 <_dtoa_r+0x330>)
 800921e:	e04c      	b.n	80092ba <_dtoa_r+0x352>
 8009220:	2301      	movs	r3, #1
 8009222:	930a      	str	r3, [sp, #40]	; 0x28
 8009224:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009226:	4453      	add	r3, sl
 8009228:	f103 0901 	add.w	r9, r3, #1
 800922c:	9302      	str	r3, [sp, #8]
 800922e:	464b      	mov	r3, r9
 8009230:	2b01      	cmp	r3, #1
 8009232:	bfb8      	it	lt
 8009234:	2301      	movlt	r3, #1
 8009236:	e7ba      	b.n	80091ae <_dtoa_r+0x246>
 8009238:	2300      	movs	r3, #0
 800923a:	e7b2      	b.n	80091a2 <_dtoa_r+0x23a>
 800923c:	2300      	movs	r3, #0
 800923e:	e7f0      	b.n	8009222 <_dtoa_r+0x2ba>
 8009240:	2501      	movs	r5, #1
 8009242:	2300      	movs	r3, #0
 8009244:	9306      	str	r3, [sp, #24]
 8009246:	950a      	str	r5, [sp, #40]	; 0x28
 8009248:	f04f 33ff 	mov.w	r3, #4294967295
 800924c:	9302      	str	r3, [sp, #8]
 800924e:	4699      	mov	r9, r3
 8009250:	2200      	movs	r2, #0
 8009252:	2312      	movs	r3, #18
 8009254:	920b      	str	r2, [sp, #44]	; 0x2c
 8009256:	e7aa      	b.n	80091ae <_dtoa_r+0x246>
 8009258:	2301      	movs	r3, #1
 800925a:	930a      	str	r3, [sp, #40]	; 0x28
 800925c:	e7f4      	b.n	8009248 <_dtoa_r+0x2e0>
 800925e:	2301      	movs	r3, #1
 8009260:	9302      	str	r3, [sp, #8]
 8009262:	4699      	mov	r9, r3
 8009264:	461a      	mov	r2, r3
 8009266:	e7f5      	b.n	8009254 <_dtoa_r+0x2ec>
 8009268:	3101      	adds	r1, #1
 800926a:	6071      	str	r1, [r6, #4]
 800926c:	0052      	lsls	r2, r2, #1
 800926e:	e7a2      	b.n	80091b6 <_dtoa_r+0x24e>
 8009270:	636f4361 	.word	0x636f4361
 8009274:	3fd287a7 	.word	0x3fd287a7
 8009278:	8b60c8b3 	.word	0x8b60c8b3
 800927c:	3fc68a28 	.word	0x3fc68a28
 8009280:	509f79fb 	.word	0x509f79fb
 8009284:	3fd34413 	.word	0x3fd34413
 8009288:	7ff00000 	.word	0x7ff00000
 800928c:	0800a299 	.word	0x0800a299
 8009290:	3ff80000 	.word	0x3ff80000
 8009294:	0800a2d0 	.word	0x0800a2d0
 8009298:	0800a2a8 	.word	0x0800a2a8
 800929c:	0800a2a3 	.word	0x0800a2a3
 80092a0:	07f1      	lsls	r1, r6, #31
 80092a2:	d508      	bpl.n	80092b6 <_dtoa_r+0x34e>
 80092a4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80092a8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80092ac:	f7f7 f950 	bl	8000550 <__aeabi_dmul>
 80092b0:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80092b4:	3501      	adds	r5, #1
 80092b6:	1076      	asrs	r6, r6, #1
 80092b8:	3708      	adds	r7, #8
 80092ba:	2e00      	cmp	r6, #0
 80092bc:	d1f0      	bne.n	80092a0 <_dtoa_r+0x338>
 80092be:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80092c2:	e9dd 0100 	ldrd	r0, r1, [sp]
 80092c6:	f7f7 fa6d 	bl	80007a4 <__aeabi_ddiv>
 80092ca:	e9cd 0100 	strd	r0, r1, [sp]
 80092ce:	e01a      	b.n	8009306 <_dtoa_r+0x39e>
 80092d0:	2502      	movs	r5, #2
 80092d2:	e7a3      	b.n	800921c <_dtoa_r+0x2b4>
 80092d4:	f000 80a0 	beq.w	8009418 <_dtoa_r+0x4b0>
 80092d8:	f1ca 0600 	rsb	r6, sl, #0
 80092dc:	4b9f      	ldr	r3, [pc, #636]	; (800955c <_dtoa_r+0x5f4>)
 80092de:	4fa0      	ldr	r7, [pc, #640]	; (8009560 <_dtoa_r+0x5f8>)
 80092e0:	f006 020f 	and.w	r2, r6, #15
 80092e4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80092e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092ec:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80092f0:	f7f7 f92e 	bl	8000550 <__aeabi_dmul>
 80092f4:	e9cd 0100 	strd	r0, r1, [sp]
 80092f8:	1136      	asrs	r6, r6, #4
 80092fa:	2300      	movs	r3, #0
 80092fc:	2502      	movs	r5, #2
 80092fe:	2e00      	cmp	r6, #0
 8009300:	d17f      	bne.n	8009402 <_dtoa_r+0x49a>
 8009302:	2b00      	cmp	r3, #0
 8009304:	d1e1      	bne.n	80092ca <_dtoa_r+0x362>
 8009306:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009308:	2b00      	cmp	r3, #0
 800930a:	f000 8087 	beq.w	800941c <_dtoa_r+0x4b4>
 800930e:	e9dd 6700 	ldrd	r6, r7, [sp]
 8009312:	2200      	movs	r2, #0
 8009314:	4b93      	ldr	r3, [pc, #588]	; (8009564 <_dtoa_r+0x5fc>)
 8009316:	4630      	mov	r0, r6
 8009318:	4639      	mov	r1, r7
 800931a:	f7f7 fb8b 	bl	8000a34 <__aeabi_dcmplt>
 800931e:	2800      	cmp	r0, #0
 8009320:	d07c      	beq.n	800941c <_dtoa_r+0x4b4>
 8009322:	f1b9 0f00 	cmp.w	r9, #0
 8009326:	d079      	beq.n	800941c <_dtoa_r+0x4b4>
 8009328:	9b02      	ldr	r3, [sp, #8]
 800932a:	2b00      	cmp	r3, #0
 800932c:	dd35      	ble.n	800939a <_dtoa_r+0x432>
 800932e:	f10a 33ff 	add.w	r3, sl, #4294967295
 8009332:	9308      	str	r3, [sp, #32]
 8009334:	4639      	mov	r1, r7
 8009336:	2200      	movs	r2, #0
 8009338:	4b8b      	ldr	r3, [pc, #556]	; (8009568 <_dtoa_r+0x600>)
 800933a:	4630      	mov	r0, r6
 800933c:	f7f7 f908 	bl	8000550 <__aeabi_dmul>
 8009340:	e9cd 0100 	strd	r0, r1, [sp]
 8009344:	9f02      	ldr	r7, [sp, #8]
 8009346:	3501      	adds	r5, #1
 8009348:	4628      	mov	r0, r5
 800934a:	f7f7 f897 	bl	800047c <__aeabi_i2d>
 800934e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009352:	f7f7 f8fd 	bl	8000550 <__aeabi_dmul>
 8009356:	2200      	movs	r2, #0
 8009358:	4b84      	ldr	r3, [pc, #528]	; (800956c <_dtoa_r+0x604>)
 800935a:	f7f6 ff43 	bl	80001e4 <__adddf3>
 800935e:	4605      	mov	r5, r0
 8009360:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8009364:	2f00      	cmp	r7, #0
 8009366:	d15d      	bne.n	8009424 <_dtoa_r+0x4bc>
 8009368:	2200      	movs	r2, #0
 800936a:	4b81      	ldr	r3, [pc, #516]	; (8009570 <_dtoa_r+0x608>)
 800936c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009370:	f7f6 ff36 	bl	80001e0 <__aeabi_dsub>
 8009374:	462a      	mov	r2, r5
 8009376:	4633      	mov	r3, r6
 8009378:	e9cd 0100 	strd	r0, r1, [sp]
 800937c:	f7f7 fb78 	bl	8000a70 <__aeabi_dcmpgt>
 8009380:	2800      	cmp	r0, #0
 8009382:	f040 8288 	bne.w	8009896 <_dtoa_r+0x92e>
 8009386:	462a      	mov	r2, r5
 8009388:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800938c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009390:	f7f7 fb50 	bl	8000a34 <__aeabi_dcmplt>
 8009394:	2800      	cmp	r0, #0
 8009396:	f040 827c 	bne.w	8009892 <_dtoa_r+0x92a>
 800939a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800939e:	e9cd 2300 	strd	r2, r3, [sp]
 80093a2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80093a4:	2b00      	cmp	r3, #0
 80093a6:	f2c0 8150 	blt.w	800964a <_dtoa_r+0x6e2>
 80093aa:	f1ba 0f0e 	cmp.w	sl, #14
 80093ae:	f300 814c 	bgt.w	800964a <_dtoa_r+0x6e2>
 80093b2:	4b6a      	ldr	r3, [pc, #424]	; (800955c <_dtoa_r+0x5f4>)
 80093b4:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80093b8:	ed93 7b00 	vldr	d7, [r3]
 80093bc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80093be:	2b00      	cmp	r3, #0
 80093c0:	ed8d 7b02 	vstr	d7, [sp, #8]
 80093c4:	f280 80d8 	bge.w	8009578 <_dtoa_r+0x610>
 80093c8:	f1b9 0f00 	cmp.w	r9, #0
 80093cc:	f300 80d4 	bgt.w	8009578 <_dtoa_r+0x610>
 80093d0:	f040 825e 	bne.w	8009890 <_dtoa_r+0x928>
 80093d4:	2200      	movs	r2, #0
 80093d6:	4b66      	ldr	r3, [pc, #408]	; (8009570 <_dtoa_r+0x608>)
 80093d8:	ec51 0b17 	vmov	r0, r1, d7
 80093dc:	f7f7 f8b8 	bl	8000550 <__aeabi_dmul>
 80093e0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80093e4:	f7f7 fb3a 	bl	8000a5c <__aeabi_dcmpge>
 80093e8:	464f      	mov	r7, r9
 80093ea:	464e      	mov	r6, r9
 80093ec:	2800      	cmp	r0, #0
 80093ee:	f040 8234 	bne.w	800985a <_dtoa_r+0x8f2>
 80093f2:	2331      	movs	r3, #49	; 0x31
 80093f4:	f10b 0501 	add.w	r5, fp, #1
 80093f8:	f88b 3000 	strb.w	r3, [fp]
 80093fc:	f10a 0a01 	add.w	sl, sl, #1
 8009400:	e22f      	b.n	8009862 <_dtoa_r+0x8fa>
 8009402:	07f2      	lsls	r2, r6, #31
 8009404:	d505      	bpl.n	8009412 <_dtoa_r+0x4aa>
 8009406:	e9d7 2300 	ldrd	r2, r3, [r7]
 800940a:	f7f7 f8a1 	bl	8000550 <__aeabi_dmul>
 800940e:	3501      	adds	r5, #1
 8009410:	2301      	movs	r3, #1
 8009412:	1076      	asrs	r6, r6, #1
 8009414:	3708      	adds	r7, #8
 8009416:	e772      	b.n	80092fe <_dtoa_r+0x396>
 8009418:	2502      	movs	r5, #2
 800941a:	e774      	b.n	8009306 <_dtoa_r+0x39e>
 800941c:	f8cd a020 	str.w	sl, [sp, #32]
 8009420:	464f      	mov	r7, r9
 8009422:	e791      	b.n	8009348 <_dtoa_r+0x3e0>
 8009424:	4b4d      	ldr	r3, [pc, #308]	; (800955c <_dtoa_r+0x5f4>)
 8009426:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800942a:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 800942e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009430:	2b00      	cmp	r3, #0
 8009432:	d047      	beq.n	80094c4 <_dtoa_r+0x55c>
 8009434:	4602      	mov	r2, r0
 8009436:	460b      	mov	r3, r1
 8009438:	2000      	movs	r0, #0
 800943a:	494e      	ldr	r1, [pc, #312]	; (8009574 <_dtoa_r+0x60c>)
 800943c:	f7f7 f9b2 	bl	80007a4 <__aeabi_ddiv>
 8009440:	462a      	mov	r2, r5
 8009442:	4633      	mov	r3, r6
 8009444:	f7f6 fecc 	bl	80001e0 <__aeabi_dsub>
 8009448:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800944c:	465d      	mov	r5, fp
 800944e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009452:	f7f7 fb2d 	bl	8000ab0 <__aeabi_d2iz>
 8009456:	4606      	mov	r6, r0
 8009458:	f7f7 f810 	bl	800047c <__aeabi_i2d>
 800945c:	4602      	mov	r2, r0
 800945e:	460b      	mov	r3, r1
 8009460:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009464:	f7f6 febc 	bl	80001e0 <__aeabi_dsub>
 8009468:	3630      	adds	r6, #48	; 0x30
 800946a:	f805 6b01 	strb.w	r6, [r5], #1
 800946e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8009472:	e9cd 0100 	strd	r0, r1, [sp]
 8009476:	f7f7 fadd 	bl	8000a34 <__aeabi_dcmplt>
 800947a:	2800      	cmp	r0, #0
 800947c:	d163      	bne.n	8009546 <_dtoa_r+0x5de>
 800947e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009482:	2000      	movs	r0, #0
 8009484:	4937      	ldr	r1, [pc, #220]	; (8009564 <_dtoa_r+0x5fc>)
 8009486:	f7f6 feab 	bl	80001e0 <__aeabi_dsub>
 800948a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800948e:	f7f7 fad1 	bl	8000a34 <__aeabi_dcmplt>
 8009492:	2800      	cmp	r0, #0
 8009494:	f040 80b7 	bne.w	8009606 <_dtoa_r+0x69e>
 8009498:	eba5 030b 	sub.w	r3, r5, fp
 800949c:	429f      	cmp	r7, r3
 800949e:	f77f af7c 	ble.w	800939a <_dtoa_r+0x432>
 80094a2:	2200      	movs	r2, #0
 80094a4:	4b30      	ldr	r3, [pc, #192]	; (8009568 <_dtoa_r+0x600>)
 80094a6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80094aa:	f7f7 f851 	bl	8000550 <__aeabi_dmul>
 80094ae:	2200      	movs	r2, #0
 80094b0:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80094b4:	4b2c      	ldr	r3, [pc, #176]	; (8009568 <_dtoa_r+0x600>)
 80094b6:	e9dd 0100 	ldrd	r0, r1, [sp]
 80094ba:	f7f7 f849 	bl	8000550 <__aeabi_dmul>
 80094be:	e9cd 0100 	strd	r0, r1, [sp]
 80094c2:	e7c4      	b.n	800944e <_dtoa_r+0x4e6>
 80094c4:	462a      	mov	r2, r5
 80094c6:	4633      	mov	r3, r6
 80094c8:	f7f7 f842 	bl	8000550 <__aeabi_dmul>
 80094cc:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80094d0:	eb0b 0507 	add.w	r5, fp, r7
 80094d4:	465e      	mov	r6, fp
 80094d6:	e9dd 0100 	ldrd	r0, r1, [sp]
 80094da:	f7f7 fae9 	bl	8000ab0 <__aeabi_d2iz>
 80094de:	4607      	mov	r7, r0
 80094e0:	f7f6 ffcc 	bl	800047c <__aeabi_i2d>
 80094e4:	3730      	adds	r7, #48	; 0x30
 80094e6:	4602      	mov	r2, r0
 80094e8:	460b      	mov	r3, r1
 80094ea:	e9dd 0100 	ldrd	r0, r1, [sp]
 80094ee:	f7f6 fe77 	bl	80001e0 <__aeabi_dsub>
 80094f2:	f806 7b01 	strb.w	r7, [r6], #1
 80094f6:	42ae      	cmp	r6, r5
 80094f8:	e9cd 0100 	strd	r0, r1, [sp]
 80094fc:	f04f 0200 	mov.w	r2, #0
 8009500:	d126      	bne.n	8009550 <_dtoa_r+0x5e8>
 8009502:	4b1c      	ldr	r3, [pc, #112]	; (8009574 <_dtoa_r+0x60c>)
 8009504:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8009508:	f7f6 fe6c 	bl	80001e4 <__adddf3>
 800950c:	4602      	mov	r2, r0
 800950e:	460b      	mov	r3, r1
 8009510:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009514:	f7f7 faac 	bl	8000a70 <__aeabi_dcmpgt>
 8009518:	2800      	cmp	r0, #0
 800951a:	d174      	bne.n	8009606 <_dtoa_r+0x69e>
 800951c:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8009520:	2000      	movs	r0, #0
 8009522:	4914      	ldr	r1, [pc, #80]	; (8009574 <_dtoa_r+0x60c>)
 8009524:	f7f6 fe5c 	bl	80001e0 <__aeabi_dsub>
 8009528:	4602      	mov	r2, r0
 800952a:	460b      	mov	r3, r1
 800952c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009530:	f7f7 fa80 	bl	8000a34 <__aeabi_dcmplt>
 8009534:	2800      	cmp	r0, #0
 8009536:	f43f af30 	beq.w	800939a <_dtoa_r+0x432>
 800953a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800953e:	2b30      	cmp	r3, #48	; 0x30
 8009540:	f105 32ff 	add.w	r2, r5, #4294967295
 8009544:	d002      	beq.n	800954c <_dtoa_r+0x5e4>
 8009546:	f8dd a020 	ldr.w	sl, [sp, #32]
 800954a:	e04a      	b.n	80095e2 <_dtoa_r+0x67a>
 800954c:	4615      	mov	r5, r2
 800954e:	e7f4      	b.n	800953a <_dtoa_r+0x5d2>
 8009550:	4b05      	ldr	r3, [pc, #20]	; (8009568 <_dtoa_r+0x600>)
 8009552:	f7f6 fffd 	bl	8000550 <__aeabi_dmul>
 8009556:	e9cd 0100 	strd	r0, r1, [sp]
 800955a:	e7bc      	b.n	80094d6 <_dtoa_r+0x56e>
 800955c:	0800a2d0 	.word	0x0800a2d0
 8009560:	0800a2a8 	.word	0x0800a2a8
 8009564:	3ff00000 	.word	0x3ff00000
 8009568:	40240000 	.word	0x40240000
 800956c:	401c0000 	.word	0x401c0000
 8009570:	40140000 	.word	0x40140000
 8009574:	3fe00000 	.word	0x3fe00000
 8009578:	e9dd 6700 	ldrd	r6, r7, [sp]
 800957c:	465d      	mov	r5, fp
 800957e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009582:	4630      	mov	r0, r6
 8009584:	4639      	mov	r1, r7
 8009586:	f7f7 f90d 	bl	80007a4 <__aeabi_ddiv>
 800958a:	f7f7 fa91 	bl	8000ab0 <__aeabi_d2iz>
 800958e:	4680      	mov	r8, r0
 8009590:	f7f6 ff74 	bl	800047c <__aeabi_i2d>
 8009594:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009598:	f7f6 ffda 	bl	8000550 <__aeabi_dmul>
 800959c:	4602      	mov	r2, r0
 800959e:	460b      	mov	r3, r1
 80095a0:	4630      	mov	r0, r6
 80095a2:	4639      	mov	r1, r7
 80095a4:	f108 0630 	add.w	r6, r8, #48	; 0x30
 80095a8:	f7f6 fe1a 	bl	80001e0 <__aeabi_dsub>
 80095ac:	f805 6b01 	strb.w	r6, [r5], #1
 80095b0:	eba5 060b 	sub.w	r6, r5, fp
 80095b4:	45b1      	cmp	r9, r6
 80095b6:	4602      	mov	r2, r0
 80095b8:	460b      	mov	r3, r1
 80095ba:	d139      	bne.n	8009630 <_dtoa_r+0x6c8>
 80095bc:	f7f6 fe12 	bl	80001e4 <__adddf3>
 80095c0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80095c4:	4606      	mov	r6, r0
 80095c6:	460f      	mov	r7, r1
 80095c8:	f7f7 fa52 	bl	8000a70 <__aeabi_dcmpgt>
 80095cc:	b9c8      	cbnz	r0, 8009602 <_dtoa_r+0x69a>
 80095ce:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80095d2:	4630      	mov	r0, r6
 80095d4:	4639      	mov	r1, r7
 80095d6:	f7f7 fa23 	bl	8000a20 <__aeabi_dcmpeq>
 80095da:	b110      	cbz	r0, 80095e2 <_dtoa_r+0x67a>
 80095dc:	f018 0f01 	tst.w	r8, #1
 80095e0:	d10f      	bne.n	8009602 <_dtoa_r+0x69a>
 80095e2:	9904      	ldr	r1, [sp, #16]
 80095e4:	4620      	mov	r0, r4
 80095e6:	f000 facc 	bl	8009b82 <_Bfree>
 80095ea:	2300      	movs	r3, #0
 80095ec:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80095ee:	702b      	strb	r3, [r5, #0]
 80095f0:	f10a 0301 	add.w	r3, sl, #1
 80095f4:	6013      	str	r3, [r2, #0]
 80095f6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80095f8:	2b00      	cmp	r3, #0
 80095fa:	f000 8241 	beq.w	8009a80 <_dtoa_r+0xb18>
 80095fe:	601d      	str	r5, [r3, #0]
 8009600:	e23e      	b.n	8009a80 <_dtoa_r+0xb18>
 8009602:	f8cd a020 	str.w	sl, [sp, #32]
 8009606:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800960a:	2a39      	cmp	r2, #57	; 0x39
 800960c:	f105 33ff 	add.w	r3, r5, #4294967295
 8009610:	d108      	bne.n	8009624 <_dtoa_r+0x6bc>
 8009612:	459b      	cmp	fp, r3
 8009614:	d10a      	bne.n	800962c <_dtoa_r+0x6c4>
 8009616:	9b08      	ldr	r3, [sp, #32]
 8009618:	3301      	adds	r3, #1
 800961a:	9308      	str	r3, [sp, #32]
 800961c:	2330      	movs	r3, #48	; 0x30
 800961e:	f88b 3000 	strb.w	r3, [fp]
 8009622:	465b      	mov	r3, fp
 8009624:	781a      	ldrb	r2, [r3, #0]
 8009626:	3201      	adds	r2, #1
 8009628:	701a      	strb	r2, [r3, #0]
 800962a:	e78c      	b.n	8009546 <_dtoa_r+0x5de>
 800962c:	461d      	mov	r5, r3
 800962e:	e7ea      	b.n	8009606 <_dtoa_r+0x69e>
 8009630:	2200      	movs	r2, #0
 8009632:	4b9b      	ldr	r3, [pc, #620]	; (80098a0 <_dtoa_r+0x938>)
 8009634:	f7f6 ff8c 	bl	8000550 <__aeabi_dmul>
 8009638:	2200      	movs	r2, #0
 800963a:	2300      	movs	r3, #0
 800963c:	4606      	mov	r6, r0
 800963e:	460f      	mov	r7, r1
 8009640:	f7f7 f9ee 	bl	8000a20 <__aeabi_dcmpeq>
 8009644:	2800      	cmp	r0, #0
 8009646:	d09a      	beq.n	800957e <_dtoa_r+0x616>
 8009648:	e7cb      	b.n	80095e2 <_dtoa_r+0x67a>
 800964a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800964c:	2a00      	cmp	r2, #0
 800964e:	f000 808b 	beq.w	8009768 <_dtoa_r+0x800>
 8009652:	9a06      	ldr	r2, [sp, #24]
 8009654:	2a01      	cmp	r2, #1
 8009656:	dc6e      	bgt.n	8009736 <_dtoa_r+0x7ce>
 8009658:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800965a:	2a00      	cmp	r2, #0
 800965c:	d067      	beq.n	800972e <_dtoa_r+0x7c6>
 800965e:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8009662:	9f07      	ldr	r7, [sp, #28]
 8009664:	9d05      	ldr	r5, [sp, #20]
 8009666:	9a05      	ldr	r2, [sp, #20]
 8009668:	2101      	movs	r1, #1
 800966a:	441a      	add	r2, r3
 800966c:	4620      	mov	r0, r4
 800966e:	9205      	str	r2, [sp, #20]
 8009670:	4498      	add	r8, r3
 8009672:	f000 fb26 	bl	8009cc2 <__i2b>
 8009676:	4606      	mov	r6, r0
 8009678:	2d00      	cmp	r5, #0
 800967a:	dd0c      	ble.n	8009696 <_dtoa_r+0x72e>
 800967c:	f1b8 0f00 	cmp.w	r8, #0
 8009680:	dd09      	ble.n	8009696 <_dtoa_r+0x72e>
 8009682:	4545      	cmp	r5, r8
 8009684:	9a05      	ldr	r2, [sp, #20]
 8009686:	462b      	mov	r3, r5
 8009688:	bfa8      	it	ge
 800968a:	4643      	movge	r3, r8
 800968c:	1ad2      	subs	r2, r2, r3
 800968e:	9205      	str	r2, [sp, #20]
 8009690:	1aed      	subs	r5, r5, r3
 8009692:	eba8 0803 	sub.w	r8, r8, r3
 8009696:	9b07      	ldr	r3, [sp, #28]
 8009698:	b1eb      	cbz	r3, 80096d6 <_dtoa_r+0x76e>
 800969a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800969c:	2b00      	cmp	r3, #0
 800969e:	d067      	beq.n	8009770 <_dtoa_r+0x808>
 80096a0:	b18f      	cbz	r7, 80096c6 <_dtoa_r+0x75e>
 80096a2:	4631      	mov	r1, r6
 80096a4:	463a      	mov	r2, r7
 80096a6:	4620      	mov	r0, r4
 80096a8:	f000 fbaa 	bl	8009e00 <__pow5mult>
 80096ac:	9a04      	ldr	r2, [sp, #16]
 80096ae:	4601      	mov	r1, r0
 80096b0:	4606      	mov	r6, r0
 80096b2:	4620      	mov	r0, r4
 80096b4:	f000 fb0e 	bl	8009cd4 <__multiply>
 80096b8:	9904      	ldr	r1, [sp, #16]
 80096ba:	9008      	str	r0, [sp, #32]
 80096bc:	4620      	mov	r0, r4
 80096be:	f000 fa60 	bl	8009b82 <_Bfree>
 80096c2:	9b08      	ldr	r3, [sp, #32]
 80096c4:	9304      	str	r3, [sp, #16]
 80096c6:	9b07      	ldr	r3, [sp, #28]
 80096c8:	1bda      	subs	r2, r3, r7
 80096ca:	d004      	beq.n	80096d6 <_dtoa_r+0x76e>
 80096cc:	9904      	ldr	r1, [sp, #16]
 80096ce:	4620      	mov	r0, r4
 80096d0:	f000 fb96 	bl	8009e00 <__pow5mult>
 80096d4:	9004      	str	r0, [sp, #16]
 80096d6:	2101      	movs	r1, #1
 80096d8:	4620      	mov	r0, r4
 80096da:	f000 faf2 	bl	8009cc2 <__i2b>
 80096de:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80096e0:	4607      	mov	r7, r0
 80096e2:	2b00      	cmp	r3, #0
 80096e4:	f000 81d0 	beq.w	8009a88 <_dtoa_r+0xb20>
 80096e8:	461a      	mov	r2, r3
 80096ea:	4601      	mov	r1, r0
 80096ec:	4620      	mov	r0, r4
 80096ee:	f000 fb87 	bl	8009e00 <__pow5mult>
 80096f2:	9b06      	ldr	r3, [sp, #24]
 80096f4:	2b01      	cmp	r3, #1
 80096f6:	4607      	mov	r7, r0
 80096f8:	dc40      	bgt.n	800977c <_dtoa_r+0x814>
 80096fa:	9b00      	ldr	r3, [sp, #0]
 80096fc:	2b00      	cmp	r3, #0
 80096fe:	d139      	bne.n	8009774 <_dtoa_r+0x80c>
 8009700:	9b01      	ldr	r3, [sp, #4]
 8009702:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009706:	2b00      	cmp	r3, #0
 8009708:	d136      	bne.n	8009778 <_dtoa_r+0x810>
 800970a:	9b01      	ldr	r3, [sp, #4]
 800970c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009710:	0d1b      	lsrs	r3, r3, #20
 8009712:	051b      	lsls	r3, r3, #20
 8009714:	b12b      	cbz	r3, 8009722 <_dtoa_r+0x7ba>
 8009716:	9b05      	ldr	r3, [sp, #20]
 8009718:	3301      	adds	r3, #1
 800971a:	9305      	str	r3, [sp, #20]
 800971c:	f108 0801 	add.w	r8, r8, #1
 8009720:	2301      	movs	r3, #1
 8009722:	9307      	str	r3, [sp, #28]
 8009724:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009726:	2b00      	cmp	r3, #0
 8009728:	d12a      	bne.n	8009780 <_dtoa_r+0x818>
 800972a:	2001      	movs	r0, #1
 800972c:	e030      	b.n	8009790 <_dtoa_r+0x828>
 800972e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009730:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8009734:	e795      	b.n	8009662 <_dtoa_r+0x6fa>
 8009736:	9b07      	ldr	r3, [sp, #28]
 8009738:	f109 37ff 	add.w	r7, r9, #4294967295
 800973c:	42bb      	cmp	r3, r7
 800973e:	bfbf      	itttt	lt
 8009740:	9b07      	ldrlt	r3, [sp, #28]
 8009742:	9707      	strlt	r7, [sp, #28]
 8009744:	1afa      	sublt	r2, r7, r3
 8009746:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8009748:	bfbb      	ittet	lt
 800974a:	189b      	addlt	r3, r3, r2
 800974c:	930e      	strlt	r3, [sp, #56]	; 0x38
 800974e:	1bdf      	subge	r7, r3, r7
 8009750:	2700      	movlt	r7, #0
 8009752:	f1b9 0f00 	cmp.w	r9, #0
 8009756:	bfb5      	itete	lt
 8009758:	9b05      	ldrlt	r3, [sp, #20]
 800975a:	9d05      	ldrge	r5, [sp, #20]
 800975c:	eba3 0509 	sublt.w	r5, r3, r9
 8009760:	464b      	movge	r3, r9
 8009762:	bfb8      	it	lt
 8009764:	2300      	movlt	r3, #0
 8009766:	e77e      	b.n	8009666 <_dtoa_r+0x6fe>
 8009768:	9f07      	ldr	r7, [sp, #28]
 800976a:	9d05      	ldr	r5, [sp, #20]
 800976c:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800976e:	e783      	b.n	8009678 <_dtoa_r+0x710>
 8009770:	9a07      	ldr	r2, [sp, #28]
 8009772:	e7ab      	b.n	80096cc <_dtoa_r+0x764>
 8009774:	2300      	movs	r3, #0
 8009776:	e7d4      	b.n	8009722 <_dtoa_r+0x7ba>
 8009778:	9b00      	ldr	r3, [sp, #0]
 800977a:	e7d2      	b.n	8009722 <_dtoa_r+0x7ba>
 800977c:	2300      	movs	r3, #0
 800977e:	9307      	str	r3, [sp, #28]
 8009780:	693b      	ldr	r3, [r7, #16]
 8009782:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 8009786:	6918      	ldr	r0, [r3, #16]
 8009788:	f000 fa4d 	bl	8009c26 <__hi0bits>
 800978c:	f1c0 0020 	rsb	r0, r0, #32
 8009790:	4440      	add	r0, r8
 8009792:	f010 001f 	ands.w	r0, r0, #31
 8009796:	d047      	beq.n	8009828 <_dtoa_r+0x8c0>
 8009798:	f1c0 0320 	rsb	r3, r0, #32
 800979c:	2b04      	cmp	r3, #4
 800979e:	dd3b      	ble.n	8009818 <_dtoa_r+0x8b0>
 80097a0:	9b05      	ldr	r3, [sp, #20]
 80097a2:	f1c0 001c 	rsb	r0, r0, #28
 80097a6:	4403      	add	r3, r0
 80097a8:	9305      	str	r3, [sp, #20]
 80097aa:	4405      	add	r5, r0
 80097ac:	4480      	add	r8, r0
 80097ae:	9b05      	ldr	r3, [sp, #20]
 80097b0:	2b00      	cmp	r3, #0
 80097b2:	dd05      	ble.n	80097c0 <_dtoa_r+0x858>
 80097b4:	461a      	mov	r2, r3
 80097b6:	9904      	ldr	r1, [sp, #16]
 80097b8:	4620      	mov	r0, r4
 80097ba:	f000 fb6f 	bl	8009e9c <__lshift>
 80097be:	9004      	str	r0, [sp, #16]
 80097c0:	f1b8 0f00 	cmp.w	r8, #0
 80097c4:	dd05      	ble.n	80097d2 <_dtoa_r+0x86a>
 80097c6:	4639      	mov	r1, r7
 80097c8:	4642      	mov	r2, r8
 80097ca:	4620      	mov	r0, r4
 80097cc:	f000 fb66 	bl	8009e9c <__lshift>
 80097d0:	4607      	mov	r7, r0
 80097d2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80097d4:	b353      	cbz	r3, 800982c <_dtoa_r+0x8c4>
 80097d6:	4639      	mov	r1, r7
 80097d8:	9804      	ldr	r0, [sp, #16]
 80097da:	f000 fbb3 	bl	8009f44 <__mcmp>
 80097de:	2800      	cmp	r0, #0
 80097e0:	da24      	bge.n	800982c <_dtoa_r+0x8c4>
 80097e2:	2300      	movs	r3, #0
 80097e4:	220a      	movs	r2, #10
 80097e6:	9904      	ldr	r1, [sp, #16]
 80097e8:	4620      	mov	r0, r4
 80097ea:	f000 f9e1 	bl	8009bb0 <__multadd>
 80097ee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80097f0:	9004      	str	r0, [sp, #16]
 80097f2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80097f6:	2b00      	cmp	r3, #0
 80097f8:	f000 814d 	beq.w	8009a96 <_dtoa_r+0xb2e>
 80097fc:	2300      	movs	r3, #0
 80097fe:	4631      	mov	r1, r6
 8009800:	220a      	movs	r2, #10
 8009802:	4620      	mov	r0, r4
 8009804:	f000 f9d4 	bl	8009bb0 <__multadd>
 8009808:	9b02      	ldr	r3, [sp, #8]
 800980a:	2b00      	cmp	r3, #0
 800980c:	4606      	mov	r6, r0
 800980e:	dc4f      	bgt.n	80098b0 <_dtoa_r+0x948>
 8009810:	9b06      	ldr	r3, [sp, #24]
 8009812:	2b02      	cmp	r3, #2
 8009814:	dd4c      	ble.n	80098b0 <_dtoa_r+0x948>
 8009816:	e011      	b.n	800983c <_dtoa_r+0x8d4>
 8009818:	d0c9      	beq.n	80097ae <_dtoa_r+0x846>
 800981a:	9a05      	ldr	r2, [sp, #20]
 800981c:	331c      	adds	r3, #28
 800981e:	441a      	add	r2, r3
 8009820:	9205      	str	r2, [sp, #20]
 8009822:	441d      	add	r5, r3
 8009824:	4498      	add	r8, r3
 8009826:	e7c2      	b.n	80097ae <_dtoa_r+0x846>
 8009828:	4603      	mov	r3, r0
 800982a:	e7f6      	b.n	800981a <_dtoa_r+0x8b2>
 800982c:	f1b9 0f00 	cmp.w	r9, #0
 8009830:	dc38      	bgt.n	80098a4 <_dtoa_r+0x93c>
 8009832:	9b06      	ldr	r3, [sp, #24]
 8009834:	2b02      	cmp	r3, #2
 8009836:	dd35      	ble.n	80098a4 <_dtoa_r+0x93c>
 8009838:	f8cd 9008 	str.w	r9, [sp, #8]
 800983c:	9b02      	ldr	r3, [sp, #8]
 800983e:	b963      	cbnz	r3, 800985a <_dtoa_r+0x8f2>
 8009840:	4639      	mov	r1, r7
 8009842:	2205      	movs	r2, #5
 8009844:	4620      	mov	r0, r4
 8009846:	f000 f9b3 	bl	8009bb0 <__multadd>
 800984a:	4601      	mov	r1, r0
 800984c:	4607      	mov	r7, r0
 800984e:	9804      	ldr	r0, [sp, #16]
 8009850:	f000 fb78 	bl	8009f44 <__mcmp>
 8009854:	2800      	cmp	r0, #0
 8009856:	f73f adcc 	bgt.w	80093f2 <_dtoa_r+0x48a>
 800985a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800985c:	465d      	mov	r5, fp
 800985e:	ea6f 0a03 	mvn.w	sl, r3
 8009862:	f04f 0900 	mov.w	r9, #0
 8009866:	4639      	mov	r1, r7
 8009868:	4620      	mov	r0, r4
 800986a:	f000 f98a 	bl	8009b82 <_Bfree>
 800986e:	2e00      	cmp	r6, #0
 8009870:	f43f aeb7 	beq.w	80095e2 <_dtoa_r+0x67a>
 8009874:	f1b9 0f00 	cmp.w	r9, #0
 8009878:	d005      	beq.n	8009886 <_dtoa_r+0x91e>
 800987a:	45b1      	cmp	r9, r6
 800987c:	d003      	beq.n	8009886 <_dtoa_r+0x91e>
 800987e:	4649      	mov	r1, r9
 8009880:	4620      	mov	r0, r4
 8009882:	f000 f97e 	bl	8009b82 <_Bfree>
 8009886:	4631      	mov	r1, r6
 8009888:	4620      	mov	r0, r4
 800988a:	f000 f97a 	bl	8009b82 <_Bfree>
 800988e:	e6a8      	b.n	80095e2 <_dtoa_r+0x67a>
 8009890:	2700      	movs	r7, #0
 8009892:	463e      	mov	r6, r7
 8009894:	e7e1      	b.n	800985a <_dtoa_r+0x8f2>
 8009896:	f8dd a020 	ldr.w	sl, [sp, #32]
 800989a:	463e      	mov	r6, r7
 800989c:	e5a9      	b.n	80093f2 <_dtoa_r+0x48a>
 800989e:	bf00      	nop
 80098a0:	40240000 	.word	0x40240000
 80098a4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80098a6:	f8cd 9008 	str.w	r9, [sp, #8]
 80098aa:	2b00      	cmp	r3, #0
 80098ac:	f000 80fa 	beq.w	8009aa4 <_dtoa_r+0xb3c>
 80098b0:	2d00      	cmp	r5, #0
 80098b2:	dd05      	ble.n	80098c0 <_dtoa_r+0x958>
 80098b4:	4631      	mov	r1, r6
 80098b6:	462a      	mov	r2, r5
 80098b8:	4620      	mov	r0, r4
 80098ba:	f000 faef 	bl	8009e9c <__lshift>
 80098be:	4606      	mov	r6, r0
 80098c0:	9b07      	ldr	r3, [sp, #28]
 80098c2:	2b00      	cmp	r3, #0
 80098c4:	d04c      	beq.n	8009960 <_dtoa_r+0x9f8>
 80098c6:	6871      	ldr	r1, [r6, #4]
 80098c8:	4620      	mov	r0, r4
 80098ca:	f000 f926 	bl	8009b1a <_Balloc>
 80098ce:	6932      	ldr	r2, [r6, #16]
 80098d0:	3202      	adds	r2, #2
 80098d2:	4605      	mov	r5, r0
 80098d4:	0092      	lsls	r2, r2, #2
 80098d6:	f106 010c 	add.w	r1, r6, #12
 80098da:	300c      	adds	r0, #12
 80098dc:	f000 f912 	bl	8009b04 <memcpy>
 80098e0:	2201      	movs	r2, #1
 80098e2:	4629      	mov	r1, r5
 80098e4:	4620      	mov	r0, r4
 80098e6:	f000 fad9 	bl	8009e9c <__lshift>
 80098ea:	9b00      	ldr	r3, [sp, #0]
 80098ec:	f8cd b014 	str.w	fp, [sp, #20]
 80098f0:	f003 0301 	and.w	r3, r3, #1
 80098f4:	46b1      	mov	r9, r6
 80098f6:	9307      	str	r3, [sp, #28]
 80098f8:	4606      	mov	r6, r0
 80098fa:	4639      	mov	r1, r7
 80098fc:	9804      	ldr	r0, [sp, #16]
 80098fe:	f7ff faa6 	bl	8008e4e <quorem>
 8009902:	4649      	mov	r1, r9
 8009904:	4605      	mov	r5, r0
 8009906:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800990a:	9804      	ldr	r0, [sp, #16]
 800990c:	f000 fb1a 	bl	8009f44 <__mcmp>
 8009910:	4632      	mov	r2, r6
 8009912:	9000      	str	r0, [sp, #0]
 8009914:	4639      	mov	r1, r7
 8009916:	4620      	mov	r0, r4
 8009918:	f000 fb2e 	bl	8009f78 <__mdiff>
 800991c:	68c3      	ldr	r3, [r0, #12]
 800991e:	4602      	mov	r2, r0
 8009920:	bb03      	cbnz	r3, 8009964 <_dtoa_r+0x9fc>
 8009922:	4601      	mov	r1, r0
 8009924:	9008      	str	r0, [sp, #32]
 8009926:	9804      	ldr	r0, [sp, #16]
 8009928:	f000 fb0c 	bl	8009f44 <__mcmp>
 800992c:	9a08      	ldr	r2, [sp, #32]
 800992e:	4603      	mov	r3, r0
 8009930:	4611      	mov	r1, r2
 8009932:	4620      	mov	r0, r4
 8009934:	9308      	str	r3, [sp, #32]
 8009936:	f000 f924 	bl	8009b82 <_Bfree>
 800993a:	9b08      	ldr	r3, [sp, #32]
 800993c:	b9a3      	cbnz	r3, 8009968 <_dtoa_r+0xa00>
 800993e:	9a06      	ldr	r2, [sp, #24]
 8009940:	b992      	cbnz	r2, 8009968 <_dtoa_r+0xa00>
 8009942:	9a07      	ldr	r2, [sp, #28]
 8009944:	b982      	cbnz	r2, 8009968 <_dtoa_r+0xa00>
 8009946:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800994a:	d029      	beq.n	80099a0 <_dtoa_r+0xa38>
 800994c:	9b00      	ldr	r3, [sp, #0]
 800994e:	2b00      	cmp	r3, #0
 8009950:	dd01      	ble.n	8009956 <_dtoa_r+0x9ee>
 8009952:	f105 0831 	add.w	r8, r5, #49	; 0x31
 8009956:	9b05      	ldr	r3, [sp, #20]
 8009958:	1c5d      	adds	r5, r3, #1
 800995a:	f883 8000 	strb.w	r8, [r3]
 800995e:	e782      	b.n	8009866 <_dtoa_r+0x8fe>
 8009960:	4630      	mov	r0, r6
 8009962:	e7c2      	b.n	80098ea <_dtoa_r+0x982>
 8009964:	2301      	movs	r3, #1
 8009966:	e7e3      	b.n	8009930 <_dtoa_r+0x9c8>
 8009968:	9a00      	ldr	r2, [sp, #0]
 800996a:	2a00      	cmp	r2, #0
 800996c:	db04      	blt.n	8009978 <_dtoa_r+0xa10>
 800996e:	d125      	bne.n	80099bc <_dtoa_r+0xa54>
 8009970:	9a06      	ldr	r2, [sp, #24]
 8009972:	bb1a      	cbnz	r2, 80099bc <_dtoa_r+0xa54>
 8009974:	9a07      	ldr	r2, [sp, #28]
 8009976:	bb0a      	cbnz	r2, 80099bc <_dtoa_r+0xa54>
 8009978:	2b00      	cmp	r3, #0
 800997a:	ddec      	ble.n	8009956 <_dtoa_r+0x9ee>
 800997c:	2201      	movs	r2, #1
 800997e:	9904      	ldr	r1, [sp, #16]
 8009980:	4620      	mov	r0, r4
 8009982:	f000 fa8b 	bl	8009e9c <__lshift>
 8009986:	4639      	mov	r1, r7
 8009988:	9004      	str	r0, [sp, #16]
 800998a:	f000 fadb 	bl	8009f44 <__mcmp>
 800998e:	2800      	cmp	r0, #0
 8009990:	dc03      	bgt.n	800999a <_dtoa_r+0xa32>
 8009992:	d1e0      	bne.n	8009956 <_dtoa_r+0x9ee>
 8009994:	f018 0f01 	tst.w	r8, #1
 8009998:	d0dd      	beq.n	8009956 <_dtoa_r+0x9ee>
 800999a:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800999e:	d1d8      	bne.n	8009952 <_dtoa_r+0x9ea>
 80099a0:	9b05      	ldr	r3, [sp, #20]
 80099a2:	9a05      	ldr	r2, [sp, #20]
 80099a4:	1c5d      	adds	r5, r3, #1
 80099a6:	2339      	movs	r3, #57	; 0x39
 80099a8:	7013      	strb	r3, [r2, #0]
 80099aa:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80099ae:	2b39      	cmp	r3, #57	; 0x39
 80099b0:	f105 32ff 	add.w	r2, r5, #4294967295
 80099b4:	d04f      	beq.n	8009a56 <_dtoa_r+0xaee>
 80099b6:	3301      	adds	r3, #1
 80099b8:	7013      	strb	r3, [r2, #0]
 80099ba:	e754      	b.n	8009866 <_dtoa_r+0x8fe>
 80099bc:	9a05      	ldr	r2, [sp, #20]
 80099be:	2b00      	cmp	r3, #0
 80099c0:	f102 0501 	add.w	r5, r2, #1
 80099c4:	dd06      	ble.n	80099d4 <_dtoa_r+0xa6c>
 80099c6:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80099ca:	d0e9      	beq.n	80099a0 <_dtoa_r+0xa38>
 80099cc:	f108 0801 	add.w	r8, r8, #1
 80099d0:	9b05      	ldr	r3, [sp, #20]
 80099d2:	e7c2      	b.n	800995a <_dtoa_r+0x9f2>
 80099d4:	9a02      	ldr	r2, [sp, #8]
 80099d6:	f805 8c01 	strb.w	r8, [r5, #-1]
 80099da:	eba5 030b 	sub.w	r3, r5, fp
 80099de:	4293      	cmp	r3, r2
 80099e0:	d021      	beq.n	8009a26 <_dtoa_r+0xabe>
 80099e2:	2300      	movs	r3, #0
 80099e4:	220a      	movs	r2, #10
 80099e6:	9904      	ldr	r1, [sp, #16]
 80099e8:	4620      	mov	r0, r4
 80099ea:	f000 f8e1 	bl	8009bb0 <__multadd>
 80099ee:	45b1      	cmp	r9, r6
 80099f0:	9004      	str	r0, [sp, #16]
 80099f2:	f04f 0300 	mov.w	r3, #0
 80099f6:	f04f 020a 	mov.w	r2, #10
 80099fa:	4649      	mov	r1, r9
 80099fc:	4620      	mov	r0, r4
 80099fe:	d105      	bne.n	8009a0c <_dtoa_r+0xaa4>
 8009a00:	f000 f8d6 	bl	8009bb0 <__multadd>
 8009a04:	4681      	mov	r9, r0
 8009a06:	4606      	mov	r6, r0
 8009a08:	9505      	str	r5, [sp, #20]
 8009a0a:	e776      	b.n	80098fa <_dtoa_r+0x992>
 8009a0c:	f000 f8d0 	bl	8009bb0 <__multadd>
 8009a10:	4631      	mov	r1, r6
 8009a12:	4681      	mov	r9, r0
 8009a14:	2300      	movs	r3, #0
 8009a16:	220a      	movs	r2, #10
 8009a18:	4620      	mov	r0, r4
 8009a1a:	f000 f8c9 	bl	8009bb0 <__multadd>
 8009a1e:	4606      	mov	r6, r0
 8009a20:	e7f2      	b.n	8009a08 <_dtoa_r+0xaa0>
 8009a22:	f04f 0900 	mov.w	r9, #0
 8009a26:	2201      	movs	r2, #1
 8009a28:	9904      	ldr	r1, [sp, #16]
 8009a2a:	4620      	mov	r0, r4
 8009a2c:	f000 fa36 	bl	8009e9c <__lshift>
 8009a30:	4639      	mov	r1, r7
 8009a32:	9004      	str	r0, [sp, #16]
 8009a34:	f000 fa86 	bl	8009f44 <__mcmp>
 8009a38:	2800      	cmp	r0, #0
 8009a3a:	dcb6      	bgt.n	80099aa <_dtoa_r+0xa42>
 8009a3c:	d102      	bne.n	8009a44 <_dtoa_r+0xadc>
 8009a3e:	f018 0f01 	tst.w	r8, #1
 8009a42:	d1b2      	bne.n	80099aa <_dtoa_r+0xa42>
 8009a44:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8009a48:	2b30      	cmp	r3, #48	; 0x30
 8009a4a:	f105 32ff 	add.w	r2, r5, #4294967295
 8009a4e:	f47f af0a 	bne.w	8009866 <_dtoa_r+0x8fe>
 8009a52:	4615      	mov	r5, r2
 8009a54:	e7f6      	b.n	8009a44 <_dtoa_r+0xadc>
 8009a56:	4593      	cmp	fp, r2
 8009a58:	d105      	bne.n	8009a66 <_dtoa_r+0xafe>
 8009a5a:	2331      	movs	r3, #49	; 0x31
 8009a5c:	f10a 0a01 	add.w	sl, sl, #1
 8009a60:	f88b 3000 	strb.w	r3, [fp]
 8009a64:	e6ff      	b.n	8009866 <_dtoa_r+0x8fe>
 8009a66:	4615      	mov	r5, r2
 8009a68:	e79f      	b.n	80099aa <_dtoa_r+0xa42>
 8009a6a:	f8df b064 	ldr.w	fp, [pc, #100]	; 8009ad0 <_dtoa_r+0xb68>
 8009a6e:	e007      	b.n	8009a80 <_dtoa_r+0xb18>
 8009a70:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009a72:	f8df b060 	ldr.w	fp, [pc, #96]	; 8009ad4 <_dtoa_r+0xb6c>
 8009a76:	b11b      	cbz	r3, 8009a80 <_dtoa_r+0xb18>
 8009a78:	f10b 0308 	add.w	r3, fp, #8
 8009a7c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8009a7e:	6013      	str	r3, [r2, #0]
 8009a80:	4658      	mov	r0, fp
 8009a82:	b017      	add	sp, #92	; 0x5c
 8009a84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009a88:	9b06      	ldr	r3, [sp, #24]
 8009a8a:	2b01      	cmp	r3, #1
 8009a8c:	f77f ae35 	ble.w	80096fa <_dtoa_r+0x792>
 8009a90:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009a92:	9307      	str	r3, [sp, #28]
 8009a94:	e649      	b.n	800972a <_dtoa_r+0x7c2>
 8009a96:	9b02      	ldr	r3, [sp, #8]
 8009a98:	2b00      	cmp	r3, #0
 8009a9a:	dc03      	bgt.n	8009aa4 <_dtoa_r+0xb3c>
 8009a9c:	9b06      	ldr	r3, [sp, #24]
 8009a9e:	2b02      	cmp	r3, #2
 8009aa0:	f73f aecc 	bgt.w	800983c <_dtoa_r+0x8d4>
 8009aa4:	465d      	mov	r5, fp
 8009aa6:	4639      	mov	r1, r7
 8009aa8:	9804      	ldr	r0, [sp, #16]
 8009aaa:	f7ff f9d0 	bl	8008e4e <quorem>
 8009aae:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8009ab2:	f805 8b01 	strb.w	r8, [r5], #1
 8009ab6:	9a02      	ldr	r2, [sp, #8]
 8009ab8:	eba5 030b 	sub.w	r3, r5, fp
 8009abc:	429a      	cmp	r2, r3
 8009abe:	ddb0      	ble.n	8009a22 <_dtoa_r+0xaba>
 8009ac0:	2300      	movs	r3, #0
 8009ac2:	220a      	movs	r2, #10
 8009ac4:	9904      	ldr	r1, [sp, #16]
 8009ac6:	4620      	mov	r0, r4
 8009ac8:	f000 f872 	bl	8009bb0 <__multadd>
 8009acc:	9004      	str	r0, [sp, #16]
 8009ace:	e7ea      	b.n	8009aa6 <_dtoa_r+0xb3e>
 8009ad0:	0800a298 	.word	0x0800a298
 8009ad4:	0800a29a 	.word	0x0800a29a

08009ad8 <_localeconv_r>:
 8009ad8:	4b04      	ldr	r3, [pc, #16]	; (8009aec <_localeconv_r+0x14>)
 8009ada:	681b      	ldr	r3, [r3, #0]
 8009adc:	6a18      	ldr	r0, [r3, #32]
 8009ade:	4b04      	ldr	r3, [pc, #16]	; (8009af0 <_localeconv_r+0x18>)
 8009ae0:	2800      	cmp	r0, #0
 8009ae2:	bf08      	it	eq
 8009ae4:	4618      	moveq	r0, r3
 8009ae6:	30f0      	adds	r0, #240	; 0xf0
 8009ae8:	4770      	bx	lr
 8009aea:	bf00      	nop
 8009aec:	20000564 	.word	0x20000564
 8009af0:	200005c8 	.word	0x200005c8

08009af4 <malloc>:
 8009af4:	4b02      	ldr	r3, [pc, #8]	; (8009b00 <malloc+0xc>)
 8009af6:	4601      	mov	r1, r0
 8009af8:	6818      	ldr	r0, [r3, #0]
 8009afa:	f000 baf7 	b.w	800a0ec <_malloc_r>
 8009afe:	bf00      	nop
 8009b00:	20000564 	.word	0x20000564

08009b04 <memcpy>:
 8009b04:	b510      	push	{r4, lr}
 8009b06:	1e43      	subs	r3, r0, #1
 8009b08:	440a      	add	r2, r1
 8009b0a:	4291      	cmp	r1, r2
 8009b0c:	d100      	bne.n	8009b10 <memcpy+0xc>
 8009b0e:	bd10      	pop	{r4, pc}
 8009b10:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009b14:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009b18:	e7f7      	b.n	8009b0a <memcpy+0x6>

08009b1a <_Balloc>:
 8009b1a:	b570      	push	{r4, r5, r6, lr}
 8009b1c:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8009b1e:	4604      	mov	r4, r0
 8009b20:	460e      	mov	r6, r1
 8009b22:	b93d      	cbnz	r5, 8009b34 <_Balloc+0x1a>
 8009b24:	2010      	movs	r0, #16
 8009b26:	f7ff ffe5 	bl	8009af4 <malloc>
 8009b2a:	6260      	str	r0, [r4, #36]	; 0x24
 8009b2c:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8009b30:	6005      	str	r5, [r0, #0]
 8009b32:	60c5      	str	r5, [r0, #12]
 8009b34:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8009b36:	68eb      	ldr	r3, [r5, #12]
 8009b38:	b183      	cbz	r3, 8009b5c <_Balloc+0x42>
 8009b3a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009b3c:	68db      	ldr	r3, [r3, #12]
 8009b3e:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8009b42:	b9b8      	cbnz	r0, 8009b74 <_Balloc+0x5a>
 8009b44:	2101      	movs	r1, #1
 8009b46:	fa01 f506 	lsl.w	r5, r1, r6
 8009b4a:	1d6a      	adds	r2, r5, #5
 8009b4c:	0092      	lsls	r2, r2, #2
 8009b4e:	4620      	mov	r0, r4
 8009b50:	f000 fabe 	bl	800a0d0 <_calloc_r>
 8009b54:	b160      	cbz	r0, 8009b70 <_Balloc+0x56>
 8009b56:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8009b5a:	e00e      	b.n	8009b7a <_Balloc+0x60>
 8009b5c:	2221      	movs	r2, #33	; 0x21
 8009b5e:	2104      	movs	r1, #4
 8009b60:	4620      	mov	r0, r4
 8009b62:	f000 fab5 	bl	800a0d0 <_calloc_r>
 8009b66:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009b68:	60e8      	str	r0, [r5, #12]
 8009b6a:	68db      	ldr	r3, [r3, #12]
 8009b6c:	2b00      	cmp	r3, #0
 8009b6e:	d1e4      	bne.n	8009b3a <_Balloc+0x20>
 8009b70:	2000      	movs	r0, #0
 8009b72:	bd70      	pop	{r4, r5, r6, pc}
 8009b74:	6802      	ldr	r2, [r0, #0]
 8009b76:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8009b7a:	2300      	movs	r3, #0
 8009b7c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009b80:	e7f7      	b.n	8009b72 <_Balloc+0x58>

08009b82 <_Bfree>:
 8009b82:	b570      	push	{r4, r5, r6, lr}
 8009b84:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8009b86:	4606      	mov	r6, r0
 8009b88:	460d      	mov	r5, r1
 8009b8a:	b93c      	cbnz	r4, 8009b9c <_Bfree+0x1a>
 8009b8c:	2010      	movs	r0, #16
 8009b8e:	f7ff ffb1 	bl	8009af4 <malloc>
 8009b92:	6270      	str	r0, [r6, #36]	; 0x24
 8009b94:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009b98:	6004      	str	r4, [r0, #0]
 8009b9a:	60c4      	str	r4, [r0, #12]
 8009b9c:	b13d      	cbz	r5, 8009bae <_Bfree+0x2c>
 8009b9e:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8009ba0:	686a      	ldr	r2, [r5, #4]
 8009ba2:	68db      	ldr	r3, [r3, #12]
 8009ba4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009ba8:	6029      	str	r1, [r5, #0]
 8009baa:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8009bae:	bd70      	pop	{r4, r5, r6, pc}

08009bb0 <__multadd>:
 8009bb0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009bb4:	690d      	ldr	r5, [r1, #16]
 8009bb6:	461f      	mov	r7, r3
 8009bb8:	4606      	mov	r6, r0
 8009bba:	460c      	mov	r4, r1
 8009bbc:	f101 0c14 	add.w	ip, r1, #20
 8009bc0:	2300      	movs	r3, #0
 8009bc2:	f8dc 0000 	ldr.w	r0, [ip]
 8009bc6:	b281      	uxth	r1, r0
 8009bc8:	fb02 7101 	mla	r1, r2, r1, r7
 8009bcc:	0c0f      	lsrs	r7, r1, #16
 8009bce:	0c00      	lsrs	r0, r0, #16
 8009bd0:	fb02 7000 	mla	r0, r2, r0, r7
 8009bd4:	b289      	uxth	r1, r1
 8009bd6:	3301      	adds	r3, #1
 8009bd8:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8009bdc:	429d      	cmp	r5, r3
 8009bde:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8009be2:	f84c 1b04 	str.w	r1, [ip], #4
 8009be6:	dcec      	bgt.n	8009bc2 <__multadd+0x12>
 8009be8:	b1d7      	cbz	r7, 8009c20 <__multadd+0x70>
 8009bea:	68a3      	ldr	r3, [r4, #8]
 8009bec:	42ab      	cmp	r3, r5
 8009bee:	dc12      	bgt.n	8009c16 <__multadd+0x66>
 8009bf0:	6861      	ldr	r1, [r4, #4]
 8009bf2:	4630      	mov	r0, r6
 8009bf4:	3101      	adds	r1, #1
 8009bf6:	f7ff ff90 	bl	8009b1a <_Balloc>
 8009bfa:	6922      	ldr	r2, [r4, #16]
 8009bfc:	3202      	adds	r2, #2
 8009bfe:	f104 010c 	add.w	r1, r4, #12
 8009c02:	4680      	mov	r8, r0
 8009c04:	0092      	lsls	r2, r2, #2
 8009c06:	300c      	adds	r0, #12
 8009c08:	f7ff ff7c 	bl	8009b04 <memcpy>
 8009c0c:	4621      	mov	r1, r4
 8009c0e:	4630      	mov	r0, r6
 8009c10:	f7ff ffb7 	bl	8009b82 <_Bfree>
 8009c14:	4644      	mov	r4, r8
 8009c16:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009c1a:	3501      	adds	r5, #1
 8009c1c:	615f      	str	r7, [r3, #20]
 8009c1e:	6125      	str	r5, [r4, #16]
 8009c20:	4620      	mov	r0, r4
 8009c22:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08009c26 <__hi0bits>:
 8009c26:	0c02      	lsrs	r2, r0, #16
 8009c28:	0412      	lsls	r2, r2, #16
 8009c2a:	4603      	mov	r3, r0
 8009c2c:	b9b2      	cbnz	r2, 8009c5c <__hi0bits+0x36>
 8009c2e:	0403      	lsls	r3, r0, #16
 8009c30:	2010      	movs	r0, #16
 8009c32:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8009c36:	bf04      	itt	eq
 8009c38:	021b      	lsleq	r3, r3, #8
 8009c3a:	3008      	addeq	r0, #8
 8009c3c:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8009c40:	bf04      	itt	eq
 8009c42:	011b      	lsleq	r3, r3, #4
 8009c44:	3004      	addeq	r0, #4
 8009c46:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8009c4a:	bf04      	itt	eq
 8009c4c:	009b      	lsleq	r3, r3, #2
 8009c4e:	3002      	addeq	r0, #2
 8009c50:	2b00      	cmp	r3, #0
 8009c52:	db06      	blt.n	8009c62 <__hi0bits+0x3c>
 8009c54:	005b      	lsls	r3, r3, #1
 8009c56:	d503      	bpl.n	8009c60 <__hi0bits+0x3a>
 8009c58:	3001      	adds	r0, #1
 8009c5a:	4770      	bx	lr
 8009c5c:	2000      	movs	r0, #0
 8009c5e:	e7e8      	b.n	8009c32 <__hi0bits+0xc>
 8009c60:	2020      	movs	r0, #32
 8009c62:	4770      	bx	lr

08009c64 <__lo0bits>:
 8009c64:	6803      	ldr	r3, [r0, #0]
 8009c66:	f013 0207 	ands.w	r2, r3, #7
 8009c6a:	4601      	mov	r1, r0
 8009c6c:	d00b      	beq.n	8009c86 <__lo0bits+0x22>
 8009c6e:	07da      	lsls	r2, r3, #31
 8009c70:	d423      	bmi.n	8009cba <__lo0bits+0x56>
 8009c72:	0798      	lsls	r0, r3, #30
 8009c74:	bf49      	itett	mi
 8009c76:	085b      	lsrmi	r3, r3, #1
 8009c78:	089b      	lsrpl	r3, r3, #2
 8009c7a:	2001      	movmi	r0, #1
 8009c7c:	600b      	strmi	r3, [r1, #0]
 8009c7e:	bf5c      	itt	pl
 8009c80:	600b      	strpl	r3, [r1, #0]
 8009c82:	2002      	movpl	r0, #2
 8009c84:	4770      	bx	lr
 8009c86:	b298      	uxth	r0, r3
 8009c88:	b9a8      	cbnz	r0, 8009cb6 <__lo0bits+0x52>
 8009c8a:	0c1b      	lsrs	r3, r3, #16
 8009c8c:	2010      	movs	r0, #16
 8009c8e:	f013 0fff 	tst.w	r3, #255	; 0xff
 8009c92:	bf04      	itt	eq
 8009c94:	0a1b      	lsreq	r3, r3, #8
 8009c96:	3008      	addeq	r0, #8
 8009c98:	071a      	lsls	r2, r3, #28
 8009c9a:	bf04      	itt	eq
 8009c9c:	091b      	lsreq	r3, r3, #4
 8009c9e:	3004      	addeq	r0, #4
 8009ca0:	079a      	lsls	r2, r3, #30
 8009ca2:	bf04      	itt	eq
 8009ca4:	089b      	lsreq	r3, r3, #2
 8009ca6:	3002      	addeq	r0, #2
 8009ca8:	07da      	lsls	r2, r3, #31
 8009caa:	d402      	bmi.n	8009cb2 <__lo0bits+0x4e>
 8009cac:	085b      	lsrs	r3, r3, #1
 8009cae:	d006      	beq.n	8009cbe <__lo0bits+0x5a>
 8009cb0:	3001      	adds	r0, #1
 8009cb2:	600b      	str	r3, [r1, #0]
 8009cb4:	4770      	bx	lr
 8009cb6:	4610      	mov	r0, r2
 8009cb8:	e7e9      	b.n	8009c8e <__lo0bits+0x2a>
 8009cba:	2000      	movs	r0, #0
 8009cbc:	4770      	bx	lr
 8009cbe:	2020      	movs	r0, #32
 8009cc0:	4770      	bx	lr

08009cc2 <__i2b>:
 8009cc2:	b510      	push	{r4, lr}
 8009cc4:	460c      	mov	r4, r1
 8009cc6:	2101      	movs	r1, #1
 8009cc8:	f7ff ff27 	bl	8009b1a <_Balloc>
 8009ccc:	2201      	movs	r2, #1
 8009cce:	6144      	str	r4, [r0, #20]
 8009cd0:	6102      	str	r2, [r0, #16]
 8009cd2:	bd10      	pop	{r4, pc}

08009cd4 <__multiply>:
 8009cd4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009cd8:	4614      	mov	r4, r2
 8009cda:	690a      	ldr	r2, [r1, #16]
 8009cdc:	6923      	ldr	r3, [r4, #16]
 8009cde:	429a      	cmp	r2, r3
 8009ce0:	bfb8      	it	lt
 8009ce2:	460b      	movlt	r3, r1
 8009ce4:	4688      	mov	r8, r1
 8009ce6:	bfbc      	itt	lt
 8009ce8:	46a0      	movlt	r8, r4
 8009cea:	461c      	movlt	r4, r3
 8009cec:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8009cf0:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8009cf4:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8009cf8:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8009cfc:	eb07 0609 	add.w	r6, r7, r9
 8009d00:	42b3      	cmp	r3, r6
 8009d02:	bfb8      	it	lt
 8009d04:	3101      	addlt	r1, #1
 8009d06:	f7ff ff08 	bl	8009b1a <_Balloc>
 8009d0a:	f100 0514 	add.w	r5, r0, #20
 8009d0e:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8009d12:	462b      	mov	r3, r5
 8009d14:	2200      	movs	r2, #0
 8009d16:	4573      	cmp	r3, lr
 8009d18:	d316      	bcc.n	8009d48 <__multiply+0x74>
 8009d1a:	f104 0214 	add.w	r2, r4, #20
 8009d1e:	f108 0114 	add.w	r1, r8, #20
 8009d22:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8009d26:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8009d2a:	9300      	str	r3, [sp, #0]
 8009d2c:	9b00      	ldr	r3, [sp, #0]
 8009d2e:	9201      	str	r2, [sp, #4]
 8009d30:	4293      	cmp	r3, r2
 8009d32:	d80c      	bhi.n	8009d4e <__multiply+0x7a>
 8009d34:	2e00      	cmp	r6, #0
 8009d36:	dd03      	ble.n	8009d40 <__multiply+0x6c>
 8009d38:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8009d3c:	2b00      	cmp	r3, #0
 8009d3e:	d05d      	beq.n	8009dfc <__multiply+0x128>
 8009d40:	6106      	str	r6, [r0, #16]
 8009d42:	b003      	add	sp, #12
 8009d44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009d48:	f843 2b04 	str.w	r2, [r3], #4
 8009d4c:	e7e3      	b.n	8009d16 <__multiply+0x42>
 8009d4e:	f8b2 b000 	ldrh.w	fp, [r2]
 8009d52:	f1bb 0f00 	cmp.w	fp, #0
 8009d56:	d023      	beq.n	8009da0 <__multiply+0xcc>
 8009d58:	4689      	mov	r9, r1
 8009d5a:	46ac      	mov	ip, r5
 8009d5c:	f04f 0800 	mov.w	r8, #0
 8009d60:	f859 4b04 	ldr.w	r4, [r9], #4
 8009d64:	f8dc a000 	ldr.w	sl, [ip]
 8009d68:	b2a3      	uxth	r3, r4
 8009d6a:	fa1f fa8a 	uxth.w	sl, sl
 8009d6e:	fb0b a303 	mla	r3, fp, r3, sl
 8009d72:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8009d76:	f8dc 4000 	ldr.w	r4, [ip]
 8009d7a:	4443      	add	r3, r8
 8009d7c:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8009d80:	fb0b 840a 	mla	r4, fp, sl, r8
 8009d84:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8009d88:	46e2      	mov	sl, ip
 8009d8a:	b29b      	uxth	r3, r3
 8009d8c:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8009d90:	454f      	cmp	r7, r9
 8009d92:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8009d96:	f84a 3b04 	str.w	r3, [sl], #4
 8009d9a:	d82b      	bhi.n	8009df4 <__multiply+0x120>
 8009d9c:	f8cc 8004 	str.w	r8, [ip, #4]
 8009da0:	9b01      	ldr	r3, [sp, #4]
 8009da2:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8009da6:	3204      	adds	r2, #4
 8009da8:	f1ba 0f00 	cmp.w	sl, #0
 8009dac:	d020      	beq.n	8009df0 <__multiply+0x11c>
 8009dae:	682b      	ldr	r3, [r5, #0]
 8009db0:	4689      	mov	r9, r1
 8009db2:	46a8      	mov	r8, r5
 8009db4:	f04f 0b00 	mov.w	fp, #0
 8009db8:	f8b9 c000 	ldrh.w	ip, [r9]
 8009dbc:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8009dc0:	fb0a 440c 	mla	r4, sl, ip, r4
 8009dc4:	445c      	add	r4, fp
 8009dc6:	46c4      	mov	ip, r8
 8009dc8:	b29b      	uxth	r3, r3
 8009dca:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8009dce:	f84c 3b04 	str.w	r3, [ip], #4
 8009dd2:	f859 3b04 	ldr.w	r3, [r9], #4
 8009dd6:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8009dda:	0c1b      	lsrs	r3, r3, #16
 8009ddc:	fb0a b303 	mla	r3, sl, r3, fp
 8009de0:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8009de4:	454f      	cmp	r7, r9
 8009de6:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8009dea:	d805      	bhi.n	8009df8 <__multiply+0x124>
 8009dec:	f8c8 3004 	str.w	r3, [r8, #4]
 8009df0:	3504      	adds	r5, #4
 8009df2:	e79b      	b.n	8009d2c <__multiply+0x58>
 8009df4:	46d4      	mov	ip, sl
 8009df6:	e7b3      	b.n	8009d60 <__multiply+0x8c>
 8009df8:	46e0      	mov	r8, ip
 8009dfa:	e7dd      	b.n	8009db8 <__multiply+0xe4>
 8009dfc:	3e01      	subs	r6, #1
 8009dfe:	e799      	b.n	8009d34 <__multiply+0x60>

08009e00 <__pow5mult>:
 8009e00:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009e04:	4615      	mov	r5, r2
 8009e06:	f012 0203 	ands.w	r2, r2, #3
 8009e0a:	4606      	mov	r6, r0
 8009e0c:	460f      	mov	r7, r1
 8009e0e:	d007      	beq.n	8009e20 <__pow5mult+0x20>
 8009e10:	3a01      	subs	r2, #1
 8009e12:	4c21      	ldr	r4, [pc, #132]	; (8009e98 <__pow5mult+0x98>)
 8009e14:	2300      	movs	r3, #0
 8009e16:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009e1a:	f7ff fec9 	bl	8009bb0 <__multadd>
 8009e1e:	4607      	mov	r7, r0
 8009e20:	10ad      	asrs	r5, r5, #2
 8009e22:	d035      	beq.n	8009e90 <__pow5mult+0x90>
 8009e24:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8009e26:	b93c      	cbnz	r4, 8009e38 <__pow5mult+0x38>
 8009e28:	2010      	movs	r0, #16
 8009e2a:	f7ff fe63 	bl	8009af4 <malloc>
 8009e2e:	6270      	str	r0, [r6, #36]	; 0x24
 8009e30:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009e34:	6004      	str	r4, [r0, #0]
 8009e36:	60c4      	str	r4, [r0, #12]
 8009e38:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8009e3c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009e40:	b94c      	cbnz	r4, 8009e56 <__pow5mult+0x56>
 8009e42:	f240 2171 	movw	r1, #625	; 0x271
 8009e46:	4630      	mov	r0, r6
 8009e48:	f7ff ff3b 	bl	8009cc2 <__i2b>
 8009e4c:	2300      	movs	r3, #0
 8009e4e:	f8c8 0008 	str.w	r0, [r8, #8]
 8009e52:	4604      	mov	r4, r0
 8009e54:	6003      	str	r3, [r0, #0]
 8009e56:	f04f 0800 	mov.w	r8, #0
 8009e5a:	07eb      	lsls	r3, r5, #31
 8009e5c:	d50a      	bpl.n	8009e74 <__pow5mult+0x74>
 8009e5e:	4639      	mov	r1, r7
 8009e60:	4622      	mov	r2, r4
 8009e62:	4630      	mov	r0, r6
 8009e64:	f7ff ff36 	bl	8009cd4 <__multiply>
 8009e68:	4639      	mov	r1, r7
 8009e6a:	4681      	mov	r9, r0
 8009e6c:	4630      	mov	r0, r6
 8009e6e:	f7ff fe88 	bl	8009b82 <_Bfree>
 8009e72:	464f      	mov	r7, r9
 8009e74:	106d      	asrs	r5, r5, #1
 8009e76:	d00b      	beq.n	8009e90 <__pow5mult+0x90>
 8009e78:	6820      	ldr	r0, [r4, #0]
 8009e7a:	b938      	cbnz	r0, 8009e8c <__pow5mult+0x8c>
 8009e7c:	4622      	mov	r2, r4
 8009e7e:	4621      	mov	r1, r4
 8009e80:	4630      	mov	r0, r6
 8009e82:	f7ff ff27 	bl	8009cd4 <__multiply>
 8009e86:	6020      	str	r0, [r4, #0]
 8009e88:	f8c0 8000 	str.w	r8, [r0]
 8009e8c:	4604      	mov	r4, r0
 8009e8e:	e7e4      	b.n	8009e5a <__pow5mult+0x5a>
 8009e90:	4638      	mov	r0, r7
 8009e92:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009e96:	bf00      	nop
 8009e98:	0800a398 	.word	0x0800a398

08009e9c <__lshift>:
 8009e9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009ea0:	460c      	mov	r4, r1
 8009ea2:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009ea6:	6923      	ldr	r3, [r4, #16]
 8009ea8:	6849      	ldr	r1, [r1, #4]
 8009eaa:	eb0a 0903 	add.w	r9, sl, r3
 8009eae:	68a3      	ldr	r3, [r4, #8]
 8009eb0:	4607      	mov	r7, r0
 8009eb2:	4616      	mov	r6, r2
 8009eb4:	f109 0501 	add.w	r5, r9, #1
 8009eb8:	42ab      	cmp	r3, r5
 8009eba:	db32      	blt.n	8009f22 <__lshift+0x86>
 8009ebc:	4638      	mov	r0, r7
 8009ebe:	f7ff fe2c 	bl	8009b1a <_Balloc>
 8009ec2:	2300      	movs	r3, #0
 8009ec4:	4680      	mov	r8, r0
 8009ec6:	f100 0114 	add.w	r1, r0, #20
 8009eca:	461a      	mov	r2, r3
 8009ecc:	4553      	cmp	r3, sl
 8009ece:	db2b      	blt.n	8009f28 <__lshift+0x8c>
 8009ed0:	6920      	ldr	r0, [r4, #16]
 8009ed2:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009ed6:	f104 0314 	add.w	r3, r4, #20
 8009eda:	f016 021f 	ands.w	r2, r6, #31
 8009ede:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009ee2:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8009ee6:	d025      	beq.n	8009f34 <__lshift+0x98>
 8009ee8:	f1c2 0e20 	rsb	lr, r2, #32
 8009eec:	2000      	movs	r0, #0
 8009eee:	681e      	ldr	r6, [r3, #0]
 8009ef0:	468a      	mov	sl, r1
 8009ef2:	4096      	lsls	r6, r2
 8009ef4:	4330      	orrs	r0, r6
 8009ef6:	f84a 0b04 	str.w	r0, [sl], #4
 8009efa:	f853 0b04 	ldr.w	r0, [r3], #4
 8009efe:	459c      	cmp	ip, r3
 8009f00:	fa20 f00e 	lsr.w	r0, r0, lr
 8009f04:	d814      	bhi.n	8009f30 <__lshift+0x94>
 8009f06:	6048      	str	r0, [r1, #4]
 8009f08:	b108      	cbz	r0, 8009f0e <__lshift+0x72>
 8009f0a:	f109 0502 	add.w	r5, r9, #2
 8009f0e:	3d01      	subs	r5, #1
 8009f10:	4638      	mov	r0, r7
 8009f12:	f8c8 5010 	str.w	r5, [r8, #16]
 8009f16:	4621      	mov	r1, r4
 8009f18:	f7ff fe33 	bl	8009b82 <_Bfree>
 8009f1c:	4640      	mov	r0, r8
 8009f1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009f22:	3101      	adds	r1, #1
 8009f24:	005b      	lsls	r3, r3, #1
 8009f26:	e7c7      	b.n	8009eb8 <__lshift+0x1c>
 8009f28:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8009f2c:	3301      	adds	r3, #1
 8009f2e:	e7cd      	b.n	8009ecc <__lshift+0x30>
 8009f30:	4651      	mov	r1, sl
 8009f32:	e7dc      	b.n	8009eee <__lshift+0x52>
 8009f34:	3904      	subs	r1, #4
 8009f36:	f853 2b04 	ldr.w	r2, [r3], #4
 8009f3a:	f841 2f04 	str.w	r2, [r1, #4]!
 8009f3e:	459c      	cmp	ip, r3
 8009f40:	d8f9      	bhi.n	8009f36 <__lshift+0x9a>
 8009f42:	e7e4      	b.n	8009f0e <__lshift+0x72>

08009f44 <__mcmp>:
 8009f44:	6903      	ldr	r3, [r0, #16]
 8009f46:	690a      	ldr	r2, [r1, #16]
 8009f48:	1a9b      	subs	r3, r3, r2
 8009f4a:	b530      	push	{r4, r5, lr}
 8009f4c:	d10c      	bne.n	8009f68 <__mcmp+0x24>
 8009f4e:	0092      	lsls	r2, r2, #2
 8009f50:	3014      	adds	r0, #20
 8009f52:	3114      	adds	r1, #20
 8009f54:	1884      	adds	r4, r0, r2
 8009f56:	4411      	add	r1, r2
 8009f58:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8009f5c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8009f60:	4295      	cmp	r5, r2
 8009f62:	d003      	beq.n	8009f6c <__mcmp+0x28>
 8009f64:	d305      	bcc.n	8009f72 <__mcmp+0x2e>
 8009f66:	2301      	movs	r3, #1
 8009f68:	4618      	mov	r0, r3
 8009f6a:	bd30      	pop	{r4, r5, pc}
 8009f6c:	42a0      	cmp	r0, r4
 8009f6e:	d3f3      	bcc.n	8009f58 <__mcmp+0x14>
 8009f70:	e7fa      	b.n	8009f68 <__mcmp+0x24>
 8009f72:	f04f 33ff 	mov.w	r3, #4294967295
 8009f76:	e7f7      	b.n	8009f68 <__mcmp+0x24>

08009f78 <__mdiff>:
 8009f78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009f7c:	460d      	mov	r5, r1
 8009f7e:	4607      	mov	r7, r0
 8009f80:	4611      	mov	r1, r2
 8009f82:	4628      	mov	r0, r5
 8009f84:	4614      	mov	r4, r2
 8009f86:	f7ff ffdd 	bl	8009f44 <__mcmp>
 8009f8a:	1e06      	subs	r6, r0, #0
 8009f8c:	d108      	bne.n	8009fa0 <__mdiff+0x28>
 8009f8e:	4631      	mov	r1, r6
 8009f90:	4638      	mov	r0, r7
 8009f92:	f7ff fdc2 	bl	8009b1a <_Balloc>
 8009f96:	2301      	movs	r3, #1
 8009f98:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8009f9c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009fa0:	bfa4      	itt	ge
 8009fa2:	4623      	movge	r3, r4
 8009fa4:	462c      	movge	r4, r5
 8009fa6:	4638      	mov	r0, r7
 8009fa8:	6861      	ldr	r1, [r4, #4]
 8009faa:	bfa6      	itte	ge
 8009fac:	461d      	movge	r5, r3
 8009fae:	2600      	movge	r6, #0
 8009fb0:	2601      	movlt	r6, #1
 8009fb2:	f7ff fdb2 	bl	8009b1a <_Balloc>
 8009fb6:	692b      	ldr	r3, [r5, #16]
 8009fb8:	60c6      	str	r6, [r0, #12]
 8009fba:	6926      	ldr	r6, [r4, #16]
 8009fbc:	f105 0914 	add.w	r9, r5, #20
 8009fc0:	f104 0214 	add.w	r2, r4, #20
 8009fc4:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8009fc8:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8009fcc:	f100 0514 	add.w	r5, r0, #20
 8009fd0:	f04f 0e00 	mov.w	lr, #0
 8009fd4:	f852 ab04 	ldr.w	sl, [r2], #4
 8009fd8:	f859 4b04 	ldr.w	r4, [r9], #4
 8009fdc:	fa1e f18a 	uxtah	r1, lr, sl
 8009fe0:	b2a3      	uxth	r3, r4
 8009fe2:	1ac9      	subs	r1, r1, r3
 8009fe4:	0c23      	lsrs	r3, r4, #16
 8009fe6:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 8009fea:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8009fee:	b289      	uxth	r1, r1
 8009ff0:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8009ff4:	45c8      	cmp	r8, r9
 8009ff6:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8009ffa:	4694      	mov	ip, r2
 8009ffc:	f845 3b04 	str.w	r3, [r5], #4
 800a000:	d8e8      	bhi.n	8009fd4 <__mdiff+0x5c>
 800a002:	45bc      	cmp	ip, r7
 800a004:	d304      	bcc.n	800a010 <__mdiff+0x98>
 800a006:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 800a00a:	b183      	cbz	r3, 800a02e <__mdiff+0xb6>
 800a00c:	6106      	str	r6, [r0, #16]
 800a00e:	e7c5      	b.n	8009f9c <__mdiff+0x24>
 800a010:	f85c 1b04 	ldr.w	r1, [ip], #4
 800a014:	fa1e f381 	uxtah	r3, lr, r1
 800a018:	141a      	asrs	r2, r3, #16
 800a01a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800a01e:	b29b      	uxth	r3, r3
 800a020:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a024:	ea4f 4e22 	mov.w	lr, r2, asr #16
 800a028:	f845 3b04 	str.w	r3, [r5], #4
 800a02c:	e7e9      	b.n	800a002 <__mdiff+0x8a>
 800a02e:	3e01      	subs	r6, #1
 800a030:	e7e9      	b.n	800a006 <__mdiff+0x8e>

0800a032 <__d2b>:
 800a032:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a036:	460e      	mov	r6, r1
 800a038:	2101      	movs	r1, #1
 800a03a:	ec59 8b10 	vmov	r8, r9, d0
 800a03e:	4615      	mov	r5, r2
 800a040:	f7ff fd6b 	bl	8009b1a <_Balloc>
 800a044:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800a048:	4607      	mov	r7, r0
 800a04a:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a04e:	bb34      	cbnz	r4, 800a09e <__d2b+0x6c>
 800a050:	9301      	str	r3, [sp, #4]
 800a052:	f1b8 0300 	subs.w	r3, r8, #0
 800a056:	d027      	beq.n	800a0a8 <__d2b+0x76>
 800a058:	a802      	add	r0, sp, #8
 800a05a:	f840 3d08 	str.w	r3, [r0, #-8]!
 800a05e:	f7ff fe01 	bl	8009c64 <__lo0bits>
 800a062:	9900      	ldr	r1, [sp, #0]
 800a064:	b1f0      	cbz	r0, 800a0a4 <__d2b+0x72>
 800a066:	9a01      	ldr	r2, [sp, #4]
 800a068:	f1c0 0320 	rsb	r3, r0, #32
 800a06c:	fa02 f303 	lsl.w	r3, r2, r3
 800a070:	430b      	orrs	r3, r1
 800a072:	40c2      	lsrs	r2, r0
 800a074:	617b      	str	r3, [r7, #20]
 800a076:	9201      	str	r2, [sp, #4]
 800a078:	9b01      	ldr	r3, [sp, #4]
 800a07a:	61bb      	str	r3, [r7, #24]
 800a07c:	2b00      	cmp	r3, #0
 800a07e:	bf14      	ite	ne
 800a080:	2102      	movne	r1, #2
 800a082:	2101      	moveq	r1, #1
 800a084:	6139      	str	r1, [r7, #16]
 800a086:	b1c4      	cbz	r4, 800a0ba <__d2b+0x88>
 800a088:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800a08c:	4404      	add	r4, r0
 800a08e:	6034      	str	r4, [r6, #0]
 800a090:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800a094:	6028      	str	r0, [r5, #0]
 800a096:	4638      	mov	r0, r7
 800a098:	b003      	add	sp, #12
 800a09a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a09e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a0a2:	e7d5      	b.n	800a050 <__d2b+0x1e>
 800a0a4:	6179      	str	r1, [r7, #20]
 800a0a6:	e7e7      	b.n	800a078 <__d2b+0x46>
 800a0a8:	a801      	add	r0, sp, #4
 800a0aa:	f7ff fddb 	bl	8009c64 <__lo0bits>
 800a0ae:	9b01      	ldr	r3, [sp, #4]
 800a0b0:	617b      	str	r3, [r7, #20]
 800a0b2:	2101      	movs	r1, #1
 800a0b4:	6139      	str	r1, [r7, #16]
 800a0b6:	3020      	adds	r0, #32
 800a0b8:	e7e5      	b.n	800a086 <__d2b+0x54>
 800a0ba:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 800a0be:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800a0c2:	6030      	str	r0, [r6, #0]
 800a0c4:	6918      	ldr	r0, [r3, #16]
 800a0c6:	f7ff fdae 	bl	8009c26 <__hi0bits>
 800a0ca:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800a0ce:	e7e1      	b.n	800a094 <__d2b+0x62>

0800a0d0 <_calloc_r>:
 800a0d0:	b538      	push	{r3, r4, r5, lr}
 800a0d2:	fb02 f401 	mul.w	r4, r2, r1
 800a0d6:	4621      	mov	r1, r4
 800a0d8:	f000 f808 	bl	800a0ec <_malloc_r>
 800a0dc:	4605      	mov	r5, r0
 800a0de:	b118      	cbz	r0, 800a0e8 <_calloc_r+0x18>
 800a0e0:	4622      	mov	r2, r4
 800a0e2:	2100      	movs	r1, #0
 800a0e4:	f7fe fb62 	bl	80087ac <memset>
 800a0e8:	4628      	mov	r0, r5
 800a0ea:	bd38      	pop	{r3, r4, r5, pc}

0800a0ec <_malloc_r>:
 800a0ec:	b570      	push	{r4, r5, r6, lr}
 800a0ee:	1ccd      	adds	r5, r1, #3
 800a0f0:	f025 0503 	bic.w	r5, r5, #3
 800a0f4:	3508      	adds	r5, #8
 800a0f6:	2d0c      	cmp	r5, #12
 800a0f8:	bf38      	it	cc
 800a0fa:	250c      	movcc	r5, #12
 800a0fc:	2d00      	cmp	r5, #0
 800a0fe:	4606      	mov	r6, r0
 800a100:	db01      	blt.n	800a106 <_malloc_r+0x1a>
 800a102:	42a9      	cmp	r1, r5
 800a104:	d903      	bls.n	800a10e <_malloc_r+0x22>
 800a106:	230c      	movs	r3, #12
 800a108:	6033      	str	r3, [r6, #0]
 800a10a:	2000      	movs	r0, #0
 800a10c:	bd70      	pop	{r4, r5, r6, pc}
 800a10e:	f000 f869 	bl	800a1e4 <__malloc_lock>
 800a112:	4a21      	ldr	r2, [pc, #132]	; (800a198 <_malloc_r+0xac>)
 800a114:	6814      	ldr	r4, [r2, #0]
 800a116:	4621      	mov	r1, r4
 800a118:	b991      	cbnz	r1, 800a140 <_malloc_r+0x54>
 800a11a:	4c20      	ldr	r4, [pc, #128]	; (800a19c <_malloc_r+0xb0>)
 800a11c:	6823      	ldr	r3, [r4, #0]
 800a11e:	b91b      	cbnz	r3, 800a128 <_malloc_r+0x3c>
 800a120:	4630      	mov	r0, r6
 800a122:	f000 f83d 	bl	800a1a0 <_sbrk_r>
 800a126:	6020      	str	r0, [r4, #0]
 800a128:	4629      	mov	r1, r5
 800a12a:	4630      	mov	r0, r6
 800a12c:	f000 f838 	bl	800a1a0 <_sbrk_r>
 800a130:	1c43      	adds	r3, r0, #1
 800a132:	d124      	bne.n	800a17e <_malloc_r+0x92>
 800a134:	230c      	movs	r3, #12
 800a136:	6033      	str	r3, [r6, #0]
 800a138:	4630      	mov	r0, r6
 800a13a:	f000 f854 	bl	800a1e6 <__malloc_unlock>
 800a13e:	e7e4      	b.n	800a10a <_malloc_r+0x1e>
 800a140:	680b      	ldr	r3, [r1, #0]
 800a142:	1b5b      	subs	r3, r3, r5
 800a144:	d418      	bmi.n	800a178 <_malloc_r+0x8c>
 800a146:	2b0b      	cmp	r3, #11
 800a148:	d90f      	bls.n	800a16a <_malloc_r+0x7e>
 800a14a:	600b      	str	r3, [r1, #0]
 800a14c:	50cd      	str	r5, [r1, r3]
 800a14e:	18cc      	adds	r4, r1, r3
 800a150:	4630      	mov	r0, r6
 800a152:	f000 f848 	bl	800a1e6 <__malloc_unlock>
 800a156:	f104 000b 	add.w	r0, r4, #11
 800a15a:	1d23      	adds	r3, r4, #4
 800a15c:	f020 0007 	bic.w	r0, r0, #7
 800a160:	1ac3      	subs	r3, r0, r3
 800a162:	d0d3      	beq.n	800a10c <_malloc_r+0x20>
 800a164:	425a      	negs	r2, r3
 800a166:	50e2      	str	r2, [r4, r3]
 800a168:	e7d0      	b.n	800a10c <_malloc_r+0x20>
 800a16a:	428c      	cmp	r4, r1
 800a16c:	684b      	ldr	r3, [r1, #4]
 800a16e:	bf16      	itet	ne
 800a170:	6063      	strne	r3, [r4, #4]
 800a172:	6013      	streq	r3, [r2, #0]
 800a174:	460c      	movne	r4, r1
 800a176:	e7eb      	b.n	800a150 <_malloc_r+0x64>
 800a178:	460c      	mov	r4, r1
 800a17a:	6849      	ldr	r1, [r1, #4]
 800a17c:	e7cc      	b.n	800a118 <_malloc_r+0x2c>
 800a17e:	1cc4      	adds	r4, r0, #3
 800a180:	f024 0403 	bic.w	r4, r4, #3
 800a184:	42a0      	cmp	r0, r4
 800a186:	d005      	beq.n	800a194 <_malloc_r+0xa8>
 800a188:	1a21      	subs	r1, r4, r0
 800a18a:	4630      	mov	r0, r6
 800a18c:	f000 f808 	bl	800a1a0 <_sbrk_r>
 800a190:	3001      	adds	r0, #1
 800a192:	d0cf      	beq.n	800a134 <_malloc_r+0x48>
 800a194:	6025      	str	r5, [r4, #0]
 800a196:	e7db      	b.n	800a150 <_malloc_r+0x64>
 800a198:	20000978 	.word	0x20000978
 800a19c:	2000097c 	.word	0x2000097c

0800a1a0 <_sbrk_r>:
 800a1a0:	b538      	push	{r3, r4, r5, lr}
 800a1a2:	4c06      	ldr	r4, [pc, #24]	; (800a1bc <_sbrk_r+0x1c>)
 800a1a4:	2300      	movs	r3, #0
 800a1a6:	4605      	mov	r5, r0
 800a1a8:	4608      	mov	r0, r1
 800a1aa:	6023      	str	r3, [r4, #0]
 800a1ac:	f7f6 ff18 	bl	8000fe0 <_sbrk>
 800a1b0:	1c43      	adds	r3, r0, #1
 800a1b2:	d102      	bne.n	800a1ba <_sbrk_r+0x1a>
 800a1b4:	6823      	ldr	r3, [r4, #0]
 800a1b6:	b103      	cbz	r3, 800a1ba <_sbrk_r+0x1a>
 800a1b8:	602b      	str	r3, [r5, #0]
 800a1ba:	bd38      	pop	{r3, r4, r5, pc}
 800a1bc:	200019b4 	.word	0x200019b4

0800a1c0 <__ascii_mbtowc>:
 800a1c0:	b082      	sub	sp, #8
 800a1c2:	b901      	cbnz	r1, 800a1c6 <__ascii_mbtowc+0x6>
 800a1c4:	a901      	add	r1, sp, #4
 800a1c6:	b142      	cbz	r2, 800a1da <__ascii_mbtowc+0x1a>
 800a1c8:	b14b      	cbz	r3, 800a1de <__ascii_mbtowc+0x1e>
 800a1ca:	7813      	ldrb	r3, [r2, #0]
 800a1cc:	600b      	str	r3, [r1, #0]
 800a1ce:	7812      	ldrb	r2, [r2, #0]
 800a1d0:	1c10      	adds	r0, r2, #0
 800a1d2:	bf18      	it	ne
 800a1d4:	2001      	movne	r0, #1
 800a1d6:	b002      	add	sp, #8
 800a1d8:	4770      	bx	lr
 800a1da:	4610      	mov	r0, r2
 800a1dc:	e7fb      	b.n	800a1d6 <__ascii_mbtowc+0x16>
 800a1de:	f06f 0001 	mvn.w	r0, #1
 800a1e2:	e7f8      	b.n	800a1d6 <__ascii_mbtowc+0x16>

0800a1e4 <__malloc_lock>:
 800a1e4:	4770      	bx	lr

0800a1e6 <__malloc_unlock>:
 800a1e6:	4770      	bx	lr

0800a1e8 <__ascii_wctomb>:
 800a1e8:	b149      	cbz	r1, 800a1fe <__ascii_wctomb+0x16>
 800a1ea:	2aff      	cmp	r2, #255	; 0xff
 800a1ec:	bf85      	ittet	hi
 800a1ee:	238a      	movhi	r3, #138	; 0x8a
 800a1f0:	6003      	strhi	r3, [r0, #0]
 800a1f2:	700a      	strbls	r2, [r1, #0]
 800a1f4:	f04f 30ff 	movhi.w	r0, #4294967295
 800a1f8:	bf98      	it	ls
 800a1fa:	2001      	movls	r0, #1
 800a1fc:	4770      	bx	lr
 800a1fe:	4608      	mov	r0, r1
 800a200:	4770      	bx	lr
	...

0800a204 <_init>:
 800a204:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a206:	bf00      	nop
 800a208:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a20a:	bc08      	pop	{r3}
 800a20c:	469e      	mov	lr, r3
 800a20e:	4770      	bx	lr

0800a210 <_fini>:
 800a210:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a212:	bf00      	nop
 800a214:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a216:	bc08      	pop	{r3}
 800a218:	469e      	mov	lr, r3
 800a21a:	4770      	bx	lr
