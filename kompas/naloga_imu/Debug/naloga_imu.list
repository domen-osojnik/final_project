
naloga_imu.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c4f0  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c8  0800c678  0800c678  0001c678  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c740  0800c740  000201f0  2**0
                  CONTENTS
  4 .ARM          00000000  0800c740  0800c740  000201f0  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800c740  0800c740  000201f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c740  0800c740  0001c740  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c744  0800c744  0001c744  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f0  20000000  0800c748  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001280  200001f0  0800c938  000201f0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001470  0800c938  00021470  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201f0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018349  00000000  00000000  00020220  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000342b  00000000  00000000  00038569  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000f90  00000000  00000000  0003b998  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000e08  00000000  00000000  0003c928  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00020a7d  00000000  00000000  0003d730  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00010c54  00000000  00000000  0005e1ad  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000b186b  00000000  00000000  0006ee01  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0012066c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000430c  00000000  00000000  001206e8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	200001f0 	.word	0x200001f0
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800c660 	.word	0x0800c660

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	200001f4 	.word	0x200001f4
 80001c4:	0800c660 	.word	0x0800c660

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000306:	f1a4 0401 	sub.w	r4, r4, #1
 800030a:	d1e9      	bne.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__gedf2>:
 8000964:	f04f 3cff 	mov.w	ip, #4294967295
 8000968:	e006      	b.n	8000978 <__cmpdf2+0x4>
 800096a:	bf00      	nop

0800096c <__ledf2>:
 800096c:	f04f 0c01 	mov.w	ip, #1
 8000970:	e002      	b.n	8000978 <__cmpdf2+0x4>
 8000972:	bf00      	nop

08000974 <__cmpdf2>:
 8000974:	f04f 0c01 	mov.w	ip, #1
 8000978:	f84d cd04 	str.w	ip, [sp, #-4]!
 800097c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000980:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000984:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800098e:	d01b      	beq.n	80009c8 <__cmpdf2+0x54>
 8000990:	b001      	add	sp, #4
 8000992:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000996:	bf0c      	ite	eq
 8000998:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800099c:	ea91 0f03 	teqne	r1, r3
 80009a0:	bf02      	ittt	eq
 80009a2:	ea90 0f02 	teqeq	r0, r2
 80009a6:	2000      	moveq	r0, #0
 80009a8:	4770      	bxeq	lr
 80009aa:	f110 0f00 	cmn.w	r0, #0
 80009ae:	ea91 0f03 	teq	r1, r3
 80009b2:	bf58      	it	pl
 80009b4:	4299      	cmppl	r1, r3
 80009b6:	bf08      	it	eq
 80009b8:	4290      	cmpeq	r0, r2
 80009ba:	bf2c      	ite	cs
 80009bc:	17d8      	asrcs	r0, r3, #31
 80009be:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009c2:	f040 0001 	orr.w	r0, r0, #1
 80009c6:	4770      	bx	lr
 80009c8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009cc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d0:	d102      	bne.n	80009d8 <__cmpdf2+0x64>
 80009d2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009d6:	d107      	bne.n	80009e8 <__cmpdf2+0x74>
 80009d8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d1d6      	bne.n	8000990 <__cmpdf2+0x1c>
 80009e2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009e6:	d0d3      	beq.n	8000990 <__cmpdf2+0x1c>
 80009e8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009ec:	4770      	bx	lr
 80009ee:	bf00      	nop

080009f0 <__aeabi_cdrcmple>:
 80009f0:	4684      	mov	ip, r0
 80009f2:	4610      	mov	r0, r2
 80009f4:	4662      	mov	r2, ip
 80009f6:	468c      	mov	ip, r1
 80009f8:	4619      	mov	r1, r3
 80009fa:	4663      	mov	r3, ip
 80009fc:	e000      	b.n	8000a00 <__aeabi_cdcmpeq>
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdcmpeq>:
 8000a00:	b501      	push	{r0, lr}
 8000a02:	f7ff ffb7 	bl	8000974 <__cmpdf2>
 8000a06:	2800      	cmp	r0, #0
 8000a08:	bf48      	it	mi
 8000a0a:	f110 0f00 	cmnmi.w	r0, #0
 8000a0e:	bd01      	pop	{r0, pc}

08000a10 <__aeabi_dcmpeq>:
 8000a10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a14:	f7ff fff4 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a18:	bf0c      	ite	eq
 8000a1a:	2001      	moveq	r0, #1
 8000a1c:	2000      	movne	r0, #0
 8000a1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a22:	bf00      	nop

08000a24 <__aeabi_dcmplt>:
 8000a24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a28:	f7ff ffea 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a2c:	bf34      	ite	cc
 8000a2e:	2001      	movcc	r0, #1
 8000a30:	2000      	movcs	r0, #0
 8000a32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a36:	bf00      	nop

08000a38 <__aeabi_dcmple>:
 8000a38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a3c:	f7ff ffe0 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a40:	bf94      	ite	ls
 8000a42:	2001      	movls	r0, #1
 8000a44:	2000      	movhi	r0, #0
 8000a46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4a:	bf00      	nop

08000a4c <__aeabi_dcmpge>:
 8000a4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a50:	f7ff ffce 	bl	80009f0 <__aeabi_cdrcmple>
 8000a54:	bf94      	ite	ls
 8000a56:	2001      	movls	r0, #1
 8000a58:	2000      	movhi	r0, #0
 8000a5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5e:	bf00      	nop

08000a60 <__aeabi_dcmpgt>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff ffc4 	bl	80009f0 <__aeabi_cdrcmple>
 8000a68:	bf34      	ite	cc
 8000a6a:	2001      	movcc	r0, #1
 8000a6c:	2000      	movcs	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmpun>:
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	d102      	bne.n	8000a84 <__aeabi_dcmpun+0x10>
 8000a7e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a82:	d10a      	bne.n	8000a9a <__aeabi_dcmpun+0x26>
 8000a84:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	d102      	bne.n	8000a94 <__aeabi_dcmpun+0x20>
 8000a8e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a92:	d102      	bne.n	8000a9a <__aeabi_dcmpun+0x26>
 8000a94:	f04f 0000 	mov.w	r0, #0
 8000a98:	4770      	bx	lr
 8000a9a:	f04f 0001 	mov.w	r0, #1
 8000a9e:	4770      	bx	lr

08000aa0 <__aeabi_d2f>:
 8000aa0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000aa4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000aa8:	bf24      	itt	cs
 8000aaa:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000aae:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ab2:	d90d      	bls.n	8000ad0 <__aeabi_d2f+0x30>
 8000ab4:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ab8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000abc:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ac0:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000ac4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ac8:	bf08      	it	eq
 8000aca:	f020 0001 	biceq.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000ad4:	d121      	bne.n	8000b1a <__aeabi_d2f+0x7a>
 8000ad6:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000ada:	bfbc      	itt	lt
 8000adc:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000ae0:	4770      	bxlt	lr
 8000ae2:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ae6:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000aea:	f1c2 0218 	rsb	r2, r2, #24
 8000aee:	f1c2 0c20 	rsb	ip, r2, #32
 8000af2:	fa10 f30c 	lsls.w	r3, r0, ip
 8000af6:	fa20 f002 	lsr.w	r0, r0, r2
 8000afa:	bf18      	it	ne
 8000afc:	f040 0001 	orrne.w	r0, r0, #1
 8000b00:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b04:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b08:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b0c:	ea40 000c 	orr.w	r0, r0, ip
 8000b10:	fa23 f302 	lsr.w	r3, r3, r2
 8000b14:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b18:	e7cc      	b.n	8000ab4 <__aeabi_d2f+0x14>
 8000b1a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b1e:	d107      	bne.n	8000b30 <__aeabi_d2f+0x90>
 8000b20:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b24:	bf1e      	ittt	ne
 8000b26:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b2a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b2e:	4770      	bxne	lr
 8000b30:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b34:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b38:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b3c:	4770      	bx	lr
 8000b3e:	bf00      	nop

08000b40 <MadgwickAHRSupdate>:
// Functions

//---------------------------------------------------------------------------------------------------
// AHRS algorithm update

void MadgwickAHRSupdate(float gx, float gy, float gz, float ax, float ay, float az, float mx, float my, float mz) {
 8000b40:	b590      	push	{r4, r7, lr}
 8000b42:	b0af      	sub	sp, #188	; 0xbc
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	ed87 0a09 	vstr	s0, [r7, #36]	; 0x24
 8000b4a:	edc7 0a08 	vstr	s1, [r7, #32]
 8000b4e:	ed87 1a07 	vstr	s2, [r7, #28]
 8000b52:	edc7 1a06 	vstr	s3, [r7, #24]
 8000b56:	ed87 2a05 	vstr	s4, [r7, #20]
 8000b5a:	edc7 2a04 	vstr	s5, [r7, #16]
 8000b5e:	ed87 3a03 	vstr	s6, [r7, #12]
 8000b62:	edc7 3a02 	vstr	s7, [r7, #8]
 8000b66:	ed87 4a01 	vstr	s8, [r7, #4]
	float qDot1, qDot2, qDot3, qDot4;
	float hx, hy;
	float _2q0mx, _2q0my, _2q0mz, _2q1mx, _2bx, _2bz, _4bx, _4bz, _2q0, _2q1, _2q2, _2q3, _2q0q2, _2q2q3, q0q0, q0q1, q0q2, q0q3, q1q1, q1q2, q1q3, q2q2, q2q3, q3q3;

	// Use IMU algorithm if magnetometer measurement invalid (avoids NaN in magnetometer normalisation)
	if((mx == 0.0f) && (my == 0.0f) && (mz == 0.0f)) {
 8000b6a:	edd7 7a03 	vldr	s15, [r7, #12]
 8000b6e:	eef5 7a40 	vcmp.f32	s15, #0.0
 8000b72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000b76:	d11d      	bne.n	8000bb4 <MadgwickAHRSupdate+0x74>
 8000b78:	edd7 7a02 	vldr	s15, [r7, #8]
 8000b7c:	eef5 7a40 	vcmp.f32	s15, #0.0
 8000b80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000b84:	d116      	bne.n	8000bb4 <MadgwickAHRSupdate+0x74>
 8000b86:	edd7 7a01 	vldr	s15, [r7, #4]
 8000b8a:	eef5 7a40 	vcmp.f32	s15, #0.0
 8000b8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000b92:	d10f      	bne.n	8000bb4 <MadgwickAHRSupdate+0x74>
		MadgwickAHRSupdateIMU(gx, gy, gz, ax, ay, az);
 8000b94:	edd7 2a04 	vldr	s5, [r7, #16]
 8000b98:	ed97 2a05 	vldr	s4, [r7, #20]
 8000b9c:	edd7 1a06 	vldr	s3, [r7, #24]
 8000ba0:	ed97 1a07 	vldr	s2, [r7, #28]
 8000ba4:	edd7 0a08 	vldr	s1, [r7, #32]
 8000ba8:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
 8000bac:	f000 fef4 	bl	8001998 <MadgwickAHRSupdateIMU>
		return;
 8000bb0:	f000 bee2 	b.w	8001978 <MadgwickAHRSupdate+0xe38>
	}

	// Rate of change of quaternion from gyroscope
	qDot1 = 0.5f * (-q1 * gx - q2 * gy - q3 * gz);
 8000bb4:	4be6      	ldr	r3, [pc, #920]	; (8000f50 <MadgwickAHRSupdate+0x410>)
 8000bb6:	edd3 7a00 	vldr	s15, [r3]
 8000bba:	eeb1 7a67 	vneg.f32	s14, s15
 8000bbe:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8000bc2:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000bc6:	4be3      	ldr	r3, [pc, #908]	; (8000f54 <MadgwickAHRSupdate+0x414>)
 8000bc8:	edd3 6a00 	vldr	s13, [r3]
 8000bcc:	edd7 7a08 	vldr	s15, [r7, #32]
 8000bd0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000bd4:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000bd8:	4bdf      	ldr	r3, [pc, #892]	; (8000f58 <MadgwickAHRSupdate+0x418>)
 8000bda:	edd3 6a00 	vldr	s13, [r3]
 8000bde:	edd7 7a07 	vldr	s15, [r7, #28]
 8000be2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000be6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000bea:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8000bee:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000bf2:	edc7 7a2d 	vstr	s15, [r7, #180]	; 0xb4
	qDot2 = 0.5f * (q0 * gx + q2 * gz - q3 * gy);
 8000bf6:	4bd9      	ldr	r3, [pc, #868]	; (8000f5c <MadgwickAHRSupdate+0x41c>)
 8000bf8:	ed93 7a00 	vldr	s14, [r3]
 8000bfc:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8000c00:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000c04:	4bd3      	ldr	r3, [pc, #844]	; (8000f54 <MadgwickAHRSupdate+0x414>)
 8000c06:	edd3 6a00 	vldr	s13, [r3]
 8000c0a:	edd7 7a07 	vldr	s15, [r7, #28]
 8000c0e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000c12:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000c16:	4bd0      	ldr	r3, [pc, #832]	; (8000f58 <MadgwickAHRSupdate+0x418>)
 8000c18:	edd3 6a00 	vldr	s13, [r3]
 8000c1c:	edd7 7a08 	vldr	s15, [r7, #32]
 8000c20:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000c24:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000c28:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8000c2c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000c30:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
	qDot3 = 0.5f * (q0 * gy - q1 * gz + q3 * gx);
 8000c34:	4bc9      	ldr	r3, [pc, #804]	; (8000f5c <MadgwickAHRSupdate+0x41c>)
 8000c36:	ed93 7a00 	vldr	s14, [r3]
 8000c3a:	edd7 7a08 	vldr	s15, [r7, #32]
 8000c3e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000c42:	4bc3      	ldr	r3, [pc, #780]	; (8000f50 <MadgwickAHRSupdate+0x410>)
 8000c44:	edd3 6a00 	vldr	s13, [r3]
 8000c48:	edd7 7a07 	vldr	s15, [r7, #28]
 8000c4c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000c50:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000c54:	4bc0      	ldr	r3, [pc, #768]	; (8000f58 <MadgwickAHRSupdate+0x418>)
 8000c56:	edd3 6a00 	vldr	s13, [r3]
 8000c5a:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8000c5e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000c62:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000c66:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8000c6a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000c6e:	edc7 7a2b 	vstr	s15, [r7, #172]	; 0xac
	qDot4 = 0.5f * (q0 * gz + q1 * gy - q2 * gx);
 8000c72:	4bba      	ldr	r3, [pc, #744]	; (8000f5c <MadgwickAHRSupdate+0x41c>)
 8000c74:	ed93 7a00 	vldr	s14, [r3]
 8000c78:	edd7 7a07 	vldr	s15, [r7, #28]
 8000c7c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000c80:	4bb3      	ldr	r3, [pc, #716]	; (8000f50 <MadgwickAHRSupdate+0x410>)
 8000c82:	edd3 6a00 	vldr	s13, [r3]
 8000c86:	edd7 7a08 	vldr	s15, [r7, #32]
 8000c8a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000c8e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000c92:	4bb0      	ldr	r3, [pc, #704]	; (8000f54 <MadgwickAHRSupdate+0x414>)
 8000c94:	edd3 6a00 	vldr	s13, [r3]
 8000c98:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8000c9c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000ca0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000ca4:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8000ca8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000cac:	edc7 7a2a 	vstr	s15, [r7, #168]	; 0xa8

	// Compute feedback only if accelerometer measurement valid (avoids NaN in accelerometer normalisation)
	if(!((ax == 0.0f) && (ay == 0.0f) && (az == 0.0f))) {
 8000cb0:	edd7 7a06 	vldr	s15, [r7, #24]
 8000cb4:	eef5 7a40 	vcmp.f32	s15, #0.0
 8000cb8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000cbc:	d10e      	bne.n	8000cdc <MadgwickAHRSupdate+0x19c>
 8000cbe:	edd7 7a05 	vldr	s15, [r7, #20]
 8000cc2:	eef5 7a40 	vcmp.f32	s15, #0.0
 8000cc6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000cca:	d107      	bne.n	8000cdc <MadgwickAHRSupdate+0x19c>
 8000ccc:	edd7 7a04 	vldr	s15, [r7, #16]
 8000cd0:	eef5 7a40 	vcmp.f32	s15, #0.0
 8000cd4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000cd8:	f000 85c2 	beq.w	8001860 <MadgwickAHRSupdate+0xd20>

		// Normalise accelerometer measurement
		recipNorm = invSqrt(ax * ax + ay * ay + az * az);
 8000cdc:	ed97 7a06 	vldr	s14, [r7, #24]
 8000ce0:	edd7 7a06 	vldr	s15, [r7, #24]
 8000ce4:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000ce8:	edd7 6a05 	vldr	s13, [r7, #20]
 8000cec:	edd7 7a05 	vldr	s15, [r7, #20]
 8000cf0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000cf4:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000cf8:	edd7 6a04 	vldr	s13, [r7, #16]
 8000cfc:	edd7 7a04 	vldr	s15, [r7, #16]
 8000d00:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000d04:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000d08:	eeb0 0a67 	vmov.f32	s0, s15
 8000d0c:	f001 f976 	bl	8001ffc <invSqrt>
 8000d10:	ed87 0a29 	vstr	s0, [r7, #164]	; 0xa4
		ax *= recipNorm;
 8000d14:	ed97 7a06 	vldr	s14, [r7, #24]
 8000d18:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8000d1c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000d20:	edc7 7a06 	vstr	s15, [r7, #24]
		ay *= recipNorm;
 8000d24:	ed97 7a05 	vldr	s14, [r7, #20]
 8000d28:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8000d2c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000d30:	edc7 7a05 	vstr	s15, [r7, #20]
		az *= recipNorm;   
 8000d34:	ed97 7a04 	vldr	s14, [r7, #16]
 8000d38:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8000d3c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000d40:	edc7 7a04 	vstr	s15, [r7, #16]

		// Normalise magnetometer measurement
		recipNorm = invSqrt(mx * mx + my * my + mz * mz);
 8000d44:	ed97 7a03 	vldr	s14, [r7, #12]
 8000d48:	edd7 7a03 	vldr	s15, [r7, #12]
 8000d4c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000d50:	edd7 6a02 	vldr	s13, [r7, #8]
 8000d54:	edd7 7a02 	vldr	s15, [r7, #8]
 8000d58:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000d5c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000d60:	edd7 6a01 	vldr	s13, [r7, #4]
 8000d64:	edd7 7a01 	vldr	s15, [r7, #4]
 8000d68:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000d6c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000d70:	eeb0 0a67 	vmov.f32	s0, s15
 8000d74:	f001 f942 	bl	8001ffc <invSqrt>
 8000d78:	ed87 0a29 	vstr	s0, [r7, #164]	; 0xa4
		mx *= recipNorm;
 8000d7c:	ed97 7a03 	vldr	s14, [r7, #12]
 8000d80:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8000d84:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000d88:	edc7 7a03 	vstr	s15, [r7, #12]
		my *= recipNorm;
 8000d8c:	ed97 7a02 	vldr	s14, [r7, #8]
 8000d90:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8000d94:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000d98:	edc7 7a02 	vstr	s15, [r7, #8]
		mz *= recipNorm;
 8000d9c:	ed97 7a01 	vldr	s14, [r7, #4]
 8000da0:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8000da4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000da8:	edc7 7a01 	vstr	s15, [r7, #4]

		// Auxiliary variables to avoid repeated arithmetic
		_2q0mx = 2.0f * q0 * mx;
 8000dac:	4b6b      	ldr	r3, [pc, #428]	; (8000f5c <MadgwickAHRSupdate+0x41c>)
 8000dae:	edd3 7a00 	vldr	s15, [r3]
 8000db2:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8000db6:	ed97 7a03 	vldr	s14, [r7, #12]
 8000dba:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000dbe:	edc7 7a28 	vstr	s15, [r7, #160]	; 0xa0
		_2q0my = 2.0f * q0 * my;
 8000dc2:	4b66      	ldr	r3, [pc, #408]	; (8000f5c <MadgwickAHRSupdate+0x41c>)
 8000dc4:	edd3 7a00 	vldr	s15, [r3]
 8000dc8:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8000dcc:	ed97 7a02 	vldr	s14, [r7, #8]
 8000dd0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000dd4:	edc7 7a27 	vstr	s15, [r7, #156]	; 0x9c
		_2q0mz = 2.0f * q0 * mz;
 8000dd8:	4b60      	ldr	r3, [pc, #384]	; (8000f5c <MadgwickAHRSupdate+0x41c>)
 8000dda:	edd3 7a00 	vldr	s15, [r3]
 8000dde:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8000de2:	ed97 7a01 	vldr	s14, [r7, #4]
 8000de6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000dea:	edc7 7a26 	vstr	s15, [r7, #152]	; 0x98
		_2q1mx = 2.0f * q1 * mx;
 8000dee:	4b58      	ldr	r3, [pc, #352]	; (8000f50 <MadgwickAHRSupdate+0x410>)
 8000df0:	edd3 7a00 	vldr	s15, [r3]
 8000df4:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8000df8:	ed97 7a03 	vldr	s14, [r7, #12]
 8000dfc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000e00:	edc7 7a25 	vstr	s15, [r7, #148]	; 0x94
		_2q0 = 2.0f * q0;
 8000e04:	4b55      	ldr	r3, [pc, #340]	; (8000f5c <MadgwickAHRSupdate+0x41c>)
 8000e06:	edd3 7a00 	vldr	s15, [r3]
 8000e0a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8000e0e:	edc7 7a24 	vstr	s15, [r7, #144]	; 0x90
		_2q1 = 2.0f * q1;
 8000e12:	4b4f      	ldr	r3, [pc, #316]	; (8000f50 <MadgwickAHRSupdate+0x410>)
 8000e14:	edd3 7a00 	vldr	s15, [r3]
 8000e18:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8000e1c:	edc7 7a23 	vstr	s15, [r7, #140]	; 0x8c
		_2q2 = 2.0f * q2;
 8000e20:	4b4c      	ldr	r3, [pc, #304]	; (8000f54 <MadgwickAHRSupdate+0x414>)
 8000e22:	edd3 7a00 	vldr	s15, [r3]
 8000e26:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8000e2a:	edc7 7a22 	vstr	s15, [r7, #136]	; 0x88
		_2q3 = 2.0f * q3;
 8000e2e:	4b4a      	ldr	r3, [pc, #296]	; (8000f58 <MadgwickAHRSupdate+0x418>)
 8000e30:	edd3 7a00 	vldr	s15, [r3]
 8000e34:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8000e38:	edc7 7a21 	vstr	s15, [r7, #132]	; 0x84
		_2q0q2 = 2.0f * q0 * q2;
 8000e3c:	4b47      	ldr	r3, [pc, #284]	; (8000f5c <MadgwickAHRSupdate+0x41c>)
 8000e3e:	edd3 7a00 	vldr	s15, [r3]
 8000e42:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8000e46:	4b43      	ldr	r3, [pc, #268]	; (8000f54 <MadgwickAHRSupdate+0x414>)
 8000e48:	edd3 7a00 	vldr	s15, [r3]
 8000e4c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000e50:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
		_2q2q3 = 2.0f * q2 * q3;
 8000e54:	4b3f      	ldr	r3, [pc, #252]	; (8000f54 <MadgwickAHRSupdate+0x414>)
 8000e56:	edd3 7a00 	vldr	s15, [r3]
 8000e5a:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8000e5e:	4b3e      	ldr	r3, [pc, #248]	; (8000f58 <MadgwickAHRSupdate+0x418>)
 8000e60:	edd3 7a00 	vldr	s15, [r3]
 8000e64:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000e68:	edc7 7a1f 	vstr	s15, [r7, #124]	; 0x7c
		q0q0 = q0 * q0;
 8000e6c:	4b3b      	ldr	r3, [pc, #236]	; (8000f5c <MadgwickAHRSupdate+0x41c>)
 8000e6e:	ed93 7a00 	vldr	s14, [r3]
 8000e72:	4b3a      	ldr	r3, [pc, #232]	; (8000f5c <MadgwickAHRSupdate+0x41c>)
 8000e74:	edd3 7a00 	vldr	s15, [r3]
 8000e78:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000e7c:	edc7 7a1e 	vstr	s15, [r7, #120]	; 0x78
		q0q1 = q0 * q1;
 8000e80:	4b36      	ldr	r3, [pc, #216]	; (8000f5c <MadgwickAHRSupdate+0x41c>)
 8000e82:	ed93 7a00 	vldr	s14, [r3]
 8000e86:	4b32      	ldr	r3, [pc, #200]	; (8000f50 <MadgwickAHRSupdate+0x410>)
 8000e88:	edd3 7a00 	vldr	s15, [r3]
 8000e8c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000e90:	edc7 7a1d 	vstr	s15, [r7, #116]	; 0x74
		q0q2 = q0 * q2;
 8000e94:	4b31      	ldr	r3, [pc, #196]	; (8000f5c <MadgwickAHRSupdate+0x41c>)
 8000e96:	ed93 7a00 	vldr	s14, [r3]
 8000e9a:	4b2e      	ldr	r3, [pc, #184]	; (8000f54 <MadgwickAHRSupdate+0x414>)
 8000e9c:	edd3 7a00 	vldr	s15, [r3]
 8000ea0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000ea4:	edc7 7a1c 	vstr	s15, [r7, #112]	; 0x70
		q0q3 = q0 * q3;
 8000ea8:	4b2c      	ldr	r3, [pc, #176]	; (8000f5c <MadgwickAHRSupdate+0x41c>)
 8000eaa:	ed93 7a00 	vldr	s14, [r3]
 8000eae:	4b2a      	ldr	r3, [pc, #168]	; (8000f58 <MadgwickAHRSupdate+0x418>)
 8000eb0:	edd3 7a00 	vldr	s15, [r3]
 8000eb4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000eb8:	edc7 7a1b 	vstr	s15, [r7, #108]	; 0x6c
		q1q1 = q1 * q1;
 8000ebc:	4b24      	ldr	r3, [pc, #144]	; (8000f50 <MadgwickAHRSupdate+0x410>)
 8000ebe:	ed93 7a00 	vldr	s14, [r3]
 8000ec2:	4b23      	ldr	r3, [pc, #140]	; (8000f50 <MadgwickAHRSupdate+0x410>)
 8000ec4:	edd3 7a00 	vldr	s15, [r3]
 8000ec8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000ecc:	edc7 7a1a 	vstr	s15, [r7, #104]	; 0x68
		q1q2 = q1 * q2;
 8000ed0:	4b1f      	ldr	r3, [pc, #124]	; (8000f50 <MadgwickAHRSupdate+0x410>)
 8000ed2:	ed93 7a00 	vldr	s14, [r3]
 8000ed6:	4b1f      	ldr	r3, [pc, #124]	; (8000f54 <MadgwickAHRSupdate+0x414>)
 8000ed8:	edd3 7a00 	vldr	s15, [r3]
 8000edc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000ee0:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64
		q1q3 = q1 * q3;
 8000ee4:	4b1a      	ldr	r3, [pc, #104]	; (8000f50 <MadgwickAHRSupdate+0x410>)
 8000ee6:	ed93 7a00 	vldr	s14, [r3]
 8000eea:	4b1b      	ldr	r3, [pc, #108]	; (8000f58 <MadgwickAHRSupdate+0x418>)
 8000eec:	edd3 7a00 	vldr	s15, [r3]
 8000ef0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000ef4:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
		q2q2 = q2 * q2;
 8000ef8:	4b16      	ldr	r3, [pc, #88]	; (8000f54 <MadgwickAHRSupdate+0x414>)
 8000efa:	ed93 7a00 	vldr	s14, [r3]
 8000efe:	4b15      	ldr	r3, [pc, #84]	; (8000f54 <MadgwickAHRSupdate+0x414>)
 8000f00:	edd3 7a00 	vldr	s15, [r3]
 8000f04:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000f08:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
		q2q3 = q2 * q3;
 8000f0c:	4b11      	ldr	r3, [pc, #68]	; (8000f54 <MadgwickAHRSupdate+0x414>)
 8000f0e:	ed93 7a00 	vldr	s14, [r3]
 8000f12:	4b11      	ldr	r3, [pc, #68]	; (8000f58 <MadgwickAHRSupdate+0x418>)
 8000f14:	edd3 7a00 	vldr	s15, [r3]
 8000f18:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000f1c:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
		q3q3 = q3 * q3;
 8000f20:	4b0d      	ldr	r3, [pc, #52]	; (8000f58 <MadgwickAHRSupdate+0x418>)
 8000f22:	ed93 7a00 	vldr	s14, [r3]
 8000f26:	4b0c      	ldr	r3, [pc, #48]	; (8000f58 <MadgwickAHRSupdate+0x418>)
 8000f28:	edd3 7a00 	vldr	s15, [r3]
 8000f2c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000f30:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54

		// Reference direction of Earth's magnetic field
		hx = mx * q0q0 - _2q0my * q3 + _2q0mz * q2 + mx * q1q1 + _2q1 * my * q2 + _2q1 * mz * q3 - mx * q2q2 - mx * q3q3;
 8000f34:	ed97 7a03 	vldr	s14, [r7, #12]
 8000f38:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 8000f3c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000f40:	4b05      	ldr	r3, [pc, #20]	; (8000f58 <MadgwickAHRSupdate+0x418>)
 8000f42:	edd3 6a00 	vldr	s13, [r3]
 8000f46:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 8000f4a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000f4e:	e007      	b.n	8000f60 <MadgwickAHRSupdate+0x420>
 8000f50:	2000020c 	.word	0x2000020c
 8000f54:	20000210 	.word	0x20000210
 8000f58:	20000214 	.word	0x20000214
 8000f5c:	20000004 	.word	0x20000004
 8000f60:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000f64:	4bf4      	ldr	r3, [pc, #976]	; (8001338 <MadgwickAHRSupdate+0x7f8>)
 8000f66:	edd3 6a00 	vldr	s13, [r3]
 8000f6a:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 8000f6e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000f72:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000f76:	edd7 6a03 	vldr	s13, [r7, #12]
 8000f7a:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 8000f7e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000f82:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000f86:	edd7 6a23 	vldr	s13, [r7, #140]	; 0x8c
 8000f8a:	edd7 7a02 	vldr	s15, [r7, #8]
 8000f8e:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8000f92:	4be9      	ldr	r3, [pc, #932]	; (8001338 <MadgwickAHRSupdate+0x7f8>)
 8000f94:	edd3 7a00 	vldr	s15, [r3]
 8000f98:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000f9c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000fa0:	edd7 6a23 	vldr	s13, [r7, #140]	; 0x8c
 8000fa4:	edd7 7a01 	vldr	s15, [r7, #4]
 8000fa8:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8000fac:	4be3      	ldr	r3, [pc, #908]	; (800133c <MadgwickAHRSupdate+0x7fc>)
 8000fae:	edd3 7a00 	vldr	s15, [r3]
 8000fb2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000fb6:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000fba:	edd7 6a03 	vldr	s13, [r7, #12]
 8000fbe:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8000fc2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000fc6:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000fca:	edd7 6a03 	vldr	s13, [r7, #12]
 8000fce:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8000fd2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000fd6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000fda:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
		hy = _2q0mx * q3 + my * q0q0 - _2q0mz * q1 + _2q1mx * q2 - my * q1q1 + my * q2q2 + _2q2 * mz * q3 - my * q3q3;
 8000fde:	4bd7      	ldr	r3, [pc, #860]	; (800133c <MadgwickAHRSupdate+0x7fc>)
 8000fe0:	ed93 7a00 	vldr	s14, [r3]
 8000fe4:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 8000fe8:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000fec:	edd7 6a02 	vldr	s13, [r7, #8]
 8000ff0:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 8000ff4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000ff8:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000ffc:	4bd0      	ldr	r3, [pc, #832]	; (8001340 <MadgwickAHRSupdate+0x800>)
 8000ffe:	edd3 6a00 	vldr	s13, [r3]
 8001002:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 8001006:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800100a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800100e:	4bca      	ldr	r3, [pc, #808]	; (8001338 <MadgwickAHRSupdate+0x7f8>)
 8001010:	edd3 6a00 	vldr	s13, [r3]
 8001014:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 8001018:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800101c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001020:	edd7 6a02 	vldr	s13, [r7, #8]
 8001024:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 8001028:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800102c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001030:	edd7 6a02 	vldr	s13, [r7, #8]
 8001034:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8001038:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800103c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001040:	edd7 6a22 	vldr	s13, [r7, #136]	; 0x88
 8001044:	edd7 7a01 	vldr	s15, [r7, #4]
 8001048:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800104c:	4bbb      	ldr	r3, [pc, #748]	; (800133c <MadgwickAHRSupdate+0x7fc>)
 800104e:	edd3 7a00 	vldr	s15, [r3]
 8001052:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001056:	ee37 7a27 	vadd.f32	s14, s14, s15
 800105a:	edd7 6a02 	vldr	s13, [r7, #8]
 800105e:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8001062:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001066:	ee77 7a67 	vsub.f32	s15, s14, s15
 800106a:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
		_2bx = sqrt(hx * hx + hy * hy);
 800106e:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8001072:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8001076:	ee27 7a27 	vmul.f32	s14, s14, s15
 800107a:	edd7 6a13 	vldr	s13, [r7, #76]	; 0x4c
 800107e:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 8001082:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001086:	ee77 7a27 	vadd.f32	s15, s14, s15
 800108a:	ee17 0a90 	vmov	r0, s15
 800108e:	f7ff f9ff 	bl	8000490 <__aeabi_f2d>
 8001092:	4603      	mov	r3, r0
 8001094:	460c      	mov	r4, r1
 8001096:	ec44 3b10 	vmov	d0, r3, r4
 800109a:	f00a fd31 	bl	800bb00 <sqrt>
 800109e:	ec54 3b10 	vmov	r3, r4, d0
 80010a2:	4618      	mov	r0, r3
 80010a4:	4621      	mov	r1, r4
 80010a6:	f7ff fcfb 	bl	8000aa0 <__aeabi_d2f>
 80010aa:	4603      	mov	r3, r0
 80010ac:	64bb      	str	r3, [r7, #72]	; 0x48
		_2bz = -_2q0mx * q2 + _2q0my * q1 + mz * q0q0 + _2q1mx * q3 - mz * q1q1 + _2q2 * my * q3 - mz * q2q2 + mz * q3q3;
 80010ae:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 80010b2:	eeb1 7a67 	vneg.f32	s14, s15
 80010b6:	4ba0      	ldr	r3, [pc, #640]	; (8001338 <MadgwickAHRSupdate+0x7f8>)
 80010b8:	edd3 7a00 	vldr	s15, [r3]
 80010bc:	ee27 7a27 	vmul.f32	s14, s14, s15
 80010c0:	4b9f      	ldr	r3, [pc, #636]	; (8001340 <MadgwickAHRSupdate+0x800>)
 80010c2:	edd3 6a00 	vldr	s13, [r3]
 80010c6:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 80010ca:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80010ce:	ee37 7a27 	vadd.f32	s14, s14, s15
 80010d2:	edd7 6a01 	vldr	s13, [r7, #4]
 80010d6:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 80010da:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80010de:	ee37 7a27 	vadd.f32	s14, s14, s15
 80010e2:	4b96      	ldr	r3, [pc, #600]	; (800133c <MadgwickAHRSupdate+0x7fc>)
 80010e4:	edd3 6a00 	vldr	s13, [r3]
 80010e8:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 80010ec:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80010f0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80010f4:	edd7 6a01 	vldr	s13, [r7, #4]
 80010f8:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 80010fc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001100:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001104:	edd7 6a22 	vldr	s13, [r7, #136]	; 0x88
 8001108:	edd7 7a02 	vldr	s15, [r7, #8]
 800110c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001110:	4b8a      	ldr	r3, [pc, #552]	; (800133c <MadgwickAHRSupdate+0x7fc>)
 8001112:	edd3 7a00 	vldr	s15, [r3]
 8001116:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800111a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800111e:	edd7 6a01 	vldr	s13, [r7, #4]
 8001122:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8001126:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800112a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800112e:	edd7 6a01 	vldr	s13, [r7, #4]
 8001132:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8001136:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800113a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800113e:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
		_4bx = 2.0f * _2bx;
 8001142:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8001146:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800114a:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
		_4bz = 2.0f * _2bz;
 800114e:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001152:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001156:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

		// Gradient decent algorithm corrective step
		s0 = -_2q2 * (2.0f * q1q3 - _2q0q2 - ax) + _2q1 * (2.0f * q0q1 + _2q2q3 - ay) - _2bz * q2 * (_2bx * (0.5f - q2q2 - q3q3) + _2bz * (q1q3 - q0q2) - mx) + (-_2bx * q3 + _2bz * q1) * (_2bx * (q1q2 - q0q3) + _2bz * (q0q1 + q2q3) - my) + _2bx * q2 * (_2bx * (q0q2 + q1q3) + _2bz * (0.5f - q1q1 - q2q2) - mz);
 800115a:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 800115e:	eeb1 7a67 	vneg.f32	s14, s15
 8001162:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8001166:	ee77 6aa7 	vadd.f32	s13, s15, s15
 800116a:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 800116e:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001172:	edd7 7a06 	vldr	s15, [r7, #24]
 8001176:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800117a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800117e:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8001182:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8001186:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 800118a:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800118e:	edd7 7a05 	vldr	s15, [r7, #20]
 8001192:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001196:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 800119a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800119e:	ee37 7a27 	vadd.f32	s14, s14, s15
 80011a2:	4b65      	ldr	r3, [pc, #404]	; (8001338 <MadgwickAHRSupdate+0x7f8>)
 80011a4:	edd3 6a00 	vldr	s13, [r3]
 80011a8:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 80011ac:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80011b0:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 80011b4:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 80011b8:	ee36 6a67 	vsub.f32	s12, s12, s15
 80011bc:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 80011c0:	ee36 6a67 	vsub.f32	s12, s12, s15
 80011c4:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 80011c8:	ee26 6a27 	vmul.f32	s12, s12, s15
 80011cc:	edd7 5a18 	vldr	s11, [r7, #96]	; 0x60
 80011d0:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 80011d4:	ee75 5ae7 	vsub.f32	s11, s11, s15
 80011d8:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 80011dc:	ee65 7aa7 	vmul.f32	s15, s11, s15
 80011e0:	ee36 6a27 	vadd.f32	s12, s12, s15
 80011e4:	edd7 7a03 	vldr	s15, [r7, #12]
 80011e8:	ee76 7a67 	vsub.f32	s15, s12, s15
 80011ec:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80011f0:	ee37 7a67 	vsub.f32	s14, s14, s15
 80011f4:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 80011f8:	eef1 6a67 	vneg.f32	s13, s15
 80011fc:	4b4f      	ldr	r3, [pc, #316]	; (800133c <MadgwickAHRSupdate+0x7fc>)
 80011fe:	edd3 7a00 	vldr	s15, [r3]
 8001202:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001206:	4b4e      	ldr	r3, [pc, #312]	; (8001340 <MadgwickAHRSupdate+0x800>)
 8001208:	ed93 6a00 	vldr	s12, [r3]
 800120c:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001210:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001214:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8001218:	ed97 6a19 	vldr	s12, [r7, #100]	; 0x64
 800121c:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 8001220:	ee36 6a67 	vsub.f32	s12, s12, s15
 8001224:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8001228:	ee26 6a27 	vmul.f32	s12, s12, s15
 800122c:	edd7 5a1d 	vldr	s11, [r7, #116]	; 0x74
 8001230:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8001234:	ee75 5aa7 	vadd.f32	s11, s11, s15
 8001238:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800123c:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8001240:	ee36 6a27 	vadd.f32	s12, s12, s15
 8001244:	edd7 7a02 	vldr	s15, [r7, #8]
 8001248:	ee76 7a67 	vsub.f32	s15, s12, s15
 800124c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001250:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001254:	4b38      	ldr	r3, [pc, #224]	; (8001338 <MadgwickAHRSupdate+0x7f8>)
 8001256:	edd3 6a00 	vldr	s13, [r3]
 800125a:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 800125e:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001262:	ed97 6a1c 	vldr	s12, [r7, #112]	; 0x70
 8001266:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 800126a:	ee36 6a27 	vadd.f32	s12, s12, s15
 800126e:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8001272:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001276:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 800127a:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 800127e:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8001282:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8001286:	ee75 5ae7 	vsub.f32	s11, s11, s15
 800128a:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800128e:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8001292:	ee36 6a27 	vadd.f32	s12, s12, s15
 8001296:	edd7 7a01 	vldr	s15, [r7, #4]
 800129a:	ee76 7a67 	vsub.f32	s15, s12, s15
 800129e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80012a2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80012a6:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
		s1 = _2q3 * (2.0f * q1q3 - _2q0q2 - ax) + _2q0 * (2.0f * q0q1 + _2q2q3 - ay) - 4.0f * q1 * (1 - 2.0f * q1q1 - 2.0f * q2q2 - az) + _2bz * q3 * (_2bx * (0.5f - q2q2 - q3q3) + _2bz * (q1q3 - q0q2) - mx) + (_2bx * q2 + _2bz * q0) * (_2bx * (q1q2 - q0q3) + _2bz * (q0q1 + q2q3) - my) + (_2bx * q3 - _4bz * q1) * (_2bx * (q0q2 + q1q3) + _2bz * (0.5f - q1q1 - q2q2) - mz);
 80012aa:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 80012ae:	ee37 7aa7 	vadd.f32	s14, s15, s15
 80012b2:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 80012b6:	ee37 7a67 	vsub.f32	s14, s14, s15
 80012ba:	edd7 7a06 	vldr	s15, [r7, #24]
 80012be:	ee37 7a67 	vsub.f32	s14, s14, s15
 80012c2:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 80012c6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80012ca:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 80012ce:	ee77 6aa7 	vadd.f32	s13, s15, s15
 80012d2:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 80012d6:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80012da:	edd7 7a05 	vldr	s15, [r7, #20]
 80012de:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80012e2:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 80012e6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80012ea:	ee37 7a27 	vadd.f32	s14, s14, s15
 80012ee:	4b14      	ldr	r3, [pc, #80]	; (8001340 <MadgwickAHRSupdate+0x800>)
 80012f0:	edd3 7a00 	vldr	s15, [r3]
 80012f4:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 80012f8:	ee67 6aa6 	vmul.f32	s13, s15, s13
 80012fc:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 8001300:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001304:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8001308:	ee36 6a67 	vsub.f32	s12, s12, s15
 800130c:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8001310:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001314:	ee36 6a67 	vsub.f32	s12, s12, s15
 8001318:	edd7 7a04 	vldr	s15, [r7, #16]
 800131c:	ee76 7a67 	vsub.f32	s15, s12, s15
 8001320:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001324:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001328:	4b04      	ldr	r3, [pc, #16]	; (800133c <MadgwickAHRSupdate+0x7fc>)
 800132a:	edd3 6a00 	vldr	s13, [r3]
 800132e:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001332:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001336:	e005      	b.n	8001344 <MadgwickAHRSupdate+0x804>
 8001338:	20000210 	.word	0x20000210
 800133c:	20000214 	.word	0x20000214
 8001340:	2000020c 	.word	0x2000020c
 8001344:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8001348:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 800134c:	ee36 6a67 	vsub.f32	s12, s12, s15
 8001350:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8001354:	ee36 6a67 	vsub.f32	s12, s12, s15
 8001358:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 800135c:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001360:	edd7 5a18 	vldr	s11, [r7, #96]	; 0x60
 8001364:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 8001368:	ee75 5ae7 	vsub.f32	s11, s11, s15
 800136c:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001370:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8001374:	ee36 6a27 	vadd.f32	s12, s12, s15
 8001378:	edd7 7a03 	vldr	s15, [r7, #12]
 800137c:	ee76 7a67 	vsub.f32	s15, s12, s15
 8001380:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001384:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001388:	4bf6      	ldr	r3, [pc, #984]	; (8001764 <MadgwickAHRSupdate+0xc24>)
 800138a:	edd3 6a00 	vldr	s13, [r3]
 800138e:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8001392:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001396:	4bf4      	ldr	r3, [pc, #976]	; (8001768 <MadgwickAHRSupdate+0xc28>)
 8001398:	ed93 6a00 	vldr	s12, [r3]
 800139c:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 80013a0:	ee66 7a27 	vmul.f32	s15, s12, s15
 80013a4:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80013a8:	ed97 6a19 	vldr	s12, [r7, #100]	; 0x64
 80013ac:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 80013b0:	ee36 6a67 	vsub.f32	s12, s12, s15
 80013b4:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 80013b8:	ee26 6a27 	vmul.f32	s12, s12, s15
 80013bc:	edd7 5a1d 	vldr	s11, [r7, #116]	; 0x74
 80013c0:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 80013c4:	ee75 5aa7 	vadd.f32	s11, s11, s15
 80013c8:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 80013cc:	ee65 7aa7 	vmul.f32	s15, s11, s15
 80013d0:	ee36 6a27 	vadd.f32	s12, s12, s15
 80013d4:	edd7 7a02 	vldr	s15, [r7, #8]
 80013d8:	ee76 7a67 	vsub.f32	s15, s12, s15
 80013dc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80013e0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80013e4:	4be1      	ldr	r3, [pc, #900]	; (800176c <MadgwickAHRSupdate+0xc2c>)
 80013e6:	edd3 6a00 	vldr	s13, [r3]
 80013ea:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 80013ee:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80013f2:	4bdf      	ldr	r3, [pc, #892]	; (8001770 <MadgwickAHRSupdate+0xc30>)
 80013f4:	ed93 6a00 	vldr	s12, [r3]
 80013f8:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 80013fc:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001400:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001404:	ed97 6a1c 	vldr	s12, [r7, #112]	; 0x70
 8001408:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 800140c:	ee36 6a27 	vadd.f32	s12, s12, s15
 8001410:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8001414:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001418:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 800141c:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 8001420:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8001424:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8001428:	ee75 5ae7 	vsub.f32	s11, s11, s15
 800142c:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001430:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8001434:	ee36 6a27 	vadd.f32	s12, s12, s15
 8001438:	edd7 7a01 	vldr	s15, [r7, #4]
 800143c:	ee76 7a67 	vsub.f32	s15, s12, s15
 8001440:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001444:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001448:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
		s2 = -_2q0 * (2.0f * q1q3 - _2q0q2 - ax) + _2q3 * (2.0f * q0q1 + _2q2q3 - ay) - 4.0f * q2 * (1 - 2.0f * q1q1 - 2.0f * q2q2 - az) + (-_4bx * q2 - _2bz * q0) * (_2bx * (0.5f - q2q2 - q3q3) + _2bz * (q1q3 - q0q2) - mx) + (_2bx * q1 + _2bz * q3) * (_2bx * (q1q2 - q0q3) + _2bz * (q0q1 + q2q3) - my) + (_2bx * q0 - _4bz * q2) * (_2bx * (q0q2 + q1q3) + _2bz * (0.5f - q1q1 - q2q2) - mz);
 800144c:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 8001450:	eeb1 7a67 	vneg.f32	s14, s15
 8001454:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8001458:	ee77 6aa7 	vadd.f32	s13, s15, s15
 800145c:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 8001460:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001464:	edd7 7a06 	vldr	s15, [r7, #24]
 8001468:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800146c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001470:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8001474:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8001478:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 800147c:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8001480:	edd7 7a05 	vldr	s15, [r7, #20]
 8001484:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001488:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 800148c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001490:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001494:	4bb3      	ldr	r3, [pc, #716]	; (8001764 <MadgwickAHRSupdate+0xc24>)
 8001496:	edd3 7a00 	vldr	s15, [r3]
 800149a:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 800149e:	ee67 6aa6 	vmul.f32	s13, s15, s13
 80014a2:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 80014a6:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80014aa:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 80014ae:	ee36 6a67 	vsub.f32	s12, s12, s15
 80014b2:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 80014b6:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80014ba:	ee36 6a67 	vsub.f32	s12, s12, s15
 80014be:	edd7 7a04 	vldr	s15, [r7, #16]
 80014c2:	ee76 7a67 	vsub.f32	s15, s12, s15
 80014c6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80014ca:	ee37 7a67 	vsub.f32	s14, s14, s15
 80014ce:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 80014d2:	eef1 6a67 	vneg.f32	s13, s15
 80014d6:	4ba3      	ldr	r3, [pc, #652]	; (8001764 <MadgwickAHRSupdate+0xc24>)
 80014d8:	edd3 7a00 	vldr	s15, [r3]
 80014dc:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80014e0:	4ba1      	ldr	r3, [pc, #644]	; (8001768 <MadgwickAHRSupdate+0xc28>)
 80014e2:	ed93 6a00 	vldr	s12, [r3]
 80014e6:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 80014ea:	ee66 7a27 	vmul.f32	s15, s12, s15
 80014ee:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80014f2:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 80014f6:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 80014fa:	ee36 6a67 	vsub.f32	s12, s12, s15
 80014fe:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8001502:	ee36 6a67 	vsub.f32	s12, s12, s15
 8001506:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 800150a:	ee26 6a27 	vmul.f32	s12, s12, s15
 800150e:	edd7 5a18 	vldr	s11, [r7, #96]	; 0x60
 8001512:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 8001516:	ee75 5ae7 	vsub.f32	s11, s11, s15
 800151a:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800151e:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8001522:	ee36 6a27 	vadd.f32	s12, s12, s15
 8001526:	edd7 7a03 	vldr	s15, [r7, #12]
 800152a:	ee76 7a67 	vsub.f32	s15, s12, s15
 800152e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001532:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001536:	4b8e      	ldr	r3, [pc, #568]	; (8001770 <MadgwickAHRSupdate+0xc30>)
 8001538:	edd3 6a00 	vldr	s13, [r3]
 800153c:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8001540:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001544:	4b89      	ldr	r3, [pc, #548]	; (800176c <MadgwickAHRSupdate+0xc2c>)
 8001546:	ed93 6a00 	vldr	s12, [r3]
 800154a:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800154e:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001552:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8001556:	ed97 6a19 	vldr	s12, [r7, #100]	; 0x64
 800155a:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 800155e:	ee36 6a67 	vsub.f32	s12, s12, s15
 8001562:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8001566:	ee26 6a27 	vmul.f32	s12, s12, s15
 800156a:	edd7 5a1d 	vldr	s11, [r7, #116]	; 0x74
 800156e:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8001572:	ee75 5aa7 	vadd.f32	s11, s11, s15
 8001576:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800157a:	ee65 7aa7 	vmul.f32	s15, s11, s15
 800157e:	ee36 6a27 	vadd.f32	s12, s12, s15
 8001582:	edd7 7a02 	vldr	s15, [r7, #8]
 8001586:	ee76 7a67 	vsub.f32	s15, s12, s15
 800158a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800158e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001592:	4b75      	ldr	r3, [pc, #468]	; (8001768 <MadgwickAHRSupdate+0xc28>)
 8001594:	edd3 6a00 	vldr	s13, [r3]
 8001598:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 800159c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80015a0:	4b70      	ldr	r3, [pc, #448]	; (8001764 <MadgwickAHRSupdate+0xc24>)
 80015a2:	ed93 6a00 	vldr	s12, [r3]
 80015a6:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 80015aa:	ee66 7a27 	vmul.f32	s15, s12, s15
 80015ae:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80015b2:	ed97 6a1c 	vldr	s12, [r7, #112]	; 0x70
 80015b6:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 80015ba:	ee36 6a27 	vadd.f32	s12, s12, s15
 80015be:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 80015c2:	ee26 6a27 	vmul.f32	s12, s12, s15
 80015c6:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 80015ca:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 80015ce:	ee75 5ae7 	vsub.f32	s11, s11, s15
 80015d2:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 80015d6:	ee75 5ae7 	vsub.f32	s11, s11, s15
 80015da:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 80015de:	ee65 7aa7 	vmul.f32	s15, s11, s15
 80015e2:	ee36 6a27 	vadd.f32	s12, s12, s15
 80015e6:	edd7 7a01 	vldr	s15, [r7, #4]
 80015ea:	ee76 7a67 	vsub.f32	s15, s12, s15
 80015ee:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80015f2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80015f6:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
		s3 = _2q1 * (2.0f * q1q3 - _2q0q2 - ax) + _2q2 * (2.0f * q0q1 + _2q2q3 - ay) + (-_4bx * q3 + _2bz * q1) * (_2bx * (0.5f - q2q2 - q3q3) + _2bz * (q1q3 - q0q2) - mx) + (-_2bx * q0 + _2bz * q2) * (_2bx * (q1q2 - q0q3) + _2bz * (q0q1 + q2q3) - my) + _2bx * q1 * (_2bx * (q0q2 + q1q3) + _2bz * (0.5f - q1q1 - q2q2) - mz);
 80015fa:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 80015fe:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8001602:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 8001606:	ee37 7a67 	vsub.f32	s14, s14, s15
 800160a:	edd7 7a06 	vldr	s15, [r7, #24]
 800160e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001612:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8001616:	ee27 7a27 	vmul.f32	s14, s14, s15
 800161a:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 800161e:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8001622:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 8001626:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800162a:	edd7 7a05 	vldr	s15, [r7, #20]
 800162e:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001632:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 8001636:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800163a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800163e:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8001642:	eef1 6a67 	vneg.f32	s13, s15
 8001646:	4b49      	ldr	r3, [pc, #292]	; (800176c <MadgwickAHRSupdate+0xc2c>)
 8001648:	edd3 7a00 	vldr	s15, [r3]
 800164c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001650:	4b47      	ldr	r3, [pc, #284]	; (8001770 <MadgwickAHRSupdate+0xc30>)
 8001652:	ed93 6a00 	vldr	s12, [r3]
 8001656:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800165a:	ee66 7a27 	vmul.f32	s15, s12, s15
 800165e:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8001662:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8001666:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 800166a:	ee36 6a67 	vsub.f32	s12, s12, s15
 800166e:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8001672:	ee36 6a67 	vsub.f32	s12, s12, s15
 8001676:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 800167a:	ee26 6a27 	vmul.f32	s12, s12, s15
 800167e:	edd7 5a18 	vldr	s11, [r7, #96]	; 0x60
 8001682:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 8001686:	ee75 5ae7 	vsub.f32	s11, s11, s15
 800168a:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800168e:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8001692:	ee36 6a27 	vadd.f32	s12, s12, s15
 8001696:	edd7 7a03 	vldr	s15, [r7, #12]
 800169a:	ee76 7a67 	vsub.f32	s15, s12, s15
 800169e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80016a2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80016a6:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 80016aa:	eef1 6a67 	vneg.f32	s13, s15
 80016ae:	4b2e      	ldr	r3, [pc, #184]	; (8001768 <MadgwickAHRSupdate+0xc28>)
 80016b0:	edd3 7a00 	vldr	s15, [r3]
 80016b4:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80016b8:	4b2a      	ldr	r3, [pc, #168]	; (8001764 <MadgwickAHRSupdate+0xc24>)
 80016ba:	ed93 6a00 	vldr	s12, [r3]
 80016be:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 80016c2:	ee66 7a27 	vmul.f32	s15, s12, s15
 80016c6:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80016ca:	ed97 6a19 	vldr	s12, [r7, #100]	; 0x64
 80016ce:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 80016d2:	ee36 6a67 	vsub.f32	s12, s12, s15
 80016d6:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 80016da:	ee26 6a27 	vmul.f32	s12, s12, s15
 80016de:	edd7 5a1d 	vldr	s11, [r7, #116]	; 0x74
 80016e2:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 80016e6:	ee75 5aa7 	vadd.f32	s11, s11, s15
 80016ea:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 80016ee:	ee65 7aa7 	vmul.f32	s15, s11, s15
 80016f2:	ee36 6a27 	vadd.f32	s12, s12, s15
 80016f6:	edd7 7a02 	vldr	s15, [r7, #8]
 80016fa:	ee76 7a67 	vsub.f32	s15, s12, s15
 80016fe:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001702:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001706:	4b1a      	ldr	r3, [pc, #104]	; (8001770 <MadgwickAHRSupdate+0xc30>)
 8001708:	edd3 6a00 	vldr	s13, [r3]
 800170c:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8001710:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001714:	ed97 6a1c 	vldr	s12, [r7, #112]	; 0x70
 8001718:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 800171c:	ee36 6a27 	vadd.f32	s12, s12, s15
 8001720:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8001724:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001728:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 800172c:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 8001730:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8001734:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8001738:	ee75 5ae7 	vsub.f32	s11, s11, s15
 800173c:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001740:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8001744:	ee36 6a27 	vadd.f32	s12, s12, s15
 8001748:	edd7 7a01 	vldr	s15, [r7, #4]
 800174c:	ee76 7a67 	vsub.f32	s15, s12, s15
 8001750:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001754:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001758:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
		recipNorm = invSqrt(s0 * s0 + s1 * s1 + s2 * s2 + s3 * s3); // normalise step magnitude
 800175c:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8001760:	e008      	b.n	8001774 <MadgwickAHRSupdate+0xc34>
 8001762:	bf00      	nop
 8001764:	20000210 	.word	0x20000210
 8001768:	20000004 	.word	0x20000004
 800176c:	20000214 	.word	0x20000214
 8001770:	2000020c 	.word	0x2000020c
 8001774:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8001778:	ee27 7a27 	vmul.f32	s14, s14, s15
 800177c:	edd7 6a0d 	vldr	s13, [r7, #52]	; 0x34
 8001780:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8001784:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001788:	ee37 7a27 	vadd.f32	s14, s14, s15
 800178c:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
 8001790:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8001794:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001798:	ee37 7a27 	vadd.f32	s14, s14, s15
 800179c:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 80017a0:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80017a4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80017a8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80017ac:	eeb0 0a67 	vmov.f32	s0, s15
 80017b0:	f000 fc24 	bl	8001ffc <invSqrt>
 80017b4:	ed87 0a29 	vstr	s0, [r7, #164]	; 0xa4
		s0 *= recipNorm;
 80017b8:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 80017bc:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 80017c0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80017c4:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
		s1 *= recipNorm;
 80017c8:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 80017cc:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 80017d0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80017d4:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
		s2 *= recipNorm;
 80017d8:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 80017dc:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 80017e0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80017e4:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
		s3 *= recipNorm;
 80017e8:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 80017ec:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 80017f0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80017f4:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c

		// Apply feedback step
		qDot1 -= beta * s0;
 80017f8:	4b61      	ldr	r3, [pc, #388]	; (8001980 <MadgwickAHRSupdate+0xe40>)
 80017fa:	ed93 7a00 	vldr	s14, [r3]
 80017fe:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8001802:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001806:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 800180a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800180e:	edc7 7a2d 	vstr	s15, [r7, #180]	; 0xb4
		qDot2 -= beta * s1;
 8001812:	4b5b      	ldr	r3, [pc, #364]	; (8001980 <MadgwickAHRSupdate+0xe40>)
 8001814:	ed93 7a00 	vldr	s14, [r3]
 8001818:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800181c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001820:	ed97 7a2c 	vldr	s14, [r7, #176]	; 0xb0
 8001824:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001828:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
		qDot3 -= beta * s2;
 800182c:	4b54      	ldr	r3, [pc, #336]	; (8001980 <MadgwickAHRSupdate+0xe40>)
 800182e:	ed93 7a00 	vldr	s14, [r3]
 8001832:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8001836:	ee67 7a27 	vmul.f32	s15, s14, s15
 800183a:	ed97 7a2b 	vldr	s14, [r7, #172]	; 0xac
 800183e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001842:	edc7 7a2b 	vstr	s15, [r7, #172]	; 0xac
		qDot4 -= beta * s3;
 8001846:	4b4e      	ldr	r3, [pc, #312]	; (8001980 <MadgwickAHRSupdate+0xe40>)
 8001848:	ed93 7a00 	vldr	s14, [r3]
 800184c:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8001850:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001854:	ed97 7a2a 	vldr	s14, [r7, #168]	; 0xa8
 8001858:	ee77 7a67 	vsub.f32	s15, s14, s15
 800185c:	edc7 7a2a 	vstr	s15, [r7, #168]	; 0xa8
	}

	// Integrate rate of change of quaternion to yield quaternion
	q0 += qDot1 * (1.0f / sampleFreq);
 8001860:	edd7 7a2d 	vldr	s15, [r7, #180]	; 0xb4
 8001864:	ed9f 7a47 	vldr	s14, [pc, #284]	; 8001984 <MadgwickAHRSupdate+0xe44>
 8001868:	ee27 7a87 	vmul.f32	s14, s15, s14
 800186c:	4b46      	ldr	r3, [pc, #280]	; (8001988 <MadgwickAHRSupdate+0xe48>)
 800186e:	edd3 7a00 	vldr	s15, [r3]
 8001872:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001876:	4b44      	ldr	r3, [pc, #272]	; (8001988 <MadgwickAHRSupdate+0xe48>)
 8001878:	edc3 7a00 	vstr	s15, [r3]
	q1 += qDot2 * (1.0f / sampleFreq);
 800187c:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 8001880:	ed9f 7a40 	vldr	s14, [pc, #256]	; 8001984 <MadgwickAHRSupdate+0xe44>
 8001884:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001888:	4b40      	ldr	r3, [pc, #256]	; (800198c <MadgwickAHRSupdate+0xe4c>)
 800188a:	edd3 7a00 	vldr	s15, [r3]
 800188e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001892:	4b3e      	ldr	r3, [pc, #248]	; (800198c <MadgwickAHRSupdate+0xe4c>)
 8001894:	edc3 7a00 	vstr	s15, [r3]
	q2 += qDot3 * (1.0f / sampleFreq);
 8001898:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 800189c:	ed9f 7a39 	vldr	s14, [pc, #228]	; 8001984 <MadgwickAHRSupdate+0xe44>
 80018a0:	ee27 7a87 	vmul.f32	s14, s15, s14
 80018a4:	4b3a      	ldr	r3, [pc, #232]	; (8001990 <MadgwickAHRSupdate+0xe50>)
 80018a6:	edd3 7a00 	vldr	s15, [r3]
 80018aa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80018ae:	4b38      	ldr	r3, [pc, #224]	; (8001990 <MadgwickAHRSupdate+0xe50>)
 80018b0:	edc3 7a00 	vstr	s15, [r3]
	q3 += qDot4 * (1.0f / sampleFreq);
 80018b4:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 80018b8:	ed9f 7a32 	vldr	s14, [pc, #200]	; 8001984 <MadgwickAHRSupdate+0xe44>
 80018bc:	ee27 7a87 	vmul.f32	s14, s15, s14
 80018c0:	4b34      	ldr	r3, [pc, #208]	; (8001994 <MadgwickAHRSupdate+0xe54>)
 80018c2:	edd3 7a00 	vldr	s15, [r3]
 80018c6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80018ca:	4b32      	ldr	r3, [pc, #200]	; (8001994 <MadgwickAHRSupdate+0xe54>)
 80018cc:	edc3 7a00 	vstr	s15, [r3]

	// Normalise quaternion
	recipNorm = invSqrt(q0 * q0 + q1 * q1 + q2 * q2 + q3 * q3);
 80018d0:	4b2d      	ldr	r3, [pc, #180]	; (8001988 <MadgwickAHRSupdate+0xe48>)
 80018d2:	ed93 7a00 	vldr	s14, [r3]
 80018d6:	4b2c      	ldr	r3, [pc, #176]	; (8001988 <MadgwickAHRSupdate+0xe48>)
 80018d8:	edd3 7a00 	vldr	s15, [r3]
 80018dc:	ee27 7a27 	vmul.f32	s14, s14, s15
 80018e0:	4b2a      	ldr	r3, [pc, #168]	; (800198c <MadgwickAHRSupdate+0xe4c>)
 80018e2:	edd3 6a00 	vldr	s13, [r3]
 80018e6:	4b29      	ldr	r3, [pc, #164]	; (800198c <MadgwickAHRSupdate+0xe4c>)
 80018e8:	edd3 7a00 	vldr	s15, [r3]
 80018ec:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80018f0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80018f4:	4b26      	ldr	r3, [pc, #152]	; (8001990 <MadgwickAHRSupdate+0xe50>)
 80018f6:	edd3 6a00 	vldr	s13, [r3]
 80018fa:	4b25      	ldr	r3, [pc, #148]	; (8001990 <MadgwickAHRSupdate+0xe50>)
 80018fc:	edd3 7a00 	vldr	s15, [r3]
 8001900:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001904:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001908:	4b22      	ldr	r3, [pc, #136]	; (8001994 <MadgwickAHRSupdate+0xe54>)
 800190a:	edd3 6a00 	vldr	s13, [r3]
 800190e:	4b21      	ldr	r3, [pc, #132]	; (8001994 <MadgwickAHRSupdate+0xe54>)
 8001910:	edd3 7a00 	vldr	s15, [r3]
 8001914:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001918:	ee77 7a27 	vadd.f32	s15, s14, s15
 800191c:	eeb0 0a67 	vmov.f32	s0, s15
 8001920:	f000 fb6c 	bl	8001ffc <invSqrt>
 8001924:	ed87 0a29 	vstr	s0, [r7, #164]	; 0xa4
	q0 *= recipNorm;
 8001928:	4b17      	ldr	r3, [pc, #92]	; (8001988 <MadgwickAHRSupdate+0xe48>)
 800192a:	ed93 7a00 	vldr	s14, [r3]
 800192e:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8001932:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001936:	4b14      	ldr	r3, [pc, #80]	; (8001988 <MadgwickAHRSupdate+0xe48>)
 8001938:	edc3 7a00 	vstr	s15, [r3]
	q1 *= recipNorm;
 800193c:	4b13      	ldr	r3, [pc, #76]	; (800198c <MadgwickAHRSupdate+0xe4c>)
 800193e:	ed93 7a00 	vldr	s14, [r3]
 8001942:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8001946:	ee67 7a27 	vmul.f32	s15, s14, s15
 800194a:	4b10      	ldr	r3, [pc, #64]	; (800198c <MadgwickAHRSupdate+0xe4c>)
 800194c:	edc3 7a00 	vstr	s15, [r3]
	q2 *= recipNorm;
 8001950:	4b0f      	ldr	r3, [pc, #60]	; (8001990 <MadgwickAHRSupdate+0xe50>)
 8001952:	ed93 7a00 	vldr	s14, [r3]
 8001956:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 800195a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800195e:	4b0c      	ldr	r3, [pc, #48]	; (8001990 <MadgwickAHRSupdate+0xe50>)
 8001960:	edc3 7a00 	vstr	s15, [r3]
	q3 *= recipNorm;
 8001964:	4b0b      	ldr	r3, [pc, #44]	; (8001994 <MadgwickAHRSupdate+0xe54>)
 8001966:	ed93 7a00 	vldr	s14, [r3]
 800196a:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 800196e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001972:	4b08      	ldr	r3, [pc, #32]	; (8001994 <MadgwickAHRSupdate+0xe54>)
 8001974:	edc3 7a00 	vstr	s15, [r3]
}
 8001978:	37bc      	adds	r7, #188	; 0xbc
 800197a:	46bd      	mov	sp, r7
 800197c:	bd90      	pop	{r4, r7, pc}
 800197e:	bf00      	nop
 8001980:	20000000 	.word	0x20000000
 8001984:	3c5a740e 	.word	0x3c5a740e
 8001988:	20000004 	.word	0x20000004
 800198c:	2000020c 	.word	0x2000020c
 8001990:	20000210 	.word	0x20000210
 8001994:	20000214 	.word	0x20000214

08001998 <MadgwickAHRSupdateIMU>:

//---------------------------------------------------------------------------------------------------
// IMU algorithm update

void MadgwickAHRSupdateIMU(float gx, float gy, float gz, float ax, float ay, float az) {
 8001998:	b580      	push	{r7, lr}
 800199a:	b09c      	sub	sp, #112	; 0x70
 800199c:	af00      	add	r7, sp, #0
 800199e:	ed87 0a05 	vstr	s0, [r7, #20]
 80019a2:	edc7 0a04 	vstr	s1, [r7, #16]
 80019a6:	ed87 1a03 	vstr	s2, [r7, #12]
 80019aa:	edc7 1a02 	vstr	s3, [r7, #8]
 80019ae:	ed87 2a01 	vstr	s4, [r7, #4]
 80019b2:	edc7 2a00 	vstr	s5, [r7]
	float s0, s1, s2, s3;
	float qDot1, qDot2, qDot3, qDot4;
	float _2q0, _2q1, _2q2, _2q3, _4q0, _4q1, _4q2 ,_8q1, _8q2, q0q0, q1q1, q2q2, q3q3;

	// Rate of change of quaternion from gyroscope
	qDot1 = 0.5f * (-q1 * gx - q2 * gy - q3 * gz);
 80019b6:	4bee      	ldr	r3, [pc, #952]	; (8001d70 <MadgwickAHRSupdateIMU+0x3d8>)
 80019b8:	edd3 7a00 	vldr	s15, [r3]
 80019bc:	eeb1 7a67 	vneg.f32	s14, s15
 80019c0:	edd7 7a05 	vldr	s15, [r7, #20]
 80019c4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80019c8:	4bea      	ldr	r3, [pc, #936]	; (8001d74 <MadgwickAHRSupdateIMU+0x3dc>)
 80019ca:	edd3 6a00 	vldr	s13, [r3]
 80019ce:	edd7 7a04 	vldr	s15, [r7, #16]
 80019d2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80019d6:	ee37 7a67 	vsub.f32	s14, s14, s15
 80019da:	4be7      	ldr	r3, [pc, #924]	; (8001d78 <MadgwickAHRSupdateIMU+0x3e0>)
 80019dc:	edd3 6a00 	vldr	s13, [r3]
 80019e0:	edd7 7a03 	vldr	s15, [r7, #12]
 80019e4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80019e8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80019ec:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80019f0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80019f4:	edc7 7a1b 	vstr	s15, [r7, #108]	; 0x6c
	qDot2 = 0.5f * (q0 * gx + q2 * gz - q3 * gy);
 80019f8:	4be0      	ldr	r3, [pc, #896]	; (8001d7c <MadgwickAHRSupdateIMU+0x3e4>)
 80019fa:	ed93 7a00 	vldr	s14, [r3]
 80019fe:	edd7 7a05 	vldr	s15, [r7, #20]
 8001a02:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001a06:	4bdb      	ldr	r3, [pc, #876]	; (8001d74 <MadgwickAHRSupdateIMU+0x3dc>)
 8001a08:	edd3 6a00 	vldr	s13, [r3]
 8001a0c:	edd7 7a03 	vldr	s15, [r7, #12]
 8001a10:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001a14:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001a18:	4bd7      	ldr	r3, [pc, #860]	; (8001d78 <MadgwickAHRSupdateIMU+0x3e0>)
 8001a1a:	edd3 6a00 	vldr	s13, [r3]
 8001a1e:	edd7 7a04 	vldr	s15, [r7, #16]
 8001a22:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001a26:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001a2a:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8001a2e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001a32:	edc7 7a1a 	vstr	s15, [r7, #104]	; 0x68
	qDot3 = 0.5f * (q0 * gy - q1 * gz + q3 * gx);
 8001a36:	4bd1      	ldr	r3, [pc, #836]	; (8001d7c <MadgwickAHRSupdateIMU+0x3e4>)
 8001a38:	ed93 7a00 	vldr	s14, [r3]
 8001a3c:	edd7 7a04 	vldr	s15, [r7, #16]
 8001a40:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001a44:	4bca      	ldr	r3, [pc, #808]	; (8001d70 <MadgwickAHRSupdateIMU+0x3d8>)
 8001a46:	edd3 6a00 	vldr	s13, [r3]
 8001a4a:	edd7 7a03 	vldr	s15, [r7, #12]
 8001a4e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001a52:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001a56:	4bc8      	ldr	r3, [pc, #800]	; (8001d78 <MadgwickAHRSupdateIMU+0x3e0>)
 8001a58:	edd3 6a00 	vldr	s13, [r3]
 8001a5c:	edd7 7a05 	vldr	s15, [r7, #20]
 8001a60:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001a64:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a68:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8001a6c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001a70:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64
	qDot4 = 0.5f * (q0 * gz + q1 * gy - q2 * gx);
 8001a74:	4bc1      	ldr	r3, [pc, #772]	; (8001d7c <MadgwickAHRSupdateIMU+0x3e4>)
 8001a76:	ed93 7a00 	vldr	s14, [r3]
 8001a7a:	edd7 7a03 	vldr	s15, [r7, #12]
 8001a7e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001a82:	4bbb      	ldr	r3, [pc, #748]	; (8001d70 <MadgwickAHRSupdateIMU+0x3d8>)
 8001a84:	edd3 6a00 	vldr	s13, [r3]
 8001a88:	edd7 7a04 	vldr	s15, [r7, #16]
 8001a8c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001a90:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001a94:	4bb7      	ldr	r3, [pc, #732]	; (8001d74 <MadgwickAHRSupdateIMU+0x3dc>)
 8001a96:	edd3 6a00 	vldr	s13, [r3]
 8001a9a:	edd7 7a05 	vldr	s15, [r7, #20]
 8001a9e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001aa2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001aa6:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8001aaa:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001aae:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60

	// Compute feedback only if accelerometer measurement valid (avoids NaN in accelerometer normalisation)
	if(!((ax == 0.0f) && (ay == 0.0f) && (az == 0.0f))) {
 8001ab2:	edd7 7a02 	vldr	s15, [r7, #8]
 8001ab6:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001aba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001abe:	d10e      	bne.n	8001ade <MadgwickAHRSupdateIMU+0x146>
 8001ac0:	edd7 7a01 	vldr	s15, [r7, #4]
 8001ac4:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001ac8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001acc:	d107      	bne.n	8001ade <MadgwickAHRSupdateIMU+0x146>
 8001ace:	edd7 7a00 	vldr	s15, [r7]
 8001ad2:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001ad6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ada:	f000 81f3 	beq.w	8001ec4 <MadgwickAHRSupdateIMU+0x52c>

		// Normalise accelerometer measurement
		recipNorm = invSqrt(ax * ax + ay * ay + az * az);
 8001ade:	ed97 7a02 	vldr	s14, [r7, #8]
 8001ae2:	edd7 7a02 	vldr	s15, [r7, #8]
 8001ae6:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001aea:	edd7 6a01 	vldr	s13, [r7, #4]
 8001aee:	edd7 7a01 	vldr	s15, [r7, #4]
 8001af2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001af6:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001afa:	edd7 6a00 	vldr	s13, [r7]
 8001afe:	edd7 7a00 	vldr	s15, [r7]
 8001b02:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001b06:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b0a:	eeb0 0a67 	vmov.f32	s0, s15
 8001b0e:	f000 fa75 	bl	8001ffc <invSqrt>
 8001b12:	ed87 0a17 	vstr	s0, [r7, #92]	; 0x5c
		ax *= recipNorm;
 8001b16:	ed97 7a02 	vldr	s14, [r7, #8]
 8001b1a:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8001b1e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001b22:	edc7 7a02 	vstr	s15, [r7, #8]
		ay *= recipNorm;
 8001b26:	ed97 7a01 	vldr	s14, [r7, #4]
 8001b2a:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8001b2e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001b32:	edc7 7a01 	vstr	s15, [r7, #4]
		az *= recipNorm;   
 8001b36:	ed97 7a00 	vldr	s14, [r7]
 8001b3a:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8001b3e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001b42:	edc7 7a00 	vstr	s15, [r7]

		// Auxiliary variables to avoid repeated arithmetic
		_2q0 = 2.0f * q0;
 8001b46:	4b8d      	ldr	r3, [pc, #564]	; (8001d7c <MadgwickAHRSupdateIMU+0x3e4>)
 8001b48:	edd3 7a00 	vldr	s15, [r3]
 8001b4c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001b50:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
		_2q1 = 2.0f * q1;
 8001b54:	4b86      	ldr	r3, [pc, #536]	; (8001d70 <MadgwickAHRSupdateIMU+0x3d8>)
 8001b56:	edd3 7a00 	vldr	s15, [r3]
 8001b5a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001b5e:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
		_2q2 = 2.0f * q2;
 8001b62:	4b84      	ldr	r3, [pc, #528]	; (8001d74 <MadgwickAHRSupdateIMU+0x3dc>)
 8001b64:	edd3 7a00 	vldr	s15, [r3]
 8001b68:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001b6c:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
		_2q3 = 2.0f * q3;
 8001b70:	4b81      	ldr	r3, [pc, #516]	; (8001d78 <MadgwickAHRSupdateIMU+0x3e0>)
 8001b72:	edd3 7a00 	vldr	s15, [r3]
 8001b76:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001b7a:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
		_4q0 = 4.0f * q0;
 8001b7e:	4b7f      	ldr	r3, [pc, #508]	; (8001d7c <MadgwickAHRSupdateIMU+0x3e4>)
 8001b80:	edd3 7a00 	vldr	s15, [r3]
 8001b84:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8001b88:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001b8c:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
		_4q1 = 4.0f * q1;
 8001b90:	4b77      	ldr	r3, [pc, #476]	; (8001d70 <MadgwickAHRSupdateIMU+0x3d8>)
 8001b92:	edd3 7a00 	vldr	s15, [r3]
 8001b96:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8001b9a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001b9e:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
		_4q2 = 4.0f * q2;
 8001ba2:	4b74      	ldr	r3, [pc, #464]	; (8001d74 <MadgwickAHRSupdateIMU+0x3dc>)
 8001ba4:	edd3 7a00 	vldr	s15, [r3]
 8001ba8:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8001bac:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001bb0:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
		_8q1 = 8.0f * q1;
 8001bb4:	4b6e      	ldr	r3, [pc, #440]	; (8001d70 <MadgwickAHRSupdateIMU+0x3d8>)
 8001bb6:	edd3 7a00 	vldr	s15, [r3]
 8001bba:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 8001bbe:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001bc2:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
		_8q2 = 8.0f * q2;
 8001bc6:	4b6b      	ldr	r3, [pc, #428]	; (8001d74 <MadgwickAHRSupdateIMU+0x3dc>)
 8001bc8:	edd3 7a00 	vldr	s15, [r3]
 8001bcc:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 8001bd0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001bd4:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
		q0q0 = q0 * q0;
 8001bd8:	4b68      	ldr	r3, [pc, #416]	; (8001d7c <MadgwickAHRSupdateIMU+0x3e4>)
 8001bda:	ed93 7a00 	vldr	s14, [r3]
 8001bde:	4b67      	ldr	r3, [pc, #412]	; (8001d7c <MadgwickAHRSupdateIMU+0x3e4>)
 8001be0:	edd3 7a00 	vldr	s15, [r3]
 8001be4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001be8:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
		q1q1 = q1 * q1;
 8001bec:	4b60      	ldr	r3, [pc, #384]	; (8001d70 <MadgwickAHRSupdateIMU+0x3d8>)
 8001bee:	ed93 7a00 	vldr	s14, [r3]
 8001bf2:	4b5f      	ldr	r3, [pc, #380]	; (8001d70 <MadgwickAHRSupdateIMU+0x3d8>)
 8001bf4:	edd3 7a00 	vldr	s15, [r3]
 8001bf8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001bfc:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
		q2q2 = q2 * q2;
 8001c00:	4b5c      	ldr	r3, [pc, #368]	; (8001d74 <MadgwickAHRSupdateIMU+0x3dc>)
 8001c02:	ed93 7a00 	vldr	s14, [r3]
 8001c06:	4b5b      	ldr	r3, [pc, #364]	; (8001d74 <MadgwickAHRSupdateIMU+0x3dc>)
 8001c08:	edd3 7a00 	vldr	s15, [r3]
 8001c0c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001c10:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
		q3q3 = q3 * q3;
 8001c14:	4b58      	ldr	r3, [pc, #352]	; (8001d78 <MadgwickAHRSupdateIMU+0x3e0>)
 8001c16:	ed93 7a00 	vldr	s14, [r3]
 8001c1a:	4b57      	ldr	r3, [pc, #348]	; (8001d78 <MadgwickAHRSupdateIMU+0x3e0>)
 8001c1c:	edd3 7a00 	vldr	s15, [r3]
 8001c20:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001c24:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28

		// Gradient decent algorithm corrective step
		s0 = _4q0 * q2q2 + _2q2 * ax + _4q0 * q1q1 - _2q1 * ay;
 8001c28:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8001c2c:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8001c30:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001c34:	edd7 6a14 	vldr	s13, [r7, #80]	; 0x50
 8001c38:	edd7 7a02 	vldr	s15, [r7, #8]
 8001c3c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001c40:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001c44:	edd7 6a12 	vldr	s13, [r7, #72]	; 0x48
 8001c48:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8001c4c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001c50:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001c54:	edd7 6a15 	vldr	s13, [r7, #84]	; 0x54
 8001c58:	edd7 7a01 	vldr	s15, [r7, #4]
 8001c5c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001c60:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001c64:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
		s1 = _4q1 * q3q3 - _2q3 * ax + 4.0f * q0q0 * q1 - _2q0 * ay - _4q1 + _8q1 * q1q1 + _8q1 * q2q2 + _4q1 * az;
 8001c68:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 8001c6c:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8001c70:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001c74:	edd7 6a13 	vldr	s13, [r7, #76]	; 0x4c
 8001c78:	edd7 7a02 	vldr	s15, [r7, #8]
 8001c7c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001c80:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001c84:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8001c88:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 8001c8c:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8001c90:	4b37      	ldr	r3, [pc, #220]	; (8001d70 <MadgwickAHRSupdateIMU+0x3d8>)
 8001c92:	edd3 7a00 	vldr	s15, [r3]
 8001c96:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001c9a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001c9e:	edd7 6a16 	vldr	s13, [r7, #88]	; 0x58
 8001ca2:	edd7 7a01 	vldr	s15, [r7, #4]
 8001ca6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001caa:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001cae:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001cb2:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001cb6:	edd7 6a0f 	vldr	s13, [r7, #60]	; 0x3c
 8001cba:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8001cbe:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001cc2:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001cc6:	edd7 6a0f 	vldr	s13, [r7, #60]	; 0x3c
 8001cca:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8001cce:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001cd2:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001cd6:	edd7 6a11 	vldr	s13, [r7, #68]	; 0x44
 8001cda:	edd7 7a00 	vldr	s15, [r7]
 8001cde:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001ce2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001ce6:	edc7 7a08 	vstr	s15, [r7, #32]
		s2 = 4.0f * q0q0 * q2 + _2q0 * ax + _4q2 * q3q3 - _2q3 * ay - _4q2 + _8q2 * q1q1 + _8q2 * q2q2 + _4q2 * az;
 8001cea:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8001cee:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8001cf2:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001cf6:	4b1f      	ldr	r3, [pc, #124]	; (8001d74 <MadgwickAHRSupdateIMU+0x3dc>)
 8001cf8:	edd3 7a00 	vldr	s15, [r3]
 8001cfc:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001d00:	edd7 6a16 	vldr	s13, [r7, #88]	; 0x58
 8001d04:	edd7 7a02 	vldr	s15, [r7, #8]
 8001d08:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001d0c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001d10:	edd7 6a10 	vldr	s13, [r7, #64]	; 0x40
 8001d14:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8001d18:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001d1c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001d20:	edd7 6a13 	vldr	s13, [r7, #76]	; 0x4c
 8001d24:	edd7 7a01 	vldr	s15, [r7, #4]
 8001d28:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001d2c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001d30:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8001d34:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001d38:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 8001d3c:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8001d40:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001d44:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001d48:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 8001d4c:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8001d50:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001d54:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001d58:	edd7 6a10 	vldr	s13, [r7, #64]	; 0x40
 8001d5c:	edd7 7a00 	vldr	s15, [r7]
 8001d60:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001d64:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d68:	edc7 7a07 	vstr	s15, [r7, #28]
 8001d6c:	e008      	b.n	8001d80 <MadgwickAHRSupdateIMU+0x3e8>
 8001d6e:	bf00      	nop
 8001d70:	2000020c 	.word	0x2000020c
 8001d74:	20000210 	.word	0x20000210
 8001d78:	20000214 	.word	0x20000214
 8001d7c:	20000004 	.word	0x20000004
		s3 = 4.0f * q1q1 * q3 - _2q1 * ax + 4.0f * q2q2 * q3 - _2q2 * ay;
 8001d80:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8001d84:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8001d88:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001d8c:	4b95      	ldr	r3, [pc, #596]	; (8001fe4 <MadgwickAHRSupdateIMU+0x64c>)
 8001d8e:	edd3 7a00 	vldr	s15, [r3]
 8001d92:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001d96:	edd7 6a15 	vldr	s13, [r7, #84]	; 0x54
 8001d9a:	edd7 7a02 	vldr	s15, [r7, #8]
 8001d9e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001da2:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001da6:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8001daa:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 8001dae:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8001db2:	4b8c      	ldr	r3, [pc, #560]	; (8001fe4 <MadgwickAHRSupdateIMU+0x64c>)
 8001db4:	edd3 7a00 	vldr	s15, [r3]
 8001db8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001dbc:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001dc0:	edd7 6a14 	vldr	s13, [r7, #80]	; 0x50
 8001dc4:	edd7 7a01 	vldr	s15, [r7, #4]
 8001dc8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001dcc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001dd0:	edc7 7a06 	vstr	s15, [r7, #24]
		recipNorm = invSqrt(s0 * s0 + s1 * s1 + s2 * s2 + s3 * s3); // normalise step magnitude
 8001dd4:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8001dd8:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001ddc:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001de0:	edd7 6a08 	vldr	s13, [r7, #32]
 8001de4:	edd7 7a08 	vldr	s15, [r7, #32]
 8001de8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001dec:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001df0:	edd7 6a07 	vldr	s13, [r7, #28]
 8001df4:	edd7 7a07 	vldr	s15, [r7, #28]
 8001df8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001dfc:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001e00:	edd7 6a06 	vldr	s13, [r7, #24]
 8001e04:	edd7 7a06 	vldr	s15, [r7, #24]
 8001e08:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001e0c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e10:	eeb0 0a67 	vmov.f32	s0, s15
 8001e14:	f000 f8f2 	bl	8001ffc <invSqrt>
 8001e18:	ed87 0a17 	vstr	s0, [r7, #92]	; 0x5c
		s0 *= recipNorm;
 8001e1c:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8001e20:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8001e24:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e28:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
		s1 *= recipNorm;
 8001e2c:	ed97 7a08 	vldr	s14, [r7, #32]
 8001e30:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8001e34:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e38:	edc7 7a08 	vstr	s15, [r7, #32]
		s2 *= recipNorm;
 8001e3c:	ed97 7a07 	vldr	s14, [r7, #28]
 8001e40:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8001e44:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e48:	edc7 7a07 	vstr	s15, [r7, #28]
		s3 *= recipNorm;
 8001e4c:	ed97 7a06 	vldr	s14, [r7, #24]
 8001e50:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8001e54:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e58:	edc7 7a06 	vstr	s15, [r7, #24]

		// Apply feedback step
		qDot1 -= beta * s0;
 8001e5c:	4b62      	ldr	r3, [pc, #392]	; (8001fe8 <MadgwickAHRSupdateIMU+0x650>)
 8001e5e:	ed93 7a00 	vldr	s14, [r3]
 8001e62:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001e66:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e6a:	ed97 7a1b 	vldr	s14, [r7, #108]	; 0x6c
 8001e6e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001e72:	edc7 7a1b 	vstr	s15, [r7, #108]	; 0x6c
		qDot2 -= beta * s1;
 8001e76:	4b5c      	ldr	r3, [pc, #368]	; (8001fe8 <MadgwickAHRSupdateIMU+0x650>)
 8001e78:	ed93 7a00 	vldr	s14, [r3]
 8001e7c:	edd7 7a08 	vldr	s15, [r7, #32]
 8001e80:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e84:	ed97 7a1a 	vldr	s14, [r7, #104]	; 0x68
 8001e88:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001e8c:	edc7 7a1a 	vstr	s15, [r7, #104]	; 0x68
		qDot3 -= beta * s2;
 8001e90:	4b55      	ldr	r3, [pc, #340]	; (8001fe8 <MadgwickAHRSupdateIMU+0x650>)
 8001e92:	ed93 7a00 	vldr	s14, [r3]
 8001e96:	edd7 7a07 	vldr	s15, [r7, #28]
 8001e9a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e9e:	ed97 7a19 	vldr	s14, [r7, #100]	; 0x64
 8001ea2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001ea6:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64
		qDot4 -= beta * s3;
 8001eaa:	4b4f      	ldr	r3, [pc, #316]	; (8001fe8 <MadgwickAHRSupdateIMU+0x650>)
 8001eac:	ed93 7a00 	vldr	s14, [r3]
 8001eb0:	edd7 7a06 	vldr	s15, [r7, #24]
 8001eb4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001eb8:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 8001ebc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001ec0:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
	}

	// Integrate rate of change of quaternion to yield quaternion
	q0 += qDot1 * (1.0f / sampleFreq);
 8001ec4:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 8001ec8:	ed9f 7a48 	vldr	s14, [pc, #288]	; 8001fec <MadgwickAHRSupdateIMU+0x654>
 8001ecc:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001ed0:	4b47      	ldr	r3, [pc, #284]	; (8001ff0 <MadgwickAHRSupdateIMU+0x658>)
 8001ed2:	edd3 7a00 	vldr	s15, [r3]
 8001ed6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001eda:	4b45      	ldr	r3, [pc, #276]	; (8001ff0 <MadgwickAHRSupdateIMU+0x658>)
 8001edc:	edc3 7a00 	vstr	s15, [r3]
	q1 += qDot2 * (1.0f / sampleFreq);
 8001ee0:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 8001ee4:	ed9f 7a41 	vldr	s14, [pc, #260]	; 8001fec <MadgwickAHRSupdateIMU+0x654>
 8001ee8:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001eec:	4b41      	ldr	r3, [pc, #260]	; (8001ff4 <MadgwickAHRSupdateIMU+0x65c>)
 8001eee:	edd3 7a00 	vldr	s15, [r3]
 8001ef2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001ef6:	4b3f      	ldr	r3, [pc, #252]	; (8001ff4 <MadgwickAHRSupdateIMU+0x65c>)
 8001ef8:	edc3 7a00 	vstr	s15, [r3]
	q2 += qDot3 * (1.0f / sampleFreq);
 8001efc:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 8001f00:	ed9f 7a3a 	vldr	s14, [pc, #232]	; 8001fec <MadgwickAHRSupdateIMU+0x654>
 8001f04:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001f08:	4b3b      	ldr	r3, [pc, #236]	; (8001ff8 <MadgwickAHRSupdateIMU+0x660>)
 8001f0a:	edd3 7a00 	vldr	s15, [r3]
 8001f0e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001f12:	4b39      	ldr	r3, [pc, #228]	; (8001ff8 <MadgwickAHRSupdateIMU+0x660>)
 8001f14:	edc3 7a00 	vstr	s15, [r3]
	q3 += qDot4 * (1.0f / sampleFreq);
 8001f18:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8001f1c:	ed9f 7a33 	vldr	s14, [pc, #204]	; 8001fec <MadgwickAHRSupdateIMU+0x654>
 8001f20:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001f24:	4b2f      	ldr	r3, [pc, #188]	; (8001fe4 <MadgwickAHRSupdateIMU+0x64c>)
 8001f26:	edd3 7a00 	vldr	s15, [r3]
 8001f2a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001f2e:	4b2d      	ldr	r3, [pc, #180]	; (8001fe4 <MadgwickAHRSupdateIMU+0x64c>)
 8001f30:	edc3 7a00 	vstr	s15, [r3]

	// Normalise quaternion
	recipNorm = invSqrt(q0 * q0 + q1 * q1 + q2 * q2 + q3 * q3);
 8001f34:	4b2e      	ldr	r3, [pc, #184]	; (8001ff0 <MadgwickAHRSupdateIMU+0x658>)
 8001f36:	ed93 7a00 	vldr	s14, [r3]
 8001f3a:	4b2d      	ldr	r3, [pc, #180]	; (8001ff0 <MadgwickAHRSupdateIMU+0x658>)
 8001f3c:	edd3 7a00 	vldr	s15, [r3]
 8001f40:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001f44:	4b2b      	ldr	r3, [pc, #172]	; (8001ff4 <MadgwickAHRSupdateIMU+0x65c>)
 8001f46:	edd3 6a00 	vldr	s13, [r3]
 8001f4a:	4b2a      	ldr	r3, [pc, #168]	; (8001ff4 <MadgwickAHRSupdateIMU+0x65c>)
 8001f4c:	edd3 7a00 	vldr	s15, [r3]
 8001f50:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001f54:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001f58:	4b27      	ldr	r3, [pc, #156]	; (8001ff8 <MadgwickAHRSupdateIMU+0x660>)
 8001f5a:	edd3 6a00 	vldr	s13, [r3]
 8001f5e:	4b26      	ldr	r3, [pc, #152]	; (8001ff8 <MadgwickAHRSupdateIMU+0x660>)
 8001f60:	edd3 7a00 	vldr	s15, [r3]
 8001f64:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001f68:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001f6c:	4b1d      	ldr	r3, [pc, #116]	; (8001fe4 <MadgwickAHRSupdateIMU+0x64c>)
 8001f6e:	edd3 6a00 	vldr	s13, [r3]
 8001f72:	4b1c      	ldr	r3, [pc, #112]	; (8001fe4 <MadgwickAHRSupdateIMU+0x64c>)
 8001f74:	edd3 7a00 	vldr	s15, [r3]
 8001f78:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001f7c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001f80:	eeb0 0a67 	vmov.f32	s0, s15
 8001f84:	f000 f83a 	bl	8001ffc <invSqrt>
 8001f88:	ed87 0a17 	vstr	s0, [r7, #92]	; 0x5c
	q0 *= recipNorm;
 8001f8c:	4b18      	ldr	r3, [pc, #96]	; (8001ff0 <MadgwickAHRSupdateIMU+0x658>)
 8001f8e:	ed93 7a00 	vldr	s14, [r3]
 8001f92:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8001f96:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f9a:	4b15      	ldr	r3, [pc, #84]	; (8001ff0 <MadgwickAHRSupdateIMU+0x658>)
 8001f9c:	edc3 7a00 	vstr	s15, [r3]
	q1 *= recipNorm;
 8001fa0:	4b14      	ldr	r3, [pc, #80]	; (8001ff4 <MadgwickAHRSupdateIMU+0x65c>)
 8001fa2:	ed93 7a00 	vldr	s14, [r3]
 8001fa6:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8001faa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001fae:	4b11      	ldr	r3, [pc, #68]	; (8001ff4 <MadgwickAHRSupdateIMU+0x65c>)
 8001fb0:	edc3 7a00 	vstr	s15, [r3]
	q2 *= recipNorm;
 8001fb4:	4b10      	ldr	r3, [pc, #64]	; (8001ff8 <MadgwickAHRSupdateIMU+0x660>)
 8001fb6:	ed93 7a00 	vldr	s14, [r3]
 8001fba:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8001fbe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001fc2:	4b0d      	ldr	r3, [pc, #52]	; (8001ff8 <MadgwickAHRSupdateIMU+0x660>)
 8001fc4:	edc3 7a00 	vstr	s15, [r3]
	q3 *= recipNorm;
 8001fc8:	4b06      	ldr	r3, [pc, #24]	; (8001fe4 <MadgwickAHRSupdateIMU+0x64c>)
 8001fca:	ed93 7a00 	vldr	s14, [r3]
 8001fce:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8001fd2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001fd6:	4b03      	ldr	r3, [pc, #12]	; (8001fe4 <MadgwickAHRSupdateIMU+0x64c>)
 8001fd8:	edc3 7a00 	vstr	s15, [r3]
}
 8001fdc:	bf00      	nop
 8001fde:	3770      	adds	r7, #112	; 0x70
 8001fe0:	46bd      	mov	sp, r7
 8001fe2:	bd80      	pop	{r7, pc}
 8001fe4:	20000214 	.word	0x20000214
 8001fe8:	20000000 	.word	0x20000000
 8001fec:	3c5a740e 	.word	0x3c5a740e
 8001ff0:	20000004 	.word	0x20000004
 8001ff4:	2000020c 	.word	0x2000020c
 8001ff8:	20000210 	.word	0x20000210

08001ffc <invSqrt>:

//---------------------------------------------------------------------------------------------------
// Fast inverse square-root
// See: http://en.wikipedia.org/wiki/Fast_inverse_square_root

float invSqrt(float x) {
 8001ffc:	b480      	push	{r7}
 8001ffe:	b087      	sub	sp, #28
 8002000:	af00      	add	r7, sp, #0
 8002002:	ed87 0a01 	vstr	s0, [r7, #4]
	float halfx = 0.5f * x;
 8002006:	edd7 7a01 	vldr	s15, [r7, #4]
 800200a:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800200e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002012:	edc7 7a05 	vstr	s15, [r7, #20]
	float y = x;
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	613b      	str	r3, [r7, #16]
	long i = *(long*)&y;
 800201a:	f107 0310 	add.w	r3, r7, #16
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	60fb      	str	r3, [r7, #12]
	i = 0x5f3759df - (i>>1);
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	105a      	asrs	r2, r3, #1
 8002026:	4b12      	ldr	r3, [pc, #72]	; (8002070 <invSqrt+0x74>)
 8002028:	1a9b      	subs	r3, r3, r2
 800202a:	60fb      	str	r3, [r7, #12]
	y = *(float*)&i;
 800202c:	f107 030c 	add.w	r3, r7, #12
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	613b      	str	r3, [r7, #16]
	y = y * (1.5f - (halfx * y * y));
 8002034:	ed97 7a04 	vldr	s14, [r7, #16]
 8002038:	edd7 7a05 	vldr	s15, [r7, #20]
 800203c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002040:	edd7 7a04 	vldr	s15, [r7, #16]
 8002044:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002048:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
 800204c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002050:	edd7 7a04 	vldr	s15, [r7, #16]
 8002054:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002058:	edc7 7a04 	vstr	s15, [r7, #16]
	return y;
 800205c:	693b      	ldr	r3, [r7, #16]
 800205e:	ee07 3a90 	vmov	s15, r3
}
 8002062:	eeb0 0a67 	vmov.f32	s0, s15
 8002066:	371c      	adds	r7, #28
 8002068:	46bd      	mov	sp, r7
 800206a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206e:	4770      	bx	lr
 8002070:	5f3759df 	.word	0x5f3759df

08002074 <pavza>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

// Pavza, s katero omogocimo pravilno delovanje avtomatskega testa
void pavza(){
 8002074:	b480      	push	{r7}
 8002076:	b083      	sub	sp, #12
 8002078:	af00      	add	r7, sp, #0
  uint32_t counter = 0;
 800207a:	2300      	movs	r3, #0
 800207c:	607b      	str	r3, [r7, #4]
  for(counter=0; counter<600; counter++){
 800207e:	2300      	movs	r3, #0
 8002080:	607b      	str	r3, [r7, #4]
 8002082:	e003      	b.n	800208c <pavza+0x18>
    asm("nop");
 8002084:	bf00      	nop
  for(counter=0; counter<600; counter++){
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	3301      	adds	r3, #1
 800208a:	607b      	str	r3, [r7, #4]
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 8002092:	d3f7      	bcc.n	8002084 <pavza+0x10>
  }
}
 8002094:	bf00      	nop
 8002096:	370c      	adds	r7, #12
 8002098:	46bd      	mov	sp, r7
 800209a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800209e:	4770      	bx	lr

080020a0 <spi1_beriRegistre>:
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_SET);
  pavza();
}

void spi1_beriRegistre(uint8_t reg, uint8_t* buffer, uint8_t velikost)
{
 80020a0:	b580      	push	{r7, lr}
 80020a2:	b082      	sub	sp, #8
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	4603      	mov	r3, r0
 80020a8:	6039      	str	r1, [r7, #0]
 80020aa:	71fb      	strb	r3, [r7, #7]
 80020ac:	4613      	mov	r3, r2
 80020ae:	71bb      	strb	r3, [r7, #6]
  reg |= 0xC0; // najpomembnejsa bita na 1
 80020b0:	79fb      	ldrb	r3, [r7, #7]
 80020b2:	f063 033f 	orn	r3, r3, #63	; 0x3f
 80020b6:	b2db      	uxtb	r3, r3
 80020b8:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_RESET);
 80020ba:	2200      	movs	r2, #0
 80020bc:	2108      	movs	r1, #8
 80020be:	480f      	ldr	r0, [pc, #60]	; (80020fc <spi1_beriRegistre+0x5c>)
 80020c0:	f001 f9aa 	bl	8003418 <HAL_GPIO_WritePin>
  pavza();
 80020c4:	f7ff ffd6 	bl	8002074 <pavza>
  HAL_SPI_Transmit(&hspi1, &reg, 1, 10); // blocking posiljanje....
 80020c8:	1df9      	adds	r1, r7, #7
 80020ca:	230a      	movs	r3, #10
 80020cc:	2201      	movs	r2, #1
 80020ce:	480c      	ldr	r0, [pc, #48]	; (8002100 <spi1_beriRegistre+0x60>)
 80020d0:	f004 fd61 	bl	8006b96 <HAL_SPI_Transmit>
  pavza();
 80020d4:	f7ff ffce 	bl	8002074 <pavza>
  HAL_SPI_Receive(&hspi1,  buffer, velikost, velikost); // blocking posiljanje....
 80020d8:	79bb      	ldrb	r3, [r7, #6]
 80020da:	b29a      	uxth	r2, r3
 80020dc:	79bb      	ldrb	r3, [r7, #6]
 80020de:	6839      	ldr	r1, [r7, #0]
 80020e0:	4807      	ldr	r0, [pc, #28]	; (8002100 <spi1_beriRegistre+0x60>)
 80020e2:	f004 fec6 	bl	8006e72 <HAL_SPI_Receive>
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_SET);
 80020e6:	2201      	movs	r2, #1
 80020e8:	2108      	movs	r1, #8
 80020ea:	4804      	ldr	r0, [pc, #16]	; (80020fc <spi1_beriRegistre+0x5c>)
 80020ec:	f001 f994 	bl	8003418 <HAL_GPIO_WritePin>
  pavza();
 80020f0:	f7ff ffc0 	bl	8002074 <pavza>
}
 80020f4:	bf00      	nop
 80020f6:	3708      	adds	r7, #8
 80020f8:	46bd      	mov	sp, r7
 80020fa:	bd80      	pop	{r7, pc}
 80020fc:	48001000 	.word	0x48001000
 8002100:	20000488 	.word	0x20000488

08002104 <i2c1_pisiRegister>:

/////////////////////////////////////////////////////////////////////////////////// I2C1
///////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////
uint8_t i2c1_pisiRegister(uint8_t naprava, uint8_t reg, uint8_t podatek)
{
 8002104:	b580      	push	{r7, lr}
 8002106:	b086      	sub	sp, #24
 8002108:	af04      	add	r7, sp, #16
 800210a:	4603      	mov	r3, r0
 800210c:	71fb      	strb	r3, [r7, #7]
 800210e:	460b      	mov	r3, r1
 8002110:	71bb      	strb	r3, [r7, #6]
 8002112:	4613      	mov	r3, r2
 8002114:	717b      	strb	r3, [r7, #5]
  naprava <<= 1;
 8002116:	79fb      	ldrb	r3, [r7, #7]
 8002118:	005b      	lsls	r3, r3, #1
 800211a:	71fb      	strb	r3, [r7, #7]
  return HAL_I2C_Mem_Write(&hi2c1, naprava, reg, I2C_MEMADD_SIZE_8BIT, &podatek, 1, 10);
 800211c:	79fb      	ldrb	r3, [r7, #7]
 800211e:	b299      	uxth	r1, r3
 8002120:	79bb      	ldrb	r3, [r7, #6]
 8002122:	b29a      	uxth	r2, r3
 8002124:	230a      	movs	r3, #10
 8002126:	9302      	str	r3, [sp, #8]
 8002128:	2301      	movs	r3, #1
 800212a:	9301      	str	r3, [sp, #4]
 800212c:	1d7b      	adds	r3, r7, #5
 800212e:	9300      	str	r3, [sp, #0]
 8002130:	2301      	movs	r3, #1
 8002132:	4804      	ldr	r0, [pc, #16]	; (8002144 <i2c1_pisiRegister+0x40>)
 8002134:	f001 fa18 	bl	8003568 <HAL_I2C_Mem_Write>
 8002138:	4603      	mov	r3, r0
}
 800213a:	4618      	mov	r0, r3
 800213c:	3708      	adds	r7, #8
 800213e:	46bd      	mov	sp, r7
 8002140:	bd80      	pop	{r7, pc}
 8002142:	bf00      	nop
 8002144:	2000043c 	.word	0x2000043c

08002148 <i2c1_beriRegistre>:

void i2c1_beriRegistre(uint8_t naprava, uint8_t reg, uint8_t* podatek, uint8_t dolzina)
{
 8002148:	b580      	push	{r7, lr}
 800214a:	b086      	sub	sp, #24
 800214c:	af04      	add	r7, sp, #16
 800214e:	603a      	str	r2, [r7, #0]
 8002150:	461a      	mov	r2, r3
 8002152:	4603      	mov	r3, r0
 8002154:	71fb      	strb	r3, [r7, #7]
 8002156:	460b      	mov	r3, r1
 8002158:	71bb      	strb	r3, [r7, #6]
 800215a:	4613      	mov	r3, r2
 800215c:	717b      	strb	r3, [r7, #5]
  if ((dolzina>1)&&(naprava==0x19))  // ce je naprava 0x19 moramo postaviti ta bit, ce zelimo brati vec zlogov
 800215e:	797b      	ldrb	r3, [r7, #5]
 8002160:	2b01      	cmp	r3, #1
 8002162:	d906      	bls.n	8002172 <i2c1_beriRegistre+0x2a>
 8002164:	79fb      	ldrb	r3, [r7, #7]
 8002166:	2b19      	cmp	r3, #25
 8002168:	d103      	bne.n	8002172 <i2c1_beriRegistre+0x2a>
    reg |= 0x80;
 800216a:	79bb      	ldrb	r3, [r7, #6]
 800216c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002170:	71bb      	strb	r3, [r7, #6]
  naprava <<= 1;
 8002172:	79fb      	ldrb	r3, [r7, #7]
 8002174:	005b      	lsls	r3, r3, #1
 8002176:	71fb      	strb	r3, [r7, #7]
  HAL_I2C_Mem_Read(&hi2c1, naprava, reg, I2C_MEMADD_SIZE_8BIT, podatek, dolzina, dolzina);
 8002178:	79fb      	ldrb	r3, [r7, #7]
 800217a:	b299      	uxth	r1, r3
 800217c:	79bb      	ldrb	r3, [r7, #6]
 800217e:	b298      	uxth	r0, r3
 8002180:	797b      	ldrb	r3, [r7, #5]
 8002182:	b29b      	uxth	r3, r3
 8002184:	797a      	ldrb	r2, [r7, #5]
 8002186:	9202      	str	r2, [sp, #8]
 8002188:	9301      	str	r3, [sp, #4]
 800218a:	683b      	ldr	r3, [r7, #0]
 800218c:	9300      	str	r3, [sp, #0]
 800218e:	2301      	movs	r3, #1
 8002190:	4602      	mov	r2, r0
 8002192:	4803      	ldr	r0, [pc, #12]	; (80021a0 <i2c1_beriRegistre+0x58>)
 8002194:	f001 fafc 	bl	8003790 <HAL_I2C_Mem_Read>
}
 8002198:	bf00      	nop
 800219a:	3708      	adds	r7, #8
 800219c:	46bd      	mov	sp, r7
 800219e:	bd80      	pop	{r7, pc}
 80021a0:	2000043c 	.word	0x2000043c

080021a4 <initLSM303DLHC>:

void initLSM303DLHC()
{
 80021a4:	b580      	push	{r7, lr}
 80021a6:	af00      	add	r7, sp, #0
  HAL_Delay(10);
 80021a8:	200a      	movs	r0, #10
 80021aa:	f000 fe87 	bl	8002ebc <HAL_Delay>
  // Za potrebe testa, moramo testni napravi sporociti kateri senzor imamo
  #define OLD_SENSOR 0x73 // Odkomentiramo za LSM303DLHC / stari senzor
  //#define NEW_SENSOR 0x6E // Odkomentiramo za LSM303AGR / novi senzor

  #if defined(OLD_SENSOR) && !defined(NEW_SENSOR)
  i2c1_pisiRegister(0x1e, 0x4F, OLD_SENSOR); // Povemo testni napravi, da imamo stari senzor
 80021ae:	2273      	movs	r2, #115	; 0x73
 80021b0:	214f      	movs	r1, #79	; 0x4f
 80021b2:	201e      	movs	r0, #30
 80021b4:	f7ff ffa6 	bl	8002104 <i2c1_pisiRegister>
  #elif !defined(OLD_SENSOR) && defined(NEW_SENSOR)
  i2c1_pisiRegister(0x1e, 0x4F, NEW_SENSOR); // Povemo testni napravi, da imamo novi senzor
  #else
  for(;;); // V primeru napake, pocakamo tukaj
  #endif
  HAL_Delay(100);
 80021b8:	2064      	movs	r0, #100	; 0x64
 80021ba:	f000 fe7f 	bl	8002ebc <HAL_Delay>

  // inicializiraj pospeskometer
  i2c1_pisiRegister(0x19, 0x20, 0x57);  // zbudi pospeskometer in omogoci osi
 80021be:	2257      	movs	r2, #87	; 0x57
 80021c0:	2120      	movs	r1, #32
 80021c2:	2019      	movs	r0, #25
 80021c4:	f7ff ff9e 	bl	8002104 <i2c1_pisiRegister>
  i2c1_pisiRegister(0x19, 0x22, 0x08);  // nastavi posodobitev samo ko se prebere vrednost ter visoko locljivost
 80021c8:	2208      	movs	r2, #8
 80021ca:	2122      	movs	r1, #34	; 0x22
 80021cc:	2019      	movs	r0, #25
 80021ce:	f7ff ff99 	bl	8002104 <i2c1_pisiRegister>
  i2c1_pisiRegister(0x19, 0x23, 0x00);
 80021d2:	2200      	movs	r2, #0
 80021d4:	2123      	movs	r1, #35	; 0x23
 80021d6:	2019      	movs	r0, #25
 80021d8:	f7ff ff94 	bl	8002104 <i2c1_pisiRegister>
}
 80021dc:	bf00      	nop
 80021de:	bd80      	pop	{r7, pc}

080021e0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80021e0:	b5b0      	push	{r4, r5, r7, lr}
 80021e2:	b09c      	sub	sp, #112	; 0x70
 80021e4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80021e6:	f000 fe03 	bl	8002df0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80021ea:	f000 fb7f 	bl	80028ec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80021ee:	f000 fc59 	bl	8002aa4 <MX_GPIO_Init>
  MX_I2C1_Init();
 80021f2:	f000 fbdb 	bl	80029ac <MX_I2C1_Init>
  MX_SPI1_Init();
 80021f6:	f000 fc17 	bl	8002a28 <MX_SPI1_Init>
  MX_USB_DEVICE_Init();
 80021fa:	f008 ff2d 	bl	800b058 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
  __HAL_I2C_ENABLE(&hi2c1);
 80021fe:	4b52      	ldr	r3, [pc, #328]	; (8002348 <main+0x168>)
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	681a      	ldr	r2, [r3, #0]
 8002204:	4b50      	ldr	r3, [pc, #320]	; (8002348 <main+0x168>)
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	f042 0201 	orr.w	r2, r2, #1
 800220c:	601a      	str	r2, [r3, #0]
  initLSM303DLHC();
 800220e:	f7ff ffc9 	bl	80021a4 <initLSM303DLHC>

  int16_t meritev[4];
  meritev[0] = 0xaaab;// glava za zaznamek zacetek paketa
 8002212:	f64a 23ab 	movw	r3, #43691	; 0xaaab
 8002216:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  uint8_t switch_mode = 0;
 800221a:	2300      	movs	r3, #0
 800221c:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
  uint8_t switch_usb = 0;
 8002220:	2300      	movs	r3, #0
 8002222:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f

  uint16_t rawACC[3] = {0, 0, 0};
 8002226:	2300      	movs	r3, #0
 8002228:	873b      	strh	r3, [r7, #56]	; 0x38
 800222a:	2300      	movs	r3, #0
 800222c:	877b      	strh	r3, [r7, #58]	; 0x3a
 800222e:	2300      	movs	r3, #0
 8002230:	87bb      	strh	r3, [r7, #60]	; 0x3c
  uint16_t rawGYR[3] = {0, 0, 0};;
 8002232:	2300      	movs	r3, #0
 8002234:	863b      	strh	r3, [r7, #48]	; 0x30
 8002236:	2300      	movs	r3, #0
 8002238:	867b      	strh	r3, [r7, #50]	; 0x32
 800223a:	2300      	movs	r3, #0
 800223c:	86bb      	strh	r3, [r7, #52]	; 0x34
  uint16_t rawMAG[3] = {0, 0, 0};;
 800223e:	2300      	movs	r3, #0
 8002240:	853b      	strh	r3, [r7, #40]	; 0x28
 8002242:	2300      	movs	r3, #0
 8002244:	857b      	strh	r3, [r7, #42]	; 0x2a
 8002246:	2300      	movs	r3, #0
 8002248:	85bb      	strh	r3, [r7, #44]	; 0x2c

  uint16_t rawLatestIMU[10] = {0,0,0,0,0,0,0,0,0,0};
 800224a:	f107 0314 	add.w	r3, r7, #20
 800224e:	2200      	movs	r2, #0
 8002250:	601a      	str	r2, [r3, #0]
 8002252:	605a      	str	r2, [r3, #4]
 8002254:	609a      	str	r2, [r3, #8]
 8002256:	60da      	str	r2, [r3, #12]
 8002258:	611a      	str	r2, [r3, #16]
  rawLatestIMU[0] = 0xaaab;
 800225a:	f64a 23ab 	movw	r3, #43691	; 0xaaab
 800225e:	82bb      	strh	r3, [r7, #20]

  float boardOrientation[4] = {0.0,0.0,0.0,0.0};
 8002260:	1d3b      	adds	r3, r7, #4
 8002262:	2200      	movs	r2, #0
 8002264:	601a      	str	r2, [r3, #0]
 8002266:	605a      	str	r2, [r3, #4]
 8002268:	609a      	str	r2, [r3, #8]
 800226a:	60da      	str	r2, [r3, #12]
  *(uint16_t *)&boardOrientation[0] = (uint16_t)0xaaab;
 800226c:	1d3b      	adds	r3, r7, #4
 800226e:	f64a 22ab 	movw	r2, #43691	; 0xaaab
 8002272:	801a      	strh	r2, [r3, #0]

  float gyr_x = 0.0;
 8002274:	f04f 0300 	mov.w	r3, #0
 8002278:	66bb      	str	r3, [r7, #104]	; 0x68
  float gyr_y = 0.0;
 800227a:	f04f 0300 	mov.w	r3, #0
 800227e:	667b      	str	r3, [r7, #100]	; 0x64
  float gyr_z = 0.0;
 8002280:	f04f 0300 	mov.w	r3, #0
 8002284:	663b      	str	r3, [r7, #96]	; 0x60

  float acc_x = 0.0;
 8002286:	f04f 0300 	mov.w	r3, #0
 800228a:	65fb      	str	r3, [r7, #92]	; 0x5c
  float acc_y = 0.0;
 800228c:	f04f 0300 	mov.w	r3, #0
 8002290:	65bb      	str	r3, [r7, #88]	; 0x58
  float acc_z = 0.0;
 8002292:	f04f 0300 	mov.w	r3, #0
 8002296:	657b      	str	r3, [r7, #84]	; 0x54

  float mag_x = 0.0;
 8002298:	f04f 0300 	mov.w	r3, #0
 800229c:	653b      	str	r3, [r7, #80]	; 0x50
  float mag_y = 0.0;
 800229e:	f04f 0300 	mov.w	r3, #0
 80022a2:	64fb      	str	r3, [r7, #76]	; 0x4c
  float mag_z = 0.0;
 80022a4:	f04f 0300 	mov.w	r3, #0
 80022a8:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(isr_acc) {
 80022aa:	4b28      	ldr	r3, [pc, #160]	; (800234c <main+0x16c>)
 80022ac:	781b      	ldrb	r3, [r3, #0]
 80022ae:	b2db      	uxtb	r3, r3
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d00f      	beq.n	80022d4 <main+0xf4>
		  i2c1_beriRegistre(0x19, 0x28, (uint8_t*)&rawACC[0], 6);
 80022b4:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80022b8:	2306      	movs	r3, #6
 80022ba:	2128      	movs	r1, #40	; 0x28
 80022bc:	2019      	movs	r0, #25
 80022be:	f7ff ff43 	bl	8002148 <i2c1_beriRegistre>

		  rawLatestIMU[1] = rawACC[0];
 80022c2:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80022c4:	82fb      	strh	r3, [r7, #22]
		  rawLatestIMU[2] = rawACC[1];
 80022c6:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80022c8:	833b      	strh	r3, [r7, #24]
		  rawLatestIMU[3] = rawACC[2];
 80022ca:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80022cc:	837b      	strh	r3, [r7, #26]

		  isr_acc = 0;
 80022ce:	4b1f      	ldr	r3, [pc, #124]	; (800234c <main+0x16c>)
 80022d0:	2200      	movs	r2, #0
 80022d2:	701a      	strb	r2, [r3, #0]
	  }
	  if(isr_gyr) {
 80022d4:	4b1e      	ldr	r3, [pc, #120]	; (8002350 <main+0x170>)
 80022d6:	781b      	ldrb	r3, [r3, #0]
 80022d8:	b2db      	uxtb	r3, r3
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d00f      	beq.n	80022fe <main+0x11e>
		  spi1_beriRegistre(0x28, (uint8_t*)&rawGYR[0], 6);
 80022de:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80022e2:	2206      	movs	r2, #6
 80022e4:	4619      	mov	r1, r3
 80022e6:	2028      	movs	r0, #40	; 0x28
 80022e8:	f7ff feda 	bl	80020a0 <spi1_beriRegistre>

		  rawLatestIMU[4] = rawGYR[0];
 80022ec:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80022ee:	83bb      	strh	r3, [r7, #28]
		  rawLatestIMU[5] = rawGYR[1];
 80022f0:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 80022f2:	83fb      	strh	r3, [r7, #30]
		  rawLatestIMU[6] = rawGYR[2];
 80022f4:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80022f6:	843b      	strh	r3, [r7, #32]

		  isr_gyr = 0;
 80022f8:	4b15      	ldr	r3, [pc, #84]	; (8002350 <main+0x170>)
 80022fa:	2200      	movs	r2, #0
 80022fc:	701a      	strb	r2, [r3, #0]
	  }

	  if(isr_mag) {
 80022fe:	4b15      	ldr	r3, [pc, #84]	; (8002354 <main+0x174>)
 8002300:	781b      	ldrb	r3, [r3, #0]
 8002302:	b2db      	uxtb	r3, r3
 8002304:	2b00      	cmp	r3, #0
 8002306:	d00f      	beq.n	8002328 <main+0x148>
		  i2c1_beriRegistre(0x1E, 0x03, (uint8_t*)&rawMAG[0], 6);
 8002308:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800230c:	2306      	movs	r3, #6
 800230e:	2103      	movs	r1, #3
 8002310:	201e      	movs	r0, #30
 8002312:	f7ff ff19 	bl	8002148 <i2c1_beriRegistre>

		  rawLatestIMU[7] = rawMAG[0];
 8002316:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8002318:	847b      	strh	r3, [r7, #34]	; 0x22
		  rawLatestIMU[8] = rawMAG[1];
 800231a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800231c:	84bb      	strh	r3, [r7, #36]	; 0x24
		  rawLatestIMU[9] = rawMAG[2];
 800231e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8002320:	84fb      	strh	r3, [r7, #38]	; 0x26

		  isr_mag = 0;
 8002322:	4b0c      	ldr	r3, [pc, #48]	; (8002354 <main+0x174>)
 8002324:	2200      	movs	r2, #0
 8002326:	701a      	strb	r2, [r3, #0]
	  }

	  if(switch_usb) {
 8002328:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800232c:	2b00      	cmp	r3, #0
 800232e:	d0bc      	beq.n	80022aa <main+0xca>
		  if(switch_mode) {
 8002330:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 8002334:	2b00      	cmp	r3, #0
 8002336:	d00f      	beq.n	8002358 <main+0x178>
			  CDC_Transmit_FS((uint8_t*)&rawLatestIMU, 20);
 8002338:	f107 0314 	add.w	r3, r7, #20
 800233c:	2114      	movs	r1, #20
 800233e:	4618      	mov	r0, r3
 8002340:	f008 ff48 	bl	800b1d4 <CDC_Transmit_FS>
 8002344:	e2bd      	b.n	80028c2 <main+0x6e2>
 8002346:	bf00      	nop
 8002348:	2000043c 	.word	0x2000043c
 800234c:	20000008 	.word	0x20000008
 8002350:	20000009 	.word	0x20000009
 8002354:	2000000a 	.word	0x2000000a
		  } else {
			  gyr_x = ((float)rawLatestIMU[4] / 32767.0 * 250.0 - GYR_X_BIAS) * M_PI / 180.0;
 8002358:	8bbb      	ldrh	r3, [r7, #28]
 800235a:	ee07 3a90 	vmov	s15, r3
 800235e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002362:	ee17 0a90 	vmov	r0, s15
 8002366:	f7fe f893 	bl	8000490 <__aeabi_f2d>
 800236a:	a3d7      	add	r3, pc, #860	; (adr r3, 80026c8 <main+0x4e8>)
 800236c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002370:	f7fe fa10 	bl	8000794 <__aeabi_ddiv>
 8002374:	4603      	mov	r3, r0
 8002376:	460c      	mov	r4, r1
 8002378:	4618      	mov	r0, r3
 800237a:	4621      	mov	r1, r4
 800237c:	f04f 0200 	mov.w	r2, #0
 8002380:	4be1      	ldr	r3, [pc, #900]	; (8002708 <main+0x528>)
 8002382:	f7fe f8dd 	bl	8000540 <__aeabi_dmul>
 8002386:	4603      	mov	r3, r0
 8002388:	460c      	mov	r4, r1
 800238a:	4618      	mov	r0, r3
 800238c:	4621      	mov	r1, r4
 800238e:	a3cc      	add	r3, pc, #816	; (adr r3, 80026c0 <main+0x4e0>)
 8002390:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002394:	f7fe f8d4 	bl	8000540 <__aeabi_dmul>
 8002398:	4603      	mov	r3, r0
 800239a:	460c      	mov	r4, r1
 800239c:	4618      	mov	r0, r3
 800239e:	4621      	mov	r1, r4
 80023a0:	f04f 0200 	mov.w	r2, #0
 80023a4:	4bd9      	ldr	r3, [pc, #868]	; (800270c <main+0x52c>)
 80023a6:	f7fe f9f5 	bl	8000794 <__aeabi_ddiv>
 80023aa:	4603      	mov	r3, r0
 80023ac:	460c      	mov	r4, r1
 80023ae:	4618      	mov	r0, r3
 80023b0:	4621      	mov	r1, r4
 80023b2:	f7fe fb75 	bl	8000aa0 <__aeabi_d2f>
 80023b6:	4603      	mov	r3, r0
 80023b8:	66bb      	str	r3, [r7, #104]	; 0x68
			  gyr_y = ((float)rawLatestIMU[5] / 32767.0 * 250.0 - GYR_X_BIAS) * M_PI / 180.0;
 80023ba:	8bfb      	ldrh	r3, [r7, #30]
 80023bc:	ee07 3a90 	vmov	s15, r3
 80023c0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80023c4:	ee17 0a90 	vmov	r0, s15
 80023c8:	f7fe f862 	bl	8000490 <__aeabi_f2d>
 80023cc:	a3be      	add	r3, pc, #760	; (adr r3, 80026c8 <main+0x4e8>)
 80023ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023d2:	f7fe f9df 	bl	8000794 <__aeabi_ddiv>
 80023d6:	4603      	mov	r3, r0
 80023d8:	460c      	mov	r4, r1
 80023da:	4618      	mov	r0, r3
 80023dc:	4621      	mov	r1, r4
 80023de:	f04f 0200 	mov.w	r2, #0
 80023e2:	4bc9      	ldr	r3, [pc, #804]	; (8002708 <main+0x528>)
 80023e4:	f7fe f8ac 	bl	8000540 <__aeabi_dmul>
 80023e8:	4603      	mov	r3, r0
 80023ea:	460c      	mov	r4, r1
 80023ec:	4618      	mov	r0, r3
 80023ee:	4621      	mov	r1, r4
 80023f0:	a3b3      	add	r3, pc, #716	; (adr r3, 80026c0 <main+0x4e0>)
 80023f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023f6:	f7fe f8a3 	bl	8000540 <__aeabi_dmul>
 80023fa:	4603      	mov	r3, r0
 80023fc:	460c      	mov	r4, r1
 80023fe:	4618      	mov	r0, r3
 8002400:	4621      	mov	r1, r4
 8002402:	f04f 0200 	mov.w	r2, #0
 8002406:	4bc1      	ldr	r3, [pc, #772]	; (800270c <main+0x52c>)
 8002408:	f7fe f9c4 	bl	8000794 <__aeabi_ddiv>
 800240c:	4603      	mov	r3, r0
 800240e:	460c      	mov	r4, r1
 8002410:	4618      	mov	r0, r3
 8002412:	4621      	mov	r1, r4
 8002414:	f7fe fb44 	bl	8000aa0 <__aeabi_d2f>
 8002418:	4603      	mov	r3, r0
 800241a:	667b      	str	r3, [r7, #100]	; 0x64
			  gyr_z = ((float)rawLatestIMU[6] / 32767.0 * 250.0 - GYR_X_BIAS) * M_PI / 180.0;
 800241c:	8c3b      	ldrh	r3, [r7, #32]
 800241e:	ee07 3a90 	vmov	s15, r3
 8002422:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002426:	ee17 0a90 	vmov	r0, s15
 800242a:	f7fe f831 	bl	8000490 <__aeabi_f2d>
 800242e:	a3a6      	add	r3, pc, #664	; (adr r3, 80026c8 <main+0x4e8>)
 8002430:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002434:	f7fe f9ae 	bl	8000794 <__aeabi_ddiv>
 8002438:	4603      	mov	r3, r0
 800243a:	460c      	mov	r4, r1
 800243c:	4618      	mov	r0, r3
 800243e:	4621      	mov	r1, r4
 8002440:	f04f 0200 	mov.w	r2, #0
 8002444:	4bb0      	ldr	r3, [pc, #704]	; (8002708 <main+0x528>)
 8002446:	f7fe f87b 	bl	8000540 <__aeabi_dmul>
 800244a:	4603      	mov	r3, r0
 800244c:	460c      	mov	r4, r1
 800244e:	4618      	mov	r0, r3
 8002450:	4621      	mov	r1, r4
 8002452:	a39b      	add	r3, pc, #620	; (adr r3, 80026c0 <main+0x4e0>)
 8002454:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002458:	f7fe f872 	bl	8000540 <__aeabi_dmul>
 800245c:	4603      	mov	r3, r0
 800245e:	460c      	mov	r4, r1
 8002460:	4618      	mov	r0, r3
 8002462:	4621      	mov	r1, r4
 8002464:	f04f 0200 	mov.w	r2, #0
 8002468:	4ba8      	ldr	r3, [pc, #672]	; (800270c <main+0x52c>)
 800246a:	f7fe f993 	bl	8000794 <__aeabi_ddiv>
 800246e:	4603      	mov	r3, r0
 8002470:	460c      	mov	r4, r1
 8002472:	4618      	mov	r0, r3
 8002474:	4621      	mov	r1, r4
 8002476:	f7fe fb13 	bl	8000aa0 <__aeabi_d2f>
 800247a:	4603      	mov	r3, r0
 800247c:	663b      	str	r3, [r7, #96]	; 0x60

			  acc_x = (float)rawLatestIMU[1] / 32767.0 * 2.0;
 800247e:	8afb      	ldrh	r3, [r7, #22]
 8002480:	ee07 3a90 	vmov	s15, r3
 8002484:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002488:	ee17 0a90 	vmov	r0, s15
 800248c:	f7fe f800 	bl	8000490 <__aeabi_f2d>
 8002490:	a38d      	add	r3, pc, #564	; (adr r3, 80026c8 <main+0x4e8>)
 8002492:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002496:	f7fe f97d 	bl	8000794 <__aeabi_ddiv>
 800249a:	4603      	mov	r3, r0
 800249c:	460c      	mov	r4, r1
 800249e:	4618      	mov	r0, r3
 80024a0:	4621      	mov	r1, r4
 80024a2:	4602      	mov	r2, r0
 80024a4:	460b      	mov	r3, r1
 80024a6:	f7fd fe95 	bl	80001d4 <__adddf3>
 80024aa:	4603      	mov	r3, r0
 80024ac:	460c      	mov	r4, r1
 80024ae:	4618      	mov	r0, r3
 80024b0:	4621      	mov	r1, r4
 80024b2:	f7fe faf5 	bl	8000aa0 <__aeabi_d2f>
 80024b6:	4603      	mov	r3, r0
 80024b8:	65fb      	str	r3, [r7, #92]	; 0x5c
			  acc_y = (float)rawLatestIMU[2] / 32767.0 * 2.0;
 80024ba:	8b3b      	ldrh	r3, [r7, #24]
 80024bc:	ee07 3a90 	vmov	s15, r3
 80024c0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80024c4:	ee17 0a90 	vmov	r0, s15
 80024c8:	f7fd ffe2 	bl	8000490 <__aeabi_f2d>
 80024cc:	a37e      	add	r3, pc, #504	; (adr r3, 80026c8 <main+0x4e8>)
 80024ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024d2:	f7fe f95f 	bl	8000794 <__aeabi_ddiv>
 80024d6:	4603      	mov	r3, r0
 80024d8:	460c      	mov	r4, r1
 80024da:	4618      	mov	r0, r3
 80024dc:	4621      	mov	r1, r4
 80024de:	4602      	mov	r2, r0
 80024e0:	460b      	mov	r3, r1
 80024e2:	f7fd fe77 	bl	80001d4 <__adddf3>
 80024e6:	4603      	mov	r3, r0
 80024e8:	460c      	mov	r4, r1
 80024ea:	4618      	mov	r0, r3
 80024ec:	4621      	mov	r1, r4
 80024ee:	f7fe fad7 	bl	8000aa0 <__aeabi_d2f>
 80024f2:	4603      	mov	r3, r0
 80024f4:	65bb      	str	r3, [r7, #88]	; 0x58
			  acc_z = (float)rawLatestIMU[3] / 32767.0 * 2.0;
 80024f6:	8b7b      	ldrh	r3, [r7, #26]
 80024f8:	ee07 3a90 	vmov	s15, r3
 80024fc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002500:	ee17 0a90 	vmov	r0, s15
 8002504:	f7fd ffc4 	bl	8000490 <__aeabi_f2d>
 8002508:	a36f      	add	r3, pc, #444	; (adr r3, 80026c8 <main+0x4e8>)
 800250a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800250e:	f7fe f941 	bl	8000794 <__aeabi_ddiv>
 8002512:	4603      	mov	r3, r0
 8002514:	460c      	mov	r4, r1
 8002516:	4618      	mov	r0, r3
 8002518:	4621      	mov	r1, r4
 800251a:	4602      	mov	r2, r0
 800251c:	460b      	mov	r3, r1
 800251e:	f7fd fe59 	bl	80001d4 <__adddf3>
 8002522:	4603      	mov	r3, r0
 8002524:	460c      	mov	r4, r1
 8002526:	4618      	mov	r0, r3
 8002528:	4621      	mov	r1, r4
 800252a:	f7fe fab9 	bl	8000aa0 <__aeabi_d2f>
 800252e:	4603      	mov	r3, r0
 8002530:	657b      	str	r3, [r7, #84]	; 0x54

			  mag_x = (((float)rawLatestIMU[7] / 32767.0 * 1.3) + MAG_X_OFFSET) / MAG_X_SCALE;
 8002532:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8002534:	ee07 3a90 	vmov	s15, r3
 8002538:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800253c:	ee17 0a90 	vmov	r0, s15
 8002540:	f7fd ffa6 	bl	8000490 <__aeabi_f2d>
 8002544:	a360      	add	r3, pc, #384	; (adr r3, 80026c8 <main+0x4e8>)
 8002546:	e9d3 2300 	ldrd	r2, r3, [r3]
 800254a:	f7fe f923 	bl	8000794 <__aeabi_ddiv>
 800254e:	4603      	mov	r3, r0
 8002550:	460c      	mov	r4, r1
 8002552:	4618      	mov	r0, r3
 8002554:	4621      	mov	r1, r4
 8002556:	a35e      	add	r3, pc, #376	; (adr r3, 80026d0 <main+0x4f0>)
 8002558:	e9d3 2300 	ldrd	r2, r3, [r3]
 800255c:	f7fd fff0 	bl	8000540 <__aeabi_dmul>
 8002560:	4603      	mov	r3, r0
 8002562:	460c      	mov	r4, r1
 8002564:	4618      	mov	r0, r3
 8002566:	4621      	mov	r1, r4
 8002568:	a35b      	add	r3, pc, #364	; (adr r3, 80026d8 <main+0x4f8>)
 800256a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800256e:	f7fd fe31 	bl	80001d4 <__adddf3>
 8002572:	4603      	mov	r3, r0
 8002574:	460c      	mov	r4, r1
 8002576:	4618      	mov	r0, r3
 8002578:	4621      	mov	r1, r4
 800257a:	a359      	add	r3, pc, #356	; (adr r3, 80026e0 <main+0x500>)
 800257c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002580:	f7fe f908 	bl	8000794 <__aeabi_ddiv>
 8002584:	4603      	mov	r3, r0
 8002586:	460c      	mov	r4, r1
 8002588:	4618      	mov	r0, r3
 800258a:	4621      	mov	r1, r4
 800258c:	f7fe fa88 	bl	8000aa0 <__aeabi_d2f>
 8002590:	4603      	mov	r3, r0
 8002592:	653b      	str	r3, [r7, #80]	; 0x50
			  mag_y = (((float)rawLatestIMU[8] / 32767.0 * 1.3) + MAG_Y_OFFSET) / MAG_Y_SCALE;
 8002594:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002596:	ee07 3a90 	vmov	s15, r3
 800259a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800259e:	ee17 0a90 	vmov	r0, s15
 80025a2:	f7fd ff75 	bl	8000490 <__aeabi_f2d>
 80025a6:	a348      	add	r3, pc, #288	; (adr r3, 80026c8 <main+0x4e8>)
 80025a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025ac:	f7fe f8f2 	bl	8000794 <__aeabi_ddiv>
 80025b0:	4603      	mov	r3, r0
 80025b2:	460c      	mov	r4, r1
 80025b4:	4618      	mov	r0, r3
 80025b6:	4621      	mov	r1, r4
 80025b8:	a345      	add	r3, pc, #276	; (adr r3, 80026d0 <main+0x4f0>)
 80025ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025be:	f7fd ffbf 	bl	8000540 <__aeabi_dmul>
 80025c2:	4603      	mov	r3, r0
 80025c4:	460c      	mov	r4, r1
 80025c6:	4618      	mov	r0, r3
 80025c8:	4621      	mov	r1, r4
 80025ca:	a347      	add	r3, pc, #284	; (adr r3, 80026e8 <main+0x508>)
 80025cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025d0:	f7fd fdfe 	bl	80001d0 <__aeabi_dsub>
 80025d4:	4603      	mov	r3, r0
 80025d6:	460c      	mov	r4, r1
 80025d8:	4618      	mov	r0, r3
 80025da:	4621      	mov	r1, r4
 80025dc:	a344      	add	r3, pc, #272	; (adr r3, 80026f0 <main+0x510>)
 80025de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025e2:	f7fe f8d7 	bl	8000794 <__aeabi_ddiv>
 80025e6:	4603      	mov	r3, r0
 80025e8:	460c      	mov	r4, r1
 80025ea:	4618      	mov	r0, r3
 80025ec:	4621      	mov	r1, r4
 80025ee:	f7fe fa57 	bl	8000aa0 <__aeabi_d2f>
 80025f2:	4603      	mov	r3, r0
 80025f4:	64fb      	str	r3, [r7, #76]	; 0x4c
			  mag_z = (((float)rawLatestIMU[9] / 32767.0 * 1.3) + MAG_Z_OFFSET) / MAG_Z_SCALE;
 80025f6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80025f8:	ee07 3a90 	vmov	s15, r3
 80025fc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002600:	ee17 0a90 	vmov	r0, s15
 8002604:	f7fd ff44 	bl	8000490 <__aeabi_f2d>
 8002608:	a32f      	add	r3, pc, #188	; (adr r3, 80026c8 <main+0x4e8>)
 800260a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800260e:	f7fe f8c1 	bl	8000794 <__aeabi_ddiv>
 8002612:	4603      	mov	r3, r0
 8002614:	460c      	mov	r4, r1
 8002616:	4618      	mov	r0, r3
 8002618:	4621      	mov	r1, r4
 800261a:	a32d      	add	r3, pc, #180	; (adr r3, 80026d0 <main+0x4f0>)
 800261c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002620:	f7fd ff8e 	bl	8000540 <__aeabi_dmul>
 8002624:	4603      	mov	r3, r0
 8002626:	460c      	mov	r4, r1
 8002628:	4618      	mov	r0, r3
 800262a:	4621      	mov	r1, r4
 800262c:	a332      	add	r3, pc, #200	; (adr r3, 80026f8 <main+0x518>)
 800262e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002632:	f7fd fdcd 	bl	80001d0 <__aeabi_dsub>
 8002636:	4603      	mov	r3, r0
 8002638:	460c      	mov	r4, r1
 800263a:	4618      	mov	r0, r3
 800263c:	4621      	mov	r1, r4
 800263e:	a330      	add	r3, pc, #192	; (adr r3, 8002700 <main+0x520>)
 8002640:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002644:	f7fe f8a6 	bl	8000794 <__aeabi_ddiv>
 8002648:	4603      	mov	r3, r0
 800264a:	460c      	mov	r4, r1
 800264c:	4618      	mov	r0, r3
 800264e:	4621      	mov	r1, r4
 8002650:	f7fe fa26 	bl	8000aa0 <__aeabi_d2f>
 8002654:	4603      	mov	r3, r0
 8002656:	64bb      	str	r3, [r7, #72]	; 0x48

			  MadgwickAHRSupdate(-gyr_x, -gyr_y, gyr_z, acc_x, acc_y, acc_z, mag_x, mag_y, mag_z);
 8002658:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 800265c:	eeb1 7a67 	vneg.f32	s14, s15
 8002660:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 8002664:	eef1 7a67 	vneg.f32	s15, s15
 8002668:	ed97 4a12 	vldr	s8, [r7, #72]	; 0x48
 800266c:	edd7 3a13 	vldr	s7, [r7, #76]	; 0x4c
 8002670:	ed97 3a14 	vldr	s6, [r7, #80]	; 0x50
 8002674:	edd7 2a15 	vldr	s5, [r7, #84]	; 0x54
 8002678:	ed97 2a16 	vldr	s4, [r7, #88]	; 0x58
 800267c:	edd7 1a17 	vldr	s3, [r7, #92]	; 0x5c
 8002680:	ed97 1a18 	vldr	s2, [r7, #96]	; 0x60
 8002684:	eef0 0a67 	vmov.f32	s1, s15
 8002688:	eeb0 0a47 	vmov.f32	s0, s14
 800268c:	f7fe fa58 	bl	8000b40 <MadgwickAHRSupdate>

			  boardOrientation[1] = atan2(2*(q0*q1+q2*q3), 1-2*(q1*q1+q2*q2)) * 180/M_PI;
 8002690:	4b1f      	ldr	r3, [pc, #124]	; (8002710 <main+0x530>)
 8002692:	ed93 7a00 	vldr	s14, [r3]
 8002696:	4b1f      	ldr	r3, [pc, #124]	; (8002714 <main+0x534>)
 8002698:	edd3 7a00 	vldr	s15, [r3]
 800269c:	ee27 7a27 	vmul.f32	s14, s14, s15
 80026a0:	4b1d      	ldr	r3, [pc, #116]	; (8002718 <main+0x538>)
 80026a2:	edd3 6a00 	vldr	s13, [r3]
 80026a6:	4b1d      	ldr	r3, [pc, #116]	; (800271c <main+0x53c>)
 80026a8:	edd3 7a00 	vldr	s15, [r3]
 80026ac:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80026b0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80026b4:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80026b8:	ee17 0a90 	vmov	r0, s15
 80026bc:	e030      	b.n	8002720 <main+0x540>
 80026be:	bf00      	nop
 80026c0:	60000000 	.word	0x60000000
 80026c4:	400921fb 	.word	0x400921fb
 80026c8:	00000000 	.word	0x00000000
 80026cc:	40dfffc0 	.word	0x40dfffc0
 80026d0:	cccccccd 	.word	0xcccccccd
 80026d4:	3ff4cccc 	.word	0x3ff4cccc
 80026d8:	dac0b60f 	.word	0xdac0b60f
 80026dc:	3f6f438c 	.word	0x3f6f438c
 80026e0:	a4a7e93e 	.word	0xa4a7e93e
 80026e4:	3f969ef6 	.word	0x3f969ef6
 80026e8:	119486c8 	.word	0x119486c8
 80026ec:	3f248cbb 	.word	0x3f248cbb
 80026f0:	356e5c5c 	.word	0x356e5c5c
 80026f4:	3f98747d 	.word	0x3f98747d
 80026f8:	b11cda46 	.word	0xb11cda46
 80026fc:	3f478a63 	.word	0x3f478a63
 8002700:	543c159b 	.word	0x543c159b
 8002704:	3f94c3ae 	.word	0x3f94c3ae
 8002708:	406f4000 	.word	0x406f4000
 800270c:	40668000 	.word	0x40668000
 8002710:	20000004 	.word	0x20000004
 8002714:	2000020c 	.word	0x2000020c
 8002718:	20000210 	.word	0x20000210
 800271c:	20000214 	.word	0x20000214
 8002720:	f7fd feb6 	bl	8000490 <__aeabi_f2d>
 8002724:	4604      	mov	r4, r0
 8002726:	460d      	mov	r5, r1
 8002728:	4b6b      	ldr	r3, [pc, #428]	; (80028d8 <main+0x6f8>)
 800272a:	ed93 7a00 	vldr	s14, [r3]
 800272e:	4b6a      	ldr	r3, [pc, #424]	; (80028d8 <main+0x6f8>)
 8002730:	edd3 7a00 	vldr	s15, [r3]
 8002734:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002738:	4b68      	ldr	r3, [pc, #416]	; (80028dc <main+0x6fc>)
 800273a:	edd3 6a00 	vldr	s13, [r3]
 800273e:	4b67      	ldr	r3, [pc, #412]	; (80028dc <main+0x6fc>)
 8002740:	edd3 7a00 	vldr	s15, [r3]
 8002744:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002748:	ee77 7a27 	vadd.f32	s15, s14, s15
 800274c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002750:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002754:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002758:	ee17 0a90 	vmov	r0, s15
 800275c:	f7fd fe98 	bl	8000490 <__aeabi_f2d>
 8002760:	4602      	mov	r2, r0
 8002762:	460b      	mov	r3, r1
 8002764:	ec43 2b11 	vmov	d1, r2, r3
 8002768:	ec45 4b10 	vmov	d0, r4, r5
 800276c:	f009 f9c6 	bl	800bafc <atan2>
 8002770:	ec51 0b10 	vmov	r0, r1, d0
 8002774:	f04f 0200 	mov.w	r2, #0
 8002778:	4b59      	ldr	r3, [pc, #356]	; (80028e0 <main+0x700>)
 800277a:	f7fd fee1 	bl	8000540 <__aeabi_dmul>
 800277e:	4603      	mov	r3, r0
 8002780:	460c      	mov	r4, r1
 8002782:	4618      	mov	r0, r3
 8002784:	4621      	mov	r1, r4
 8002786:	a352      	add	r3, pc, #328	; (adr r3, 80028d0 <main+0x6f0>)
 8002788:	e9d3 2300 	ldrd	r2, r3, [r3]
 800278c:	f7fe f802 	bl	8000794 <__aeabi_ddiv>
 8002790:	4603      	mov	r3, r0
 8002792:	460c      	mov	r4, r1
 8002794:	4618      	mov	r0, r3
 8002796:	4621      	mov	r1, r4
 8002798:	f7fe f982 	bl	8000aa0 <__aeabi_d2f>
 800279c:	4603      	mov	r3, r0
 800279e:	60bb      	str	r3, [r7, #8]
			  boardOrientation[2] = asin(2*(q0*q2-q3*q1)) * 180/M_PI;
 80027a0:	4b50      	ldr	r3, [pc, #320]	; (80028e4 <main+0x704>)
 80027a2:	ed93 7a00 	vldr	s14, [r3]
 80027a6:	4b4d      	ldr	r3, [pc, #308]	; (80028dc <main+0x6fc>)
 80027a8:	edd3 7a00 	vldr	s15, [r3]
 80027ac:	ee27 7a27 	vmul.f32	s14, s14, s15
 80027b0:	4b4d      	ldr	r3, [pc, #308]	; (80028e8 <main+0x708>)
 80027b2:	edd3 6a00 	vldr	s13, [r3]
 80027b6:	4b48      	ldr	r3, [pc, #288]	; (80028d8 <main+0x6f8>)
 80027b8:	edd3 7a00 	vldr	s15, [r3]
 80027bc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80027c0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80027c4:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80027c8:	ee17 0a90 	vmov	r0, s15
 80027cc:	f7fd fe60 	bl	8000490 <__aeabi_f2d>
 80027d0:	4603      	mov	r3, r0
 80027d2:	460c      	mov	r4, r1
 80027d4:	ec44 3b10 	vmov	d0, r3, r4
 80027d8:	f009 f938 	bl	800ba4c <asin>
 80027dc:	ec51 0b10 	vmov	r0, r1, d0
 80027e0:	f04f 0200 	mov.w	r2, #0
 80027e4:	4b3e      	ldr	r3, [pc, #248]	; (80028e0 <main+0x700>)
 80027e6:	f7fd feab 	bl	8000540 <__aeabi_dmul>
 80027ea:	4603      	mov	r3, r0
 80027ec:	460c      	mov	r4, r1
 80027ee:	4618      	mov	r0, r3
 80027f0:	4621      	mov	r1, r4
 80027f2:	a337      	add	r3, pc, #220	; (adr r3, 80028d0 <main+0x6f0>)
 80027f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027f8:	f7fd ffcc 	bl	8000794 <__aeabi_ddiv>
 80027fc:	4603      	mov	r3, r0
 80027fe:	460c      	mov	r4, r1
 8002800:	4618      	mov	r0, r3
 8002802:	4621      	mov	r1, r4
 8002804:	f7fe f94c 	bl	8000aa0 <__aeabi_d2f>
 8002808:	4603      	mov	r3, r0
 800280a:	60fb      	str	r3, [r7, #12]
			  boardOrientation[3] = atan2(2* (q0*q3+q1*q2), 1-2*(q2*q2+q3*q3)) * 180/M_PI;
 800280c:	4b35      	ldr	r3, [pc, #212]	; (80028e4 <main+0x704>)
 800280e:	ed93 7a00 	vldr	s14, [r3]
 8002812:	4b35      	ldr	r3, [pc, #212]	; (80028e8 <main+0x708>)
 8002814:	edd3 7a00 	vldr	s15, [r3]
 8002818:	ee27 7a27 	vmul.f32	s14, s14, s15
 800281c:	4b2e      	ldr	r3, [pc, #184]	; (80028d8 <main+0x6f8>)
 800281e:	edd3 6a00 	vldr	s13, [r3]
 8002822:	4b2e      	ldr	r3, [pc, #184]	; (80028dc <main+0x6fc>)
 8002824:	edd3 7a00 	vldr	s15, [r3]
 8002828:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800282c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002830:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002834:	ee17 0a90 	vmov	r0, s15
 8002838:	f7fd fe2a 	bl	8000490 <__aeabi_f2d>
 800283c:	4604      	mov	r4, r0
 800283e:	460d      	mov	r5, r1
 8002840:	4b26      	ldr	r3, [pc, #152]	; (80028dc <main+0x6fc>)
 8002842:	ed93 7a00 	vldr	s14, [r3]
 8002846:	4b25      	ldr	r3, [pc, #148]	; (80028dc <main+0x6fc>)
 8002848:	edd3 7a00 	vldr	s15, [r3]
 800284c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002850:	4b25      	ldr	r3, [pc, #148]	; (80028e8 <main+0x708>)
 8002852:	edd3 6a00 	vldr	s13, [r3]
 8002856:	4b24      	ldr	r3, [pc, #144]	; (80028e8 <main+0x708>)
 8002858:	edd3 7a00 	vldr	s15, [r3]
 800285c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002860:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002864:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002868:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800286c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002870:	ee17 0a90 	vmov	r0, s15
 8002874:	f7fd fe0c 	bl	8000490 <__aeabi_f2d>
 8002878:	4602      	mov	r2, r0
 800287a:	460b      	mov	r3, r1
 800287c:	ec43 2b11 	vmov	d1, r2, r3
 8002880:	ec45 4b10 	vmov	d0, r4, r5
 8002884:	f009 f93a 	bl	800bafc <atan2>
 8002888:	ec51 0b10 	vmov	r0, r1, d0
 800288c:	f04f 0200 	mov.w	r2, #0
 8002890:	4b13      	ldr	r3, [pc, #76]	; (80028e0 <main+0x700>)
 8002892:	f7fd fe55 	bl	8000540 <__aeabi_dmul>
 8002896:	4603      	mov	r3, r0
 8002898:	460c      	mov	r4, r1
 800289a:	4618      	mov	r0, r3
 800289c:	4621      	mov	r1, r4
 800289e:	a30c      	add	r3, pc, #48	; (adr r3, 80028d0 <main+0x6f0>)
 80028a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028a4:	f7fd ff76 	bl	8000794 <__aeabi_ddiv>
 80028a8:	4603      	mov	r3, r0
 80028aa:	460c      	mov	r4, r1
 80028ac:	4618      	mov	r0, r3
 80028ae:	4621      	mov	r1, r4
 80028b0:	f7fe f8f6 	bl	8000aa0 <__aeabi_d2f>
 80028b4:	4603      	mov	r3, r0
 80028b6:	613b      	str	r3, [r7, #16]

			  CDC_Transmit_FS((uint8_t*)&boardOrientation, 16);
 80028b8:	1d3b      	adds	r3, r7, #4
 80028ba:	2110      	movs	r1, #16
 80028bc:	4618      	mov	r0, r3
 80028be:	f008 fc89 	bl	800b1d4 <CDC_Transmit_FS>
		  }

		  switch_usb = 0;
 80028c2:	2300      	movs	r3, #0
 80028c4:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	  if(isr_acc) {
 80028c8:	e4ef      	b.n	80022aa <main+0xca>
 80028ca:	bf00      	nop
 80028cc:	f3af 8000 	nop.w
 80028d0:	60000000 	.word	0x60000000
 80028d4:	400921fb 	.word	0x400921fb
 80028d8:	2000020c 	.word	0x2000020c
 80028dc:	20000210 	.word	0x20000210
 80028e0:	40668000 	.word	0x40668000
 80028e4:	20000004 	.word	0x20000004
 80028e8:	20000214 	.word	0x20000214

080028ec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80028ec:	b580      	push	{r7, lr}
 80028ee:	b09e      	sub	sp, #120	; 0x78
 80028f0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80028f2:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80028f6:	2228      	movs	r2, #40	; 0x28
 80028f8:	2100      	movs	r1, #0
 80028fa:	4618      	mov	r0, r3
 80028fc:	f009 f89e 	bl	800ba3c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002900:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002904:	2200      	movs	r2, #0
 8002906:	601a      	str	r2, [r3, #0]
 8002908:	605a      	str	r2, [r3, #4]
 800290a:	609a      	str	r2, [r3, #8]
 800290c:	60da      	str	r2, [r3, #12]
 800290e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002910:	463b      	mov	r3, r7
 8002912:	223c      	movs	r2, #60	; 0x3c
 8002914:	2100      	movs	r1, #0
 8002916:	4618      	mov	r0, r3
 8002918:	f009 f890 	bl	800ba3c <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 800291c:	2303      	movs	r3, #3
 800291e:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8002920:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8002924:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8002926:	2300      	movs	r3, #0
 8002928:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800292a:	2301      	movs	r3, #1
 800292c:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800292e:	2310      	movs	r3, #16
 8002930:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002932:	2302      	movs	r3, #2
 8002934:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002936:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800293a:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800293c:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8002940:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002942:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002946:	4618      	mov	r0, r3
 8002948:	f002 fddc 	bl	8005504 <HAL_RCC_OscConfig>
 800294c:	4603      	mov	r3, r0
 800294e:	2b00      	cmp	r3, #0
 8002950:	d001      	beq.n	8002956 <SystemClock_Config+0x6a>
  {
    Error_Handler();
 8002952:	f000 f927 	bl	8002ba4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002956:	230f      	movs	r3, #15
 8002958:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800295a:	2302      	movs	r3, #2
 800295c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800295e:	2300      	movs	r3, #0
 8002960:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002962:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002966:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002968:	2300      	movs	r3, #0
 800296a:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800296c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002970:	2102      	movs	r1, #2
 8002972:	4618      	mov	r0, r3
 8002974:	f003 fcce 	bl	8006314 <HAL_RCC_ClockConfig>
 8002978:	4603      	mov	r3, r0
 800297a:	2b00      	cmp	r3, #0
 800297c:	d001      	beq.n	8002982 <SystemClock_Config+0x96>
  {
    Error_Handler();
 800297e:	f000 f911 	bl	8002ba4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_I2C1;
 8002982:	4b09      	ldr	r3, [pc, #36]	; (80029a8 <SystemClock_Config+0xbc>)
 8002984:	603b      	str	r3, [r7, #0]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8002986:	2300      	movs	r3, #0
 8002988:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.USBClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 800298a:	2300      	movs	r3, #0
 800298c:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800298e:	463b      	mov	r3, r7
 8002990:	4618      	mov	r0, r3
 8002992:	f003 fea5 	bl	80066e0 <HAL_RCCEx_PeriphCLKConfig>
 8002996:	4603      	mov	r3, r0
 8002998:	2b00      	cmp	r3, #0
 800299a:	d001      	beq.n	80029a0 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 800299c:	f000 f902 	bl	8002ba4 <Error_Handler>
  }
}
 80029a0:	bf00      	nop
 80029a2:	3778      	adds	r7, #120	; 0x78
 80029a4:	46bd      	mov	sp, r7
 80029a6:	bd80      	pop	{r7, pc}
 80029a8:	00020020 	.word	0x00020020

080029ac <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80029ac:	b580      	push	{r7, lr}
 80029ae:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80029b0:	4b1b      	ldr	r3, [pc, #108]	; (8002a20 <MX_I2C1_Init+0x74>)
 80029b2:	4a1c      	ldr	r2, [pc, #112]	; (8002a24 <MX_I2C1_Init+0x78>)
 80029b4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x0000020B;
 80029b6:	4b1a      	ldr	r3, [pc, #104]	; (8002a20 <MX_I2C1_Init+0x74>)
 80029b8:	f240 220b 	movw	r2, #523	; 0x20b
 80029bc:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80029be:	4b18      	ldr	r3, [pc, #96]	; (8002a20 <MX_I2C1_Init+0x74>)
 80029c0:	2200      	movs	r2, #0
 80029c2:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80029c4:	4b16      	ldr	r3, [pc, #88]	; (8002a20 <MX_I2C1_Init+0x74>)
 80029c6:	2201      	movs	r2, #1
 80029c8:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80029ca:	4b15      	ldr	r3, [pc, #84]	; (8002a20 <MX_I2C1_Init+0x74>)
 80029cc:	2200      	movs	r2, #0
 80029ce:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80029d0:	4b13      	ldr	r3, [pc, #76]	; (8002a20 <MX_I2C1_Init+0x74>)
 80029d2:	2200      	movs	r2, #0
 80029d4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80029d6:	4b12      	ldr	r3, [pc, #72]	; (8002a20 <MX_I2C1_Init+0x74>)
 80029d8:	2200      	movs	r2, #0
 80029da:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80029dc:	4b10      	ldr	r3, [pc, #64]	; (8002a20 <MX_I2C1_Init+0x74>)
 80029de:	2200      	movs	r2, #0
 80029e0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80029e2:	4b0f      	ldr	r3, [pc, #60]	; (8002a20 <MX_I2C1_Init+0x74>)
 80029e4:	2200      	movs	r2, #0
 80029e6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80029e8:	480d      	ldr	r0, [pc, #52]	; (8002a20 <MX_I2C1_Init+0x74>)
 80029ea:	f000 fd2d 	bl	8003448 <HAL_I2C_Init>
 80029ee:	4603      	mov	r3, r0
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d001      	beq.n	80029f8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80029f4:	f000 f8d6 	bl	8002ba4 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80029f8:	2100      	movs	r1, #0
 80029fa:	4809      	ldr	r0, [pc, #36]	; (8002a20 <MX_I2C1_Init+0x74>)
 80029fc:	f001 f9fe 	bl	8003dfc <HAL_I2CEx_ConfigAnalogFilter>
 8002a00:	4603      	mov	r3, r0
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d001      	beq.n	8002a0a <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 8002a06:	f000 f8cd 	bl	8002ba4 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8002a0a:	2100      	movs	r1, #0
 8002a0c:	4804      	ldr	r0, [pc, #16]	; (8002a20 <MX_I2C1_Init+0x74>)
 8002a0e:	f001 fa40 	bl	8003e92 <HAL_I2CEx_ConfigDigitalFilter>
 8002a12:	4603      	mov	r3, r0
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d001      	beq.n	8002a1c <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 8002a18:	f000 f8c4 	bl	8002ba4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002a1c:	bf00      	nop
 8002a1e:	bd80      	pop	{r7, pc}
 8002a20:	2000043c 	.word	0x2000043c
 8002a24:	40005400 	.word	0x40005400

08002a28 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8002a28:	b580      	push	{r7, lr}
 8002a2a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8002a2c:	4b1b      	ldr	r3, [pc, #108]	; (8002a9c <MX_SPI1_Init+0x74>)
 8002a2e:	4a1c      	ldr	r2, [pc, #112]	; (8002aa0 <MX_SPI1_Init+0x78>)
 8002a30:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002a32:	4b1a      	ldr	r3, [pc, #104]	; (8002a9c <MX_SPI1_Init+0x74>)
 8002a34:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002a38:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002a3a:	4b18      	ldr	r3, [pc, #96]	; (8002a9c <MX_SPI1_Init+0x74>)
 8002a3c:	2200      	movs	r2, #0
 8002a3e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002a40:	4b16      	ldr	r3, [pc, #88]	; (8002a9c <MX_SPI1_Init+0x74>)
 8002a42:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8002a46:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8002a48:	4b14      	ldr	r3, [pc, #80]	; (8002a9c <MX_SPI1_Init+0x74>)
 8002a4a:	2202      	movs	r2, #2
 8002a4c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8002a4e:	4b13      	ldr	r3, [pc, #76]	; (8002a9c <MX_SPI1_Init+0x74>)
 8002a50:	2201      	movs	r2, #1
 8002a52:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002a54:	4b11      	ldr	r3, [pc, #68]	; (8002a9c <MX_SPI1_Init+0x74>)
 8002a56:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002a5a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8002a5c:	4b0f      	ldr	r3, [pc, #60]	; (8002a9c <MX_SPI1_Init+0x74>)
 8002a5e:	2210      	movs	r2, #16
 8002a60:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002a62:	4b0e      	ldr	r3, [pc, #56]	; (8002a9c <MX_SPI1_Init+0x74>)
 8002a64:	2200      	movs	r2, #0
 8002a66:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002a68:	4b0c      	ldr	r3, [pc, #48]	; (8002a9c <MX_SPI1_Init+0x74>)
 8002a6a:	2200      	movs	r2, #0
 8002a6c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002a6e:	4b0b      	ldr	r3, [pc, #44]	; (8002a9c <MX_SPI1_Init+0x74>)
 8002a70:	2200      	movs	r2, #0
 8002a72:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8002a74:	4b09      	ldr	r3, [pc, #36]	; (8002a9c <MX_SPI1_Init+0x74>)
 8002a76:	2207      	movs	r2, #7
 8002a78:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8002a7a:	4b08      	ldr	r3, [pc, #32]	; (8002a9c <MX_SPI1_Init+0x74>)
 8002a7c:	2200      	movs	r2, #0
 8002a7e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8002a80:	4b06      	ldr	r3, [pc, #24]	; (8002a9c <MX_SPI1_Init+0x74>)
 8002a82:	2200      	movs	r2, #0
 8002a84:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002a86:	4805      	ldr	r0, [pc, #20]	; (8002a9c <MX_SPI1_Init+0x74>)
 8002a88:	f003 ffda 	bl	8006a40 <HAL_SPI_Init>
 8002a8c:	4603      	mov	r3, r0
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d001      	beq.n	8002a96 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8002a92:	f000 f887 	bl	8002ba4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002a96:	bf00      	nop
 8002a98:	bd80      	pop	{r7, pc}
 8002a9a:	bf00      	nop
 8002a9c:	20000488 	.word	0x20000488
 8002aa0:	40013000 	.word	0x40013000

08002aa4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002aa4:	b580      	push	{r7, lr}
 8002aa6:	b08a      	sub	sp, #40	; 0x28
 8002aa8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002aaa:	f107 0314 	add.w	r3, r7, #20
 8002aae:	2200      	movs	r2, #0
 8002ab0:	601a      	str	r2, [r3, #0]
 8002ab2:	605a      	str	r2, [r3, #4]
 8002ab4:	609a      	str	r2, [r3, #8]
 8002ab6:	60da      	str	r2, [r3, #12]
 8002ab8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002aba:	4b37      	ldr	r3, [pc, #220]	; (8002b98 <MX_GPIO_Init+0xf4>)
 8002abc:	695b      	ldr	r3, [r3, #20]
 8002abe:	4a36      	ldr	r2, [pc, #216]	; (8002b98 <MX_GPIO_Init+0xf4>)
 8002ac0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002ac4:	6153      	str	r3, [r2, #20]
 8002ac6:	4b34      	ldr	r3, [pc, #208]	; (8002b98 <MX_GPIO_Init+0xf4>)
 8002ac8:	695b      	ldr	r3, [r3, #20]
 8002aca:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002ace:	613b      	str	r3, [r7, #16]
 8002ad0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002ad2:	4b31      	ldr	r3, [pc, #196]	; (8002b98 <MX_GPIO_Init+0xf4>)
 8002ad4:	695b      	ldr	r3, [r3, #20]
 8002ad6:	4a30      	ldr	r2, [pc, #192]	; (8002b98 <MX_GPIO_Init+0xf4>)
 8002ad8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8002adc:	6153      	str	r3, [r2, #20]
 8002ade:	4b2e      	ldr	r3, [pc, #184]	; (8002b98 <MX_GPIO_Init+0xf4>)
 8002ae0:	695b      	ldr	r3, [r3, #20]
 8002ae2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002ae6:	60fb      	str	r3, [r7, #12]
 8002ae8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002aea:	4b2b      	ldr	r3, [pc, #172]	; (8002b98 <MX_GPIO_Init+0xf4>)
 8002aec:	695b      	ldr	r3, [r3, #20]
 8002aee:	4a2a      	ldr	r2, [pc, #168]	; (8002b98 <MX_GPIO_Init+0xf4>)
 8002af0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002af4:	6153      	str	r3, [r2, #20]
 8002af6:	4b28      	ldr	r3, [pc, #160]	; (8002b98 <MX_GPIO_Init+0xf4>)
 8002af8:	695b      	ldr	r3, [r3, #20]
 8002afa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002afe:	60bb      	str	r3, [r7, #8]
 8002b00:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b02:	4b25      	ldr	r3, [pc, #148]	; (8002b98 <MX_GPIO_Init+0xf4>)
 8002b04:	695b      	ldr	r3, [r3, #20]
 8002b06:	4a24      	ldr	r2, [pc, #144]	; (8002b98 <MX_GPIO_Init+0xf4>)
 8002b08:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002b0c:	6153      	str	r3, [r2, #20]
 8002b0e:	4b22      	ldr	r3, [pc, #136]	; (8002b98 <MX_GPIO_Init+0xf4>)
 8002b10:	695b      	ldr	r3, [r3, #20]
 8002b12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b16:	607b      	str	r3, [r7, #4]
 8002b18:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b1a:	4b1f      	ldr	r3, [pc, #124]	; (8002b98 <MX_GPIO_Init+0xf4>)
 8002b1c:	695b      	ldr	r3, [r3, #20]
 8002b1e:	4a1e      	ldr	r2, [pc, #120]	; (8002b98 <MX_GPIO_Init+0xf4>)
 8002b20:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002b24:	6153      	str	r3, [r2, #20]
 8002b26:	4b1c      	ldr	r3, [pc, #112]	; (8002b98 <MX_GPIO_Init+0xf4>)
 8002b28:	695b      	ldr	r3, [r3, #20]
 8002b2a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002b2e:	603b      	str	r3, [r7, #0]
 8002b30:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 8002b32:	2200      	movs	r2, #0
 8002b34:	f64f 7108 	movw	r1, #65288	; 0xff08
 8002b38:	4818      	ldr	r0, [pc, #96]	; (8002b9c <MX_GPIO_Init+0xf8>)
 8002b3a:	f000 fc6d 	bl	8003418 <HAL_GPIO_WritePin>
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
                          |LD6_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : DRDY_Pin MEMS_INT3_Pin MEMS_INT4_Pin MEMS_INT1_Pin
                           MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = DRDY_Pin|MEMS_INT3_Pin|MEMS_INT4_Pin|MEMS_INT1_Pin
 8002b3e:	2337      	movs	r3, #55	; 0x37
 8002b40:	617b      	str	r3, [r7, #20]
                          |MEMS_INT2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8002b42:	4b17      	ldr	r3, [pc, #92]	; (8002ba0 <MX_GPIO_Init+0xfc>)
 8002b44:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b46:	2300      	movs	r3, #0
 8002b48:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002b4a:	f107 0314 	add.w	r3, r7, #20
 8002b4e:	4619      	mov	r1, r3
 8002b50:	4812      	ldr	r0, [pc, #72]	; (8002b9c <MX_GPIO_Init+0xf8>)
 8002b52:	f000 fae7 	bl	8003124 <HAL_GPIO_Init>

  /*Configure GPIO pins : CS_I2C_SPI_Pin LD4_Pin LD3_Pin LD5_Pin
                           LD7_Pin LD9_Pin LD10_Pin LD8_Pin
                           LD6_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 8002b56:	f64f 7308 	movw	r3, #65288	; 0xff08
 8002b5a:	617b      	str	r3, [r7, #20]
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
                          |LD6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002b5c:	2301      	movs	r3, #1
 8002b5e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b60:	2300      	movs	r3, #0
 8002b62:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b64:	2300      	movs	r3, #0
 8002b66:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002b68:	f107 0314 	add.w	r3, r7, #20
 8002b6c:	4619      	mov	r1, r3
 8002b6e:	480b      	ldr	r0, [pc, #44]	; (8002b9c <MX_GPIO_Init+0xf8>)
 8002b70:	f000 fad8 	bl	8003124 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8002b74:	2301      	movs	r3, #1
 8002b76:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002b78:	2300      	movs	r3, #0
 8002b7a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b7c:	2300      	movs	r3, #0
 8002b7e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002b80:	f107 0314 	add.w	r3, r7, #20
 8002b84:	4619      	mov	r1, r3
 8002b86:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002b8a:	f000 facb 	bl	8003124 <HAL_GPIO_Init>

}
 8002b8e:	bf00      	nop
 8002b90:	3728      	adds	r7, #40	; 0x28
 8002b92:	46bd      	mov	sp, r7
 8002b94:	bd80      	pop	{r7, pc}
 8002b96:	bf00      	nop
 8002b98:	40021000 	.word	0x40021000
 8002b9c:	48001000 	.word	0x48001000
 8002ba0:	10120000 	.word	0x10120000

08002ba4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002ba4:	b480      	push	{r7}
 8002ba6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8002ba8:	bf00      	nop
 8002baa:	46bd      	mov	sp, r7
 8002bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb0:	4770      	bx	lr
	...

08002bb4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002bb4:	b580      	push	{r7, lr}
 8002bb6:	b082      	sub	sp, #8
 8002bb8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002bba:	4b0f      	ldr	r3, [pc, #60]	; (8002bf8 <HAL_MspInit+0x44>)
 8002bbc:	699b      	ldr	r3, [r3, #24]
 8002bbe:	4a0e      	ldr	r2, [pc, #56]	; (8002bf8 <HAL_MspInit+0x44>)
 8002bc0:	f043 0301 	orr.w	r3, r3, #1
 8002bc4:	6193      	str	r3, [r2, #24]
 8002bc6:	4b0c      	ldr	r3, [pc, #48]	; (8002bf8 <HAL_MspInit+0x44>)
 8002bc8:	699b      	ldr	r3, [r3, #24]
 8002bca:	f003 0301 	and.w	r3, r3, #1
 8002bce:	607b      	str	r3, [r7, #4]
 8002bd0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002bd2:	4b09      	ldr	r3, [pc, #36]	; (8002bf8 <HAL_MspInit+0x44>)
 8002bd4:	69db      	ldr	r3, [r3, #28]
 8002bd6:	4a08      	ldr	r2, [pc, #32]	; (8002bf8 <HAL_MspInit+0x44>)
 8002bd8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002bdc:	61d3      	str	r3, [r2, #28]
 8002bde:	4b06      	ldr	r3, [pc, #24]	; (8002bf8 <HAL_MspInit+0x44>)
 8002be0:	69db      	ldr	r3, [r3, #28]
 8002be2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002be6:	603b      	str	r3, [r7, #0]
 8002be8:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8002bea:	2007      	movs	r0, #7
 8002bec:	f000 fa58 	bl	80030a0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002bf0:	bf00      	nop
 8002bf2:	3708      	adds	r7, #8
 8002bf4:	46bd      	mov	sp, r7
 8002bf6:	bd80      	pop	{r7, pc}
 8002bf8:	40021000 	.word	0x40021000

08002bfc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002bfc:	b580      	push	{r7, lr}
 8002bfe:	b08a      	sub	sp, #40	; 0x28
 8002c00:	af00      	add	r7, sp, #0
 8002c02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c04:	f107 0314 	add.w	r3, r7, #20
 8002c08:	2200      	movs	r2, #0
 8002c0a:	601a      	str	r2, [r3, #0]
 8002c0c:	605a      	str	r2, [r3, #4]
 8002c0e:	609a      	str	r2, [r3, #8]
 8002c10:	60da      	str	r2, [r3, #12]
 8002c12:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	4a17      	ldr	r2, [pc, #92]	; (8002c78 <HAL_I2C_MspInit+0x7c>)
 8002c1a:	4293      	cmp	r3, r2
 8002c1c:	d127      	bne.n	8002c6e <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c1e:	4b17      	ldr	r3, [pc, #92]	; (8002c7c <HAL_I2C_MspInit+0x80>)
 8002c20:	695b      	ldr	r3, [r3, #20]
 8002c22:	4a16      	ldr	r2, [pc, #88]	; (8002c7c <HAL_I2C_MspInit+0x80>)
 8002c24:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002c28:	6153      	str	r3, [r2, #20]
 8002c2a:	4b14      	ldr	r3, [pc, #80]	; (8002c7c <HAL_I2C_MspInit+0x80>)
 8002c2c:	695b      	ldr	r3, [r3, #20]
 8002c2e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002c32:	613b      	str	r3, [r7, #16]
 8002c34:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C1_SCL_Pin|I2C1_SDA_Pin;
 8002c36:	23c0      	movs	r3, #192	; 0xc0
 8002c38:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002c3a:	2312      	movs	r3, #18
 8002c3c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002c3e:	2301      	movs	r3, #1
 8002c40:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002c42:	2303      	movs	r3, #3
 8002c44:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002c46:	2304      	movs	r3, #4
 8002c48:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c4a:	f107 0314 	add.w	r3, r7, #20
 8002c4e:	4619      	mov	r1, r3
 8002c50:	480b      	ldr	r0, [pc, #44]	; (8002c80 <HAL_I2C_MspInit+0x84>)
 8002c52:	f000 fa67 	bl	8003124 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002c56:	4b09      	ldr	r3, [pc, #36]	; (8002c7c <HAL_I2C_MspInit+0x80>)
 8002c58:	69db      	ldr	r3, [r3, #28]
 8002c5a:	4a08      	ldr	r2, [pc, #32]	; (8002c7c <HAL_I2C_MspInit+0x80>)
 8002c5c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002c60:	61d3      	str	r3, [r2, #28]
 8002c62:	4b06      	ldr	r3, [pc, #24]	; (8002c7c <HAL_I2C_MspInit+0x80>)
 8002c64:	69db      	ldr	r3, [r3, #28]
 8002c66:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002c6a:	60fb      	str	r3, [r7, #12]
 8002c6c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002c6e:	bf00      	nop
 8002c70:	3728      	adds	r7, #40	; 0x28
 8002c72:	46bd      	mov	sp, r7
 8002c74:	bd80      	pop	{r7, pc}
 8002c76:	bf00      	nop
 8002c78:	40005400 	.word	0x40005400
 8002c7c:	40021000 	.word	0x40021000
 8002c80:	48000400 	.word	0x48000400

08002c84 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002c84:	b580      	push	{r7, lr}
 8002c86:	b08a      	sub	sp, #40	; 0x28
 8002c88:	af00      	add	r7, sp, #0
 8002c8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c8c:	f107 0314 	add.w	r3, r7, #20
 8002c90:	2200      	movs	r2, #0
 8002c92:	601a      	str	r2, [r3, #0]
 8002c94:	605a      	str	r2, [r3, #4]
 8002c96:	609a      	str	r2, [r3, #8]
 8002c98:	60da      	str	r2, [r3, #12]
 8002c9a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	4a17      	ldr	r2, [pc, #92]	; (8002d00 <HAL_SPI_MspInit+0x7c>)
 8002ca2:	4293      	cmp	r3, r2
 8002ca4:	d128      	bne.n	8002cf8 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002ca6:	4b17      	ldr	r3, [pc, #92]	; (8002d04 <HAL_SPI_MspInit+0x80>)
 8002ca8:	699b      	ldr	r3, [r3, #24]
 8002caa:	4a16      	ldr	r2, [pc, #88]	; (8002d04 <HAL_SPI_MspInit+0x80>)
 8002cac:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002cb0:	6193      	str	r3, [r2, #24]
 8002cb2:	4b14      	ldr	r3, [pc, #80]	; (8002d04 <HAL_SPI_MspInit+0x80>)
 8002cb4:	699b      	ldr	r3, [r3, #24]
 8002cb6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002cba:	613b      	str	r3, [r7, #16]
 8002cbc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002cbe:	4b11      	ldr	r3, [pc, #68]	; (8002d04 <HAL_SPI_MspInit+0x80>)
 8002cc0:	695b      	ldr	r3, [r3, #20]
 8002cc2:	4a10      	ldr	r2, [pc, #64]	; (8002d04 <HAL_SPI_MspInit+0x80>)
 8002cc4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002cc8:	6153      	str	r3, [r2, #20]
 8002cca:	4b0e      	ldr	r3, [pc, #56]	; (8002d04 <HAL_SPI_MspInit+0x80>)
 8002ccc:	695b      	ldr	r3, [r3, #20]
 8002cce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cd2:	60fb      	str	r3, [r7, #12]
 8002cd4:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MISOA7_Pin;
 8002cd6:	23e0      	movs	r3, #224	; 0xe0
 8002cd8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cda:	2302      	movs	r3, #2
 8002cdc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cde:	2300      	movs	r3, #0
 8002ce0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002ce2:	2303      	movs	r3, #3
 8002ce4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002ce6:	2305      	movs	r3, #5
 8002ce8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002cea:	f107 0314 	add.w	r3, r7, #20
 8002cee:	4619      	mov	r1, r3
 8002cf0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002cf4:	f000 fa16 	bl	8003124 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8002cf8:	bf00      	nop
 8002cfa:	3728      	adds	r7, #40	; 0x28
 8002cfc:	46bd      	mov	sp, r7
 8002cfe:	bd80      	pop	{r7, pc}
 8002d00:	40013000 	.word	0x40013000
 8002d04:	40021000 	.word	0x40021000

08002d08 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002d08:	b480      	push	{r7}
 8002d0a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002d0c:	bf00      	nop
 8002d0e:	46bd      	mov	sp, r7
 8002d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d14:	4770      	bx	lr

08002d16 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002d16:	b480      	push	{r7}
 8002d18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002d1a:	e7fe      	b.n	8002d1a <HardFault_Handler+0x4>

08002d1c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002d1c:	b480      	push	{r7}
 8002d1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002d20:	e7fe      	b.n	8002d20 <MemManage_Handler+0x4>

08002d22 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002d22:	b480      	push	{r7}
 8002d24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002d26:	e7fe      	b.n	8002d26 <BusFault_Handler+0x4>

08002d28 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002d28:	b480      	push	{r7}
 8002d2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002d2c:	e7fe      	b.n	8002d2c <UsageFault_Handler+0x4>

08002d2e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002d2e:	b480      	push	{r7}
 8002d30:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002d32:	bf00      	nop
 8002d34:	46bd      	mov	sp, r7
 8002d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d3a:	4770      	bx	lr

08002d3c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002d3c:	b480      	push	{r7}
 8002d3e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002d40:	bf00      	nop
 8002d42:	46bd      	mov	sp, r7
 8002d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d48:	4770      	bx	lr

08002d4a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002d4a:	b480      	push	{r7}
 8002d4c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002d4e:	bf00      	nop
 8002d50:	46bd      	mov	sp, r7
 8002d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d56:	4770      	bx	lr

08002d58 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002d58:	b580      	push	{r7, lr}
 8002d5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002d5c:	f000 f88e 	bl	8002e7c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002d60:	bf00      	nop
 8002d62:	bd80      	pop	{r7, pc}

08002d64 <USB_LP_CAN_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN_RX0 interrupts.
  */
void USB_LP_CAN_RX0_IRQHandler(void)
{
 8002d64:	b580      	push	{r7, lr}
 8002d66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8002d68:	4802      	ldr	r0, [pc, #8]	; (8002d74 <USB_LP_CAN_RX0_IRQHandler+0x10>)
 8002d6a:	f001 f9e2 	bl	8004132 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN_RX0_IRQn 1 */
}
 8002d6e:	bf00      	nop
 8002d70:	bd80      	pop	{r7, pc}
 8002d72:	bf00      	nop
 8002d74:	20001184 	.word	0x20001184

08002d78 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002d78:	b480      	push	{r7}
 8002d7a:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002d7c:	4b06      	ldr	r3, [pc, #24]	; (8002d98 <SystemInit+0x20>)
 8002d7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d82:	4a05      	ldr	r2, [pc, #20]	; (8002d98 <SystemInit+0x20>)
 8002d84:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002d88:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002d8c:	bf00      	nop
 8002d8e:	46bd      	mov	sp, r7
 8002d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d94:	4770      	bx	lr
 8002d96:	bf00      	nop
 8002d98:	e000ed00 	.word	0xe000ed00

08002d9c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002d9c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002dd4 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002da0:	480d      	ldr	r0, [pc, #52]	; (8002dd8 <LoopForever+0x6>)
  ldr r1, =_edata
 8002da2:	490e      	ldr	r1, [pc, #56]	; (8002ddc <LoopForever+0xa>)
  ldr r2, =_sidata
 8002da4:	4a0e      	ldr	r2, [pc, #56]	; (8002de0 <LoopForever+0xe>)
  movs r3, #0
 8002da6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002da8:	e002      	b.n	8002db0 <LoopCopyDataInit>

08002daa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002daa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002dac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002dae:	3304      	adds	r3, #4

08002db0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002db0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002db2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002db4:	d3f9      	bcc.n	8002daa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002db6:	4a0b      	ldr	r2, [pc, #44]	; (8002de4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002db8:	4c0b      	ldr	r4, [pc, #44]	; (8002de8 <LoopForever+0x16>)
  movs r3, #0
 8002dba:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002dbc:	e001      	b.n	8002dc2 <LoopFillZerobss>

08002dbe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002dbe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002dc0:	3204      	adds	r2, #4

08002dc2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002dc2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002dc4:	d3fb      	bcc.n	8002dbe <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002dc6:	f7ff ffd7 	bl	8002d78 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002dca:	f008 fe13 	bl	800b9f4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002dce:	f7ff fa07 	bl	80021e0 <main>

08002dd2 <LoopForever>:

LoopForever:
    b LoopForever
 8002dd2:	e7fe      	b.n	8002dd2 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002dd4:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 8002dd8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002ddc:	200001f0 	.word	0x200001f0
  ldr r2, =_sidata
 8002de0:	0800c748 	.word	0x0800c748
  ldr r2, =_sbss
 8002de4:	200001f0 	.word	0x200001f0
  ldr r4, =_ebss
 8002de8:	20001470 	.word	0x20001470

08002dec <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002dec:	e7fe      	b.n	8002dec <ADC1_2_IRQHandler>
	...

08002df0 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002df0:	b580      	push	{r7, lr}
 8002df2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002df4:	4b08      	ldr	r3, [pc, #32]	; (8002e18 <HAL_Init+0x28>)
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	4a07      	ldr	r2, [pc, #28]	; (8002e18 <HAL_Init+0x28>)
 8002dfa:	f043 0310 	orr.w	r3, r3, #16
 8002dfe:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002e00:	2003      	movs	r0, #3
 8002e02:	f000 f94d 	bl	80030a0 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002e06:	2000      	movs	r0, #0
 8002e08:	f000 f808 	bl	8002e1c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002e0c:	f7ff fed2 	bl	8002bb4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002e10:	2300      	movs	r3, #0
}
 8002e12:	4618      	mov	r0, r3
 8002e14:	bd80      	pop	{r7, pc}
 8002e16:	bf00      	nop
 8002e18:	40022000 	.word	0x40022000

08002e1c <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002e1c:	b580      	push	{r7, lr}
 8002e1e:	b082      	sub	sp, #8
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002e24:	4b12      	ldr	r3, [pc, #72]	; (8002e70 <HAL_InitTick+0x54>)
 8002e26:	681a      	ldr	r2, [r3, #0]
 8002e28:	4b12      	ldr	r3, [pc, #72]	; (8002e74 <HAL_InitTick+0x58>)
 8002e2a:	781b      	ldrb	r3, [r3, #0]
 8002e2c:	4619      	mov	r1, r3
 8002e2e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002e32:	fbb3 f3f1 	udiv	r3, r3, r1
 8002e36:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e3a:	4618      	mov	r0, r3
 8002e3c:	f000 f965 	bl	800310a <HAL_SYSTICK_Config>
 8002e40:	4603      	mov	r3, r0
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d001      	beq.n	8002e4a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002e46:	2301      	movs	r3, #1
 8002e48:	e00e      	b.n	8002e68 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	2b0f      	cmp	r3, #15
 8002e4e:	d80a      	bhi.n	8002e66 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002e50:	2200      	movs	r2, #0
 8002e52:	6879      	ldr	r1, [r7, #4]
 8002e54:	f04f 30ff 	mov.w	r0, #4294967295
 8002e58:	f000 f92d 	bl	80030b6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002e5c:	4a06      	ldr	r2, [pc, #24]	; (8002e78 <HAL_InitTick+0x5c>)
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8002e62:	2300      	movs	r3, #0
 8002e64:	e000      	b.n	8002e68 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002e66:	2301      	movs	r3, #1
}
 8002e68:	4618      	mov	r0, r3
 8002e6a:	3708      	adds	r7, #8
 8002e6c:	46bd      	mov	sp, r7
 8002e6e:	bd80      	pop	{r7, pc}
 8002e70:	2000000c 	.word	0x2000000c
 8002e74:	20000014 	.word	0x20000014
 8002e78:	20000010 	.word	0x20000010

08002e7c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002e7c:	b480      	push	{r7}
 8002e7e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002e80:	4b06      	ldr	r3, [pc, #24]	; (8002e9c <HAL_IncTick+0x20>)
 8002e82:	781b      	ldrb	r3, [r3, #0]
 8002e84:	461a      	mov	r2, r3
 8002e86:	4b06      	ldr	r3, [pc, #24]	; (8002ea0 <HAL_IncTick+0x24>)
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	4413      	add	r3, r2
 8002e8c:	4a04      	ldr	r2, [pc, #16]	; (8002ea0 <HAL_IncTick+0x24>)
 8002e8e:	6013      	str	r3, [r2, #0]
}
 8002e90:	bf00      	nop
 8002e92:	46bd      	mov	sp, r7
 8002e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e98:	4770      	bx	lr
 8002e9a:	bf00      	nop
 8002e9c:	20000014 	.word	0x20000014
 8002ea0:	200004ec 	.word	0x200004ec

08002ea4 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002ea4:	b480      	push	{r7}
 8002ea6:	af00      	add	r7, sp, #0
  return uwTick;  
 8002ea8:	4b03      	ldr	r3, [pc, #12]	; (8002eb8 <HAL_GetTick+0x14>)
 8002eaa:	681b      	ldr	r3, [r3, #0]
}
 8002eac:	4618      	mov	r0, r3
 8002eae:	46bd      	mov	sp, r7
 8002eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb4:	4770      	bx	lr
 8002eb6:	bf00      	nop
 8002eb8:	200004ec 	.word	0x200004ec

08002ebc <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002ebc:	b580      	push	{r7, lr}
 8002ebe:	b084      	sub	sp, #16
 8002ec0:	af00      	add	r7, sp, #0
 8002ec2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002ec4:	f7ff ffee 	bl	8002ea4 <HAL_GetTick>
 8002ec8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ed4:	d005      	beq.n	8002ee2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002ed6:	4b09      	ldr	r3, [pc, #36]	; (8002efc <HAL_Delay+0x40>)
 8002ed8:	781b      	ldrb	r3, [r3, #0]
 8002eda:	461a      	mov	r2, r3
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	4413      	add	r3, r2
 8002ee0:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8002ee2:	bf00      	nop
 8002ee4:	f7ff ffde 	bl	8002ea4 <HAL_GetTick>
 8002ee8:	4602      	mov	r2, r0
 8002eea:	68bb      	ldr	r3, [r7, #8]
 8002eec:	1ad3      	subs	r3, r2, r3
 8002eee:	68fa      	ldr	r2, [r7, #12]
 8002ef0:	429a      	cmp	r2, r3
 8002ef2:	d8f7      	bhi.n	8002ee4 <HAL_Delay+0x28>
  {
  }
}
 8002ef4:	bf00      	nop
 8002ef6:	3710      	adds	r7, #16
 8002ef8:	46bd      	mov	sp, r7
 8002efa:	bd80      	pop	{r7, pc}
 8002efc:	20000014 	.word	0x20000014

08002f00 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002f00:	b480      	push	{r7}
 8002f02:	b085      	sub	sp, #20
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	f003 0307 	and.w	r3, r3, #7
 8002f0e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002f10:	4b0c      	ldr	r3, [pc, #48]	; (8002f44 <__NVIC_SetPriorityGrouping+0x44>)
 8002f12:	68db      	ldr	r3, [r3, #12]
 8002f14:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002f16:	68ba      	ldr	r2, [r7, #8]
 8002f18:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002f1c:	4013      	ands	r3, r2
 8002f1e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002f24:	68bb      	ldr	r3, [r7, #8]
 8002f26:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002f28:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002f2c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002f30:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002f32:	4a04      	ldr	r2, [pc, #16]	; (8002f44 <__NVIC_SetPriorityGrouping+0x44>)
 8002f34:	68bb      	ldr	r3, [r7, #8]
 8002f36:	60d3      	str	r3, [r2, #12]
}
 8002f38:	bf00      	nop
 8002f3a:	3714      	adds	r7, #20
 8002f3c:	46bd      	mov	sp, r7
 8002f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f42:	4770      	bx	lr
 8002f44:	e000ed00 	.word	0xe000ed00

08002f48 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002f48:	b480      	push	{r7}
 8002f4a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002f4c:	4b04      	ldr	r3, [pc, #16]	; (8002f60 <__NVIC_GetPriorityGrouping+0x18>)
 8002f4e:	68db      	ldr	r3, [r3, #12]
 8002f50:	0a1b      	lsrs	r3, r3, #8
 8002f52:	f003 0307 	and.w	r3, r3, #7
}
 8002f56:	4618      	mov	r0, r3
 8002f58:	46bd      	mov	sp, r7
 8002f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f5e:	4770      	bx	lr
 8002f60:	e000ed00 	.word	0xe000ed00

08002f64 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002f64:	b480      	push	{r7}
 8002f66:	b083      	sub	sp, #12
 8002f68:	af00      	add	r7, sp, #0
 8002f6a:	4603      	mov	r3, r0
 8002f6c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	db0b      	blt.n	8002f8e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002f76:	79fb      	ldrb	r3, [r7, #7]
 8002f78:	f003 021f 	and.w	r2, r3, #31
 8002f7c:	4907      	ldr	r1, [pc, #28]	; (8002f9c <__NVIC_EnableIRQ+0x38>)
 8002f7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f82:	095b      	lsrs	r3, r3, #5
 8002f84:	2001      	movs	r0, #1
 8002f86:	fa00 f202 	lsl.w	r2, r0, r2
 8002f8a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002f8e:	bf00      	nop
 8002f90:	370c      	adds	r7, #12
 8002f92:	46bd      	mov	sp, r7
 8002f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f98:	4770      	bx	lr
 8002f9a:	bf00      	nop
 8002f9c:	e000e100 	.word	0xe000e100

08002fa0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002fa0:	b480      	push	{r7}
 8002fa2:	b083      	sub	sp, #12
 8002fa4:	af00      	add	r7, sp, #0
 8002fa6:	4603      	mov	r3, r0
 8002fa8:	6039      	str	r1, [r7, #0]
 8002faa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002fac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	db0a      	blt.n	8002fca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002fb4:	683b      	ldr	r3, [r7, #0]
 8002fb6:	b2da      	uxtb	r2, r3
 8002fb8:	490c      	ldr	r1, [pc, #48]	; (8002fec <__NVIC_SetPriority+0x4c>)
 8002fba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fbe:	0112      	lsls	r2, r2, #4
 8002fc0:	b2d2      	uxtb	r2, r2
 8002fc2:	440b      	add	r3, r1
 8002fc4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002fc8:	e00a      	b.n	8002fe0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002fca:	683b      	ldr	r3, [r7, #0]
 8002fcc:	b2da      	uxtb	r2, r3
 8002fce:	4908      	ldr	r1, [pc, #32]	; (8002ff0 <__NVIC_SetPriority+0x50>)
 8002fd0:	79fb      	ldrb	r3, [r7, #7]
 8002fd2:	f003 030f 	and.w	r3, r3, #15
 8002fd6:	3b04      	subs	r3, #4
 8002fd8:	0112      	lsls	r2, r2, #4
 8002fda:	b2d2      	uxtb	r2, r2
 8002fdc:	440b      	add	r3, r1
 8002fde:	761a      	strb	r2, [r3, #24]
}
 8002fe0:	bf00      	nop
 8002fe2:	370c      	adds	r7, #12
 8002fe4:	46bd      	mov	sp, r7
 8002fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fea:	4770      	bx	lr
 8002fec:	e000e100 	.word	0xe000e100
 8002ff0:	e000ed00 	.word	0xe000ed00

08002ff4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002ff4:	b480      	push	{r7}
 8002ff6:	b089      	sub	sp, #36	; 0x24
 8002ff8:	af00      	add	r7, sp, #0
 8002ffa:	60f8      	str	r0, [r7, #12]
 8002ffc:	60b9      	str	r1, [r7, #8]
 8002ffe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	f003 0307 	and.w	r3, r3, #7
 8003006:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003008:	69fb      	ldr	r3, [r7, #28]
 800300a:	f1c3 0307 	rsb	r3, r3, #7
 800300e:	2b04      	cmp	r3, #4
 8003010:	bf28      	it	cs
 8003012:	2304      	movcs	r3, #4
 8003014:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003016:	69fb      	ldr	r3, [r7, #28]
 8003018:	3304      	adds	r3, #4
 800301a:	2b06      	cmp	r3, #6
 800301c:	d902      	bls.n	8003024 <NVIC_EncodePriority+0x30>
 800301e:	69fb      	ldr	r3, [r7, #28]
 8003020:	3b03      	subs	r3, #3
 8003022:	e000      	b.n	8003026 <NVIC_EncodePriority+0x32>
 8003024:	2300      	movs	r3, #0
 8003026:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003028:	f04f 32ff 	mov.w	r2, #4294967295
 800302c:	69bb      	ldr	r3, [r7, #24]
 800302e:	fa02 f303 	lsl.w	r3, r2, r3
 8003032:	43da      	mvns	r2, r3
 8003034:	68bb      	ldr	r3, [r7, #8]
 8003036:	401a      	ands	r2, r3
 8003038:	697b      	ldr	r3, [r7, #20]
 800303a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800303c:	f04f 31ff 	mov.w	r1, #4294967295
 8003040:	697b      	ldr	r3, [r7, #20]
 8003042:	fa01 f303 	lsl.w	r3, r1, r3
 8003046:	43d9      	mvns	r1, r3
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800304c:	4313      	orrs	r3, r2
         );
}
 800304e:	4618      	mov	r0, r3
 8003050:	3724      	adds	r7, #36	; 0x24
 8003052:	46bd      	mov	sp, r7
 8003054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003058:	4770      	bx	lr
	...

0800305c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800305c:	b580      	push	{r7, lr}
 800305e:	b082      	sub	sp, #8
 8003060:	af00      	add	r7, sp, #0
 8003062:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	3b01      	subs	r3, #1
 8003068:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800306c:	d301      	bcc.n	8003072 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800306e:	2301      	movs	r3, #1
 8003070:	e00f      	b.n	8003092 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003072:	4a0a      	ldr	r2, [pc, #40]	; (800309c <SysTick_Config+0x40>)
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	3b01      	subs	r3, #1
 8003078:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800307a:	210f      	movs	r1, #15
 800307c:	f04f 30ff 	mov.w	r0, #4294967295
 8003080:	f7ff ff8e 	bl	8002fa0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003084:	4b05      	ldr	r3, [pc, #20]	; (800309c <SysTick_Config+0x40>)
 8003086:	2200      	movs	r2, #0
 8003088:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800308a:	4b04      	ldr	r3, [pc, #16]	; (800309c <SysTick_Config+0x40>)
 800308c:	2207      	movs	r2, #7
 800308e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003090:	2300      	movs	r3, #0
}
 8003092:	4618      	mov	r0, r3
 8003094:	3708      	adds	r7, #8
 8003096:	46bd      	mov	sp, r7
 8003098:	bd80      	pop	{r7, pc}
 800309a:	bf00      	nop
 800309c:	e000e010 	.word	0xe000e010

080030a0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80030a0:	b580      	push	{r7, lr}
 80030a2:	b082      	sub	sp, #8
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80030a8:	6878      	ldr	r0, [r7, #4]
 80030aa:	f7ff ff29 	bl	8002f00 <__NVIC_SetPriorityGrouping>
}
 80030ae:	bf00      	nop
 80030b0:	3708      	adds	r7, #8
 80030b2:	46bd      	mov	sp, r7
 80030b4:	bd80      	pop	{r7, pc}

080030b6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80030b6:	b580      	push	{r7, lr}
 80030b8:	b086      	sub	sp, #24
 80030ba:	af00      	add	r7, sp, #0
 80030bc:	4603      	mov	r3, r0
 80030be:	60b9      	str	r1, [r7, #8]
 80030c0:	607a      	str	r2, [r7, #4]
 80030c2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80030c4:	2300      	movs	r3, #0
 80030c6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80030c8:	f7ff ff3e 	bl	8002f48 <__NVIC_GetPriorityGrouping>
 80030cc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80030ce:	687a      	ldr	r2, [r7, #4]
 80030d0:	68b9      	ldr	r1, [r7, #8]
 80030d2:	6978      	ldr	r0, [r7, #20]
 80030d4:	f7ff ff8e 	bl	8002ff4 <NVIC_EncodePriority>
 80030d8:	4602      	mov	r2, r0
 80030da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80030de:	4611      	mov	r1, r2
 80030e0:	4618      	mov	r0, r3
 80030e2:	f7ff ff5d 	bl	8002fa0 <__NVIC_SetPriority>
}
 80030e6:	bf00      	nop
 80030e8:	3718      	adds	r7, #24
 80030ea:	46bd      	mov	sp, r7
 80030ec:	bd80      	pop	{r7, pc}

080030ee <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80030ee:	b580      	push	{r7, lr}
 80030f0:	b082      	sub	sp, #8
 80030f2:	af00      	add	r7, sp, #0
 80030f4:	4603      	mov	r3, r0
 80030f6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80030f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030fc:	4618      	mov	r0, r3
 80030fe:	f7ff ff31 	bl	8002f64 <__NVIC_EnableIRQ>
}
 8003102:	bf00      	nop
 8003104:	3708      	adds	r7, #8
 8003106:	46bd      	mov	sp, r7
 8003108:	bd80      	pop	{r7, pc}

0800310a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800310a:	b580      	push	{r7, lr}
 800310c:	b082      	sub	sp, #8
 800310e:	af00      	add	r7, sp, #0
 8003110:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003112:	6878      	ldr	r0, [r7, #4]
 8003114:	f7ff ffa2 	bl	800305c <SysTick_Config>
 8003118:	4603      	mov	r3, r0
}
 800311a:	4618      	mov	r0, r3
 800311c:	3708      	adds	r7, #8
 800311e:	46bd      	mov	sp, r7
 8003120:	bd80      	pop	{r7, pc}
	...

08003124 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003124:	b480      	push	{r7}
 8003126:	b087      	sub	sp, #28
 8003128:	af00      	add	r7, sp, #0
 800312a:	6078      	str	r0, [r7, #4]
 800312c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800312e:	2300      	movs	r3, #0
 8003130:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003132:	e154      	b.n	80033de <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003134:	683b      	ldr	r3, [r7, #0]
 8003136:	681a      	ldr	r2, [r3, #0]
 8003138:	2101      	movs	r1, #1
 800313a:	697b      	ldr	r3, [r7, #20]
 800313c:	fa01 f303 	lsl.w	r3, r1, r3
 8003140:	4013      	ands	r3, r2
 8003142:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	2b00      	cmp	r3, #0
 8003148:	f000 8146 	beq.w	80033d8 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800314c:	683b      	ldr	r3, [r7, #0]
 800314e:	685b      	ldr	r3, [r3, #4]
 8003150:	2b01      	cmp	r3, #1
 8003152:	d00b      	beq.n	800316c <HAL_GPIO_Init+0x48>
 8003154:	683b      	ldr	r3, [r7, #0]
 8003156:	685b      	ldr	r3, [r3, #4]
 8003158:	2b02      	cmp	r3, #2
 800315a:	d007      	beq.n	800316c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800315c:	683b      	ldr	r3, [r7, #0]
 800315e:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003160:	2b11      	cmp	r3, #17
 8003162:	d003      	beq.n	800316c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003164:	683b      	ldr	r3, [r7, #0]
 8003166:	685b      	ldr	r3, [r3, #4]
 8003168:	2b12      	cmp	r3, #18
 800316a:	d130      	bne.n	80031ce <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	689b      	ldr	r3, [r3, #8]
 8003170:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8003172:	697b      	ldr	r3, [r7, #20]
 8003174:	005b      	lsls	r3, r3, #1
 8003176:	2203      	movs	r2, #3
 8003178:	fa02 f303 	lsl.w	r3, r2, r3
 800317c:	43db      	mvns	r3, r3
 800317e:	693a      	ldr	r2, [r7, #16]
 8003180:	4013      	ands	r3, r2
 8003182:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003184:	683b      	ldr	r3, [r7, #0]
 8003186:	68da      	ldr	r2, [r3, #12]
 8003188:	697b      	ldr	r3, [r7, #20]
 800318a:	005b      	lsls	r3, r3, #1
 800318c:	fa02 f303 	lsl.w	r3, r2, r3
 8003190:	693a      	ldr	r2, [r7, #16]
 8003192:	4313      	orrs	r3, r2
 8003194:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	693a      	ldr	r2, [r7, #16]
 800319a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	685b      	ldr	r3, [r3, #4]
 80031a0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80031a2:	2201      	movs	r2, #1
 80031a4:	697b      	ldr	r3, [r7, #20]
 80031a6:	fa02 f303 	lsl.w	r3, r2, r3
 80031aa:	43db      	mvns	r3, r3
 80031ac:	693a      	ldr	r2, [r7, #16]
 80031ae:	4013      	ands	r3, r2
 80031b0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80031b2:	683b      	ldr	r3, [r7, #0]
 80031b4:	685b      	ldr	r3, [r3, #4]
 80031b6:	091b      	lsrs	r3, r3, #4
 80031b8:	f003 0201 	and.w	r2, r3, #1
 80031bc:	697b      	ldr	r3, [r7, #20]
 80031be:	fa02 f303 	lsl.w	r3, r2, r3
 80031c2:	693a      	ldr	r2, [r7, #16]
 80031c4:	4313      	orrs	r3, r2
 80031c6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	693a      	ldr	r2, [r7, #16]
 80031cc:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	68db      	ldr	r3, [r3, #12]
 80031d2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80031d4:	697b      	ldr	r3, [r7, #20]
 80031d6:	005b      	lsls	r3, r3, #1
 80031d8:	2203      	movs	r2, #3
 80031da:	fa02 f303 	lsl.w	r3, r2, r3
 80031de:	43db      	mvns	r3, r3
 80031e0:	693a      	ldr	r2, [r7, #16]
 80031e2:	4013      	ands	r3, r2
 80031e4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80031e6:	683b      	ldr	r3, [r7, #0]
 80031e8:	689a      	ldr	r2, [r3, #8]
 80031ea:	697b      	ldr	r3, [r7, #20]
 80031ec:	005b      	lsls	r3, r3, #1
 80031ee:	fa02 f303 	lsl.w	r3, r2, r3
 80031f2:	693a      	ldr	r2, [r7, #16]
 80031f4:	4313      	orrs	r3, r2
 80031f6:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	693a      	ldr	r2, [r7, #16]
 80031fc:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80031fe:	683b      	ldr	r3, [r7, #0]
 8003200:	685b      	ldr	r3, [r3, #4]
 8003202:	2b02      	cmp	r3, #2
 8003204:	d003      	beq.n	800320e <HAL_GPIO_Init+0xea>
 8003206:	683b      	ldr	r3, [r7, #0]
 8003208:	685b      	ldr	r3, [r3, #4]
 800320a:	2b12      	cmp	r3, #18
 800320c:	d123      	bne.n	8003256 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800320e:	697b      	ldr	r3, [r7, #20]
 8003210:	08da      	lsrs	r2, r3, #3
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	3208      	adds	r2, #8
 8003216:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800321a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800321c:	697b      	ldr	r3, [r7, #20]
 800321e:	f003 0307 	and.w	r3, r3, #7
 8003222:	009b      	lsls	r3, r3, #2
 8003224:	220f      	movs	r2, #15
 8003226:	fa02 f303 	lsl.w	r3, r2, r3
 800322a:	43db      	mvns	r3, r3
 800322c:	693a      	ldr	r2, [r7, #16]
 800322e:	4013      	ands	r3, r2
 8003230:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003232:	683b      	ldr	r3, [r7, #0]
 8003234:	691a      	ldr	r2, [r3, #16]
 8003236:	697b      	ldr	r3, [r7, #20]
 8003238:	f003 0307 	and.w	r3, r3, #7
 800323c:	009b      	lsls	r3, r3, #2
 800323e:	fa02 f303 	lsl.w	r3, r2, r3
 8003242:	693a      	ldr	r2, [r7, #16]
 8003244:	4313      	orrs	r3, r2
 8003246:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003248:	697b      	ldr	r3, [r7, #20]
 800324a:	08da      	lsrs	r2, r3, #3
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	3208      	adds	r2, #8
 8003250:	6939      	ldr	r1, [r7, #16]
 8003252:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 800325c:	697b      	ldr	r3, [r7, #20]
 800325e:	005b      	lsls	r3, r3, #1
 8003260:	2203      	movs	r2, #3
 8003262:	fa02 f303 	lsl.w	r3, r2, r3
 8003266:	43db      	mvns	r3, r3
 8003268:	693a      	ldr	r2, [r7, #16]
 800326a:	4013      	ands	r3, r2
 800326c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800326e:	683b      	ldr	r3, [r7, #0]
 8003270:	685b      	ldr	r3, [r3, #4]
 8003272:	f003 0203 	and.w	r2, r3, #3
 8003276:	697b      	ldr	r3, [r7, #20]
 8003278:	005b      	lsls	r3, r3, #1
 800327a:	fa02 f303 	lsl.w	r3, r2, r3
 800327e:	693a      	ldr	r2, [r7, #16]
 8003280:	4313      	orrs	r3, r2
 8003282:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	693a      	ldr	r2, [r7, #16]
 8003288:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800328a:	683b      	ldr	r3, [r7, #0]
 800328c:	685b      	ldr	r3, [r3, #4]
 800328e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003292:	2b00      	cmp	r3, #0
 8003294:	f000 80a0 	beq.w	80033d8 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003298:	4b58      	ldr	r3, [pc, #352]	; (80033fc <HAL_GPIO_Init+0x2d8>)
 800329a:	699b      	ldr	r3, [r3, #24]
 800329c:	4a57      	ldr	r2, [pc, #348]	; (80033fc <HAL_GPIO_Init+0x2d8>)
 800329e:	f043 0301 	orr.w	r3, r3, #1
 80032a2:	6193      	str	r3, [r2, #24]
 80032a4:	4b55      	ldr	r3, [pc, #340]	; (80033fc <HAL_GPIO_Init+0x2d8>)
 80032a6:	699b      	ldr	r3, [r3, #24]
 80032a8:	f003 0301 	and.w	r3, r3, #1
 80032ac:	60bb      	str	r3, [r7, #8]
 80032ae:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80032b0:	4a53      	ldr	r2, [pc, #332]	; (8003400 <HAL_GPIO_Init+0x2dc>)
 80032b2:	697b      	ldr	r3, [r7, #20]
 80032b4:	089b      	lsrs	r3, r3, #2
 80032b6:	3302      	adds	r3, #2
 80032b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80032bc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80032be:	697b      	ldr	r3, [r7, #20]
 80032c0:	f003 0303 	and.w	r3, r3, #3
 80032c4:	009b      	lsls	r3, r3, #2
 80032c6:	220f      	movs	r2, #15
 80032c8:	fa02 f303 	lsl.w	r3, r2, r3
 80032cc:	43db      	mvns	r3, r3
 80032ce:	693a      	ldr	r2, [r7, #16]
 80032d0:	4013      	ands	r3, r2
 80032d2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80032da:	d019      	beq.n	8003310 <HAL_GPIO_Init+0x1ec>
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	4a49      	ldr	r2, [pc, #292]	; (8003404 <HAL_GPIO_Init+0x2e0>)
 80032e0:	4293      	cmp	r3, r2
 80032e2:	d013      	beq.n	800330c <HAL_GPIO_Init+0x1e8>
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	4a48      	ldr	r2, [pc, #288]	; (8003408 <HAL_GPIO_Init+0x2e4>)
 80032e8:	4293      	cmp	r3, r2
 80032ea:	d00d      	beq.n	8003308 <HAL_GPIO_Init+0x1e4>
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	4a47      	ldr	r2, [pc, #284]	; (800340c <HAL_GPIO_Init+0x2e8>)
 80032f0:	4293      	cmp	r3, r2
 80032f2:	d007      	beq.n	8003304 <HAL_GPIO_Init+0x1e0>
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	4a46      	ldr	r2, [pc, #280]	; (8003410 <HAL_GPIO_Init+0x2ec>)
 80032f8:	4293      	cmp	r3, r2
 80032fa:	d101      	bne.n	8003300 <HAL_GPIO_Init+0x1dc>
 80032fc:	2304      	movs	r3, #4
 80032fe:	e008      	b.n	8003312 <HAL_GPIO_Init+0x1ee>
 8003300:	2305      	movs	r3, #5
 8003302:	e006      	b.n	8003312 <HAL_GPIO_Init+0x1ee>
 8003304:	2303      	movs	r3, #3
 8003306:	e004      	b.n	8003312 <HAL_GPIO_Init+0x1ee>
 8003308:	2302      	movs	r3, #2
 800330a:	e002      	b.n	8003312 <HAL_GPIO_Init+0x1ee>
 800330c:	2301      	movs	r3, #1
 800330e:	e000      	b.n	8003312 <HAL_GPIO_Init+0x1ee>
 8003310:	2300      	movs	r3, #0
 8003312:	697a      	ldr	r2, [r7, #20]
 8003314:	f002 0203 	and.w	r2, r2, #3
 8003318:	0092      	lsls	r2, r2, #2
 800331a:	4093      	lsls	r3, r2
 800331c:	693a      	ldr	r2, [r7, #16]
 800331e:	4313      	orrs	r3, r2
 8003320:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003322:	4937      	ldr	r1, [pc, #220]	; (8003400 <HAL_GPIO_Init+0x2dc>)
 8003324:	697b      	ldr	r3, [r7, #20]
 8003326:	089b      	lsrs	r3, r3, #2
 8003328:	3302      	adds	r3, #2
 800332a:	693a      	ldr	r2, [r7, #16]
 800332c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003330:	4b38      	ldr	r3, [pc, #224]	; (8003414 <HAL_GPIO_Init+0x2f0>)
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	43db      	mvns	r3, r3
 800333a:	693a      	ldr	r2, [r7, #16]
 800333c:	4013      	ands	r3, r2
 800333e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003340:	683b      	ldr	r3, [r7, #0]
 8003342:	685b      	ldr	r3, [r3, #4]
 8003344:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003348:	2b00      	cmp	r3, #0
 800334a:	d003      	beq.n	8003354 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 800334c:	693a      	ldr	r2, [r7, #16]
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	4313      	orrs	r3, r2
 8003352:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8003354:	4a2f      	ldr	r2, [pc, #188]	; (8003414 <HAL_GPIO_Init+0x2f0>)
 8003356:	693b      	ldr	r3, [r7, #16]
 8003358:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800335a:	4b2e      	ldr	r3, [pc, #184]	; (8003414 <HAL_GPIO_Init+0x2f0>)
 800335c:	685b      	ldr	r3, [r3, #4]
 800335e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	43db      	mvns	r3, r3
 8003364:	693a      	ldr	r2, [r7, #16]
 8003366:	4013      	ands	r3, r2
 8003368:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800336a:	683b      	ldr	r3, [r7, #0]
 800336c:	685b      	ldr	r3, [r3, #4]
 800336e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003372:	2b00      	cmp	r3, #0
 8003374:	d003      	beq.n	800337e <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8003376:	693a      	ldr	r2, [r7, #16]
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	4313      	orrs	r3, r2
 800337c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800337e:	4a25      	ldr	r2, [pc, #148]	; (8003414 <HAL_GPIO_Init+0x2f0>)
 8003380:	693b      	ldr	r3, [r7, #16]
 8003382:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003384:	4b23      	ldr	r3, [pc, #140]	; (8003414 <HAL_GPIO_Init+0x2f0>)
 8003386:	689b      	ldr	r3, [r3, #8]
 8003388:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	43db      	mvns	r3, r3
 800338e:	693a      	ldr	r2, [r7, #16]
 8003390:	4013      	ands	r3, r2
 8003392:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003394:	683b      	ldr	r3, [r7, #0]
 8003396:	685b      	ldr	r3, [r3, #4]
 8003398:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800339c:	2b00      	cmp	r3, #0
 800339e:	d003      	beq.n	80033a8 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 80033a0:	693a      	ldr	r2, [r7, #16]
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	4313      	orrs	r3, r2
 80033a6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80033a8:	4a1a      	ldr	r2, [pc, #104]	; (8003414 <HAL_GPIO_Init+0x2f0>)
 80033aa:	693b      	ldr	r3, [r7, #16]
 80033ac:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80033ae:	4b19      	ldr	r3, [pc, #100]	; (8003414 <HAL_GPIO_Init+0x2f0>)
 80033b0:	68db      	ldr	r3, [r3, #12]
 80033b2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	43db      	mvns	r3, r3
 80033b8:	693a      	ldr	r2, [r7, #16]
 80033ba:	4013      	ands	r3, r2
 80033bc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80033be:	683b      	ldr	r3, [r7, #0]
 80033c0:	685b      	ldr	r3, [r3, #4]
 80033c2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d003      	beq.n	80033d2 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80033ca:	693a      	ldr	r2, [r7, #16]
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	4313      	orrs	r3, r2
 80033d0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80033d2:	4a10      	ldr	r2, [pc, #64]	; (8003414 <HAL_GPIO_Init+0x2f0>)
 80033d4:	693b      	ldr	r3, [r7, #16]
 80033d6:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80033d8:	697b      	ldr	r3, [r7, #20]
 80033da:	3301      	adds	r3, #1
 80033dc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80033de:	683b      	ldr	r3, [r7, #0]
 80033e0:	681a      	ldr	r2, [r3, #0]
 80033e2:	697b      	ldr	r3, [r7, #20]
 80033e4:	fa22 f303 	lsr.w	r3, r2, r3
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	f47f aea3 	bne.w	8003134 <HAL_GPIO_Init+0x10>
  }
}
 80033ee:	bf00      	nop
 80033f0:	371c      	adds	r7, #28
 80033f2:	46bd      	mov	sp, r7
 80033f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f8:	4770      	bx	lr
 80033fa:	bf00      	nop
 80033fc:	40021000 	.word	0x40021000
 8003400:	40010000 	.word	0x40010000
 8003404:	48000400 	.word	0x48000400
 8003408:	48000800 	.word	0x48000800
 800340c:	48000c00 	.word	0x48000c00
 8003410:	48001000 	.word	0x48001000
 8003414:	40010400 	.word	0x40010400

08003418 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003418:	b480      	push	{r7}
 800341a:	b083      	sub	sp, #12
 800341c:	af00      	add	r7, sp, #0
 800341e:	6078      	str	r0, [r7, #4]
 8003420:	460b      	mov	r3, r1
 8003422:	807b      	strh	r3, [r7, #2]
 8003424:	4613      	mov	r3, r2
 8003426:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003428:	787b      	ldrb	r3, [r7, #1]
 800342a:	2b00      	cmp	r3, #0
 800342c:	d003      	beq.n	8003436 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800342e:	887a      	ldrh	r2, [r7, #2]
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003434:	e002      	b.n	800343c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003436:	887a      	ldrh	r2, [r7, #2]
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800343c:	bf00      	nop
 800343e:	370c      	adds	r7, #12
 8003440:	46bd      	mov	sp, r7
 8003442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003446:	4770      	bx	lr

08003448 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003448:	b580      	push	{r7, lr}
 800344a:	b082      	sub	sp, #8
 800344c:	af00      	add	r7, sp, #0
 800344e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	2b00      	cmp	r3, #0
 8003454:	d101      	bne.n	800345a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003456:	2301      	movs	r3, #1
 8003458:	e081      	b.n	800355e <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003460:	b2db      	uxtb	r3, r3
 8003462:	2b00      	cmp	r3, #0
 8003464:	d106      	bne.n	8003474 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	2200      	movs	r2, #0
 800346a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800346e:	6878      	ldr	r0, [r7, #4]
 8003470:	f7ff fbc4 	bl	8002bfc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	2224      	movs	r2, #36	; 0x24
 8003478:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	681a      	ldr	r2, [r3, #0]
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	f022 0201 	bic.w	r2, r2, #1
 800348a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	685a      	ldr	r2, [r3, #4]
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003498:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	689a      	ldr	r2, [r3, #8]
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80034a8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	68db      	ldr	r3, [r3, #12]
 80034ae:	2b01      	cmp	r3, #1
 80034b0:	d107      	bne.n	80034c2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	689a      	ldr	r2, [r3, #8]
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80034be:	609a      	str	r2, [r3, #8]
 80034c0:	e006      	b.n	80034d0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	689a      	ldr	r2, [r3, #8]
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80034ce:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	68db      	ldr	r3, [r3, #12]
 80034d4:	2b02      	cmp	r3, #2
 80034d6:	d104      	bne.n	80034e2 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80034e0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	685b      	ldr	r3, [r3, #4]
 80034e8:	687a      	ldr	r2, [r7, #4]
 80034ea:	6812      	ldr	r2, [r2, #0]
 80034ec:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80034f0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80034f4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	68da      	ldr	r2, [r3, #12]
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003504:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	691a      	ldr	r2, [r3, #16]
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	695b      	ldr	r3, [r3, #20]
 800350e:	ea42 0103 	orr.w	r1, r2, r3
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	699b      	ldr	r3, [r3, #24]
 8003516:	021a      	lsls	r2, r3, #8
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	430a      	orrs	r2, r1
 800351e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	69d9      	ldr	r1, [r3, #28]
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	6a1a      	ldr	r2, [r3, #32]
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	430a      	orrs	r2, r1
 800352e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	681a      	ldr	r2, [r3, #0]
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	f042 0201 	orr.w	r2, r2, #1
 800353e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	2200      	movs	r2, #0
 8003544:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	2220      	movs	r2, #32
 800354a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	2200      	movs	r2, #0
 8003552:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	2200      	movs	r2, #0
 8003558:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800355c:	2300      	movs	r3, #0
}
 800355e:	4618      	mov	r0, r3
 8003560:	3708      	adds	r7, #8
 8003562:	46bd      	mov	sp, r7
 8003564:	bd80      	pop	{r7, pc}
	...

08003568 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003568:	b580      	push	{r7, lr}
 800356a:	b088      	sub	sp, #32
 800356c:	af02      	add	r7, sp, #8
 800356e:	60f8      	str	r0, [r7, #12]
 8003570:	4608      	mov	r0, r1
 8003572:	4611      	mov	r1, r2
 8003574:	461a      	mov	r2, r3
 8003576:	4603      	mov	r3, r0
 8003578:	817b      	strh	r3, [r7, #10]
 800357a:	460b      	mov	r3, r1
 800357c:	813b      	strh	r3, [r7, #8]
 800357e:	4613      	mov	r3, r2
 8003580:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003588:	b2db      	uxtb	r3, r3
 800358a:	2b20      	cmp	r3, #32
 800358c:	f040 80f9 	bne.w	8003782 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003590:	6a3b      	ldr	r3, [r7, #32]
 8003592:	2b00      	cmp	r3, #0
 8003594:	d002      	beq.n	800359c <HAL_I2C_Mem_Write+0x34>
 8003596:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003598:	2b00      	cmp	r3, #0
 800359a:	d105      	bne.n	80035a8 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	f44f 7200 	mov.w	r2, #512	; 0x200
 80035a2:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80035a4:	2301      	movs	r3, #1
 80035a6:	e0ed      	b.n	8003784 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80035ae:	2b01      	cmp	r3, #1
 80035b0:	d101      	bne.n	80035b6 <HAL_I2C_Mem_Write+0x4e>
 80035b2:	2302      	movs	r3, #2
 80035b4:	e0e6      	b.n	8003784 <HAL_I2C_Mem_Write+0x21c>
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	2201      	movs	r2, #1
 80035ba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80035be:	f7ff fc71 	bl	8002ea4 <HAL_GetTick>
 80035c2:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80035c4:	697b      	ldr	r3, [r7, #20]
 80035c6:	9300      	str	r3, [sp, #0]
 80035c8:	2319      	movs	r3, #25
 80035ca:	2201      	movs	r2, #1
 80035cc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80035d0:	68f8      	ldr	r0, [r7, #12]
 80035d2:	f000 fac3 	bl	8003b5c <I2C_WaitOnFlagUntilTimeout>
 80035d6:	4603      	mov	r3, r0
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d001      	beq.n	80035e0 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80035dc:	2301      	movs	r3, #1
 80035de:	e0d1      	b.n	8003784 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	2221      	movs	r2, #33	; 0x21
 80035e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	2240      	movs	r2, #64	; 0x40
 80035ec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	2200      	movs	r2, #0
 80035f4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	6a3a      	ldr	r2, [r7, #32]
 80035fa:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003600:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	2200      	movs	r2, #0
 8003606:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003608:	88f8      	ldrh	r0, [r7, #6]
 800360a:	893a      	ldrh	r2, [r7, #8]
 800360c:	8979      	ldrh	r1, [r7, #10]
 800360e:	697b      	ldr	r3, [r7, #20]
 8003610:	9301      	str	r3, [sp, #4]
 8003612:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003614:	9300      	str	r3, [sp, #0]
 8003616:	4603      	mov	r3, r0
 8003618:	68f8      	ldr	r0, [r7, #12]
 800361a:	f000 f9d3 	bl	80039c4 <I2C_RequestMemoryWrite>
 800361e:	4603      	mov	r3, r0
 8003620:	2b00      	cmp	r3, #0
 8003622:	d005      	beq.n	8003630 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	2200      	movs	r2, #0
 8003628:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800362c:	2301      	movs	r3, #1
 800362e:	e0a9      	b.n	8003784 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003634:	b29b      	uxth	r3, r3
 8003636:	2bff      	cmp	r3, #255	; 0xff
 8003638:	d90e      	bls.n	8003658 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	22ff      	movs	r2, #255	; 0xff
 800363e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003644:	b2da      	uxtb	r2, r3
 8003646:	8979      	ldrh	r1, [r7, #10]
 8003648:	2300      	movs	r3, #0
 800364a:	9300      	str	r3, [sp, #0]
 800364c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003650:	68f8      	ldr	r0, [r7, #12]
 8003652:	f000 fba5 	bl	8003da0 <I2C_TransferConfig>
 8003656:	e00f      	b.n	8003678 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800365c:	b29a      	uxth	r2, r3
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003666:	b2da      	uxtb	r2, r3
 8003668:	8979      	ldrh	r1, [r7, #10]
 800366a:	2300      	movs	r3, #0
 800366c:	9300      	str	r3, [sp, #0]
 800366e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003672:	68f8      	ldr	r0, [r7, #12]
 8003674:	f000 fb94 	bl	8003da0 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003678:	697a      	ldr	r2, [r7, #20]
 800367a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800367c:	68f8      	ldr	r0, [r7, #12]
 800367e:	f000 faad 	bl	8003bdc <I2C_WaitOnTXISFlagUntilTimeout>
 8003682:	4603      	mov	r3, r0
 8003684:	2b00      	cmp	r3, #0
 8003686:	d001      	beq.n	800368c <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8003688:	2301      	movs	r3, #1
 800368a:	e07b      	b.n	8003784 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003690:	781a      	ldrb	r2, [r3, #0]
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800369c:	1c5a      	adds	r2, r3, #1
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036a6:	b29b      	uxth	r3, r3
 80036a8:	3b01      	subs	r3, #1
 80036aa:	b29a      	uxth	r2, r3
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036b4:	3b01      	subs	r3, #1
 80036b6:	b29a      	uxth	r2, r3
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036c0:	b29b      	uxth	r3, r3
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d034      	beq.n	8003730 <HAL_I2C_Mem_Write+0x1c8>
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d130      	bne.n	8003730 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80036ce:	697b      	ldr	r3, [r7, #20]
 80036d0:	9300      	str	r3, [sp, #0]
 80036d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036d4:	2200      	movs	r2, #0
 80036d6:	2180      	movs	r1, #128	; 0x80
 80036d8:	68f8      	ldr	r0, [r7, #12]
 80036da:	f000 fa3f 	bl	8003b5c <I2C_WaitOnFlagUntilTimeout>
 80036de:	4603      	mov	r3, r0
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d001      	beq.n	80036e8 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80036e4:	2301      	movs	r3, #1
 80036e6:	e04d      	b.n	8003784 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036ec:	b29b      	uxth	r3, r3
 80036ee:	2bff      	cmp	r3, #255	; 0xff
 80036f0:	d90e      	bls.n	8003710 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	22ff      	movs	r2, #255	; 0xff
 80036f6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036fc:	b2da      	uxtb	r2, r3
 80036fe:	8979      	ldrh	r1, [r7, #10]
 8003700:	2300      	movs	r3, #0
 8003702:	9300      	str	r3, [sp, #0]
 8003704:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003708:	68f8      	ldr	r0, [r7, #12]
 800370a:	f000 fb49 	bl	8003da0 <I2C_TransferConfig>
 800370e:	e00f      	b.n	8003730 <HAL_I2C_Mem_Write+0x1c8>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003714:	b29a      	uxth	r2, r3
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800371e:	b2da      	uxtb	r2, r3
 8003720:	8979      	ldrh	r1, [r7, #10]
 8003722:	2300      	movs	r3, #0
 8003724:	9300      	str	r3, [sp, #0]
 8003726:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800372a:	68f8      	ldr	r0, [r7, #12]
 800372c:	f000 fb38 	bl	8003da0 <I2C_TransferConfig>
        }
      }

    } while (hi2c->XferCount > 0U);
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003734:	b29b      	uxth	r3, r3
 8003736:	2b00      	cmp	r3, #0
 8003738:	d19e      	bne.n	8003678 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800373a:	697a      	ldr	r2, [r7, #20]
 800373c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800373e:	68f8      	ldr	r0, [r7, #12]
 8003740:	f000 fa8c 	bl	8003c5c <I2C_WaitOnSTOPFlagUntilTimeout>
 8003744:	4603      	mov	r3, r0
 8003746:	2b00      	cmp	r3, #0
 8003748:	d001      	beq.n	800374e <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800374a:	2301      	movs	r3, #1
 800374c:	e01a      	b.n	8003784 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	2220      	movs	r2, #32
 8003754:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	6859      	ldr	r1, [r3, #4]
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	681a      	ldr	r2, [r3, #0]
 8003760:	4b0a      	ldr	r3, [pc, #40]	; (800378c <HAL_I2C_Mem_Write+0x224>)
 8003762:	400b      	ands	r3, r1
 8003764:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	2220      	movs	r2, #32
 800376a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	2200      	movs	r2, #0
 8003772:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	2200      	movs	r2, #0
 800377a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800377e:	2300      	movs	r3, #0
 8003780:	e000      	b.n	8003784 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8003782:	2302      	movs	r3, #2
  }
}
 8003784:	4618      	mov	r0, r3
 8003786:	3718      	adds	r7, #24
 8003788:	46bd      	mov	sp, r7
 800378a:	bd80      	pop	{r7, pc}
 800378c:	fe00e800 	.word	0xfe00e800

08003790 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003790:	b580      	push	{r7, lr}
 8003792:	b088      	sub	sp, #32
 8003794:	af02      	add	r7, sp, #8
 8003796:	60f8      	str	r0, [r7, #12]
 8003798:	4608      	mov	r0, r1
 800379a:	4611      	mov	r1, r2
 800379c:	461a      	mov	r2, r3
 800379e:	4603      	mov	r3, r0
 80037a0:	817b      	strh	r3, [r7, #10]
 80037a2:	460b      	mov	r3, r1
 80037a4:	813b      	strh	r3, [r7, #8]
 80037a6:	4613      	mov	r3, r2
 80037a8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80037b0:	b2db      	uxtb	r3, r3
 80037b2:	2b20      	cmp	r3, #32
 80037b4:	f040 80fd 	bne.w	80039b2 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 80037b8:	6a3b      	ldr	r3, [r7, #32]
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d002      	beq.n	80037c4 <HAL_I2C_Mem_Read+0x34>
 80037be:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d105      	bne.n	80037d0 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80037ca:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80037cc:	2301      	movs	r3, #1
 80037ce:	e0f1      	b.n	80039b4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80037d6:	2b01      	cmp	r3, #1
 80037d8:	d101      	bne.n	80037de <HAL_I2C_Mem_Read+0x4e>
 80037da:	2302      	movs	r3, #2
 80037dc:	e0ea      	b.n	80039b4 <HAL_I2C_Mem_Read+0x224>
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	2201      	movs	r2, #1
 80037e2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80037e6:	f7ff fb5d 	bl	8002ea4 <HAL_GetTick>
 80037ea:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80037ec:	697b      	ldr	r3, [r7, #20]
 80037ee:	9300      	str	r3, [sp, #0]
 80037f0:	2319      	movs	r3, #25
 80037f2:	2201      	movs	r2, #1
 80037f4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80037f8:	68f8      	ldr	r0, [r7, #12]
 80037fa:	f000 f9af 	bl	8003b5c <I2C_WaitOnFlagUntilTimeout>
 80037fe:	4603      	mov	r3, r0
 8003800:	2b00      	cmp	r3, #0
 8003802:	d001      	beq.n	8003808 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8003804:	2301      	movs	r3, #1
 8003806:	e0d5      	b.n	80039b4 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	2222      	movs	r2, #34	; 0x22
 800380c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	2240      	movs	r2, #64	; 0x40
 8003814:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	2200      	movs	r2, #0
 800381c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	6a3a      	ldr	r2, [r7, #32]
 8003822:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003828:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	2200      	movs	r2, #0
 800382e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003830:	88f8      	ldrh	r0, [r7, #6]
 8003832:	893a      	ldrh	r2, [r7, #8]
 8003834:	8979      	ldrh	r1, [r7, #10]
 8003836:	697b      	ldr	r3, [r7, #20]
 8003838:	9301      	str	r3, [sp, #4]
 800383a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800383c:	9300      	str	r3, [sp, #0]
 800383e:	4603      	mov	r3, r0
 8003840:	68f8      	ldr	r0, [r7, #12]
 8003842:	f000 f913 	bl	8003a6c <I2C_RequestMemoryRead>
 8003846:	4603      	mov	r3, r0
 8003848:	2b00      	cmp	r3, #0
 800384a:	d005      	beq.n	8003858 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	2200      	movs	r2, #0
 8003850:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8003854:	2301      	movs	r3, #1
 8003856:	e0ad      	b.n	80039b4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800385c:	b29b      	uxth	r3, r3
 800385e:	2bff      	cmp	r3, #255	; 0xff
 8003860:	d90e      	bls.n	8003880 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	22ff      	movs	r2, #255	; 0xff
 8003866:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800386c:	b2da      	uxtb	r2, r3
 800386e:	8979      	ldrh	r1, [r7, #10]
 8003870:	4b52      	ldr	r3, [pc, #328]	; (80039bc <HAL_I2C_Mem_Read+0x22c>)
 8003872:	9300      	str	r3, [sp, #0]
 8003874:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003878:	68f8      	ldr	r0, [r7, #12]
 800387a:	f000 fa91 	bl	8003da0 <I2C_TransferConfig>
 800387e:	e00f      	b.n	80038a0 <HAL_I2C_Mem_Read+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003884:	b29a      	uxth	r2, r3
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800388e:	b2da      	uxtb	r2, r3
 8003890:	8979      	ldrh	r1, [r7, #10]
 8003892:	4b4a      	ldr	r3, [pc, #296]	; (80039bc <HAL_I2C_Mem_Read+0x22c>)
 8003894:	9300      	str	r3, [sp, #0]
 8003896:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800389a:	68f8      	ldr	r0, [r7, #12]
 800389c:	f000 fa80 	bl	8003da0 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80038a0:	697b      	ldr	r3, [r7, #20]
 80038a2:	9300      	str	r3, [sp, #0]
 80038a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038a6:	2200      	movs	r2, #0
 80038a8:	2104      	movs	r1, #4
 80038aa:	68f8      	ldr	r0, [r7, #12]
 80038ac:	f000 f956 	bl	8003b5c <I2C_WaitOnFlagUntilTimeout>
 80038b0:	4603      	mov	r3, r0
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d001      	beq.n	80038ba <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 80038b6:	2301      	movs	r3, #1
 80038b8:	e07c      	b.n	80039b4 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038c4:	b2d2      	uxtb	r2, r2
 80038c6:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038cc:	1c5a      	adds	r2, r3, #1
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038d6:	3b01      	subs	r3, #1
 80038d8:	b29a      	uxth	r2, r3
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038e2:	b29b      	uxth	r3, r3
 80038e4:	3b01      	subs	r3, #1
 80038e6:	b29a      	uxth	r2, r3
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038f0:	b29b      	uxth	r3, r3
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d034      	beq.n	8003960 <HAL_I2C_Mem_Read+0x1d0>
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d130      	bne.n	8003960 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80038fe:	697b      	ldr	r3, [r7, #20]
 8003900:	9300      	str	r3, [sp, #0]
 8003902:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003904:	2200      	movs	r2, #0
 8003906:	2180      	movs	r1, #128	; 0x80
 8003908:	68f8      	ldr	r0, [r7, #12]
 800390a:	f000 f927 	bl	8003b5c <I2C_WaitOnFlagUntilTimeout>
 800390e:	4603      	mov	r3, r0
 8003910:	2b00      	cmp	r3, #0
 8003912:	d001      	beq.n	8003918 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8003914:	2301      	movs	r3, #1
 8003916:	e04d      	b.n	80039b4 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800391c:	b29b      	uxth	r3, r3
 800391e:	2bff      	cmp	r3, #255	; 0xff
 8003920:	d90e      	bls.n	8003940 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	22ff      	movs	r2, #255	; 0xff
 8003926:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800392c:	b2da      	uxtb	r2, r3
 800392e:	8979      	ldrh	r1, [r7, #10]
 8003930:	2300      	movs	r3, #0
 8003932:	9300      	str	r3, [sp, #0]
 8003934:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003938:	68f8      	ldr	r0, [r7, #12]
 800393a:	f000 fa31 	bl	8003da0 <I2C_TransferConfig>
 800393e:	e00f      	b.n	8003960 <HAL_I2C_Mem_Read+0x1d0>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003944:	b29a      	uxth	r2, r3
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800394e:	b2da      	uxtb	r2, r3
 8003950:	8979      	ldrh	r1, [r7, #10]
 8003952:	2300      	movs	r3, #0
 8003954:	9300      	str	r3, [sp, #0]
 8003956:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800395a:	68f8      	ldr	r0, [r7, #12]
 800395c:	f000 fa20 	bl	8003da0 <I2C_TransferConfig>
        }
      }
    } while (hi2c->XferCount > 0U);
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003964:	b29b      	uxth	r3, r3
 8003966:	2b00      	cmp	r3, #0
 8003968:	d19a      	bne.n	80038a0 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800396a:	697a      	ldr	r2, [r7, #20]
 800396c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800396e:	68f8      	ldr	r0, [r7, #12]
 8003970:	f000 f974 	bl	8003c5c <I2C_WaitOnSTOPFlagUntilTimeout>
 8003974:	4603      	mov	r3, r0
 8003976:	2b00      	cmp	r3, #0
 8003978:	d001      	beq.n	800397e <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800397a:	2301      	movs	r3, #1
 800397c:	e01a      	b.n	80039b4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	2220      	movs	r2, #32
 8003984:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	6859      	ldr	r1, [r3, #4]
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	681a      	ldr	r2, [r3, #0]
 8003990:	4b0b      	ldr	r3, [pc, #44]	; (80039c0 <HAL_I2C_Mem_Read+0x230>)
 8003992:	400b      	ands	r3, r1
 8003994:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	2220      	movs	r2, #32
 800399a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	2200      	movs	r2, #0
 80039a2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	2200      	movs	r2, #0
 80039aa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80039ae:	2300      	movs	r3, #0
 80039b0:	e000      	b.n	80039b4 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 80039b2:	2302      	movs	r3, #2
  }
}
 80039b4:	4618      	mov	r0, r3
 80039b6:	3718      	adds	r7, #24
 80039b8:	46bd      	mov	sp, r7
 80039ba:	bd80      	pop	{r7, pc}
 80039bc:	80002400 	.word	0x80002400
 80039c0:	fe00e800 	.word	0xfe00e800

080039c4 <I2C_RequestMemoryWrite>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                                uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80039c4:	b580      	push	{r7, lr}
 80039c6:	b086      	sub	sp, #24
 80039c8:	af02      	add	r7, sp, #8
 80039ca:	60f8      	str	r0, [r7, #12]
 80039cc:	4608      	mov	r0, r1
 80039ce:	4611      	mov	r1, r2
 80039d0:	461a      	mov	r2, r3
 80039d2:	4603      	mov	r3, r0
 80039d4:	817b      	strh	r3, [r7, #10]
 80039d6:	460b      	mov	r3, r1
 80039d8:	813b      	strh	r3, [r7, #8]
 80039da:	4613      	mov	r3, r2
 80039dc:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80039de:	88fb      	ldrh	r3, [r7, #6]
 80039e0:	b2da      	uxtb	r2, r3
 80039e2:	8979      	ldrh	r1, [r7, #10]
 80039e4:	4b20      	ldr	r3, [pc, #128]	; (8003a68 <I2C_RequestMemoryWrite+0xa4>)
 80039e6:	9300      	str	r3, [sp, #0]
 80039e8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80039ec:	68f8      	ldr	r0, [r7, #12]
 80039ee:	f000 f9d7 	bl	8003da0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80039f2:	69fa      	ldr	r2, [r7, #28]
 80039f4:	69b9      	ldr	r1, [r7, #24]
 80039f6:	68f8      	ldr	r0, [r7, #12]
 80039f8:	f000 f8f0 	bl	8003bdc <I2C_WaitOnTXISFlagUntilTimeout>
 80039fc:	4603      	mov	r3, r0
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d001      	beq.n	8003a06 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8003a02:	2301      	movs	r3, #1
 8003a04:	e02c      	b.n	8003a60 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003a06:	88fb      	ldrh	r3, [r7, #6]
 8003a08:	2b01      	cmp	r3, #1
 8003a0a:	d105      	bne.n	8003a18 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003a0c:	893b      	ldrh	r3, [r7, #8]
 8003a0e:	b2da      	uxtb	r2, r3
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	629a      	str	r2, [r3, #40]	; 0x28
 8003a16:	e015      	b.n	8003a44 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003a18:	893b      	ldrh	r3, [r7, #8]
 8003a1a:	0a1b      	lsrs	r3, r3, #8
 8003a1c:	b29b      	uxth	r3, r3
 8003a1e:	b2da      	uxtb	r2, r3
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003a26:	69fa      	ldr	r2, [r7, #28]
 8003a28:	69b9      	ldr	r1, [r7, #24]
 8003a2a:	68f8      	ldr	r0, [r7, #12]
 8003a2c:	f000 f8d6 	bl	8003bdc <I2C_WaitOnTXISFlagUntilTimeout>
 8003a30:	4603      	mov	r3, r0
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d001      	beq.n	8003a3a <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8003a36:	2301      	movs	r3, #1
 8003a38:	e012      	b.n	8003a60 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003a3a:	893b      	ldrh	r3, [r7, #8]
 8003a3c:	b2da      	uxtb	r2, r3
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8003a44:	69fb      	ldr	r3, [r7, #28]
 8003a46:	9300      	str	r3, [sp, #0]
 8003a48:	69bb      	ldr	r3, [r7, #24]
 8003a4a:	2200      	movs	r2, #0
 8003a4c:	2180      	movs	r1, #128	; 0x80
 8003a4e:	68f8      	ldr	r0, [r7, #12]
 8003a50:	f000 f884 	bl	8003b5c <I2C_WaitOnFlagUntilTimeout>
 8003a54:	4603      	mov	r3, r0
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d001      	beq.n	8003a5e <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8003a5a:	2301      	movs	r3, #1
 8003a5c:	e000      	b.n	8003a60 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8003a5e:	2300      	movs	r3, #0
}
 8003a60:	4618      	mov	r0, r3
 8003a62:	3710      	adds	r7, #16
 8003a64:	46bd      	mov	sp, r7
 8003a66:	bd80      	pop	{r7, pc}
 8003a68:	80002000 	.word	0x80002000

08003a6c <I2C_RequestMemoryRead>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                               uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003a6c:	b580      	push	{r7, lr}
 8003a6e:	b086      	sub	sp, #24
 8003a70:	af02      	add	r7, sp, #8
 8003a72:	60f8      	str	r0, [r7, #12]
 8003a74:	4608      	mov	r0, r1
 8003a76:	4611      	mov	r1, r2
 8003a78:	461a      	mov	r2, r3
 8003a7a:	4603      	mov	r3, r0
 8003a7c:	817b      	strh	r3, [r7, #10]
 8003a7e:	460b      	mov	r3, r1
 8003a80:	813b      	strh	r3, [r7, #8]
 8003a82:	4613      	mov	r3, r2
 8003a84:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8003a86:	88fb      	ldrh	r3, [r7, #6]
 8003a88:	b2da      	uxtb	r2, r3
 8003a8a:	8979      	ldrh	r1, [r7, #10]
 8003a8c:	4b20      	ldr	r3, [pc, #128]	; (8003b10 <I2C_RequestMemoryRead+0xa4>)
 8003a8e:	9300      	str	r3, [sp, #0]
 8003a90:	2300      	movs	r3, #0
 8003a92:	68f8      	ldr	r0, [r7, #12]
 8003a94:	f000 f984 	bl	8003da0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003a98:	69fa      	ldr	r2, [r7, #28]
 8003a9a:	69b9      	ldr	r1, [r7, #24]
 8003a9c:	68f8      	ldr	r0, [r7, #12]
 8003a9e:	f000 f89d 	bl	8003bdc <I2C_WaitOnTXISFlagUntilTimeout>
 8003aa2:	4603      	mov	r3, r0
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d001      	beq.n	8003aac <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8003aa8:	2301      	movs	r3, #1
 8003aaa:	e02c      	b.n	8003b06 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003aac:	88fb      	ldrh	r3, [r7, #6]
 8003aae:	2b01      	cmp	r3, #1
 8003ab0:	d105      	bne.n	8003abe <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003ab2:	893b      	ldrh	r3, [r7, #8]
 8003ab4:	b2da      	uxtb	r2, r3
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	629a      	str	r2, [r3, #40]	; 0x28
 8003abc:	e015      	b.n	8003aea <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003abe:	893b      	ldrh	r3, [r7, #8]
 8003ac0:	0a1b      	lsrs	r3, r3, #8
 8003ac2:	b29b      	uxth	r3, r3
 8003ac4:	b2da      	uxtb	r2, r3
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003acc:	69fa      	ldr	r2, [r7, #28]
 8003ace:	69b9      	ldr	r1, [r7, #24]
 8003ad0:	68f8      	ldr	r0, [r7, #12]
 8003ad2:	f000 f883 	bl	8003bdc <I2C_WaitOnTXISFlagUntilTimeout>
 8003ad6:	4603      	mov	r3, r0
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d001      	beq.n	8003ae0 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8003adc:	2301      	movs	r3, #1
 8003ade:	e012      	b.n	8003b06 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003ae0:	893b      	ldrh	r3, [r7, #8]
 8003ae2:	b2da      	uxtb	r2, r3
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8003aea:	69fb      	ldr	r3, [r7, #28]
 8003aec:	9300      	str	r3, [sp, #0]
 8003aee:	69bb      	ldr	r3, [r7, #24]
 8003af0:	2200      	movs	r2, #0
 8003af2:	2140      	movs	r1, #64	; 0x40
 8003af4:	68f8      	ldr	r0, [r7, #12]
 8003af6:	f000 f831 	bl	8003b5c <I2C_WaitOnFlagUntilTimeout>
 8003afa:	4603      	mov	r3, r0
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d001      	beq.n	8003b04 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8003b00:	2301      	movs	r3, #1
 8003b02:	e000      	b.n	8003b06 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8003b04:	2300      	movs	r3, #0
}
 8003b06:	4618      	mov	r0, r3
 8003b08:	3710      	adds	r7, #16
 8003b0a:	46bd      	mov	sp, r7
 8003b0c:	bd80      	pop	{r7, pc}
 8003b0e:	bf00      	nop
 8003b10:	80002000 	.word	0x80002000

08003b14 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003b14:	b480      	push	{r7}
 8003b16:	b083      	sub	sp, #12
 8003b18:	af00      	add	r7, sp, #0
 8003b1a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	699b      	ldr	r3, [r3, #24]
 8003b22:	f003 0302 	and.w	r3, r3, #2
 8003b26:	2b02      	cmp	r3, #2
 8003b28:	d103      	bne.n	8003b32 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	2200      	movs	r2, #0
 8003b30:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	699b      	ldr	r3, [r3, #24]
 8003b38:	f003 0301 	and.w	r3, r3, #1
 8003b3c:	2b01      	cmp	r3, #1
 8003b3e:	d007      	beq.n	8003b50 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	699a      	ldr	r2, [r3, #24]
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	f042 0201 	orr.w	r2, r2, #1
 8003b4e:	619a      	str	r2, [r3, #24]
  }
}
 8003b50:	bf00      	nop
 8003b52:	370c      	adds	r7, #12
 8003b54:	46bd      	mov	sp, r7
 8003b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b5a:	4770      	bx	lr

08003b5c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003b5c:	b580      	push	{r7, lr}
 8003b5e:	b084      	sub	sp, #16
 8003b60:	af00      	add	r7, sp, #0
 8003b62:	60f8      	str	r0, [r7, #12]
 8003b64:	60b9      	str	r1, [r7, #8]
 8003b66:	603b      	str	r3, [r7, #0]
 8003b68:	4613      	mov	r3, r2
 8003b6a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003b6c:	e022      	b.n	8003bb4 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003b6e:	683b      	ldr	r3, [r7, #0]
 8003b70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b74:	d01e      	beq.n	8003bb4 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b76:	f7ff f995 	bl	8002ea4 <HAL_GetTick>
 8003b7a:	4602      	mov	r2, r0
 8003b7c:	69bb      	ldr	r3, [r7, #24]
 8003b7e:	1ad3      	subs	r3, r2, r3
 8003b80:	683a      	ldr	r2, [r7, #0]
 8003b82:	429a      	cmp	r2, r3
 8003b84:	d302      	bcc.n	8003b8c <I2C_WaitOnFlagUntilTimeout+0x30>
 8003b86:	683b      	ldr	r3, [r7, #0]
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d113      	bne.n	8003bb4 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b90:	f043 0220 	orr.w	r2, r3, #32
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	2220      	movs	r2, #32
 8003b9c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	2200      	movs	r2, #0
 8003ba4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	2200      	movs	r2, #0
 8003bac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8003bb0:	2301      	movs	r3, #1
 8003bb2:	e00f      	b.n	8003bd4 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	699a      	ldr	r2, [r3, #24]
 8003bba:	68bb      	ldr	r3, [r7, #8]
 8003bbc:	4013      	ands	r3, r2
 8003bbe:	68ba      	ldr	r2, [r7, #8]
 8003bc0:	429a      	cmp	r2, r3
 8003bc2:	bf0c      	ite	eq
 8003bc4:	2301      	moveq	r3, #1
 8003bc6:	2300      	movne	r3, #0
 8003bc8:	b2db      	uxtb	r3, r3
 8003bca:	461a      	mov	r2, r3
 8003bcc:	79fb      	ldrb	r3, [r7, #7]
 8003bce:	429a      	cmp	r2, r3
 8003bd0:	d0cd      	beq.n	8003b6e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003bd2:	2300      	movs	r3, #0
}
 8003bd4:	4618      	mov	r0, r3
 8003bd6:	3710      	adds	r7, #16
 8003bd8:	46bd      	mov	sp, r7
 8003bda:	bd80      	pop	{r7, pc}

08003bdc <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003bdc:	b580      	push	{r7, lr}
 8003bde:	b084      	sub	sp, #16
 8003be0:	af00      	add	r7, sp, #0
 8003be2:	60f8      	str	r0, [r7, #12]
 8003be4:	60b9      	str	r1, [r7, #8]
 8003be6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003be8:	e02c      	b.n	8003c44 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8003bea:	687a      	ldr	r2, [r7, #4]
 8003bec:	68b9      	ldr	r1, [r7, #8]
 8003bee:	68f8      	ldr	r0, [r7, #12]
 8003bf0:	f000 f870 	bl	8003cd4 <I2C_IsAcknowledgeFailed>
 8003bf4:	4603      	mov	r3, r0
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d001      	beq.n	8003bfe <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003bfa:	2301      	movs	r3, #1
 8003bfc:	e02a      	b.n	8003c54 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003bfe:	68bb      	ldr	r3, [r7, #8]
 8003c00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c04:	d01e      	beq.n	8003c44 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c06:	f7ff f94d 	bl	8002ea4 <HAL_GetTick>
 8003c0a:	4602      	mov	r2, r0
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	1ad3      	subs	r3, r2, r3
 8003c10:	68ba      	ldr	r2, [r7, #8]
 8003c12:	429a      	cmp	r2, r3
 8003c14:	d302      	bcc.n	8003c1c <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8003c16:	68bb      	ldr	r3, [r7, #8]
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d113      	bne.n	8003c44 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c20:	f043 0220 	orr.w	r2, r3, #32
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	2220      	movs	r2, #32
 8003c2c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	2200      	movs	r2, #0
 8003c34:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	2200      	movs	r2, #0
 8003c3c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8003c40:	2301      	movs	r3, #1
 8003c42:	e007      	b.n	8003c54 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	699b      	ldr	r3, [r3, #24]
 8003c4a:	f003 0302 	and.w	r3, r3, #2
 8003c4e:	2b02      	cmp	r3, #2
 8003c50:	d1cb      	bne.n	8003bea <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003c52:	2300      	movs	r3, #0
}
 8003c54:	4618      	mov	r0, r3
 8003c56:	3710      	adds	r7, #16
 8003c58:	46bd      	mov	sp, r7
 8003c5a:	bd80      	pop	{r7, pc}

08003c5c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003c5c:	b580      	push	{r7, lr}
 8003c5e:	b084      	sub	sp, #16
 8003c60:	af00      	add	r7, sp, #0
 8003c62:	60f8      	str	r0, [r7, #12]
 8003c64:	60b9      	str	r1, [r7, #8]
 8003c66:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003c68:	e028      	b.n	8003cbc <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8003c6a:	687a      	ldr	r2, [r7, #4]
 8003c6c:	68b9      	ldr	r1, [r7, #8]
 8003c6e:	68f8      	ldr	r0, [r7, #12]
 8003c70:	f000 f830 	bl	8003cd4 <I2C_IsAcknowledgeFailed>
 8003c74:	4603      	mov	r3, r0
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d001      	beq.n	8003c7e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003c7a:	2301      	movs	r3, #1
 8003c7c:	e026      	b.n	8003ccc <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c7e:	f7ff f911 	bl	8002ea4 <HAL_GetTick>
 8003c82:	4602      	mov	r2, r0
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	1ad3      	subs	r3, r2, r3
 8003c88:	68ba      	ldr	r2, [r7, #8]
 8003c8a:	429a      	cmp	r2, r3
 8003c8c:	d302      	bcc.n	8003c94 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003c8e:	68bb      	ldr	r3, [r7, #8]
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d113      	bne.n	8003cbc <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c98:	f043 0220 	orr.w	r2, r3, #32
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	2220      	movs	r2, #32
 8003ca4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	2200      	movs	r2, #0
 8003cac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	2200      	movs	r2, #0
 8003cb4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8003cb8:	2301      	movs	r3, #1
 8003cba:	e007      	b.n	8003ccc <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	699b      	ldr	r3, [r3, #24]
 8003cc2:	f003 0320 	and.w	r3, r3, #32
 8003cc6:	2b20      	cmp	r3, #32
 8003cc8:	d1cf      	bne.n	8003c6a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003cca:	2300      	movs	r3, #0
}
 8003ccc:	4618      	mov	r0, r3
 8003cce:	3710      	adds	r7, #16
 8003cd0:	46bd      	mov	sp, r7
 8003cd2:	bd80      	pop	{r7, pc}

08003cd4 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003cd4:	b580      	push	{r7, lr}
 8003cd6:	b084      	sub	sp, #16
 8003cd8:	af00      	add	r7, sp, #0
 8003cda:	60f8      	str	r0, [r7, #12]
 8003cdc:	60b9      	str	r1, [r7, #8]
 8003cde:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	699b      	ldr	r3, [r3, #24]
 8003ce6:	f003 0310 	and.w	r3, r3, #16
 8003cea:	2b10      	cmp	r3, #16
 8003cec:	d151      	bne.n	8003d92 <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003cee:	e022      	b.n	8003d36 <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003cf0:	68bb      	ldr	r3, [r7, #8]
 8003cf2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003cf6:	d01e      	beq.n	8003d36 <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003cf8:	f7ff f8d4 	bl	8002ea4 <HAL_GetTick>
 8003cfc:	4602      	mov	r2, r0
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	1ad3      	subs	r3, r2, r3
 8003d02:	68ba      	ldr	r2, [r7, #8]
 8003d04:	429a      	cmp	r2, r3
 8003d06:	d302      	bcc.n	8003d0e <I2C_IsAcknowledgeFailed+0x3a>
 8003d08:	68bb      	ldr	r3, [r7, #8]
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d113      	bne.n	8003d36 <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d12:	f043 0220 	orr.w	r2, r3, #32
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	2220      	movs	r2, #32
 8003d1e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	2200      	movs	r2, #0
 8003d26:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	2200      	movs	r2, #0
 8003d2e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8003d32:	2301      	movs	r3, #1
 8003d34:	e02e      	b.n	8003d94 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	699b      	ldr	r3, [r3, #24]
 8003d3c:	f003 0320 	and.w	r3, r3, #32
 8003d40:	2b20      	cmp	r3, #32
 8003d42:	d1d5      	bne.n	8003cf0 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	2210      	movs	r2, #16
 8003d4a:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	2220      	movs	r2, #32
 8003d52:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003d54:	68f8      	ldr	r0, [r7, #12]
 8003d56:	f7ff fedd 	bl	8003b14 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	6859      	ldr	r1, [r3, #4]
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	681a      	ldr	r2, [r3, #0]
 8003d64:	4b0d      	ldr	r3, [pc, #52]	; (8003d9c <I2C_IsAcknowledgeFailed+0xc8>)
 8003d66:	400b      	ands	r3, r1
 8003d68:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d6e:	f043 0204 	orr.w	r2, r3, #4
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	2220      	movs	r2, #32
 8003d7a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	2200      	movs	r2, #0
 8003d82:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	2200      	movs	r2, #0
 8003d8a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8003d8e:	2301      	movs	r3, #1
 8003d90:	e000      	b.n	8003d94 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8003d92:	2300      	movs	r3, #0
}
 8003d94:	4618      	mov	r0, r3
 8003d96:	3710      	adds	r7, #16
 8003d98:	46bd      	mov	sp, r7
 8003d9a:	bd80      	pop	{r7, pc}
 8003d9c:	fe00e800 	.word	0xfe00e800

08003da0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003da0:	b480      	push	{r7}
 8003da2:	b085      	sub	sp, #20
 8003da4:	af00      	add	r7, sp, #0
 8003da6:	60f8      	str	r0, [r7, #12]
 8003da8:	607b      	str	r3, [r7, #4]
 8003daa:	460b      	mov	r3, r1
 8003dac:	817b      	strh	r3, [r7, #10]
 8003dae:	4613      	mov	r3, r2
 8003db0:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	685a      	ldr	r2, [r3, #4]
 8003db8:	69bb      	ldr	r3, [r7, #24]
 8003dba:	0d5b      	lsrs	r3, r3, #21
 8003dbc:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8003dc0:	4b0d      	ldr	r3, [pc, #52]	; (8003df8 <I2C_TransferConfig+0x58>)
 8003dc2:	430b      	orrs	r3, r1
 8003dc4:	43db      	mvns	r3, r3
 8003dc6:	ea02 0103 	and.w	r1, r2, r3
 8003dca:	897b      	ldrh	r3, [r7, #10]
 8003dcc:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003dd0:	7a7b      	ldrb	r3, [r7, #9]
 8003dd2:	041b      	lsls	r3, r3, #16
 8003dd4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8003dd8:	431a      	orrs	r2, r3
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	431a      	orrs	r2, r3
 8003dde:	69bb      	ldr	r3, [r7, #24]
 8003de0:	431a      	orrs	r2, r3
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	430a      	orrs	r2, r1
 8003de8:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8003dea:	bf00      	nop
 8003dec:	3714      	adds	r7, #20
 8003dee:	46bd      	mov	sp, r7
 8003df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df4:	4770      	bx	lr
 8003df6:	bf00      	nop
 8003df8:	03ff63ff 	.word	0x03ff63ff

08003dfc <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003dfc:	b480      	push	{r7}
 8003dfe:	b083      	sub	sp, #12
 8003e00:	af00      	add	r7, sp, #0
 8003e02:	6078      	str	r0, [r7, #4]
 8003e04:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003e0c:	b2db      	uxtb	r3, r3
 8003e0e:	2b20      	cmp	r3, #32
 8003e10:	d138      	bne.n	8003e84 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003e18:	2b01      	cmp	r3, #1
 8003e1a:	d101      	bne.n	8003e20 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003e1c:	2302      	movs	r3, #2
 8003e1e:	e032      	b.n	8003e86 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	2201      	movs	r2, #1
 8003e24:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	2224      	movs	r2, #36	; 0x24
 8003e2c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	681a      	ldr	r2, [r3, #0]
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	f022 0201 	bic.w	r2, r2, #1
 8003e3e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	681a      	ldr	r2, [r3, #0]
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003e4e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	6819      	ldr	r1, [r3, #0]
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	683a      	ldr	r2, [r7, #0]
 8003e5c:	430a      	orrs	r2, r1
 8003e5e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	681a      	ldr	r2, [r3, #0]
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	f042 0201 	orr.w	r2, r2, #1
 8003e6e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	2220      	movs	r2, #32
 8003e74:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	2200      	movs	r2, #0
 8003e7c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003e80:	2300      	movs	r3, #0
 8003e82:	e000      	b.n	8003e86 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003e84:	2302      	movs	r3, #2
  }
}
 8003e86:	4618      	mov	r0, r3
 8003e88:	370c      	adds	r7, #12
 8003e8a:	46bd      	mov	sp, r7
 8003e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e90:	4770      	bx	lr

08003e92 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003e92:	b480      	push	{r7}
 8003e94:	b085      	sub	sp, #20
 8003e96:	af00      	add	r7, sp, #0
 8003e98:	6078      	str	r0, [r7, #4]
 8003e9a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003ea2:	b2db      	uxtb	r3, r3
 8003ea4:	2b20      	cmp	r3, #32
 8003ea6:	d139      	bne.n	8003f1c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003eae:	2b01      	cmp	r3, #1
 8003eb0:	d101      	bne.n	8003eb6 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003eb2:	2302      	movs	r3, #2
 8003eb4:	e033      	b.n	8003f1e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	2201      	movs	r2, #1
 8003eba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	2224      	movs	r2, #36	; 0x24
 8003ec2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	681a      	ldr	r2, [r3, #0]
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	f022 0201 	bic.w	r2, r2, #1
 8003ed4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003ee4:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003ee6:	683b      	ldr	r3, [r7, #0]
 8003ee8:	021b      	lsls	r3, r3, #8
 8003eea:	68fa      	ldr	r2, [r7, #12]
 8003eec:	4313      	orrs	r3, r2
 8003eee:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	68fa      	ldr	r2, [r7, #12]
 8003ef6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	681a      	ldr	r2, [r3, #0]
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	f042 0201 	orr.w	r2, r2, #1
 8003f06:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	2220      	movs	r2, #32
 8003f0c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	2200      	movs	r2, #0
 8003f14:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003f18:	2300      	movs	r3, #0
 8003f1a:	e000      	b.n	8003f1e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003f1c:	2302      	movs	r3, #2
  }
}
 8003f1e:	4618      	mov	r0, r3
 8003f20:	3714      	adds	r7, #20
 8003f22:	46bd      	mov	sp, r7
 8003f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f28:	4770      	bx	lr

08003f2a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003f2a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003f2c:	b08b      	sub	sp, #44	; 0x2c
 8003f2e:	af06      	add	r7, sp, #24
 8003f30:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d101      	bne.n	8003f3c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003f38:	2301      	movs	r3, #1
 8003f3a:	e0d0      	b.n	80040de <HAL_PCD_Init+0x1b4>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8003f42:	b2db      	uxtb	r3, r3
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d106      	bne.n	8003f56 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	2200      	movs	r2, #0
 8003f4c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003f50:	6878      	ldr	r0, [r7, #4]
 8003f52:	f007 fa73 	bl	800b43c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	2203      	movs	r2, #3
 8003f5a:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	4618      	mov	r0, r3
 8003f64:	f003 fc93 	bl	800788e <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003f68:	2300      	movs	r3, #0
 8003f6a:	73fb      	strb	r3, [r7, #15]
 8003f6c:	e04c      	b.n	8004008 <HAL_PCD_Init+0xde>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003f6e:	7bfb      	ldrb	r3, [r7, #15]
 8003f70:	6879      	ldr	r1, [r7, #4]
 8003f72:	1c5a      	adds	r2, r3, #1
 8003f74:	4613      	mov	r3, r2
 8003f76:	009b      	lsls	r3, r3, #2
 8003f78:	4413      	add	r3, r2
 8003f7a:	00db      	lsls	r3, r3, #3
 8003f7c:	440b      	add	r3, r1
 8003f7e:	3301      	adds	r3, #1
 8003f80:	2201      	movs	r2, #1
 8003f82:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003f84:	7bfb      	ldrb	r3, [r7, #15]
 8003f86:	6879      	ldr	r1, [r7, #4]
 8003f88:	1c5a      	adds	r2, r3, #1
 8003f8a:	4613      	mov	r3, r2
 8003f8c:	009b      	lsls	r3, r3, #2
 8003f8e:	4413      	add	r3, r2
 8003f90:	00db      	lsls	r3, r3, #3
 8003f92:	440b      	add	r3, r1
 8003f94:	7bfa      	ldrb	r2, [r7, #15]
 8003f96:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003f98:	7bfa      	ldrb	r2, [r7, #15]
 8003f9a:	7bfb      	ldrb	r3, [r7, #15]
 8003f9c:	b298      	uxth	r0, r3
 8003f9e:	6879      	ldr	r1, [r7, #4]
 8003fa0:	4613      	mov	r3, r2
 8003fa2:	009b      	lsls	r3, r3, #2
 8003fa4:	4413      	add	r3, r2
 8003fa6:	00db      	lsls	r3, r3, #3
 8003fa8:	440b      	add	r3, r1
 8003faa:	3336      	adds	r3, #54	; 0x36
 8003fac:	4602      	mov	r2, r0
 8003fae:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003fb0:	7bfb      	ldrb	r3, [r7, #15]
 8003fb2:	6879      	ldr	r1, [r7, #4]
 8003fb4:	1c5a      	adds	r2, r3, #1
 8003fb6:	4613      	mov	r3, r2
 8003fb8:	009b      	lsls	r3, r3, #2
 8003fba:	4413      	add	r3, r2
 8003fbc:	00db      	lsls	r3, r3, #3
 8003fbe:	440b      	add	r3, r1
 8003fc0:	3303      	adds	r3, #3
 8003fc2:	2200      	movs	r2, #0
 8003fc4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003fc6:	7bfa      	ldrb	r2, [r7, #15]
 8003fc8:	6879      	ldr	r1, [r7, #4]
 8003fca:	4613      	mov	r3, r2
 8003fcc:	009b      	lsls	r3, r3, #2
 8003fce:	4413      	add	r3, r2
 8003fd0:	00db      	lsls	r3, r3, #3
 8003fd2:	440b      	add	r3, r1
 8003fd4:	3338      	adds	r3, #56	; 0x38
 8003fd6:	2200      	movs	r2, #0
 8003fd8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003fda:	7bfa      	ldrb	r2, [r7, #15]
 8003fdc:	6879      	ldr	r1, [r7, #4]
 8003fde:	4613      	mov	r3, r2
 8003fe0:	009b      	lsls	r3, r3, #2
 8003fe2:	4413      	add	r3, r2
 8003fe4:	00db      	lsls	r3, r3, #3
 8003fe6:	440b      	add	r3, r1
 8003fe8:	333c      	adds	r3, #60	; 0x3c
 8003fea:	2200      	movs	r2, #0
 8003fec:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003fee:	7bfa      	ldrb	r2, [r7, #15]
 8003ff0:	6879      	ldr	r1, [r7, #4]
 8003ff2:	4613      	mov	r3, r2
 8003ff4:	009b      	lsls	r3, r3, #2
 8003ff6:	4413      	add	r3, r2
 8003ff8:	00db      	lsls	r3, r3, #3
 8003ffa:	440b      	add	r3, r1
 8003ffc:	3340      	adds	r3, #64	; 0x40
 8003ffe:	2200      	movs	r2, #0
 8004000:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004002:	7bfb      	ldrb	r3, [r7, #15]
 8004004:	3301      	adds	r3, #1
 8004006:	73fb      	strb	r3, [r7, #15]
 8004008:	7bfa      	ldrb	r2, [r7, #15]
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	685b      	ldr	r3, [r3, #4]
 800400e:	429a      	cmp	r2, r3
 8004010:	d3ad      	bcc.n	8003f6e <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004012:	2300      	movs	r3, #0
 8004014:	73fb      	strb	r3, [r7, #15]
 8004016:	e044      	b.n	80040a2 <HAL_PCD_Init+0x178>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8004018:	7bfa      	ldrb	r2, [r7, #15]
 800401a:	6879      	ldr	r1, [r7, #4]
 800401c:	4613      	mov	r3, r2
 800401e:	009b      	lsls	r3, r3, #2
 8004020:	4413      	add	r3, r2
 8004022:	00db      	lsls	r3, r3, #3
 8004024:	440b      	add	r3, r1
 8004026:	f203 1369 	addw	r3, r3, #361	; 0x169
 800402a:	2200      	movs	r2, #0
 800402c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800402e:	7bfa      	ldrb	r2, [r7, #15]
 8004030:	6879      	ldr	r1, [r7, #4]
 8004032:	4613      	mov	r3, r2
 8004034:	009b      	lsls	r3, r3, #2
 8004036:	4413      	add	r3, r2
 8004038:	00db      	lsls	r3, r3, #3
 800403a:	440b      	add	r3, r1
 800403c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004040:	7bfa      	ldrb	r2, [r7, #15]
 8004042:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8004044:	7bfa      	ldrb	r2, [r7, #15]
 8004046:	6879      	ldr	r1, [r7, #4]
 8004048:	4613      	mov	r3, r2
 800404a:	009b      	lsls	r3, r3, #2
 800404c:	4413      	add	r3, r2
 800404e:	00db      	lsls	r3, r3, #3
 8004050:	440b      	add	r3, r1
 8004052:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8004056:	2200      	movs	r2, #0
 8004058:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800405a:	7bfa      	ldrb	r2, [r7, #15]
 800405c:	6879      	ldr	r1, [r7, #4]
 800405e:	4613      	mov	r3, r2
 8004060:	009b      	lsls	r3, r3, #2
 8004062:	4413      	add	r3, r2
 8004064:	00db      	lsls	r3, r3, #3
 8004066:	440b      	add	r3, r1
 8004068:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 800406c:	2200      	movs	r2, #0
 800406e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8004070:	7bfa      	ldrb	r2, [r7, #15]
 8004072:	6879      	ldr	r1, [r7, #4]
 8004074:	4613      	mov	r3, r2
 8004076:	009b      	lsls	r3, r3, #2
 8004078:	4413      	add	r3, r2
 800407a:	00db      	lsls	r3, r3, #3
 800407c:	440b      	add	r3, r1
 800407e:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8004082:	2200      	movs	r2, #0
 8004084:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8004086:	7bfa      	ldrb	r2, [r7, #15]
 8004088:	6879      	ldr	r1, [r7, #4]
 800408a:	4613      	mov	r3, r2
 800408c:	009b      	lsls	r3, r3, #2
 800408e:	4413      	add	r3, r2
 8004090:	00db      	lsls	r3, r3, #3
 8004092:	440b      	add	r3, r1
 8004094:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8004098:	2200      	movs	r2, #0
 800409a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800409c:	7bfb      	ldrb	r3, [r7, #15]
 800409e:	3301      	adds	r3, #1
 80040a0:	73fb      	strb	r3, [r7, #15]
 80040a2:	7bfa      	ldrb	r2, [r7, #15]
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	685b      	ldr	r3, [r3, #4]
 80040a8:	429a      	cmp	r2, r3
 80040aa:	d3b5      	bcc.n	8004018 <HAL_PCD_Init+0xee>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	603b      	str	r3, [r7, #0]
 80040b2:	687e      	ldr	r6, [r7, #4]
 80040b4:	466d      	mov	r5, sp
 80040b6:	f106 0410 	add.w	r4, r6, #16
 80040ba:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80040bc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80040be:	6823      	ldr	r3, [r4, #0]
 80040c0:	602b      	str	r3, [r5, #0]
 80040c2:	1d33      	adds	r3, r6, #4
 80040c4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80040c6:	6838      	ldr	r0, [r7, #0]
 80040c8:	f003 fbfc 	bl	80078c4 <USB_DevInit>

  hpcd->USB_Address = 0U;
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	2200      	movs	r2, #0
 80040d0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	2201      	movs	r2, #1
 80040d8:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  return HAL_OK;
 80040dc:	2300      	movs	r3, #0
}
 80040de:	4618      	mov	r0, r3
 80040e0:	3714      	adds	r7, #20
 80040e2:	46bd      	mov	sp, r7
 80040e4:	bdf0      	pop	{r4, r5, r6, r7, pc}

080040e6 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80040e6:	b580      	push	{r7, lr}
 80040e8:	b082      	sub	sp, #8
 80040ea:	af00      	add	r7, sp, #0
 80040ec:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80040f4:	2b01      	cmp	r3, #1
 80040f6:	d101      	bne.n	80040fc <HAL_PCD_Start+0x16>
 80040f8:	2302      	movs	r3, #2
 80040fa:	e016      	b.n	800412a <HAL_PCD_Start+0x44>
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	2201      	movs	r2, #1
 8004100:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	4618      	mov	r0, r3
 800410a:	f003 fba9 	bl	8007860 <USB_EnableGlobalInt>

  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 800410e:	2101      	movs	r1, #1
 8004110:	6878      	ldr	r0, [r7, #4]
 8004112:	f007 fc31 	bl	800b978 <HAL_PCDEx_SetConnectionState>

  (void)USB_DevConnect(hpcd->Instance);
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	4618      	mov	r0, r3
 800411c:	f005 fb82 	bl	8009824 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	2200      	movs	r2, #0
 8004124:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8004128:	2300      	movs	r3, #0
}
 800412a:	4618      	mov	r0, r3
 800412c:	3708      	adds	r7, #8
 800412e:	46bd      	mov	sp, r7
 8004130:	bd80      	pop	{r7, pc}

08004132 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8004132:	b580      	push	{r7, lr}
 8004134:	b082      	sub	sp, #8
 8004136:	af00      	add	r7, sp, #0
 8004138:	6078      	str	r0, [r7, #4]
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	4618      	mov	r0, r3
 8004140:	f005 fb7b 	bl	800983a <USB_ReadInterrupts>
 8004144:	4603      	mov	r3, r0
 8004146:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800414a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800414e:	d102      	bne.n	8004156 <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8004150:	6878      	ldr	r0, [r7, #4]
 8004152:	f000 faf6 	bl	8004742 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	4618      	mov	r0, r3
 800415c:	f005 fb6d 	bl	800983a <USB_ReadInterrupts>
 8004160:	4603      	mov	r3, r0
 8004162:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004166:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800416a:	d112      	bne.n	8004192 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004174:	b29a      	uxth	r2, r3
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800417e:	b292      	uxth	r2, r2
 8004180:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8004184:	6878      	ldr	r0, [r7, #4]
 8004186:	f007 f9fa 	bl	800b57e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 800418a:	2100      	movs	r1, #0
 800418c:	6878      	ldr	r0, [r7, #4]
 800418e:	f000 f8c7 	bl	8004320 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	4618      	mov	r0, r3
 8004198:	f005 fb4f 	bl	800983a <USB_ReadInterrupts>
 800419c:	4603      	mov	r3, r0
 800419e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80041a2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80041a6:	d10b      	bne.n	80041c0 <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80041b0:	b29a      	uxth	r2, r3
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80041ba:	b292      	uxth	r2, r2
 80041bc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	4618      	mov	r0, r3
 80041c6:	f005 fb38 	bl	800983a <USB_ReadInterrupts>
 80041ca:	4603      	mov	r3, r0
 80041cc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80041d0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80041d4:	d10b      	bne.n	80041ee <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80041de:	b29a      	uxth	r2, r3
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80041e8:	b292      	uxth	r2, r2
 80041ea:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	4618      	mov	r0, r3
 80041f4:	f005 fb21 	bl	800983a <USB_ReadInterrupts>
 80041f8:	4603      	mov	r3, r0
 80041fa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80041fe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004202:	d126      	bne.n	8004252 <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800420c:	b29a      	uxth	r2, r3
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	f022 0204 	bic.w	r2, r2, #4
 8004216:	b292      	uxth	r2, r2
 8004218:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004224:	b29a      	uxth	r2, r3
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	f022 0208 	bic.w	r2, r2, #8
 800422e:	b292      	uxth	r2, r2
 8004230:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8004234:	6878      	ldr	r0, [r7, #4]
 8004236:	f007 f9db 	bl	800b5f0 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004242:	b29a      	uxth	r2, r3
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800424c:	b292      	uxth	r2, r2
 800424e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	4618      	mov	r0, r3
 8004258:	f005 faef 	bl	800983a <USB_ReadInterrupts>
 800425c:	4603      	mov	r3, r0
 800425e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004262:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004266:	d126      	bne.n	80042b6 <HAL_PCD_IRQHandler+0x184>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004270:	b29a      	uxth	r2, r3
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	f042 0208 	orr.w	r2, r2, #8
 800427a:	b292      	uxth	r2, r2
 800427c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004288:	b29a      	uxth	r2, r3
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004292:	b292      	uxth	r2, r2
 8004294:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80042a0:	b29a      	uxth	r2, r3
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	f042 0204 	orr.w	r2, r2, #4
 80042aa:	b292      	uxth	r2, r2
 80042ac:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 80042b0:	6878      	ldr	r0, [r7, #4]
 80042b2:	f007 f983 	bl	800b5bc <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	4618      	mov	r0, r3
 80042bc:	f005 fabd 	bl	800983a <USB_ReadInterrupts>
 80042c0:	4603      	mov	r3, r0
 80042c2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80042c6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80042ca:	d10e      	bne.n	80042ea <HAL_PCD_IRQHandler+0x1b8>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80042d4:	b29a      	uxth	r2, r3
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80042de:	b292      	uxth	r2, r2
 80042e0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 80042e4:	6878      	ldr	r0, [r7, #4]
 80042e6:	f007 f93c 	bl	800b562 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	4618      	mov	r0, r3
 80042f0:	f005 faa3 	bl	800983a <USB_ReadInterrupts>
 80042f4:	4603      	mov	r3, r0
 80042f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042fa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80042fe:	d10b      	bne.n	8004318 <HAL_PCD_IRQHandler+0x1e6>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004308:	b29a      	uxth	r2, r3
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004312:	b292      	uxth	r2, r2
 8004314:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 8004318:	bf00      	nop
 800431a:	3708      	adds	r7, #8
 800431c:	46bd      	mov	sp, r7
 800431e:	bd80      	pop	{r7, pc}

08004320 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8004320:	b580      	push	{r7, lr}
 8004322:	b082      	sub	sp, #8
 8004324:	af00      	add	r7, sp, #0
 8004326:	6078      	str	r0, [r7, #4]
 8004328:	460b      	mov	r3, r1
 800432a:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8004332:	2b01      	cmp	r3, #1
 8004334:	d101      	bne.n	800433a <HAL_PCD_SetAddress+0x1a>
 8004336:	2302      	movs	r3, #2
 8004338:	e013      	b.n	8004362 <HAL_PCD_SetAddress+0x42>
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	2201      	movs	r2, #1
 800433e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	78fa      	ldrb	r2, [r7, #3]
 8004346:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	78fa      	ldrb	r2, [r7, #3]
 8004350:	4611      	mov	r1, r2
 8004352:	4618      	mov	r0, r3
 8004354:	f005 fa52 	bl	80097fc <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	2200      	movs	r2, #0
 800435c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8004360:	2300      	movs	r3, #0
}
 8004362:	4618      	mov	r0, r3
 8004364:	3708      	adds	r7, #8
 8004366:	46bd      	mov	sp, r7
 8004368:	bd80      	pop	{r7, pc}

0800436a <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 800436a:	b580      	push	{r7, lr}
 800436c:	b084      	sub	sp, #16
 800436e:	af00      	add	r7, sp, #0
 8004370:	6078      	str	r0, [r7, #4]
 8004372:	4608      	mov	r0, r1
 8004374:	4611      	mov	r1, r2
 8004376:	461a      	mov	r2, r3
 8004378:	4603      	mov	r3, r0
 800437a:	70fb      	strb	r3, [r7, #3]
 800437c:	460b      	mov	r3, r1
 800437e:	803b      	strh	r3, [r7, #0]
 8004380:	4613      	mov	r3, r2
 8004382:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8004384:	2300      	movs	r3, #0
 8004386:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004388:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800438c:	2b00      	cmp	r3, #0
 800438e:	da0e      	bge.n	80043ae <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004390:	78fb      	ldrb	r3, [r7, #3]
 8004392:	f003 0307 	and.w	r3, r3, #7
 8004396:	1c5a      	adds	r2, r3, #1
 8004398:	4613      	mov	r3, r2
 800439a:	009b      	lsls	r3, r3, #2
 800439c:	4413      	add	r3, r2
 800439e:	00db      	lsls	r3, r3, #3
 80043a0:	687a      	ldr	r2, [r7, #4]
 80043a2:	4413      	add	r3, r2
 80043a4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	2201      	movs	r2, #1
 80043aa:	705a      	strb	r2, [r3, #1]
 80043ac:	e00e      	b.n	80043cc <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80043ae:	78fb      	ldrb	r3, [r7, #3]
 80043b0:	f003 0207 	and.w	r2, r3, #7
 80043b4:	4613      	mov	r3, r2
 80043b6:	009b      	lsls	r3, r3, #2
 80043b8:	4413      	add	r3, r2
 80043ba:	00db      	lsls	r3, r3, #3
 80043bc:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80043c0:	687a      	ldr	r2, [r7, #4]
 80043c2:	4413      	add	r3, r2
 80043c4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	2200      	movs	r2, #0
 80043ca:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80043cc:	78fb      	ldrb	r3, [r7, #3]
 80043ce:	f003 0307 	and.w	r3, r3, #7
 80043d2:	b2da      	uxtb	r2, r3
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80043d8:	883a      	ldrh	r2, [r7, #0]
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	78ba      	ldrb	r2, [r7, #2]
 80043e2:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	785b      	ldrb	r3, [r3, #1]
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d004      	beq.n	80043f6 <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	781b      	ldrb	r3, [r3, #0]
 80043f0:	b29a      	uxth	r2, r3
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80043f6:	78bb      	ldrb	r3, [r7, #2]
 80043f8:	2b02      	cmp	r3, #2
 80043fa:	d102      	bne.n	8004402 <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	2200      	movs	r2, #0
 8004400:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8004408:	2b01      	cmp	r3, #1
 800440a:	d101      	bne.n	8004410 <HAL_PCD_EP_Open+0xa6>
 800440c:	2302      	movs	r3, #2
 800440e:	e00e      	b.n	800442e <HAL_PCD_EP_Open+0xc4>
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	2201      	movs	r2, #1
 8004414:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	68f9      	ldr	r1, [r7, #12]
 800441e:	4618      	mov	r0, r3
 8004420:	f003 fa72 	bl	8007908 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	2200      	movs	r2, #0
 8004428:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 800442c:	7afb      	ldrb	r3, [r7, #11]
}
 800442e:	4618      	mov	r0, r3
 8004430:	3710      	adds	r7, #16
 8004432:	46bd      	mov	sp, r7
 8004434:	bd80      	pop	{r7, pc}

08004436 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004436:	b580      	push	{r7, lr}
 8004438:	b084      	sub	sp, #16
 800443a:	af00      	add	r7, sp, #0
 800443c:	6078      	str	r0, [r7, #4]
 800443e:	460b      	mov	r3, r1
 8004440:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004442:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004446:	2b00      	cmp	r3, #0
 8004448:	da0e      	bge.n	8004468 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800444a:	78fb      	ldrb	r3, [r7, #3]
 800444c:	f003 0307 	and.w	r3, r3, #7
 8004450:	1c5a      	adds	r2, r3, #1
 8004452:	4613      	mov	r3, r2
 8004454:	009b      	lsls	r3, r3, #2
 8004456:	4413      	add	r3, r2
 8004458:	00db      	lsls	r3, r3, #3
 800445a:	687a      	ldr	r2, [r7, #4]
 800445c:	4413      	add	r3, r2
 800445e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	2201      	movs	r2, #1
 8004464:	705a      	strb	r2, [r3, #1]
 8004466:	e00e      	b.n	8004486 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004468:	78fb      	ldrb	r3, [r7, #3]
 800446a:	f003 0207 	and.w	r2, r3, #7
 800446e:	4613      	mov	r3, r2
 8004470:	009b      	lsls	r3, r3, #2
 8004472:	4413      	add	r3, r2
 8004474:	00db      	lsls	r3, r3, #3
 8004476:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800447a:	687a      	ldr	r2, [r7, #4]
 800447c:	4413      	add	r3, r2
 800447e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	2200      	movs	r2, #0
 8004484:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8004486:	78fb      	ldrb	r3, [r7, #3]
 8004488:	f003 0307 	and.w	r3, r3, #7
 800448c:	b2da      	uxtb	r2, r3
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8004498:	2b01      	cmp	r3, #1
 800449a:	d101      	bne.n	80044a0 <HAL_PCD_EP_Close+0x6a>
 800449c:	2302      	movs	r3, #2
 800449e:	e00e      	b.n	80044be <HAL_PCD_EP_Close+0x88>
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	2201      	movs	r2, #1
 80044a4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	68f9      	ldr	r1, [r7, #12]
 80044ae:	4618      	mov	r0, r3
 80044b0:	f003 fd98 	bl	8007fe4 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	2200      	movs	r2, #0
 80044b8:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 80044bc:	2300      	movs	r3, #0
}
 80044be:	4618      	mov	r0, r3
 80044c0:	3710      	adds	r7, #16
 80044c2:	46bd      	mov	sp, r7
 80044c4:	bd80      	pop	{r7, pc}

080044c6 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80044c6:	b580      	push	{r7, lr}
 80044c8:	b086      	sub	sp, #24
 80044ca:	af00      	add	r7, sp, #0
 80044cc:	60f8      	str	r0, [r7, #12]
 80044ce:	607a      	str	r2, [r7, #4]
 80044d0:	603b      	str	r3, [r7, #0]
 80044d2:	460b      	mov	r3, r1
 80044d4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80044d6:	7afb      	ldrb	r3, [r7, #11]
 80044d8:	f003 0207 	and.w	r2, r3, #7
 80044dc:	4613      	mov	r3, r2
 80044de:	009b      	lsls	r3, r3, #2
 80044e0:	4413      	add	r3, r2
 80044e2:	00db      	lsls	r3, r3, #3
 80044e4:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80044e8:	68fa      	ldr	r2, [r7, #12]
 80044ea:	4413      	add	r3, r2
 80044ec:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80044ee:	697b      	ldr	r3, [r7, #20]
 80044f0:	687a      	ldr	r2, [r7, #4]
 80044f2:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80044f4:	697b      	ldr	r3, [r7, #20]
 80044f6:	683a      	ldr	r2, [r7, #0]
 80044f8:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80044fa:	697b      	ldr	r3, [r7, #20]
 80044fc:	2200      	movs	r2, #0
 80044fe:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8004500:	697b      	ldr	r3, [r7, #20]
 8004502:	2200      	movs	r2, #0
 8004504:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004506:	7afb      	ldrb	r3, [r7, #11]
 8004508:	f003 0307 	and.w	r3, r3, #7
 800450c:	b2da      	uxtb	r2, r3
 800450e:	697b      	ldr	r3, [r7, #20]
 8004510:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004512:	7afb      	ldrb	r3, [r7, #11]
 8004514:	f003 0307 	and.w	r3, r3, #7
 8004518:	2b00      	cmp	r3, #0
 800451a:	d106      	bne.n	800452a <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	6979      	ldr	r1, [r7, #20]
 8004522:	4618      	mov	r0, r3
 8004524:	f003 ff4b 	bl	80083be <USB_EPStartXfer>
 8004528:	e005      	b.n	8004536 <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	6979      	ldr	r1, [r7, #20]
 8004530:	4618      	mov	r0, r3
 8004532:	f003 ff44 	bl	80083be <USB_EPStartXfer>
  }

  return HAL_OK;
 8004536:	2300      	movs	r3, #0
}
 8004538:	4618      	mov	r0, r3
 800453a:	3718      	adds	r7, #24
 800453c:	46bd      	mov	sp, r7
 800453e:	bd80      	pop	{r7, pc}

08004540 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004540:	b480      	push	{r7}
 8004542:	b083      	sub	sp, #12
 8004544:	af00      	add	r7, sp, #0
 8004546:	6078      	str	r0, [r7, #4]
 8004548:	460b      	mov	r3, r1
 800454a:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800454c:	78fb      	ldrb	r3, [r7, #3]
 800454e:	f003 0207 	and.w	r2, r3, #7
 8004552:	6879      	ldr	r1, [r7, #4]
 8004554:	4613      	mov	r3, r2
 8004556:	009b      	lsls	r3, r3, #2
 8004558:	4413      	add	r3, r2
 800455a:	00db      	lsls	r3, r3, #3
 800455c:	440b      	add	r3, r1
 800455e:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8004562:	681b      	ldr	r3, [r3, #0]
}
 8004564:	4618      	mov	r0, r3
 8004566:	370c      	adds	r7, #12
 8004568:	46bd      	mov	sp, r7
 800456a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800456e:	4770      	bx	lr

08004570 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004570:	b580      	push	{r7, lr}
 8004572:	b086      	sub	sp, #24
 8004574:	af00      	add	r7, sp, #0
 8004576:	60f8      	str	r0, [r7, #12]
 8004578:	607a      	str	r2, [r7, #4]
 800457a:	603b      	str	r3, [r7, #0]
 800457c:	460b      	mov	r3, r1
 800457e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004580:	7afb      	ldrb	r3, [r7, #11]
 8004582:	f003 0307 	and.w	r3, r3, #7
 8004586:	1c5a      	adds	r2, r3, #1
 8004588:	4613      	mov	r3, r2
 800458a:	009b      	lsls	r3, r3, #2
 800458c:	4413      	add	r3, r2
 800458e:	00db      	lsls	r3, r3, #3
 8004590:	68fa      	ldr	r2, [r7, #12]
 8004592:	4413      	add	r3, r2
 8004594:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004596:	697b      	ldr	r3, [r7, #20]
 8004598:	687a      	ldr	r2, [r7, #4]
 800459a:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800459c:	697b      	ldr	r3, [r7, #20]
 800459e:	683a      	ldr	r2, [r7, #0]
 80045a0:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 80045a2:	697b      	ldr	r3, [r7, #20]
 80045a4:	2201      	movs	r2, #1
 80045a6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 80045aa:	697b      	ldr	r3, [r7, #20]
 80045ac:	683a      	ldr	r2, [r7, #0]
 80045ae:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 80045b0:	697b      	ldr	r3, [r7, #20]
 80045b2:	2200      	movs	r2, #0
 80045b4:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 80045b6:	697b      	ldr	r3, [r7, #20]
 80045b8:	2201      	movs	r2, #1
 80045ba:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80045bc:	7afb      	ldrb	r3, [r7, #11]
 80045be:	f003 0307 	and.w	r3, r3, #7
 80045c2:	b2da      	uxtb	r2, r3
 80045c4:	697b      	ldr	r3, [r7, #20]
 80045c6:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80045c8:	7afb      	ldrb	r3, [r7, #11]
 80045ca:	f003 0307 	and.w	r3, r3, #7
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d106      	bne.n	80045e0 <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	6979      	ldr	r1, [r7, #20]
 80045d8:	4618      	mov	r0, r3
 80045da:	f003 fef0 	bl	80083be <USB_EPStartXfer>
 80045de:	e005      	b.n	80045ec <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	6979      	ldr	r1, [r7, #20]
 80045e6:	4618      	mov	r0, r3
 80045e8:	f003 fee9 	bl	80083be <USB_EPStartXfer>
  }

  return HAL_OK;
 80045ec:	2300      	movs	r3, #0
}
 80045ee:	4618      	mov	r0, r3
 80045f0:	3718      	adds	r7, #24
 80045f2:	46bd      	mov	sp, r7
 80045f4:	bd80      	pop	{r7, pc}

080045f6 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80045f6:	b580      	push	{r7, lr}
 80045f8:	b084      	sub	sp, #16
 80045fa:	af00      	add	r7, sp, #0
 80045fc:	6078      	str	r0, [r7, #4]
 80045fe:	460b      	mov	r3, r1
 8004600:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8004602:	78fb      	ldrb	r3, [r7, #3]
 8004604:	f003 0207 	and.w	r2, r3, #7
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	685b      	ldr	r3, [r3, #4]
 800460c:	429a      	cmp	r2, r3
 800460e:	d901      	bls.n	8004614 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8004610:	2301      	movs	r3, #1
 8004612:	e03e      	b.n	8004692 <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004614:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004618:	2b00      	cmp	r3, #0
 800461a:	da0e      	bge.n	800463a <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800461c:	78fb      	ldrb	r3, [r7, #3]
 800461e:	f003 0307 	and.w	r3, r3, #7
 8004622:	1c5a      	adds	r2, r3, #1
 8004624:	4613      	mov	r3, r2
 8004626:	009b      	lsls	r3, r3, #2
 8004628:	4413      	add	r3, r2
 800462a:	00db      	lsls	r3, r3, #3
 800462c:	687a      	ldr	r2, [r7, #4]
 800462e:	4413      	add	r3, r2
 8004630:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	2201      	movs	r2, #1
 8004636:	705a      	strb	r2, [r3, #1]
 8004638:	e00c      	b.n	8004654 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800463a:	78fa      	ldrb	r2, [r7, #3]
 800463c:	4613      	mov	r3, r2
 800463e:	009b      	lsls	r3, r3, #2
 8004640:	4413      	add	r3, r2
 8004642:	00db      	lsls	r3, r3, #3
 8004644:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004648:	687a      	ldr	r2, [r7, #4]
 800464a:	4413      	add	r3, r2
 800464c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	2200      	movs	r2, #0
 8004652:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	2201      	movs	r2, #1
 8004658:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800465a:	78fb      	ldrb	r3, [r7, #3]
 800465c:	f003 0307 	and.w	r3, r3, #7
 8004660:	b2da      	uxtb	r2, r3
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800466c:	2b01      	cmp	r3, #1
 800466e:	d101      	bne.n	8004674 <HAL_PCD_EP_SetStall+0x7e>
 8004670:	2302      	movs	r3, #2
 8004672:	e00e      	b.n	8004692 <HAL_PCD_EP_SetStall+0x9c>
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	2201      	movs	r2, #1
 8004678:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	68f9      	ldr	r1, [r7, #12]
 8004682:	4618      	mov	r0, r3
 8004684:	f004 ffbb 	bl	80095fe <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	2200      	movs	r2, #0
 800468c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8004690:	2300      	movs	r3, #0
}
 8004692:	4618      	mov	r0, r3
 8004694:	3710      	adds	r7, #16
 8004696:	46bd      	mov	sp, r7
 8004698:	bd80      	pop	{r7, pc}

0800469a <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800469a:	b580      	push	{r7, lr}
 800469c:	b084      	sub	sp, #16
 800469e:	af00      	add	r7, sp, #0
 80046a0:	6078      	str	r0, [r7, #4]
 80046a2:	460b      	mov	r3, r1
 80046a4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80046a6:	78fb      	ldrb	r3, [r7, #3]
 80046a8:	f003 020f 	and.w	r2, r3, #15
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	685b      	ldr	r3, [r3, #4]
 80046b0:	429a      	cmp	r2, r3
 80046b2:	d901      	bls.n	80046b8 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80046b4:	2301      	movs	r3, #1
 80046b6:	e040      	b.n	800473a <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80046b8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80046bc:	2b00      	cmp	r3, #0
 80046be:	da0e      	bge.n	80046de <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80046c0:	78fb      	ldrb	r3, [r7, #3]
 80046c2:	f003 0307 	and.w	r3, r3, #7
 80046c6:	1c5a      	adds	r2, r3, #1
 80046c8:	4613      	mov	r3, r2
 80046ca:	009b      	lsls	r3, r3, #2
 80046cc:	4413      	add	r3, r2
 80046ce:	00db      	lsls	r3, r3, #3
 80046d0:	687a      	ldr	r2, [r7, #4]
 80046d2:	4413      	add	r3, r2
 80046d4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	2201      	movs	r2, #1
 80046da:	705a      	strb	r2, [r3, #1]
 80046dc:	e00e      	b.n	80046fc <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80046de:	78fb      	ldrb	r3, [r7, #3]
 80046e0:	f003 0207 	and.w	r2, r3, #7
 80046e4:	4613      	mov	r3, r2
 80046e6:	009b      	lsls	r3, r3, #2
 80046e8:	4413      	add	r3, r2
 80046ea:	00db      	lsls	r3, r3, #3
 80046ec:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80046f0:	687a      	ldr	r2, [r7, #4]
 80046f2:	4413      	add	r3, r2
 80046f4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	2200      	movs	r2, #0
 80046fa:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	2200      	movs	r2, #0
 8004700:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004702:	78fb      	ldrb	r3, [r7, #3]
 8004704:	f003 0307 	and.w	r3, r3, #7
 8004708:	b2da      	uxtb	r2, r3
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8004714:	2b01      	cmp	r3, #1
 8004716:	d101      	bne.n	800471c <HAL_PCD_EP_ClrStall+0x82>
 8004718:	2302      	movs	r3, #2
 800471a:	e00e      	b.n	800473a <HAL_PCD_EP_ClrStall+0xa0>
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	2201      	movs	r2, #1
 8004720:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	68f9      	ldr	r1, [r7, #12]
 800472a:	4618      	mov	r0, r3
 800472c:	f004 ffb8 	bl	80096a0 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	2200      	movs	r2, #0
 8004734:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8004738:	2300      	movs	r3, #0
}
 800473a:	4618      	mov	r0, r3
 800473c:	3710      	adds	r7, #16
 800473e:	46bd      	mov	sp, r7
 8004740:	bd80      	pop	{r7, pc}

08004742 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8004742:	b580      	push	{r7, lr}
 8004744:	b08e      	sub	sp, #56	; 0x38
 8004746:	af00      	add	r7, sp, #0
 8004748:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800474a:	e2df      	b.n	8004d0c <PCD_EP_ISR_Handler+0x5ca>
  {
    wIstr = hpcd->Instance->ISTR;
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004754:	85fb      	strh	r3, [r7, #46]	; 0x2e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8004756:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8004758:	b2db      	uxtb	r3, r3
 800475a:	f003 030f 	and.w	r3, r3, #15
 800475e:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 8004762:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8004766:	2b00      	cmp	r3, #0
 8004768:	f040 8158 	bne.w	8004a1c <PCD_EP_ISR_Handler+0x2da>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 800476c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800476e:	f003 0310 	and.w	r3, r3, #16
 8004772:	2b00      	cmp	r3, #0
 8004774:	d152      	bne.n	800481c <PCD_EP_ISR_Handler+0xda>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	881b      	ldrh	r3, [r3, #0]
 800477c:	b29b      	uxth	r3, r3
 800477e:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8004782:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004786:	81fb      	strh	r3, [r7, #14]
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681a      	ldr	r2, [r3, #0]
 800478c:	89fb      	ldrh	r3, [r7, #14]
 800478e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004792:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004796:	b29b      	uxth	r3, r3
 8004798:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	3328      	adds	r3, #40	; 0x28
 800479e:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80047a8:	b29b      	uxth	r3, r3
 80047aa:	461a      	mov	r2, r3
 80047ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047ae:	781b      	ldrb	r3, [r3, #0]
 80047b0:	00db      	lsls	r3, r3, #3
 80047b2:	4413      	add	r3, r2
 80047b4:	3302      	adds	r3, #2
 80047b6:	005b      	lsls	r3, r3, #1
 80047b8:	687a      	ldr	r2, [r7, #4]
 80047ba:	6812      	ldr	r2, [r2, #0]
 80047bc:	4413      	add	r3, r2
 80047be:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80047c2:	881b      	ldrh	r3, [r3, #0]
 80047c4:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80047c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047ca:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 80047cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047ce:	695a      	ldr	r2, [r3, #20]
 80047d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047d2:	69db      	ldr	r3, [r3, #28]
 80047d4:	441a      	add	r2, r3
 80047d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047d8:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 80047da:	2100      	movs	r1, #0
 80047dc:	6878      	ldr	r0, [r7, #4]
 80047de:	f006 fea6 	bl	800b52e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80047e8:	b2db      	uxtb	r3, r3
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	f000 828e 	beq.w	8004d0c <PCD_EP_ISR_Handler+0x5ca>
 80047f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047f2:	699b      	ldr	r3, [r3, #24]
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	f040 8289 	bne.w	8004d0c <PCD_EP_ISR_Handler+0x5ca>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004800:	b2db      	uxtb	r3, r3
 8004802:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004806:	b2da      	uxtb	r2, r3
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	b292      	uxth	r2, r2
 800480e:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	2200      	movs	r2, #0
 8004816:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800481a:	e277      	b.n	8004d0c <PCD_EP_ISR_Handler+0x5ca>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004822:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	881b      	ldrh	r3, [r3, #0]
 800482a:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 800482c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800482e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004832:	2b00      	cmp	r3, #0
 8004834:	d034      	beq.n	80048a0 <PCD_EP_ISR_Handler+0x15e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800483e:	b29b      	uxth	r3, r3
 8004840:	461a      	mov	r2, r3
 8004842:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004844:	781b      	ldrb	r3, [r3, #0]
 8004846:	00db      	lsls	r3, r3, #3
 8004848:	4413      	add	r3, r2
 800484a:	3306      	adds	r3, #6
 800484c:	005b      	lsls	r3, r3, #1
 800484e:	687a      	ldr	r2, [r7, #4]
 8004850:	6812      	ldr	r2, [r2, #0]
 8004852:	4413      	add	r3, r2
 8004854:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004858:	881b      	ldrh	r3, [r3, #0]
 800485a:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800485e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004860:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	6818      	ldr	r0, [r3, #0]
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 800486c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800486e:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8004870:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004872:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8004874:	b29b      	uxth	r3, r3
 8004876:	f005 f835 	bl	80098e4 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	881b      	ldrh	r3, [r3, #0]
 8004880:	b29a      	uxth	r2, r3
 8004882:	f640 738f 	movw	r3, #3983	; 0xf8f
 8004886:	4013      	ands	r3, r2
 8004888:	823b      	strh	r3, [r7, #16]
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	8a3a      	ldrh	r2, [r7, #16]
 8004890:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004894:	b292      	uxth	r2, r2
 8004896:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8004898:	6878      	ldr	r0, [r7, #4]
 800489a:	f006 fe1b 	bl	800b4d4 <HAL_PCD_SetupStageCallback>
 800489e:	e235      	b.n	8004d0c <PCD_EP_ISR_Handler+0x5ca>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80048a0:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	f280 8231 	bge.w	8004d0c <PCD_EP_ISR_Handler+0x5ca>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	881b      	ldrh	r3, [r3, #0]
 80048b0:	b29a      	uxth	r2, r3
 80048b2:	f640 738f 	movw	r3, #3983	; 0xf8f
 80048b6:	4013      	ands	r3, r2
 80048b8:	83bb      	strh	r3, [r7, #28]
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	8bba      	ldrh	r2, [r7, #28]
 80048c0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80048c4:	b292      	uxth	r2, r2
 80048c6:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80048d0:	b29b      	uxth	r3, r3
 80048d2:	461a      	mov	r2, r3
 80048d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048d6:	781b      	ldrb	r3, [r3, #0]
 80048d8:	00db      	lsls	r3, r3, #3
 80048da:	4413      	add	r3, r2
 80048dc:	3306      	adds	r3, #6
 80048de:	005b      	lsls	r3, r3, #1
 80048e0:	687a      	ldr	r2, [r7, #4]
 80048e2:	6812      	ldr	r2, [r2, #0]
 80048e4:	4413      	add	r3, r2
 80048e6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80048ea:	881b      	ldrh	r3, [r3, #0]
 80048ec:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80048f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048f2:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 80048f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048f6:	69db      	ldr	r3, [r3, #28]
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d019      	beq.n	8004930 <PCD_EP_ISR_Handler+0x1ee>
 80048fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048fe:	695b      	ldr	r3, [r3, #20]
 8004900:	2b00      	cmp	r3, #0
 8004902:	d015      	beq.n	8004930 <PCD_EP_ISR_Handler+0x1ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	6818      	ldr	r0, [r3, #0]
 8004908:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800490a:	6959      	ldr	r1, [r3, #20]
 800490c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800490e:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8004910:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004912:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8004914:	b29b      	uxth	r3, r3
 8004916:	f004 ffe5 	bl	80098e4 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 800491a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800491c:	695a      	ldr	r2, [r3, #20]
 800491e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004920:	69db      	ldr	r3, [r3, #28]
 8004922:	441a      	add	r2, r3
 8004924:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004926:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8004928:	2100      	movs	r1, #0
 800492a:	6878      	ldr	r0, [r7, #4]
 800492c:	f006 fde4 	bl	800b4f8 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	61bb      	str	r3, [r7, #24]
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800493e:	b29b      	uxth	r3, r3
 8004940:	461a      	mov	r2, r3
 8004942:	69bb      	ldr	r3, [r7, #24]
 8004944:	4413      	add	r3, r2
 8004946:	61bb      	str	r3, [r7, #24]
 8004948:	69bb      	ldr	r3, [r7, #24]
 800494a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800494e:	617b      	str	r3, [r7, #20]
 8004950:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004952:	691b      	ldr	r3, [r3, #16]
 8004954:	2b00      	cmp	r3, #0
 8004956:	d112      	bne.n	800497e <PCD_EP_ISR_Handler+0x23c>
 8004958:	697b      	ldr	r3, [r7, #20]
 800495a:	881b      	ldrh	r3, [r3, #0]
 800495c:	b29b      	uxth	r3, r3
 800495e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004962:	b29a      	uxth	r2, r3
 8004964:	697b      	ldr	r3, [r7, #20]
 8004966:	801a      	strh	r2, [r3, #0]
 8004968:	697b      	ldr	r3, [r7, #20]
 800496a:	881b      	ldrh	r3, [r3, #0]
 800496c:	b29b      	uxth	r3, r3
 800496e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004972:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004976:	b29a      	uxth	r2, r3
 8004978:	697b      	ldr	r3, [r7, #20]
 800497a:	801a      	strh	r2, [r3, #0]
 800497c:	e02f      	b.n	80049de <PCD_EP_ISR_Handler+0x29c>
 800497e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004980:	691b      	ldr	r3, [r3, #16]
 8004982:	2b3e      	cmp	r3, #62	; 0x3e
 8004984:	d813      	bhi.n	80049ae <PCD_EP_ISR_Handler+0x26c>
 8004986:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004988:	691b      	ldr	r3, [r3, #16]
 800498a:	085b      	lsrs	r3, r3, #1
 800498c:	633b      	str	r3, [r7, #48]	; 0x30
 800498e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004990:	691b      	ldr	r3, [r3, #16]
 8004992:	f003 0301 	and.w	r3, r3, #1
 8004996:	2b00      	cmp	r3, #0
 8004998:	d002      	beq.n	80049a0 <PCD_EP_ISR_Handler+0x25e>
 800499a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800499c:	3301      	adds	r3, #1
 800499e:	633b      	str	r3, [r7, #48]	; 0x30
 80049a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049a2:	b29b      	uxth	r3, r3
 80049a4:	029b      	lsls	r3, r3, #10
 80049a6:	b29a      	uxth	r2, r3
 80049a8:	697b      	ldr	r3, [r7, #20]
 80049aa:	801a      	strh	r2, [r3, #0]
 80049ac:	e017      	b.n	80049de <PCD_EP_ISR_Handler+0x29c>
 80049ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049b0:	691b      	ldr	r3, [r3, #16]
 80049b2:	095b      	lsrs	r3, r3, #5
 80049b4:	633b      	str	r3, [r7, #48]	; 0x30
 80049b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049b8:	691b      	ldr	r3, [r3, #16]
 80049ba:	f003 031f 	and.w	r3, r3, #31
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d102      	bne.n	80049c8 <PCD_EP_ISR_Handler+0x286>
 80049c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049c4:	3b01      	subs	r3, #1
 80049c6:	633b      	str	r3, [r7, #48]	; 0x30
 80049c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049ca:	b29b      	uxth	r3, r3
 80049cc:	029b      	lsls	r3, r3, #10
 80049ce:	b29b      	uxth	r3, r3
 80049d0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80049d4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80049d8:	b29a      	uxth	r2, r3
 80049da:	697b      	ldr	r3, [r7, #20]
 80049dc:	801a      	strh	r2, [r3, #0]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	881b      	ldrh	r3, [r3, #0]
 80049e4:	b29b      	uxth	r3, r3
 80049e6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80049ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80049ee:	827b      	strh	r3, [r7, #18]
 80049f0:	8a7b      	ldrh	r3, [r7, #18]
 80049f2:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80049f6:	827b      	strh	r3, [r7, #18]
 80049f8:	8a7b      	ldrh	r3, [r7, #18]
 80049fa:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80049fe:	827b      	strh	r3, [r7, #18]
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681a      	ldr	r2, [r3, #0]
 8004a04:	8a7b      	ldrh	r3, [r7, #18]
 8004a06:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004a0a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004a0e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004a12:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004a16:	b29b      	uxth	r3, r3
 8004a18:	8013      	strh	r3, [r2, #0]
 8004a1a:	e177      	b.n	8004d0c <PCD_EP_ISR_Handler+0x5ca>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	461a      	mov	r2, r3
 8004a22:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8004a26:	009b      	lsls	r3, r3, #2
 8004a28:	4413      	add	r3, r2
 8004a2a:	881b      	ldrh	r3, [r3, #0]
 8004a2c:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8004a2e:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	f280 80ea 	bge.w	8004c0c <PCD_EP_ISR_Handler+0x4ca>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	461a      	mov	r2, r3
 8004a3e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8004a42:	009b      	lsls	r3, r3, #2
 8004a44:	4413      	add	r3, r2
 8004a46:	881b      	ldrh	r3, [r3, #0]
 8004a48:	b29a      	uxth	r2, r3
 8004a4a:	f640 738f 	movw	r3, #3983	; 0xf8f
 8004a4e:	4013      	ands	r3, r2
 8004a50:	853b      	strh	r3, [r7, #40]	; 0x28
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	461a      	mov	r2, r3
 8004a58:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8004a5c:	009b      	lsls	r3, r3, #2
 8004a5e:	4413      	add	r3, r2
 8004a60:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8004a62:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004a66:	b292      	uxth	r2, r2
 8004a68:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8004a6a:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8004a6e:	4613      	mov	r3, r2
 8004a70:	009b      	lsls	r3, r3, #2
 8004a72:	4413      	add	r3, r2
 8004a74:	00db      	lsls	r3, r3, #3
 8004a76:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004a7a:	687a      	ldr	r2, [r7, #4]
 8004a7c:	4413      	add	r3, r2
 8004a7e:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8004a80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a82:	7b1b      	ldrb	r3, [r3, #12]
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d122      	bne.n	8004ace <PCD_EP_ISR_Handler+0x38c>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004a90:	b29b      	uxth	r3, r3
 8004a92:	461a      	mov	r2, r3
 8004a94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a96:	781b      	ldrb	r3, [r3, #0]
 8004a98:	00db      	lsls	r3, r3, #3
 8004a9a:	4413      	add	r3, r2
 8004a9c:	3306      	adds	r3, #6
 8004a9e:	005b      	lsls	r3, r3, #1
 8004aa0:	687a      	ldr	r2, [r7, #4]
 8004aa2:	6812      	ldr	r2, [r2, #0]
 8004aa4:	4413      	add	r3, r2
 8004aa6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004aaa:	881b      	ldrh	r3, [r3, #0]
 8004aac:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004ab0:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 8004ab2:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	f000 8087 	beq.w	8004bc8 <PCD_EP_ISR_Handler+0x486>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	6818      	ldr	r0, [r3, #0]
 8004abe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ac0:	6959      	ldr	r1, [r3, #20]
 8004ac2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ac4:	88da      	ldrh	r2, [r3, #6]
 8004ac6:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004ac8:	f004 ff0c 	bl	80098e4 <USB_ReadPMA>
 8004acc:	e07c      	b.n	8004bc8 <PCD_EP_ISR_Handler+0x486>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8004ace:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ad0:	78db      	ldrb	r3, [r3, #3]
 8004ad2:	2b02      	cmp	r3, #2
 8004ad4:	d108      	bne.n	8004ae8 <PCD_EP_ISR_Handler+0x3a6>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8004ad6:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8004ad8:	461a      	mov	r2, r3
 8004ada:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004adc:	6878      	ldr	r0, [r7, #4]
 8004ade:	f000 f923 	bl	8004d28 <HAL_PCD_EP_DB_Receive>
 8004ae2:	4603      	mov	r3, r0
 8004ae4:	86fb      	strh	r3, [r7, #54]	; 0x36
 8004ae6:	e06f      	b.n	8004bc8 <PCD_EP_ISR_Handler+0x486>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	461a      	mov	r2, r3
 8004aee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004af0:	781b      	ldrb	r3, [r3, #0]
 8004af2:	009b      	lsls	r3, r3, #2
 8004af4:	4413      	add	r3, r2
 8004af6:	881b      	ldrh	r3, [r3, #0]
 8004af8:	b29b      	uxth	r3, r3
 8004afa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004afe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b02:	847b      	strh	r3, [r7, #34]	; 0x22
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	461a      	mov	r2, r3
 8004b0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b0c:	781b      	ldrb	r3, [r3, #0]
 8004b0e:	009b      	lsls	r3, r3, #2
 8004b10:	441a      	add	r2, r3
 8004b12:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8004b14:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004b18:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004b1c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004b20:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004b24:	b29b      	uxth	r3, r3
 8004b26:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	461a      	mov	r2, r3
 8004b2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b30:	781b      	ldrb	r3, [r3, #0]
 8004b32:	009b      	lsls	r3, r3, #2
 8004b34:	4413      	add	r3, r2
 8004b36:	881b      	ldrh	r3, [r3, #0]
 8004b38:	b29b      	uxth	r3, r3
 8004b3a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d021      	beq.n	8004b86 <PCD_EP_ISR_Handler+0x444>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004b4a:	b29b      	uxth	r3, r3
 8004b4c:	461a      	mov	r2, r3
 8004b4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b50:	781b      	ldrb	r3, [r3, #0]
 8004b52:	00db      	lsls	r3, r3, #3
 8004b54:	4413      	add	r3, r2
 8004b56:	3302      	adds	r3, #2
 8004b58:	005b      	lsls	r3, r3, #1
 8004b5a:	687a      	ldr	r2, [r7, #4]
 8004b5c:	6812      	ldr	r2, [r2, #0]
 8004b5e:	4413      	add	r3, r2
 8004b60:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004b64:	881b      	ldrh	r3, [r3, #0]
 8004b66:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004b6a:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8004b6c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d02a      	beq.n	8004bc8 <PCD_EP_ISR_Handler+0x486>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	6818      	ldr	r0, [r3, #0]
 8004b76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b78:	6959      	ldr	r1, [r3, #20]
 8004b7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b7c:	891a      	ldrh	r2, [r3, #8]
 8004b7e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004b80:	f004 feb0 	bl	80098e4 <USB_ReadPMA>
 8004b84:	e020      	b.n	8004bc8 <PCD_EP_ISR_Handler+0x486>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004b8e:	b29b      	uxth	r3, r3
 8004b90:	461a      	mov	r2, r3
 8004b92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b94:	781b      	ldrb	r3, [r3, #0]
 8004b96:	00db      	lsls	r3, r3, #3
 8004b98:	4413      	add	r3, r2
 8004b9a:	3306      	adds	r3, #6
 8004b9c:	005b      	lsls	r3, r3, #1
 8004b9e:	687a      	ldr	r2, [r7, #4]
 8004ba0:	6812      	ldr	r2, [r2, #0]
 8004ba2:	4413      	add	r3, r2
 8004ba4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004ba8:	881b      	ldrh	r3, [r3, #0]
 8004baa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004bae:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8004bb0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d008      	beq.n	8004bc8 <PCD_EP_ISR_Handler+0x486>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	6818      	ldr	r0, [r3, #0]
 8004bba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bbc:	6959      	ldr	r1, [r3, #20]
 8004bbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bc0:	895a      	ldrh	r2, [r3, #10]
 8004bc2:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004bc4:	f004 fe8e 	bl	80098e4 <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8004bc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bca:	69da      	ldr	r2, [r3, #28]
 8004bcc:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004bce:	441a      	add	r2, r3
 8004bd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bd2:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8004bd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bd6:	695a      	ldr	r2, [r3, #20]
 8004bd8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004bda:	441a      	add	r2, r3
 8004bdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bde:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8004be0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004be2:	699b      	ldr	r3, [r3, #24]
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d004      	beq.n	8004bf2 <PCD_EP_ISR_Handler+0x4b0>
 8004be8:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8004bea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bec:	691b      	ldr	r3, [r3, #16]
 8004bee:	429a      	cmp	r2, r3
 8004bf0:	d206      	bcs.n	8004c00 <PCD_EP_ISR_Handler+0x4be>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8004bf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bf4:	781b      	ldrb	r3, [r3, #0]
 8004bf6:	4619      	mov	r1, r3
 8004bf8:	6878      	ldr	r0, [r7, #4]
 8004bfa:	f006 fc7d 	bl	800b4f8 <HAL_PCD_DataOutStageCallback>
 8004bfe:	e005      	b.n	8004c0c <PCD_EP_ISR_Handler+0x4ca>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004c06:	4618      	mov	r0, r3
 8004c08:	f003 fbd9 	bl	80083be <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8004c0c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8004c0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d07a      	beq.n	8004d0c <PCD_EP_ISR_Handler+0x5ca>
      {
        ep = &hpcd->IN_ep[epindex];
 8004c16:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8004c1a:	1c5a      	adds	r2, r3, #1
 8004c1c:	4613      	mov	r3, r2
 8004c1e:	009b      	lsls	r3, r3, #2
 8004c20:	4413      	add	r3, r2
 8004c22:	00db      	lsls	r3, r3, #3
 8004c24:	687a      	ldr	r2, [r7, #4]
 8004c26:	4413      	add	r3, r2
 8004c28:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	461a      	mov	r2, r3
 8004c30:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8004c34:	009b      	lsls	r3, r3, #2
 8004c36:	4413      	add	r3, r2
 8004c38:	881b      	ldrh	r3, [r3, #0]
 8004c3a:	b29b      	uxth	r3, r3
 8004c3c:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8004c40:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c44:	843b      	strh	r3, [r7, #32]
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	461a      	mov	r2, r3
 8004c4c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8004c50:	009b      	lsls	r3, r3, #2
 8004c52:	441a      	add	r2, r3
 8004c54:	8c3b      	ldrh	r3, [r7, #32]
 8004c56:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004c5a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004c5e:	b29b      	uxth	r3, r3
 8004c60:	8013      	strh	r3, [r2, #0]

        /* Manage all non bulk transaction or Bulk Single Buffer Transaction */
        if ((ep->type != EP_TYPE_BULK) ||
 8004c62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c64:	78db      	ldrb	r3, [r3, #3]
 8004c66:	2b02      	cmp	r3, #2
 8004c68:	d108      	bne.n	8004c7c <PCD_EP_ISR_Handler+0x53a>
            ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8004c6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c6c:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type != EP_TYPE_BULK) ||
 8004c6e:	2b02      	cmp	r3, #2
 8004c70:	d146      	bne.n	8004d00 <PCD_EP_ISR_Handler+0x5be>
            ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8004c72:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8004c74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d141      	bne.n	8004d00 <PCD_EP_ISR_Handler+0x5be>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004c84:	b29b      	uxth	r3, r3
 8004c86:	461a      	mov	r2, r3
 8004c88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c8a:	781b      	ldrb	r3, [r3, #0]
 8004c8c:	00db      	lsls	r3, r3, #3
 8004c8e:	4413      	add	r3, r2
 8004c90:	3302      	adds	r3, #2
 8004c92:	005b      	lsls	r3, r3, #1
 8004c94:	687a      	ldr	r2, [r7, #4]
 8004c96:	6812      	ldr	r2, [r2, #0]
 8004c98:	4413      	add	r3, r2
 8004c9a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004c9e:	881b      	ldrh	r3, [r3, #0]
 8004ca0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004ca4:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 8004ca6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ca8:	699a      	ldr	r2, [r3, #24]
 8004caa:	8bfb      	ldrh	r3, [r7, #30]
 8004cac:	429a      	cmp	r2, r3
 8004cae:	d906      	bls.n	8004cbe <PCD_EP_ISR_Handler+0x57c>
          {
            ep->xfer_len -= TxByteNbre;
 8004cb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cb2:	699a      	ldr	r2, [r3, #24]
 8004cb4:	8bfb      	ldrh	r3, [r7, #30]
 8004cb6:	1ad2      	subs	r2, r2, r3
 8004cb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cba:	619a      	str	r2, [r3, #24]
 8004cbc:	e002      	b.n	8004cc4 <PCD_EP_ISR_Handler+0x582>
          }
          else
          {
            ep->xfer_len = 0U;
 8004cbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cc0:	2200      	movs	r2, #0
 8004cc2:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 8004cc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cc6:	699b      	ldr	r3, [r3, #24]
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d106      	bne.n	8004cda <PCD_EP_ISR_Handler+0x598>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004ccc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cce:	781b      	ldrb	r3, [r3, #0]
 8004cd0:	4619      	mov	r1, r3
 8004cd2:	6878      	ldr	r0, [r7, #4]
 8004cd4:	f006 fc2b 	bl	800b52e <HAL_PCD_DataInStageCallback>
 8004cd8:	e018      	b.n	8004d0c <PCD_EP_ISR_Handler+0x5ca>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 8004cda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cdc:	695a      	ldr	r2, [r3, #20]
 8004cde:	8bfb      	ldrh	r3, [r7, #30]
 8004ce0:	441a      	add	r2, r3
 8004ce2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ce4:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 8004ce6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ce8:	69da      	ldr	r2, [r3, #28]
 8004cea:	8bfb      	ldrh	r3, [r7, #30]
 8004cec:	441a      	add	r2, r3
 8004cee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cf0:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004cf8:	4618      	mov	r0, r3
 8004cfa:	f003 fb60 	bl	80083be <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 8004cfe:	e005      	b.n	8004d0c <PCD_EP_ISR_Handler+0x5ca>
          }
        }
        /* bulk in double buffer enable in case of transferLen> Ep_Mps */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8004d00:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8004d02:	461a      	mov	r2, r3
 8004d04:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004d06:	6878      	ldr	r0, [r7, #4]
 8004d08:	f000 f91b 	bl	8004f42 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004d14:	b29b      	uxth	r3, r3
 8004d16:	b21b      	sxth	r3, r3
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	f6ff ad17 	blt.w	800474c <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8004d1e:	2300      	movs	r3, #0
}
 8004d20:	4618      	mov	r0, r3
 8004d22:	3738      	adds	r7, #56	; 0x38
 8004d24:	46bd      	mov	sp, r7
 8004d26:	bd80      	pop	{r7, pc}

08004d28 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8004d28:	b580      	push	{r7, lr}
 8004d2a:	b088      	sub	sp, #32
 8004d2c:	af00      	add	r7, sp, #0
 8004d2e:	60f8      	str	r0, [r7, #12]
 8004d30:	60b9      	str	r1, [r7, #8]
 8004d32:	4613      	mov	r3, r2
 8004d34:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8004d36:	88fb      	ldrh	r3, [r7, #6]
 8004d38:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d07e      	beq.n	8004e3e <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004d48:	b29b      	uxth	r3, r3
 8004d4a:	461a      	mov	r2, r3
 8004d4c:	68bb      	ldr	r3, [r7, #8]
 8004d4e:	781b      	ldrb	r3, [r3, #0]
 8004d50:	00db      	lsls	r3, r3, #3
 8004d52:	4413      	add	r3, r2
 8004d54:	3302      	adds	r3, #2
 8004d56:	005b      	lsls	r3, r3, #1
 8004d58:	68fa      	ldr	r2, [r7, #12]
 8004d5a:	6812      	ldr	r2, [r2, #0]
 8004d5c:	4413      	add	r3, r2
 8004d5e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004d62:	881b      	ldrh	r3, [r3, #0]
 8004d64:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004d68:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8004d6a:	68bb      	ldr	r3, [r7, #8]
 8004d6c:	699a      	ldr	r2, [r3, #24]
 8004d6e:	8b7b      	ldrh	r3, [r7, #26]
 8004d70:	429a      	cmp	r2, r3
 8004d72:	d306      	bcc.n	8004d82 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8004d74:	68bb      	ldr	r3, [r7, #8]
 8004d76:	699a      	ldr	r2, [r3, #24]
 8004d78:	8b7b      	ldrh	r3, [r7, #26]
 8004d7a:	1ad2      	subs	r2, r2, r3
 8004d7c:	68bb      	ldr	r3, [r7, #8]
 8004d7e:	619a      	str	r2, [r3, #24]
 8004d80:	e002      	b.n	8004d88 <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8004d82:	68bb      	ldr	r3, [r7, #8]
 8004d84:	2200      	movs	r2, #0
 8004d86:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8004d88:	68bb      	ldr	r3, [r7, #8]
 8004d8a:	699b      	ldr	r3, [r3, #24]
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d123      	bne.n	8004dd8 <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	461a      	mov	r2, r3
 8004d96:	68bb      	ldr	r3, [r7, #8]
 8004d98:	781b      	ldrb	r3, [r3, #0]
 8004d9a:	009b      	lsls	r3, r3, #2
 8004d9c:	4413      	add	r3, r2
 8004d9e:	881b      	ldrh	r3, [r3, #0]
 8004da0:	b29b      	uxth	r3, r3
 8004da2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004da6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004daa:	833b      	strh	r3, [r7, #24]
 8004dac:	8b3b      	ldrh	r3, [r7, #24]
 8004dae:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004db2:	833b      	strh	r3, [r7, #24]
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	461a      	mov	r2, r3
 8004dba:	68bb      	ldr	r3, [r7, #8]
 8004dbc:	781b      	ldrb	r3, [r3, #0]
 8004dbe:	009b      	lsls	r3, r3, #2
 8004dc0:	441a      	add	r2, r3
 8004dc2:	8b3b      	ldrh	r3, [r7, #24]
 8004dc4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004dc8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004dcc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004dd0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004dd4:	b29b      	uxth	r3, r3
 8004dd6:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8004dd8:	88fb      	ldrh	r3, [r7, #6]
 8004dda:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d01f      	beq.n	8004e22 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	461a      	mov	r2, r3
 8004de8:	68bb      	ldr	r3, [r7, #8]
 8004dea:	781b      	ldrb	r3, [r3, #0]
 8004dec:	009b      	lsls	r3, r3, #2
 8004dee:	4413      	add	r3, r2
 8004df0:	881b      	ldrh	r3, [r3, #0]
 8004df2:	b29b      	uxth	r3, r3
 8004df4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004df8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004dfc:	82fb      	strh	r3, [r7, #22]
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	461a      	mov	r2, r3
 8004e04:	68bb      	ldr	r3, [r7, #8]
 8004e06:	781b      	ldrb	r3, [r3, #0]
 8004e08:	009b      	lsls	r3, r3, #2
 8004e0a:	441a      	add	r2, r3
 8004e0c:	8afb      	ldrh	r3, [r7, #22]
 8004e0e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004e12:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004e16:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004e1a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004e1e:	b29b      	uxth	r3, r3
 8004e20:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8004e22:	8b7b      	ldrh	r3, [r7, #26]
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	f000 8087 	beq.w	8004f38 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	6818      	ldr	r0, [r3, #0]
 8004e2e:	68bb      	ldr	r3, [r7, #8]
 8004e30:	6959      	ldr	r1, [r3, #20]
 8004e32:	68bb      	ldr	r3, [r7, #8]
 8004e34:	891a      	ldrh	r2, [r3, #8]
 8004e36:	8b7b      	ldrh	r3, [r7, #26]
 8004e38:	f004 fd54 	bl	80098e4 <USB_ReadPMA>
 8004e3c:	e07c      	b.n	8004f38 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004e46:	b29b      	uxth	r3, r3
 8004e48:	461a      	mov	r2, r3
 8004e4a:	68bb      	ldr	r3, [r7, #8]
 8004e4c:	781b      	ldrb	r3, [r3, #0]
 8004e4e:	00db      	lsls	r3, r3, #3
 8004e50:	4413      	add	r3, r2
 8004e52:	3306      	adds	r3, #6
 8004e54:	005b      	lsls	r3, r3, #1
 8004e56:	68fa      	ldr	r2, [r7, #12]
 8004e58:	6812      	ldr	r2, [r2, #0]
 8004e5a:	4413      	add	r3, r2
 8004e5c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004e60:	881b      	ldrh	r3, [r3, #0]
 8004e62:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004e66:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8004e68:	68bb      	ldr	r3, [r7, #8]
 8004e6a:	699a      	ldr	r2, [r3, #24]
 8004e6c:	8b7b      	ldrh	r3, [r7, #26]
 8004e6e:	429a      	cmp	r2, r3
 8004e70:	d306      	bcc.n	8004e80 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8004e72:	68bb      	ldr	r3, [r7, #8]
 8004e74:	699a      	ldr	r2, [r3, #24]
 8004e76:	8b7b      	ldrh	r3, [r7, #26]
 8004e78:	1ad2      	subs	r2, r2, r3
 8004e7a:	68bb      	ldr	r3, [r7, #8]
 8004e7c:	619a      	str	r2, [r3, #24]
 8004e7e:	e002      	b.n	8004e86 <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8004e80:	68bb      	ldr	r3, [r7, #8]
 8004e82:	2200      	movs	r2, #0
 8004e84:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8004e86:	68bb      	ldr	r3, [r7, #8]
 8004e88:	699b      	ldr	r3, [r3, #24]
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d123      	bne.n	8004ed6 <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	461a      	mov	r2, r3
 8004e94:	68bb      	ldr	r3, [r7, #8]
 8004e96:	781b      	ldrb	r3, [r3, #0]
 8004e98:	009b      	lsls	r3, r3, #2
 8004e9a:	4413      	add	r3, r2
 8004e9c:	881b      	ldrh	r3, [r3, #0]
 8004e9e:	b29b      	uxth	r3, r3
 8004ea0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004ea4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ea8:	83fb      	strh	r3, [r7, #30]
 8004eaa:	8bfb      	ldrh	r3, [r7, #30]
 8004eac:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004eb0:	83fb      	strh	r3, [r7, #30]
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	461a      	mov	r2, r3
 8004eb8:	68bb      	ldr	r3, [r7, #8]
 8004eba:	781b      	ldrb	r3, [r3, #0]
 8004ebc:	009b      	lsls	r3, r3, #2
 8004ebe:	441a      	add	r2, r3
 8004ec0:	8bfb      	ldrh	r3, [r7, #30]
 8004ec2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004ec6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004eca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004ece:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004ed2:	b29b      	uxth	r3, r3
 8004ed4:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8004ed6:	88fb      	ldrh	r3, [r7, #6]
 8004ed8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d11f      	bne.n	8004f20 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	461a      	mov	r2, r3
 8004ee6:	68bb      	ldr	r3, [r7, #8]
 8004ee8:	781b      	ldrb	r3, [r3, #0]
 8004eea:	009b      	lsls	r3, r3, #2
 8004eec:	4413      	add	r3, r2
 8004eee:	881b      	ldrh	r3, [r3, #0]
 8004ef0:	b29b      	uxth	r3, r3
 8004ef2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004ef6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004efa:	83bb      	strh	r3, [r7, #28]
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	461a      	mov	r2, r3
 8004f02:	68bb      	ldr	r3, [r7, #8]
 8004f04:	781b      	ldrb	r3, [r3, #0]
 8004f06:	009b      	lsls	r3, r3, #2
 8004f08:	441a      	add	r2, r3
 8004f0a:	8bbb      	ldrh	r3, [r7, #28]
 8004f0c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004f10:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004f14:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004f18:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004f1c:	b29b      	uxth	r3, r3
 8004f1e:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8004f20:	8b7b      	ldrh	r3, [r7, #26]
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d008      	beq.n	8004f38 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	6818      	ldr	r0, [r3, #0]
 8004f2a:	68bb      	ldr	r3, [r7, #8]
 8004f2c:	6959      	ldr	r1, [r3, #20]
 8004f2e:	68bb      	ldr	r3, [r7, #8]
 8004f30:	895a      	ldrh	r2, [r3, #10]
 8004f32:	8b7b      	ldrh	r3, [r7, #26]
 8004f34:	f004 fcd6 	bl	80098e4 <USB_ReadPMA>
    }
  }

  return count;
 8004f38:	8b7b      	ldrh	r3, [r7, #26]
}
 8004f3a:	4618      	mov	r0, r3
 8004f3c:	3720      	adds	r7, #32
 8004f3e:	46bd      	mov	sp, r7
 8004f40:	bd80      	pop	{r7, pc}

08004f42 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8004f42:	b580      	push	{r7, lr}
 8004f44:	b092      	sub	sp, #72	; 0x48
 8004f46:	af00      	add	r7, sp, #0
 8004f48:	60f8      	str	r0, [r7, #12]
 8004f4a:	60b9      	str	r1, [r7, #8]
 8004f4c:	4613      	mov	r3, r2
 8004f4e:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8004f50:	88fb      	ldrh	r3, [r7, #6]
 8004f52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	f000 8132 	beq.w	80051c0 <HAL_PCD_EP_DB_Transmit+0x27e>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004f64:	b29b      	uxth	r3, r3
 8004f66:	461a      	mov	r2, r3
 8004f68:	68bb      	ldr	r3, [r7, #8]
 8004f6a:	781b      	ldrb	r3, [r3, #0]
 8004f6c:	00db      	lsls	r3, r3, #3
 8004f6e:	4413      	add	r3, r2
 8004f70:	3302      	adds	r3, #2
 8004f72:	005b      	lsls	r3, r3, #1
 8004f74:	68fa      	ldr	r2, [r7, #12]
 8004f76:	6812      	ldr	r2, [r2, #0]
 8004f78:	4413      	add	r3, r2
 8004f7a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004f7e:	881b      	ldrh	r3, [r3, #0]
 8004f80:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004f84:	85fb      	strh	r3, [r7, #46]	; 0x2e

    if (ep->xfer_len > TxByteNbre)
 8004f86:	68bb      	ldr	r3, [r7, #8]
 8004f88:	699a      	ldr	r2, [r3, #24]
 8004f8a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8004f8c:	429a      	cmp	r2, r3
 8004f8e:	d906      	bls.n	8004f9e <HAL_PCD_EP_DB_Transmit+0x5c>
    {
      ep->xfer_len -= TxByteNbre;
 8004f90:	68bb      	ldr	r3, [r7, #8]
 8004f92:	699a      	ldr	r2, [r3, #24]
 8004f94:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8004f96:	1ad2      	subs	r2, r2, r3
 8004f98:	68bb      	ldr	r3, [r7, #8]
 8004f9a:	619a      	str	r2, [r3, #24]
 8004f9c:	e002      	b.n	8004fa4 <HAL_PCD_EP_DB_Transmit+0x62>
    }
    else
    {
      ep->xfer_len = 0U;
 8004f9e:	68bb      	ldr	r3, [r7, #8]
 8004fa0:	2200      	movs	r2, #0
 8004fa2:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8004fa4:	68bb      	ldr	r3, [r7, #8]
 8004fa6:	699b      	ldr	r3, [r3, #24]
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d12c      	bne.n	8005006 <HAL_PCD_EP_DB_Transmit+0xc4>
    {
      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004fac:	68bb      	ldr	r3, [r7, #8]
 8004fae:	781b      	ldrb	r3, [r3, #0]
 8004fb0:	4619      	mov	r1, r3
 8004fb2:	68f8      	ldr	r0, [r7, #12]
 8004fb4:	f006 fabb 	bl	800b52e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8004fb8:	88fb      	ldrh	r3, [r7, #6]
 8004fba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	f000 822f 	beq.w	8005422 <HAL_PCD_EP_DB_Transmit+0x4e0>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	461a      	mov	r2, r3
 8004fca:	68bb      	ldr	r3, [r7, #8]
 8004fcc:	781b      	ldrb	r3, [r3, #0]
 8004fce:	009b      	lsls	r3, r3, #2
 8004fd0:	4413      	add	r3, r2
 8004fd2:	881b      	ldrh	r3, [r3, #0]
 8004fd4:	b29b      	uxth	r3, r3
 8004fd6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004fda:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004fde:	827b      	strh	r3, [r7, #18]
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	461a      	mov	r2, r3
 8004fe6:	68bb      	ldr	r3, [r7, #8]
 8004fe8:	781b      	ldrb	r3, [r3, #0]
 8004fea:	009b      	lsls	r3, r3, #2
 8004fec:	441a      	add	r2, r3
 8004fee:	8a7b      	ldrh	r3, [r7, #18]
 8004ff0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004ff4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004ff8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004ffc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005000:	b29b      	uxth	r3, r3
 8005002:	8013      	strh	r3, [r2, #0]
 8005004:	e20d      	b.n	8005422 <HAL_PCD_EP_DB_Transmit+0x4e0>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8005006:	88fb      	ldrh	r3, [r7, #6]
 8005008:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800500c:	2b00      	cmp	r3, #0
 800500e:	d01f      	beq.n	8005050 <HAL_PCD_EP_DB_Transmit+0x10e>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	461a      	mov	r2, r3
 8005016:	68bb      	ldr	r3, [r7, #8]
 8005018:	781b      	ldrb	r3, [r3, #0]
 800501a:	009b      	lsls	r3, r3, #2
 800501c:	4413      	add	r3, r2
 800501e:	881b      	ldrh	r3, [r3, #0]
 8005020:	b29b      	uxth	r3, r3
 8005022:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005026:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800502a:	84bb      	strh	r3, [r7, #36]	; 0x24
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	461a      	mov	r2, r3
 8005032:	68bb      	ldr	r3, [r7, #8]
 8005034:	781b      	ldrb	r3, [r3, #0]
 8005036:	009b      	lsls	r3, r3, #2
 8005038:	441a      	add	r2, r3
 800503a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800503c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005040:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005044:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005048:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800504c:	b29b      	uxth	r3, r3
 800504e:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8005050:	68bb      	ldr	r3, [r7, #8]
 8005052:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005056:	2b01      	cmp	r3, #1
 8005058:	f040 81e3 	bne.w	8005422 <HAL_PCD_EP_DB_Transmit+0x4e0>
      {
        ep->xfer_buff += TxByteNbre;
 800505c:	68bb      	ldr	r3, [r7, #8]
 800505e:	695a      	ldr	r2, [r3, #20]
 8005060:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8005062:	441a      	add	r2, r3
 8005064:	68bb      	ldr	r3, [r7, #8]
 8005066:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8005068:	68bb      	ldr	r3, [r7, #8]
 800506a:	69da      	ldr	r2, [r3, #28]
 800506c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800506e:	441a      	add	r2, r3
 8005070:	68bb      	ldr	r3, [r7, #8]
 8005072:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8005074:	68bb      	ldr	r3, [r7, #8]
 8005076:	6a1a      	ldr	r2, [r3, #32]
 8005078:	68bb      	ldr	r3, [r7, #8]
 800507a:	691b      	ldr	r3, [r3, #16]
 800507c:	429a      	cmp	r2, r3
 800507e:	d309      	bcc.n	8005094 <HAL_PCD_EP_DB_Transmit+0x152>
        {
          len = ep->maxpacket;
 8005080:	68bb      	ldr	r3, [r7, #8]
 8005082:	691b      	ldr	r3, [r3, #16]
 8005084:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db -= len;
 8005086:	68bb      	ldr	r3, [r7, #8]
 8005088:	6a1a      	ldr	r2, [r3, #32]
 800508a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800508c:	1ad2      	subs	r2, r2, r3
 800508e:	68bb      	ldr	r3, [r7, #8]
 8005090:	621a      	str	r2, [r3, #32]
 8005092:	e014      	b.n	80050be <HAL_PCD_EP_DB_Transmit+0x17c>
        }
        else if (ep->xfer_len_db == 0U)
 8005094:	68bb      	ldr	r3, [r7, #8]
 8005096:	6a1b      	ldr	r3, [r3, #32]
 8005098:	2b00      	cmp	r3, #0
 800509a:	d106      	bne.n	80050aa <HAL_PCD_EP_DB_Transmit+0x168>
        {
          len = TxByteNbre;
 800509c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800509e:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_fill_db = 0U;
 80050a0:	68bb      	ldr	r3, [r7, #8]
 80050a2:	2200      	movs	r2, #0
 80050a4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80050a8:	e009      	b.n	80050be <HAL_PCD_EP_DB_Transmit+0x17c>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 80050aa:	68bb      	ldr	r3, [r7, #8]
 80050ac:	2200      	movs	r2, #0
 80050ae:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 80050b2:	68bb      	ldr	r3, [r7, #8]
 80050b4:	6a1b      	ldr	r3, [r3, #32]
 80050b6:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db = 0U;
 80050b8:	68bb      	ldr	r3, [r7, #8]
 80050ba:	2200      	movs	r2, #0
 80050bc:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80050be:	68bb      	ldr	r3, [r7, #8]
 80050c0:	785b      	ldrb	r3, [r3, #1]
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d155      	bne.n	8005172 <HAL_PCD_EP_DB_Transmit+0x230>
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	61bb      	str	r3, [r7, #24]
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80050d4:	b29b      	uxth	r3, r3
 80050d6:	461a      	mov	r2, r3
 80050d8:	69bb      	ldr	r3, [r7, #24]
 80050da:	4413      	add	r3, r2
 80050dc:	61bb      	str	r3, [r7, #24]
 80050de:	68bb      	ldr	r3, [r7, #8]
 80050e0:	781b      	ldrb	r3, [r3, #0]
 80050e2:	011a      	lsls	r2, r3, #4
 80050e4:	69bb      	ldr	r3, [r7, #24]
 80050e6:	4413      	add	r3, r2
 80050e8:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80050ec:	617b      	str	r3, [r7, #20]
 80050ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d112      	bne.n	800511a <HAL_PCD_EP_DB_Transmit+0x1d8>
 80050f4:	697b      	ldr	r3, [r7, #20]
 80050f6:	881b      	ldrh	r3, [r3, #0]
 80050f8:	b29b      	uxth	r3, r3
 80050fa:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80050fe:	b29a      	uxth	r2, r3
 8005100:	697b      	ldr	r3, [r7, #20]
 8005102:	801a      	strh	r2, [r3, #0]
 8005104:	697b      	ldr	r3, [r7, #20]
 8005106:	881b      	ldrh	r3, [r3, #0]
 8005108:	b29b      	uxth	r3, r3
 800510a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800510e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005112:	b29a      	uxth	r2, r3
 8005114:	697b      	ldr	r3, [r7, #20]
 8005116:	801a      	strh	r2, [r3, #0]
 8005118:	e047      	b.n	80051aa <HAL_PCD_EP_DB_Transmit+0x268>
 800511a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800511c:	2b3e      	cmp	r3, #62	; 0x3e
 800511e:	d811      	bhi.n	8005144 <HAL_PCD_EP_DB_Transmit+0x202>
 8005120:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005122:	085b      	lsrs	r3, r3, #1
 8005124:	62bb      	str	r3, [r7, #40]	; 0x28
 8005126:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005128:	f003 0301 	and.w	r3, r3, #1
 800512c:	2b00      	cmp	r3, #0
 800512e:	d002      	beq.n	8005136 <HAL_PCD_EP_DB_Transmit+0x1f4>
 8005130:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005132:	3301      	adds	r3, #1
 8005134:	62bb      	str	r3, [r7, #40]	; 0x28
 8005136:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005138:	b29b      	uxth	r3, r3
 800513a:	029b      	lsls	r3, r3, #10
 800513c:	b29a      	uxth	r2, r3
 800513e:	697b      	ldr	r3, [r7, #20]
 8005140:	801a      	strh	r2, [r3, #0]
 8005142:	e032      	b.n	80051aa <HAL_PCD_EP_DB_Transmit+0x268>
 8005144:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005146:	095b      	lsrs	r3, r3, #5
 8005148:	62bb      	str	r3, [r7, #40]	; 0x28
 800514a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800514c:	f003 031f 	and.w	r3, r3, #31
 8005150:	2b00      	cmp	r3, #0
 8005152:	d102      	bne.n	800515a <HAL_PCD_EP_DB_Transmit+0x218>
 8005154:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005156:	3b01      	subs	r3, #1
 8005158:	62bb      	str	r3, [r7, #40]	; 0x28
 800515a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800515c:	b29b      	uxth	r3, r3
 800515e:	029b      	lsls	r3, r3, #10
 8005160:	b29b      	uxth	r3, r3
 8005162:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005166:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800516a:	b29a      	uxth	r2, r3
 800516c:	697b      	ldr	r3, [r7, #20]
 800516e:	801a      	strh	r2, [r3, #0]
 8005170:	e01b      	b.n	80051aa <HAL_PCD_EP_DB_Transmit+0x268>
 8005172:	68bb      	ldr	r3, [r7, #8]
 8005174:	785b      	ldrb	r3, [r3, #1]
 8005176:	2b01      	cmp	r3, #1
 8005178:	d117      	bne.n	80051aa <HAL_PCD_EP_DB_Transmit+0x268>
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	623b      	str	r3, [r7, #32]
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005188:	b29b      	uxth	r3, r3
 800518a:	461a      	mov	r2, r3
 800518c:	6a3b      	ldr	r3, [r7, #32]
 800518e:	4413      	add	r3, r2
 8005190:	623b      	str	r3, [r7, #32]
 8005192:	68bb      	ldr	r3, [r7, #8]
 8005194:	781b      	ldrb	r3, [r3, #0]
 8005196:	011a      	lsls	r2, r3, #4
 8005198:	6a3b      	ldr	r3, [r7, #32]
 800519a:	4413      	add	r3, r2
 800519c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80051a0:	61fb      	str	r3, [r7, #28]
 80051a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051a4:	b29a      	uxth	r2, r3
 80051a6:	69fb      	ldr	r3, [r7, #28]
 80051a8:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	6818      	ldr	r0, [r3, #0]
 80051ae:	68bb      	ldr	r3, [r7, #8]
 80051b0:	6959      	ldr	r1, [r3, #20]
 80051b2:	68bb      	ldr	r3, [r7, #8]
 80051b4:	891a      	ldrh	r2, [r3, #8]
 80051b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051b8:	b29b      	uxth	r3, r3
 80051ba:	f004 fb4e 	bl	800985a <USB_WritePMA>
 80051be:	e130      	b.n	8005422 <HAL_PCD_EP_DB_Transmit+0x4e0>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80051c8:	b29b      	uxth	r3, r3
 80051ca:	461a      	mov	r2, r3
 80051cc:	68bb      	ldr	r3, [r7, #8]
 80051ce:	781b      	ldrb	r3, [r3, #0]
 80051d0:	00db      	lsls	r3, r3, #3
 80051d2:	4413      	add	r3, r2
 80051d4:	3306      	adds	r3, #6
 80051d6:	005b      	lsls	r3, r3, #1
 80051d8:	68fa      	ldr	r2, [r7, #12]
 80051da:	6812      	ldr	r2, [r2, #0]
 80051dc:	4413      	add	r3, r2
 80051de:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80051e2:	881b      	ldrh	r3, [r3, #0]
 80051e4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80051e8:	85fb      	strh	r3, [r7, #46]	; 0x2e

    if (ep->xfer_len >= TxByteNbre)
 80051ea:	68bb      	ldr	r3, [r7, #8]
 80051ec:	699a      	ldr	r2, [r3, #24]
 80051ee:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80051f0:	429a      	cmp	r2, r3
 80051f2:	d306      	bcc.n	8005202 <HAL_PCD_EP_DB_Transmit+0x2c0>
    {
      ep->xfer_len -= TxByteNbre;
 80051f4:	68bb      	ldr	r3, [r7, #8]
 80051f6:	699a      	ldr	r2, [r3, #24]
 80051f8:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80051fa:	1ad2      	subs	r2, r2, r3
 80051fc:	68bb      	ldr	r3, [r7, #8]
 80051fe:	619a      	str	r2, [r3, #24]
 8005200:	e002      	b.n	8005208 <HAL_PCD_EP_DB_Transmit+0x2c6>
    }
    else
    {
      ep->xfer_len = 0U;
 8005202:	68bb      	ldr	r3, [r7, #8]
 8005204:	2200      	movs	r2, #0
 8005206:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8005208:	68bb      	ldr	r3, [r7, #8]
 800520a:	699b      	ldr	r3, [r3, #24]
 800520c:	2b00      	cmp	r3, #0
 800520e:	d12c      	bne.n	800526a <HAL_PCD_EP_DB_Transmit+0x328>
    {
      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8005210:	68bb      	ldr	r3, [r7, #8]
 8005212:	781b      	ldrb	r3, [r3, #0]
 8005214:	4619      	mov	r1, r3
 8005216:	68f8      	ldr	r0, [r7, #12]
 8005218:	f006 f989 	bl	800b52e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /*need to Free USB Buff*/
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800521c:	88fb      	ldrh	r3, [r7, #6]
 800521e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005222:	2b00      	cmp	r3, #0
 8005224:	f040 80fd 	bne.w	8005422 <HAL_PCD_EP_DB_Transmit+0x4e0>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	461a      	mov	r2, r3
 800522e:	68bb      	ldr	r3, [r7, #8]
 8005230:	781b      	ldrb	r3, [r3, #0]
 8005232:	009b      	lsls	r3, r3, #2
 8005234:	4413      	add	r3, r2
 8005236:	881b      	ldrh	r3, [r3, #0]
 8005238:	b29b      	uxth	r3, r3
 800523a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800523e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005242:	84fb      	strh	r3, [r7, #38]	; 0x26
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	461a      	mov	r2, r3
 800524a:	68bb      	ldr	r3, [r7, #8]
 800524c:	781b      	ldrb	r3, [r3, #0]
 800524e:	009b      	lsls	r3, r3, #2
 8005250:	441a      	add	r2, r3
 8005252:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005254:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005258:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800525c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005260:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005264:	b29b      	uxth	r3, r3
 8005266:	8013      	strh	r3, [r2, #0]
 8005268:	e0db      	b.n	8005422 <HAL_PCD_EP_DB_Transmit+0x4e0>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800526a:	88fb      	ldrh	r3, [r7, #6]
 800526c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005270:	2b00      	cmp	r3, #0
 8005272:	d11f      	bne.n	80052b4 <HAL_PCD_EP_DB_Transmit+0x372>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	461a      	mov	r2, r3
 800527a:	68bb      	ldr	r3, [r7, #8]
 800527c:	781b      	ldrb	r3, [r3, #0]
 800527e:	009b      	lsls	r3, r3, #2
 8005280:	4413      	add	r3, r2
 8005282:	881b      	ldrh	r3, [r3, #0]
 8005284:	b29b      	uxth	r3, r3
 8005286:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800528a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800528e:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	461a      	mov	r2, r3
 8005296:	68bb      	ldr	r3, [r7, #8]
 8005298:	781b      	ldrb	r3, [r3, #0]
 800529a:	009b      	lsls	r3, r3, #2
 800529c:	441a      	add	r2, r3
 800529e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80052a0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80052a4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80052a8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80052ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80052b0:	b29b      	uxth	r3, r3
 80052b2:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80052b4:	68bb      	ldr	r3, [r7, #8]
 80052b6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80052ba:	2b01      	cmp	r3, #1
 80052bc:	f040 80b1 	bne.w	8005422 <HAL_PCD_EP_DB_Transmit+0x4e0>
      {
        ep->xfer_buff += TxByteNbre;
 80052c0:	68bb      	ldr	r3, [r7, #8]
 80052c2:	695a      	ldr	r2, [r3, #20]
 80052c4:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80052c6:	441a      	add	r2, r3
 80052c8:	68bb      	ldr	r3, [r7, #8]
 80052ca:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 80052cc:	68bb      	ldr	r3, [r7, #8]
 80052ce:	69da      	ldr	r2, [r3, #28]
 80052d0:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80052d2:	441a      	add	r2, r3
 80052d4:	68bb      	ldr	r3, [r7, #8]
 80052d6:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80052d8:	68bb      	ldr	r3, [r7, #8]
 80052da:	6a1a      	ldr	r2, [r3, #32]
 80052dc:	68bb      	ldr	r3, [r7, #8]
 80052de:	691b      	ldr	r3, [r3, #16]
 80052e0:	429a      	cmp	r2, r3
 80052e2:	d309      	bcc.n	80052f8 <HAL_PCD_EP_DB_Transmit+0x3b6>
        {
          len = ep->maxpacket;
 80052e4:	68bb      	ldr	r3, [r7, #8]
 80052e6:	691b      	ldr	r3, [r3, #16]
 80052e8:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db -= len;
 80052ea:	68bb      	ldr	r3, [r7, #8]
 80052ec:	6a1a      	ldr	r2, [r3, #32]
 80052ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052f0:	1ad2      	subs	r2, r2, r3
 80052f2:	68bb      	ldr	r3, [r7, #8]
 80052f4:	621a      	str	r2, [r3, #32]
 80052f6:	e014      	b.n	8005322 <HAL_PCD_EP_DB_Transmit+0x3e0>
        }
        else if (ep->xfer_len_db == 0U)
 80052f8:	68bb      	ldr	r3, [r7, #8]
 80052fa:	6a1b      	ldr	r3, [r3, #32]
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d106      	bne.n	800530e <HAL_PCD_EP_DB_Transmit+0x3cc>
        {
          len = TxByteNbre;
 8005300:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8005302:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_fill_db = 0U;
 8005304:	68bb      	ldr	r3, [r7, #8]
 8005306:	2200      	movs	r2, #0
 8005308:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800530c:	e009      	b.n	8005322 <HAL_PCD_EP_DB_Transmit+0x3e0>
        }
        else
        {
          len = ep->xfer_len_db;
 800530e:	68bb      	ldr	r3, [r7, #8]
 8005310:	6a1b      	ldr	r3, [r3, #32]
 8005312:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db = 0U;
 8005314:	68bb      	ldr	r3, [r7, #8]
 8005316:	2200      	movs	r2, #0
 8005318:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 800531a:	68bb      	ldr	r3, [r7, #8]
 800531c:	2200      	movs	r2, #0
 800531e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	637b      	str	r3, [r7, #52]	; 0x34
 8005328:	68bb      	ldr	r3, [r7, #8]
 800532a:	785b      	ldrb	r3, [r3, #1]
 800532c:	2b00      	cmp	r3, #0
 800532e:	d155      	bne.n	80053dc <HAL_PCD_EP_DB_Transmit+0x49a>
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	647b      	str	r3, [r7, #68]	; 0x44
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800533e:	b29b      	uxth	r3, r3
 8005340:	461a      	mov	r2, r3
 8005342:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005344:	4413      	add	r3, r2
 8005346:	647b      	str	r3, [r7, #68]	; 0x44
 8005348:	68bb      	ldr	r3, [r7, #8]
 800534a:	781b      	ldrb	r3, [r3, #0]
 800534c:	011a      	lsls	r2, r3, #4
 800534e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005350:	4413      	add	r3, r2
 8005352:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005356:	643b      	str	r3, [r7, #64]	; 0x40
 8005358:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800535a:	2b00      	cmp	r3, #0
 800535c:	d112      	bne.n	8005384 <HAL_PCD_EP_DB_Transmit+0x442>
 800535e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005360:	881b      	ldrh	r3, [r3, #0]
 8005362:	b29b      	uxth	r3, r3
 8005364:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005368:	b29a      	uxth	r2, r3
 800536a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800536c:	801a      	strh	r2, [r3, #0]
 800536e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005370:	881b      	ldrh	r3, [r3, #0]
 8005372:	b29b      	uxth	r3, r3
 8005374:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005378:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800537c:	b29a      	uxth	r2, r3
 800537e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005380:	801a      	strh	r2, [r3, #0]
 8005382:	e044      	b.n	800540e <HAL_PCD_EP_DB_Transmit+0x4cc>
 8005384:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005386:	2b3e      	cmp	r3, #62	; 0x3e
 8005388:	d811      	bhi.n	80053ae <HAL_PCD_EP_DB_Transmit+0x46c>
 800538a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800538c:	085b      	lsrs	r3, r3, #1
 800538e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005390:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005392:	f003 0301 	and.w	r3, r3, #1
 8005396:	2b00      	cmp	r3, #0
 8005398:	d002      	beq.n	80053a0 <HAL_PCD_EP_DB_Transmit+0x45e>
 800539a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800539c:	3301      	adds	r3, #1
 800539e:	63fb      	str	r3, [r7, #60]	; 0x3c
 80053a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80053a2:	b29b      	uxth	r3, r3
 80053a4:	029b      	lsls	r3, r3, #10
 80053a6:	b29a      	uxth	r2, r3
 80053a8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80053aa:	801a      	strh	r2, [r3, #0]
 80053ac:	e02f      	b.n	800540e <HAL_PCD_EP_DB_Transmit+0x4cc>
 80053ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053b0:	095b      	lsrs	r3, r3, #5
 80053b2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80053b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053b6:	f003 031f 	and.w	r3, r3, #31
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d102      	bne.n	80053c4 <HAL_PCD_EP_DB_Transmit+0x482>
 80053be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80053c0:	3b01      	subs	r3, #1
 80053c2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80053c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80053c6:	b29b      	uxth	r3, r3
 80053c8:	029b      	lsls	r3, r3, #10
 80053ca:	b29b      	uxth	r3, r3
 80053cc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80053d0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80053d4:	b29a      	uxth	r2, r3
 80053d6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80053d8:	801a      	strh	r2, [r3, #0]
 80053da:	e018      	b.n	800540e <HAL_PCD_EP_DB_Transmit+0x4cc>
 80053dc:	68bb      	ldr	r3, [r7, #8]
 80053de:	785b      	ldrb	r3, [r3, #1]
 80053e0:	2b01      	cmp	r3, #1
 80053e2:	d114      	bne.n	800540e <HAL_PCD_EP_DB_Transmit+0x4cc>
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80053ec:	b29b      	uxth	r3, r3
 80053ee:	461a      	mov	r2, r3
 80053f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80053f2:	4413      	add	r3, r2
 80053f4:	637b      	str	r3, [r7, #52]	; 0x34
 80053f6:	68bb      	ldr	r3, [r7, #8]
 80053f8:	781b      	ldrb	r3, [r3, #0]
 80053fa:	011a      	lsls	r2, r3, #4
 80053fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80053fe:	4413      	add	r3, r2
 8005400:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005404:	633b      	str	r3, [r7, #48]	; 0x30
 8005406:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005408:	b29a      	uxth	r2, r3
 800540a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800540c:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	6818      	ldr	r0, [r3, #0]
 8005412:	68bb      	ldr	r3, [r7, #8]
 8005414:	6959      	ldr	r1, [r3, #20]
 8005416:	68bb      	ldr	r3, [r7, #8]
 8005418:	895a      	ldrh	r2, [r3, #10]
 800541a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800541c:	b29b      	uxth	r3, r3
 800541e:	f004 fa1c 	bl	800985a <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	461a      	mov	r2, r3
 8005428:	68bb      	ldr	r3, [r7, #8]
 800542a:	781b      	ldrb	r3, [r3, #0]
 800542c:	009b      	lsls	r3, r3, #2
 800542e:	4413      	add	r3, r2
 8005430:	881b      	ldrh	r3, [r3, #0]
 8005432:	b29b      	uxth	r3, r3
 8005434:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005438:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800543c:	823b      	strh	r3, [r7, #16]
 800543e:	8a3b      	ldrh	r3, [r7, #16]
 8005440:	f083 0310 	eor.w	r3, r3, #16
 8005444:	823b      	strh	r3, [r7, #16]
 8005446:	8a3b      	ldrh	r3, [r7, #16]
 8005448:	f083 0320 	eor.w	r3, r3, #32
 800544c:	823b      	strh	r3, [r7, #16]
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	461a      	mov	r2, r3
 8005454:	68bb      	ldr	r3, [r7, #8]
 8005456:	781b      	ldrb	r3, [r3, #0]
 8005458:	009b      	lsls	r3, r3, #2
 800545a:	441a      	add	r2, r3
 800545c:	8a3b      	ldrh	r3, [r7, #16]
 800545e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005462:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005466:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800546a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800546e:	b29b      	uxth	r3, r3
 8005470:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8005472:	2300      	movs	r3, #0
}
 8005474:	4618      	mov	r0, r3
 8005476:	3748      	adds	r7, #72	; 0x48
 8005478:	46bd      	mov	sp, r7
 800547a:	bd80      	pop	{r7, pc}

0800547c <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 800547c:	b480      	push	{r7}
 800547e:	b087      	sub	sp, #28
 8005480:	af00      	add	r7, sp, #0
 8005482:	60f8      	str	r0, [r7, #12]
 8005484:	607b      	str	r3, [r7, #4]
 8005486:	460b      	mov	r3, r1
 8005488:	817b      	strh	r3, [r7, #10]
 800548a:	4613      	mov	r3, r2
 800548c:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 800548e:	897b      	ldrh	r3, [r7, #10]
 8005490:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005494:	b29b      	uxth	r3, r3
 8005496:	2b00      	cmp	r3, #0
 8005498:	d00b      	beq.n	80054b2 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800549a:	897b      	ldrh	r3, [r7, #10]
 800549c:	f003 0307 	and.w	r3, r3, #7
 80054a0:	1c5a      	adds	r2, r3, #1
 80054a2:	4613      	mov	r3, r2
 80054a4:	009b      	lsls	r3, r3, #2
 80054a6:	4413      	add	r3, r2
 80054a8:	00db      	lsls	r3, r3, #3
 80054aa:	68fa      	ldr	r2, [r7, #12]
 80054ac:	4413      	add	r3, r2
 80054ae:	617b      	str	r3, [r7, #20]
 80054b0:	e009      	b.n	80054c6 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80054b2:	897a      	ldrh	r2, [r7, #10]
 80054b4:	4613      	mov	r3, r2
 80054b6:	009b      	lsls	r3, r3, #2
 80054b8:	4413      	add	r3, r2
 80054ba:	00db      	lsls	r3, r3, #3
 80054bc:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80054c0:	68fa      	ldr	r2, [r7, #12]
 80054c2:	4413      	add	r3, r2
 80054c4:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 80054c6:	893b      	ldrh	r3, [r7, #8]
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d107      	bne.n	80054dc <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 80054cc:	697b      	ldr	r3, [r7, #20]
 80054ce:	2200      	movs	r2, #0
 80054d0:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	b29a      	uxth	r2, r3
 80054d6:	697b      	ldr	r3, [r7, #20]
 80054d8:	80da      	strh	r2, [r3, #6]
 80054da:	e00b      	b.n	80054f4 <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 80054dc:	697b      	ldr	r3, [r7, #20]
 80054de:	2201      	movs	r2, #1
 80054e0:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	b29a      	uxth	r2, r3
 80054e6:	697b      	ldr	r3, [r7, #20]
 80054e8:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	0c1b      	lsrs	r3, r3, #16
 80054ee:	b29a      	uxth	r2, r3
 80054f0:	697b      	ldr	r3, [r7, #20]
 80054f2:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 80054f4:	2300      	movs	r3, #0
}
 80054f6:	4618      	mov	r0, r3
 80054f8:	371c      	adds	r7, #28
 80054fa:	46bd      	mov	sp, r7
 80054fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005500:	4770      	bx	lr
	...

08005504 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005504:	b580      	push	{r7, lr}
 8005506:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 800550a:	af00      	add	r7, sp, #0
 800550c:	1d3b      	adds	r3, r7, #4
 800550e:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005510:	1d3b      	adds	r3, r7, #4
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	2b00      	cmp	r3, #0
 8005516:	d102      	bne.n	800551e <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8005518:	2301      	movs	r3, #1
 800551a:	f000 bef4 	b.w	8006306 <HAL_RCC_OscConfig+0xe02>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800551e:	1d3b      	adds	r3, r7, #4
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	f003 0301 	and.w	r3, r3, #1
 8005528:	2b00      	cmp	r3, #0
 800552a:	f000 816a 	beq.w	8005802 <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800552e:	4bb3      	ldr	r3, [pc, #716]	; (80057fc <HAL_RCC_OscConfig+0x2f8>)
 8005530:	685b      	ldr	r3, [r3, #4]
 8005532:	f003 030c 	and.w	r3, r3, #12
 8005536:	2b04      	cmp	r3, #4
 8005538:	d00c      	beq.n	8005554 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800553a:	4bb0      	ldr	r3, [pc, #704]	; (80057fc <HAL_RCC_OscConfig+0x2f8>)
 800553c:	685b      	ldr	r3, [r3, #4]
 800553e:	f003 030c 	and.w	r3, r3, #12
 8005542:	2b08      	cmp	r3, #8
 8005544:	d159      	bne.n	80055fa <HAL_RCC_OscConfig+0xf6>
 8005546:	4bad      	ldr	r3, [pc, #692]	; (80057fc <HAL_RCC_OscConfig+0x2f8>)
 8005548:	685b      	ldr	r3, [r3, #4]
 800554a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800554e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005552:	d152      	bne.n	80055fa <HAL_RCC_OscConfig+0xf6>
 8005554:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005558:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800555c:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8005560:	fa93 f3a3 	rbit	r3, r3
 8005564:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8005568:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800556c:	fab3 f383 	clz	r3, r3
 8005570:	b2db      	uxtb	r3, r3
 8005572:	095b      	lsrs	r3, r3, #5
 8005574:	b2db      	uxtb	r3, r3
 8005576:	f043 0301 	orr.w	r3, r3, #1
 800557a:	b2db      	uxtb	r3, r3
 800557c:	2b01      	cmp	r3, #1
 800557e:	d102      	bne.n	8005586 <HAL_RCC_OscConfig+0x82>
 8005580:	4b9e      	ldr	r3, [pc, #632]	; (80057fc <HAL_RCC_OscConfig+0x2f8>)
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	e015      	b.n	80055b2 <HAL_RCC_OscConfig+0xae>
 8005586:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800558a:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800558e:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8005592:	fa93 f3a3 	rbit	r3, r3
 8005596:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 800559a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800559e:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 80055a2:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 80055a6:	fa93 f3a3 	rbit	r3, r3
 80055aa:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 80055ae:	4b93      	ldr	r3, [pc, #588]	; (80057fc <HAL_RCC_OscConfig+0x2f8>)
 80055b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055b2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80055b6:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 80055ba:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 80055be:	fa92 f2a2 	rbit	r2, r2
 80055c2:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 80055c6:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 80055ca:	fab2 f282 	clz	r2, r2
 80055ce:	b2d2      	uxtb	r2, r2
 80055d0:	f042 0220 	orr.w	r2, r2, #32
 80055d4:	b2d2      	uxtb	r2, r2
 80055d6:	f002 021f 	and.w	r2, r2, #31
 80055da:	2101      	movs	r1, #1
 80055dc:	fa01 f202 	lsl.w	r2, r1, r2
 80055e0:	4013      	ands	r3, r2
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	f000 810c 	beq.w	8005800 <HAL_RCC_OscConfig+0x2fc>
 80055e8:	1d3b      	adds	r3, r7, #4
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	685b      	ldr	r3, [r3, #4]
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	f040 8106 	bne.w	8005800 <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 80055f4:	2301      	movs	r3, #1
 80055f6:	f000 be86 	b.w	8006306 <HAL_RCC_OscConfig+0xe02>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80055fa:	1d3b      	adds	r3, r7, #4
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	685b      	ldr	r3, [r3, #4]
 8005600:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005604:	d106      	bne.n	8005614 <HAL_RCC_OscConfig+0x110>
 8005606:	4b7d      	ldr	r3, [pc, #500]	; (80057fc <HAL_RCC_OscConfig+0x2f8>)
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	4a7c      	ldr	r2, [pc, #496]	; (80057fc <HAL_RCC_OscConfig+0x2f8>)
 800560c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005610:	6013      	str	r3, [r2, #0]
 8005612:	e030      	b.n	8005676 <HAL_RCC_OscConfig+0x172>
 8005614:	1d3b      	adds	r3, r7, #4
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	685b      	ldr	r3, [r3, #4]
 800561a:	2b00      	cmp	r3, #0
 800561c:	d10c      	bne.n	8005638 <HAL_RCC_OscConfig+0x134>
 800561e:	4b77      	ldr	r3, [pc, #476]	; (80057fc <HAL_RCC_OscConfig+0x2f8>)
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	4a76      	ldr	r2, [pc, #472]	; (80057fc <HAL_RCC_OscConfig+0x2f8>)
 8005624:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005628:	6013      	str	r3, [r2, #0]
 800562a:	4b74      	ldr	r3, [pc, #464]	; (80057fc <HAL_RCC_OscConfig+0x2f8>)
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	4a73      	ldr	r2, [pc, #460]	; (80057fc <HAL_RCC_OscConfig+0x2f8>)
 8005630:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005634:	6013      	str	r3, [r2, #0]
 8005636:	e01e      	b.n	8005676 <HAL_RCC_OscConfig+0x172>
 8005638:	1d3b      	adds	r3, r7, #4
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	685b      	ldr	r3, [r3, #4]
 800563e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005642:	d10c      	bne.n	800565e <HAL_RCC_OscConfig+0x15a>
 8005644:	4b6d      	ldr	r3, [pc, #436]	; (80057fc <HAL_RCC_OscConfig+0x2f8>)
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	4a6c      	ldr	r2, [pc, #432]	; (80057fc <HAL_RCC_OscConfig+0x2f8>)
 800564a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800564e:	6013      	str	r3, [r2, #0]
 8005650:	4b6a      	ldr	r3, [pc, #424]	; (80057fc <HAL_RCC_OscConfig+0x2f8>)
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	4a69      	ldr	r2, [pc, #420]	; (80057fc <HAL_RCC_OscConfig+0x2f8>)
 8005656:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800565a:	6013      	str	r3, [r2, #0]
 800565c:	e00b      	b.n	8005676 <HAL_RCC_OscConfig+0x172>
 800565e:	4b67      	ldr	r3, [pc, #412]	; (80057fc <HAL_RCC_OscConfig+0x2f8>)
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	4a66      	ldr	r2, [pc, #408]	; (80057fc <HAL_RCC_OscConfig+0x2f8>)
 8005664:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005668:	6013      	str	r3, [r2, #0]
 800566a:	4b64      	ldr	r3, [pc, #400]	; (80057fc <HAL_RCC_OscConfig+0x2f8>)
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	4a63      	ldr	r2, [pc, #396]	; (80057fc <HAL_RCC_OscConfig+0x2f8>)
 8005670:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005674:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8005676:	4b61      	ldr	r3, [pc, #388]	; (80057fc <HAL_RCC_OscConfig+0x2f8>)
 8005678:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800567a:	f023 020f 	bic.w	r2, r3, #15
 800567e:	1d3b      	adds	r3, r7, #4
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	689b      	ldr	r3, [r3, #8]
 8005684:	495d      	ldr	r1, [pc, #372]	; (80057fc <HAL_RCC_OscConfig+0x2f8>)
 8005686:	4313      	orrs	r3, r2
 8005688:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800568a:	1d3b      	adds	r3, r7, #4
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	685b      	ldr	r3, [r3, #4]
 8005690:	2b00      	cmp	r3, #0
 8005692:	d059      	beq.n	8005748 <HAL_RCC_OscConfig+0x244>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005694:	f7fd fc06 	bl	8002ea4 <HAL_GetTick>
 8005698:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800569c:	e00a      	b.n	80056b4 <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800569e:	f7fd fc01 	bl	8002ea4 <HAL_GetTick>
 80056a2:	4602      	mov	r2, r0
 80056a4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80056a8:	1ad3      	subs	r3, r2, r3
 80056aa:	2b64      	cmp	r3, #100	; 0x64
 80056ac:	d902      	bls.n	80056b4 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 80056ae:	2303      	movs	r3, #3
 80056b0:	f000 be29 	b.w	8006306 <HAL_RCC_OscConfig+0xe02>
 80056b4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80056b8:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80056bc:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 80056c0:	fa93 f3a3 	rbit	r3, r3
 80056c4:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 80056c8:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80056cc:	fab3 f383 	clz	r3, r3
 80056d0:	b2db      	uxtb	r3, r3
 80056d2:	095b      	lsrs	r3, r3, #5
 80056d4:	b2db      	uxtb	r3, r3
 80056d6:	f043 0301 	orr.w	r3, r3, #1
 80056da:	b2db      	uxtb	r3, r3
 80056dc:	2b01      	cmp	r3, #1
 80056de:	d102      	bne.n	80056e6 <HAL_RCC_OscConfig+0x1e2>
 80056e0:	4b46      	ldr	r3, [pc, #280]	; (80057fc <HAL_RCC_OscConfig+0x2f8>)
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	e015      	b.n	8005712 <HAL_RCC_OscConfig+0x20e>
 80056e6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80056ea:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80056ee:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 80056f2:	fa93 f3a3 	rbit	r3, r3
 80056f6:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 80056fa:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80056fe:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8005702:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8005706:	fa93 f3a3 	rbit	r3, r3
 800570a:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 800570e:	4b3b      	ldr	r3, [pc, #236]	; (80057fc <HAL_RCC_OscConfig+0x2f8>)
 8005710:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005712:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8005716:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 800571a:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 800571e:	fa92 f2a2 	rbit	r2, r2
 8005722:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8005726:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 800572a:	fab2 f282 	clz	r2, r2
 800572e:	b2d2      	uxtb	r2, r2
 8005730:	f042 0220 	orr.w	r2, r2, #32
 8005734:	b2d2      	uxtb	r2, r2
 8005736:	f002 021f 	and.w	r2, r2, #31
 800573a:	2101      	movs	r1, #1
 800573c:	fa01 f202 	lsl.w	r2, r1, r2
 8005740:	4013      	ands	r3, r2
 8005742:	2b00      	cmp	r3, #0
 8005744:	d0ab      	beq.n	800569e <HAL_RCC_OscConfig+0x19a>
 8005746:	e05c      	b.n	8005802 <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005748:	f7fd fbac 	bl	8002ea4 <HAL_GetTick>
 800574c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005750:	e00a      	b.n	8005768 <HAL_RCC_OscConfig+0x264>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005752:	f7fd fba7 	bl	8002ea4 <HAL_GetTick>
 8005756:	4602      	mov	r2, r0
 8005758:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800575c:	1ad3      	subs	r3, r2, r3
 800575e:	2b64      	cmp	r3, #100	; 0x64
 8005760:	d902      	bls.n	8005768 <HAL_RCC_OscConfig+0x264>
          {
            return HAL_TIMEOUT;
 8005762:	2303      	movs	r3, #3
 8005764:	f000 bdcf 	b.w	8006306 <HAL_RCC_OscConfig+0xe02>
 8005768:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800576c:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005770:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8005774:	fa93 f3a3 	rbit	r3, r3
 8005778:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 800577c:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005780:	fab3 f383 	clz	r3, r3
 8005784:	b2db      	uxtb	r3, r3
 8005786:	095b      	lsrs	r3, r3, #5
 8005788:	b2db      	uxtb	r3, r3
 800578a:	f043 0301 	orr.w	r3, r3, #1
 800578e:	b2db      	uxtb	r3, r3
 8005790:	2b01      	cmp	r3, #1
 8005792:	d102      	bne.n	800579a <HAL_RCC_OscConfig+0x296>
 8005794:	4b19      	ldr	r3, [pc, #100]	; (80057fc <HAL_RCC_OscConfig+0x2f8>)
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	e015      	b.n	80057c6 <HAL_RCC_OscConfig+0x2c2>
 800579a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800579e:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80057a2:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 80057a6:	fa93 f3a3 	rbit	r3, r3
 80057aa:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 80057ae:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80057b2:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 80057b6:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 80057ba:	fa93 f3a3 	rbit	r3, r3
 80057be:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 80057c2:	4b0e      	ldr	r3, [pc, #56]	; (80057fc <HAL_RCC_OscConfig+0x2f8>)
 80057c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057c6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80057ca:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 80057ce:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 80057d2:	fa92 f2a2 	rbit	r2, r2
 80057d6:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 80057da:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 80057de:	fab2 f282 	clz	r2, r2
 80057e2:	b2d2      	uxtb	r2, r2
 80057e4:	f042 0220 	orr.w	r2, r2, #32
 80057e8:	b2d2      	uxtb	r2, r2
 80057ea:	f002 021f 	and.w	r2, r2, #31
 80057ee:	2101      	movs	r1, #1
 80057f0:	fa01 f202 	lsl.w	r2, r1, r2
 80057f4:	4013      	ands	r3, r2
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d1ab      	bne.n	8005752 <HAL_RCC_OscConfig+0x24e>
 80057fa:	e002      	b.n	8005802 <HAL_RCC_OscConfig+0x2fe>
 80057fc:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005800:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005802:	1d3b      	adds	r3, r7, #4
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	f003 0302 	and.w	r3, r3, #2
 800580c:	2b00      	cmp	r3, #0
 800580e:	f000 816f 	beq.w	8005af0 <HAL_RCC_OscConfig+0x5ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8005812:	4bd0      	ldr	r3, [pc, #832]	; (8005b54 <HAL_RCC_OscConfig+0x650>)
 8005814:	685b      	ldr	r3, [r3, #4]
 8005816:	f003 030c 	and.w	r3, r3, #12
 800581a:	2b00      	cmp	r3, #0
 800581c:	d00b      	beq.n	8005836 <HAL_RCC_OscConfig+0x332>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800581e:	4bcd      	ldr	r3, [pc, #820]	; (8005b54 <HAL_RCC_OscConfig+0x650>)
 8005820:	685b      	ldr	r3, [r3, #4]
 8005822:	f003 030c 	and.w	r3, r3, #12
 8005826:	2b08      	cmp	r3, #8
 8005828:	d16c      	bne.n	8005904 <HAL_RCC_OscConfig+0x400>
 800582a:	4bca      	ldr	r3, [pc, #808]	; (8005b54 <HAL_RCC_OscConfig+0x650>)
 800582c:	685b      	ldr	r3, [r3, #4]
 800582e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005832:	2b00      	cmp	r3, #0
 8005834:	d166      	bne.n	8005904 <HAL_RCC_OscConfig+0x400>
 8005836:	2302      	movs	r3, #2
 8005838:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800583c:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8005840:	fa93 f3a3 	rbit	r3, r3
 8005844:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8005848:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800584c:	fab3 f383 	clz	r3, r3
 8005850:	b2db      	uxtb	r3, r3
 8005852:	095b      	lsrs	r3, r3, #5
 8005854:	b2db      	uxtb	r3, r3
 8005856:	f043 0301 	orr.w	r3, r3, #1
 800585a:	b2db      	uxtb	r3, r3
 800585c:	2b01      	cmp	r3, #1
 800585e:	d102      	bne.n	8005866 <HAL_RCC_OscConfig+0x362>
 8005860:	4bbc      	ldr	r3, [pc, #752]	; (8005b54 <HAL_RCC_OscConfig+0x650>)
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	e013      	b.n	800588e <HAL_RCC_OscConfig+0x38a>
 8005866:	2302      	movs	r3, #2
 8005868:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800586c:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8005870:	fa93 f3a3 	rbit	r3, r3
 8005874:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8005878:	2302      	movs	r3, #2
 800587a:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 800587e:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8005882:	fa93 f3a3 	rbit	r3, r3
 8005886:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 800588a:	4bb2      	ldr	r3, [pc, #712]	; (8005b54 <HAL_RCC_OscConfig+0x650>)
 800588c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800588e:	2202      	movs	r2, #2
 8005890:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8005894:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8005898:	fa92 f2a2 	rbit	r2, r2
 800589c:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 80058a0:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 80058a4:	fab2 f282 	clz	r2, r2
 80058a8:	b2d2      	uxtb	r2, r2
 80058aa:	f042 0220 	orr.w	r2, r2, #32
 80058ae:	b2d2      	uxtb	r2, r2
 80058b0:	f002 021f 	and.w	r2, r2, #31
 80058b4:	2101      	movs	r1, #1
 80058b6:	fa01 f202 	lsl.w	r2, r1, r2
 80058ba:	4013      	ands	r3, r2
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d007      	beq.n	80058d0 <HAL_RCC_OscConfig+0x3cc>
 80058c0:	1d3b      	adds	r3, r7, #4
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	691b      	ldr	r3, [r3, #16]
 80058c6:	2b01      	cmp	r3, #1
 80058c8:	d002      	beq.n	80058d0 <HAL_RCC_OscConfig+0x3cc>
      {
        return HAL_ERROR;
 80058ca:	2301      	movs	r3, #1
 80058cc:	f000 bd1b 	b.w	8006306 <HAL_RCC_OscConfig+0xe02>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80058d0:	4ba0      	ldr	r3, [pc, #640]	; (8005b54 <HAL_RCC_OscConfig+0x650>)
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80058d8:	1d3b      	adds	r3, r7, #4
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	695b      	ldr	r3, [r3, #20]
 80058de:	21f8      	movs	r1, #248	; 0xf8
 80058e0:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80058e4:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 80058e8:	fa91 f1a1 	rbit	r1, r1
 80058ec:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 80058f0:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 80058f4:	fab1 f181 	clz	r1, r1
 80058f8:	b2c9      	uxtb	r1, r1
 80058fa:	408b      	lsls	r3, r1
 80058fc:	4995      	ldr	r1, [pc, #596]	; (8005b54 <HAL_RCC_OscConfig+0x650>)
 80058fe:	4313      	orrs	r3, r2
 8005900:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005902:	e0f5      	b.n	8005af0 <HAL_RCC_OscConfig+0x5ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005904:	1d3b      	adds	r3, r7, #4
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	691b      	ldr	r3, [r3, #16]
 800590a:	2b00      	cmp	r3, #0
 800590c:	f000 8085 	beq.w	8005a1a <HAL_RCC_OscConfig+0x516>
 8005910:	2301      	movs	r3, #1
 8005912:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005916:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 800591a:	fa93 f3a3 	rbit	r3, r3
 800591e:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8005922:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005926:	fab3 f383 	clz	r3, r3
 800592a:	b2db      	uxtb	r3, r3
 800592c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8005930:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8005934:	009b      	lsls	r3, r3, #2
 8005936:	461a      	mov	r2, r3
 8005938:	2301      	movs	r3, #1
 800593a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800593c:	f7fd fab2 	bl	8002ea4 <HAL_GetTick>
 8005940:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005944:	e00a      	b.n	800595c <HAL_RCC_OscConfig+0x458>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005946:	f7fd faad 	bl	8002ea4 <HAL_GetTick>
 800594a:	4602      	mov	r2, r0
 800594c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005950:	1ad3      	subs	r3, r2, r3
 8005952:	2b02      	cmp	r3, #2
 8005954:	d902      	bls.n	800595c <HAL_RCC_OscConfig+0x458>
          {
            return HAL_TIMEOUT;
 8005956:	2303      	movs	r3, #3
 8005958:	f000 bcd5 	b.w	8006306 <HAL_RCC_OscConfig+0xe02>
 800595c:	2302      	movs	r3, #2
 800595e:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005962:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8005966:	fa93 f3a3 	rbit	r3, r3
 800596a:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 800596e:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005972:	fab3 f383 	clz	r3, r3
 8005976:	b2db      	uxtb	r3, r3
 8005978:	095b      	lsrs	r3, r3, #5
 800597a:	b2db      	uxtb	r3, r3
 800597c:	f043 0301 	orr.w	r3, r3, #1
 8005980:	b2db      	uxtb	r3, r3
 8005982:	2b01      	cmp	r3, #1
 8005984:	d102      	bne.n	800598c <HAL_RCC_OscConfig+0x488>
 8005986:	4b73      	ldr	r3, [pc, #460]	; (8005b54 <HAL_RCC_OscConfig+0x650>)
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	e013      	b.n	80059b4 <HAL_RCC_OscConfig+0x4b0>
 800598c:	2302      	movs	r3, #2
 800598e:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005992:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8005996:	fa93 f3a3 	rbit	r3, r3
 800599a:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 800599e:	2302      	movs	r3, #2
 80059a0:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 80059a4:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 80059a8:	fa93 f3a3 	rbit	r3, r3
 80059ac:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 80059b0:	4b68      	ldr	r3, [pc, #416]	; (8005b54 <HAL_RCC_OscConfig+0x650>)
 80059b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059b4:	2202      	movs	r2, #2
 80059b6:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 80059ba:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 80059be:	fa92 f2a2 	rbit	r2, r2
 80059c2:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 80059c6:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 80059ca:	fab2 f282 	clz	r2, r2
 80059ce:	b2d2      	uxtb	r2, r2
 80059d0:	f042 0220 	orr.w	r2, r2, #32
 80059d4:	b2d2      	uxtb	r2, r2
 80059d6:	f002 021f 	and.w	r2, r2, #31
 80059da:	2101      	movs	r1, #1
 80059dc:	fa01 f202 	lsl.w	r2, r1, r2
 80059e0:	4013      	ands	r3, r2
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d0af      	beq.n	8005946 <HAL_RCC_OscConfig+0x442>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80059e6:	4b5b      	ldr	r3, [pc, #364]	; (8005b54 <HAL_RCC_OscConfig+0x650>)
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80059ee:	1d3b      	adds	r3, r7, #4
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	695b      	ldr	r3, [r3, #20]
 80059f4:	21f8      	movs	r1, #248	; 0xf8
 80059f6:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80059fa:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 80059fe:	fa91 f1a1 	rbit	r1, r1
 8005a02:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8005a06:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8005a0a:	fab1 f181 	clz	r1, r1
 8005a0e:	b2c9      	uxtb	r1, r1
 8005a10:	408b      	lsls	r3, r1
 8005a12:	4950      	ldr	r1, [pc, #320]	; (8005b54 <HAL_RCC_OscConfig+0x650>)
 8005a14:	4313      	orrs	r3, r2
 8005a16:	600b      	str	r3, [r1, #0]
 8005a18:	e06a      	b.n	8005af0 <HAL_RCC_OscConfig+0x5ec>
 8005a1a:	2301      	movs	r3, #1
 8005a1c:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005a20:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8005a24:	fa93 f3a3 	rbit	r3, r3
 8005a28:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8005a2c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005a30:	fab3 f383 	clz	r3, r3
 8005a34:	b2db      	uxtb	r3, r3
 8005a36:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8005a3a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8005a3e:	009b      	lsls	r3, r3, #2
 8005a40:	461a      	mov	r2, r3
 8005a42:	2300      	movs	r3, #0
 8005a44:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005a46:	f7fd fa2d 	bl	8002ea4 <HAL_GetTick>
 8005a4a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005a4e:	e00a      	b.n	8005a66 <HAL_RCC_OscConfig+0x562>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005a50:	f7fd fa28 	bl	8002ea4 <HAL_GetTick>
 8005a54:	4602      	mov	r2, r0
 8005a56:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005a5a:	1ad3      	subs	r3, r2, r3
 8005a5c:	2b02      	cmp	r3, #2
 8005a5e:	d902      	bls.n	8005a66 <HAL_RCC_OscConfig+0x562>
          {
            return HAL_TIMEOUT;
 8005a60:	2303      	movs	r3, #3
 8005a62:	f000 bc50 	b.w	8006306 <HAL_RCC_OscConfig+0xe02>
 8005a66:	2302      	movs	r3, #2
 8005a68:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005a6c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8005a70:	fa93 f3a3 	rbit	r3, r3
 8005a74:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8005a78:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005a7c:	fab3 f383 	clz	r3, r3
 8005a80:	b2db      	uxtb	r3, r3
 8005a82:	095b      	lsrs	r3, r3, #5
 8005a84:	b2db      	uxtb	r3, r3
 8005a86:	f043 0301 	orr.w	r3, r3, #1
 8005a8a:	b2db      	uxtb	r3, r3
 8005a8c:	2b01      	cmp	r3, #1
 8005a8e:	d102      	bne.n	8005a96 <HAL_RCC_OscConfig+0x592>
 8005a90:	4b30      	ldr	r3, [pc, #192]	; (8005b54 <HAL_RCC_OscConfig+0x650>)
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	e013      	b.n	8005abe <HAL_RCC_OscConfig+0x5ba>
 8005a96:	2302      	movs	r3, #2
 8005a98:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005a9c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005aa0:	fa93 f3a3 	rbit	r3, r3
 8005aa4:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8005aa8:	2302      	movs	r3, #2
 8005aaa:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8005aae:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8005ab2:	fa93 f3a3 	rbit	r3, r3
 8005ab6:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8005aba:	4b26      	ldr	r3, [pc, #152]	; (8005b54 <HAL_RCC_OscConfig+0x650>)
 8005abc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005abe:	2202      	movs	r2, #2
 8005ac0:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8005ac4:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8005ac8:	fa92 f2a2 	rbit	r2, r2
 8005acc:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8005ad0:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8005ad4:	fab2 f282 	clz	r2, r2
 8005ad8:	b2d2      	uxtb	r2, r2
 8005ada:	f042 0220 	orr.w	r2, r2, #32
 8005ade:	b2d2      	uxtb	r2, r2
 8005ae0:	f002 021f 	and.w	r2, r2, #31
 8005ae4:	2101      	movs	r1, #1
 8005ae6:	fa01 f202 	lsl.w	r2, r1, r2
 8005aea:	4013      	ands	r3, r2
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d1af      	bne.n	8005a50 <HAL_RCC_OscConfig+0x54c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005af0:	1d3b      	adds	r3, r7, #4
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	f003 0308 	and.w	r3, r3, #8
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	f000 80da 	beq.w	8005cb4 <HAL_RCC_OscConfig+0x7b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005b00:	1d3b      	adds	r3, r7, #4
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	699b      	ldr	r3, [r3, #24]
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d069      	beq.n	8005bde <HAL_RCC_OscConfig+0x6da>
 8005b0a:	2301      	movs	r3, #1
 8005b0c:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005b10:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8005b14:	fa93 f3a3 	rbit	r3, r3
 8005b18:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8005b1c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005b20:	fab3 f383 	clz	r3, r3
 8005b24:	b2db      	uxtb	r3, r3
 8005b26:	461a      	mov	r2, r3
 8005b28:	4b0b      	ldr	r3, [pc, #44]	; (8005b58 <HAL_RCC_OscConfig+0x654>)
 8005b2a:	4413      	add	r3, r2
 8005b2c:	009b      	lsls	r3, r3, #2
 8005b2e:	461a      	mov	r2, r3
 8005b30:	2301      	movs	r3, #1
 8005b32:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005b34:	f7fd f9b6 	bl	8002ea4 <HAL_GetTick>
 8005b38:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005b3c:	e00e      	b.n	8005b5c <HAL_RCC_OscConfig+0x658>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005b3e:	f7fd f9b1 	bl	8002ea4 <HAL_GetTick>
 8005b42:	4602      	mov	r2, r0
 8005b44:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005b48:	1ad3      	subs	r3, r2, r3
 8005b4a:	2b02      	cmp	r3, #2
 8005b4c:	d906      	bls.n	8005b5c <HAL_RCC_OscConfig+0x658>
        {
          return HAL_TIMEOUT;
 8005b4e:	2303      	movs	r3, #3
 8005b50:	e3d9      	b.n	8006306 <HAL_RCC_OscConfig+0xe02>
 8005b52:	bf00      	nop
 8005b54:	40021000 	.word	0x40021000
 8005b58:	10908120 	.word	0x10908120
 8005b5c:	2302      	movs	r3, #2
 8005b5e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005b62:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005b66:	fa93 f3a3 	rbit	r3, r3
 8005b6a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8005b6e:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8005b72:	2202      	movs	r2, #2
 8005b74:	601a      	str	r2, [r3, #0]
 8005b76:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	fa93 f2a3 	rbit	r2, r3
 8005b80:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8005b84:	601a      	str	r2, [r3, #0]
 8005b86:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8005b8a:	2202      	movs	r2, #2
 8005b8c:	601a      	str	r2, [r3, #0]
 8005b8e:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	fa93 f2a3 	rbit	r2, r3
 8005b98:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8005b9c:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005b9e:	4ba5      	ldr	r3, [pc, #660]	; (8005e34 <HAL_RCC_OscConfig+0x930>)
 8005ba0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005ba2:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8005ba6:	2102      	movs	r1, #2
 8005ba8:	6019      	str	r1, [r3, #0]
 8005baa:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	fa93 f1a3 	rbit	r1, r3
 8005bb4:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8005bb8:	6019      	str	r1, [r3, #0]
  return result;
 8005bba:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	fab3 f383 	clz	r3, r3
 8005bc4:	b2db      	uxtb	r3, r3
 8005bc6:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8005bca:	b2db      	uxtb	r3, r3
 8005bcc:	f003 031f 	and.w	r3, r3, #31
 8005bd0:	2101      	movs	r1, #1
 8005bd2:	fa01 f303 	lsl.w	r3, r1, r3
 8005bd6:	4013      	ands	r3, r2
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d0b0      	beq.n	8005b3e <HAL_RCC_OscConfig+0x63a>
 8005bdc:	e06a      	b.n	8005cb4 <HAL_RCC_OscConfig+0x7b0>
 8005bde:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8005be2:	2201      	movs	r2, #1
 8005be4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005be6:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	fa93 f2a3 	rbit	r2, r3
 8005bf0:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8005bf4:	601a      	str	r2, [r3, #0]
  return result;
 8005bf6:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8005bfa:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005bfc:	fab3 f383 	clz	r3, r3
 8005c00:	b2db      	uxtb	r3, r3
 8005c02:	461a      	mov	r2, r3
 8005c04:	4b8c      	ldr	r3, [pc, #560]	; (8005e38 <HAL_RCC_OscConfig+0x934>)
 8005c06:	4413      	add	r3, r2
 8005c08:	009b      	lsls	r3, r3, #2
 8005c0a:	461a      	mov	r2, r3
 8005c0c:	2300      	movs	r3, #0
 8005c0e:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005c10:	f7fd f948 	bl	8002ea4 <HAL_GetTick>
 8005c14:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005c18:	e009      	b.n	8005c2e <HAL_RCC_OscConfig+0x72a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005c1a:	f7fd f943 	bl	8002ea4 <HAL_GetTick>
 8005c1e:	4602      	mov	r2, r0
 8005c20:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005c24:	1ad3      	subs	r3, r2, r3
 8005c26:	2b02      	cmp	r3, #2
 8005c28:	d901      	bls.n	8005c2e <HAL_RCC_OscConfig+0x72a>
        {
          return HAL_TIMEOUT;
 8005c2a:	2303      	movs	r3, #3
 8005c2c:	e36b      	b.n	8006306 <HAL_RCC_OscConfig+0xe02>
 8005c2e:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8005c32:	2202      	movs	r2, #2
 8005c34:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005c36:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	fa93 f2a3 	rbit	r2, r3
 8005c40:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8005c44:	601a      	str	r2, [r3, #0]
 8005c46:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8005c4a:	2202      	movs	r2, #2
 8005c4c:	601a      	str	r2, [r3, #0]
 8005c4e:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	fa93 f2a3 	rbit	r2, r3
 8005c58:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8005c5c:	601a      	str	r2, [r3, #0]
 8005c5e:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8005c62:	2202      	movs	r2, #2
 8005c64:	601a      	str	r2, [r3, #0]
 8005c66:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	fa93 f2a3 	rbit	r2, r3
 8005c70:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8005c74:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005c76:	4b6f      	ldr	r3, [pc, #444]	; (8005e34 <HAL_RCC_OscConfig+0x930>)
 8005c78:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005c7a:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8005c7e:	2102      	movs	r1, #2
 8005c80:	6019      	str	r1, [r3, #0]
 8005c82:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	fa93 f1a3 	rbit	r1, r3
 8005c8c:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8005c90:	6019      	str	r1, [r3, #0]
  return result;
 8005c92:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	fab3 f383 	clz	r3, r3
 8005c9c:	b2db      	uxtb	r3, r3
 8005c9e:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8005ca2:	b2db      	uxtb	r3, r3
 8005ca4:	f003 031f 	and.w	r3, r3, #31
 8005ca8:	2101      	movs	r1, #1
 8005caa:	fa01 f303 	lsl.w	r3, r1, r3
 8005cae:	4013      	ands	r3, r2
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d1b2      	bne.n	8005c1a <HAL_RCC_OscConfig+0x716>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005cb4:	1d3b      	adds	r3, r7, #4
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	f003 0304 	and.w	r3, r3, #4
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	f000 8158 	beq.w	8005f74 <HAL_RCC_OscConfig+0xa70>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005cc4:	2300      	movs	r3, #0
 8005cc6:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005cca:	4b5a      	ldr	r3, [pc, #360]	; (8005e34 <HAL_RCC_OscConfig+0x930>)
 8005ccc:	69db      	ldr	r3, [r3, #28]
 8005cce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d112      	bne.n	8005cfc <HAL_RCC_OscConfig+0x7f8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005cd6:	4b57      	ldr	r3, [pc, #348]	; (8005e34 <HAL_RCC_OscConfig+0x930>)
 8005cd8:	69db      	ldr	r3, [r3, #28]
 8005cda:	4a56      	ldr	r2, [pc, #344]	; (8005e34 <HAL_RCC_OscConfig+0x930>)
 8005cdc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005ce0:	61d3      	str	r3, [r2, #28]
 8005ce2:	4b54      	ldr	r3, [pc, #336]	; (8005e34 <HAL_RCC_OscConfig+0x930>)
 8005ce4:	69db      	ldr	r3, [r3, #28]
 8005ce6:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8005cea:	f107 0308 	add.w	r3, r7, #8
 8005cee:	601a      	str	r2, [r3, #0]
 8005cf0:	f107 0308 	add.w	r3, r7, #8
 8005cf4:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8005cf6:	2301      	movs	r3, #1
 8005cf8:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005cfc:	4b4f      	ldr	r3, [pc, #316]	; (8005e3c <HAL_RCC_OscConfig+0x938>)
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d11a      	bne.n	8005d3e <HAL_RCC_OscConfig+0x83a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005d08:	4b4c      	ldr	r3, [pc, #304]	; (8005e3c <HAL_RCC_OscConfig+0x938>)
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	4a4b      	ldr	r2, [pc, #300]	; (8005e3c <HAL_RCC_OscConfig+0x938>)
 8005d0e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005d12:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005d14:	f7fd f8c6 	bl	8002ea4 <HAL_GetTick>
 8005d18:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005d1c:	e009      	b.n	8005d32 <HAL_RCC_OscConfig+0x82e>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005d1e:	f7fd f8c1 	bl	8002ea4 <HAL_GetTick>
 8005d22:	4602      	mov	r2, r0
 8005d24:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005d28:	1ad3      	subs	r3, r2, r3
 8005d2a:	2b64      	cmp	r3, #100	; 0x64
 8005d2c:	d901      	bls.n	8005d32 <HAL_RCC_OscConfig+0x82e>
        {
          return HAL_TIMEOUT;
 8005d2e:	2303      	movs	r3, #3
 8005d30:	e2e9      	b.n	8006306 <HAL_RCC_OscConfig+0xe02>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005d32:	4b42      	ldr	r3, [pc, #264]	; (8005e3c <HAL_RCC_OscConfig+0x938>)
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d0ef      	beq.n	8005d1e <HAL_RCC_OscConfig+0x81a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005d3e:	1d3b      	adds	r3, r7, #4
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	68db      	ldr	r3, [r3, #12]
 8005d44:	2b01      	cmp	r3, #1
 8005d46:	d106      	bne.n	8005d56 <HAL_RCC_OscConfig+0x852>
 8005d48:	4b3a      	ldr	r3, [pc, #232]	; (8005e34 <HAL_RCC_OscConfig+0x930>)
 8005d4a:	6a1b      	ldr	r3, [r3, #32]
 8005d4c:	4a39      	ldr	r2, [pc, #228]	; (8005e34 <HAL_RCC_OscConfig+0x930>)
 8005d4e:	f043 0301 	orr.w	r3, r3, #1
 8005d52:	6213      	str	r3, [r2, #32]
 8005d54:	e02f      	b.n	8005db6 <HAL_RCC_OscConfig+0x8b2>
 8005d56:	1d3b      	adds	r3, r7, #4
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	68db      	ldr	r3, [r3, #12]
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d10c      	bne.n	8005d7a <HAL_RCC_OscConfig+0x876>
 8005d60:	4b34      	ldr	r3, [pc, #208]	; (8005e34 <HAL_RCC_OscConfig+0x930>)
 8005d62:	6a1b      	ldr	r3, [r3, #32]
 8005d64:	4a33      	ldr	r2, [pc, #204]	; (8005e34 <HAL_RCC_OscConfig+0x930>)
 8005d66:	f023 0301 	bic.w	r3, r3, #1
 8005d6a:	6213      	str	r3, [r2, #32]
 8005d6c:	4b31      	ldr	r3, [pc, #196]	; (8005e34 <HAL_RCC_OscConfig+0x930>)
 8005d6e:	6a1b      	ldr	r3, [r3, #32]
 8005d70:	4a30      	ldr	r2, [pc, #192]	; (8005e34 <HAL_RCC_OscConfig+0x930>)
 8005d72:	f023 0304 	bic.w	r3, r3, #4
 8005d76:	6213      	str	r3, [r2, #32]
 8005d78:	e01d      	b.n	8005db6 <HAL_RCC_OscConfig+0x8b2>
 8005d7a:	1d3b      	adds	r3, r7, #4
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	68db      	ldr	r3, [r3, #12]
 8005d80:	2b05      	cmp	r3, #5
 8005d82:	d10c      	bne.n	8005d9e <HAL_RCC_OscConfig+0x89a>
 8005d84:	4b2b      	ldr	r3, [pc, #172]	; (8005e34 <HAL_RCC_OscConfig+0x930>)
 8005d86:	6a1b      	ldr	r3, [r3, #32]
 8005d88:	4a2a      	ldr	r2, [pc, #168]	; (8005e34 <HAL_RCC_OscConfig+0x930>)
 8005d8a:	f043 0304 	orr.w	r3, r3, #4
 8005d8e:	6213      	str	r3, [r2, #32]
 8005d90:	4b28      	ldr	r3, [pc, #160]	; (8005e34 <HAL_RCC_OscConfig+0x930>)
 8005d92:	6a1b      	ldr	r3, [r3, #32]
 8005d94:	4a27      	ldr	r2, [pc, #156]	; (8005e34 <HAL_RCC_OscConfig+0x930>)
 8005d96:	f043 0301 	orr.w	r3, r3, #1
 8005d9a:	6213      	str	r3, [r2, #32]
 8005d9c:	e00b      	b.n	8005db6 <HAL_RCC_OscConfig+0x8b2>
 8005d9e:	4b25      	ldr	r3, [pc, #148]	; (8005e34 <HAL_RCC_OscConfig+0x930>)
 8005da0:	6a1b      	ldr	r3, [r3, #32]
 8005da2:	4a24      	ldr	r2, [pc, #144]	; (8005e34 <HAL_RCC_OscConfig+0x930>)
 8005da4:	f023 0301 	bic.w	r3, r3, #1
 8005da8:	6213      	str	r3, [r2, #32]
 8005daa:	4b22      	ldr	r3, [pc, #136]	; (8005e34 <HAL_RCC_OscConfig+0x930>)
 8005dac:	6a1b      	ldr	r3, [r3, #32]
 8005dae:	4a21      	ldr	r2, [pc, #132]	; (8005e34 <HAL_RCC_OscConfig+0x930>)
 8005db0:	f023 0304 	bic.w	r3, r3, #4
 8005db4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005db6:	1d3b      	adds	r3, r7, #4
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	68db      	ldr	r3, [r3, #12]
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d06b      	beq.n	8005e98 <HAL_RCC_OscConfig+0x994>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005dc0:	f7fd f870 	bl	8002ea4 <HAL_GetTick>
 8005dc4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005dc8:	e00b      	b.n	8005de2 <HAL_RCC_OscConfig+0x8de>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005dca:	f7fd f86b 	bl	8002ea4 <HAL_GetTick>
 8005dce:	4602      	mov	r2, r0
 8005dd0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005dd4:	1ad3      	subs	r3, r2, r3
 8005dd6:	f241 3288 	movw	r2, #5000	; 0x1388
 8005dda:	4293      	cmp	r3, r2
 8005ddc:	d901      	bls.n	8005de2 <HAL_RCC_OscConfig+0x8de>
        {
          return HAL_TIMEOUT;
 8005dde:	2303      	movs	r3, #3
 8005de0:	e291      	b.n	8006306 <HAL_RCC_OscConfig+0xe02>
 8005de2:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8005de6:	2202      	movs	r2, #2
 8005de8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005dea:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	fa93 f2a3 	rbit	r2, r3
 8005df4:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8005df8:	601a      	str	r2, [r3, #0]
 8005dfa:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8005dfe:	2202      	movs	r2, #2
 8005e00:	601a      	str	r2, [r3, #0]
 8005e02:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	fa93 f2a3 	rbit	r2, r3
 8005e0c:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8005e10:	601a      	str	r2, [r3, #0]
  return result;
 8005e12:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8005e16:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005e18:	fab3 f383 	clz	r3, r3
 8005e1c:	b2db      	uxtb	r3, r3
 8005e1e:	095b      	lsrs	r3, r3, #5
 8005e20:	b2db      	uxtb	r3, r3
 8005e22:	f043 0302 	orr.w	r3, r3, #2
 8005e26:	b2db      	uxtb	r3, r3
 8005e28:	2b02      	cmp	r3, #2
 8005e2a:	d109      	bne.n	8005e40 <HAL_RCC_OscConfig+0x93c>
 8005e2c:	4b01      	ldr	r3, [pc, #4]	; (8005e34 <HAL_RCC_OscConfig+0x930>)
 8005e2e:	6a1b      	ldr	r3, [r3, #32]
 8005e30:	e014      	b.n	8005e5c <HAL_RCC_OscConfig+0x958>
 8005e32:	bf00      	nop
 8005e34:	40021000 	.word	0x40021000
 8005e38:	10908120 	.word	0x10908120
 8005e3c:	40007000 	.word	0x40007000
 8005e40:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8005e44:	2202      	movs	r2, #2
 8005e46:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005e48:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	fa93 f2a3 	rbit	r2, r3
 8005e52:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8005e56:	601a      	str	r2, [r3, #0]
 8005e58:	4bbb      	ldr	r3, [pc, #748]	; (8006148 <HAL_RCC_OscConfig+0xc44>)
 8005e5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e5c:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8005e60:	2102      	movs	r1, #2
 8005e62:	6011      	str	r1, [r2, #0]
 8005e64:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8005e68:	6812      	ldr	r2, [r2, #0]
 8005e6a:	fa92 f1a2 	rbit	r1, r2
 8005e6e:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8005e72:	6011      	str	r1, [r2, #0]
  return result;
 8005e74:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8005e78:	6812      	ldr	r2, [r2, #0]
 8005e7a:	fab2 f282 	clz	r2, r2
 8005e7e:	b2d2      	uxtb	r2, r2
 8005e80:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005e84:	b2d2      	uxtb	r2, r2
 8005e86:	f002 021f 	and.w	r2, r2, #31
 8005e8a:	2101      	movs	r1, #1
 8005e8c:	fa01 f202 	lsl.w	r2, r1, r2
 8005e90:	4013      	ands	r3, r2
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d099      	beq.n	8005dca <HAL_RCC_OscConfig+0x8c6>
 8005e96:	e063      	b.n	8005f60 <HAL_RCC_OscConfig+0xa5c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005e98:	f7fd f804 	bl	8002ea4 <HAL_GetTick>
 8005e9c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005ea0:	e00b      	b.n	8005eba <HAL_RCC_OscConfig+0x9b6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005ea2:	f7fc ffff 	bl	8002ea4 <HAL_GetTick>
 8005ea6:	4602      	mov	r2, r0
 8005ea8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005eac:	1ad3      	subs	r3, r2, r3
 8005eae:	f241 3288 	movw	r2, #5000	; 0x1388
 8005eb2:	4293      	cmp	r3, r2
 8005eb4:	d901      	bls.n	8005eba <HAL_RCC_OscConfig+0x9b6>
        {
          return HAL_TIMEOUT;
 8005eb6:	2303      	movs	r3, #3
 8005eb8:	e225      	b.n	8006306 <HAL_RCC_OscConfig+0xe02>
 8005eba:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8005ebe:	2202      	movs	r2, #2
 8005ec0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005ec2:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	fa93 f2a3 	rbit	r2, r3
 8005ecc:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8005ed0:	601a      	str	r2, [r3, #0]
 8005ed2:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8005ed6:	2202      	movs	r2, #2
 8005ed8:	601a      	str	r2, [r3, #0]
 8005eda:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	fa93 f2a3 	rbit	r2, r3
 8005ee4:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8005ee8:	601a      	str	r2, [r3, #0]
  return result;
 8005eea:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8005eee:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005ef0:	fab3 f383 	clz	r3, r3
 8005ef4:	b2db      	uxtb	r3, r3
 8005ef6:	095b      	lsrs	r3, r3, #5
 8005ef8:	b2db      	uxtb	r3, r3
 8005efa:	f043 0302 	orr.w	r3, r3, #2
 8005efe:	b2db      	uxtb	r3, r3
 8005f00:	2b02      	cmp	r3, #2
 8005f02:	d102      	bne.n	8005f0a <HAL_RCC_OscConfig+0xa06>
 8005f04:	4b90      	ldr	r3, [pc, #576]	; (8006148 <HAL_RCC_OscConfig+0xc44>)
 8005f06:	6a1b      	ldr	r3, [r3, #32]
 8005f08:	e00d      	b.n	8005f26 <HAL_RCC_OscConfig+0xa22>
 8005f0a:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8005f0e:	2202      	movs	r2, #2
 8005f10:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005f12:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	fa93 f2a3 	rbit	r2, r3
 8005f1c:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8005f20:	601a      	str	r2, [r3, #0]
 8005f22:	4b89      	ldr	r3, [pc, #548]	; (8006148 <HAL_RCC_OscConfig+0xc44>)
 8005f24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f26:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8005f2a:	2102      	movs	r1, #2
 8005f2c:	6011      	str	r1, [r2, #0]
 8005f2e:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8005f32:	6812      	ldr	r2, [r2, #0]
 8005f34:	fa92 f1a2 	rbit	r1, r2
 8005f38:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8005f3c:	6011      	str	r1, [r2, #0]
  return result;
 8005f3e:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8005f42:	6812      	ldr	r2, [r2, #0]
 8005f44:	fab2 f282 	clz	r2, r2
 8005f48:	b2d2      	uxtb	r2, r2
 8005f4a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005f4e:	b2d2      	uxtb	r2, r2
 8005f50:	f002 021f 	and.w	r2, r2, #31
 8005f54:	2101      	movs	r1, #1
 8005f56:	fa01 f202 	lsl.w	r2, r1, r2
 8005f5a:	4013      	ands	r3, r2
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d1a0      	bne.n	8005ea2 <HAL_RCC_OscConfig+0x99e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8005f60:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8005f64:	2b01      	cmp	r3, #1
 8005f66:	d105      	bne.n	8005f74 <HAL_RCC_OscConfig+0xa70>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005f68:	4b77      	ldr	r3, [pc, #476]	; (8006148 <HAL_RCC_OscConfig+0xc44>)
 8005f6a:	69db      	ldr	r3, [r3, #28]
 8005f6c:	4a76      	ldr	r2, [pc, #472]	; (8006148 <HAL_RCC_OscConfig+0xc44>)
 8005f6e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005f72:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005f74:	1d3b      	adds	r3, r7, #4
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	69db      	ldr	r3, [r3, #28]
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	f000 81c2 	beq.w	8006304 <HAL_RCC_OscConfig+0xe00>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005f80:	4b71      	ldr	r3, [pc, #452]	; (8006148 <HAL_RCC_OscConfig+0xc44>)
 8005f82:	685b      	ldr	r3, [r3, #4]
 8005f84:	f003 030c 	and.w	r3, r3, #12
 8005f88:	2b08      	cmp	r3, #8
 8005f8a:	f000 819c 	beq.w	80062c6 <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005f8e:	1d3b      	adds	r3, r7, #4
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	69db      	ldr	r3, [r3, #28]
 8005f94:	2b02      	cmp	r3, #2
 8005f96:	f040 8114 	bne.w	80061c2 <HAL_RCC_OscConfig+0xcbe>
 8005f9a:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8005f9e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005fa2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005fa4:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	fa93 f2a3 	rbit	r2, r3
 8005fae:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8005fb2:	601a      	str	r2, [r3, #0]
  return result;
 8005fb4:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8005fb8:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005fba:	fab3 f383 	clz	r3, r3
 8005fbe:	b2db      	uxtb	r3, r3
 8005fc0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8005fc4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8005fc8:	009b      	lsls	r3, r3, #2
 8005fca:	461a      	mov	r2, r3
 8005fcc:	2300      	movs	r3, #0
 8005fce:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005fd0:	f7fc ff68 	bl	8002ea4 <HAL_GetTick>
 8005fd4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005fd8:	e009      	b.n	8005fee <HAL_RCC_OscConfig+0xaea>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005fda:	f7fc ff63 	bl	8002ea4 <HAL_GetTick>
 8005fde:	4602      	mov	r2, r0
 8005fe0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005fe4:	1ad3      	subs	r3, r2, r3
 8005fe6:	2b02      	cmp	r3, #2
 8005fe8:	d901      	bls.n	8005fee <HAL_RCC_OscConfig+0xaea>
          {
            return HAL_TIMEOUT;
 8005fea:	2303      	movs	r3, #3
 8005fec:	e18b      	b.n	8006306 <HAL_RCC_OscConfig+0xe02>
 8005fee:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8005ff2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005ff6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005ff8:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	fa93 f2a3 	rbit	r2, r3
 8006002:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8006006:	601a      	str	r2, [r3, #0]
  return result;
 8006008:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800600c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800600e:	fab3 f383 	clz	r3, r3
 8006012:	b2db      	uxtb	r3, r3
 8006014:	095b      	lsrs	r3, r3, #5
 8006016:	b2db      	uxtb	r3, r3
 8006018:	f043 0301 	orr.w	r3, r3, #1
 800601c:	b2db      	uxtb	r3, r3
 800601e:	2b01      	cmp	r3, #1
 8006020:	d102      	bne.n	8006028 <HAL_RCC_OscConfig+0xb24>
 8006022:	4b49      	ldr	r3, [pc, #292]	; (8006148 <HAL_RCC_OscConfig+0xc44>)
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	e01b      	b.n	8006060 <HAL_RCC_OscConfig+0xb5c>
 8006028:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800602c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006030:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006032:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	fa93 f2a3 	rbit	r2, r3
 800603c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8006040:	601a      	str	r2, [r3, #0]
 8006042:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8006046:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800604a:	601a      	str	r2, [r3, #0]
 800604c:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	fa93 f2a3 	rbit	r2, r3
 8006056:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800605a:	601a      	str	r2, [r3, #0]
 800605c:	4b3a      	ldr	r3, [pc, #232]	; (8006148 <HAL_RCC_OscConfig+0xc44>)
 800605e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006060:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8006064:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8006068:	6011      	str	r1, [r2, #0]
 800606a:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800606e:	6812      	ldr	r2, [r2, #0]
 8006070:	fa92 f1a2 	rbit	r1, r2
 8006074:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8006078:	6011      	str	r1, [r2, #0]
  return result;
 800607a:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 800607e:	6812      	ldr	r2, [r2, #0]
 8006080:	fab2 f282 	clz	r2, r2
 8006084:	b2d2      	uxtb	r2, r2
 8006086:	f042 0220 	orr.w	r2, r2, #32
 800608a:	b2d2      	uxtb	r2, r2
 800608c:	f002 021f 	and.w	r2, r2, #31
 8006090:	2101      	movs	r1, #1
 8006092:	fa01 f202 	lsl.w	r2, r1, r2
 8006096:	4013      	ands	r3, r2
 8006098:	2b00      	cmp	r3, #0
 800609a:	d19e      	bne.n	8005fda <HAL_RCC_OscConfig+0xad6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800609c:	4b2a      	ldr	r3, [pc, #168]	; (8006148 <HAL_RCC_OscConfig+0xc44>)
 800609e:	685b      	ldr	r3, [r3, #4]
 80060a0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80060a4:	1d3b      	adds	r3, r7, #4
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80060aa:	1d3b      	adds	r3, r7, #4
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	6a1b      	ldr	r3, [r3, #32]
 80060b0:	430b      	orrs	r3, r1
 80060b2:	4925      	ldr	r1, [pc, #148]	; (8006148 <HAL_RCC_OscConfig+0xc44>)
 80060b4:	4313      	orrs	r3, r2
 80060b6:	604b      	str	r3, [r1, #4]
 80060b8:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80060bc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80060c0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80060c2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	fa93 f2a3 	rbit	r2, r3
 80060cc:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80060d0:	601a      	str	r2, [r3, #0]
  return result;
 80060d2:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80060d6:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80060d8:	fab3 f383 	clz	r3, r3
 80060dc:	b2db      	uxtb	r3, r3
 80060de:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80060e2:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80060e6:	009b      	lsls	r3, r3, #2
 80060e8:	461a      	mov	r2, r3
 80060ea:	2301      	movs	r3, #1
 80060ec:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80060ee:	f7fc fed9 	bl	8002ea4 <HAL_GetTick>
 80060f2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80060f6:	e009      	b.n	800610c <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80060f8:	f7fc fed4 	bl	8002ea4 <HAL_GetTick>
 80060fc:	4602      	mov	r2, r0
 80060fe:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8006102:	1ad3      	subs	r3, r2, r3
 8006104:	2b02      	cmp	r3, #2
 8006106:	d901      	bls.n	800610c <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 8006108:	2303      	movs	r3, #3
 800610a:	e0fc      	b.n	8006306 <HAL_RCC_OscConfig+0xe02>
 800610c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8006110:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006114:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006116:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	fa93 f2a3 	rbit	r2, r3
 8006120:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8006124:	601a      	str	r2, [r3, #0]
  return result;
 8006126:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800612a:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800612c:	fab3 f383 	clz	r3, r3
 8006130:	b2db      	uxtb	r3, r3
 8006132:	095b      	lsrs	r3, r3, #5
 8006134:	b2db      	uxtb	r3, r3
 8006136:	f043 0301 	orr.w	r3, r3, #1
 800613a:	b2db      	uxtb	r3, r3
 800613c:	2b01      	cmp	r3, #1
 800613e:	d105      	bne.n	800614c <HAL_RCC_OscConfig+0xc48>
 8006140:	4b01      	ldr	r3, [pc, #4]	; (8006148 <HAL_RCC_OscConfig+0xc44>)
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	e01e      	b.n	8006184 <HAL_RCC_OscConfig+0xc80>
 8006146:	bf00      	nop
 8006148:	40021000 	.word	0x40021000
 800614c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8006150:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006154:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006156:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	fa93 f2a3 	rbit	r2, r3
 8006160:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8006164:	601a      	str	r2, [r3, #0]
 8006166:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800616a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800616e:	601a      	str	r2, [r3, #0]
 8006170:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	fa93 f2a3 	rbit	r2, r3
 800617a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800617e:	601a      	str	r2, [r3, #0]
 8006180:	4b63      	ldr	r3, [pc, #396]	; (8006310 <HAL_RCC_OscConfig+0xe0c>)
 8006182:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006184:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8006188:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800618c:	6011      	str	r1, [r2, #0]
 800618e:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8006192:	6812      	ldr	r2, [r2, #0]
 8006194:	fa92 f1a2 	rbit	r1, r2
 8006198:	f107 0234 	add.w	r2, r7, #52	; 0x34
 800619c:	6011      	str	r1, [r2, #0]
  return result;
 800619e:	f107 0234 	add.w	r2, r7, #52	; 0x34
 80061a2:	6812      	ldr	r2, [r2, #0]
 80061a4:	fab2 f282 	clz	r2, r2
 80061a8:	b2d2      	uxtb	r2, r2
 80061aa:	f042 0220 	orr.w	r2, r2, #32
 80061ae:	b2d2      	uxtb	r2, r2
 80061b0:	f002 021f 	and.w	r2, r2, #31
 80061b4:	2101      	movs	r1, #1
 80061b6:	fa01 f202 	lsl.w	r2, r1, r2
 80061ba:	4013      	ands	r3, r2
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d09b      	beq.n	80060f8 <HAL_RCC_OscConfig+0xbf4>
 80061c0:	e0a0      	b.n	8006304 <HAL_RCC_OscConfig+0xe00>
 80061c2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80061c6:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80061ca:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80061cc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	fa93 f2a3 	rbit	r2, r3
 80061d6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80061da:	601a      	str	r2, [r3, #0]
  return result;
 80061dc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80061e0:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80061e2:	fab3 f383 	clz	r3, r3
 80061e6:	b2db      	uxtb	r3, r3
 80061e8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80061ec:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80061f0:	009b      	lsls	r3, r3, #2
 80061f2:	461a      	mov	r2, r3
 80061f4:	2300      	movs	r3, #0
 80061f6:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80061f8:	f7fc fe54 	bl	8002ea4 <HAL_GetTick>
 80061fc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006200:	e009      	b.n	8006216 <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006202:	f7fc fe4f 	bl	8002ea4 <HAL_GetTick>
 8006206:	4602      	mov	r2, r0
 8006208:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800620c:	1ad3      	subs	r3, r2, r3
 800620e:	2b02      	cmp	r3, #2
 8006210:	d901      	bls.n	8006216 <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 8006212:	2303      	movs	r3, #3
 8006214:	e077      	b.n	8006306 <HAL_RCC_OscConfig+0xe02>
 8006216:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800621a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800621e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006220:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	fa93 f2a3 	rbit	r2, r3
 800622a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800622e:	601a      	str	r2, [r3, #0]
  return result;
 8006230:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006234:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006236:	fab3 f383 	clz	r3, r3
 800623a:	b2db      	uxtb	r3, r3
 800623c:	095b      	lsrs	r3, r3, #5
 800623e:	b2db      	uxtb	r3, r3
 8006240:	f043 0301 	orr.w	r3, r3, #1
 8006244:	b2db      	uxtb	r3, r3
 8006246:	2b01      	cmp	r3, #1
 8006248:	d102      	bne.n	8006250 <HAL_RCC_OscConfig+0xd4c>
 800624a:	4b31      	ldr	r3, [pc, #196]	; (8006310 <HAL_RCC_OscConfig+0xe0c>)
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	e01b      	b.n	8006288 <HAL_RCC_OscConfig+0xd84>
 8006250:	f107 0320 	add.w	r3, r7, #32
 8006254:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006258:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800625a:	f107 0320 	add.w	r3, r7, #32
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	fa93 f2a3 	rbit	r2, r3
 8006264:	f107 031c 	add.w	r3, r7, #28
 8006268:	601a      	str	r2, [r3, #0]
 800626a:	f107 0318 	add.w	r3, r7, #24
 800626e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006272:	601a      	str	r2, [r3, #0]
 8006274:	f107 0318 	add.w	r3, r7, #24
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	fa93 f2a3 	rbit	r2, r3
 800627e:	f107 0314 	add.w	r3, r7, #20
 8006282:	601a      	str	r2, [r3, #0]
 8006284:	4b22      	ldr	r3, [pc, #136]	; (8006310 <HAL_RCC_OscConfig+0xe0c>)
 8006286:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006288:	f107 0210 	add.w	r2, r7, #16
 800628c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8006290:	6011      	str	r1, [r2, #0]
 8006292:	f107 0210 	add.w	r2, r7, #16
 8006296:	6812      	ldr	r2, [r2, #0]
 8006298:	fa92 f1a2 	rbit	r1, r2
 800629c:	f107 020c 	add.w	r2, r7, #12
 80062a0:	6011      	str	r1, [r2, #0]
  return result;
 80062a2:	f107 020c 	add.w	r2, r7, #12
 80062a6:	6812      	ldr	r2, [r2, #0]
 80062a8:	fab2 f282 	clz	r2, r2
 80062ac:	b2d2      	uxtb	r2, r2
 80062ae:	f042 0220 	orr.w	r2, r2, #32
 80062b2:	b2d2      	uxtb	r2, r2
 80062b4:	f002 021f 	and.w	r2, r2, #31
 80062b8:	2101      	movs	r1, #1
 80062ba:	fa01 f202 	lsl.w	r2, r1, r2
 80062be:	4013      	ands	r3, r2
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d19e      	bne.n	8006202 <HAL_RCC_OscConfig+0xcfe>
 80062c4:	e01e      	b.n	8006304 <HAL_RCC_OscConfig+0xe00>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80062c6:	1d3b      	adds	r3, r7, #4
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	69db      	ldr	r3, [r3, #28]
 80062cc:	2b01      	cmp	r3, #1
 80062ce:	d101      	bne.n	80062d4 <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 80062d0:	2301      	movs	r3, #1
 80062d2:	e018      	b.n	8006306 <HAL_RCC_OscConfig+0xe02>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80062d4:	4b0e      	ldr	r3, [pc, #56]	; (8006310 <HAL_RCC_OscConfig+0xe0c>)
 80062d6:	685b      	ldr	r3, [r3, #4]
 80062d8:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80062dc:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80062e0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80062e4:	1d3b      	adds	r3, r7, #4
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	6a1b      	ldr	r3, [r3, #32]
 80062ea:	429a      	cmp	r2, r3
 80062ec:	d108      	bne.n	8006300 <HAL_RCC_OscConfig+0xdfc>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 80062ee:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80062f2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80062f6:	1d3b      	adds	r3, r7, #4
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80062fc:	429a      	cmp	r2, r3
 80062fe:	d001      	beq.n	8006304 <HAL_RCC_OscConfig+0xe00>
#endif
        {
          return HAL_ERROR;
 8006300:	2301      	movs	r3, #1
 8006302:	e000      	b.n	8006306 <HAL_RCC_OscConfig+0xe02>
        }
      }
    }
  }

  return HAL_OK;
 8006304:	2300      	movs	r3, #0
}
 8006306:	4618      	mov	r0, r3
 8006308:	f507 7700 	add.w	r7, r7, #512	; 0x200
 800630c:	46bd      	mov	sp, r7
 800630e:	bd80      	pop	{r7, pc}
 8006310:	40021000 	.word	0x40021000

08006314 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006314:	b580      	push	{r7, lr}
 8006316:	b09e      	sub	sp, #120	; 0x78
 8006318:	af00      	add	r7, sp, #0
 800631a:	6078      	str	r0, [r7, #4]
 800631c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800631e:	2300      	movs	r3, #0
 8006320:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	2b00      	cmp	r3, #0
 8006326:	d101      	bne.n	800632c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8006328:	2301      	movs	r3, #1
 800632a:	e162      	b.n	80065f2 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800632c:	4b90      	ldr	r3, [pc, #576]	; (8006570 <HAL_RCC_ClockConfig+0x25c>)
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	f003 0307 	and.w	r3, r3, #7
 8006334:	683a      	ldr	r2, [r7, #0]
 8006336:	429a      	cmp	r2, r3
 8006338:	d910      	bls.n	800635c <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800633a:	4b8d      	ldr	r3, [pc, #564]	; (8006570 <HAL_RCC_ClockConfig+0x25c>)
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	f023 0207 	bic.w	r2, r3, #7
 8006342:	498b      	ldr	r1, [pc, #556]	; (8006570 <HAL_RCC_ClockConfig+0x25c>)
 8006344:	683b      	ldr	r3, [r7, #0]
 8006346:	4313      	orrs	r3, r2
 8006348:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800634a:	4b89      	ldr	r3, [pc, #548]	; (8006570 <HAL_RCC_ClockConfig+0x25c>)
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	f003 0307 	and.w	r3, r3, #7
 8006352:	683a      	ldr	r2, [r7, #0]
 8006354:	429a      	cmp	r2, r3
 8006356:	d001      	beq.n	800635c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8006358:	2301      	movs	r3, #1
 800635a:	e14a      	b.n	80065f2 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	f003 0302 	and.w	r3, r3, #2
 8006364:	2b00      	cmp	r3, #0
 8006366:	d008      	beq.n	800637a <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006368:	4b82      	ldr	r3, [pc, #520]	; (8006574 <HAL_RCC_ClockConfig+0x260>)
 800636a:	685b      	ldr	r3, [r3, #4]
 800636c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	689b      	ldr	r3, [r3, #8]
 8006374:	497f      	ldr	r1, [pc, #508]	; (8006574 <HAL_RCC_ClockConfig+0x260>)
 8006376:	4313      	orrs	r3, r2
 8006378:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	f003 0301 	and.w	r3, r3, #1
 8006382:	2b00      	cmp	r3, #0
 8006384:	f000 80dc 	beq.w	8006540 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	685b      	ldr	r3, [r3, #4]
 800638c:	2b01      	cmp	r3, #1
 800638e:	d13c      	bne.n	800640a <HAL_RCC_ClockConfig+0xf6>
 8006390:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006394:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006396:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006398:	fa93 f3a3 	rbit	r3, r3
 800639c:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 800639e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80063a0:	fab3 f383 	clz	r3, r3
 80063a4:	b2db      	uxtb	r3, r3
 80063a6:	095b      	lsrs	r3, r3, #5
 80063a8:	b2db      	uxtb	r3, r3
 80063aa:	f043 0301 	orr.w	r3, r3, #1
 80063ae:	b2db      	uxtb	r3, r3
 80063b0:	2b01      	cmp	r3, #1
 80063b2:	d102      	bne.n	80063ba <HAL_RCC_ClockConfig+0xa6>
 80063b4:	4b6f      	ldr	r3, [pc, #444]	; (8006574 <HAL_RCC_ClockConfig+0x260>)
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	e00f      	b.n	80063da <HAL_RCC_ClockConfig+0xc6>
 80063ba:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80063be:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80063c0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80063c2:	fa93 f3a3 	rbit	r3, r3
 80063c6:	667b      	str	r3, [r7, #100]	; 0x64
 80063c8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80063cc:	663b      	str	r3, [r7, #96]	; 0x60
 80063ce:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80063d0:	fa93 f3a3 	rbit	r3, r3
 80063d4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80063d6:	4b67      	ldr	r3, [pc, #412]	; (8006574 <HAL_RCC_ClockConfig+0x260>)
 80063d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063da:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80063de:	65ba      	str	r2, [r7, #88]	; 0x58
 80063e0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80063e2:	fa92 f2a2 	rbit	r2, r2
 80063e6:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 80063e8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80063ea:	fab2 f282 	clz	r2, r2
 80063ee:	b2d2      	uxtb	r2, r2
 80063f0:	f042 0220 	orr.w	r2, r2, #32
 80063f4:	b2d2      	uxtb	r2, r2
 80063f6:	f002 021f 	and.w	r2, r2, #31
 80063fa:	2101      	movs	r1, #1
 80063fc:	fa01 f202 	lsl.w	r2, r1, r2
 8006400:	4013      	ands	r3, r2
 8006402:	2b00      	cmp	r3, #0
 8006404:	d17b      	bne.n	80064fe <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8006406:	2301      	movs	r3, #1
 8006408:	e0f3      	b.n	80065f2 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	685b      	ldr	r3, [r3, #4]
 800640e:	2b02      	cmp	r3, #2
 8006410:	d13c      	bne.n	800648c <HAL_RCC_ClockConfig+0x178>
 8006412:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006416:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006418:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800641a:	fa93 f3a3 	rbit	r3, r3
 800641e:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8006420:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006422:	fab3 f383 	clz	r3, r3
 8006426:	b2db      	uxtb	r3, r3
 8006428:	095b      	lsrs	r3, r3, #5
 800642a:	b2db      	uxtb	r3, r3
 800642c:	f043 0301 	orr.w	r3, r3, #1
 8006430:	b2db      	uxtb	r3, r3
 8006432:	2b01      	cmp	r3, #1
 8006434:	d102      	bne.n	800643c <HAL_RCC_ClockConfig+0x128>
 8006436:	4b4f      	ldr	r3, [pc, #316]	; (8006574 <HAL_RCC_ClockConfig+0x260>)
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	e00f      	b.n	800645c <HAL_RCC_ClockConfig+0x148>
 800643c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006440:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006442:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006444:	fa93 f3a3 	rbit	r3, r3
 8006448:	647b      	str	r3, [r7, #68]	; 0x44
 800644a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800644e:	643b      	str	r3, [r7, #64]	; 0x40
 8006450:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006452:	fa93 f3a3 	rbit	r3, r3
 8006456:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006458:	4b46      	ldr	r3, [pc, #280]	; (8006574 <HAL_RCC_ClockConfig+0x260>)
 800645a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800645c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006460:	63ba      	str	r2, [r7, #56]	; 0x38
 8006462:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006464:	fa92 f2a2 	rbit	r2, r2
 8006468:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 800646a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800646c:	fab2 f282 	clz	r2, r2
 8006470:	b2d2      	uxtb	r2, r2
 8006472:	f042 0220 	orr.w	r2, r2, #32
 8006476:	b2d2      	uxtb	r2, r2
 8006478:	f002 021f 	and.w	r2, r2, #31
 800647c:	2101      	movs	r1, #1
 800647e:	fa01 f202 	lsl.w	r2, r1, r2
 8006482:	4013      	ands	r3, r2
 8006484:	2b00      	cmp	r3, #0
 8006486:	d13a      	bne.n	80064fe <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8006488:	2301      	movs	r3, #1
 800648a:	e0b2      	b.n	80065f2 <HAL_RCC_ClockConfig+0x2de>
 800648c:	2302      	movs	r3, #2
 800648e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006490:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006492:	fa93 f3a3 	rbit	r3, r3
 8006496:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8006498:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800649a:	fab3 f383 	clz	r3, r3
 800649e:	b2db      	uxtb	r3, r3
 80064a0:	095b      	lsrs	r3, r3, #5
 80064a2:	b2db      	uxtb	r3, r3
 80064a4:	f043 0301 	orr.w	r3, r3, #1
 80064a8:	b2db      	uxtb	r3, r3
 80064aa:	2b01      	cmp	r3, #1
 80064ac:	d102      	bne.n	80064b4 <HAL_RCC_ClockConfig+0x1a0>
 80064ae:	4b31      	ldr	r3, [pc, #196]	; (8006574 <HAL_RCC_ClockConfig+0x260>)
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	e00d      	b.n	80064d0 <HAL_RCC_ClockConfig+0x1bc>
 80064b4:	2302      	movs	r3, #2
 80064b6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80064b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064ba:	fa93 f3a3 	rbit	r3, r3
 80064be:	627b      	str	r3, [r7, #36]	; 0x24
 80064c0:	2302      	movs	r3, #2
 80064c2:	623b      	str	r3, [r7, #32]
 80064c4:	6a3b      	ldr	r3, [r7, #32]
 80064c6:	fa93 f3a3 	rbit	r3, r3
 80064ca:	61fb      	str	r3, [r7, #28]
 80064cc:	4b29      	ldr	r3, [pc, #164]	; (8006574 <HAL_RCC_ClockConfig+0x260>)
 80064ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064d0:	2202      	movs	r2, #2
 80064d2:	61ba      	str	r2, [r7, #24]
 80064d4:	69ba      	ldr	r2, [r7, #24]
 80064d6:	fa92 f2a2 	rbit	r2, r2
 80064da:	617a      	str	r2, [r7, #20]
  return result;
 80064dc:	697a      	ldr	r2, [r7, #20]
 80064de:	fab2 f282 	clz	r2, r2
 80064e2:	b2d2      	uxtb	r2, r2
 80064e4:	f042 0220 	orr.w	r2, r2, #32
 80064e8:	b2d2      	uxtb	r2, r2
 80064ea:	f002 021f 	and.w	r2, r2, #31
 80064ee:	2101      	movs	r1, #1
 80064f0:	fa01 f202 	lsl.w	r2, r1, r2
 80064f4:	4013      	ands	r3, r2
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d101      	bne.n	80064fe <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80064fa:	2301      	movs	r3, #1
 80064fc:	e079      	b.n	80065f2 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80064fe:	4b1d      	ldr	r3, [pc, #116]	; (8006574 <HAL_RCC_ClockConfig+0x260>)
 8006500:	685b      	ldr	r3, [r3, #4]
 8006502:	f023 0203 	bic.w	r2, r3, #3
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	685b      	ldr	r3, [r3, #4]
 800650a:	491a      	ldr	r1, [pc, #104]	; (8006574 <HAL_RCC_ClockConfig+0x260>)
 800650c:	4313      	orrs	r3, r2
 800650e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006510:	f7fc fcc8 	bl	8002ea4 <HAL_GetTick>
 8006514:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006516:	e00a      	b.n	800652e <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006518:	f7fc fcc4 	bl	8002ea4 <HAL_GetTick>
 800651c:	4602      	mov	r2, r0
 800651e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006520:	1ad3      	subs	r3, r2, r3
 8006522:	f241 3288 	movw	r2, #5000	; 0x1388
 8006526:	4293      	cmp	r3, r2
 8006528:	d901      	bls.n	800652e <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 800652a:	2303      	movs	r3, #3
 800652c:	e061      	b.n	80065f2 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800652e:	4b11      	ldr	r3, [pc, #68]	; (8006574 <HAL_RCC_ClockConfig+0x260>)
 8006530:	685b      	ldr	r3, [r3, #4]
 8006532:	f003 020c 	and.w	r2, r3, #12
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	685b      	ldr	r3, [r3, #4]
 800653a:	009b      	lsls	r3, r3, #2
 800653c:	429a      	cmp	r2, r3
 800653e:	d1eb      	bne.n	8006518 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006540:	4b0b      	ldr	r3, [pc, #44]	; (8006570 <HAL_RCC_ClockConfig+0x25c>)
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	f003 0307 	and.w	r3, r3, #7
 8006548:	683a      	ldr	r2, [r7, #0]
 800654a:	429a      	cmp	r2, r3
 800654c:	d214      	bcs.n	8006578 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800654e:	4b08      	ldr	r3, [pc, #32]	; (8006570 <HAL_RCC_ClockConfig+0x25c>)
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	f023 0207 	bic.w	r2, r3, #7
 8006556:	4906      	ldr	r1, [pc, #24]	; (8006570 <HAL_RCC_ClockConfig+0x25c>)
 8006558:	683b      	ldr	r3, [r7, #0]
 800655a:	4313      	orrs	r3, r2
 800655c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800655e:	4b04      	ldr	r3, [pc, #16]	; (8006570 <HAL_RCC_ClockConfig+0x25c>)
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	f003 0307 	and.w	r3, r3, #7
 8006566:	683a      	ldr	r2, [r7, #0]
 8006568:	429a      	cmp	r2, r3
 800656a:	d005      	beq.n	8006578 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 800656c:	2301      	movs	r3, #1
 800656e:	e040      	b.n	80065f2 <HAL_RCC_ClockConfig+0x2de>
 8006570:	40022000 	.word	0x40022000
 8006574:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	f003 0304 	and.w	r3, r3, #4
 8006580:	2b00      	cmp	r3, #0
 8006582:	d008      	beq.n	8006596 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006584:	4b1d      	ldr	r3, [pc, #116]	; (80065fc <HAL_RCC_ClockConfig+0x2e8>)
 8006586:	685b      	ldr	r3, [r3, #4]
 8006588:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	68db      	ldr	r3, [r3, #12]
 8006590:	491a      	ldr	r1, [pc, #104]	; (80065fc <HAL_RCC_ClockConfig+0x2e8>)
 8006592:	4313      	orrs	r3, r2
 8006594:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	f003 0308 	and.w	r3, r3, #8
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d009      	beq.n	80065b6 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80065a2:	4b16      	ldr	r3, [pc, #88]	; (80065fc <HAL_RCC_ClockConfig+0x2e8>)
 80065a4:	685b      	ldr	r3, [r3, #4]
 80065a6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	691b      	ldr	r3, [r3, #16]
 80065ae:	00db      	lsls	r3, r3, #3
 80065b0:	4912      	ldr	r1, [pc, #72]	; (80065fc <HAL_RCC_ClockConfig+0x2e8>)
 80065b2:	4313      	orrs	r3, r2
 80065b4:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80065b6:	f000 f829 	bl	800660c <HAL_RCC_GetSysClockFreq>
 80065ba:	4601      	mov	r1, r0
 80065bc:	4b0f      	ldr	r3, [pc, #60]	; (80065fc <HAL_RCC_ClockConfig+0x2e8>)
 80065be:	685b      	ldr	r3, [r3, #4]
 80065c0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80065c4:	22f0      	movs	r2, #240	; 0xf0
 80065c6:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80065c8:	693a      	ldr	r2, [r7, #16]
 80065ca:	fa92 f2a2 	rbit	r2, r2
 80065ce:	60fa      	str	r2, [r7, #12]
  return result;
 80065d0:	68fa      	ldr	r2, [r7, #12]
 80065d2:	fab2 f282 	clz	r2, r2
 80065d6:	b2d2      	uxtb	r2, r2
 80065d8:	40d3      	lsrs	r3, r2
 80065da:	4a09      	ldr	r2, [pc, #36]	; (8006600 <HAL_RCC_ClockConfig+0x2ec>)
 80065dc:	5cd3      	ldrb	r3, [r2, r3]
 80065de:	fa21 f303 	lsr.w	r3, r1, r3
 80065e2:	4a08      	ldr	r2, [pc, #32]	; (8006604 <HAL_RCC_ClockConfig+0x2f0>)
 80065e4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 80065e6:	4b08      	ldr	r3, [pc, #32]	; (8006608 <HAL_RCC_ClockConfig+0x2f4>)
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	4618      	mov	r0, r3
 80065ec:	f7fc fc16 	bl	8002e1c <HAL_InitTick>
  
  return HAL_OK;
 80065f0:	2300      	movs	r3, #0
}
 80065f2:	4618      	mov	r0, r3
 80065f4:	3778      	adds	r7, #120	; 0x78
 80065f6:	46bd      	mov	sp, r7
 80065f8:	bd80      	pop	{r7, pc}
 80065fa:	bf00      	nop
 80065fc:	40021000 	.word	0x40021000
 8006600:	0800c6c0 	.word	0x0800c6c0
 8006604:	2000000c 	.word	0x2000000c
 8006608:	20000010 	.word	0x20000010

0800660c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800660c:	b480      	push	{r7}
 800660e:	b08b      	sub	sp, #44	; 0x2c
 8006610:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8006612:	2300      	movs	r3, #0
 8006614:	61fb      	str	r3, [r7, #28]
 8006616:	2300      	movs	r3, #0
 8006618:	61bb      	str	r3, [r7, #24]
 800661a:	2300      	movs	r3, #0
 800661c:	627b      	str	r3, [r7, #36]	; 0x24
 800661e:	2300      	movs	r3, #0
 8006620:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8006622:	2300      	movs	r3, #0
 8006624:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8006626:	4b29      	ldr	r3, [pc, #164]	; (80066cc <HAL_RCC_GetSysClockFreq+0xc0>)
 8006628:	685b      	ldr	r3, [r3, #4]
 800662a:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800662c:	69fb      	ldr	r3, [r7, #28]
 800662e:	f003 030c 	and.w	r3, r3, #12
 8006632:	2b04      	cmp	r3, #4
 8006634:	d002      	beq.n	800663c <HAL_RCC_GetSysClockFreq+0x30>
 8006636:	2b08      	cmp	r3, #8
 8006638:	d003      	beq.n	8006642 <HAL_RCC_GetSysClockFreq+0x36>
 800663a:	e03c      	b.n	80066b6 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800663c:	4b24      	ldr	r3, [pc, #144]	; (80066d0 <HAL_RCC_GetSysClockFreq+0xc4>)
 800663e:	623b      	str	r3, [r7, #32]
      break;
 8006640:	e03c      	b.n	80066bc <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8006642:	69fb      	ldr	r3, [r7, #28]
 8006644:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8006648:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 800664c:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800664e:	68ba      	ldr	r2, [r7, #8]
 8006650:	fa92 f2a2 	rbit	r2, r2
 8006654:	607a      	str	r2, [r7, #4]
  return result;
 8006656:	687a      	ldr	r2, [r7, #4]
 8006658:	fab2 f282 	clz	r2, r2
 800665c:	b2d2      	uxtb	r2, r2
 800665e:	40d3      	lsrs	r3, r2
 8006660:	4a1c      	ldr	r2, [pc, #112]	; (80066d4 <HAL_RCC_GetSysClockFreq+0xc8>)
 8006662:	5cd3      	ldrb	r3, [r2, r3]
 8006664:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8006666:	4b19      	ldr	r3, [pc, #100]	; (80066cc <HAL_RCC_GetSysClockFreq+0xc0>)
 8006668:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800666a:	f003 030f 	and.w	r3, r3, #15
 800666e:	220f      	movs	r2, #15
 8006670:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006672:	693a      	ldr	r2, [r7, #16]
 8006674:	fa92 f2a2 	rbit	r2, r2
 8006678:	60fa      	str	r2, [r7, #12]
  return result;
 800667a:	68fa      	ldr	r2, [r7, #12]
 800667c:	fab2 f282 	clz	r2, r2
 8006680:	b2d2      	uxtb	r2, r2
 8006682:	40d3      	lsrs	r3, r2
 8006684:	4a14      	ldr	r2, [pc, #80]	; (80066d8 <HAL_RCC_GetSysClockFreq+0xcc>)
 8006686:	5cd3      	ldrb	r3, [r2, r3]
 8006688:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 800668a:	69fb      	ldr	r3, [r7, #28]
 800668c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006690:	2b00      	cmp	r3, #0
 8006692:	d008      	beq.n	80066a6 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8006694:	4a0e      	ldr	r2, [pc, #56]	; (80066d0 <HAL_RCC_GetSysClockFreq+0xc4>)
 8006696:	69bb      	ldr	r3, [r7, #24]
 8006698:	fbb2 f2f3 	udiv	r2, r2, r3
 800669c:	697b      	ldr	r3, [r7, #20]
 800669e:	fb02 f303 	mul.w	r3, r2, r3
 80066a2:	627b      	str	r3, [r7, #36]	; 0x24
 80066a4:	e004      	b.n	80066b0 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80066a6:	697b      	ldr	r3, [r7, #20]
 80066a8:	4a0c      	ldr	r2, [pc, #48]	; (80066dc <HAL_RCC_GetSysClockFreq+0xd0>)
 80066aa:	fb02 f303 	mul.w	r3, r2, r3
 80066ae:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 80066b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066b2:	623b      	str	r3, [r7, #32]
      break;
 80066b4:	e002      	b.n	80066bc <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80066b6:	4b06      	ldr	r3, [pc, #24]	; (80066d0 <HAL_RCC_GetSysClockFreq+0xc4>)
 80066b8:	623b      	str	r3, [r7, #32]
      break;
 80066ba:	bf00      	nop
    }
  }
  return sysclockfreq;
 80066bc:	6a3b      	ldr	r3, [r7, #32]
}
 80066be:	4618      	mov	r0, r3
 80066c0:	372c      	adds	r7, #44	; 0x2c
 80066c2:	46bd      	mov	sp, r7
 80066c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066c8:	4770      	bx	lr
 80066ca:	bf00      	nop
 80066cc:	40021000 	.word	0x40021000
 80066d0:	007a1200 	.word	0x007a1200
 80066d4:	0800c6d0 	.word	0x0800c6d0
 80066d8:	0800c6e0 	.word	0x0800c6e0
 80066dc:	003d0900 	.word	0x003d0900

080066e0 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80066e0:	b580      	push	{r7, lr}
 80066e2:	b092      	sub	sp, #72	; 0x48
 80066e4:	af00      	add	r7, sp, #0
 80066e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80066e8:	2300      	movs	r3, #0
 80066ea:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 80066ec:	2300      	movs	r3, #0
 80066ee:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 80066f0:	2300      	movs	r3, #0
 80066f2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80066fe:	2b00      	cmp	r3, #0
 8006700:	f000 80d4 	beq.w	80068ac <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006704:	4b4e      	ldr	r3, [pc, #312]	; (8006840 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006706:	69db      	ldr	r3, [r3, #28]
 8006708:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800670c:	2b00      	cmp	r3, #0
 800670e:	d10e      	bne.n	800672e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006710:	4b4b      	ldr	r3, [pc, #300]	; (8006840 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006712:	69db      	ldr	r3, [r3, #28]
 8006714:	4a4a      	ldr	r2, [pc, #296]	; (8006840 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006716:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800671a:	61d3      	str	r3, [r2, #28]
 800671c:	4b48      	ldr	r3, [pc, #288]	; (8006840 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800671e:	69db      	ldr	r3, [r3, #28]
 8006720:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006724:	60bb      	str	r3, [r7, #8]
 8006726:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006728:	2301      	movs	r3, #1
 800672a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800672e:	4b45      	ldr	r3, [pc, #276]	; (8006844 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006736:	2b00      	cmp	r3, #0
 8006738:	d118      	bne.n	800676c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800673a:	4b42      	ldr	r3, [pc, #264]	; (8006844 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	4a41      	ldr	r2, [pc, #260]	; (8006844 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006740:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006744:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006746:	f7fc fbad 	bl	8002ea4 <HAL_GetTick>
 800674a:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800674c:	e008      	b.n	8006760 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800674e:	f7fc fba9 	bl	8002ea4 <HAL_GetTick>
 8006752:	4602      	mov	r2, r0
 8006754:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006756:	1ad3      	subs	r3, r2, r3
 8006758:	2b64      	cmp	r3, #100	; 0x64
 800675a:	d901      	bls.n	8006760 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 800675c:	2303      	movs	r3, #3
 800675e:	e169      	b.n	8006a34 <HAL_RCCEx_PeriphCLKConfig+0x354>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006760:	4b38      	ldr	r3, [pc, #224]	; (8006844 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006768:	2b00      	cmp	r3, #0
 800676a:	d0f0      	beq.n	800674e <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800676c:	4b34      	ldr	r3, [pc, #208]	; (8006840 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800676e:	6a1b      	ldr	r3, [r3, #32]
 8006770:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006774:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006776:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006778:	2b00      	cmp	r3, #0
 800677a:	f000 8084 	beq.w	8006886 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	685b      	ldr	r3, [r3, #4]
 8006782:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006786:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006788:	429a      	cmp	r2, r3
 800678a:	d07c      	beq.n	8006886 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800678c:	4b2c      	ldr	r3, [pc, #176]	; (8006840 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800678e:	6a1b      	ldr	r3, [r3, #32]
 8006790:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006794:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006796:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800679a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800679c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800679e:	fa93 f3a3 	rbit	r3, r3
 80067a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80067a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80067a6:	fab3 f383 	clz	r3, r3
 80067aa:	b2db      	uxtb	r3, r3
 80067ac:	461a      	mov	r2, r3
 80067ae:	4b26      	ldr	r3, [pc, #152]	; (8006848 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80067b0:	4413      	add	r3, r2
 80067b2:	009b      	lsls	r3, r3, #2
 80067b4:	461a      	mov	r2, r3
 80067b6:	2301      	movs	r3, #1
 80067b8:	6013      	str	r3, [r2, #0]
 80067ba:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80067be:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80067c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067c2:	fa93 f3a3 	rbit	r3, r3
 80067c6:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80067c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 80067ca:	fab3 f383 	clz	r3, r3
 80067ce:	b2db      	uxtb	r3, r3
 80067d0:	461a      	mov	r2, r3
 80067d2:	4b1d      	ldr	r3, [pc, #116]	; (8006848 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80067d4:	4413      	add	r3, r2
 80067d6:	009b      	lsls	r3, r3, #2
 80067d8:	461a      	mov	r2, r3
 80067da:	2300      	movs	r3, #0
 80067dc:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80067de:	4a18      	ldr	r2, [pc, #96]	; (8006840 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80067e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80067e2:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80067e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80067e6:	f003 0301 	and.w	r3, r3, #1
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d04b      	beq.n	8006886 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80067ee:	f7fc fb59 	bl	8002ea4 <HAL_GetTick>
 80067f2:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80067f4:	e00a      	b.n	800680c <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80067f6:	f7fc fb55 	bl	8002ea4 <HAL_GetTick>
 80067fa:	4602      	mov	r2, r0
 80067fc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80067fe:	1ad3      	subs	r3, r2, r3
 8006800:	f241 3288 	movw	r2, #5000	; 0x1388
 8006804:	4293      	cmp	r3, r2
 8006806:	d901      	bls.n	800680c <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8006808:	2303      	movs	r3, #3
 800680a:	e113      	b.n	8006a34 <HAL_RCCEx_PeriphCLKConfig+0x354>
 800680c:	2302      	movs	r3, #2
 800680e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006810:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006812:	fa93 f3a3 	rbit	r3, r3
 8006816:	627b      	str	r3, [r7, #36]	; 0x24
 8006818:	2302      	movs	r3, #2
 800681a:	623b      	str	r3, [r7, #32]
 800681c:	6a3b      	ldr	r3, [r7, #32]
 800681e:	fa93 f3a3 	rbit	r3, r3
 8006822:	61fb      	str	r3, [r7, #28]
  return result;
 8006824:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006826:	fab3 f383 	clz	r3, r3
 800682a:	b2db      	uxtb	r3, r3
 800682c:	095b      	lsrs	r3, r3, #5
 800682e:	b2db      	uxtb	r3, r3
 8006830:	f043 0302 	orr.w	r3, r3, #2
 8006834:	b2db      	uxtb	r3, r3
 8006836:	2b02      	cmp	r3, #2
 8006838:	d108      	bne.n	800684c <HAL_RCCEx_PeriphCLKConfig+0x16c>
 800683a:	4b01      	ldr	r3, [pc, #4]	; (8006840 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800683c:	6a1b      	ldr	r3, [r3, #32]
 800683e:	e00d      	b.n	800685c <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8006840:	40021000 	.word	0x40021000
 8006844:	40007000 	.word	0x40007000
 8006848:	10908100 	.word	0x10908100
 800684c:	2302      	movs	r3, #2
 800684e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006850:	69bb      	ldr	r3, [r7, #24]
 8006852:	fa93 f3a3 	rbit	r3, r3
 8006856:	617b      	str	r3, [r7, #20]
 8006858:	4b78      	ldr	r3, [pc, #480]	; (8006a3c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800685a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800685c:	2202      	movs	r2, #2
 800685e:	613a      	str	r2, [r7, #16]
 8006860:	693a      	ldr	r2, [r7, #16]
 8006862:	fa92 f2a2 	rbit	r2, r2
 8006866:	60fa      	str	r2, [r7, #12]
  return result;
 8006868:	68fa      	ldr	r2, [r7, #12]
 800686a:	fab2 f282 	clz	r2, r2
 800686e:	b2d2      	uxtb	r2, r2
 8006870:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006874:	b2d2      	uxtb	r2, r2
 8006876:	f002 021f 	and.w	r2, r2, #31
 800687a:	2101      	movs	r1, #1
 800687c:	fa01 f202 	lsl.w	r2, r1, r2
 8006880:	4013      	ands	r3, r2
 8006882:	2b00      	cmp	r3, #0
 8006884:	d0b7      	beq.n	80067f6 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8006886:	4b6d      	ldr	r3, [pc, #436]	; (8006a3c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006888:	6a1b      	ldr	r3, [r3, #32]
 800688a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	685b      	ldr	r3, [r3, #4]
 8006892:	496a      	ldr	r1, [pc, #424]	; (8006a3c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006894:	4313      	orrs	r3, r2
 8006896:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8006898:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800689c:	2b01      	cmp	r3, #1
 800689e:	d105      	bne.n	80068ac <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80068a0:	4b66      	ldr	r3, [pc, #408]	; (8006a3c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80068a2:	69db      	ldr	r3, [r3, #28]
 80068a4:	4a65      	ldr	r2, [pc, #404]	; (8006a3c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80068a6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80068aa:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	f003 0301 	and.w	r3, r3, #1
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	d008      	beq.n	80068ca <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80068b8:	4b60      	ldr	r3, [pc, #384]	; (8006a3c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80068ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068bc:	f023 0203 	bic.w	r2, r3, #3
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	689b      	ldr	r3, [r3, #8]
 80068c4:	495d      	ldr	r1, [pc, #372]	; (8006a3c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80068c6:	4313      	orrs	r3, r2
 80068c8:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	f003 0302 	and.w	r3, r3, #2
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d008      	beq.n	80068e8 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80068d6:	4b59      	ldr	r3, [pc, #356]	; (8006a3c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80068d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068da:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	68db      	ldr	r3, [r3, #12]
 80068e2:	4956      	ldr	r1, [pc, #344]	; (8006a3c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80068e4:	4313      	orrs	r3, r2
 80068e6:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	f003 0304 	and.w	r3, r3, #4
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	d008      	beq.n	8006906 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80068f4:	4b51      	ldr	r3, [pc, #324]	; (8006a3c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80068f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068f8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	691b      	ldr	r3, [r3, #16]
 8006900:	494e      	ldr	r1, [pc, #312]	; (8006a3c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006902:	4313      	orrs	r3, r2
 8006904:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	f003 0320 	and.w	r3, r3, #32
 800690e:	2b00      	cmp	r3, #0
 8006910:	d008      	beq.n	8006924 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006912:	4b4a      	ldr	r3, [pc, #296]	; (8006a3c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006914:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006916:	f023 0210 	bic.w	r2, r3, #16
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	69db      	ldr	r3, [r3, #28]
 800691e:	4947      	ldr	r1, [pc, #284]	; (8006a3c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006920:	4313      	orrs	r3, r2
 8006922:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800692c:	2b00      	cmp	r3, #0
 800692e:	d008      	beq.n	8006942 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8006930:	4b42      	ldr	r3, [pc, #264]	; (8006a3c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006932:	685b      	ldr	r3, [r3, #4]
 8006934:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800693c:	493f      	ldr	r1, [pc, #252]	; (8006a3c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800693e:	4313      	orrs	r3, r2
 8006940:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800694a:	2b00      	cmp	r3, #0
 800694c:	d008      	beq.n	8006960 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800694e:	4b3b      	ldr	r3, [pc, #236]	; (8006a3c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006950:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006952:	f023 0220 	bic.w	r2, r3, #32
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	6a1b      	ldr	r3, [r3, #32]
 800695a:	4938      	ldr	r1, [pc, #224]	; (8006a3c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800695c:	4313      	orrs	r3, r2
 800695e:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	f003 0308 	and.w	r3, r3, #8
 8006968:	2b00      	cmp	r3, #0
 800696a:	d008      	beq.n	800697e <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800696c:	4b33      	ldr	r3, [pc, #204]	; (8006a3c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800696e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006970:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	695b      	ldr	r3, [r3, #20]
 8006978:	4930      	ldr	r1, [pc, #192]	; (8006a3c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800697a:	4313      	orrs	r3, r2
 800697c:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	f003 0310 	and.w	r3, r3, #16
 8006986:	2b00      	cmp	r3, #0
 8006988:	d008      	beq.n	800699c <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800698a:	4b2c      	ldr	r3, [pc, #176]	; (8006a3c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800698c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800698e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	699b      	ldr	r3, [r3, #24]
 8006996:	4929      	ldr	r1, [pc, #164]	; (8006a3c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006998:	4313      	orrs	r3, r2
 800699a:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	d008      	beq.n	80069ba <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80069a8:	4b24      	ldr	r3, [pc, #144]	; (8006a3c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80069aa:	685b      	ldr	r3, [r3, #4]
 80069ac:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069b4:	4921      	ldr	r1, [pc, #132]	; (8006a3c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80069b6:	4313      	orrs	r3, r2
 80069b8:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	d008      	beq.n	80069d8 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80069c6:	4b1d      	ldr	r3, [pc, #116]	; (8006a3c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80069c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069ca:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069d2:	491a      	ldr	r1, [pc, #104]	; (8006a3c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80069d4:	4313      	orrs	r3, r2
 80069d6:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	d008      	beq.n	80069f6 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 80069e4:	4b15      	ldr	r3, [pc, #84]	; (8006a3c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80069e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069e8:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069f0:	4912      	ldr	r1, [pc, #72]	; (8006a3c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80069f2:	4313      	orrs	r3, r2
 80069f4:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d008      	beq.n	8006a14 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8006a02:	4b0e      	ldr	r3, [pc, #56]	; (8006a3c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006a04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a06:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a0e:	490b      	ldr	r1, [pc, #44]	; (8006a3c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006a10:	4313      	orrs	r3, r2
 8006a12:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	d008      	beq.n	8006a32 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8006a20:	4b06      	ldr	r3, [pc, #24]	; (8006a3c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006a22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a24:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006a2c:	4903      	ldr	r1, [pc, #12]	; (8006a3c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006a2e:	4313      	orrs	r3, r2
 8006a30:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8006a32:	2300      	movs	r3, #0
}
 8006a34:	4618      	mov	r0, r3
 8006a36:	3748      	adds	r7, #72	; 0x48
 8006a38:	46bd      	mov	sp, r7
 8006a3a:	bd80      	pop	{r7, pc}
 8006a3c:	40021000 	.word	0x40021000

08006a40 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006a40:	b580      	push	{r7, lr}
 8006a42:	b084      	sub	sp, #16
 8006a44:	af00      	add	r7, sp, #0
 8006a46:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	d101      	bne.n	8006a52 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006a4e:	2301      	movs	r3, #1
 8006a50:	e09d      	b.n	8006b8e <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	d108      	bne.n	8006a6c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	685b      	ldr	r3, [r3, #4]
 8006a5e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006a62:	d009      	beq.n	8006a78 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	2200      	movs	r2, #0
 8006a68:	61da      	str	r2, [r3, #28]
 8006a6a:	e005      	b.n	8006a78 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	2200      	movs	r2, #0
 8006a70:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	2200      	movs	r2, #0
 8006a76:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	2200      	movs	r2, #0
 8006a7c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006a84:	b2db      	uxtb	r3, r3
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	d106      	bne.n	8006a98 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	2200      	movs	r2, #0
 8006a8e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006a92:	6878      	ldr	r0, [r7, #4]
 8006a94:	f7fc f8f6 	bl	8002c84 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	2202      	movs	r2, #2
 8006a9c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	681a      	ldr	r2, [r3, #0]
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006aae:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	68db      	ldr	r3, [r3, #12]
 8006ab4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006ab8:	d902      	bls.n	8006ac0 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8006aba:	2300      	movs	r3, #0
 8006abc:	60fb      	str	r3, [r7, #12]
 8006abe:	e002      	b.n	8006ac6 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8006ac0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006ac4:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	68db      	ldr	r3, [r3, #12]
 8006aca:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8006ace:	d007      	beq.n	8006ae0 <HAL_SPI_Init+0xa0>
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	68db      	ldr	r3, [r3, #12]
 8006ad4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006ad8:	d002      	beq.n	8006ae0 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	2200      	movs	r2, #0
 8006ade:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	685b      	ldr	r3, [r3, #4]
 8006ae4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	689b      	ldr	r3, [r3, #8]
 8006aec:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8006af0:	431a      	orrs	r2, r3
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	691b      	ldr	r3, [r3, #16]
 8006af6:	f003 0302 	and.w	r3, r3, #2
 8006afa:	431a      	orrs	r2, r3
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	695b      	ldr	r3, [r3, #20]
 8006b00:	f003 0301 	and.w	r3, r3, #1
 8006b04:	431a      	orrs	r2, r3
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	699b      	ldr	r3, [r3, #24]
 8006b0a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006b0e:	431a      	orrs	r2, r3
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	69db      	ldr	r3, [r3, #28]
 8006b14:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006b18:	431a      	orrs	r2, r3
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	6a1b      	ldr	r3, [r3, #32]
 8006b1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006b22:	ea42 0103 	orr.w	r1, r2, r3
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b2a:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	430a      	orrs	r2, r1
 8006b34:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	699b      	ldr	r3, [r3, #24]
 8006b3a:	0c1b      	lsrs	r3, r3, #16
 8006b3c:	f003 0204 	and.w	r2, r3, #4
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b44:	f003 0310 	and.w	r3, r3, #16
 8006b48:	431a      	orrs	r2, r3
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006b4e:	f003 0308 	and.w	r3, r3, #8
 8006b52:	431a      	orrs	r2, r3
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	68db      	ldr	r3, [r3, #12]
 8006b58:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8006b5c:	ea42 0103 	orr.w	r1, r2, r3
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	430a      	orrs	r2, r1
 8006b6c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	69da      	ldr	r2, [r3, #28]
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006b7c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	2200      	movs	r2, #0
 8006b82:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	2201      	movs	r2, #1
 8006b88:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8006b8c:	2300      	movs	r3, #0
}
 8006b8e:	4618      	mov	r0, r3
 8006b90:	3710      	adds	r7, #16
 8006b92:	46bd      	mov	sp, r7
 8006b94:	bd80      	pop	{r7, pc}

08006b96 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006b96:	b580      	push	{r7, lr}
 8006b98:	b088      	sub	sp, #32
 8006b9a:	af00      	add	r7, sp, #0
 8006b9c:	60f8      	str	r0, [r7, #12]
 8006b9e:	60b9      	str	r1, [r7, #8]
 8006ba0:	603b      	str	r3, [r7, #0]
 8006ba2:	4613      	mov	r3, r2
 8006ba4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006ba6:	2300      	movs	r3, #0
 8006ba8:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8006bb0:	2b01      	cmp	r3, #1
 8006bb2:	d101      	bne.n	8006bb8 <HAL_SPI_Transmit+0x22>
 8006bb4:	2302      	movs	r3, #2
 8006bb6:	e158      	b.n	8006e6a <HAL_SPI_Transmit+0x2d4>
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	2201      	movs	r2, #1
 8006bbc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006bc0:	f7fc f970 	bl	8002ea4 <HAL_GetTick>
 8006bc4:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8006bc6:	88fb      	ldrh	r3, [r7, #6]
 8006bc8:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006bd0:	b2db      	uxtb	r3, r3
 8006bd2:	2b01      	cmp	r3, #1
 8006bd4:	d002      	beq.n	8006bdc <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8006bd6:	2302      	movs	r3, #2
 8006bd8:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006bda:	e13d      	b.n	8006e58 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8006bdc:	68bb      	ldr	r3, [r7, #8]
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	d002      	beq.n	8006be8 <HAL_SPI_Transmit+0x52>
 8006be2:	88fb      	ldrh	r3, [r7, #6]
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	d102      	bne.n	8006bee <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8006be8:	2301      	movs	r3, #1
 8006bea:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006bec:	e134      	b.n	8006e58 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	2203      	movs	r2, #3
 8006bf2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	2200      	movs	r2, #0
 8006bfa:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	68ba      	ldr	r2, [r7, #8]
 8006c00:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	88fa      	ldrh	r2, [r7, #6]
 8006c06:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	88fa      	ldrh	r2, [r7, #6]
 8006c0c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	2200      	movs	r2, #0
 8006c12:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	2200      	movs	r2, #0
 8006c18:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	2200      	movs	r2, #0
 8006c20:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	2200      	movs	r2, #0
 8006c28:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	2200      	movs	r2, #0
 8006c2e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	689b      	ldr	r3, [r3, #8]
 8006c34:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006c38:	d10f      	bne.n	8006c5a <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	681a      	ldr	r2, [r3, #0]
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006c48:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	681a      	ldr	r2, [r3, #0]
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006c58:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c64:	2b40      	cmp	r3, #64	; 0x40
 8006c66:	d007      	beq.n	8006c78 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	681a      	ldr	r2, [r3, #0]
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006c76:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	68db      	ldr	r3, [r3, #12]
 8006c7c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006c80:	d94b      	bls.n	8006d1a <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	685b      	ldr	r3, [r3, #4]
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	d002      	beq.n	8006c90 <HAL_SPI_Transmit+0xfa>
 8006c8a:	8afb      	ldrh	r3, [r7, #22]
 8006c8c:	2b01      	cmp	r3, #1
 8006c8e:	d13e      	bne.n	8006d0e <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c94:	881a      	ldrh	r2, [r3, #0]
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ca0:	1c9a      	adds	r2, r3, #2
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006caa:	b29b      	uxth	r3, r3
 8006cac:	3b01      	subs	r3, #1
 8006cae:	b29a      	uxth	r2, r3
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8006cb4:	e02b      	b.n	8006d0e <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	689b      	ldr	r3, [r3, #8]
 8006cbc:	f003 0302 	and.w	r3, r3, #2
 8006cc0:	2b02      	cmp	r3, #2
 8006cc2:	d112      	bne.n	8006cea <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006cc8:	881a      	ldrh	r2, [r3, #0]
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006cd4:	1c9a      	adds	r2, r3, #2
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006cde:	b29b      	uxth	r3, r3
 8006ce0:	3b01      	subs	r3, #1
 8006ce2:	b29a      	uxth	r2, r3
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006ce8:	e011      	b.n	8006d0e <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006cea:	f7fc f8db 	bl	8002ea4 <HAL_GetTick>
 8006cee:	4602      	mov	r2, r0
 8006cf0:	69bb      	ldr	r3, [r7, #24]
 8006cf2:	1ad3      	subs	r3, r2, r3
 8006cf4:	683a      	ldr	r2, [r7, #0]
 8006cf6:	429a      	cmp	r2, r3
 8006cf8:	d803      	bhi.n	8006d02 <HAL_SPI_Transmit+0x16c>
 8006cfa:	683b      	ldr	r3, [r7, #0]
 8006cfc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d00:	d102      	bne.n	8006d08 <HAL_SPI_Transmit+0x172>
 8006d02:	683b      	ldr	r3, [r7, #0]
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	d102      	bne.n	8006d0e <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8006d08:	2303      	movs	r3, #3
 8006d0a:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006d0c:	e0a4      	b.n	8006e58 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006d12:	b29b      	uxth	r3, r3
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	d1ce      	bne.n	8006cb6 <HAL_SPI_Transmit+0x120>
 8006d18:	e07c      	b.n	8006e14 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	685b      	ldr	r3, [r3, #4]
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	d002      	beq.n	8006d28 <HAL_SPI_Transmit+0x192>
 8006d22:	8afb      	ldrh	r3, [r7, #22]
 8006d24:	2b01      	cmp	r3, #1
 8006d26:	d170      	bne.n	8006e0a <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006d2c:	b29b      	uxth	r3, r3
 8006d2e:	2b01      	cmp	r3, #1
 8006d30:	d912      	bls.n	8006d58 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d36:	881a      	ldrh	r2, [r3, #0]
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d42:	1c9a      	adds	r2, r3, #2
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006d4c:	b29b      	uxth	r3, r3
 8006d4e:	3b02      	subs	r3, #2
 8006d50:	b29a      	uxth	r2, r3
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006d56:	e058      	b.n	8006e0a <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	330c      	adds	r3, #12
 8006d62:	7812      	ldrb	r2, [r2, #0]
 8006d64:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d6a:	1c5a      	adds	r2, r3, #1
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006d74:	b29b      	uxth	r3, r3
 8006d76:	3b01      	subs	r3, #1
 8006d78:	b29a      	uxth	r2, r3
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8006d7e:	e044      	b.n	8006e0a <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	689b      	ldr	r3, [r3, #8]
 8006d86:	f003 0302 	and.w	r3, r3, #2
 8006d8a:	2b02      	cmp	r3, #2
 8006d8c:	d12b      	bne.n	8006de6 <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006d92:	b29b      	uxth	r3, r3
 8006d94:	2b01      	cmp	r3, #1
 8006d96:	d912      	bls.n	8006dbe <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d9c:	881a      	ldrh	r2, [r3, #0]
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8006da4:	68fb      	ldr	r3, [r7, #12]
 8006da6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006da8:	1c9a      	adds	r2, r3, #2
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006db2:	b29b      	uxth	r3, r3
 8006db4:	3b02      	subs	r3, #2
 8006db6:	b29a      	uxth	r2, r3
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006dbc:	e025      	b.n	8006e0a <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	330c      	adds	r3, #12
 8006dc8:	7812      	ldrb	r2, [r2, #0]
 8006dca:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006dd0:	1c5a      	adds	r2, r3, #1
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006dda:	b29b      	uxth	r3, r3
 8006ddc:	3b01      	subs	r3, #1
 8006dde:	b29a      	uxth	r2, r3
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006de4:	e011      	b.n	8006e0a <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006de6:	f7fc f85d 	bl	8002ea4 <HAL_GetTick>
 8006dea:	4602      	mov	r2, r0
 8006dec:	69bb      	ldr	r3, [r7, #24]
 8006dee:	1ad3      	subs	r3, r2, r3
 8006df0:	683a      	ldr	r2, [r7, #0]
 8006df2:	429a      	cmp	r2, r3
 8006df4:	d803      	bhi.n	8006dfe <HAL_SPI_Transmit+0x268>
 8006df6:	683b      	ldr	r3, [r7, #0]
 8006df8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006dfc:	d102      	bne.n	8006e04 <HAL_SPI_Transmit+0x26e>
 8006dfe:	683b      	ldr	r3, [r7, #0]
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	d102      	bne.n	8006e0a <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8006e04:	2303      	movs	r3, #3
 8006e06:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006e08:	e026      	b.n	8006e58 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006e0e:	b29b      	uxth	r3, r3
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	d1b5      	bne.n	8006d80 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006e14:	69ba      	ldr	r2, [r7, #24]
 8006e16:	6839      	ldr	r1, [r7, #0]
 8006e18:	68f8      	ldr	r0, [r7, #12]
 8006e1a:	f000 fcdb 	bl	80077d4 <SPI_EndRxTxTransaction>
 8006e1e:	4603      	mov	r3, r0
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	d002      	beq.n	8006e2a <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	2220      	movs	r2, #32
 8006e28:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	689b      	ldr	r3, [r3, #8]
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	d10a      	bne.n	8006e48 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006e32:	2300      	movs	r3, #0
 8006e34:	613b      	str	r3, [r7, #16]
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	68db      	ldr	r3, [r3, #12]
 8006e3c:	613b      	str	r3, [r7, #16]
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	689b      	ldr	r3, [r3, #8]
 8006e44:	613b      	str	r3, [r7, #16]
 8006e46:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	d002      	beq.n	8006e56 <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8006e50:	2301      	movs	r3, #1
 8006e52:	77fb      	strb	r3, [r7, #31]
 8006e54:	e000      	b.n	8006e58 <HAL_SPI_Transmit+0x2c2>
  }

error:
 8006e56:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	2201      	movs	r2, #1
 8006e5c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	2200      	movs	r2, #0
 8006e64:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8006e68:	7ffb      	ldrb	r3, [r7, #31]
}
 8006e6a:	4618      	mov	r0, r3
 8006e6c:	3720      	adds	r7, #32
 8006e6e:	46bd      	mov	sp, r7
 8006e70:	bd80      	pop	{r7, pc}

08006e72 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006e72:	b580      	push	{r7, lr}
 8006e74:	b088      	sub	sp, #32
 8006e76:	af02      	add	r7, sp, #8
 8006e78:	60f8      	str	r0, [r7, #12]
 8006e7a:	60b9      	str	r1, [r7, #8]
 8006e7c:	603b      	str	r3, [r7, #0]
 8006e7e:	4613      	mov	r3, r2
 8006e80:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006e82:	2300      	movs	r3, #0
 8006e84:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8006e86:	68fb      	ldr	r3, [r7, #12]
 8006e88:	685b      	ldr	r3, [r3, #4]
 8006e8a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006e8e:	d112      	bne.n	8006eb6 <HAL_SPI_Receive+0x44>
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	689b      	ldr	r3, [r3, #8]
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	d10e      	bne.n	8006eb6 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	2204      	movs	r2, #4
 8006e9c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8006ea0:	88fa      	ldrh	r2, [r7, #6]
 8006ea2:	683b      	ldr	r3, [r7, #0]
 8006ea4:	9300      	str	r3, [sp, #0]
 8006ea6:	4613      	mov	r3, r2
 8006ea8:	68ba      	ldr	r2, [r7, #8]
 8006eaa:	68b9      	ldr	r1, [r7, #8]
 8006eac:	68f8      	ldr	r0, [r7, #12]
 8006eae:	f000 f910 	bl	80070d2 <HAL_SPI_TransmitReceive>
 8006eb2:	4603      	mov	r3, r0
 8006eb4:	e109      	b.n	80070ca <HAL_SPI_Receive+0x258>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8006ebc:	2b01      	cmp	r3, #1
 8006ebe:	d101      	bne.n	8006ec4 <HAL_SPI_Receive+0x52>
 8006ec0:	2302      	movs	r3, #2
 8006ec2:	e102      	b.n	80070ca <HAL_SPI_Receive+0x258>
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	2201      	movs	r2, #1
 8006ec8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006ecc:	f7fb ffea 	bl	8002ea4 <HAL_GetTick>
 8006ed0:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006ed8:	b2db      	uxtb	r3, r3
 8006eda:	2b01      	cmp	r3, #1
 8006edc:	d002      	beq.n	8006ee4 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8006ede:	2302      	movs	r3, #2
 8006ee0:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006ee2:	e0e9      	b.n	80070b8 <HAL_SPI_Receive+0x246>
  }

  if ((pData == NULL) || (Size == 0U))
 8006ee4:	68bb      	ldr	r3, [r7, #8]
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	d002      	beq.n	8006ef0 <HAL_SPI_Receive+0x7e>
 8006eea:	88fb      	ldrh	r3, [r7, #6]
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	d102      	bne.n	8006ef6 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8006ef0:	2301      	movs	r3, #1
 8006ef2:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006ef4:	e0e0      	b.n	80070b8 <HAL_SPI_Receive+0x246>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	2204      	movs	r2, #4
 8006efa:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	2200      	movs	r2, #0
 8006f02:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	68ba      	ldr	r2, [r7, #8]
 8006f08:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	88fa      	ldrh	r2, [r7, #6]
 8006f0e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	88fa      	ldrh	r2, [r7, #6]
 8006f16:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	2200      	movs	r2, #0
 8006f1e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	2200      	movs	r2, #0
 8006f24:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	2200      	movs	r2, #0
 8006f2a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	2200      	movs	r2, #0
 8006f30:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	2200      	movs	r2, #0
 8006f36:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	68db      	ldr	r3, [r3, #12]
 8006f3c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006f40:	d908      	bls.n	8006f54 <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	685a      	ldr	r2, [r3, #4]
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006f50:	605a      	str	r2, [r3, #4]
 8006f52:	e007      	b.n	8006f64 <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	685a      	ldr	r2, [r3, #4]
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006f62:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	689b      	ldr	r3, [r3, #8]
 8006f68:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006f6c:	d10f      	bne.n	8006f8e <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	681a      	ldr	r2, [r3, #0]
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006f7c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	681a      	ldr	r2, [r3, #0]
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8006f8c:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f98:	2b40      	cmp	r3, #64	; 0x40
 8006f9a:	d007      	beq.n	8006fac <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	681a      	ldr	r2, [r3, #0]
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006faa:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	68db      	ldr	r3, [r3, #12]
 8006fb0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006fb4:	d867      	bhi.n	8007086 <HAL_SPI_Receive+0x214>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8006fb6:	e030      	b.n	800701a <HAL_SPI_Receive+0x1a8>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	689b      	ldr	r3, [r3, #8]
 8006fbe:	f003 0301 	and.w	r3, r3, #1
 8006fc2:	2b01      	cmp	r3, #1
 8006fc4:	d117      	bne.n	8006ff6 <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	f103 020c 	add.w	r2, r3, #12
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fd2:	7812      	ldrb	r2, [r2, #0]
 8006fd4:	b2d2      	uxtb	r2, r2
 8006fd6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fdc:	1c5a      	adds	r2, r3, #1
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006fe8:	b29b      	uxth	r3, r3
 8006fea:	3b01      	subs	r3, #1
 8006fec:	b29a      	uxth	r2, r3
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8006ff4:	e011      	b.n	800701a <HAL_SPI_Receive+0x1a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006ff6:	f7fb ff55 	bl	8002ea4 <HAL_GetTick>
 8006ffa:	4602      	mov	r2, r0
 8006ffc:	693b      	ldr	r3, [r7, #16]
 8006ffe:	1ad3      	subs	r3, r2, r3
 8007000:	683a      	ldr	r2, [r7, #0]
 8007002:	429a      	cmp	r2, r3
 8007004:	d803      	bhi.n	800700e <HAL_SPI_Receive+0x19c>
 8007006:	683b      	ldr	r3, [r7, #0]
 8007008:	f1b3 3fff 	cmp.w	r3, #4294967295
 800700c:	d102      	bne.n	8007014 <HAL_SPI_Receive+0x1a2>
 800700e:	683b      	ldr	r3, [r7, #0]
 8007010:	2b00      	cmp	r3, #0
 8007012:	d102      	bne.n	800701a <HAL_SPI_Receive+0x1a8>
        {
          errorcode = HAL_TIMEOUT;
 8007014:	2303      	movs	r3, #3
 8007016:	75fb      	strb	r3, [r7, #23]
          goto error;
 8007018:	e04e      	b.n	80070b8 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007020:	b29b      	uxth	r3, r3
 8007022:	2b00      	cmp	r3, #0
 8007024:	d1c8      	bne.n	8006fb8 <HAL_SPI_Receive+0x146>
 8007026:	e034      	b.n	8007092 <HAL_SPI_Receive+0x220>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	689b      	ldr	r3, [r3, #8]
 800702e:	f003 0301 	and.w	r3, r3, #1
 8007032:	2b01      	cmp	r3, #1
 8007034:	d115      	bne.n	8007062 <HAL_SPI_Receive+0x1f0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	68da      	ldr	r2, [r3, #12]
 800703c:	68fb      	ldr	r3, [r7, #12]
 800703e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007040:	b292      	uxth	r2, r2
 8007042:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007048:	1c9a      	adds	r2, r3, #2
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007054:	b29b      	uxth	r3, r3
 8007056:	3b01      	subs	r3, #1
 8007058:	b29a      	uxth	r2, r3
 800705a:	68fb      	ldr	r3, [r7, #12]
 800705c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8007060:	e011      	b.n	8007086 <HAL_SPI_Receive+0x214>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007062:	f7fb ff1f 	bl	8002ea4 <HAL_GetTick>
 8007066:	4602      	mov	r2, r0
 8007068:	693b      	ldr	r3, [r7, #16]
 800706a:	1ad3      	subs	r3, r2, r3
 800706c:	683a      	ldr	r2, [r7, #0]
 800706e:	429a      	cmp	r2, r3
 8007070:	d803      	bhi.n	800707a <HAL_SPI_Receive+0x208>
 8007072:	683b      	ldr	r3, [r7, #0]
 8007074:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007078:	d102      	bne.n	8007080 <HAL_SPI_Receive+0x20e>
 800707a:	683b      	ldr	r3, [r7, #0]
 800707c:	2b00      	cmp	r3, #0
 800707e:	d102      	bne.n	8007086 <HAL_SPI_Receive+0x214>
        {
          errorcode = HAL_TIMEOUT;
 8007080:	2303      	movs	r3, #3
 8007082:	75fb      	strb	r3, [r7, #23]
          goto error;
 8007084:	e018      	b.n	80070b8 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800708c:	b29b      	uxth	r3, r3
 800708e:	2b00      	cmp	r3, #0
 8007090:	d1ca      	bne.n	8007028 <HAL_SPI_Receive+0x1b6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007092:	693a      	ldr	r2, [r7, #16]
 8007094:	6839      	ldr	r1, [r7, #0]
 8007096:	68f8      	ldr	r0, [r7, #12]
 8007098:	f000 fb44 	bl	8007724 <SPI_EndRxTransaction>
 800709c:	4603      	mov	r3, r0
 800709e:	2b00      	cmp	r3, #0
 80070a0:	d002      	beq.n	80070a8 <HAL_SPI_Receive+0x236>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80070a2:	68fb      	ldr	r3, [r7, #12]
 80070a4:	2220      	movs	r2, #32
 80070a6:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	d002      	beq.n	80070b6 <HAL_SPI_Receive+0x244>
  {
    errorcode = HAL_ERROR;
 80070b0:	2301      	movs	r3, #1
 80070b2:	75fb      	strb	r3, [r7, #23]
 80070b4:	e000      	b.n	80070b8 <HAL_SPI_Receive+0x246>
  }

error :
 80070b6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	2201      	movs	r2, #1
 80070bc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	2200      	movs	r2, #0
 80070c4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80070c8:	7dfb      	ldrb	r3, [r7, #23]
}
 80070ca:	4618      	mov	r0, r3
 80070cc:	3718      	adds	r7, #24
 80070ce:	46bd      	mov	sp, r7
 80070d0:	bd80      	pop	{r7, pc}

080070d2 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80070d2:	b580      	push	{r7, lr}
 80070d4:	b08a      	sub	sp, #40	; 0x28
 80070d6:	af00      	add	r7, sp, #0
 80070d8:	60f8      	str	r0, [r7, #12]
 80070da:	60b9      	str	r1, [r7, #8]
 80070dc:	607a      	str	r2, [r7, #4]
 80070de:	807b      	strh	r3, [r7, #2]
  uint32_t             spi_cr1;
  uint32_t             spi_cr2;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80070e0:	2301      	movs	r3, #1
 80070e2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80070e4:	2300      	movs	r3, #0
 80070e6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80070f0:	2b01      	cmp	r3, #1
 80070f2:	d101      	bne.n	80070f8 <HAL_SPI_TransmitReceive+0x26>
 80070f4:	2302      	movs	r3, #2
 80070f6:	e1fb      	b.n	80074f0 <HAL_SPI_TransmitReceive+0x41e>
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	2201      	movs	r2, #1
 80070fc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007100:	f7fb fed0 	bl	8002ea4 <HAL_GetTick>
 8007104:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800710c:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 800710e:	68fb      	ldr	r3, [r7, #12]
 8007110:	685b      	ldr	r3, [r3, #4]
 8007112:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8007114:	887b      	ldrh	r3, [r7, #2]
 8007116:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8007118:	887b      	ldrh	r3, [r7, #2]
 800711a:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800711c:	7efb      	ldrb	r3, [r7, #27]
 800711e:	2b01      	cmp	r3, #1
 8007120:	d00e      	beq.n	8007140 <HAL_SPI_TransmitReceive+0x6e>
 8007122:	697b      	ldr	r3, [r7, #20]
 8007124:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007128:	d106      	bne.n	8007138 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800712a:	68fb      	ldr	r3, [r7, #12]
 800712c:	689b      	ldr	r3, [r3, #8]
 800712e:	2b00      	cmp	r3, #0
 8007130:	d102      	bne.n	8007138 <HAL_SPI_TransmitReceive+0x66>
 8007132:	7efb      	ldrb	r3, [r7, #27]
 8007134:	2b04      	cmp	r3, #4
 8007136:	d003      	beq.n	8007140 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8007138:	2302      	movs	r3, #2
 800713a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800713e:	e1cd      	b.n	80074dc <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8007140:	68bb      	ldr	r3, [r7, #8]
 8007142:	2b00      	cmp	r3, #0
 8007144:	d005      	beq.n	8007152 <HAL_SPI_TransmitReceive+0x80>
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	2b00      	cmp	r3, #0
 800714a:	d002      	beq.n	8007152 <HAL_SPI_TransmitReceive+0x80>
 800714c:	887b      	ldrh	r3, [r7, #2]
 800714e:	2b00      	cmp	r3, #0
 8007150:	d103      	bne.n	800715a <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8007152:	2301      	movs	r3, #1
 8007154:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8007158:	e1c0      	b.n	80074dc <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8007160:	b2db      	uxtb	r3, r3
 8007162:	2b04      	cmp	r3, #4
 8007164:	d003      	beq.n	800716e <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	2205      	movs	r2, #5
 800716a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	2200      	movs	r2, #0
 8007172:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	687a      	ldr	r2, [r7, #4]
 8007178:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 800717a:	68fb      	ldr	r3, [r7, #12]
 800717c:	887a      	ldrh	r2, [r7, #2]
 800717e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	887a      	ldrh	r2, [r7, #2]
 8007186:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800718a:	68fb      	ldr	r3, [r7, #12]
 800718c:	68ba      	ldr	r2, [r7, #8]
 800718e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	887a      	ldrh	r2, [r7, #2]
 8007194:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8007196:	68fb      	ldr	r3, [r7, #12]
 8007198:	887a      	ldrh	r2, [r7, #2]
 800719a:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	2200      	movs	r2, #0
 80071a0:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	2200      	movs	r2, #0
 80071a6:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	68db      	ldr	r3, [r3, #12]
 80071ac:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80071b0:	d802      	bhi.n	80071b8 <HAL_SPI_TransmitReceive+0xe6>
 80071b2:	8a3b      	ldrh	r3, [r7, #16]
 80071b4:	2b01      	cmp	r3, #1
 80071b6:	d908      	bls.n	80071ca <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80071b8:	68fb      	ldr	r3, [r7, #12]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	685a      	ldr	r2, [r3, #4]
 80071be:	68fb      	ldr	r3, [r7, #12]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80071c6:	605a      	str	r2, [r3, #4]
 80071c8:	e007      	b.n	80071da <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	685a      	ldr	r2, [r3, #4]
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80071d8:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80071da:	68fb      	ldr	r3, [r7, #12]
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80071e4:	2b40      	cmp	r3, #64	; 0x40
 80071e6:	d007      	beq.n	80071f8 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80071e8:	68fb      	ldr	r3, [r7, #12]
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	681a      	ldr	r2, [r3, #0]
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80071f6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	68db      	ldr	r3, [r3, #12]
 80071fc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007200:	d97c      	bls.n	80072fc <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007202:	68fb      	ldr	r3, [r7, #12]
 8007204:	685b      	ldr	r3, [r3, #4]
 8007206:	2b00      	cmp	r3, #0
 8007208:	d002      	beq.n	8007210 <HAL_SPI_TransmitReceive+0x13e>
 800720a:	8a7b      	ldrh	r3, [r7, #18]
 800720c:	2b01      	cmp	r3, #1
 800720e:	d169      	bne.n	80072e4 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007214:	881a      	ldrh	r2, [r3, #0]
 8007216:	68fb      	ldr	r3, [r7, #12]
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007220:	1c9a      	adds	r2, r3, #2
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8007226:	68fb      	ldr	r3, [r7, #12]
 8007228:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800722a:	b29b      	uxth	r3, r3
 800722c:	3b01      	subs	r3, #1
 800722e:	b29a      	uxth	r2, r3
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007234:	e056      	b.n	80072e4 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007236:	68fb      	ldr	r3, [r7, #12]
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	689b      	ldr	r3, [r3, #8]
 800723c:	f003 0302 	and.w	r3, r3, #2
 8007240:	2b02      	cmp	r3, #2
 8007242:	d11b      	bne.n	800727c <HAL_SPI_TransmitReceive+0x1aa>
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007248:	b29b      	uxth	r3, r3
 800724a:	2b00      	cmp	r3, #0
 800724c:	d016      	beq.n	800727c <HAL_SPI_TransmitReceive+0x1aa>
 800724e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007250:	2b01      	cmp	r3, #1
 8007252:	d113      	bne.n	800727c <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007258:	881a      	ldrh	r2, [r3, #0]
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007264:	1c9a      	adds	r2, r3, #2
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800726e:	b29b      	uxth	r3, r3
 8007270:	3b01      	subs	r3, #1
 8007272:	b29a      	uxth	r2, r3
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007278:	2300      	movs	r3, #0
 800727a:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	689b      	ldr	r3, [r3, #8]
 8007282:	f003 0301 	and.w	r3, r3, #1
 8007286:	2b01      	cmp	r3, #1
 8007288:	d11c      	bne.n	80072c4 <HAL_SPI_TransmitReceive+0x1f2>
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007290:	b29b      	uxth	r3, r3
 8007292:	2b00      	cmp	r3, #0
 8007294:	d016      	beq.n	80072c4 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007296:	68fb      	ldr	r3, [r7, #12]
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	68da      	ldr	r2, [r3, #12]
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072a0:	b292      	uxth	r2, r2
 80072a2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80072a4:	68fb      	ldr	r3, [r7, #12]
 80072a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072a8:	1c9a      	adds	r2, r3, #2
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80072b4:	b29b      	uxth	r3, r3
 80072b6:	3b01      	subs	r3, #1
 80072b8:	b29a      	uxth	r2, r3
 80072ba:	68fb      	ldr	r3, [r7, #12]
 80072bc:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80072c0:	2301      	movs	r3, #1
 80072c2:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80072c4:	f7fb fdee 	bl	8002ea4 <HAL_GetTick>
 80072c8:	4602      	mov	r2, r0
 80072ca:	69fb      	ldr	r3, [r7, #28]
 80072cc:	1ad3      	subs	r3, r2, r3
 80072ce:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80072d0:	429a      	cmp	r2, r3
 80072d2:	d807      	bhi.n	80072e4 <HAL_SPI_TransmitReceive+0x212>
 80072d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80072da:	d003      	beq.n	80072e4 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 80072dc:	2303      	movs	r3, #3
 80072de:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 80072e2:	e0fb      	b.n	80074dc <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80072e8:	b29b      	uxth	r3, r3
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	d1a3      	bne.n	8007236 <HAL_SPI_TransmitReceive+0x164>
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80072f4:	b29b      	uxth	r3, r3
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	d19d      	bne.n	8007236 <HAL_SPI_TransmitReceive+0x164>
 80072fa:	e0df      	b.n	80074bc <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	685b      	ldr	r3, [r3, #4]
 8007300:	2b00      	cmp	r3, #0
 8007302:	d003      	beq.n	800730c <HAL_SPI_TransmitReceive+0x23a>
 8007304:	8a7b      	ldrh	r3, [r7, #18]
 8007306:	2b01      	cmp	r3, #1
 8007308:	f040 80cb 	bne.w	80074a2 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 800730c:	68fb      	ldr	r3, [r7, #12]
 800730e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007310:	b29b      	uxth	r3, r3
 8007312:	2b01      	cmp	r3, #1
 8007314:	d912      	bls.n	800733c <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800731a:	881a      	ldrh	r2, [r3, #0]
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007326:	1c9a      	adds	r2, r3, #2
 8007328:	68fb      	ldr	r3, [r7, #12]
 800732a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800732c:	68fb      	ldr	r3, [r7, #12]
 800732e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007330:	b29b      	uxth	r3, r3
 8007332:	3b02      	subs	r3, #2
 8007334:	b29a      	uxth	r2, r3
 8007336:	68fb      	ldr	r3, [r7, #12]
 8007338:	87da      	strh	r2, [r3, #62]	; 0x3e
 800733a:	e0b2      	b.n	80074a2 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800733c:	68fb      	ldr	r3, [r7, #12]
 800733e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	330c      	adds	r3, #12
 8007346:	7812      	ldrb	r2, [r2, #0]
 8007348:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800734a:	68fb      	ldr	r3, [r7, #12]
 800734c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800734e:	1c5a      	adds	r2, r3, #1
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007358:	b29b      	uxth	r3, r3
 800735a:	3b01      	subs	r3, #1
 800735c:	b29a      	uxth	r2, r3
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007362:	e09e      	b.n	80074a2 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007364:	68fb      	ldr	r3, [r7, #12]
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	689b      	ldr	r3, [r3, #8]
 800736a:	f003 0302 	and.w	r3, r3, #2
 800736e:	2b02      	cmp	r3, #2
 8007370:	d134      	bne.n	80073dc <HAL_SPI_TransmitReceive+0x30a>
 8007372:	68fb      	ldr	r3, [r7, #12]
 8007374:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007376:	b29b      	uxth	r3, r3
 8007378:	2b00      	cmp	r3, #0
 800737a:	d02f      	beq.n	80073dc <HAL_SPI_TransmitReceive+0x30a>
 800737c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800737e:	2b01      	cmp	r3, #1
 8007380:	d12c      	bne.n	80073dc <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8007382:	68fb      	ldr	r3, [r7, #12]
 8007384:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007386:	b29b      	uxth	r3, r3
 8007388:	2b01      	cmp	r3, #1
 800738a:	d912      	bls.n	80073b2 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800738c:	68fb      	ldr	r3, [r7, #12]
 800738e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007390:	881a      	ldrh	r2, [r3, #0]
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800739c:	1c9a      	adds	r2, r3, #2
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80073a2:	68fb      	ldr	r3, [r7, #12]
 80073a4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80073a6:	b29b      	uxth	r3, r3
 80073a8:	3b02      	subs	r3, #2
 80073aa:	b29a      	uxth	r2, r3
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	87da      	strh	r2, [r3, #62]	; 0x3e
 80073b0:	e012      	b.n	80073d8 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80073b2:	68fb      	ldr	r3, [r7, #12]
 80073b4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80073b6:	68fb      	ldr	r3, [r7, #12]
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	330c      	adds	r3, #12
 80073bc:	7812      	ldrb	r2, [r2, #0]
 80073be:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80073c0:	68fb      	ldr	r3, [r7, #12]
 80073c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073c4:	1c5a      	adds	r2, r3, #1
 80073c6:	68fb      	ldr	r3, [r7, #12]
 80073c8:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80073ce:	b29b      	uxth	r3, r3
 80073d0:	3b01      	subs	r3, #1
 80073d2:	b29a      	uxth	r2, r3
 80073d4:	68fb      	ldr	r3, [r7, #12]
 80073d6:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80073d8:	2300      	movs	r3, #0
 80073da:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	689b      	ldr	r3, [r3, #8]
 80073e2:	f003 0301 	and.w	r3, r3, #1
 80073e6:	2b01      	cmp	r3, #1
 80073e8:	d148      	bne.n	800747c <HAL_SPI_TransmitReceive+0x3aa>
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80073f0:	b29b      	uxth	r3, r3
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	d042      	beq.n	800747c <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 80073f6:	68fb      	ldr	r3, [r7, #12]
 80073f8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80073fc:	b29b      	uxth	r3, r3
 80073fe:	2b01      	cmp	r3, #1
 8007400:	d923      	bls.n	800744a <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007402:	68fb      	ldr	r3, [r7, #12]
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	68da      	ldr	r2, [r3, #12]
 8007408:	68fb      	ldr	r3, [r7, #12]
 800740a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800740c:	b292      	uxth	r2, r2
 800740e:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007414:	1c9a      	adds	r2, r3, #2
 8007416:	68fb      	ldr	r3, [r7, #12]
 8007418:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 800741a:	68fb      	ldr	r3, [r7, #12]
 800741c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007420:	b29b      	uxth	r3, r3
 8007422:	3b02      	subs	r3, #2
 8007424:	b29a      	uxth	r2, r3
 8007426:	68fb      	ldr	r3, [r7, #12]
 8007428:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007432:	b29b      	uxth	r3, r3
 8007434:	2b01      	cmp	r3, #1
 8007436:	d81f      	bhi.n	8007478 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	685a      	ldr	r2, [r3, #4]
 800743e:	68fb      	ldr	r3, [r7, #12]
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007446:	605a      	str	r2, [r3, #4]
 8007448:	e016      	b.n	8007478 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800744a:	68fb      	ldr	r3, [r7, #12]
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	f103 020c 	add.w	r2, r3, #12
 8007452:	68fb      	ldr	r3, [r7, #12]
 8007454:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007456:	7812      	ldrb	r2, [r2, #0]
 8007458:	b2d2      	uxtb	r2, r2
 800745a:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007460:	1c5a      	adds	r2, r3, #1
 8007462:	68fb      	ldr	r3, [r7, #12]
 8007464:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8007466:	68fb      	ldr	r3, [r7, #12]
 8007468:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800746c:	b29b      	uxth	r3, r3
 800746e:	3b01      	subs	r3, #1
 8007470:	b29a      	uxth	r2, r3
 8007472:	68fb      	ldr	r3, [r7, #12]
 8007474:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007478:	2301      	movs	r3, #1
 800747a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800747c:	f7fb fd12 	bl	8002ea4 <HAL_GetTick>
 8007480:	4602      	mov	r2, r0
 8007482:	69fb      	ldr	r3, [r7, #28]
 8007484:	1ad3      	subs	r3, r2, r3
 8007486:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007488:	429a      	cmp	r2, r3
 800748a:	d803      	bhi.n	8007494 <HAL_SPI_TransmitReceive+0x3c2>
 800748c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800748e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007492:	d102      	bne.n	800749a <HAL_SPI_TransmitReceive+0x3c8>
 8007494:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007496:	2b00      	cmp	r3, #0
 8007498:	d103      	bne.n	80074a2 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 800749a:	2303      	movs	r3, #3
 800749c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 80074a0:	e01c      	b.n	80074dc <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80074a2:	68fb      	ldr	r3, [r7, #12]
 80074a4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80074a6:	b29b      	uxth	r3, r3
 80074a8:	2b00      	cmp	r3, #0
 80074aa:	f47f af5b 	bne.w	8007364 <HAL_SPI_TransmitReceive+0x292>
 80074ae:	68fb      	ldr	r3, [r7, #12]
 80074b0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80074b4:	b29b      	uxth	r3, r3
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	f47f af54 	bne.w	8007364 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80074bc:	69fa      	ldr	r2, [r7, #28]
 80074be:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80074c0:	68f8      	ldr	r0, [r7, #12]
 80074c2:	f000 f987 	bl	80077d4 <SPI_EndRxTxTransaction>
 80074c6:	4603      	mov	r3, r0
 80074c8:	2b00      	cmp	r3, #0
 80074ca:	d006      	beq.n	80074da <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 80074cc:	2301      	movs	r3, #1
 80074ce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80074d2:	68fb      	ldr	r3, [r7, #12]
 80074d4:	2220      	movs	r2, #32
 80074d6:	661a      	str	r2, [r3, #96]	; 0x60
 80074d8:	e000      	b.n	80074dc <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 80074da:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80074dc:	68fb      	ldr	r3, [r7, #12]
 80074de:	2201      	movs	r2, #1
 80074e0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 80074e4:	68fb      	ldr	r3, [r7, #12]
 80074e6:	2200      	movs	r2, #0
 80074e8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80074ec:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 80074f0:	4618      	mov	r0, r3
 80074f2:	3728      	adds	r7, #40	; 0x28
 80074f4:	46bd      	mov	sp, r7
 80074f6:	bd80      	pop	{r7, pc}

080074f8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80074f8:	b580      	push	{r7, lr}
 80074fa:	b088      	sub	sp, #32
 80074fc:	af00      	add	r7, sp, #0
 80074fe:	60f8      	str	r0, [r7, #12]
 8007500:	60b9      	str	r1, [r7, #8]
 8007502:	603b      	str	r3, [r7, #0]
 8007504:	4613      	mov	r3, r2
 8007506:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8007508:	f7fb fccc 	bl	8002ea4 <HAL_GetTick>
 800750c:	4602      	mov	r2, r0
 800750e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007510:	1a9b      	subs	r3, r3, r2
 8007512:	683a      	ldr	r2, [r7, #0]
 8007514:	4413      	add	r3, r2
 8007516:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8007518:	f7fb fcc4 	bl	8002ea4 <HAL_GetTick>
 800751c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800751e:	4b39      	ldr	r3, [pc, #228]	; (8007604 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	015b      	lsls	r3, r3, #5
 8007524:	0d1b      	lsrs	r3, r3, #20
 8007526:	69fa      	ldr	r2, [r7, #28]
 8007528:	fb02 f303 	mul.w	r3, r2, r3
 800752c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800752e:	e054      	b.n	80075da <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007530:	683b      	ldr	r3, [r7, #0]
 8007532:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007536:	d050      	beq.n	80075da <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007538:	f7fb fcb4 	bl	8002ea4 <HAL_GetTick>
 800753c:	4602      	mov	r2, r0
 800753e:	69bb      	ldr	r3, [r7, #24]
 8007540:	1ad3      	subs	r3, r2, r3
 8007542:	69fa      	ldr	r2, [r7, #28]
 8007544:	429a      	cmp	r2, r3
 8007546:	d902      	bls.n	800754e <SPI_WaitFlagStateUntilTimeout+0x56>
 8007548:	69fb      	ldr	r3, [r7, #28]
 800754a:	2b00      	cmp	r3, #0
 800754c:	d13d      	bne.n	80075ca <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800754e:	68fb      	ldr	r3, [r7, #12]
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	685a      	ldr	r2, [r3, #4]
 8007554:	68fb      	ldr	r3, [r7, #12]
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800755c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800755e:	68fb      	ldr	r3, [r7, #12]
 8007560:	685b      	ldr	r3, [r3, #4]
 8007562:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007566:	d111      	bne.n	800758c <SPI_WaitFlagStateUntilTimeout+0x94>
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	689b      	ldr	r3, [r3, #8]
 800756c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007570:	d004      	beq.n	800757c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007572:	68fb      	ldr	r3, [r7, #12]
 8007574:	689b      	ldr	r3, [r3, #8]
 8007576:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800757a:	d107      	bne.n	800758c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800757c:	68fb      	ldr	r3, [r7, #12]
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	681a      	ldr	r2, [r3, #0]
 8007582:	68fb      	ldr	r3, [r7, #12]
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800758a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800758c:	68fb      	ldr	r3, [r7, #12]
 800758e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007590:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007594:	d10f      	bne.n	80075b6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8007596:	68fb      	ldr	r3, [r7, #12]
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	681a      	ldr	r2, [r3, #0]
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80075a4:	601a      	str	r2, [r3, #0]
 80075a6:	68fb      	ldr	r3, [r7, #12]
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	681a      	ldr	r2, [r3, #0]
 80075ac:	68fb      	ldr	r3, [r7, #12]
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80075b4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80075b6:	68fb      	ldr	r3, [r7, #12]
 80075b8:	2201      	movs	r2, #1
 80075ba:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80075be:	68fb      	ldr	r3, [r7, #12]
 80075c0:	2200      	movs	r2, #0
 80075c2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80075c6:	2303      	movs	r3, #3
 80075c8:	e017      	b.n	80075fa <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80075ca:	697b      	ldr	r3, [r7, #20]
 80075cc:	2b00      	cmp	r3, #0
 80075ce:	d101      	bne.n	80075d4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80075d0:	2300      	movs	r3, #0
 80075d2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80075d4:	697b      	ldr	r3, [r7, #20]
 80075d6:	3b01      	subs	r3, #1
 80075d8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	689a      	ldr	r2, [r3, #8]
 80075e0:	68bb      	ldr	r3, [r7, #8]
 80075e2:	4013      	ands	r3, r2
 80075e4:	68ba      	ldr	r2, [r7, #8]
 80075e6:	429a      	cmp	r2, r3
 80075e8:	bf0c      	ite	eq
 80075ea:	2301      	moveq	r3, #1
 80075ec:	2300      	movne	r3, #0
 80075ee:	b2db      	uxtb	r3, r3
 80075f0:	461a      	mov	r2, r3
 80075f2:	79fb      	ldrb	r3, [r7, #7]
 80075f4:	429a      	cmp	r2, r3
 80075f6:	d19b      	bne.n	8007530 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80075f8:	2300      	movs	r3, #0
}
 80075fa:	4618      	mov	r0, r3
 80075fc:	3720      	adds	r7, #32
 80075fe:	46bd      	mov	sp, r7
 8007600:	bd80      	pop	{r7, pc}
 8007602:	bf00      	nop
 8007604:	2000000c 	.word	0x2000000c

08007608 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007608:	b580      	push	{r7, lr}
 800760a:	b088      	sub	sp, #32
 800760c:	af00      	add	r7, sp, #0
 800760e:	60f8      	str	r0, [r7, #12]
 8007610:	60b9      	str	r1, [r7, #8]
 8007612:	607a      	str	r2, [r7, #4]
 8007614:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8007616:	f7fb fc45 	bl	8002ea4 <HAL_GetTick>
 800761a:	4602      	mov	r2, r0
 800761c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800761e:	1a9b      	subs	r3, r3, r2
 8007620:	683a      	ldr	r2, [r7, #0]
 8007622:	4413      	add	r3, r2
 8007624:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8007626:	f7fb fc3d 	bl	8002ea4 <HAL_GetTick>
 800762a:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800762c:	4b3c      	ldr	r3, [pc, #240]	; (8007720 <SPI_WaitFifoStateUntilTimeout+0x118>)
 800762e:	681a      	ldr	r2, [r3, #0]
 8007630:	4613      	mov	r3, r2
 8007632:	009b      	lsls	r3, r3, #2
 8007634:	4413      	add	r3, r2
 8007636:	00da      	lsls	r2, r3, #3
 8007638:	1ad3      	subs	r3, r2, r3
 800763a:	0d1b      	lsrs	r3, r3, #20
 800763c:	69fa      	ldr	r2, [r7, #28]
 800763e:	fb02 f303 	mul.w	r3, r2, r3
 8007642:	617b      	str	r3, [r7, #20]

  while ((hspi->Instance->SR & Fifo) != State)
 8007644:	e05f      	b.n	8007706 <SPI_WaitFifoStateUntilTimeout+0xfe>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8007646:	68bb      	ldr	r3, [r7, #8]
 8007648:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800764c:	d106      	bne.n	800765c <SPI_WaitFifoStateUntilTimeout+0x54>
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	2b00      	cmp	r3, #0
 8007652:	d103      	bne.n	800765c <SPI_WaitFifoStateUntilTimeout+0x54>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	330c      	adds	r3, #12
 800765a:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 800765c:	683b      	ldr	r3, [r7, #0]
 800765e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007662:	d050      	beq.n	8007706 <SPI_WaitFifoStateUntilTimeout+0xfe>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007664:	f7fb fc1e 	bl	8002ea4 <HAL_GetTick>
 8007668:	4602      	mov	r2, r0
 800766a:	69bb      	ldr	r3, [r7, #24]
 800766c:	1ad3      	subs	r3, r2, r3
 800766e:	69fa      	ldr	r2, [r7, #28]
 8007670:	429a      	cmp	r2, r3
 8007672:	d902      	bls.n	800767a <SPI_WaitFifoStateUntilTimeout+0x72>
 8007674:	69fb      	ldr	r3, [r7, #28]
 8007676:	2b00      	cmp	r3, #0
 8007678:	d13d      	bne.n	80076f6 <SPI_WaitFifoStateUntilTimeout+0xee>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800767a:	68fb      	ldr	r3, [r7, #12]
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	685a      	ldr	r2, [r3, #4]
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8007688:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800768a:	68fb      	ldr	r3, [r7, #12]
 800768c:	685b      	ldr	r3, [r3, #4]
 800768e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007692:	d111      	bne.n	80076b8 <SPI_WaitFifoStateUntilTimeout+0xb0>
 8007694:	68fb      	ldr	r3, [r7, #12]
 8007696:	689b      	ldr	r3, [r3, #8]
 8007698:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800769c:	d004      	beq.n	80076a8 <SPI_WaitFifoStateUntilTimeout+0xa0>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800769e:	68fb      	ldr	r3, [r7, #12]
 80076a0:	689b      	ldr	r3, [r3, #8]
 80076a2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80076a6:	d107      	bne.n	80076b8 <SPI_WaitFifoStateUntilTimeout+0xb0>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80076a8:	68fb      	ldr	r3, [r7, #12]
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	681a      	ldr	r2, [r3, #0]
 80076ae:	68fb      	ldr	r3, [r7, #12]
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80076b6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80076bc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80076c0:	d10f      	bne.n	80076e2 <SPI_WaitFifoStateUntilTimeout+0xda>
        {
          SPI_RESET_CRC(hspi);
 80076c2:	68fb      	ldr	r3, [r7, #12]
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	681a      	ldr	r2, [r3, #0]
 80076c8:	68fb      	ldr	r3, [r7, #12]
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80076d0:	601a      	str	r2, [r3, #0]
 80076d2:	68fb      	ldr	r3, [r7, #12]
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	681a      	ldr	r2, [r3, #0]
 80076d8:	68fb      	ldr	r3, [r7, #12]
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80076e0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80076e2:	68fb      	ldr	r3, [r7, #12]
 80076e4:	2201      	movs	r2, #1
 80076e6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80076ea:	68fb      	ldr	r3, [r7, #12]
 80076ec:	2200      	movs	r2, #0
 80076ee:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80076f2:	2303      	movs	r3, #3
 80076f4:	e010      	b.n	8007718 <SPI_WaitFifoStateUntilTimeout+0x110>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80076f6:	697b      	ldr	r3, [r7, #20]
 80076f8:	2b00      	cmp	r3, #0
 80076fa:	d101      	bne.n	8007700 <SPI_WaitFifoStateUntilTimeout+0xf8>
      {
        tmp_timeout = 0U;
 80076fc:	2300      	movs	r3, #0
 80076fe:	61fb      	str	r3, [r7, #28]
      }      
      count--;
 8007700:	697b      	ldr	r3, [r7, #20]
 8007702:	3b01      	subs	r3, #1
 8007704:	617b      	str	r3, [r7, #20]
  while ((hspi->Instance->SR & Fifo) != State)
 8007706:	68fb      	ldr	r3, [r7, #12]
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	689a      	ldr	r2, [r3, #8]
 800770c:	68bb      	ldr	r3, [r7, #8]
 800770e:	4013      	ands	r3, r2
 8007710:	687a      	ldr	r2, [r7, #4]
 8007712:	429a      	cmp	r2, r3
 8007714:	d197      	bne.n	8007646 <SPI_WaitFifoStateUntilTimeout+0x3e>
    }
  }

  return HAL_OK;
 8007716:	2300      	movs	r3, #0
}
 8007718:	4618      	mov	r0, r3
 800771a:	3720      	adds	r7, #32
 800771c:	46bd      	mov	sp, r7
 800771e:	bd80      	pop	{r7, pc}
 8007720:	2000000c 	.word	0x2000000c

08007724 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8007724:	b580      	push	{r7, lr}
 8007726:	b086      	sub	sp, #24
 8007728:	af02      	add	r7, sp, #8
 800772a:	60f8      	str	r0, [r7, #12]
 800772c:	60b9      	str	r1, [r7, #8]
 800772e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007730:	68fb      	ldr	r3, [r7, #12]
 8007732:	685b      	ldr	r3, [r3, #4]
 8007734:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007738:	d111      	bne.n	800775e <SPI_EndRxTransaction+0x3a>
 800773a:	68fb      	ldr	r3, [r7, #12]
 800773c:	689b      	ldr	r3, [r3, #8]
 800773e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007742:	d004      	beq.n	800774e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	689b      	ldr	r3, [r3, #8]
 8007748:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800774c:	d107      	bne.n	800775e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800774e:	68fb      	ldr	r3, [r7, #12]
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	681a      	ldr	r2, [r3, #0]
 8007754:	68fb      	ldr	r3, [r7, #12]
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800775c:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	9300      	str	r3, [sp, #0]
 8007762:	68bb      	ldr	r3, [r7, #8]
 8007764:	2200      	movs	r2, #0
 8007766:	2180      	movs	r1, #128	; 0x80
 8007768:	68f8      	ldr	r0, [r7, #12]
 800776a:	f7ff fec5 	bl	80074f8 <SPI_WaitFlagStateUntilTimeout>
 800776e:	4603      	mov	r3, r0
 8007770:	2b00      	cmp	r3, #0
 8007772:	d007      	beq.n	8007784 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007778:	f043 0220 	orr.w	r2, r3, #32
 800777c:	68fb      	ldr	r3, [r7, #12]
 800777e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8007780:	2303      	movs	r3, #3
 8007782:	e023      	b.n	80077cc <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007784:	68fb      	ldr	r3, [r7, #12]
 8007786:	685b      	ldr	r3, [r3, #4]
 8007788:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800778c:	d11d      	bne.n	80077ca <SPI_EndRxTransaction+0xa6>
 800778e:	68fb      	ldr	r3, [r7, #12]
 8007790:	689b      	ldr	r3, [r3, #8]
 8007792:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007796:	d004      	beq.n	80077a2 <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007798:	68fb      	ldr	r3, [r7, #12]
 800779a:	689b      	ldr	r3, [r3, #8]
 800779c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80077a0:	d113      	bne.n	80077ca <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	9300      	str	r3, [sp, #0]
 80077a6:	68bb      	ldr	r3, [r7, #8]
 80077a8:	2200      	movs	r2, #0
 80077aa:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80077ae:	68f8      	ldr	r0, [r7, #12]
 80077b0:	f7ff ff2a 	bl	8007608 <SPI_WaitFifoStateUntilTimeout>
 80077b4:	4603      	mov	r3, r0
 80077b6:	2b00      	cmp	r3, #0
 80077b8:	d007      	beq.n	80077ca <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80077ba:	68fb      	ldr	r3, [r7, #12]
 80077bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80077be:	f043 0220 	orr.w	r2, r3, #32
 80077c2:	68fb      	ldr	r3, [r7, #12]
 80077c4:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 80077c6:	2303      	movs	r3, #3
 80077c8:	e000      	b.n	80077cc <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 80077ca:	2300      	movs	r3, #0
}
 80077cc:	4618      	mov	r0, r3
 80077ce:	3710      	adds	r7, #16
 80077d0:	46bd      	mov	sp, r7
 80077d2:	bd80      	pop	{r7, pc}

080077d4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80077d4:	b580      	push	{r7, lr}
 80077d6:	b086      	sub	sp, #24
 80077d8:	af02      	add	r7, sp, #8
 80077da:	60f8      	str	r0, [r7, #12]
 80077dc:	60b9      	str	r1, [r7, #8]
 80077de:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	9300      	str	r3, [sp, #0]
 80077e4:	68bb      	ldr	r3, [r7, #8]
 80077e6:	2200      	movs	r2, #0
 80077e8:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 80077ec:	68f8      	ldr	r0, [r7, #12]
 80077ee:	f7ff ff0b 	bl	8007608 <SPI_WaitFifoStateUntilTimeout>
 80077f2:	4603      	mov	r3, r0
 80077f4:	2b00      	cmp	r3, #0
 80077f6:	d007      	beq.n	8007808 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80077fc:	f043 0220 	orr.w	r2, r3, #32
 8007800:	68fb      	ldr	r3, [r7, #12]
 8007802:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8007804:	2303      	movs	r3, #3
 8007806:	e027      	b.n	8007858 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	9300      	str	r3, [sp, #0]
 800780c:	68bb      	ldr	r3, [r7, #8]
 800780e:	2200      	movs	r2, #0
 8007810:	2180      	movs	r1, #128	; 0x80
 8007812:	68f8      	ldr	r0, [r7, #12]
 8007814:	f7ff fe70 	bl	80074f8 <SPI_WaitFlagStateUntilTimeout>
 8007818:	4603      	mov	r3, r0
 800781a:	2b00      	cmp	r3, #0
 800781c:	d007      	beq.n	800782e <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800781e:	68fb      	ldr	r3, [r7, #12]
 8007820:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007822:	f043 0220 	orr.w	r2, r3, #32
 8007826:	68fb      	ldr	r3, [r7, #12]
 8007828:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800782a:	2303      	movs	r3, #3
 800782c:	e014      	b.n	8007858 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	9300      	str	r3, [sp, #0]
 8007832:	68bb      	ldr	r3, [r7, #8]
 8007834:	2200      	movs	r2, #0
 8007836:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800783a:	68f8      	ldr	r0, [r7, #12]
 800783c:	f7ff fee4 	bl	8007608 <SPI_WaitFifoStateUntilTimeout>
 8007840:	4603      	mov	r3, r0
 8007842:	2b00      	cmp	r3, #0
 8007844:	d007      	beq.n	8007856 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007846:	68fb      	ldr	r3, [r7, #12]
 8007848:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800784a:	f043 0220 	orr.w	r2, r3, #32
 800784e:	68fb      	ldr	r3, [r7, #12]
 8007850:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8007852:	2303      	movs	r3, #3
 8007854:	e000      	b.n	8007858 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8007856:	2300      	movs	r3, #0
}
 8007858:	4618      	mov	r0, r3
 800785a:	3710      	adds	r7, #16
 800785c:	46bd      	mov	sp, r7
 800785e:	bd80      	pop	{r7, pc}

08007860 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8007860:	b480      	push	{r7}
 8007862:	b085      	sub	sp, #20
 8007864:	af00      	add	r7, sp, #0
 8007866:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	2200      	movs	r2, #0
 800786c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8007870:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8007874:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8007876:	68fb      	ldr	r3, [r7, #12]
 8007878:	b29a      	uxth	r2, r3
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8007880:	2300      	movs	r3, #0
}
 8007882:	4618      	mov	r0, r3
 8007884:	3714      	adds	r7, #20
 8007886:	46bd      	mov	sp, r7
 8007888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800788c:	4770      	bx	lr

0800788e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800788e:	b480      	push	{r7}
 8007890:	b085      	sub	sp, #20
 8007892:	af00      	add	r7, sp, #0
 8007894:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8007896:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 800789a:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80078a2:	b29a      	uxth	r2, r3
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	b29b      	uxth	r3, r3
 80078a8:	43db      	mvns	r3, r3
 80078aa:	b29b      	uxth	r3, r3
 80078ac:	4013      	ands	r3, r2
 80078ae:	b29a      	uxth	r2, r3
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80078b6:	2300      	movs	r3, #0
}
 80078b8:	4618      	mov	r0, r3
 80078ba:	3714      	adds	r7, #20
 80078bc:	46bd      	mov	sp, r7
 80078be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078c2:	4770      	bx	lr

080078c4 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80078c4:	b084      	sub	sp, #16
 80078c6:	b480      	push	{r7}
 80078c8:	b083      	sub	sp, #12
 80078ca:	af00      	add	r7, sp, #0
 80078cc:	6078      	str	r0, [r7, #4]
 80078ce:	f107 0014 	add.w	r0, r7, #20
 80078d2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	2201      	movs	r2, #1
 80078da:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	2200      	movs	r2, #0
 80078e2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	2200      	movs	r2, #0
 80078ea:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	2200      	movs	r2, #0
 80078f2:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 80078f6:	2300      	movs	r3, #0
}
 80078f8:	4618      	mov	r0, r3
 80078fa:	370c      	adds	r7, #12
 80078fc:	46bd      	mov	sp, r7
 80078fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007902:	b004      	add	sp, #16
 8007904:	4770      	bx	lr
	...

08007908 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007908:	b480      	push	{r7}
 800790a:	b09b      	sub	sp, #108	; 0x6c
 800790c:	af00      	add	r7, sp, #0
 800790e:	6078      	str	r0, [r7, #4]
 8007910:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8007912:	2300      	movs	r3, #0
 8007914:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8007918:	687a      	ldr	r2, [r7, #4]
 800791a:	683b      	ldr	r3, [r7, #0]
 800791c:	781b      	ldrb	r3, [r3, #0]
 800791e:	009b      	lsls	r3, r3, #2
 8007920:	4413      	add	r3, r2
 8007922:	881b      	ldrh	r3, [r3, #0]
 8007924:	b29b      	uxth	r3, r3
 8007926:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 800792a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800792e:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 8007932:	683b      	ldr	r3, [r7, #0]
 8007934:	78db      	ldrb	r3, [r3, #3]
 8007936:	2b03      	cmp	r3, #3
 8007938:	d81f      	bhi.n	800797a <USB_ActivateEndpoint+0x72>
 800793a:	a201      	add	r2, pc, #4	; (adr r2, 8007940 <USB_ActivateEndpoint+0x38>)
 800793c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007940:	08007951 	.word	0x08007951
 8007944:	0800796d 	.word	0x0800796d
 8007948:	08007983 	.word	0x08007983
 800794c:	0800795f 	.word	0x0800795f
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8007950:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8007954:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8007958:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 800795c:	e012      	b.n	8007984 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800795e:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8007962:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8007966:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 800796a:	e00b      	b.n	8007984 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 800796c:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8007970:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8007974:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8007978:	e004      	b.n	8007984 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 800797a:	2301      	movs	r3, #1
 800797c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 8007980:	e000      	b.n	8007984 <USB_ActivateEndpoint+0x7c>
      break;
 8007982:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8007984:	687a      	ldr	r2, [r7, #4]
 8007986:	683b      	ldr	r3, [r7, #0]
 8007988:	781b      	ldrb	r3, [r3, #0]
 800798a:	009b      	lsls	r3, r3, #2
 800798c:	441a      	add	r2, r3
 800798e:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8007992:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007996:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800799a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800799e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80079a2:	b29b      	uxth	r3, r3
 80079a4:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 80079a6:	687a      	ldr	r2, [r7, #4]
 80079a8:	683b      	ldr	r3, [r7, #0]
 80079aa:	781b      	ldrb	r3, [r3, #0]
 80079ac:	009b      	lsls	r3, r3, #2
 80079ae:	4413      	add	r3, r2
 80079b0:	881b      	ldrh	r3, [r3, #0]
 80079b2:	b29b      	uxth	r3, r3
 80079b4:	b21b      	sxth	r3, r3
 80079b6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80079ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80079be:	b21a      	sxth	r2, r3
 80079c0:	683b      	ldr	r3, [r7, #0]
 80079c2:	781b      	ldrb	r3, [r3, #0]
 80079c4:	b21b      	sxth	r3, r3
 80079c6:	4313      	orrs	r3, r2
 80079c8:	b21b      	sxth	r3, r3
 80079ca:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 80079ce:	687a      	ldr	r2, [r7, #4]
 80079d0:	683b      	ldr	r3, [r7, #0]
 80079d2:	781b      	ldrb	r3, [r3, #0]
 80079d4:	009b      	lsls	r3, r3, #2
 80079d6:	441a      	add	r2, r3
 80079d8:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 80079dc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80079e0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80079e4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80079e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80079ec:	b29b      	uxth	r3, r3
 80079ee:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 80079f0:	683b      	ldr	r3, [r7, #0]
 80079f2:	7b1b      	ldrb	r3, [r3, #12]
 80079f4:	2b00      	cmp	r3, #0
 80079f6:	f040 8149 	bne.w	8007c8c <USB_ActivateEndpoint+0x384>
  {
    if (ep->is_in != 0U)
 80079fa:	683b      	ldr	r3, [r7, #0]
 80079fc:	785b      	ldrb	r3, [r3, #1]
 80079fe:	2b00      	cmp	r3, #0
 8007a00:	f000 8084 	beq.w	8007b0c <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	617b      	str	r3, [r7, #20]
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007a0e:	b29b      	uxth	r3, r3
 8007a10:	461a      	mov	r2, r3
 8007a12:	697b      	ldr	r3, [r7, #20]
 8007a14:	4413      	add	r3, r2
 8007a16:	617b      	str	r3, [r7, #20]
 8007a18:	683b      	ldr	r3, [r7, #0]
 8007a1a:	781b      	ldrb	r3, [r3, #0]
 8007a1c:	011a      	lsls	r2, r3, #4
 8007a1e:	697b      	ldr	r3, [r7, #20]
 8007a20:	4413      	add	r3, r2
 8007a22:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007a26:	613b      	str	r3, [r7, #16]
 8007a28:	683b      	ldr	r3, [r7, #0]
 8007a2a:	88db      	ldrh	r3, [r3, #6]
 8007a2c:	085b      	lsrs	r3, r3, #1
 8007a2e:	b29b      	uxth	r3, r3
 8007a30:	005b      	lsls	r3, r3, #1
 8007a32:	b29a      	uxth	r2, r3
 8007a34:	693b      	ldr	r3, [r7, #16]
 8007a36:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007a38:	687a      	ldr	r2, [r7, #4]
 8007a3a:	683b      	ldr	r3, [r7, #0]
 8007a3c:	781b      	ldrb	r3, [r3, #0]
 8007a3e:	009b      	lsls	r3, r3, #2
 8007a40:	4413      	add	r3, r2
 8007a42:	881b      	ldrh	r3, [r3, #0]
 8007a44:	81fb      	strh	r3, [r7, #14]
 8007a46:	89fb      	ldrh	r3, [r7, #14]
 8007a48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007a4c:	2b00      	cmp	r3, #0
 8007a4e:	d01b      	beq.n	8007a88 <USB_ActivateEndpoint+0x180>
 8007a50:	687a      	ldr	r2, [r7, #4]
 8007a52:	683b      	ldr	r3, [r7, #0]
 8007a54:	781b      	ldrb	r3, [r3, #0]
 8007a56:	009b      	lsls	r3, r3, #2
 8007a58:	4413      	add	r3, r2
 8007a5a:	881b      	ldrh	r3, [r3, #0]
 8007a5c:	b29b      	uxth	r3, r3
 8007a5e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007a62:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007a66:	81bb      	strh	r3, [r7, #12]
 8007a68:	687a      	ldr	r2, [r7, #4]
 8007a6a:	683b      	ldr	r3, [r7, #0]
 8007a6c:	781b      	ldrb	r3, [r3, #0]
 8007a6e:	009b      	lsls	r3, r3, #2
 8007a70:	441a      	add	r2, r3
 8007a72:	89bb      	ldrh	r3, [r7, #12]
 8007a74:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007a78:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007a7c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007a80:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007a84:	b29b      	uxth	r3, r3
 8007a86:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007a88:	683b      	ldr	r3, [r7, #0]
 8007a8a:	78db      	ldrb	r3, [r3, #3]
 8007a8c:	2b01      	cmp	r3, #1
 8007a8e:	d020      	beq.n	8007ad2 <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8007a90:	687a      	ldr	r2, [r7, #4]
 8007a92:	683b      	ldr	r3, [r7, #0]
 8007a94:	781b      	ldrb	r3, [r3, #0]
 8007a96:	009b      	lsls	r3, r3, #2
 8007a98:	4413      	add	r3, r2
 8007a9a:	881b      	ldrh	r3, [r3, #0]
 8007a9c:	b29b      	uxth	r3, r3
 8007a9e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007aa2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007aa6:	813b      	strh	r3, [r7, #8]
 8007aa8:	893b      	ldrh	r3, [r7, #8]
 8007aaa:	f083 0320 	eor.w	r3, r3, #32
 8007aae:	813b      	strh	r3, [r7, #8]
 8007ab0:	687a      	ldr	r2, [r7, #4]
 8007ab2:	683b      	ldr	r3, [r7, #0]
 8007ab4:	781b      	ldrb	r3, [r3, #0]
 8007ab6:	009b      	lsls	r3, r3, #2
 8007ab8:	441a      	add	r2, r3
 8007aba:	893b      	ldrh	r3, [r7, #8]
 8007abc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007ac0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007ac4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007ac8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007acc:	b29b      	uxth	r3, r3
 8007ace:	8013      	strh	r3, [r2, #0]
 8007ad0:	e27f      	b.n	8007fd2 <USB_ActivateEndpoint+0x6ca>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007ad2:	687a      	ldr	r2, [r7, #4]
 8007ad4:	683b      	ldr	r3, [r7, #0]
 8007ad6:	781b      	ldrb	r3, [r3, #0]
 8007ad8:	009b      	lsls	r3, r3, #2
 8007ada:	4413      	add	r3, r2
 8007adc:	881b      	ldrh	r3, [r3, #0]
 8007ade:	b29b      	uxth	r3, r3
 8007ae0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007ae4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007ae8:	817b      	strh	r3, [r7, #10]
 8007aea:	687a      	ldr	r2, [r7, #4]
 8007aec:	683b      	ldr	r3, [r7, #0]
 8007aee:	781b      	ldrb	r3, [r3, #0]
 8007af0:	009b      	lsls	r3, r3, #2
 8007af2:	441a      	add	r2, r3
 8007af4:	897b      	ldrh	r3, [r7, #10]
 8007af6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007afa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007afe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007b02:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007b06:	b29b      	uxth	r3, r3
 8007b08:	8013      	strh	r3, [r2, #0]
 8007b0a:	e262      	b.n	8007fd2 <USB_ActivateEndpoint+0x6ca>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007b16:	b29b      	uxth	r3, r3
 8007b18:	461a      	mov	r2, r3
 8007b1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b1c:	4413      	add	r3, r2
 8007b1e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007b20:	683b      	ldr	r3, [r7, #0]
 8007b22:	781b      	ldrb	r3, [r3, #0]
 8007b24:	011a      	lsls	r2, r3, #4
 8007b26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b28:	4413      	add	r3, r2
 8007b2a:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8007b2e:	62bb      	str	r3, [r7, #40]	; 0x28
 8007b30:	683b      	ldr	r3, [r7, #0]
 8007b32:	88db      	ldrh	r3, [r3, #6]
 8007b34:	085b      	lsrs	r3, r3, #1
 8007b36:	b29b      	uxth	r3, r3
 8007b38:	005b      	lsls	r3, r3, #1
 8007b3a:	b29a      	uxth	r2, r3
 8007b3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b3e:	801a      	strh	r2, [r3, #0]

      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	627b      	str	r3, [r7, #36]	; 0x24
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007b4a:	b29b      	uxth	r3, r3
 8007b4c:	461a      	mov	r2, r3
 8007b4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b50:	4413      	add	r3, r2
 8007b52:	627b      	str	r3, [r7, #36]	; 0x24
 8007b54:	683b      	ldr	r3, [r7, #0]
 8007b56:	781b      	ldrb	r3, [r3, #0]
 8007b58:	011a      	lsls	r2, r3, #4
 8007b5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b5c:	4413      	add	r3, r2
 8007b5e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007b62:	623b      	str	r3, [r7, #32]
 8007b64:	683b      	ldr	r3, [r7, #0]
 8007b66:	691b      	ldr	r3, [r3, #16]
 8007b68:	2b00      	cmp	r3, #0
 8007b6a:	d112      	bne.n	8007b92 <USB_ActivateEndpoint+0x28a>
 8007b6c:	6a3b      	ldr	r3, [r7, #32]
 8007b6e:	881b      	ldrh	r3, [r3, #0]
 8007b70:	b29b      	uxth	r3, r3
 8007b72:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007b76:	b29a      	uxth	r2, r3
 8007b78:	6a3b      	ldr	r3, [r7, #32]
 8007b7a:	801a      	strh	r2, [r3, #0]
 8007b7c:	6a3b      	ldr	r3, [r7, #32]
 8007b7e:	881b      	ldrh	r3, [r3, #0]
 8007b80:	b29b      	uxth	r3, r3
 8007b82:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007b86:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007b8a:	b29a      	uxth	r2, r3
 8007b8c:	6a3b      	ldr	r3, [r7, #32]
 8007b8e:	801a      	strh	r2, [r3, #0]
 8007b90:	e02f      	b.n	8007bf2 <USB_ActivateEndpoint+0x2ea>
 8007b92:	683b      	ldr	r3, [r7, #0]
 8007b94:	691b      	ldr	r3, [r3, #16]
 8007b96:	2b3e      	cmp	r3, #62	; 0x3e
 8007b98:	d813      	bhi.n	8007bc2 <USB_ActivateEndpoint+0x2ba>
 8007b9a:	683b      	ldr	r3, [r7, #0]
 8007b9c:	691b      	ldr	r3, [r3, #16]
 8007b9e:	085b      	lsrs	r3, r3, #1
 8007ba0:	663b      	str	r3, [r7, #96]	; 0x60
 8007ba2:	683b      	ldr	r3, [r7, #0]
 8007ba4:	691b      	ldr	r3, [r3, #16]
 8007ba6:	f003 0301 	and.w	r3, r3, #1
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	d002      	beq.n	8007bb4 <USB_ActivateEndpoint+0x2ac>
 8007bae:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007bb0:	3301      	adds	r3, #1
 8007bb2:	663b      	str	r3, [r7, #96]	; 0x60
 8007bb4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007bb6:	b29b      	uxth	r3, r3
 8007bb8:	029b      	lsls	r3, r3, #10
 8007bba:	b29a      	uxth	r2, r3
 8007bbc:	6a3b      	ldr	r3, [r7, #32]
 8007bbe:	801a      	strh	r2, [r3, #0]
 8007bc0:	e017      	b.n	8007bf2 <USB_ActivateEndpoint+0x2ea>
 8007bc2:	683b      	ldr	r3, [r7, #0]
 8007bc4:	691b      	ldr	r3, [r3, #16]
 8007bc6:	095b      	lsrs	r3, r3, #5
 8007bc8:	663b      	str	r3, [r7, #96]	; 0x60
 8007bca:	683b      	ldr	r3, [r7, #0]
 8007bcc:	691b      	ldr	r3, [r3, #16]
 8007bce:	f003 031f 	and.w	r3, r3, #31
 8007bd2:	2b00      	cmp	r3, #0
 8007bd4:	d102      	bne.n	8007bdc <USB_ActivateEndpoint+0x2d4>
 8007bd6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007bd8:	3b01      	subs	r3, #1
 8007bda:	663b      	str	r3, [r7, #96]	; 0x60
 8007bdc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007bde:	b29b      	uxth	r3, r3
 8007be0:	029b      	lsls	r3, r3, #10
 8007be2:	b29b      	uxth	r3, r3
 8007be4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007be8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007bec:	b29a      	uxth	r2, r3
 8007bee:	6a3b      	ldr	r3, [r7, #32]
 8007bf0:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007bf2:	687a      	ldr	r2, [r7, #4]
 8007bf4:	683b      	ldr	r3, [r7, #0]
 8007bf6:	781b      	ldrb	r3, [r3, #0]
 8007bf8:	009b      	lsls	r3, r3, #2
 8007bfa:	4413      	add	r3, r2
 8007bfc:	881b      	ldrh	r3, [r3, #0]
 8007bfe:	83fb      	strh	r3, [r7, #30]
 8007c00:	8bfb      	ldrh	r3, [r7, #30]
 8007c02:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007c06:	2b00      	cmp	r3, #0
 8007c08:	d01b      	beq.n	8007c42 <USB_ActivateEndpoint+0x33a>
 8007c0a:	687a      	ldr	r2, [r7, #4]
 8007c0c:	683b      	ldr	r3, [r7, #0]
 8007c0e:	781b      	ldrb	r3, [r3, #0]
 8007c10:	009b      	lsls	r3, r3, #2
 8007c12:	4413      	add	r3, r2
 8007c14:	881b      	ldrh	r3, [r3, #0]
 8007c16:	b29b      	uxth	r3, r3
 8007c18:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007c1c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007c20:	83bb      	strh	r3, [r7, #28]
 8007c22:	687a      	ldr	r2, [r7, #4]
 8007c24:	683b      	ldr	r3, [r7, #0]
 8007c26:	781b      	ldrb	r3, [r3, #0]
 8007c28:	009b      	lsls	r3, r3, #2
 8007c2a:	441a      	add	r2, r3
 8007c2c:	8bbb      	ldrh	r3, [r7, #28]
 8007c2e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007c32:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007c36:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007c3a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007c3e:	b29b      	uxth	r3, r3
 8007c40:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007c42:	687a      	ldr	r2, [r7, #4]
 8007c44:	683b      	ldr	r3, [r7, #0]
 8007c46:	781b      	ldrb	r3, [r3, #0]
 8007c48:	009b      	lsls	r3, r3, #2
 8007c4a:	4413      	add	r3, r2
 8007c4c:	881b      	ldrh	r3, [r3, #0]
 8007c4e:	b29b      	uxth	r3, r3
 8007c50:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007c54:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007c58:	837b      	strh	r3, [r7, #26]
 8007c5a:	8b7b      	ldrh	r3, [r7, #26]
 8007c5c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8007c60:	837b      	strh	r3, [r7, #26]
 8007c62:	8b7b      	ldrh	r3, [r7, #26]
 8007c64:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8007c68:	837b      	strh	r3, [r7, #26]
 8007c6a:	687a      	ldr	r2, [r7, #4]
 8007c6c:	683b      	ldr	r3, [r7, #0]
 8007c6e:	781b      	ldrb	r3, [r3, #0]
 8007c70:	009b      	lsls	r3, r3, #2
 8007c72:	441a      	add	r2, r3
 8007c74:	8b7b      	ldrh	r3, [r7, #26]
 8007c76:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007c7a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007c7e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007c82:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007c86:	b29b      	uxth	r3, r3
 8007c88:	8013      	strh	r3, [r2, #0]
 8007c8a:	e1a2      	b.n	8007fd2 <USB_ActivateEndpoint+0x6ca>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 8007c8c:	687a      	ldr	r2, [r7, #4]
 8007c8e:	683b      	ldr	r3, [r7, #0]
 8007c90:	781b      	ldrb	r3, [r3, #0]
 8007c92:	009b      	lsls	r3, r3, #2
 8007c94:	4413      	add	r3, r2
 8007c96:	881b      	ldrh	r3, [r3, #0]
 8007c98:	b29b      	uxth	r3, r3
 8007c9a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007c9e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007ca2:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 8007ca6:	687a      	ldr	r2, [r7, #4]
 8007ca8:	683b      	ldr	r3, [r7, #0]
 8007caa:	781b      	ldrb	r3, [r3, #0]
 8007cac:	009b      	lsls	r3, r3, #2
 8007cae:	441a      	add	r2, r3
 8007cb0:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8007cb4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007cb8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007cbc:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8007cc0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007cc4:	b29b      	uxth	r3, r3
 8007cc6:	8013      	strh	r3, [r2, #0]

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	65bb      	str	r3, [r7, #88]	; 0x58
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007cd2:	b29b      	uxth	r3, r3
 8007cd4:	461a      	mov	r2, r3
 8007cd6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007cd8:	4413      	add	r3, r2
 8007cda:	65bb      	str	r3, [r7, #88]	; 0x58
 8007cdc:	683b      	ldr	r3, [r7, #0]
 8007cde:	781b      	ldrb	r3, [r3, #0]
 8007ce0:	011a      	lsls	r2, r3, #4
 8007ce2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007ce4:	4413      	add	r3, r2
 8007ce6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007cea:	657b      	str	r3, [r7, #84]	; 0x54
 8007cec:	683b      	ldr	r3, [r7, #0]
 8007cee:	891b      	ldrh	r3, [r3, #8]
 8007cf0:	085b      	lsrs	r3, r3, #1
 8007cf2:	b29b      	uxth	r3, r3
 8007cf4:	005b      	lsls	r3, r3, #1
 8007cf6:	b29a      	uxth	r2, r3
 8007cf8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007cfa:	801a      	strh	r2, [r3, #0]
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	653b      	str	r3, [r7, #80]	; 0x50
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007d06:	b29b      	uxth	r3, r3
 8007d08:	461a      	mov	r2, r3
 8007d0a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007d0c:	4413      	add	r3, r2
 8007d0e:	653b      	str	r3, [r7, #80]	; 0x50
 8007d10:	683b      	ldr	r3, [r7, #0]
 8007d12:	781b      	ldrb	r3, [r3, #0]
 8007d14:	011a      	lsls	r2, r3, #4
 8007d16:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007d18:	4413      	add	r3, r2
 8007d1a:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8007d1e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007d20:	683b      	ldr	r3, [r7, #0]
 8007d22:	895b      	ldrh	r3, [r3, #10]
 8007d24:	085b      	lsrs	r3, r3, #1
 8007d26:	b29b      	uxth	r3, r3
 8007d28:	005b      	lsls	r3, r3, #1
 8007d2a:	b29a      	uxth	r2, r3
 8007d2c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007d2e:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8007d30:	683b      	ldr	r3, [r7, #0]
 8007d32:	785b      	ldrb	r3, [r3, #1]
 8007d34:	2b00      	cmp	r3, #0
 8007d36:	f040 8091 	bne.w	8007e5c <USB_ActivateEndpoint+0x554>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007d3a:	687a      	ldr	r2, [r7, #4]
 8007d3c:	683b      	ldr	r3, [r7, #0]
 8007d3e:	781b      	ldrb	r3, [r3, #0]
 8007d40:	009b      	lsls	r3, r3, #2
 8007d42:	4413      	add	r3, r2
 8007d44:	881b      	ldrh	r3, [r3, #0]
 8007d46:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8007d48:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8007d4a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007d4e:	2b00      	cmp	r3, #0
 8007d50:	d01b      	beq.n	8007d8a <USB_ActivateEndpoint+0x482>
 8007d52:	687a      	ldr	r2, [r7, #4]
 8007d54:	683b      	ldr	r3, [r7, #0]
 8007d56:	781b      	ldrb	r3, [r3, #0]
 8007d58:	009b      	lsls	r3, r3, #2
 8007d5a:	4413      	add	r3, r2
 8007d5c:	881b      	ldrh	r3, [r3, #0]
 8007d5e:	b29b      	uxth	r3, r3
 8007d60:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007d64:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007d68:	877b      	strh	r3, [r7, #58]	; 0x3a
 8007d6a:	687a      	ldr	r2, [r7, #4]
 8007d6c:	683b      	ldr	r3, [r7, #0]
 8007d6e:	781b      	ldrb	r3, [r3, #0]
 8007d70:	009b      	lsls	r3, r3, #2
 8007d72:	441a      	add	r2, r3
 8007d74:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8007d76:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007d7a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007d7e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007d82:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007d86:	b29b      	uxth	r3, r3
 8007d88:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007d8a:	687a      	ldr	r2, [r7, #4]
 8007d8c:	683b      	ldr	r3, [r7, #0]
 8007d8e:	781b      	ldrb	r3, [r3, #0]
 8007d90:	009b      	lsls	r3, r3, #2
 8007d92:	4413      	add	r3, r2
 8007d94:	881b      	ldrh	r3, [r3, #0]
 8007d96:	873b      	strh	r3, [r7, #56]	; 0x38
 8007d98:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8007d9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007d9e:	2b00      	cmp	r3, #0
 8007da0:	d01b      	beq.n	8007dda <USB_ActivateEndpoint+0x4d2>
 8007da2:	687a      	ldr	r2, [r7, #4]
 8007da4:	683b      	ldr	r3, [r7, #0]
 8007da6:	781b      	ldrb	r3, [r3, #0]
 8007da8:	009b      	lsls	r3, r3, #2
 8007daa:	4413      	add	r3, r2
 8007dac:	881b      	ldrh	r3, [r3, #0]
 8007dae:	b29b      	uxth	r3, r3
 8007db0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007db4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007db8:	86fb      	strh	r3, [r7, #54]	; 0x36
 8007dba:	687a      	ldr	r2, [r7, #4]
 8007dbc:	683b      	ldr	r3, [r7, #0]
 8007dbe:	781b      	ldrb	r3, [r3, #0]
 8007dc0:	009b      	lsls	r3, r3, #2
 8007dc2:	441a      	add	r2, r3
 8007dc4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8007dc6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007dca:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007dce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007dd2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007dd6:	b29b      	uxth	r3, r3
 8007dd8:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007dda:	687a      	ldr	r2, [r7, #4]
 8007ddc:	683b      	ldr	r3, [r7, #0]
 8007dde:	781b      	ldrb	r3, [r3, #0]
 8007de0:	009b      	lsls	r3, r3, #2
 8007de2:	4413      	add	r3, r2
 8007de4:	881b      	ldrh	r3, [r3, #0]
 8007de6:	b29b      	uxth	r3, r3
 8007de8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007dec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007df0:	86bb      	strh	r3, [r7, #52]	; 0x34
 8007df2:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8007df4:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8007df8:	86bb      	strh	r3, [r7, #52]	; 0x34
 8007dfa:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8007dfc:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8007e00:	86bb      	strh	r3, [r7, #52]	; 0x34
 8007e02:	687a      	ldr	r2, [r7, #4]
 8007e04:	683b      	ldr	r3, [r7, #0]
 8007e06:	781b      	ldrb	r3, [r3, #0]
 8007e08:	009b      	lsls	r3, r3, #2
 8007e0a:	441a      	add	r2, r3
 8007e0c:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8007e0e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007e12:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007e16:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007e1a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007e1e:	b29b      	uxth	r3, r3
 8007e20:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007e22:	687a      	ldr	r2, [r7, #4]
 8007e24:	683b      	ldr	r3, [r7, #0]
 8007e26:	781b      	ldrb	r3, [r3, #0]
 8007e28:	009b      	lsls	r3, r3, #2
 8007e2a:	4413      	add	r3, r2
 8007e2c:	881b      	ldrh	r3, [r3, #0]
 8007e2e:	b29b      	uxth	r3, r3
 8007e30:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007e34:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007e38:	867b      	strh	r3, [r7, #50]	; 0x32
 8007e3a:	687a      	ldr	r2, [r7, #4]
 8007e3c:	683b      	ldr	r3, [r7, #0]
 8007e3e:	781b      	ldrb	r3, [r3, #0]
 8007e40:	009b      	lsls	r3, r3, #2
 8007e42:	441a      	add	r2, r3
 8007e44:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8007e46:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007e4a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007e4e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007e52:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007e56:	b29b      	uxth	r3, r3
 8007e58:	8013      	strh	r3, [r2, #0]
 8007e5a:	e0ba      	b.n	8007fd2 <USB_ActivateEndpoint+0x6ca>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007e5c:	687a      	ldr	r2, [r7, #4]
 8007e5e:	683b      	ldr	r3, [r7, #0]
 8007e60:	781b      	ldrb	r3, [r3, #0]
 8007e62:	009b      	lsls	r3, r3, #2
 8007e64:	4413      	add	r3, r2
 8007e66:	881b      	ldrh	r3, [r3, #0]
 8007e68:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8007e6c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8007e70:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007e74:	2b00      	cmp	r3, #0
 8007e76:	d01d      	beq.n	8007eb4 <USB_ActivateEndpoint+0x5ac>
 8007e78:	687a      	ldr	r2, [r7, #4]
 8007e7a:	683b      	ldr	r3, [r7, #0]
 8007e7c:	781b      	ldrb	r3, [r3, #0]
 8007e7e:	009b      	lsls	r3, r3, #2
 8007e80:	4413      	add	r3, r2
 8007e82:	881b      	ldrh	r3, [r3, #0]
 8007e84:	b29b      	uxth	r3, r3
 8007e86:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007e8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007e8e:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8007e92:	687a      	ldr	r2, [r7, #4]
 8007e94:	683b      	ldr	r3, [r7, #0]
 8007e96:	781b      	ldrb	r3, [r3, #0]
 8007e98:	009b      	lsls	r3, r3, #2
 8007e9a:	441a      	add	r2, r3
 8007e9c:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8007ea0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007ea4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007ea8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007eac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007eb0:	b29b      	uxth	r3, r3
 8007eb2:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007eb4:	687a      	ldr	r2, [r7, #4]
 8007eb6:	683b      	ldr	r3, [r7, #0]
 8007eb8:	781b      	ldrb	r3, [r3, #0]
 8007eba:	009b      	lsls	r3, r3, #2
 8007ebc:	4413      	add	r3, r2
 8007ebe:	881b      	ldrh	r3, [r3, #0]
 8007ec0:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8007ec4:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8007ec8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007ecc:	2b00      	cmp	r3, #0
 8007ece:	d01d      	beq.n	8007f0c <USB_ActivateEndpoint+0x604>
 8007ed0:	687a      	ldr	r2, [r7, #4]
 8007ed2:	683b      	ldr	r3, [r7, #0]
 8007ed4:	781b      	ldrb	r3, [r3, #0]
 8007ed6:	009b      	lsls	r3, r3, #2
 8007ed8:	4413      	add	r3, r2
 8007eda:	881b      	ldrh	r3, [r3, #0]
 8007edc:	b29b      	uxth	r3, r3
 8007ede:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007ee2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007ee6:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8007eea:	687a      	ldr	r2, [r7, #4]
 8007eec:	683b      	ldr	r3, [r7, #0]
 8007eee:	781b      	ldrb	r3, [r3, #0]
 8007ef0:	009b      	lsls	r3, r3, #2
 8007ef2:	441a      	add	r2, r3
 8007ef4:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8007ef8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007efc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007f00:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007f04:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007f08:	b29b      	uxth	r3, r3
 8007f0a:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007f0c:	683b      	ldr	r3, [r7, #0]
 8007f0e:	78db      	ldrb	r3, [r3, #3]
 8007f10:	2b01      	cmp	r3, #1
 8007f12:	d024      	beq.n	8007f5e <USB_ActivateEndpoint+0x656>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8007f14:	687a      	ldr	r2, [r7, #4]
 8007f16:	683b      	ldr	r3, [r7, #0]
 8007f18:	781b      	ldrb	r3, [r3, #0]
 8007f1a:	009b      	lsls	r3, r3, #2
 8007f1c:	4413      	add	r3, r2
 8007f1e:	881b      	ldrh	r3, [r3, #0]
 8007f20:	b29b      	uxth	r3, r3
 8007f22:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007f26:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007f2a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8007f2e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8007f32:	f083 0320 	eor.w	r3, r3, #32
 8007f36:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8007f3a:	687a      	ldr	r2, [r7, #4]
 8007f3c:	683b      	ldr	r3, [r7, #0]
 8007f3e:	781b      	ldrb	r3, [r3, #0]
 8007f40:	009b      	lsls	r3, r3, #2
 8007f42:	441a      	add	r2, r3
 8007f44:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8007f48:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007f4c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007f50:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007f54:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007f58:	b29b      	uxth	r3, r3
 8007f5a:	8013      	strh	r3, [r2, #0]
 8007f5c:	e01d      	b.n	8007f9a <USB_ActivateEndpoint+0x692>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007f5e:	687a      	ldr	r2, [r7, #4]
 8007f60:	683b      	ldr	r3, [r7, #0]
 8007f62:	781b      	ldrb	r3, [r3, #0]
 8007f64:	009b      	lsls	r3, r3, #2
 8007f66:	4413      	add	r3, r2
 8007f68:	881b      	ldrh	r3, [r3, #0]
 8007f6a:	b29b      	uxth	r3, r3
 8007f6c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007f70:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007f74:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8007f78:	687a      	ldr	r2, [r7, #4]
 8007f7a:	683b      	ldr	r3, [r7, #0]
 8007f7c:	781b      	ldrb	r3, [r3, #0]
 8007f7e:	009b      	lsls	r3, r3, #2
 8007f80:	441a      	add	r2, r3
 8007f82:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8007f86:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007f8a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007f8e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007f92:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007f96:	b29b      	uxth	r3, r3
 8007f98:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8007f9a:	687a      	ldr	r2, [r7, #4]
 8007f9c:	683b      	ldr	r3, [r7, #0]
 8007f9e:	781b      	ldrb	r3, [r3, #0]
 8007fa0:	009b      	lsls	r3, r3, #2
 8007fa2:	4413      	add	r3, r2
 8007fa4:	881b      	ldrh	r3, [r3, #0]
 8007fa6:	b29b      	uxth	r3, r3
 8007fa8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007fac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007fb0:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8007fb2:	687a      	ldr	r2, [r7, #4]
 8007fb4:	683b      	ldr	r3, [r7, #0]
 8007fb6:	781b      	ldrb	r3, [r3, #0]
 8007fb8:	009b      	lsls	r3, r3, #2
 8007fba:	441a      	add	r2, r3
 8007fbc:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8007fbe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007fc2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007fc6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007fca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007fce:	b29b      	uxth	r3, r3
 8007fd0:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 8007fd2:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8007fd6:	4618      	mov	r0, r3
 8007fd8:	376c      	adds	r7, #108	; 0x6c
 8007fda:	46bd      	mov	sp, r7
 8007fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fe0:	4770      	bx	lr
 8007fe2:	bf00      	nop

08007fe4 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007fe4:	b480      	push	{r7}
 8007fe6:	b08d      	sub	sp, #52	; 0x34
 8007fe8:	af00      	add	r7, sp, #0
 8007fea:	6078      	str	r0, [r7, #4]
 8007fec:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8007fee:	683b      	ldr	r3, [r7, #0]
 8007ff0:	7b1b      	ldrb	r3, [r3, #12]
 8007ff2:	2b00      	cmp	r3, #0
 8007ff4:	f040 808e 	bne.w	8008114 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8007ff8:	683b      	ldr	r3, [r7, #0]
 8007ffa:	785b      	ldrb	r3, [r3, #1]
 8007ffc:	2b00      	cmp	r3, #0
 8007ffe:	d044      	beq.n	800808a <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008000:	687a      	ldr	r2, [r7, #4]
 8008002:	683b      	ldr	r3, [r7, #0]
 8008004:	781b      	ldrb	r3, [r3, #0]
 8008006:	009b      	lsls	r3, r3, #2
 8008008:	4413      	add	r3, r2
 800800a:	881b      	ldrh	r3, [r3, #0]
 800800c:	81bb      	strh	r3, [r7, #12]
 800800e:	89bb      	ldrh	r3, [r7, #12]
 8008010:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008014:	2b00      	cmp	r3, #0
 8008016:	d01b      	beq.n	8008050 <USB_DeactivateEndpoint+0x6c>
 8008018:	687a      	ldr	r2, [r7, #4]
 800801a:	683b      	ldr	r3, [r7, #0]
 800801c:	781b      	ldrb	r3, [r3, #0]
 800801e:	009b      	lsls	r3, r3, #2
 8008020:	4413      	add	r3, r2
 8008022:	881b      	ldrh	r3, [r3, #0]
 8008024:	b29b      	uxth	r3, r3
 8008026:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800802a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800802e:	817b      	strh	r3, [r7, #10]
 8008030:	687a      	ldr	r2, [r7, #4]
 8008032:	683b      	ldr	r3, [r7, #0]
 8008034:	781b      	ldrb	r3, [r3, #0]
 8008036:	009b      	lsls	r3, r3, #2
 8008038:	441a      	add	r2, r3
 800803a:	897b      	ldrh	r3, [r7, #10]
 800803c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008040:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008044:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008048:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800804c:	b29b      	uxth	r3, r3
 800804e:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008050:	687a      	ldr	r2, [r7, #4]
 8008052:	683b      	ldr	r3, [r7, #0]
 8008054:	781b      	ldrb	r3, [r3, #0]
 8008056:	009b      	lsls	r3, r3, #2
 8008058:	4413      	add	r3, r2
 800805a:	881b      	ldrh	r3, [r3, #0]
 800805c:	b29b      	uxth	r3, r3
 800805e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008062:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008066:	813b      	strh	r3, [r7, #8]
 8008068:	687a      	ldr	r2, [r7, #4]
 800806a:	683b      	ldr	r3, [r7, #0]
 800806c:	781b      	ldrb	r3, [r3, #0]
 800806e:	009b      	lsls	r3, r3, #2
 8008070:	441a      	add	r2, r3
 8008072:	893b      	ldrh	r3, [r7, #8]
 8008074:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008078:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800807c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008080:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008084:	b29b      	uxth	r3, r3
 8008086:	8013      	strh	r3, [r2, #0]
 8008088:	e192      	b.n	80083b0 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800808a:	687a      	ldr	r2, [r7, #4]
 800808c:	683b      	ldr	r3, [r7, #0]
 800808e:	781b      	ldrb	r3, [r3, #0]
 8008090:	009b      	lsls	r3, r3, #2
 8008092:	4413      	add	r3, r2
 8008094:	881b      	ldrh	r3, [r3, #0]
 8008096:	827b      	strh	r3, [r7, #18]
 8008098:	8a7b      	ldrh	r3, [r7, #18]
 800809a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800809e:	2b00      	cmp	r3, #0
 80080a0:	d01b      	beq.n	80080da <USB_DeactivateEndpoint+0xf6>
 80080a2:	687a      	ldr	r2, [r7, #4]
 80080a4:	683b      	ldr	r3, [r7, #0]
 80080a6:	781b      	ldrb	r3, [r3, #0]
 80080a8:	009b      	lsls	r3, r3, #2
 80080aa:	4413      	add	r3, r2
 80080ac:	881b      	ldrh	r3, [r3, #0]
 80080ae:	b29b      	uxth	r3, r3
 80080b0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80080b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80080b8:	823b      	strh	r3, [r7, #16]
 80080ba:	687a      	ldr	r2, [r7, #4]
 80080bc:	683b      	ldr	r3, [r7, #0]
 80080be:	781b      	ldrb	r3, [r3, #0]
 80080c0:	009b      	lsls	r3, r3, #2
 80080c2:	441a      	add	r2, r3
 80080c4:	8a3b      	ldrh	r3, [r7, #16]
 80080c6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80080ca:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80080ce:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80080d2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80080d6:	b29b      	uxth	r3, r3
 80080d8:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80080da:	687a      	ldr	r2, [r7, #4]
 80080dc:	683b      	ldr	r3, [r7, #0]
 80080de:	781b      	ldrb	r3, [r3, #0]
 80080e0:	009b      	lsls	r3, r3, #2
 80080e2:	4413      	add	r3, r2
 80080e4:	881b      	ldrh	r3, [r3, #0]
 80080e6:	b29b      	uxth	r3, r3
 80080e8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80080ec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80080f0:	81fb      	strh	r3, [r7, #14]
 80080f2:	687a      	ldr	r2, [r7, #4]
 80080f4:	683b      	ldr	r3, [r7, #0]
 80080f6:	781b      	ldrb	r3, [r3, #0]
 80080f8:	009b      	lsls	r3, r3, #2
 80080fa:	441a      	add	r2, r3
 80080fc:	89fb      	ldrh	r3, [r7, #14]
 80080fe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008102:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008106:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800810a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800810e:	b29b      	uxth	r3, r3
 8008110:	8013      	strh	r3, [r2, #0]
 8008112:	e14d      	b.n	80083b0 <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 8008114:	683b      	ldr	r3, [r7, #0]
 8008116:	785b      	ldrb	r3, [r3, #1]
 8008118:	2b00      	cmp	r3, #0
 800811a:	f040 80a5 	bne.w	8008268 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800811e:	687a      	ldr	r2, [r7, #4]
 8008120:	683b      	ldr	r3, [r7, #0]
 8008122:	781b      	ldrb	r3, [r3, #0]
 8008124:	009b      	lsls	r3, r3, #2
 8008126:	4413      	add	r3, r2
 8008128:	881b      	ldrh	r3, [r3, #0]
 800812a:	843b      	strh	r3, [r7, #32]
 800812c:	8c3b      	ldrh	r3, [r7, #32]
 800812e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008132:	2b00      	cmp	r3, #0
 8008134:	d01b      	beq.n	800816e <USB_DeactivateEndpoint+0x18a>
 8008136:	687a      	ldr	r2, [r7, #4]
 8008138:	683b      	ldr	r3, [r7, #0]
 800813a:	781b      	ldrb	r3, [r3, #0]
 800813c:	009b      	lsls	r3, r3, #2
 800813e:	4413      	add	r3, r2
 8008140:	881b      	ldrh	r3, [r3, #0]
 8008142:	b29b      	uxth	r3, r3
 8008144:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008148:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800814c:	83fb      	strh	r3, [r7, #30]
 800814e:	687a      	ldr	r2, [r7, #4]
 8008150:	683b      	ldr	r3, [r7, #0]
 8008152:	781b      	ldrb	r3, [r3, #0]
 8008154:	009b      	lsls	r3, r3, #2
 8008156:	441a      	add	r2, r3
 8008158:	8bfb      	ldrh	r3, [r7, #30]
 800815a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800815e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008162:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008166:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800816a:	b29b      	uxth	r3, r3
 800816c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800816e:	687a      	ldr	r2, [r7, #4]
 8008170:	683b      	ldr	r3, [r7, #0]
 8008172:	781b      	ldrb	r3, [r3, #0]
 8008174:	009b      	lsls	r3, r3, #2
 8008176:	4413      	add	r3, r2
 8008178:	881b      	ldrh	r3, [r3, #0]
 800817a:	83bb      	strh	r3, [r7, #28]
 800817c:	8bbb      	ldrh	r3, [r7, #28]
 800817e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008182:	2b00      	cmp	r3, #0
 8008184:	d01b      	beq.n	80081be <USB_DeactivateEndpoint+0x1da>
 8008186:	687a      	ldr	r2, [r7, #4]
 8008188:	683b      	ldr	r3, [r7, #0]
 800818a:	781b      	ldrb	r3, [r3, #0]
 800818c:	009b      	lsls	r3, r3, #2
 800818e:	4413      	add	r3, r2
 8008190:	881b      	ldrh	r3, [r3, #0]
 8008192:	b29b      	uxth	r3, r3
 8008194:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008198:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800819c:	837b      	strh	r3, [r7, #26]
 800819e:	687a      	ldr	r2, [r7, #4]
 80081a0:	683b      	ldr	r3, [r7, #0]
 80081a2:	781b      	ldrb	r3, [r3, #0]
 80081a4:	009b      	lsls	r3, r3, #2
 80081a6:	441a      	add	r2, r3
 80081a8:	8b7b      	ldrh	r3, [r7, #26]
 80081aa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80081ae:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80081b2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80081b6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80081ba:	b29b      	uxth	r3, r3
 80081bc:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 80081be:	687a      	ldr	r2, [r7, #4]
 80081c0:	683b      	ldr	r3, [r7, #0]
 80081c2:	781b      	ldrb	r3, [r3, #0]
 80081c4:	009b      	lsls	r3, r3, #2
 80081c6:	4413      	add	r3, r2
 80081c8:	881b      	ldrh	r3, [r3, #0]
 80081ca:	b29b      	uxth	r3, r3
 80081cc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80081d0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80081d4:	833b      	strh	r3, [r7, #24]
 80081d6:	687a      	ldr	r2, [r7, #4]
 80081d8:	683b      	ldr	r3, [r7, #0]
 80081da:	781b      	ldrb	r3, [r3, #0]
 80081dc:	009b      	lsls	r3, r3, #2
 80081de:	441a      	add	r2, r3
 80081e0:	8b3b      	ldrh	r3, [r7, #24]
 80081e2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80081e6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80081ea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80081ee:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80081f2:	b29b      	uxth	r3, r3
 80081f4:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80081f6:	687a      	ldr	r2, [r7, #4]
 80081f8:	683b      	ldr	r3, [r7, #0]
 80081fa:	781b      	ldrb	r3, [r3, #0]
 80081fc:	009b      	lsls	r3, r3, #2
 80081fe:	4413      	add	r3, r2
 8008200:	881b      	ldrh	r3, [r3, #0]
 8008202:	b29b      	uxth	r3, r3
 8008204:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008208:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800820c:	82fb      	strh	r3, [r7, #22]
 800820e:	687a      	ldr	r2, [r7, #4]
 8008210:	683b      	ldr	r3, [r7, #0]
 8008212:	781b      	ldrb	r3, [r3, #0]
 8008214:	009b      	lsls	r3, r3, #2
 8008216:	441a      	add	r2, r3
 8008218:	8afb      	ldrh	r3, [r7, #22]
 800821a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800821e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008222:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008226:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800822a:	b29b      	uxth	r3, r3
 800822c:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800822e:	687a      	ldr	r2, [r7, #4]
 8008230:	683b      	ldr	r3, [r7, #0]
 8008232:	781b      	ldrb	r3, [r3, #0]
 8008234:	009b      	lsls	r3, r3, #2
 8008236:	4413      	add	r3, r2
 8008238:	881b      	ldrh	r3, [r3, #0]
 800823a:	b29b      	uxth	r3, r3
 800823c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008240:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008244:	82bb      	strh	r3, [r7, #20]
 8008246:	687a      	ldr	r2, [r7, #4]
 8008248:	683b      	ldr	r3, [r7, #0]
 800824a:	781b      	ldrb	r3, [r3, #0]
 800824c:	009b      	lsls	r3, r3, #2
 800824e:	441a      	add	r2, r3
 8008250:	8abb      	ldrh	r3, [r7, #20]
 8008252:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008256:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800825a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800825e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008262:	b29b      	uxth	r3, r3
 8008264:	8013      	strh	r3, [r2, #0]
 8008266:	e0a3      	b.n	80083b0 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008268:	687a      	ldr	r2, [r7, #4]
 800826a:	683b      	ldr	r3, [r7, #0]
 800826c:	781b      	ldrb	r3, [r3, #0]
 800826e:	009b      	lsls	r3, r3, #2
 8008270:	4413      	add	r3, r2
 8008272:	881b      	ldrh	r3, [r3, #0]
 8008274:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8008276:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8008278:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800827c:	2b00      	cmp	r3, #0
 800827e:	d01b      	beq.n	80082b8 <USB_DeactivateEndpoint+0x2d4>
 8008280:	687a      	ldr	r2, [r7, #4]
 8008282:	683b      	ldr	r3, [r7, #0]
 8008284:	781b      	ldrb	r3, [r3, #0]
 8008286:	009b      	lsls	r3, r3, #2
 8008288:	4413      	add	r3, r2
 800828a:	881b      	ldrh	r3, [r3, #0]
 800828c:	b29b      	uxth	r3, r3
 800828e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008292:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008296:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8008298:	687a      	ldr	r2, [r7, #4]
 800829a:	683b      	ldr	r3, [r7, #0]
 800829c:	781b      	ldrb	r3, [r3, #0]
 800829e:	009b      	lsls	r3, r3, #2
 80082a0:	441a      	add	r2, r3
 80082a2:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80082a4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80082a8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80082ac:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80082b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80082b4:	b29b      	uxth	r3, r3
 80082b6:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80082b8:	687a      	ldr	r2, [r7, #4]
 80082ba:	683b      	ldr	r3, [r7, #0]
 80082bc:	781b      	ldrb	r3, [r3, #0]
 80082be:	009b      	lsls	r3, r3, #2
 80082c0:	4413      	add	r3, r2
 80082c2:	881b      	ldrh	r3, [r3, #0]
 80082c4:	857b      	strh	r3, [r7, #42]	; 0x2a
 80082c6:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80082c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80082cc:	2b00      	cmp	r3, #0
 80082ce:	d01b      	beq.n	8008308 <USB_DeactivateEndpoint+0x324>
 80082d0:	687a      	ldr	r2, [r7, #4]
 80082d2:	683b      	ldr	r3, [r7, #0]
 80082d4:	781b      	ldrb	r3, [r3, #0]
 80082d6:	009b      	lsls	r3, r3, #2
 80082d8:	4413      	add	r3, r2
 80082da:	881b      	ldrh	r3, [r3, #0]
 80082dc:	b29b      	uxth	r3, r3
 80082de:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80082e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80082e6:	853b      	strh	r3, [r7, #40]	; 0x28
 80082e8:	687a      	ldr	r2, [r7, #4]
 80082ea:	683b      	ldr	r3, [r7, #0]
 80082ec:	781b      	ldrb	r3, [r3, #0]
 80082ee:	009b      	lsls	r3, r3, #2
 80082f0:	441a      	add	r2, r3
 80082f2:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80082f4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80082f8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80082fc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008300:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008304:	b29b      	uxth	r3, r3
 8008306:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8008308:	687a      	ldr	r2, [r7, #4]
 800830a:	683b      	ldr	r3, [r7, #0]
 800830c:	781b      	ldrb	r3, [r3, #0]
 800830e:	009b      	lsls	r3, r3, #2
 8008310:	4413      	add	r3, r2
 8008312:	881b      	ldrh	r3, [r3, #0]
 8008314:	b29b      	uxth	r3, r3
 8008316:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800831a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800831e:	84fb      	strh	r3, [r7, #38]	; 0x26
 8008320:	687a      	ldr	r2, [r7, #4]
 8008322:	683b      	ldr	r3, [r7, #0]
 8008324:	781b      	ldrb	r3, [r3, #0]
 8008326:	009b      	lsls	r3, r3, #2
 8008328:	441a      	add	r2, r3
 800832a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800832c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008330:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008334:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008338:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800833c:	b29b      	uxth	r3, r3
 800833e:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008340:	687a      	ldr	r2, [r7, #4]
 8008342:	683b      	ldr	r3, [r7, #0]
 8008344:	781b      	ldrb	r3, [r3, #0]
 8008346:	009b      	lsls	r3, r3, #2
 8008348:	4413      	add	r3, r2
 800834a:	881b      	ldrh	r3, [r3, #0]
 800834c:	b29b      	uxth	r3, r3
 800834e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008352:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008356:	84bb      	strh	r3, [r7, #36]	; 0x24
 8008358:	687a      	ldr	r2, [r7, #4]
 800835a:	683b      	ldr	r3, [r7, #0]
 800835c:	781b      	ldrb	r3, [r3, #0]
 800835e:	009b      	lsls	r3, r3, #2
 8008360:	441a      	add	r2, r3
 8008362:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008364:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008368:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800836c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008370:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008374:	b29b      	uxth	r3, r3
 8008376:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8008378:	687a      	ldr	r2, [r7, #4]
 800837a:	683b      	ldr	r3, [r7, #0]
 800837c:	781b      	ldrb	r3, [r3, #0]
 800837e:	009b      	lsls	r3, r3, #2
 8008380:	4413      	add	r3, r2
 8008382:	881b      	ldrh	r3, [r3, #0]
 8008384:	b29b      	uxth	r3, r3
 8008386:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800838a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800838e:	847b      	strh	r3, [r7, #34]	; 0x22
 8008390:	687a      	ldr	r2, [r7, #4]
 8008392:	683b      	ldr	r3, [r7, #0]
 8008394:	781b      	ldrb	r3, [r3, #0]
 8008396:	009b      	lsls	r3, r3, #2
 8008398:	441a      	add	r2, r3
 800839a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800839c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80083a0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80083a4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80083a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80083ac:	b29b      	uxth	r3, r3
 80083ae:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 80083b0:	2300      	movs	r3, #0
}
 80083b2:	4618      	mov	r0, r3
 80083b4:	3734      	adds	r7, #52	; 0x34
 80083b6:	46bd      	mov	sp, r7
 80083b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083bc:	4770      	bx	lr

080083be <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80083be:	b580      	push	{r7, lr}
 80083c0:	b0c4      	sub	sp, #272	; 0x110
 80083c2:	af00      	add	r7, sp, #0
 80083c4:	1d3b      	adds	r3, r7, #4
 80083c6:	6018      	str	r0, [r3, #0]
 80083c8:	463b      	mov	r3, r7
 80083ca:	6019      	str	r1, [r3, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80083cc:	463b      	mov	r3, r7
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	785b      	ldrb	r3, [r3, #1]
 80083d2:	2b01      	cmp	r3, #1
 80083d4:	f040 8557 	bne.w	8008e86 <USB_EPStartXfer+0xac8>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 80083d8:	463b      	mov	r3, r7
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	699a      	ldr	r2, [r3, #24]
 80083de:	463b      	mov	r3, r7
 80083e0:	681b      	ldr	r3, [r3, #0]
 80083e2:	691b      	ldr	r3, [r3, #16]
 80083e4:	429a      	cmp	r2, r3
 80083e6:	d905      	bls.n	80083f4 <USB_EPStartXfer+0x36>
    {
      len = ep->maxpacket;
 80083e8:	463b      	mov	r3, r7
 80083ea:	681b      	ldr	r3, [r3, #0]
 80083ec:	691b      	ldr	r3, [r3, #16]
 80083ee:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80083f2:	e004      	b.n	80083fe <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 80083f4:	463b      	mov	r3, r7
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	699b      	ldr	r3, [r3, #24]
 80083fa:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 80083fe:	463b      	mov	r3, r7
 8008400:	681b      	ldr	r3, [r3, #0]
 8008402:	7b1b      	ldrb	r3, [r3, #12]
 8008404:	2b00      	cmp	r3, #0
 8008406:	d12c      	bne.n	8008462 <USB_EPStartXfer+0xa4>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8008408:	463b      	mov	r3, r7
 800840a:	681b      	ldr	r3, [r3, #0]
 800840c:	6959      	ldr	r1, [r3, #20]
 800840e:	463b      	mov	r3, r7
 8008410:	681b      	ldr	r3, [r3, #0]
 8008412:	88da      	ldrh	r2, [r3, #6]
 8008414:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008418:	b29b      	uxth	r3, r3
 800841a:	1d38      	adds	r0, r7, #4
 800841c:	6800      	ldr	r0, [r0, #0]
 800841e:	f001 fa1c 	bl	800985a <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8008422:	1d3b      	adds	r3, r7, #4
 8008424:	681b      	ldr	r3, [r3, #0]
 8008426:	617b      	str	r3, [r7, #20]
 8008428:	1d3b      	adds	r3, r7, #4
 800842a:	681b      	ldr	r3, [r3, #0]
 800842c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008430:	b29b      	uxth	r3, r3
 8008432:	461a      	mov	r2, r3
 8008434:	697b      	ldr	r3, [r7, #20]
 8008436:	4413      	add	r3, r2
 8008438:	617b      	str	r3, [r7, #20]
 800843a:	463b      	mov	r3, r7
 800843c:	681b      	ldr	r3, [r3, #0]
 800843e:	781b      	ldrb	r3, [r3, #0]
 8008440:	011a      	lsls	r2, r3, #4
 8008442:	697b      	ldr	r3, [r7, #20]
 8008444:	4413      	add	r3, r2
 8008446:	f203 4204 	addw	r2, r3, #1028	; 0x404
 800844a:	f107 0310 	add.w	r3, r7, #16
 800844e:	601a      	str	r2, [r3, #0]
 8008450:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008454:	b29a      	uxth	r2, r3
 8008456:	f107 0310 	add.w	r3, r7, #16
 800845a:	681b      	ldr	r3, [r3, #0]
 800845c:	801a      	strh	r2, [r3, #0]
 800845e:	f000 bcdd 	b.w	8008e1c <USB_EPStartXfer+0xa5e>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8008462:	463b      	mov	r3, r7
 8008464:	681b      	ldr	r3, [r3, #0]
 8008466:	78db      	ldrb	r3, [r3, #3]
 8008468:	2b02      	cmp	r3, #2
 800846a:	f040 8347 	bne.w	8008afc <USB_EPStartXfer+0x73e>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 800846e:	463b      	mov	r3, r7
 8008470:	681b      	ldr	r3, [r3, #0]
 8008472:	6a1a      	ldr	r2, [r3, #32]
 8008474:	463b      	mov	r3, r7
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	691b      	ldr	r3, [r3, #16]
 800847a:	429a      	cmp	r2, r3
 800847c:	f240 82eb 	bls.w	8008a56 <USB_EPStartXfer+0x698>
        {
          /* enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 8008480:	1d3b      	adds	r3, r7, #4
 8008482:	681a      	ldr	r2, [r3, #0]
 8008484:	463b      	mov	r3, r7
 8008486:	681b      	ldr	r3, [r3, #0]
 8008488:	781b      	ldrb	r3, [r3, #0]
 800848a:	009b      	lsls	r3, r3, #2
 800848c:	4413      	add	r3, r2
 800848e:	881b      	ldrh	r3, [r3, #0]
 8008490:	b29b      	uxth	r3, r3
 8008492:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008496:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800849a:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
 800849e:	1d3b      	adds	r3, r7, #4
 80084a0:	681a      	ldr	r2, [r3, #0]
 80084a2:	463b      	mov	r3, r7
 80084a4:	681b      	ldr	r3, [r3, #0]
 80084a6:	781b      	ldrb	r3, [r3, #0]
 80084a8:	009b      	lsls	r3, r3, #2
 80084aa:	441a      	add	r2, r3
 80084ac:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 80084b0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80084b4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80084b8:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80084bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80084c0:	b29b      	uxth	r3, r3
 80084c2:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 80084c4:	463b      	mov	r3, r7
 80084c6:	681b      	ldr	r3, [r3, #0]
 80084c8:	6a1a      	ldr	r2, [r3, #32]
 80084ca:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80084ce:	1ad2      	subs	r2, r2, r3
 80084d0:	463b      	mov	r3, r7
 80084d2:	681b      	ldr	r3, [r3, #0]
 80084d4:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80084d6:	1d3b      	adds	r3, r7, #4
 80084d8:	681a      	ldr	r2, [r3, #0]
 80084da:	463b      	mov	r3, r7
 80084dc:	681b      	ldr	r3, [r3, #0]
 80084de:	781b      	ldrb	r3, [r3, #0]
 80084e0:	009b      	lsls	r3, r3, #2
 80084e2:	4413      	add	r3, r2
 80084e4:	881b      	ldrh	r3, [r3, #0]
 80084e6:	b29b      	uxth	r3, r3
 80084e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80084ec:	2b00      	cmp	r3, #0
 80084ee:	f000 8159 	beq.w	80087a4 <USB_EPStartXfer+0x3e6>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80084f2:	1d3b      	adds	r3, r7, #4
 80084f4:	681b      	ldr	r3, [r3, #0]
 80084f6:	637b      	str	r3, [r7, #52]	; 0x34
 80084f8:	463b      	mov	r3, r7
 80084fa:	681b      	ldr	r3, [r3, #0]
 80084fc:	785b      	ldrb	r3, [r3, #1]
 80084fe:	2b00      	cmp	r3, #0
 8008500:	d164      	bne.n	80085cc <USB_EPStartXfer+0x20e>
 8008502:	1d3b      	adds	r3, r7, #4
 8008504:	681b      	ldr	r3, [r3, #0]
 8008506:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008508:	1d3b      	adds	r3, r7, #4
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008510:	b29b      	uxth	r3, r3
 8008512:	461a      	mov	r2, r3
 8008514:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008516:	4413      	add	r3, r2
 8008518:	62fb      	str	r3, [r7, #44]	; 0x2c
 800851a:	463b      	mov	r3, r7
 800851c:	681b      	ldr	r3, [r3, #0]
 800851e:	781b      	ldrb	r3, [r3, #0]
 8008520:	011a      	lsls	r2, r3, #4
 8008522:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008524:	4413      	add	r3, r2
 8008526:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800852a:	62bb      	str	r3, [r7, #40]	; 0x28
 800852c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008530:	2b00      	cmp	r3, #0
 8008532:	d112      	bne.n	800855a <USB_EPStartXfer+0x19c>
 8008534:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008536:	881b      	ldrh	r3, [r3, #0]
 8008538:	b29b      	uxth	r3, r3
 800853a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800853e:	b29a      	uxth	r2, r3
 8008540:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008542:	801a      	strh	r2, [r3, #0]
 8008544:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008546:	881b      	ldrh	r3, [r3, #0]
 8008548:	b29b      	uxth	r3, r3
 800854a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800854e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008552:	b29a      	uxth	r2, r3
 8008554:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008556:	801a      	strh	r2, [r3, #0]
 8008558:	e054      	b.n	8008604 <USB_EPStartXfer+0x246>
 800855a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800855e:	2b3e      	cmp	r3, #62	; 0x3e
 8008560:	d817      	bhi.n	8008592 <USB_EPStartXfer+0x1d4>
 8008562:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008566:	085b      	lsrs	r3, r3, #1
 8008568:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800856c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008570:	f003 0301 	and.w	r3, r3, #1
 8008574:	2b00      	cmp	r3, #0
 8008576:	d004      	beq.n	8008582 <USB_EPStartXfer+0x1c4>
 8008578:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800857c:	3301      	adds	r3, #1
 800857e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8008582:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008586:	b29b      	uxth	r3, r3
 8008588:	029b      	lsls	r3, r3, #10
 800858a:	b29a      	uxth	r2, r3
 800858c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800858e:	801a      	strh	r2, [r3, #0]
 8008590:	e038      	b.n	8008604 <USB_EPStartXfer+0x246>
 8008592:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008596:	095b      	lsrs	r3, r3, #5
 8008598:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800859c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80085a0:	f003 031f 	and.w	r3, r3, #31
 80085a4:	2b00      	cmp	r3, #0
 80085a6:	d104      	bne.n	80085b2 <USB_EPStartXfer+0x1f4>
 80085a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80085ac:	3b01      	subs	r3, #1
 80085ae:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80085b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80085b6:	b29b      	uxth	r3, r3
 80085b8:	029b      	lsls	r3, r3, #10
 80085ba:	b29b      	uxth	r3, r3
 80085bc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80085c0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80085c4:	b29a      	uxth	r2, r3
 80085c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085c8:	801a      	strh	r2, [r3, #0]
 80085ca:	e01b      	b.n	8008604 <USB_EPStartXfer+0x246>
 80085cc:	463b      	mov	r3, r7
 80085ce:	681b      	ldr	r3, [r3, #0]
 80085d0:	785b      	ldrb	r3, [r3, #1]
 80085d2:	2b01      	cmp	r3, #1
 80085d4:	d116      	bne.n	8008604 <USB_EPStartXfer+0x246>
 80085d6:	1d3b      	adds	r3, r7, #4
 80085d8:	681b      	ldr	r3, [r3, #0]
 80085da:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80085de:	b29b      	uxth	r3, r3
 80085e0:	461a      	mov	r2, r3
 80085e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80085e4:	4413      	add	r3, r2
 80085e6:	637b      	str	r3, [r7, #52]	; 0x34
 80085e8:	463b      	mov	r3, r7
 80085ea:	681b      	ldr	r3, [r3, #0]
 80085ec:	781b      	ldrb	r3, [r3, #0]
 80085ee:	011a      	lsls	r2, r3, #4
 80085f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80085f2:	4413      	add	r3, r2
 80085f4:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80085f8:	633b      	str	r3, [r7, #48]	; 0x30
 80085fa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80085fe:	b29a      	uxth	r2, r3
 8008600:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008602:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8008604:	463b      	mov	r3, r7
 8008606:	681b      	ldr	r3, [r3, #0]
 8008608:	895b      	ldrh	r3, [r3, #10]
 800860a:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800860e:	463b      	mov	r3, r7
 8008610:	681b      	ldr	r3, [r3, #0]
 8008612:	6959      	ldr	r1, [r3, #20]
 8008614:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008618:	b29b      	uxth	r3, r3
 800861a:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 800861e:	1d38      	adds	r0, r7, #4
 8008620:	6800      	ldr	r0, [r0, #0]
 8008622:	f001 f91a 	bl	800985a <USB_WritePMA>
            ep->xfer_buff += len;
 8008626:	463b      	mov	r3, r7
 8008628:	681b      	ldr	r3, [r3, #0]
 800862a:	695a      	ldr	r2, [r3, #20]
 800862c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008630:	441a      	add	r2, r3
 8008632:	463b      	mov	r3, r7
 8008634:	681b      	ldr	r3, [r3, #0]
 8008636:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8008638:	463b      	mov	r3, r7
 800863a:	681b      	ldr	r3, [r3, #0]
 800863c:	6a1a      	ldr	r2, [r3, #32]
 800863e:	463b      	mov	r3, r7
 8008640:	681b      	ldr	r3, [r3, #0]
 8008642:	691b      	ldr	r3, [r3, #16]
 8008644:	429a      	cmp	r2, r3
 8008646:	d909      	bls.n	800865c <USB_EPStartXfer+0x29e>
            {
              ep->xfer_len_db -= len;
 8008648:	463b      	mov	r3, r7
 800864a:	681b      	ldr	r3, [r3, #0]
 800864c:	6a1a      	ldr	r2, [r3, #32]
 800864e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008652:	1ad2      	subs	r2, r2, r3
 8008654:	463b      	mov	r3, r7
 8008656:	681b      	ldr	r3, [r3, #0]
 8008658:	621a      	str	r2, [r3, #32]
 800865a:	e008      	b.n	800866e <USB_EPStartXfer+0x2b0>
            }
            else
            {
              len = ep->xfer_len_db;
 800865c:	463b      	mov	r3, r7
 800865e:	681b      	ldr	r3, [r3, #0]
 8008660:	6a1b      	ldr	r3, [r3, #32]
 8008662:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
              ep->xfer_len_db = 0U;
 8008666:	463b      	mov	r3, r7
 8008668:	681b      	ldr	r3, [r3, #0]
 800866a:	2200      	movs	r2, #0
 800866c:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800866e:	463b      	mov	r3, r7
 8008670:	681b      	ldr	r3, [r3, #0]
 8008672:	785b      	ldrb	r3, [r3, #1]
 8008674:	2b00      	cmp	r3, #0
 8008676:	d164      	bne.n	8008742 <USB_EPStartXfer+0x384>
 8008678:	1d3b      	adds	r3, r7, #4
 800867a:	681b      	ldr	r3, [r3, #0]
 800867c:	61fb      	str	r3, [r7, #28]
 800867e:	1d3b      	adds	r3, r7, #4
 8008680:	681b      	ldr	r3, [r3, #0]
 8008682:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008686:	b29b      	uxth	r3, r3
 8008688:	461a      	mov	r2, r3
 800868a:	69fb      	ldr	r3, [r7, #28]
 800868c:	4413      	add	r3, r2
 800868e:	61fb      	str	r3, [r7, #28]
 8008690:	463b      	mov	r3, r7
 8008692:	681b      	ldr	r3, [r3, #0]
 8008694:	781b      	ldrb	r3, [r3, #0]
 8008696:	011a      	lsls	r2, r3, #4
 8008698:	69fb      	ldr	r3, [r7, #28]
 800869a:	4413      	add	r3, r2
 800869c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80086a0:	61bb      	str	r3, [r7, #24]
 80086a2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80086a6:	2b00      	cmp	r3, #0
 80086a8:	d112      	bne.n	80086d0 <USB_EPStartXfer+0x312>
 80086aa:	69bb      	ldr	r3, [r7, #24]
 80086ac:	881b      	ldrh	r3, [r3, #0]
 80086ae:	b29b      	uxth	r3, r3
 80086b0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80086b4:	b29a      	uxth	r2, r3
 80086b6:	69bb      	ldr	r3, [r7, #24]
 80086b8:	801a      	strh	r2, [r3, #0]
 80086ba:	69bb      	ldr	r3, [r7, #24]
 80086bc:	881b      	ldrh	r3, [r3, #0]
 80086be:	b29b      	uxth	r3, r3
 80086c0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80086c4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80086c8:	b29a      	uxth	r2, r3
 80086ca:	69bb      	ldr	r3, [r7, #24]
 80086cc:	801a      	strh	r2, [r3, #0]
 80086ce:	e057      	b.n	8008780 <USB_EPStartXfer+0x3c2>
 80086d0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80086d4:	2b3e      	cmp	r3, #62	; 0x3e
 80086d6:	d817      	bhi.n	8008708 <USB_EPStartXfer+0x34a>
 80086d8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80086dc:	085b      	lsrs	r3, r3, #1
 80086de:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80086e2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80086e6:	f003 0301 	and.w	r3, r3, #1
 80086ea:	2b00      	cmp	r3, #0
 80086ec:	d004      	beq.n	80086f8 <USB_EPStartXfer+0x33a>
 80086ee:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80086f2:	3301      	adds	r3, #1
 80086f4:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80086f8:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80086fc:	b29b      	uxth	r3, r3
 80086fe:	029b      	lsls	r3, r3, #10
 8008700:	b29a      	uxth	r2, r3
 8008702:	69bb      	ldr	r3, [r7, #24]
 8008704:	801a      	strh	r2, [r3, #0]
 8008706:	e03b      	b.n	8008780 <USB_EPStartXfer+0x3c2>
 8008708:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800870c:	095b      	lsrs	r3, r3, #5
 800870e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8008712:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008716:	f003 031f 	and.w	r3, r3, #31
 800871a:	2b00      	cmp	r3, #0
 800871c:	d104      	bne.n	8008728 <USB_EPStartXfer+0x36a>
 800871e:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8008722:	3b01      	subs	r3, #1
 8008724:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8008728:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800872c:	b29b      	uxth	r3, r3
 800872e:	029b      	lsls	r3, r3, #10
 8008730:	b29b      	uxth	r3, r3
 8008732:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008736:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800873a:	b29a      	uxth	r2, r3
 800873c:	69bb      	ldr	r3, [r7, #24]
 800873e:	801a      	strh	r2, [r3, #0]
 8008740:	e01e      	b.n	8008780 <USB_EPStartXfer+0x3c2>
 8008742:	463b      	mov	r3, r7
 8008744:	681b      	ldr	r3, [r3, #0]
 8008746:	785b      	ldrb	r3, [r3, #1]
 8008748:	2b01      	cmp	r3, #1
 800874a:	d119      	bne.n	8008780 <USB_EPStartXfer+0x3c2>
 800874c:	1d3b      	adds	r3, r7, #4
 800874e:	681b      	ldr	r3, [r3, #0]
 8008750:	627b      	str	r3, [r7, #36]	; 0x24
 8008752:	1d3b      	adds	r3, r7, #4
 8008754:	681b      	ldr	r3, [r3, #0]
 8008756:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800875a:	b29b      	uxth	r3, r3
 800875c:	461a      	mov	r2, r3
 800875e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008760:	4413      	add	r3, r2
 8008762:	627b      	str	r3, [r7, #36]	; 0x24
 8008764:	463b      	mov	r3, r7
 8008766:	681b      	ldr	r3, [r3, #0]
 8008768:	781b      	ldrb	r3, [r3, #0]
 800876a:	011a      	lsls	r2, r3, #4
 800876c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800876e:	4413      	add	r3, r2
 8008770:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8008774:	623b      	str	r3, [r7, #32]
 8008776:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800877a:	b29a      	uxth	r2, r3
 800877c:	6a3b      	ldr	r3, [r7, #32]
 800877e:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8008780:	463b      	mov	r3, r7
 8008782:	681b      	ldr	r3, [r3, #0]
 8008784:	891b      	ldrh	r3, [r3, #8]
 8008786:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800878a:	463b      	mov	r3, r7
 800878c:	681b      	ldr	r3, [r3, #0]
 800878e:	6959      	ldr	r1, [r3, #20]
 8008790:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008794:	b29b      	uxth	r3, r3
 8008796:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 800879a:	1d38      	adds	r0, r7, #4
 800879c:	6800      	ldr	r0, [r0, #0]
 800879e:	f001 f85c 	bl	800985a <USB_WritePMA>
 80087a2:	e33b      	b.n	8008e1c <USB_EPStartXfer+0xa5e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80087a4:	463b      	mov	r3, r7
 80087a6:	681b      	ldr	r3, [r3, #0]
 80087a8:	785b      	ldrb	r3, [r3, #1]
 80087aa:	2b00      	cmp	r3, #0
 80087ac:	d164      	bne.n	8008878 <USB_EPStartXfer+0x4ba>
 80087ae:	1d3b      	adds	r3, r7, #4
 80087b0:	681b      	ldr	r3, [r3, #0]
 80087b2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80087b4:	1d3b      	adds	r3, r7, #4
 80087b6:	681b      	ldr	r3, [r3, #0]
 80087b8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80087bc:	b29b      	uxth	r3, r3
 80087be:	461a      	mov	r2, r3
 80087c0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80087c2:	4413      	add	r3, r2
 80087c4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80087c6:	463b      	mov	r3, r7
 80087c8:	681b      	ldr	r3, [r3, #0]
 80087ca:	781b      	ldrb	r3, [r3, #0]
 80087cc:	011a      	lsls	r2, r3, #4
 80087ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80087d0:	4413      	add	r3, r2
 80087d2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80087d6:	64bb      	str	r3, [r7, #72]	; 0x48
 80087d8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80087dc:	2b00      	cmp	r3, #0
 80087de:	d112      	bne.n	8008806 <USB_EPStartXfer+0x448>
 80087e0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80087e2:	881b      	ldrh	r3, [r3, #0]
 80087e4:	b29b      	uxth	r3, r3
 80087e6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80087ea:	b29a      	uxth	r2, r3
 80087ec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80087ee:	801a      	strh	r2, [r3, #0]
 80087f0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80087f2:	881b      	ldrh	r3, [r3, #0]
 80087f4:	b29b      	uxth	r3, r3
 80087f6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80087fa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80087fe:	b29a      	uxth	r2, r3
 8008800:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008802:	801a      	strh	r2, [r3, #0]
 8008804:	e057      	b.n	80088b6 <USB_EPStartXfer+0x4f8>
 8008806:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800880a:	2b3e      	cmp	r3, #62	; 0x3e
 800880c:	d817      	bhi.n	800883e <USB_EPStartXfer+0x480>
 800880e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008812:	085b      	lsrs	r3, r3, #1
 8008814:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8008818:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800881c:	f003 0301 	and.w	r3, r3, #1
 8008820:	2b00      	cmp	r3, #0
 8008822:	d004      	beq.n	800882e <USB_EPStartXfer+0x470>
 8008824:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008828:	3301      	adds	r3, #1
 800882a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800882e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008832:	b29b      	uxth	r3, r3
 8008834:	029b      	lsls	r3, r3, #10
 8008836:	b29a      	uxth	r2, r3
 8008838:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800883a:	801a      	strh	r2, [r3, #0]
 800883c:	e03b      	b.n	80088b6 <USB_EPStartXfer+0x4f8>
 800883e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008842:	095b      	lsrs	r3, r3, #5
 8008844:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8008848:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800884c:	f003 031f 	and.w	r3, r3, #31
 8008850:	2b00      	cmp	r3, #0
 8008852:	d104      	bne.n	800885e <USB_EPStartXfer+0x4a0>
 8008854:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008858:	3b01      	subs	r3, #1
 800885a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800885e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008862:	b29b      	uxth	r3, r3
 8008864:	029b      	lsls	r3, r3, #10
 8008866:	b29b      	uxth	r3, r3
 8008868:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800886c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008870:	b29a      	uxth	r2, r3
 8008872:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008874:	801a      	strh	r2, [r3, #0]
 8008876:	e01e      	b.n	80088b6 <USB_EPStartXfer+0x4f8>
 8008878:	463b      	mov	r3, r7
 800887a:	681b      	ldr	r3, [r3, #0]
 800887c:	785b      	ldrb	r3, [r3, #1]
 800887e:	2b01      	cmp	r3, #1
 8008880:	d119      	bne.n	80088b6 <USB_EPStartXfer+0x4f8>
 8008882:	1d3b      	adds	r3, r7, #4
 8008884:	681b      	ldr	r3, [r3, #0]
 8008886:	657b      	str	r3, [r7, #84]	; 0x54
 8008888:	1d3b      	adds	r3, r7, #4
 800888a:	681b      	ldr	r3, [r3, #0]
 800888c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008890:	b29b      	uxth	r3, r3
 8008892:	461a      	mov	r2, r3
 8008894:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008896:	4413      	add	r3, r2
 8008898:	657b      	str	r3, [r7, #84]	; 0x54
 800889a:	463b      	mov	r3, r7
 800889c:	681b      	ldr	r3, [r3, #0]
 800889e:	781b      	ldrb	r3, [r3, #0]
 80088a0:	011a      	lsls	r2, r3, #4
 80088a2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80088a4:	4413      	add	r3, r2
 80088a6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80088aa:	653b      	str	r3, [r7, #80]	; 0x50
 80088ac:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80088b0:	b29a      	uxth	r2, r3
 80088b2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80088b4:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80088b6:	463b      	mov	r3, r7
 80088b8:	681b      	ldr	r3, [r3, #0]
 80088ba:	891b      	ldrh	r3, [r3, #8]
 80088bc:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80088c0:	463b      	mov	r3, r7
 80088c2:	681b      	ldr	r3, [r3, #0]
 80088c4:	6959      	ldr	r1, [r3, #20]
 80088c6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80088ca:	b29b      	uxth	r3, r3
 80088cc:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 80088d0:	1d38      	adds	r0, r7, #4
 80088d2:	6800      	ldr	r0, [r0, #0]
 80088d4:	f000 ffc1 	bl	800985a <USB_WritePMA>
            ep->xfer_buff += len;
 80088d8:	463b      	mov	r3, r7
 80088da:	681b      	ldr	r3, [r3, #0]
 80088dc:	695a      	ldr	r2, [r3, #20]
 80088de:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80088e2:	441a      	add	r2, r3
 80088e4:	463b      	mov	r3, r7
 80088e6:	681b      	ldr	r3, [r3, #0]
 80088e8:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80088ea:	463b      	mov	r3, r7
 80088ec:	681b      	ldr	r3, [r3, #0]
 80088ee:	6a1a      	ldr	r2, [r3, #32]
 80088f0:	463b      	mov	r3, r7
 80088f2:	681b      	ldr	r3, [r3, #0]
 80088f4:	691b      	ldr	r3, [r3, #16]
 80088f6:	429a      	cmp	r2, r3
 80088f8:	d909      	bls.n	800890e <USB_EPStartXfer+0x550>
            {
              ep->xfer_len_db -= len;
 80088fa:	463b      	mov	r3, r7
 80088fc:	681b      	ldr	r3, [r3, #0]
 80088fe:	6a1a      	ldr	r2, [r3, #32]
 8008900:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008904:	1ad2      	subs	r2, r2, r3
 8008906:	463b      	mov	r3, r7
 8008908:	681b      	ldr	r3, [r3, #0]
 800890a:	621a      	str	r2, [r3, #32]
 800890c:	e008      	b.n	8008920 <USB_EPStartXfer+0x562>
            }
            else
            {
              len = ep->xfer_len_db;
 800890e:	463b      	mov	r3, r7
 8008910:	681b      	ldr	r3, [r3, #0]
 8008912:	6a1b      	ldr	r3, [r3, #32]
 8008914:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
              ep->xfer_len_db = 0U;
 8008918:	463b      	mov	r3, r7
 800891a:	681b      	ldr	r3, [r3, #0]
 800891c:	2200      	movs	r2, #0
 800891e:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8008920:	1d3b      	adds	r3, r7, #4
 8008922:	681b      	ldr	r3, [r3, #0]
 8008924:	647b      	str	r3, [r7, #68]	; 0x44
 8008926:	463b      	mov	r3, r7
 8008928:	681b      	ldr	r3, [r3, #0]
 800892a:	785b      	ldrb	r3, [r3, #1]
 800892c:	2b00      	cmp	r3, #0
 800892e:	d164      	bne.n	80089fa <USB_EPStartXfer+0x63c>
 8008930:	1d3b      	adds	r3, r7, #4
 8008932:	681b      	ldr	r3, [r3, #0]
 8008934:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008936:	1d3b      	adds	r3, r7, #4
 8008938:	681b      	ldr	r3, [r3, #0]
 800893a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800893e:	b29b      	uxth	r3, r3
 8008940:	461a      	mov	r2, r3
 8008942:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008944:	4413      	add	r3, r2
 8008946:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008948:	463b      	mov	r3, r7
 800894a:	681b      	ldr	r3, [r3, #0]
 800894c:	781b      	ldrb	r3, [r3, #0]
 800894e:	011a      	lsls	r2, r3, #4
 8008950:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008952:	4413      	add	r3, r2
 8008954:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8008958:	63bb      	str	r3, [r7, #56]	; 0x38
 800895a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800895e:	2b00      	cmp	r3, #0
 8008960:	d112      	bne.n	8008988 <USB_EPStartXfer+0x5ca>
 8008962:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008964:	881b      	ldrh	r3, [r3, #0]
 8008966:	b29b      	uxth	r3, r3
 8008968:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800896c:	b29a      	uxth	r2, r3
 800896e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008970:	801a      	strh	r2, [r3, #0]
 8008972:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008974:	881b      	ldrh	r3, [r3, #0]
 8008976:	b29b      	uxth	r3, r3
 8008978:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800897c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008980:	b29a      	uxth	r2, r3
 8008982:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008984:	801a      	strh	r2, [r3, #0]
 8008986:	e054      	b.n	8008a32 <USB_EPStartXfer+0x674>
 8008988:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800898c:	2b3e      	cmp	r3, #62	; 0x3e
 800898e:	d817      	bhi.n	80089c0 <USB_EPStartXfer+0x602>
 8008990:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008994:	085b      	lsrs	r3, r3, #1
 8008996:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800899a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800899e:	f003 0301 	and.w	r3, r3, #1
 80089a2:	2b00      	cmp	r3, #0
 80089a4:	d004      	beq.n	80089b0 <USB_EPStartXfer+0x5f2>
 80089a6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80089aa:	3301      	adds	r3, #1
 80089ac:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80089b0:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80089b4:	b29b      	uxth	r3, r3
 80089b6:	029b      	lsls	r3, r3, #10
 80089b8:	b29a      	uxth	r2, r3
 80089ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80089bc:	801a      	strh	r2, [r3, #0]
 80089be:	e038      	b.n	8008a32 <USB_EPStartXfer+0x674>
 80089c0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80089c4:	095b      	lsrs	r3, r3, #5
 80089c6:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80089ca:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80089ce:	f003 031f 	and.w	r3, r3, #31
 80089d2:	2b00      	cmp	r3, #0
 80089d4:	d104      	bne.n	80089e0 <USB_EPStartXfer+0x622>
 80089d6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80089da:	3b01      	subs	r3, #1
 80089dc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80089e0:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80089e4:	b29b      	uxth	r3, r3
 80089e6:	029b      	lsls	r3, r3, #10
 80089e8:	b29b      	uxth	r3, r3
 80089ea:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80089ee:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80089f2:	b29a      	uxth	r2, r3
 80089f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80089f6:	801a      	strh	r2, [r3, #0]
 80089f8:	e01b      	b.n	8008a32 <USB_EPStartXfer+0x674>
 80089fa:	463b      	mov	r3, r7
 80089fc:	681b      	ldr	r3, [r3, #0]
 80089fe:	785b      	ldrb	r3, [r3, #1]
 8008a00:	2b01      	cmp	r3, #1
 8008a02:	d116      	bne.n	8008a32 <USB_EPStartXfer+0x674>
 8008a04:	1d3b      	adds	r3, r7, #4
 8008a06:	681b      	ldr	r3, [r3, #0]
 8008a08:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008a0c:	b29b      	uxth	r3, r3
 8008a0e:	461a      	mov	r2, r3
 8008a10:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008a12:	4413      	add	r3, r2
 8008a14:	647b      	str	r3, [r7, #68]	; 0x44
 8008a16:	463b      	mov	r3, r7
 8008a18:	681b      	ldr	r3, [r3, #0]
 8008a1a:	781b      	ldrb	r3, [r3, #0]
 8008a1c:	011a      	lsls	r2, r3, #4
 8008a1e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008a20:	4413      	add	r3, r2
 8008a22:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8008a26:	643b      	str	r3, [r7, #64]	; 0x40
 8008a28:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008a2c:	b29a      	uxth	r2, r3
 8008a2e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008a30:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8008a32:	463b      	mov	r3, r7
 8008a34:	681b      	ldr	r3, [r3, #0]
 8008a36:	895b      	ldrh	r3, [r3, #10]
 8008a38:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008a3c:	463b      	mov	r3, r7
 8008a3e:	681b      	ldr	r3, [r3, #0]
 8008a40:	6959      	ldr	r1, [r3, #20]
 8008a42:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008a46:	b29b      	uxth	r3, r3
 8008a48:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8008a4c:	1d38      	adds	r0, r7, #4
 8008a4e:	6800      	ldr	r0, [r0, #0]
 8008a50:	f000 ff03 	bl	800985a <USB_WritePMA>
 8008a54:	e1e2      	b.n	8008e1c <USB_EPStartXfer+0xa5e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8008a56:	463b      	mov	r3, r7
 8008a58:	681b      	ldr	r3, [r3, #0]
 8008a5a:	6a1b      	ldr	r3, [r3, #32]
 8008a5c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c

          /* disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 8008a60:	1d3b      	adds	r3, r7, #4
 8008a62:	681a      	ldr	r2, [r3, #0]
 8008a64:	463b      	mov	r3, r7
 8008a66:	681b      	ldr	r3, [r3, #0]
 8008a68:	781b      	ldrb	r3, [r3, #0]
 8008a6a:	009b      	lsls	r3, r3, #2
 8008a6c:	4413      	add	r3, r2
 8008a6e:	881b      	ldrh	r3, [r3, #0]
 8008a70:	b29b      	uxth	r3, r3
 8008a72:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8008a76:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008a7a:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 8008a7e:	1d3b      	adds	r3, r7, #4
 8008a80:	681a      	ldr	r2, [r3, #0]
 8008a82:	463b      	mov	r3, r7
 8008a84:	681b      	ldr	r3, [r3, #0]
 8008a86:	781b      	ldrb	r3, [r3, #0]
 8008a88:	009b      	lsls	r3, r3, #2
 8008a8a:	441a      	add	r2, r3
 8008a8c:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8008a90:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008a94:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008a98:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008a9c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008aa0:	b29b      	uxth	r3, r3
 8008aa2:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8008aa4:	1d3b      	adds	r3, r7, #4
 8008aa6:	681b      	ldr	r3, [r3, #0]
 8008aa8:	663b      	str	r3, [r7, #96]	; 0x60
 8008aaa:	1d3b      	adds	r3, r7, #4
 8008aac:	681b      	ldr	r3, [r3, #0]
 8008aae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008ab2:	b29b      	uxth	r3, r3
 8008ab4:	461a      	mov	r2, r3
 8008ab6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008ab8:	4413      	add	r3, r2
 8008aba:	663b      	str	r3, [r7, #96]	; 0x60
 8008abc:	463b      	mov	r3, r7
 8008abe:	681b      	ldr	r3, [r3, #0]
 8008ac0:	781b      	ldrb	r3, [r3, #0]
 8008ac2:	011a      	lsls	r2, r3, #4
 8008ac4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008ac6:	4413      	add	r3, r2
 8008ac8:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8008acc:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008ace:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008ad2:	b29a      	uxth	r2, r3
 8008ad4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008ad6:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8008ad8:	463b      	mov	r3, r7
 8008ada:	681b      	ldr	r3, [r3, #0]
 8008adc:	891b      	ldrh	r3, [r3, #8]
 8008ade:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008ae2:	463b      	mov	r3, r7
 8008ae4:	681b      	ldr	r3, [r3, #0]
 8008ae6:	6959      	ldr	r1, [r3, #20]
 8008ae8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008aec:	b29b      	uxth	r3, r3
 8008aee:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8008af2:	1d38      	adds	r0, r7, #4
 8008af4:	6800      	ldr	r0, [r0, #0]
 8008af6:	f000 feb0 	bl	800985a <USB_WritePMA>
 8008afa:	e18f      	b.n	8008e1c <USB_EPStartXfer+0xa5e>

      /* manage isochronous double buffer IN mode */
      else
      {
        /* Write the data to the USB endpoint */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8008afc:	1d3b      	adds	r3, r7, #4
 8008afe:	681a      	ldr	r2, [r3, #0]
 8008b00:	463b      	mov	r3, r7
 8008b02:	681b      	ldr	r3, [r3, #0]
 8008b04:	781b      	ldrb	r3, [r3, #0]
 8008b06:	009b      	lsls	r3, r3, #2
 8008b08:	4413      	add	r3, r2
 8008b0a:	881b      	ldrh	r3, [r3, #0]
 8008b0c:	b29b      	uxth	r3, r3
 8008b0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008b12:	2b00      	cmp	r3, #0
 8008b14:	f000 808f 	beq.w	8008c36 <USB_EPStartXfer+0x878>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8008b18:	1d3b      	adds	r3, r7, #4
 8008b1a:	681b      	ldr	r3, [r3, #0]
 8008b1c:	67bb      	str	r3, [r7, #120]	; 0x78
 8008b1e:	463b      	mov	r3, r7
 8008b20:	681b      	ldr	r3, [r3, #0]
 8008b22:	785b      	ldrb	r3, [r3, #1]
 8008b24:	2b00      	cmp	r3, #0
 8008b26:	d164      	bne.n	8008bf2 <USB_EPStartXfer+0x834>
 8008b28:	1d3b      	adds	r3, r7, #4
 8008b2a:	681b      	ldr	r3, [r3, #0]
 8008b2c:	673b      	str	r3, [r7, #112]	; 0x70
 8008b2e:	1d3b      	adds	r3, r7, #4
 8008b30:	681b      	ldr	r3, [r3, #0]
 8008b32:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008b36:	b29b      	uxth	r3, r3
 8008b38:	461a      	mov	r2, r3
 8008b3a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008b3c:	4413      	add	r3, r2
 8008b3e:	673b      	str	r3, [r7, #112]	; 0x70
 8008b40:	463b      	mov	r3, r7
 8008b42:	681b      	ldr	r3, [r3, #0]
 8008b44:	781b      	ldrb	r3, [r3, #0]
 8008b46:	011a      	lsls	r2, r3, #4
 8008b48:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008b4a:	4413      	add	r3, r2
 8008b4c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8008b50:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008b52:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008b56:	2b00      	cmp	r3, #0
 8008b58:	d112      	bne.n	8008b80 <USB_EPStartXfer+0x7c2>
 8008b5a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008b5c:	881b      	ldrh	r3, [r3, #0]
 8008b5e:	b29b      	uxth	r3, r3
 8008b60:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008b64:	b29a      	uxth	r2, r3
 8008b66:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008b68:	801a      	strh	r2, [r3, #0]
 8008b6a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008b6c:	881b      	ldrh	r3, [r3, #0]
 8008b6e:	b29b      	uxth	r3, r3
 8008b70:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008b74:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008b78:	b29a      	uxth	r2, r3
 8008b7a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008b7c:	801a      	strh	r2, [r3, #0]
 8008b7e:	e054      	b.n	8008c2a <USB_EPStartXfer+0x86c>
 8008b80:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008b84:	2b3e      	cmp	r3, #62	; 0x3e
 8008b86:	d817      	bhi.n	8008bb8 <USB_EPStartXfer+0x7fa>
 8008b88:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008b8c:	085b      	lsrs	r3, r3, #1
 8008b8e:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8008b92:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008b96:	f003 0301 	and.w	r3, r3, #1
 8008b9a:	2b00      	cmp	r3, #0
 8008b9c:	d004      	beq.n	8008ba8 <USB_EPStartXfer+0x7ea>
 8008b9e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008ba2:	3301      	adds	r3, #1
 8008ba4:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8008ba8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008bac:	b29b      	uxth	r3, r3
 8008bae:	029b      	lsls	r3, r3, #10
 8008bb0:	b29a      	uxth	r2, r3
 8008bb2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008bb4:	801a      	strh	r2, [r3, #0]
 8008bb6:	e038      	b.n	8008c2a <USB_EPStartXfer+0x86c>
 8008bb8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008bbc:	095b      	lsrs	r3, r3, #5
 8008bbe:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8008bc2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008bc6:	f003 031f 	and.w	r3, r3, #31
 8008bca:	2b00      	cmp	r3, #0
 8008bcc:	d104      	bne.n	8008bd8 <USB_EPStartXfer+0x81a>
 8008bce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008bd2:	3b01      	subs	r3, #1
 8008bd4:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8008bd8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008bdc:	b29b      	uxth	r3, r3
 8008bde:	029b      	lsls	r3, r3, #10
 8008be0:	b29b      	uxth	r3, r3
 8008be2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008be6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008bea:	b29a      	uxth	r2, r3
 8008bec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008bee:	801a      	strh	r2, [r3, #0]
 8008bf0:	e01b      	b.n	8008c2a <USB_EPStartXfer+0x86c>
 8008bf2:	463b      	mov	r3, r7
 8008bf4:	681b      	ldr	r3, [r3, #0]
 8008bf6:	785b      	ldrb	r3, [r3, #1]
 8008bf8:	2b01      	cmp	r3, #1
 8008bfa:	d116      	bne.n	8008c2a <USB_EPStartXfer+0x86c>
 8008bfc:	1d3b      	adds	r3, r7, #4
 8008bfe:	681b      	ldr	r3, [r3, #0]
 8008c00:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008c04:	b29b      	uxth	r3, r3
 8008c06:	461a      	mov	r2, r3
 8008c08:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008c0a:	4413      	add	r3, r2
 8008c0c:	67bb      	str	r3, [r7, #120]	; 0x78
 8008c0e:	463b      	mov	r3, r7
 8008c10:	681b      	ldr	r3, [r3, #0]
 8008c12:	781b      	ldrb	r3, [r3, #0]
 8008c14:	011a      	lsls	r2, r3, #4
 8008c16:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008c18:	4413      	add	r3, r2
 8008c1a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8008c1e:	677b      	str	r3, [r7, #116]	; 0x74
 8008c20:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008c24:	b29a      	uxth	r2, r3
 8008c26:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008c28:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8008c2a:	463b      	mov	r3, r7
 8008c2c:	681b      	ldr	r3, [r3, #0]
 8008c2e:	895b      	ldrh	r3, [r3, #10]
 8008c30:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a
 8008c34:	e097      	b.n	8008d66 <USB_EPStartXfer+0x9a8>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8008c36:	463b      	mov	r3, r7
 8008c38:	681b      	ldr	r3, [r3, #0]
 8008c3a:	785b      	ldrb	r3, [r3, #1]
 8008c3c:	2b00      	cmp	r3, #0
 8008c3e:	d168      	bne.n	8008d12 <USB_EPStartXfer+0x954>
 8008c40:	1d3b      	adds	r3, r7, #4
 8008c42:	681b      	ldr	r3, [r3, #0]
 8008c44:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008c48:	1d3b      	adds	r3, r7, #4
 8008c4a:	681b      	ldr	r3, [r3, #0]
 8008c4c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008c50:	b29b      	uxth	r3, r3
 8008c52:	461a      	mov	r2, r3
 8008c54:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8008c58:	4413      	add	r3, r2
 8008c5a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008c5e:	463b      	mov	r3, r7
 8008c60:	681b      	ldr	r3, [r3, #0]
 8008c62:	781b      	ldrb	r3, [r3, #0]
 8008c64:	011a      	lsls	r2, r3, #4
 8008c66:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8008c6a:	4413      	add	r3, r2
 8008c6c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8008c70:	67fb      	str	r3, [r7, #124]	; 0x7c
 8008c72:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008c76:	2b00      	cmp	r3, #0
 8008c78:	d112      	bne.n	8008ca0 <USB_EPStartXfer+0x8e2>
 8008c7a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8008c7c:	881b      	ldrh	r3, [r3, #0]
 8008c7e:	b29b      	uxth	r3, r3
 8008c80:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008c84:	b29a      	uxth	r2, r3
 8008c86:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8008c88:	801a      	strh	r2, [r3, #0]
 8008c8a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8008c8c:	881b      	ldrh	r3, [r3, #0]
 8008c8e:	b29b      	uxth	r3, r3
 8008c90:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008c94:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008c98:	b29a      	uxth	r2, r3
 8008c9a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8008c9c:	801a      	strh	r2, [r3, #0]
 8008c9e:	e05d      	b.n	8008d5c <USB_EPStartXfer+0x99e>
 8008ca0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008ca4:	2b3e      	cmp	r3, #62	; 0x3e
 8008ca6:	d817      	bhi.n	8008cd8 <USB_EPStartXfer+0x91a>
 8008ca8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008cac:	085b      	lsrs	r3, r3, #1
 8008cae:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8008cb2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008cb6:	f003 0301 	and.w	r3, r3, #1
 8008cba:	2b00      	cmp	r3, #0
 8008cbc:	d004      	beq.n	8008cc8 <USB_EPStartXfer+0x90a>
 8008cbe:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8008cc2:	3301      	adds	r3, #1
 8008cc4:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8008cc8:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8008ccc:	b29b      	uxth	r3, r3
 8008cce:	029b      	lsls	r3, r3, #10
 8008cd0:	b29a      	uxth	r2, r3
 8008cd2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8008cd4:	801a      	strh	r2, [r3, #0]
 8008cd6:	e041      	b.n	8008d5c <USB_EPStartXfer+0x99e>
 8008cd8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008cdc:	095b      	lsrs	r3, r3, #5
 8008cde:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8008ce2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008ce6:	f003 031f 	and.w	r3, r3, #31
 8008cea:	2b00      	cmp	r3, #0
 8008cec:	d104      	bne.n	8008cf8 <USB_EPStartXfer+0x93a>
 8008cee:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8008cf2:	3b01      	subs	r3, #1
 8008cf4:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8008cf8:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8008cfc:	b29b      	uxth	r3, r3
 8008cfe:	029b      	lsls	r3, r3, #10
 8008d00:	b29b      	uxth	r3, r3
 8008d02:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008d06:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008d0a:	b29a      	uxth	r2, r3
 8008d0c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8008d0e:	801a      	strh	r2, [r3, #0]
 8008d10:	e024      	b.n	8008d5c <USB_EPStartXfer+0x99e>
 8008d12:	463b      	mov	r3, r7
 8008d14:	681b      	ldr	r3, [r3, #0]
 8008d16:	785b      	ldrb	r3, [r3, #1]
 8008d18:	2b01      	cmp	r3, #1
 8008d1a:	d11f      	bne.n	8008d5c <USB_EPStartXfer+0x99e>
 8008d1c:	1d3b      	adds	r3, r7, #4
 8008d1e:	681b      	ldr	r3, [r3, #0]
 8008d20:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8008d24:	1d3b      	adds	r3, r7, #4
 8008d26:	681b      	ldr	r3, [r3, #0]
 8008d28:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008d2c:	b29b      	uxth	r3, r3
 8008d2e:	461a      	mov	r2, r3
 8008d30:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008d34:	4413      	add	r3, r2
 8008d36:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8008d3a:	463b      	mov	r3, r7
 8008d3c:	681b      	ldr	r3, [r3, #0]
 8008d3e:	781b      	ldrb	r3, [r3, #0]
 8008d40:	011a      	lsls	r2, r3, #4
 8008d42:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008d46:	4413      	add	r3, r2
 8008d48:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8008d4c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8008d50:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008d54:	b29a      	uxth	r2, r3
 8008d56:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008d5a:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8008d5c:	463b      	mov	r3, r7
 8008d5e:	681b      	ldr	r3, [r3, #0]
 8008d60:	891b      	ldrh	r3, [r3, #8]
 8008d62:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a
        }

        USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008d66:	463b      	mov	r3, r7
 8008d68:	681b      	ldr	r3, [r3, #0]
 8008d6a:	6959      	ldr	r1, [r3, #20]
 8008d6c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008d70:	b29b      	uxth	r3, r3
 8008d72:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8008d76:	1d38      	adds	r0, r7, #4
 8008d78:	6800      	ldr	r0, [r0, #0]
 8008d7a:	f000 fd6e 	bl	800985a <USB_WritePMA>
        PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 8008d7e:	463b      	mov	r3, r7
 8008d80:	681b      	ldr	r3, [r3, #0]
 8008d82:	785b      	ldrb	r3, [r3, #1]
 8008d84:	2b00      	cmp	r3, #0
 8008d86:	d122      	bne.n	8008dce <USB_EPStartXfer+0xa10>
 8008d88:	1d3b      	adds	r3, r7, #4
 8008d8a:	681a      	ldr	r2, [r3, #0]
 8008d8c:	463b      	mov	r3, r7
 8008d8e:	681b      	ldr	r3, [r3, #0]
 8008d90:	781b      	ldrb	r3, [r3, #0]
 8008d92:	009b      	lsls	r3, r3, #2
 8008d94:	4413      	add	r3, r2
 8008d96:	881b      	ldrh	r3, [r3, #0]
 8008d98:	b29b      	uxth	r3, r3
 8008d9a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008d9e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008da2:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
 8008da6:	1d3b      	adds	r3, r7, #4
 8008da8:	681a      	ldr	r2, [r3, #0]
 8008daa:	463b      	mov	r3, r7
 8008dac:	681b      	ldr	r3, [r3, #0]
 8008dae:	781b      	ldrb	r3, [r3, #0]
 8008db0:	009b      	lsls	r3, r3, #2
 8008db2:	441a      	add	r2, r3
 8008db4:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 8008db8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008dbc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008dc0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008dc4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008dc8:	b29b      	uxth	r3, r3
 8008dca:	8013      	strh	r3, [r2, #0]
 8008dcc:	e026      	b.n	8008e1c <USB_EPStartXfer+0xa5e>
 8008dce:	463b      	mov	r3, r7
 8008dd0:	681b      	ldr	r3, [r3, #0]
 8008dd2:	785b      	ldrb	r3, [r3, #1]
 8008dd4:	2b01      	cmp	r3, #1
 8008dd6:	d121      	bne.n	8008e1c <USB_EPStartXfer+0xa5e>
 8008dd8:	1d3b      	adds	r3, r7, #4
 8008dda:	681a      	ldr	r2, [r3, #0]
 8008ddc:	463b      	mov	r3, r7
 8008dde:	681b      	ldr	r3, [r3, #0]
 8008de0:	781b      	ldrb	r3, [r3, #0]
 8008de2:	009b      	lsls	r3, r3, #2
 8008de4:	4413      	add	r3, r2
 8008de6:	881b      	ldrh	r3, [r3, #0]
 8008de8:	b29b      	uxth	r3, r3
 8008dea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008dee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008df2:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
 8008df6:	1d3b      	adds	r3, r7, #4
 8008df8:	681a      	ldr	r2, [r3, #0]
 8008dfa:	463b      	mov	r3, r7
 8008dfc:	681b      	ldr	r3, [r3, #0]
 8008dfe:	781b      	ldrb	r3, [r3, #0]
 8008e00:	009b      	lsls	r3, r3, #2
 8008e02:	441a      	add	r2, r3
 8008e04:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
 8008e08:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008e0c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008e10:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008e14:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008e18:	b29b      	uxth	r3, r3
 8008e1a:	8013      	strh	r3, [r2, #0]
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8008e1c:	1d3b      	adds	r3, r7, #4
 8008e1e:	681a      	ldr	r2, [r3, #0]
 8008e20:	463b      	mov	r3, r7
 8008e22:	681b      	ldr	r3, [r3, #0]
 8008e24:	781b      	ldrb	r3, [r3, #0]
 8008e26:	009b      	lsls	r3, r3, #2
 8008e28:	4413      	add	r3, r2
 8008e2a:	881b      	ldrh	r3, [r3, #0]
 8008e2c:	b29b      	uxth	r3, r3
 8008e2e:	f107 020e 	add.w	r2, r7, #14
 8008e32:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008e36:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008e3a:	8013      	strh	r3, [r2, #0]
 8008e3c:	f107 030e 	add.w	r3, r7, #14
 8008e40:	f107 020e 	add.w	r2, r7, #14
 8008e44:	8812      	ldrh	r2, [r2, #0]
 8008e46:	f082 0210 	eor.w	r2, r2, #16
 8008e4a:	801a      	strh	r2, [r3, #0]
 8008e4c:	f107 030e 	add.w	r3, r7, #14
 8008e50:	f107 020e 	add.w	r2, r7, #14
 8008e54:	8812      	ldrh	r2, [r2, #0]
 8008e56:	f082 0220 	eor.w	r2, r2, #32
 8008e5a:	801a      	strh	r2, [r3, #0]
 8008e5c:	1d3b      	adds	r3, r7, #4
 8008e5e:	681a      	ldr	r2, [r3, #0]
 8008e60:	463b      	mov	r3, r7
 8008e62:	681b      	ldr	r3, [r3, #0]
 8008e64:	781b      	ldrb	r3, [r3, #0]
 8008e66:	009b      	lsls	r3, r3, #2
 8008e68:	441a      	add	r2, r3
 8008e6a:	f107 030e 	add.w	r3, r7, #14
 8008e6e:	881b      	ldrh	r3, [r3, #0]
 8008e70:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008e74:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008e78:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008e7c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008e80:	b29b      	uxth	r3, r3
 8008e82:	8013      	strh	r3, [r2, #0]
 8008e84:	e3b5      	b.n	80095f2 <USB_EPStartXfer+0x1234>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8008e86:	463b      	mov	r3, r7
 8008e88:	681b      	ldr	r3, [r3, #0]
 8008e8a:	7b1b      	ldrb	r3, [r3, #12]
 8008e8c:	2b00      	cmp	r3, #0
 8008e8e:	f040 8090 	bne.w	8008fb2 <USB_EPStartXfer+0xbf4>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8008e92:	463b      	mov	r3, r7
 8008e94:	681b      	ldr	r3, [r3, #0]
 8008e96:	699a      	ldr	r2, [r3, #24]
 8008e98:	463b      	mov	r3, r7
 8008e9a:	681b      	ldr	r3, [r3, #0]
 8008e9c:	691b      	ldr	r3, [r3, #16]
 8008e9e:	429a      	cmp	r2, r3
 8008ea0:	d90e      	bls.n	8008ec0 <USB_EPStartXfer+0xb02>
      {
        len = ep->maxpacket;
 8008ea2:	463b      	mov	r3, r7
 8008ea4:	681b      	ldr	r3, [r3, #0]
 8008ea6:	691b      	ldr	r3, [r3, #16]
 8008ea8:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        ep->xfer_len -= len;
 8008eac:	463b      	mov	r3, r7
 8008eae:	681b      	ldr	r3, [r3, #0]
 8008eb0:	699a      	ldr	r2, [r3, #24]
 8008eb2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008eb6:	1ad2      	subs	r2, r2, r3
 8008eb8:	463b      	mov	r3, r7
 8008eba:	681b      	ldr	r3, [r3, #0]
 8008ebc:	619a      	str	r2, [r3, #24]
 8008ebe:	e008      	b.n	8008ed2 <USB_EPStartXfer+0xb14>
      }
      else
      {
        len = ep->xfer_len;
 8008ec0:	463b      	mov	r3, r7
 8008ec2:	681b      	ldr	r3, [r3, #0]
 8008ec4:	699b      	ldr	r3, [r3, #24]
 8008ec6:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        ep->xfer_len = 0U;
 8008eca:	463b      	mov	r3, r7
 8008ecc:	681b      	ldr	r3, [r3, #0]
 8008ece:	2200      	movs	r2, #0
 8008ed0:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8008ed2:	1d3b      	adds	r3, r7, #4
 8008ed4:	681b      	ldr	r3, [r3, #0]
 8008ed6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8008eda:	1d3b      	adds	r3, r7, #4
 8008edc:	681b      	ldr	r3, [r3, #0]
 8008ede:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008ee2:	b29b      	uxth	r3, r3
 8008ee4:	461a      	mov	r2, r3
 8008ee6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8008eea:	4413      	add	r3, r2
 8008eec:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8008ef0:	463b      	mov	r3, r7
 8008ef2:	681b      	ldr	r3, [r3, #0]
 8008ef4:	781b      	ldrb	r3, [r3, #0]
 8008ef6:	011a      	lsls	r2, r3, #4
 8008ef8:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8008efc:	4413      	add	r3, r2
 8008efe:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8008f02:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8008f06:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008f0a:	2b00      	cmp	r3, #0
 8008f0c:	d116      	bne.n	8008f3c <USB_EPStartXfer+0xb7e>
 8008f0e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008f12:	881b      	ldrh	r3, [r3, #0]
 8008f14:	b29b      	uxth	r3, r3
 8008f16:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008f1a:	b29a      	uxth	r2, r3
 8008f1c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008f20:	801a      	strh	r2, [r3, #0]
 8008f22:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008f26:	881b      	ldrh	r3, [r3, #0]
 8008f28:	b29b      	uxth	r3, r3
 8008f2a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008f2e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008f32:	b29a      	uxth	r2, r3
 8008f34:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008f38:	801a      	strh	r2, [r3, #0]
 8008f3a:	e32c      	b.n	8009596 <USB_EPStartXfer+0x11d8>
 8008f3c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008f40:	2b3e      	cmp	r3, #62	; 0x3e
 8008f42:	d818      	bhi.n	8008f76 <USB_EPStartXfer+0xbb8>
 8008f44:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008f48:	085b      	lsrs	r3, r3, #1
 8008f4a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8008f4e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008f52:	f003 0301 	and.w	r3, r3, #1
 8008f56:	2b00      	cmp	r3, #0
 8008f58:	d004      	beq.n	8008f64 <USB_EPStartXfer+0xba6>
 8008f5a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8008f5e:	3301      	adds	r3, #1
 8008f60:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8008f64:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8008f68:	b29b      	uxth	r3, r3
 8008f6a:	029b      	lsls	r3, r3, #10
 8008f6c:	b29a      	uxth	r2, r3
 8008f6e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008f72:	801a      	strh	r2, [r3, #0]
 8008f74:	e30f      	b.n	8009596 <USB_EPStartXfer+0x11d8>
 8008f76:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008f7a:	095b      	lsrs	r3, r3, #5
 8008f7c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8008f80:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008f84:	f003 031f 	and.w	r3, r3, #31
 8008f88:	2b00      	cmp	r3, #0
 8008f8a:	d104      	bne.n	8008f96 <USB_EPStartXfer+0xbd8>
 8008f8c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8008f90:	3b01      	subs	r3, #1
 8008f92:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8008f96:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8008f9a:	b29b      	uxth	r3, r3
 8008f9c:	029b      	lsls	r3, r3, #10
 8008f9e:	b29b      	uxth	r3, r3
 8008fa0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008fa4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008fa8:	b29a      	uxth	r2, r3
 8008faa:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008fae:	801a      	strh	r2, [r3, #0]
 8008fb0:	e2f1      	b.n	8009596 <USB_EPStartXfer+0x11d8>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8008fb2:	463b      	mov	r3, r7
 8008fb4:	681b      	ldr	r3, [r3, #0]
 8008fb6:	78db      	ldrb	r3, [r3, #3]
 8008fb8:	2b02      	cmp	r3, #2
 8008fba:	f040 818f 	bne.w	80092dc <USB_EPStartXfer+0xf1e>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8008fbe:	463b      	mov	r3, r7
 8008fc0:	681b      	ldr	r3, [r3, #0]
 8008fc2:	785b      	ldrb	r3, [r3, #1]
 8008fc4:	2b00      	cmp	r3, #0
 8008fc6:	d175      	bne.n	80090b4 <USB_EPStartXfer+0xcf6>
 8008fc8:	1d3b      	adds	r3, r7, #4
 8008fca:	681b      	ldr	r3, [r3, #0]
 8008fcc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008fd0:	1d3b      	adds	r3, r7, #4
 8008fd2:	681b      	ldr	r3, [r3, #0]
 8008fd4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008fd8:	b29b      	uxth	r3, r3
 8008fda:	461a      	mov	r2, r3
 8008fdc:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8008fe0:	4413      	add	r3, r2
 8008fe2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008fe6:	463b      	mov	r3, r7
 8008fe8:	681b      	ldr	r3, [r3, #0]
 8008fea:	781b      	ldrb	r3, [r3, #0]
 8008fec:	011a      	lsls	r2, r3, #4
 8008fee:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8008ff2:	4413      	add	r3, r2
 8008ff4:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8008ff8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8008ffc:	463b      	mov	r3, r7
 8008ffe:	681b      	ldr	r3, [r3, #0]
 8009000:	691b      	ldr	r3, [r3, #16]
 8009002:	2b00      	cmp	r3, #0
 8009004:	d116      	bne.n	8009034 <USB_EPStartXfer+0xc76>
 8009006:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800900a:	881b      	ldrh	r3, [r3, #0]
 800900c:	b29b      	uxth	r3, r3
 800900e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8009012:	b29a      	uxth	r2, r3
 8009014:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009018:	801a      	strh	r2, [r3, #0]
 800901a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800901e:	881b      	ldrh	r3, [r3, #0]
 8009020:	b29b      	uxth	r3, r3
 8009022:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009026:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800902a:	b29a      	uxth	r2, r3
 800902c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009030:	801a      	strh	r2, [r3, #0]
 8009032:	e065      	b.n	8009100 <USB_EPStartXfer+0xd42>
 8009034:	463b      	mov	r3, r7
 8009036:	681b      	ldr	r3, [r3, #0]
 8009038:	691b      	ldr	r3, [r3, #16]
 800903a:	2b3e      	cmp	r3, #62	; 0x3e
 800903c:	d81a      	bhi.n	8009074 <USB_EPStartXfer+0xcb6>
 800903e:	463b      	mov	r3, r7
 8009040:	681b      	ldr	r3, [r3, #0]
 8009042:	691b      	ldr	r3, [r3, #16]
 8009044:	085b      	lsrs	r3, r3, #1
 8009046:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800904a:	463b      	mov	r3, r7
 800904c:	681b      	ldr	r3, [r3, #0]
 800904e:	691b      	ldr	r3, [r3, #16]
 8009050:	f003 0301 	and.w	r3, r3, #1
 8009054:	2b00      	cmp	r3, #0
 8009056:	d004      	beq.n	8009062 <USB_EPStartXfer+0xca4>
 8009058:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800905c:	3301      	adds	r3, #1
 800905e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8009062:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8009066:	b29b      	uxth	r3, r3
 8009068:	029b      	lsls	r3, r3, #10
 800906a:	b29a      	uxth	r2, r3
 800906c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009070:	801a      	strh	r2, [r3, #0]
 8009072:	e045      	b.n	8009100 <USB_EPStartXfer+0xd42>
 8009074:	463b      	mov	r3, r7
 8009076:	681b      	ldr	r3, [r3, #0]
 8009078:	691b      	ldr	r3, [r3, #16]
 800907a:	095b      	lsrs	r3, r3, #5
 800907c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8009080:	463b      	mov	r3, r7
 8009082:	681b      	ldr	r3, [r3, #0]
 8009084:	691b      	ldr	r3, [r3, #16]
 8009086:	f003 031f 	and.w	r3, r3, #31
 800908a:	2b00      	cmp	r3, #0
 800908c:	d104      	bne.n	8009098 <USB_EPStartXfer+0xcda>
 800908e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8009092:	3b01      	subs	r3, #1
 8009094:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8009098:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800909c:	b29b      	uxth	r3, r3
 800909e:	029b      	lsls	r3, r3, #10
 80090a0:	b29b      	uxth	r3, r3
 80090a2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80090a6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80090aa:	b29a      	uxth	r2, r3
 80090ac:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80090b0:	801a      	strh	r2, [r3, #0]
 80090b2:	e025      	b.n	8009100 <USB_EPStartXfer+0xd42>
 80090b4:	463b      	mov	r3, r7
 80090b6:	681b      	ldr	r3, [r3, #0]
 80090b8:	785b      	ldrb	r3, [r3, #1]
 80090ba:	2b01      	cmp	r3, #1
 80090bc:	d120      	bne.n	8009100 <USB_EPStartXfer+0xd42>
 80090be:	1d3b      	adds	r3, r7, #4
 80090c0:	681b      	ldr	r3, [r3, #0]
 80090c2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80090c6:	1d3b      	adds	r3, r7, #4
 80090c8:	681b      	ldr	r3, [r3, #0]
 80090ca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80090ce:	b29b      	uxth	r3, r3
 80090d0:	461a      	mov	r2, r3
 80090d2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80090d6:	4413      	add	r3, r2
 80090d8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80090dc:	463b      	mov	r3, r7
 80090de:	681b      	ldr	r3, [r3, #0]
 80090e0:	781b      	ldrb	r3, [r3, #0]
 80090e2:	011a      	lsls	r2, r3, #4
 80090e4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80090e8:	4413      	add	r3, r2
 80090ea:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80090ee:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80090f2:	463b      	mov	r3, r7
 80090f4:	681b      	ldr	r3, [r3, #0]
 80090f6:	691b      	ldr	r3, [r3, #16]
 80090f8:	b29a      	uxth	r2, r3
 80090fa:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80090fe:	801a      	strh	r2, [r3, #0]
 8009100:	1d3b      	adds	r3, r7, #4
 8009102:	681b      	ldr	r3, [r3, #0]
 8009104:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8009108:	463b      	mov	r3, r7
 800910a:	681b      	ldr	r3, [r3, #0]
 800910c:	785b      	ldrb	r3, [r3, #1]
 800910e:	2b00      	cmp	r3, #0
 8009110:	d175      	bne.n	80091fe <USB_EPStartXfer+0xe40>
 8009112:	1d3b      	adds	r3, r7, #4
 8009114:	681b      	ldr	r3, [r3, #0]
 8009116:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800911a:	1d3b      	adds	r3, r7, #4
 800911c:	681b      	ldr	r3, [r3, #0]
 800911e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009122:	b29b      	uxth	r3, r3
 8009124:	461a      	mov	r2, r3
 8009126:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800912a:	4413      	add	r3, r2
 800912c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8009130:	463b      	mov	r3, r7
 8009132:	681b      	ldr	r3, [r3, #0]
 8009134:	781b      	ldrb	r3, [r3, #0]
 8009136:	011a      	lsls	r2, r3, #4
 8009138:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800913c:	4413      	add	r3, r2
 800913e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8009142:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8009146:	463b      	mov	r3, r7
 8009148:	681b      	ldr	r3, [r3, #0]
 800914a:	691b      	ldr	r3, [r3, #16]
 800914c:	2b00      	cmp	r3, #0
 800914e:	d116      	bne.n	800917e <USB_EPStartXfer+0xdc0>
 8009150:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009154:	881b      	ldrh	r3, [r3, #0]
 8009156:	b29b      	uxth	r3, r3
 8009158:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800915c:	b29a      	uxth	r2, r3
 800915e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009162:	801a      	strh	r2, [r3, #0]
 8009164:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009168:	881b      	ldrh	r3, [r3, #0]
 800916a:	b29b      	uxth	r3, r3
 800916c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009170:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009174:	b29a      	uxth	r2, r3
 8009176:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800917a:	801a      	strh	r2, [r3, #0]
 800917c:	e061      	b.n	8009242 <USB_EPStartXfer+0xe84>
 800917e:	463b      	mov	r3, r7
 8009180:	681b      	ldr	r3, [r3, #0]
 8009182:	691b      	ldr	r3, [r3, #16]
 8009184:	2b3e      	cmp	r3, #62	; 0x3e
 8009186:	d81a      	bhi.n	80091be <USB_EPStartXfer+0xe00>
 8009188:	463b      	mov	r3, r7
 800918a:	681b      	ldr	r3, [r3, #0]
 800918c:	691b      	ldr	r3, [r3, #16]
 800918e:	085b      	lsrs	r3, r3, #1
 8009190:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8009194:	463b      	mov	r3, r7
 8009196:	681b      	ldr	r3, [r3, #0]
 8009198:	691b      	ldr	r3, [r3, #16]
 800919a:	f003 0301 	and.w	r3, r3, #1
 800919e:	2b00      	cmp	r3, #0
 80091a0:	d004      	beq.n	80091ac <USB_EPStartXfer+0xdee>
 80091a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80091a6:	3301      	adds	r3, #1
 80091a8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80091ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80091b0:	b29b      	uxth	r3, r3
 80091b2:	029b      	lsls	r3, r3, #10
 80091b4:	b29a      	uxth	r2, r3
 80091b6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80091ba:	801a      	strh	r2, [r3, #0]
 80091bc:	e041      	b.n	8009242 <USB_EPStartXfer+0xe84>
 80091be:	463b      	mov	r3, r7
 80091c0:	681b      	ldr	r3, [r3, #0]
 80091c2:	691b      	ldr	r3, [r3, #16]
 80091c4:	095b      	lsrs	r3, r3, #5
 80091c6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80091ca:	463b      	mov	r3, r7
 80091cc:	681b      	ldr	r3, [r3, #0]
 80091ce:	691b      	ldr	r3, [r3, #16]
 80091d0:	f003 031f 	and.w	r3, r3, #31
 80091d4:	2b00      	cmp	r3, #0
 80091d6:	d104      	bne.n	80091e2 <USB_EPStartXfer+0xe24>
 80091d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80091dc:	3b01      	subs	r3, #1
 80091de:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80091e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80091e6:	b29b      	uxth	r3, r3
 80091e8:	029b      	lsls	r3, r3, #10
 80091ea:	b29b      	uxth	r3, r3
 80091ec:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80091f0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80091f4:	b29a      	uxth	r2, r3
 80091f6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80091fa:	801a      	strh	r2, [r3, #0]
 80091fc:	e021      	b.n	8009242 <USB_EPStartXfer+0xe84>
 80091fe:	463b      	mov	r3, r7
 8009200:	681b      	ldr	r3, [r3, #0]
 8009202:	785b      	ldrb	r3, [r3, #1]
 8009204:	2b01      	cmp	r3, #1
 8009206:	d11c      	bne.n	8009242 <USB_EPStartXfer+0xe84>
 8009208:	1d3b      	adds	r3, r7, #4
 800920a:	681b      	ldr	r3, [r3, #0]
 800920c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009210:	b29b      	uxth	r3, r3
 8009212:	461a      	mov	r2, r3
 8009214:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8009218:	4413      	add	r3, r2
 800921a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800921e:	463b      	mov	r3, r7
 8009220:	681b      	ldr	r3, [r3, #0]
 8009222:	781b      	ldrb	r3, [r3, #0]
 8009224:	011a      	lsls	r2, r3, #4
 8009226:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800922a:	4413      	add	r3, r2
 800922c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8009230:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8009234:	463b      	mov	r3, r7
 8009236:	681b      	ldr	r3, [r3, #0]
 8009238:	691b      	ldr	r3, [r3, #16]
 800923a:	b29a      	uxth	r2, r3
 800923c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8009240:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8009242:	463b      	mov	r3, r7
 8009244:	681b      	ldr	r3, [r3, #0]
 8009246:	69db      	ldr	r3, [r3, #28]
 8009248:	2b00      	cmp	r3, #0
 800924a:	f000 81a4 	beq.w	8009596 <USB_EPStartXfer+0x11d8>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800924e:	1d3b      	adds	r3, r7, #4
 8009250:	681a      	ldr	r2, [r3, #0]
 8009252:	463b      	mov	r3, r7
 8009254:	681b      	ldr	r3, [r3, #0]
 8009256:	781b      	ldrb	r3, [r3, #0]
 8009258:	009b      	lsls	r3, r3, #2
 800925a:	4413      	add	r3, r2
 800925c:	881b      	ldrh	r3, [r3, #0]
 800925e:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8009262:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8009266:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800926a:	2b00      	cmp	r3, #0
 800926c:	d005      	beq.n	800927a <USB_EPStartXfer+0xebc>
 800926e:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8009272:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009276:	2b00      	cmp	r3, #0
 8009278:	d10d      	bne.n	8009296 <USB_EPStartXfer+0xed8>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800927a:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 800927e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8009282:	2b00      	cmp	r3, #0
 8009284:	f040 8187 	bne.w	8009596 <USB_EPStartXfer+0x11d8>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8009288:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 800928c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009290:	2b00      	cmp	r3, #0
 8009292:	f040 8180 	bne.w	8009596 <USB_EPStartXfer+0x11d8>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 8009296:	1d3b      	adds	r3, r7, #4
 8009298:	681a      	ldr	r2, [r3, #0]
 800929a:	463b      	mov	r3, r7
 800929c:	681b      	ldr	r3, [r3, #0]
 800929e:	781b      	ldrb	r3, [r3, #0]
 80092a0:	009b      	lsls	r3, r3, #2
 80092a2:	4413      	add	r3, r2
 80092a4:	881b      	ldrh	r3, [r3, #0]
 80092a6:	b29b      	uxth	r3, r3
 80092a8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80092ac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80092b0:	f8a7 3098 	strh.w	r3, [r7, #152]	; 0x98
 80092b4:	1d3b      	adds	r3, r7, #4
 80092b6:	681a      	ldr	r2, [r3, #0]
 80092b8:	463b      	mov	r3, r7
 80092ba:	681b      	ldr	r3, [r3, #0]
 80092bc:	781b      	ldrb	r3, [r3, #0]
 80092be:	009b      	lsls	r3, r3, #2
 80092c0:	441a      	add	r2, r3
 80092c2:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 80092c6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80092ca:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80092ce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80092d2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80092d6:	b29b      	uxth	r3, r3
 80092d8:	8013      	strh	r3, [r2, #0]
 80092da:	e15c      	b.n	8009596 <USB_EPStartXfer+0x11d8>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 80092dc:	463b      	mov	r3, r7
 80092de:	681b      	ldr	r3, [r3, #0]
 80092e0:	78db      	ldrb	r3, [r3, #3]
 80092e2:	2b01      	cmp	r3, #1
 80092e4:	f040 8155 	bne.w	8009592 <USB_EPStartXfer+0x11d4>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 80092e8:	463b      	mov	r3, r7
 80092ea:	681b      	ldr	r3, [r3, #0]
 80092ec:	699a      	ldr	r2, [r3, #24]
 80092ee:	463b      	mov	r3, r7
 80092f0:	681b      	ldr	r3, [r3, #0]
 80092f2:	691b      	ldr	r3, [r3, #16]
 80092f4:	429a      	cmp	r2, r3
 80092f6:	d90e      	bls.n	8009316 <USB_EPStartXfer+0xf58>
        {
          len = ep->maxpacket;
 80092f8:	463b      	mov	r3, r7
 80092fa:	681b      	ldr	r3, [r3, #0]
 80092fc:	691b      	ldr	r3, [r3, #16]
 80092fe:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
          ep->xfer_len -= len;
 8009302:	463b      	mov	r3, r7
 8009304:	681b      	ldr	r3, [r3, #0]
 8009306:	699a      	ldr	r2, [r3, #24]
 8009308:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800930c:	1ad2      	subs	r2, r2, r3
 800930e:	463b      	mov	r3, r7
 8009310:	681b      	ldr	r3, [r3, #0]
 8009312:	619a      	str	r2, [r3, #24]
 8009314:	e008      	b.n	8009328 <USB_EPStartXfer+0xf6a>
        }
        else
        {
          len = ep->xfer_len;
 8009316:	463b      	mov	r3, r7
 8009318:	681b      	ldr	r3, [r3, #0]
 800931a:	699b      	ldr	r3, [r3, #24]
 800931c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
          ep->xfer_len = 0U;
 8009320:	463b      	mov	r3, r7
 8009322:	681b      	ldr	r3, [r3, #0]
 8009324:	2200      	movs	r2, #0
 8009326:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8009328:	463b      	mov	r3, r7
 800932a:	681b      	ldr	r3, [r3, #0]
 800932c:	785b      	ldrb	r3, [r3, #1]
 800932e:	2b00      	cmp	r3, #0
 8009330:	d16f      	bne.n	8009412 <USB_EPStartXfer+0x1054>
 8009332:	1d3b      	adds	r3, r7, #4
 8009334:	681b      	ldr	r3, [r3, #0]
 8009336:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800933a:	1d3b      	adds	r3, r7, #4
 800933c:	681b      	ldr	r3, [r3, #0]
 800933e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009342:	b29b      	uxth	r3, r3
 8009344:	461a      	mov	r2, r3
 8009346:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800934a:	4413      	add	r3, r2
 800934c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8009350:	463b      	mov	r3, r7
 8009352:	681b      	ldr	r3, [r3, #0]
 8009354:	781b      	ldrb	r3, [r3, #0]
 8009356:	011a      	lsls	r2, r3, #4
 8009358:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800935c:	4413      	add	r3, r2
 800935e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8009362:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8009366:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800936a:	2b00      	cmp	r3, #0
 800936c:	d116      	bne.n	800939c <USB_EPStartXfer+0xfde>
 800936e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8009372:	881b      	ldrh	r3, [r3, #0]
 8009374:	b29b      	uxth	r3, r3
 8009376:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800937a:	b29a      	uxth	r2, r3
 800937c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8009380:	801a      	strh	r2, [r3, #0]
 8009382:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8009386:	881b      	ldrh	r3, [r3, #0]
 8009388:	b29b      	uxth	r3, r3
 800938a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800938e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009392:	b29a      	uxth	r2, r3
 8009394:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8009398:	801a      	strh	r2, [r3, #0]
 800939a:	e05f      	b.n	800945c <USB_EPStartXfer+0x109e>
 800939c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80093a0:	2b3e      	cmp	r3, #62	; 0x3e
 80093a2:	d818      	bhi.n	80093d6 <USB_EPStartXfer+0x1018>
 80093a4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80093a8:	085b      	lsrs	r3, r3, #1
 80093aa:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80093ae:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80093b2:	f003 0301 	and.w	r3, r3, #1
 80093b6:	2b00      	cmp	r3, #0
 80093b8:	d004      	beq.n	80093c4 <USB_EPStartXfer+0x1006>
 80093ba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80093be:	3301      	adds	r3, #1
 80093c0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80093c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80093c8:	b29b      	uxth	r3, r3
 80093ca:	029b      	lsls	r3, r3, #10
 80093cc:	b29a      	uxth	r2, r3
 80093ce:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80093d2:	801a      	strh	r2, [r3, #0]
 80093d4:	e042      	b.n	800945c <USB_EPStartXfer+0x109e>
 80093d6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80093da:	095b      	lsrs	r3, r3, #5
 80093dc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80093e0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80093e4:	f003 031f 	and.w	r3, r3, #31
 80093e8:	2b00      	cmp	r3, #0
 80093ea:	d104      	bne.n	80093f6 <USB_EPStartXfer+0x1038>
 80093ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80093f0:	3b01      	subs	r3, #1
 80093f2:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80093f6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80093fa:	b29b      	uxth	r3, r3
 80093fc:	029b      	lsls	r3, r3, #10
 80093fe:	b29b      	uxth	r3, r3
 8009400:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009404:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009408:	b29a      	uxth	r2, r3
 800940a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800940e:	801a      	strh	r2, [r3, #0]
 8009410:	e024      	b.n	800945c <USB_EPStartXfer+0x109e>
 8009412:	463b      	mov	r3, r7
 8009414:	681b      	ldr	r3, [r3, #0]
 8009416:	785b      	ldrb	r3, [r3, #1]
 8009418:	2b01      	cmp	r3, #1
 800941a:	d11f      	bne.n	800945c <USB_EPStartXfer+0x109e>
 800941c:	1d3b      	adds	r3, r7, #4
 800941e:	681b      	ldr	r3, [r3, #0]
 8009420:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8009424:	1d3b      	adds	r3, r7, #4
 8009426:	681b      	ldr	r3, [r3, #0]
 8009428:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800942c:	b29b      	uxth	r3, r3
 800942e:	461a      	mov	r2, r3
 8009430:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009434:	4413      	add	r3, r2
 8009436:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800943a:	463b      	mov	r3, r7
 800943c:	681b      	ldr	r3, [r3, #0]
 800943e:	781b      	ldrb	r3, [r3, #0]
 8009440:	011a      	lsls	r2, r3, #4
 8009442:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009446:	4413      	add	r3, r2
 8009448:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800944c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8009450:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009454:	b29a      	uxth	r2, r3
 8009456:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800945a:	801a      	strh	r2, [r3, #0]
 800945c:	1d3b      	adds	r3, r7, #4
 800945e:	681b      	ldr	r3, [r3, #0]
 8009460:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8009464:	463b      	mov	r3, r7
 8009466:	681b      	ldr	r3, [r3, #0]
 8009468:	785b      	ldrb	r3, [r3, #1]
 800946a:	2b00      	cmp	r3, #0
 800946c:	d16f      	bne.n	800954e <USB_EPStartXfer+0x1190>
 800946e:	1d3b      	adds	r3, r7, #4
 8009470:	681b      	ldr	r3, [r3, #0]
 8009472:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8009476:	1d3b      	adds	r3, r7, #4
 8009478:	681b      	ldr	r3, [r3, #0]
 800947a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800947e:	b29b      	uxth	r3, r3
 8009480:	461a      	mov	r2, r3
 8009482:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8009486:	4413      	add	r3, r2
 8009488:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800948c:	463b      	mov	r3, r7
 800948e:	681b      	ldr	r3, [r3, #0]
 8009490:	781b      	ldrb	r3, [r3, #0]
 8009492:	011a      	lsls	r2, r3, #4
 8009494:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8009498:	4413      	add	r3, r2
 800949a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800949e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80094a2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80094a6:	2b00      	cmp	r3, #0
 80094a8:	d116      	bne.n	80094d8 <USB_EPStartXfer+0x111a>
 80094aa:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80094ae:	881b      	ldrh	r3, [r3, #0]
 80094b0:	b29b      	uxth	r3, r3
 80094b2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80094b6:	b29a      	uxth	r2, r3
 80094b8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80094bc:	801a      	strh	r2, [r3, #0]
 80094be:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80094c2:	881b      	ldrh	r3, [r3, #0]
 80094c4:	b29b      	uxth	r3, r3
 80094c6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80094ca:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80094ce:	b29a      	uxth	r2, r3
 80094d0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80094d4:	801a      	strh	r2, [r3, #0]
 80094d6:	e05e      	b.n	8009596 <USB_EPStartXfer+0x11d8>
 80094d8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80094dc:	2b3e      	cmp	r3, #62	; 0x3e
 80094de:	d818      	bhi.n	8009512 <USB_EPStartXfer+0x1154>
 80094e0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80094e4:	085b      	lsrs	r3, r3, #1
 80094e6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80094ea:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80094ee:	f003 0301 	and.w	r3, r3, #1
 80094f2:	2b00      	cmp	r3, #0
 80094f4:	d004      	beq.n	8009500 <USB_EPStartXfer+0x1142>
 80094f6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80094fa:	3301      	adds	r3, #1
 80094fc:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8009500:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009504:	b29b      	uxth	r3, r3
 8009506:	029b      	lsls	r3, r3, #10
 8009508:	b29a      	uxth	r2, r3
 800950a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800950e:	801a      	strh	r2, [r3, #0]
 8009510:	e041      	b.n	8009596 <USB_EPStartXfer+0x11d8>
 8009512:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009516:	095b      	lsrs	r3, r3, #5
 8009518:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800951c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009520:	f003 031f 	and.w	r3, r3, #31
 8009524:	2b00      	cmp	r3, #0
 8009526:	d104      	bne.n	8009532 <USB_EPStartXfer+0x1174>
 8009528:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800952c:	3b01      	subs	r3, #1
 800952e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8009532:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009536:	b29b      	uxth	r3, r3
 8009538:	029b      	lsls	r3, r3, #10
 800953a:	b29b      	uxth	r3, r3
 800953c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009540:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009544:	b29a      	uxth	r2, r3
 8009546:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800954a:	801a      	strh	r2, [r3, #0]
 800954c:	e023      	b.n	8009596 <USB_EPStartXfer+0x11d8>
 800954e:	463b      	mov	r3, r7
 8009550:	681b      	ldr	r3, [r3, #0]
 8009552:	785b      	ldrb	r3, [r3, #1]
 8009554:	2b01      	cmp	r3, #1
 8009556:	d11e      	bne.n	8009596 <USB_EPStartXfer+0x11d8>
 8009558:	1d3b      	adds	r3, r7, #4
 800955a:	681b      	ldr	r3, [r3, #0]
 800955c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009560:	b29b      	uxth	r3, r3
 8009562:	461a      	mov	r2, r3
 8009564:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8009568:	4413      	add	r3, r2
 800956a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800956e:	463b      	mov	r3, r7
 8009570:	681b      	ldr	r3, [r3, #0]
 8009572:	781b      	ldrb	r3, [r3, #0]
 8009574:	011a      	lsls	r2, r3, #4
 8009576:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800957a:	4413      	add	r3, r2
 800957c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8009580:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8009584:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009588:	b29a      	uxth	r2, r3
 800958a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800958e:	801a      	strh	r2, [r3, #0]
 8009590:	e001      	b.n	8009596 <USB_EPStartXfer+0x11d8>
      }
      else
      {
        return HAL_ERROR;
 8009592:	2301      	movs	r3, #1
 8009594:	e02e      	b.n	80095f4 <USB_EPStartXfer+0x1236>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8009596:	1d3b      	adds	r3, r7, #4
 8009598:	681a      	ldr	r2, [r3, #0]
 800959a:	463b      	mov	r3, r7
 800959c:	681b      	ldr	r3, [r3, #0]
 800959e:	781b      	ldrb	r3, [r3, #0]
 80095a0:	009b      	lsls	r3, r3, #2
 80095a2:	4413      	add	r3, r2
 80095a4:	881b      	ldrh	r3, [r3, #0]
 80095a6:	b29b      	uxth	r3, r3
 80095a8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80095ac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80095b0:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 80095b4:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 80095b8:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80095bc:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 80095c0:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 80095c4:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80095c8:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 80095cc:	1d3b      	adds	r3, r7, #4
 80095ce:	681a      	ldr	r2, [r3, #0]
 80095d0:	463b      	mov	r3, r7
 80095d2:	681b      	ldr	r3, [r3, #0]
 80095d4:	781b      	ldrb	r3, [r3, #0]
 80095d6:	009b      	lsls	r3, r3, #2
 80095d8:	441a      	add	r2, r3
 80095da:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 80095de:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80095e2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80095e6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80095ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80095ee:	b29b      	uxth	r3, r3
 80095f0:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80095f2:	2300      	movs	r3, #0
}
 80095f4:	4618      	mov	r0, r3
 80095f6:	f507 7788 	add.w	r7, r7, #272	; 0x110
 80095fa:	46bd      	mov	sp, r7
 80095fc:	bd80      	pop	{r7, pc}

080095fe <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80095fe:	b480      	push	{r7}
 8009600:	b085      	sub	sp, #20
 8009602:	af00      	add	r7, sp, #0
 8009604:	6078      	str	r0, [r7, #4]
 8009606:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8009608:	683b      	ldr	r3, [r7, #0]
 800960a:	785b      	ldrb	r3, [r3, #1]
 800960c:	2b00      	cmp	r3, #0
 800960e:	d020      	beq.n	8009652 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8009610:	687a      	ldr	r2, [r7, #4]
 8009612:	683b      	ldr	r3, [r7, #0]
 8009614:	781b      	ldrb	r3, [r3, #0]
 8009616:	009b      	lsls	r3, r3, #2
 8009618:	4413      	add	r3, r2
 800961a:	881b      	ldrh	r3, [r3, #0]
 800961c:	b29b      	uxth	r3, r3
 800961e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009622:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009626:	81bb      	strh	r3, [r7, #12]
 8009628:	89bb      	ldrh	r3, [r7, #12]
 800962a:	f083 0310 	eor.w	r3, r3, #16
 800962e:	81bb      	strh	r3, [r7, #12]
 8009630:	687a      	ldr	r2, [r7, #4]
 8009632:	683b      	ldr	r3, [r7, #0]
 8009634:	781b      	ldrb	r3, [r3, #0]
 8009636:	009b      	lsls	r3, r3, #2
 8009638:	441a      	add	r2, r3
 800963a:	89bb      	ldrh	r3, [r7, #12]
 800963c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009640:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009644:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009648:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800964c:	b29b      	uxth	r3, r3
 800964e:	8013      	strh	r3, [r2, #0]
 8009650:	e01f      	b.n	8009692 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8009652:	687a      	ldr	r2, [r7, #4]
 8009654:	683b      	ldr	r3, [r7, #0]
 8009656:	781b      	ldrb	r3, [r3, #0]
 8009658:	009b      	lsls	r3, r3, #2
 800965a:	4413      	add	r3, r2
 800965c:	881b      	ldrh	r3, [r3, #0]
 800965e:	b29b      	uxth	r3, r3
 8009660:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009664:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009668:	81fb      	strh	r3, [r7, #14]
 800966a:	89fb      	ldrh	r3, [r7, #14]
 800966c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8009670:	81fb      	strh	r3, [r7, #14]
 8009672:	687a      	ldr	r2, [r7, #4]
 8009674:	683b      	ldr	r3, [r7, #0]
 8009676:	781b      	ldrb	r3, [r3, #0]
 8009678:	009b      	lsls	r3, r3, #2
 800967a:	441a      	add	r2, r3
 800967c:	89fb      	ldrh	r3, [r7, #14]
 800967e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009682:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009686:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800968a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800968e:	b29b      	uxth	r3, r3
 8009690:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8009692:	2300      	movs	r3, #0
}
 8009694:	4618      	mov	r0, r3
 8009696:	3714      	adds	r7, #20
 8009698:	46bd      	mov	sp, r7
 800969a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800969e:	4770      	bx	lr

080096a0 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80096a0:	b480      	push	{r7}
 80096a2:	b087      	sub	sp, #28
 80096a4:	af00      	add	r7, sp, #0
 80096a6:	6078      	str	r0, [r7, #4]
 80096a8:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80096aa:	683b      	ldr	r3, [r7, #0]
 80096ac:	7b1b      	ldrb	r3, [r3, #12]
 80096ae:	2b00      	cmp	r3, #0
 80096b0:	f040 809d 	bne.w	80097ee <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 80096b4:	683b      	ldr	r3, [r7, #0]
 80096b6:	785b      	ldrb	r3, [r3, #1]
 80096b8:	2b00      	cmp	r3, #0
 80096ba:	d04c      	beq.n	8009756 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80096bc:	687a      	ldr	r2, [r7, #4]
 80096be:	683b      	ldr	r3, [r7, #0]
 80096c0:	781b      	ldrb	r3, [r3, #0]
 80096c2:	009b      	lsls	r3, r3, #2
 80096c4:	4413      	add	r3, r2
 80096c6:	881b      	ldrh	r3, [r3, #0]
 80096c8:	823b      	strh	r3, [r7, #16]
 80096ca:	8a3b      	ldrh	r3, [r7, #16]
 80096cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80096d0:	2b00      	cmp	r3, #0
 80096d2:	d01b      	beq.n	800970c <USB_EPClearStall+0x6c>
 80096d4:	687a      	ldr	r2, [r7, #4]
 80096d6:	683b      	ldr	r3, [r7, #0]
 80096d8:	781b      	ldrb	r3, [r3, #0]
 80096da:	009b      	lsls	r3, r3, #2
 80096dc:	4413      	add	r3, r2
 80096de:	881b      	ldrh	r3, [r3, #0]
 80096e0:	b29b      	uxth	r3, r3
 80096e2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80096e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80096ea:	81fb      	strh	r3, [r7, #14]
 80096ec:	687a      	ldr	r2, [r7, #4]
 80096ee:	683b      	ldr	r3, [r7, #0]
 80096f0:	781b      	ldrb	r3, [r3, #0]
 80096f2:	009b      	lsls	r3, r3, #2
 80096f4:	441a      	add	r2, r3
 80096f6:	89fb      	ldrh	r3, [r7, #14]
 80096f8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80096fc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009700:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009704:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8009708:	b29b      	uxth	r3, r3
 800970a:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800970c:	683b      	ldr	r3, [r7, #0]
 800970e:	78db      	ldrb	r3, [r3, #3]
 8009710:	2b01      	cmp	r3, #1
 8009712:	d06c      	beq.n	80097ee <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8009714:	687a      	ldr	r2, [r7, #4]
 8009716:	683b      	ldr	r3, [r7, #0]
 8009718:	781b      	ldrb	r3, [r3, #0]
 800971a:	009b      	lsls	r3, r3, #2
 800971c:	4413      	add	r3, r2
 800971e:	881b      	ldrh	r3, [r3, #0]
 8009720:	b29b      	uxth	r3, r3
 8009722:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009726:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800972a:	81bb      	strh	r3, [r7, #12]
 800972c:	89bb      	ldrh	r3, [r7, #12]
 800972e:	f083 0320 	eor.w	r3, r3, #32
 8009732:	81bb      	strh	r3, [r7, #12]
 8009734:	687a      	ldr	r2, [r7, #4]
 8009736:	683b      	ldr	r3, [r7, #0]
 8009738:	781b      	ldrb	r3, [r3, #0]
 800973a:	009b      	lsls	r3, r3, #2
 800973c:	441a      	add	r2, r3
 800973e:	89bb      	ldrh	r3, [r7, #12]
 8009740:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009744:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009748:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800974c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009750:	b29b      	uxth	r3, r3
 8009752:	8013      	strh	r3, [r2, #0]
 8009754:	e04b      	b.n	80097ee <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8009756:	687a      	ldr	r2, [r7, #4]
 8009758:	683b      	ldr	r3, [r7, #0]
 800975a:	781b      	ldrb	r3, [r3, #0]
 800975c:	009b      	lsls	r3, r3, #2
 800975e:	4413      	add	r3, r2
 8009760:	881b      	ldrh	r3, [r3, #0]
 8009762:	82fb      	strh	r3, [r7, #22]
 8009764:	8afb      	ldrh	r3, [r7, #22]
 8009766:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800976a:	2b00      	cmp	r3, #0
 800976c:	d01b      	beq.n	80097a6 <USB_EPClearStall+0x106>
 800976e:	687a      	ldr	r2, [r7, #4]
 8009770:	683b      	ldr	r3, [r7, #0]
 8009772:	781b      	ldrb	r3, [r3, #0]
 8009774:	009b      	lsls	r3, r3, #2
 8009776:	4413      	add	r3, r2
 8009778:	881b      	ldrh	r3, [r3, #0]
 800977a:	b29b      	uxth	r3, r3
 800977c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009780:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009784:	82bb      	strh	r3, [r7, #20]
 8009786:	687a      	ldr	r2, [r7, #4]
 8009788:	683b      	ldr	r3, [r7, #0]
 800978a:	781b      	ldrb	r3, [r3, #0]
 800978c:	009b      	lsls	r3, r3, #2
 800978e:	441a      	add	r2, r3
 8009790:	8abb      	ldrh	r3, [r7, #20]
 8009792:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009796:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800979a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800979e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80097a2:	b29b      	uxth	r3, r3
 80097a4:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80097a6:	687a      	ldr	r2, [r7, #4]
 80097a8:	683b      	ldr	r3, [r7, #0]
 80097aa:	781b      	ldrb	r3, [r3, #0]
 80097ac:	009b      	lsls	r3, r3, #2
 80097ae:	4413      	add	r3, r2
 80097b0:	881b      	ldrh	r3, [r3, #0]
 80097b2:	b29b      	uxth	r3, r3
 80097b4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80097b8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80097bc:	827b      	strh	r3, [r7, #18]
 80097be:	8a7b      	ldrh	r3, [r7, #18]
 80097c0:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80097c4:	827b      	strh	r3, [r7, #18]
 80097c6:	8a7b      	ldrh	r3, [r7, #18]
 80097c8:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80097cc:	827b      	strh	r3, [r7, #18]
 80097ce:	687a      	ldr	r2, [r7, #4]
 80097d0:	683b      	ldr	r3, [r7, #0]
 80097d2:	781b      	ldrb	r3, [r3, #0]
 80097d4:	009b      	lsls	r3, r3, #2
 80097d6:	441a      	add	r2, r3
 80097d8:	8a7b      	ldrh	r3, [r7, #18]
 80097da:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80097de:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80097e2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80097e6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80097ea:	b29b      	uxth	r3, r3
 80097ec:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 80097ee:	2300      	movs	r3, #0
}
 80097f0:	4618      	mov	r0, r3
 80097f2:	371c      	adds	r7, #28
 80097f4:	46bd      	mov	sp, r7
 80097f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097fa:	4770      	bx	lr

080097fc <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 80097fc:	b480      	push	{r7}
 80097fe:	b083      	sub	sp, #12
 8009800:	af00      	add	r7, sp, #0
 8009802:	6078      	str	r0, [r7, #4]
 8009804:	460b      	mov	r3, r1
 8009806:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8009808:	78fb      	ldrb	r3, [r7, #3]
 800980a:	2b00      	cmp	r3, #0
 800980c:	d103      	bne.n	8009816 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	2280      	movs	r2, #128	; 0x80
 8009812:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8009816:	2300      	movs	r3, #0
}
 8009818:	4618      	mov	r0, r3
 800981a:	370c      	adds	r7, #12
 800981c:	46bd      	mov	sp, r7
 800981e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009822:	4770      	bx	lr

08009824 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8009824:	b480      	push	{r7}
 8009826:	b083      	sub	sp, #12
 8009828:	af00      	add	r7, sp, #0
 800982a:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800982c:	2300      	movs	r3, #0
}
 800982e:	4618      	mov	r0, r3
 8009830:	370c      	adds	r7, #12
 8009832:	46bd      	mov	sp, r7
 8009834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009838:	4770      	bx	lr

0800983a <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 800983a:	b480      	push	{r7}
 800983c:	b085      	sub	sp, #20
 800983e:	af00      	add	r7, sp, #0
 8009840:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8009848:	b29b      	uxth	r3, r3
 800984a:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800984c:	68fb      	ldr	r3, [r7, #12]
}
 800984e:	4618      	mov	r0, r3
 8009850:	3714      	adds	r7, #20
 8009852:	46bd      	mov	sp, r7
 8009854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009858:	4770      	bx	lr

0800985a <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800985a:	b480      	push	{r7}
 800985c:	b08d      	sub	sp, #52	; 0x34
 800985e:	af00      	add	r7, sp, #0
 8009860:	60f8      	str	r0, [r7, #12]
 8009862:	60b9      	str	r1, [r7, #8]
 8009864:	4611      	mov	r1, r2
 8009866:	461a      	mov	r2, r3
 8009868:	460b      	mov	r3, r1
 800986a:	80fb      	strh	r3, [r7, #6]
 800986c:	4613      	mov	r3, r2
 800986e:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8009870:	88bb      	ldrh	r3, [r7, #4]
 8009872:	3301      	adds	r3, #1
 8009874:	085b      	lsrs	r3, r3, #1
 8009876:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 8009878:	68fb      	ldr	r3, [r7, #12]
 800987a:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800987c:	68bb      	ldr	r3, [r7, #8]
 800987e:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8009880:	88fb      	ldrh	r3, [r7, #6]
 8009882:	005a      	lsls	r2, r3, #1
 8009884:	69fb      	ldr	r3, [r7, #28]
 8009886:	4413      	add	r3, r2
 8009888:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800988c:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 800988e:	6a3b      	ldr	r3, [r7, #32]
 8009890:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009892:	e01e      	b.n	80098d2 <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 8009894:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009896:	781b      	ldrb	r3, [r3, #0]
 8009898:	61bb      	str	r3, [r7, #24]
    pBuf++;
 800989a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800989c:	3301      	adds	r3, #1
 800989e:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 80098a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098a2:	781b      	ldrb	r3, [r3, #0]
 80098a4:	b29b      	uxth	r3, r3
 80098a6:	021b      	lsls	r3, r3, #8
 80098a8:	b29b      	uxth	r3, r3
 80098aa:	461a      	mov	r2, r3
 80098ac:	69bb      	ldr	r3, [r7, #24]
 80098ae:	4313      	orrs	r3, r2
 80098b0:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 80098b2:	697b      	ldr	r3, [r7, #20]
 80098b4:	b29a      	uxth	r2, r3
 80098b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098b8:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 80098ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098bc:	3302      	adds	r3, #2
 80098be:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 80098c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098c2:	3302      	adds	r3, #2
 80098c4:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 80098c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098c8:	3301      	adds	r3, #1
 80098ca:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 80098cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80098ce:	3b01      	subs	r3, #1
 80098d0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80098d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80098d4:	2b00      	cmp	r3, #0
 80098d6:	d1dd      	bne.n	8009894 <USB_WritePMA+0x3a>
  }
}
 80098d8:	bf00      	nop
 80098da:	3734      	adds	r7, #52	; 0x34
 80098dc:	46bd      	mov	sp, r7
 80098de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098e2:	4770      	bx	lr

080098e4 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80098e4:	b480      	push	{r7}
 80098e6:	b08b      	sub	sp, #44	; 0x2c
 80098e8:	af00      	add	r7, sp, #0
 80098ea:	60f8      	str	r0, [r7, #12]
 80098ec:	60b9      	str	r1, [r7, #8]
 80098ee:	4611      	mov	r1, r2
 80098f0:	461a      	mov	r2, r3
 80098f2:	460b      	mov	r3, r1
 80098f4:	80fb      	strh	r3, [r7, #6]
 80098f6:	4613      	mov	r3, r2
 80098f8:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 80098fa:	88bb      	ldrh	r3, [r7, #4]
 80098fc:	085b      	lsrs	r3, r3, #1
 80098fe:	b29b      	uxth	r3, r3
 8009900:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8009902:	68fb      	ldr	r3, [r7, #12]
 8009904:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8009906:	68bb      	ldr	r3, [r7, #8]
 8009908:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800990a:	88fb      	ldrh	r3, [r7, #6]
 800990c:	005a      	lsls	r2, r3, #1
 800990e:	697b      	ldr	r3, [r7, #20]
 8009910:	4413      	add	r3, r2
 8009912:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009916:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 8009918:	69bb      	ldr	r3, [r7, #24]
 800991a:	627b      	str	r3, [r7, #36]	; 0x24
 800991c:	e01b      	b.n	8009956 <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 800991e:	6a3b      	ldr	r3, [r7, #32]
 8009920:	881b      	ldrh	r3, [r3, #0]
 8009922:	b29b      	uxth	r3, r3
 8009924:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8009926:	6a3b      	ldr	r3, [r7, #32]
 8009928:	3302      	adds	r3, #2
 800992a:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800992c:	693b      	ldr	r3, [r7, #16]
 800992e:	b2da      	uxtb	r2, r3
 8009930:	69fb      	ldr	r3, [r7, #28]
 8009932:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8009934:	69fb      	ldr	r3, [r7, #28]
 8009936:	3301      	adds	r3, #1
 8009938:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 800993a:	693b      	ldr	r3, [r7, #16]
 800993c:	0a1b      	lsrs	r3, r3, #8
 800993e:	b2da      	uxtb	r2, r3
 8009940:	69fb      	ldr	r3, [r7, #28]
 8009942:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8009944:	69fb      	ldr	r3, [r7, #28]
 8009946:	3301      	adds	r3, #1
 8009948:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 800994a:	6a3b      	ldr	r3, [r7, #32]
 800994c:	3302      	adds	r3, #2
 800994e:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 8009950:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009952:	3b01      	subs	r3, #1
 8009954:	627b      	str	r3, [r7, #36]	; 0x24
 8009956:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009958:	2b00      	cmp	r3, #0
 800995a:	d1e0      	bne.n	800991e <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 800995c:	88bb      	ldrh	r3, [r7, #4]
 800995e:	f003 0301 	and.w	r3, r3, #1
 8009962:	b29b      	uxth	r3, r3
 8009964:	2b00      	cmp	r3, #0
 8009966:	d007      	beq.n	8009978 <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 8009968:	6a3b      	ldr	r3, [r7, #32]
 800996a:	881b      	ldrh	r3, [r3, #0]
 800996c:	b29b      	uxth	r3, r3
 800996e:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8009970:	693b      	ldr	r3, [r7, #16]
 8009972:	b2da      	uxtb	r2, r3
 8009974:	69fb      	ldr	r3, [r7, #28]
 8009976:	701a      	strb	r2, [r3, #0]
  }
}
 8009978:	bf00      	nop
 800997a:	372c      	adds	r7, #44	; 0x2c
 800997c:	46bd      	mov	sp, r7
 800997e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009982:	4770      	bx	lr

08009984 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009984:	b580      	push	{r7, lr}
 8009986:	b084      	sub	sp, #16
 8009988:	af00      	add	r7, sp, #0
 800998a:	6078      	str	r0, [r7, #4]
 800998c:	460b      	mov	r3, r1
 800998e:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8009990:	2300      	movs	r3, #0
 8009992:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	7c1b      	ldrb	r3, [r3, #16]
 8009998:	2b00      	cmp	r3, #0
 800999a:	d115      	bne.n	80099c8 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800999c:	f44f 7300 	mov.w	r3, #512	; 0x200
 80099a0:	2202      	movs	r2, #2
 80099a2:	2181      	movs	r1, #129	; 0x81
 80099a4:	6878      	ldr	r0, [r7, #4]
 80099a6:	f001 fea6 	bl	800b6f6 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	2201      	movs	r2, #1
 80099ae:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80099b0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80099b4:	2202      	movs	r2, #2
 80099b6:	2101      	movs	r1, #1
 80099b8:	6878      	ldr	r0, [r7, #4]
 80099ba:	f001 fe9c 	bl	800b6f6 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	2201      	movs	r2, #1
 80099c2:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 80099c6:	e012      	b.n	80099ee <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80099c8:	2340      	movs	r3, #64	; 0x40
 80099ca:	2202      	movs	r2, #2
 80099cc:	2181      	movs	r1, #129	; 0x81
 80099ce:	6878      	ldr	r0, [r7, #4]
 80099d0:	f001 fe91 	bl	800b6f6 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	2201      	movs	r2, #1
 80099d8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80099da:	2340      	movs	r3, #64	; 0x40
 80099dc:	2202      	movs	r2, #2
 80099de:	2101      	movs	r1, #1
 80099e0:	6878      	ldr	r0, [r7, #4]
 80099e2:	f001 fe88 	bl	800b6f6 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	2201      	movs	r2, #1
 80099ea:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80099ee:	2308      	movs	r3, #8
 80099f0:	2203      	movs	r2, #3
 80099f2:	2182      	movs	r1, #130	; 0x82
 80099f4:	6878      	ldr	r0, [r7, #4]
 80099f6:	f001 fe7e 	bl	800b6f6 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	2201      	movs	r2, #1
 80099fe:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8009a00:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8009a04:	f001 ffa0 	bl	800b948 <USBD_static_malloc>
 8009a08:	4602      	mov	r2, r0
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009a16:	2b00      	cmp	r3, #0
 8009a18:	d102      	bne.n	8009a20 <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 8009a1a:	2301      	movs	r3, #1
 8009a1c:	73fb      	strb	r3, [r7, #15]
 8009a1e:	e026      	b.n	8009a6e <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009a26:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009a2e:	681b      	ldr	r3, [r3, #0]
 8009a30:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8009a32:	68bb      	ldr	r3, [r7, #8]
 8009a34:	2200      	movs	r2, #0
 8009a36:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 8009a3a:	68bb      	ldr	r3, [r7, #8]
 8009a3c:	2200      	movs	r2, #0
 8009a3e:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	7c1b      	ldrb	r3, [r3, #16]
 8009a46:	2b00      	cmp	r3, #0
 8009a48:	d109      	bne.n	8009a5e <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8009a4a:	68bb      	ldr	r3, [r7, #8]
 8009a4c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009a50:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009a54:	2101      	movs	r1, #1
 8009a56:	6878      	ldr	r0, [r7, #4]
 8009a58:	f001 ff3f 	bl	800b8da <USBD_LL_PrepareReceive>
 8009a5c:	e007      	b.n	8009a6e <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8009a5e:	68bb      	ldr	r3, [r7, #8]
 8009a60:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009a64:	2340      	movs	r3, #64	; 0x40
 8009a66:	2101      	movs	r1, #1
 8009a68:	6878      	ldr	r0, [r7, #4]
 8009a6a:	f001 ff36 	bl	800b8da <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8009a6e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009a70:	4618      	mov	r0, r3
 8009a72:	3710      	adds	r7, #16
 8009a74:	46bd      	mov	sp, r7
 8009a76:	bd80      	pop	{r7, pc}

08009a78 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009a78:	b580      	push	{r7, lr}
 8009a7a:	b084      	sub	sp, #16
 8009a7c:	af00      	add	r7, sp, #0
 8009a7e:	6078      	str	r0, [r7, #4]
 8009a80:	460b      	mov	r3, r1
 8009a82:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8009a84:	2300      	movs	r3, #0
 8009a86:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8009a88:	2181      	movs	r1, #129	; 0x81
 8009a8a:	6878      	ldr	r0, [r7, #4]
 8009a8c:	f001 fe59 	bl	800b742 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	2200      	movs	r2, #0
 8009a94:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8009a96:	2101      	movs	r1, #1
 8009a98:	6878      	ldr	r0, [r7, #4]
 8009a9a:	f001 fe52 	bl	800b742 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	2200      	movs	r2, #0
 8009aa2:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8009aa6:	2182      	movs	r1, #130	; 0x82
 8009aa8:	6878      	ldr	r0, [r7, #4]
 8009aaa:	f001 fe4a 	bl	800b742 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	2200      	movs	r2, #0
 8009ab2:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009aba:	2b00      	cmp	r3, #0
 8009abc:	d00e      	beq.n	8009adc <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009ac4:	685b      	ldr	r3, [r3, #4]
 8009ac6:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009ace:	4618      	mov	r0, r3
 8009ad0:	f001 ff48 	bl	800b964 <USBD_static_free>
    pdev->pClassData = NULL;
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	2200      	movs	r2, #0
 8009ad8:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 8009adc:	7bfb      	ldrb	r3, [r7, #15]
}
 8009ade:	4618      	mov	r0, r3
 8009ae0:	3710      	adds	r7, #16
 8009ae2:	46bd      	mov	sp, r7
 8009ae4:	bd80      	pop	{r7, pc}

08009ae6 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8009ae6:	b580      	push	{r7, lr}
 8009ae8:	b086      	sub	sp, #24
 8009aea:	af00      	add	r7, sp, #0
 8009aec:	6078      	str	r0, [r7, #4]
 8009aee:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009af6:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8009af8:	2300      	movs	r3, #0
 8009afa:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8009afc:	2300      	movs	r3, #0
 8009afe:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 8009b00:	2300      	movs	r3, #0
 8009b02:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009b04:	683b      	ldr	r3, [r7, #0]
 8009b06:	781b      	ldrb	r3, [r3, #0]
 8009b08:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009b0c:	2b00      	cmp	r3, #0
 8009b0e:	d039      	beq.n	8009b84 <USBD_CDC_Setup+0x9e>
 8009b10:	2b20      	cmp	r3, #32
 8009b12:	d17c      	bne.n	8009c0e <USBD_CDC_Setup+0x128>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 8009b14:	683b      	ldr	r3, [r7, #0]
 8009b16:	88db      	ldrh	r3, [r3, #6]
 8009b18:	2b00      	cmp	r3, #0
 8009b1a:	d029      	beq.n	8009b70 <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 8009b1c:	683b      	ldr	r3, [r7, #0]
 8009b1e:	781b      	ldrb	r3, [r3, #0]
 8009b20:	b25b      	sxtb	r3, r3
 8009b22:	2b00      	cmp	r3, #0
 8009b24:	da11      	bge.n	8009b4a <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009b2c:	689b      	ldr	r3, [r3, #8]
 8009b2e:	683a      	ldr	r2, [r7, #0]
 8009b30:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 8009b32:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8009b34:	683a      	ldr	r2, [r7, #0]
 8009b36:	88d2      	ldrh	r2, [r2, #6]
 8009b38:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8009b3a:	6939      	ldr	r1, [r7, #16]
 8009b3c:	683b      	ldr	r3, [r7, #0]
 8009b3e:	88db      	ldrh	r3, [r3, #6]
 8009b40:	461a      	mov	r2, r3
 8009b42:	6878      	ldr	r0, [r7, #4]
 8009b44:	f001 fa04 	bl	800af50 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 8009b48:	e068      	b.n	8009c1c <USBD_CDC_Setup+0x136>
          hcdc->CmdOpCode = req->bRequest;
 8009b4a:	683b      	ldr	r3, [r7, #0]
 8009b4c:	785a      	ldrb	r2, [r3, #1]
 8009b4e:	693b      	ldr	r3, [r7, #16]
 8009b50:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8009b54:	683b      	ldr	r3, [r7, #0]
 8009b56:	88db      	ldrh	r3, [r3, #6]
 8009b58:	b2da      	uxtb	r2, r3
 8009b5a:	693b      	ldr	r3, [r7, #16]
 8009b5c:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8009b60:	6939      	ldr	r1, [r7, #16]
 8009b62:	683b      	ldr	r3, [r7, #0]
 8009b64:	88db      	ldrh	r3, [r3, #6]
 8009b66:	461a      	mov	r2, r3
 8009b68:	6878      	ldr	r0, [r7, #4]
 8009b6a:	f001 fa1f 	bl	800afac <USBD_CtlPrepareRx>
      break;
 8009b6e:	e055      	b.n	8009c1c <USBD_CDC_Setup+0x136>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009b76:	689b      	ldr	r3, [r3, #8]
 8009b78:	683a      	ldr	r2, [r7, #0]
 8009b7a:	7850      	ldrb	r0, [r2, #1]
 8009b7c:	2200      	movs	r2, #0
 8009b7e:	6839      	ldr	r1, [r7, #0]
 8009b80:	4798      	blx	r3
      break;
 8009b82:	e04b      	b.n	8009c1c <USBD_CDC_Setup+0x136>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009b84:	683b      	ldr	r3, [r7, #0]
 8009b86:	785b      	ldrb	r3, [r3, #1]
 8009b88:	2b0a      	cmp	r3, #10
 8009b8a:	d017      	beq.n	8009bbc <USBD_CDC_Setup+0xd6>
 8009b8c:	2b0b      	cmp	r3, #11
 8009b8e:	d029      	beq.n	8009be4 <USBD_CDC_Setup+0xfe>
 8009b90:	2b00      	cmp	r3, #0
 8009b92:	d133      	bne.n	8009bfc <USBD_CDC_Setup+0x116>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009b9a:	2b03      	cmp	r3, #3
 8009b9c:	d107      	bne.n	8009bae <USBD_CDC_Setup+0xc8>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8009b9e:	f107 030c 	add.w	r3, r7, #12
 8009ba2:	2202      	movs	r2, #2
 8009ba4:	4619      	mov	r1, r3
 8009ba6:	6878      	ldr	r0, [r7, #4]
 8009ba8:	f001 f9d2 	bl	800af50 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8009bac:	e02e      	b.n	8009c0c <USBD_CDC_Setup+0x126>
            USBD_CtlError(pdev, req);
 8009bae:	6839      	ldr	r1, [r7, #0]
 8009bb0:	6878      	ldr	r0, [r7, #4]
 8009bb2:	f001 f962 	bl	800ae7a <USBD_CtlError>
            ret = USBD_FAIL;
 8009bb6:	2302      	movs	r3, #2
 8009bb8:	75fb      	strb	r3, [r7, #23]
          break;
 8009bba:	e027      	b.n	8009c0c <USBD_CDC_Setup+0x126>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009bc2:	2b03      	cmp	r3, #3
 8009bc4:	d107      	bne.n	8009bd6 <USBD_CDC_Setup+0xf0>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8009bc6:	f107 030f 	add.w	r3, r7, #15
 8009bca:	2201      	movs	r2, #1
 8009bcc:	4619      	mov	r1, r3
 8009bce:	6878      	ldr	r0, [r7, #4]
 8009bd0:	f001 f9be 	bl	800af50 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8009bd4:	e01a      	b.n	8009c0c <USBD_CDC_Setup+0x126>
            USBD_CtlError(pdev, req);
 8009bd6:	6839      	ldr	r1, [r7, #0]
 8009bd8:	6878      	ldr	r0, [r7, #4]
 8009bda:	f001 f94e 	bl	800ae7a <USBD_CtlError>
            ret = USBD_FAIL;
 8009bde:	2302      	movs	r3, #2
 8009be0:	75fb      	strb	r3, [r7, #23]
          break;
 8009be2:	e013      	b.n	8009c0c <USBD_CDC_Setup+0x126>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009bea:	2b03      	cmp	r3, #3
 8009bec:	d00d      	beq.n	8009c0a <USBD_CDC_Setup+0x124>
          {
            USBD_CtlError(pdev, req);
 8009bee:	6839      	ldr	r1, [r7, #0]
 8009bf0:	6878      	ldr	r0, [r7, #4]
 8009bf2:	f001 f942 	bl	800ae7a <USBD_CtlError>
            ret = USBD_FAIL;
 8009bf6:	2302      	movs	r3, #2
 8009bf8:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8009bfa:	e006      	b.n	8009c0a <USBD_CDC_Setup+0x124>

        default:
          USBD_CtlError(pdev, req);
 8009bfc:	6839      	ldr	r1, [r7, #0]
 8009bfe:	6878      	ldr	r0, [r7, #4]
 8009c00:	f001 f93b 	bl	800ae7a <USBD_CtlError>
          ret = USBD_FAIL;
 8009c04:	2302      	movs	r3, #2
 8009c06:	75fb      	strb	r3, [r7, #23]
          break;
 8009c08:	e000      	b.n	8009c0c <USBD_CDC_Setup+0x126>
          break;
 8009c0a:	bf00      	nop
      }
      break;
 8009c0c:	e006      	b.n	8009c1c <USBD_CDC_Setup+0x136>

    default:
      USBD_CtlError(pdev, req);
 8009c0e:	6839      	ldr	r1, [r7, #0]
 8009c10:	6878      	ldr	r0, [r7, #4]
 8009c12:	f001 f932 	bl	800ae7a <USBD_CtlError>
      ret = USBD_FAIL;
 8009c16:	2302      	movs	r3, #2
 8009c18:	75fb      	strb	r3, [r7, #23]
      break;
 8009c1a:	bf00      	nop
  }

  return ret;
 8009c1c:	7dfb      	ldrb	r3, [r7, #23]
}
 8009c1e:	4618      	mov	r0, r3
 8009c20:	3718      	adds	r7, #24
 8009c22:	46bd      	mov	sp, r7
 8009c24:	bd80      	pop	{r7, pc}

08009c26 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8009c26:	b580      	push	{r7, lr}
 8009c28:	b084      	sub	sp, #16
 8009c2a:	af00      	add	r7, sp, #0
 8009c2c:	6078      	str	r0, [r7, #4]
 8009c2e:	460b      	mov	r3, r1
 8009c30:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009c38:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009c40:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009c48:	2b00      	cmp	r3, #0
 8009c4a:	d03a      	beq.n	8009cc2 <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8009c4c:	78fa      	ldrb	r2, [r7, #3]
 8009c4e:	6879      	ldr	r1, [r7, #4]
 8009c50:	4613      	mov	r3, r2
 8009c52:	009b      	lsls	r3, r3, #2
 8009c54:	4413      	add	r3, r2
 8009c56:	009b      	lsls	r3, r3, #2
 8009c58:	440b      	add	r3, r1
 8009c5a:	331c      	adds	r3, #28
 8009c5c:	681b      	ldr	r3, [r3, #0]
 8009c5e:	2b00      	cmp	r3, #0
 8009c60:	d029      	beq.n	8009cb6 <USBD_CDC_DataIn+0x90>
 8009c62:	78fa      	ldrb	r2, [r7, #3]
 8009c64:	6879      	ldr	r1, [r7, #4]
 8009c66:	4613      	mov	r3, r2
 8009c68:	009b      	lsls	r3, r3, #2
 8009c6a:	4413      	add	r3, r2
 8009c6c:	009b      	lsls	r3, r3, #2
 8009c6e:	440b      	add	r3, r1
 8009c70:	331c      	adds	r3, #28
 8009c72:	681a      	ldr	r2, [r3, #0]
 8009c74:	78f9      	ldrb	r1, [r7, #3]
 8009c76:	68b8      	ldr	r0, [r7, #8]
 8009c78:	460b      	mov	r3, r1
 8009c7a:	009b      	lsls	r3, r3, #2
 8009c7c:	440b      	add	r3, r1
 8009c7e:	00db      	lsls	r3, r3, #3
 8009c80:	4403      	add	r3, r0
 8009c82:	3338      	adds	r3, #56	; 0x38
 8009c84:	681b      	ldr	r3, [r3, #0]
 8009c86:	fbb2 f1f3 	udiv	r1, r2, r3
 8009c8a:	fb03 f301 	mul.w	r3, r3, r1
 8009c8e:	1ad3      	subs	r3, r2, r3
 8009c90:	2b00      	cmp	r3, #0
 8009c92:	d110      	bne.n	8009cb6 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8009c94:	78fa      	ldrb	r2, [r7, #3]
 8009c96:	6879      	ldr	r1, [r7, #4]
 8009c98:	4613      	mov	r3, r2
 8009c9a:	009b      	lsls	r3, r3, #2
 8009c9c:	4413      	add	r3, r2
 8009c9e:	009b      	lsls	r3, r3, #2
 8009ca0:	440b      	add	r3, r1
 8009ca2:	331c      	adds	r3, #28
 8009ca4:	2200      	movs	r2, #0
 8009ca6:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8009ca8:	78f9      	ldrb	r1, [r7, #3]
 8009caa:	2300      	movs	r3, #0
 8009cac:	2200      	movs	r2, #0
 8009cae:	6878      	ldr	r0, [r7, #4]
 8009cb0:	f001 fdf0 	bl	800b894 <USBD_LL_Transmit>
 8009cb4:	e003      	b.n	8009cbe <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 8009cb6:	68fb      	ldr	r3, [r7, #12]
 8009cb8:	2200      	movs	r2, #0
 8009cba:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 8009cbe:	2300      	movs	r3, #0
 8009cc0:	e000      	b.n	8009cc4 <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 8009cc2:	2302      	movs	r3, #2
  }
}
 8009cc4:	4618      	mov	r0, r3
 8009cc6:	3710      	adds	r7, #16
 8009cc8:	46bd      	mov	sp, r7
 8009cca:	bd80      	pop	{r7, pc}

08009ccc <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8009ccc:	b580      	push	{r7, lr}
 8009cce:	b084      	sub	sp, #16
 8009cd0:	af00      	add	r7, sp, #0
 8009cd2:	6078      	str	r0, [r7, #4]
 8009cd4:	460b      	mov	r3, r1
 8009cd6:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009cde:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8009ce0:	78fb      	ldrb	r3, [r7, #3]
 8009ce2:	4619      	mov	r1, r3
 8009ce4:	6878      	ldr	r0, [r7, #4]
 8009ce6:	f001 fe1b 	bl	800b920 <USBD_LL_GetRxDataSize>
 8009cea:	4602      	mov	r2, r0
 8009cec:	68fb      	ldr	r3, [r7, #12]
 8009cee:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009cf8:	2b00      	cmp	r3, #0
 8009cfa:	d00d      	beq.n	8009d18 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009d02:	68db      	ldr	r3, [r3, #12]
 8009d04:	68fa      	ldr	r2, [r7, #12]
 8009d06:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8009d0a:	68fa      	ldr	r2, [r7, #12]
 8009d0c:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8009d10:	4611      	mov	r1, r2
 8009d12:	4798      	blx	r3

    return USBD_OK;
 8009d14:	2300      	movs	r3, #0
 8009d16:	e000      	b.n	8009d1a <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 8009d18:	2302      	movs	r3, #2
  }
}
 8009d1a:	4618      	mov	r0, r3
 8009d1c:	3710      	adds	r7, #16
 8009d1e:	46bd      	mov	sp, r7
 8009d20:	bd80      	pop	{r7, pc}

08009d22 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8009d22:	b580      	push	{r7, lr}
 8009d24:	b084      	sub	sp, #16
 8009d26:	af00      	add	r7, sp, #0
 8009d28:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009d30:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009d38:	2b00      	cmp	r3, #0
 8009d3a:	d015      	beq.n	8009d68 <USBD_CDC_EP0_RxReady+0x46>
 8009d3c:	68fb      	ldr	r3, [r7, #12]
 8009d3e:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8009d42:	2bff      	cmp	r3, #255	; 0xff
 8009d44:	d010      	beq.n	8009d68 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009d4c:	689b      	ldr	r3, [r3, #8]
 8009d4e:	68fa      	ldr	r2, [r7, #12]
 8009d50:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 8009d54:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8009d56:	68fa      	ldr	r2, [r7, #12]
 8009d58:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8009d5c:	b292      	uxth	r2, r2
 8009d5e:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8009d60:	68fb      	ldr	r3, [r7, #12]
 8009d62:	22ff      	movs	r2, #255	; 0xff
 8009d64:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 8009d68:	2300      	movs	r3, #0
}
 8009d6a:	4618      	mov	r0, r3
 8009d6c:	3710      	adds	r7, #16
 8009d6e:	46bd      	mov	sp, r7
 8009d70:	bd80      	pop	{r7, pc}
	...

08009d74 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8009d74:	b480      	push	{r7}
 8009d76:	b083      	sub	sp, #12
 8009d78:	af00      	add	r7, sp, #0
 8009d7a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	2243      	movs	r2, #67	; 0x43
 8009d80:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 8009d82:	4b03      	ldr	r3, [pc, #12]	; (8009d90 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8009d84:	4618      	mov	r0, r3
 8009d86:	370c      	adds	r7, #12
 8009d88:	46bd      	mov	sp, r7
 8009d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d8e:	4770      	bx	lr
 8009d90:	200000a0 	.word	0x200000a0

08009d94 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8009d94:	b480      	push	{r7}
 8009d96:	b083      	sub	sp, #12
 8009d98:	af00      	add	r7, sp, #0
 8009d9a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	2243      	movs	r2, #67	; 0x43
 8009da0:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 8009da2:	4b03      	ldr	r3, [pc, #12]	; (8009db0 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8009da4:	4618      	mov	r0, r3
 8009da6:	370c      	adds	r7, #12
 8009da8:	46bd      	mov	sp, r7
 8009daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dae:	4770      	bx	lr
 8009db0:	2000005c 	.word	0x2000005c

08009db4 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8009db4:	b480      	push	{r7}
 8009db6:	b083      	sub	sp, #12
 8009db8:	af00      	add	r7, sp, #0
 8009dba:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	2243      	movs	r2, #67	; 0x43
 8009dc0:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 8009dc2:	4b03      	ldr	r3, [pc, #12]	; (8009dd0 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8009dc4:	4618      	mov	r0, r3
 8009dc6:	370c      	adds	r7, #12
 8009dc8:	46bd      	mov	sp, r7
 8009dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dce:	4770      	bx	lr
 8009dd0:	200000e4 	.word	0x200000e4

08009dd4 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8009dd4:	b480      	push	{r7}
 8009dd6:	b083      	sub	sp, #12
 8009dd8:	af00      	add	r7, sp, #0
 8009dda:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	220a      	movs	r2, #10
 8009de0:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 8009de2:	4b03      	ldr	r3, [pc, #12]	; (8009df0 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8009de4:	4618      	mov	r0, r3
 8009de6:	370c      	adds	r7, #12
 8009de8:	46bd      	mov	sp, r7
 8009dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dee:	4770      	bx	lr
 8009df0:	20000018 	.word	0x20000018

08009df4 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 8009df4:	b480      	push	{r7}
 8009df6:	b085      	sub	sp, #20
 8009df8:	af00      	add	r7, sp, #0
 8009dfa:	6078      	str	r0, [r7, #4]
 8009dfc:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8009dfe:	2302      	movs	r3, #2
 8009e00:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 8009e02:	683b      	ldr	r3, [r7, #0]
 8009e04:	2b00      	cmp	r3, #0
 8009e06:	d005      	beq.n	8009e14 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	683a      	ldr	r2, [r7, #0]
 8009e0c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 8009e10:	2300      	movs	r3, #0
 8009e12:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8009e14:	7bfb      	ldrb	r3, [r7, #15]
}
 8009e16:	4618      	mov	r0, r3
 8009e18:	3714      	adds	r7, #20
 8009e1a:	46bd      	mov	sp, r7
 8009e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e20:	4770      	bx	lr

08009e22 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 8009e22:	b480      	push	{r7}
 8009e24:	b087      	sub	sp, #28
 8009e26:	af00      	add	r7, sp, #0
 8009e28:	60f8      	str	r0, [r7, #12]
 8009e2a:	60b9      	str	r1, [r7, #8]
 8009e2c:	4613      	mov	r3, r2
 8009e2e:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8009e30:	68fb      	ldr	r3, [r7, #12]
 8009e32:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009e36:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8009e38:	697b      	ldr	r3, [r7, #20]
 8009e3a:	68ba      	ldr	r2, [r7, #8]
 8009e3c:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8009e40:	88fa      	ldrh	r2, [r7, #6]
 8009e42:	697b      	ldr	r3, [r7, #20]
 8009e44:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 8009e48:	2300      	movs	r3, #0
}
 8009e4a:	4618      	mov	r0, r3
 8009e4c:	371c      	adds	r7, #28
 8009e4e:	46bd      	mov	sp, r7
 8009e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e54:	4770      	bx	lr

08009e56 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 8009e56:	b480      	push	{r7}
 8009e58:	b085      	sub	sp, #20
 8009e5a:	af00      	add	r7, sp, #0
 8009e5c:	6078      	str	r0, [r7, #4]
 8009e5e:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009e66:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8009e68:	68fb      	ldr	r3, [r7, #12]
 8009e6a:	683a      	ldr	r2, [r7, #0]
 8009e6c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 8009e70:	2300      	movs	r3, #0
}
 8009e72:	4618      	mov	r0, r3
 8009e74:	3714      	adds	r7, #20
 8009e76:	46bd      	mov	sp, r7
 8009e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e7c:	4770      	bx	lr

08009e7e <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8009e7e:	b580      	push	{r7, lr}
 8009e80:	b084      	sub	sp, #16
 8009e82:	af00      	add	r7, sp, #0
 8009e84:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8009e86:	687b      	ldr	r3, [r7, #4]
 8009e88:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009e8c:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009e94:	2b00      	cmp	r3, #0
 8009e96:	d01c      	beq.n	8009ed2 <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 8009e98:	68fb      	ldr	r3, [r7, #12]
 8009e9a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8009e9e:	2b00      	cmp	r3, #0
 8009ea0:	d115      	bne.n	8009ece <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 8009ea2:	68fb      	ldr	r3, [r7, #12]
 8009ea4:	2201      	movs	r2, #1
 8009ea6:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8009eaa:	68fb      	ldr	r3, [r7, #12]
 8009eac:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8009eb4:	68fb      	ldr	r3, [r7, #12]
 8009eb6:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 8009eba:	68fb      	ldr	r3, [r7, #12]
 8009ebc:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8009ec0:	b29b      	uxth	r3, r3
 8009ec2:	2181      	movs	r1, #129	; 0x81
 8009ec4:	6878      	ldr	r0, [r7, #4]
 8009ec6:	f001 fce5 	bl	800b894 <USBD_LL_Transmit>

      return USBD_OK;
 8009eca:	2300      	movs	r3, #0
 8009ecc:	e002      	b.n	8009ed4 <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 8009ece:	2301      	movs	r3, #1
 8009ed0:	e000      	b.n	8009ed4 <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 8009ed2:	2302      	movs	r3, #2
  }
}
 8009ed4:	4618      	mov	r0, r3
 8009ed6:	3710      	adds	r7, #16
 8009ed8:	46bd      	mov	sp, r7
 8009eda:	bd80      	pop	{r7, pc}

08009edc <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8009edc:	b580      	push	{r7, lr}
 8009ede:	b084      	sub	sp, #16
 8009ee0:	af00      	add	r7, sp, #0
 8009ee2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009eea:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009ef2:	2b00      	cmp	r3, #0
 8009ef4:	d017      	beq.n	8009f26 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009ef6:	687b      	ldr	r3, [r7, #4]
 8009ef8:	7c1b      	ldrb	r3, [r3, #16]
 8009efa:	2b00      	cmp	r3, #0
 8009efc:	d109      	bne.n	8009f12 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8009efe:	68fb      	ldr	r3, [r7, #12]
 8009f00:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009f04:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009f08:	2101      	movs	r1, #1
 8009f0a:	6878      	ldr	r0, [r7, #4]
 8009f0c:	f001 fce5 	bl	800b8da <USBD_LL_PrepareReceive>
 8009f10:	e007      	b.n	8009f22 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8009f12:	68fb      	ldr	r3, [r7, #12]
 8009f14:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009f18:	2340      	movs	r3, #64	; 0x40
 8009f1a:	2101      	movs	r1, #1
 8009f1c:	6878      	ldr	r0, [r7, #4]
 8009f1e:	f001 fcdc 	bl	800b8da <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8009f22:	2300      	movs	r3, #0
 8009f24:	e000      	b.n	8009f28 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 8009f26:	2302      	movs	r3, #2
  }
}
 8009f28:	4618      	mov	r0, r3
 8009f2a:	3710      	adds	r7, #16
 8009f2c:	46bd      	mov	sp, r7
 8009f2e:	bd80      	pop	{r7, pc}

08009f30 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8009f30:	b580      	push	{r7, lr}
 8009f32:	b084      	sub	sp, #16
 8009f34:	af00      	add	r7, sp, #0
 8009f36:	60f8      	str	r0, [r7, #12]
 8009f38:	60b9      	str	r1, [r7, #8]
 8009f3a:	4613      	mov	r3, r2
 8009f3c:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8009f3e:	68fb      	ldr	r3, [r7, #12]
 8009f40:	2b00      	cmp	r3, #0
 8009f42:	d101      	bne.n	8009f48 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8009f44:	2302      	movs	r3, #2
 8009f46:	e01a      	b.n	8009f7e <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8009f48:	68fb      	ldr	r3, [r7, #12]
 8009f4a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009f4e:	2b00      	cmp	r3, #0
 8009f50:	d003      	beq.n	8009f5a <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8009f52:	68fb      	ldr	r3, [r7, #12]
 8009f54:	2200      	movs	r2, #0
 8009f56:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8009f5a:	68bb      	ldr	r3, [r7, #8]
 8009f5c:	2b00      	cmp	r3, #0
 8009f5e:	d003      	beq.n	8009f68 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8009f60:	68fb      	ldr	r3, [r7, #12]
 8009f62:	68ba      	ldr	r2, [r7, #8]
 8009f64:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009f68:	68fb      	ldr	r3, [r7, #12]
 8009f6a:	2201      	movs	r2, #1
 8009f6c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8009f70:	68fb      	ldr	r3, [r7, #12]
 8009f72:	79fa      	ldrb	r2, [r7, #7]
 8009f74:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8009f76:	68f8      	ldr	r0, [r7, #12]
 8009f78:	f001 fb48 	bl	800b60c <USBD_LL_Init>

  return USBD_OK;
 8009f7c:	2300      	movs	r3, #0
}
 8009f7e:	4618      	mov	r0, r3
 8009f80:	3710      	adds	r7, #16
 8009f82:	46bd      	mov	sp, r7
 8009f84:	bd80      	pop	{r7, pc}

08009f86 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8009f86:	b480      	push	{r7}
 8009f88:	b085      	sub	sp, #20
 8009f8a:	af00      	add	r7, sp, #0
 8009f8c:	6078      	str	r0, [r7, #4]
 8009f8e:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8009f90:	2300      	movs	r3, #0
 8009f92:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 8009f94:	683b      	ldr	r3, [r7, #0]
 8009f96:	2b00      	cmp	r3, #0
 8009f98:	d006      	beq.n	8009fa8 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	683a      	ldr	r2, [r7, #0]
 8009f9e:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 8009fa2:	2300      	movs	r3, #0
 8009fa4:	73fb      	strb	r3, [r7, #15]
 8009fa6:	e001      	b.n	8009fac <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8009fa8:	2302      	movs	r3, #2
 8009faa:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8009fac:	7bfb      	ldrb	r3, [r7, #15]
}
 8009fae:	4618      	mov	r0, r3
 8009fb0:	3714      	adds	r7, #20
 8009fb2:	46bd      	mov	sp, r7
 8009fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fb8:	4770      	bx	lr

08009fba <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8009fba:	b580      	push	{r7, lr}
 8009fbc:	b082      	sub	sp, #8
 8009fbe:	af00      	add	r7, sp, #0
 8009fc0:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8009fc2:	6878      	ldr	r0, [r7, #4]
 8009fc4:	f001 fb7c 	bl	800b6c0 <USBD_LL_Start>

  return USBD_OK;
 8009fc8:	2300      	movs	r3, #0
}
 8009fca:	4618      	mov	r0, r3
 8009fcc:	3708      	adds	r7, #8
 8009fce:	46bd      	mov	sp, r7
 8009fd0:	bd80      	pop	{r7, pc}

08009fd2 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8009fd2:	b480      	push	{r7}
 8009fd4:	b083      	sub	sp, #12
 8009fd6:	af00      	add	r7, sp, #0
 8009fd8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8009fda:	2300      	movs	r3, #0
}
 8009fdc:	4618      	mov	r0, r3
 8009fde:	370c      	adds	r7, #12
 8009fe0:	46bd      	mov	sp, r7
 8009fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fe6:	4770      	bx	lr

08009fe8 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8009fe8:	b580      	push	{r7, lr}
 8009fea:	b084      	sub	sp, #16
 8009fec:	af00      	add	r7, sp, #0
 8009fee:	6078      	str	r0, [r7, #4]
 8009ff0:	460b      	mov	r3, r1
 8009ff2:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8009ff4:	2302      	movs	r3, #2
 8009ff6:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009ffe:	2b00      	cmp	r3, #0
 800a000:	d00c      	beq.n	800a01c <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 800a002:	687b      	ldr	r3, [r7, #4]
 800a004:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a008:	681b      	ldr	r3, [r3, #0]
 800a00a:	78fa      	ldrb	r2, [r7, #3]
 800a00c:	4611      	mov	r1, r2
 800a00e:	6878      	ldr	r0, [r7, #4]
 800a010:	4798      	blx	r3
 800a012:	4603      	mov	r3, r0
 800a014:	2b00      	cmp	r3, #0
 800a016:	d101      	bne.n	800a01c <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 800a018:	2300      	movs	r3, #0
 800a01a:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 800a01c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a01e:	4618      	mov	r0, r3
 800a020:	3710      	adds	r7, #16
 800a022:	46bd      	mov	sp, r7
 800a024:	bd80      	pop	{r7, pc}

0800a026 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800a026:	b580      	push	{r7, lr}
 800a028:	b082      	sub	sp, #8
 800a02a:	af00      	add	r7, sp, #0
 800a02c:	6078      	str	r0, [r7, #4]
 800a02e:	460b      	mov	r3, r1
 800a030:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 800a032:	687b      	ldr	r3, [r7, #4]
 800a034:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a038:	685b      	ldr	r3, [r3, #4]
 800a03a:	78fa      	ldrb	r2, [r7, #3]
 800a03c:	4611      	mov	r1, r2
 800a03e:	6878      	ldr	r0, [r7, #4]
 800a040:	4798      	blx	r3

  return USBD_OK;
 800a042:	2300      	movs	r3, #0
}
 800a044:	4618      	mov	r0, r3
 800a046:	3708      	adds	r7, #8
 800a048:	46bd      	mov	sp, r7
 800a04a:	bd80      	pop	{r7, pc}

0800a04c <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800a04c:	b580      	push	{r7, lr}
 800a04e:	b082      	sub	sp, #8
 800a050:	af00      	add	r7, sp, #0
 800a052:	6078      	str	r0, [r7, #4]
 800a054:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800a05c:	6839      	ldr	r1, [r7, #0]
 800a05e:	4618      	mov	r0, r3
 800a060:	f000 fece 	bl	800ae00 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	2201      	movs	r2, #1
 800a068:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800a072:	461a      	mov	r2, r3
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800a080:	f003 031f 	and.w	r3, r3, #31
 800a084:	2b01      	cmp	r3, #1
 800a086:	d00c      	beq.n	800a0a2 <USBD_LL_SetupStage+0x56>
 800a088:	2b01      	cmp	r3, #1
 800a08a:	d302      	bcc.n	800a092 <USBD_LL_SetupStage+0x46>
 800a08c:	2b02      	cmp	r3, #2
 800a08e:	d010      	beq.n	800a0b2 <USBD_LL_SetupStage+0x66>
 800a090:	e017      	b.n	800a0c2 <USBD_LL_SetupStage+0x76>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800a098:	4619      	mov	r1, r3
 800a09a:	6878      	ldr	r0, [r7, #4]
 800a09c:	f000 f9ce 	bl	800a43c <USBD_StdDevReq>
      break;
 800a0a0:	e01a      	b.n	800a0d8 <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800a0a8:	4619      	mov	r1, r3
 800a0aa:	6878      	ldr	r0, [r7, #4]
 800a0ac:	f000 fa30 	bl	800a510 <USBD_StdItfReq>
      break;
 800a0b0:	e012      	b.n	800a0d8 <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800a0b8:	4619      	mov	r1, r3
 800a0ba:	6878      	ldr	r0, [r7, #4]
 800a0bc:	f000 fa6e 	bl	800a59c <USBD_StdEPReq>
      break;
 800a0c0:	e00a      	b.n	800a0d8 <USBD_LL_SetupStage+0x8c>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800a0c8:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800a0cc:	b2db      	uxtb	r3, r3
 800a0ce:	4619      	mov	r1, r3
 800a0d0:	6878      	ldr	r0, [r7, #4]
 800a0d2:	f001 fb55 	bl	800b780 <USBD_LL_StallEP>
      break;
 800a0d6:	bf00      	nop
  }

  return USBD_OK;
 800a0d8:	2300      	movs	r3, #0
}
 800a0da:	4618      	mov	r0, r3
 800a0dc:	3708      	adds	r7, #8
 800a0de:	46bd      	mov	sp, r7
 800a0e0:	bd80      	pop	{r7, pc}

0800a0e2 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800a0e2:	b580      	push	{r7, lr}
 800a0e4:	b086      	sub	sp, #24
 800a0e6:	af00      	add	r7, sp, #0
 800a0e8:	60f8      	str	r0, [r7, #12]
 800a0ea:	460b      	mov	r3, r1
 800a0ec:	607a      	str	r2, [r7, #4]
 800a0ee:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800a0f0:	7afb      	ldrb	r3, [r7, #11]
 800a0f2:	2b00      	cmp	r3, #0
 800a0f4:	d14b      	bne.n	800a18e <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 800a0f6:	68fb      	ldr	r3, [r7, #12]
 800a0f8:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800a0fc:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800a0fe:	68fb      	ldr	r3, [r7, #12]
 800a100:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800a104:	2b03      	cmp	r3, #3
 800a106:	d134      	bne.n	800a172 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 800a108:	697b      	ldr	r3, [r7, #20]
 800a10a:	68da      	ldr	r2, [r3, #12]
 800a10c:	697b      	ldr	r3, [r7, #20]
 800a10e:	691b      	ldr	r3, [r3, #16]
 800a110:	429a      	cmp	r2, r3
 800a112:	d919      	bls.n	800a148 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 800a114:	697b      	ldr	r3, [r7, #20]
 800a116:	68da      	ldr	r2, [r3, #12]
 800a118:	697b      	ldr	r3, [r7, #20]
 800a11a:	691b      	ldr	r3, [r3, #16]
 800a11c:	1ad2      	subs	r2, r2, r3
 800a11e:	697b      	ldr	r3, [r7, #20]
 800a120:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800a122:	697b      	ldr	r3, [r7, #20]
 800a124:	68da      	ldr	r2, [r3, #12]
 800a126:	697b      	ldr	r3, [r7, #20]
 800a128:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800a12a:	429a      	cmp	r2, r3
 800a12c:	d203      	bcs.n	800a136 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800a12e:	697b      	ldr	r3, [r7, #20]
 800a130:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 800a132:	b29b      	uxth	r3, r3
 800a134:	e002      	b.n	800a13c <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800a136:	697b      	ldr	r3, [r7, #20]
 800a138:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800a13a:	b29b      	uxth	r3, r3
 800a13c:	461a      	mov	r2, r3
 800a13e:	6879      	ldr	r1, [r7, #4]
 800a140:	68f8      	ldr	r0, [r7, #12]
 800a142:	f000 ff51 	bl	800afe8 <USBD_CtlContinueRx>
 800a146:	e038      	b.n	800a1ba <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800a148:	68fb      	ldr	r3, [r7, #12]
 800a14a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a14e:	691b      	ldr	r3, [r3, #16]
 800a150:	2b00      	cmp	r3, #0
 800a152:	d00a      	beq.n	800a16a <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 800a154:	68fb      	ldr	r3, [r7, #12]
 800a156:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800a15a:	2b03      	cmp	r3, #3
 800a15c:	d105      	bne.n	800a16a <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800a15e:	68fb      	ldr	r3, [r7, #12]
 800a160:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a164:	691b      	ldr	r3, [r3, #16]
 800a166:	68f8      	ldr	r0, [r7, #12]
 800a168:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 800a16a:	68f8      	ldr	r0, [r7, #12]
 800a16c:	f000 ff4e 	bl	800b00c <USBD_CtlSendStatus>
 800a170:	e023      	b.n	800a1ba <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 800a172:	68fb      	ldr	r3, [r7, #12]
 800a174:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800a178:	2b05      	cmp	r3, #5
 800a17a:	d11e      	bne.n	800a1ba <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 800a17c:	68fb      	ldr	r3, [r7, #12]
 800a17e:	2200      	movs	r2, #0
 800a180:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 800a184:	2100      	movs	r1, #0
 800a186:	68f8      	ldr	r0, [r7, #12]
 800a188:	f001 fafa 	bl	800b780 <USBD_LL_StallEP>
 800a18c:	e015      	b.n	800a1ba <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 800a18e:	68fb      	ldr	r3, [r7, #12]
 800a190:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a194:	699b      	ldr	r3, [r3, #24]
 800a196:	2b00      	cmp	r3, #0
 800a198:	d00d      	beq.n	800a1b6 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800a19a:	68fb      	ldr	r3, [r7, #12]
 800a19c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 800a1a0:	2b03      	cmp	r3, #3
 800a1a2:	d108      	bne.n	800a1b6 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 800a1a4:	68fb      	ldr	r3, [r7, #12]
 800a1a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a1aa:	699b      	ldr	r3, [r3, #24]
 800a1ac:	7afa      	ldrb	r2, [r7, #11]
 800a1ae:	4611      	mov	r1, r2
 800a1b0:	68f8      	ldr	r0, [r7, #12]
 800a1b2:	4798      	blx	r3
 800a1b4:	e001      	b.n	800a1ba <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800a1b6:	2302      	movs	r3, #2
 800a1b8:	e000      	b.n	800a1bc <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 800a1ba:	2300      	movs	r3, #0
}
 800a1bc:	4618      	mov	r0, r3
 800a1be:	3718      	adds	r7, #24
 800a1c0:	46bd      	mov	sp, r7
 800a1c2:	bd80      	pop	{r7, pc}

0800a1c4 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800a1c4:	b580      	push	{r7, lr}
 800a1c6:	b086      	sub	sp, #24
 800a1c8:	af00      	add	r7, sp, #0
 800a1ca:	60f8      	str	r0, [r7, #12]
 800a1cc:	460b      	mov	r3, r1
 800a1ce:	607a      	str	r2, [r7, #4]
 800a1d0:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800a1d2:	7afb      	ldrb	r3, [r7, #11]
 800a1d4:	2b00      	cmp	r3, #0
 800a1d6:	d17f      	bne.n	800a2d8 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 800a1d8:	68fb      	ldr	r3, [r7, #12]
 800a1da:	3314      	adds	r3, #20
 800a1dc:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800a1de:	68fb      	ldr	r3, [r7, #12]
 800a1e0:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800a1e4:	2b02      	cmp	r3, #2
 800a1e6:	d15c      	bne.n	800a2a2 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 800a1e8:	697b      	ldr	r3, [r7, #20]
 800a1ea:	68da      	ldr	r2, [r3, #12]
 800a1ec:	697b      	ldr	r3, [r7, #20]
 800a1ee:	691b      	ldr	r3, [r3, #16]
 800a1f0:	429a      	cmp	r2, r3
 800a1f2:	d915      	bls.n	800a220 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 800a1f4:	697b      	ldr	r3, [r7, #20]
 800a1f6:	68da      	ldr	r2, [r3, #12]
 800a1f8:	697b      	ldr	r3, [r7, #20]
 800a1fa:	691b      	ldr	r3, [r3, #16]
 800a1fc:	1ad2      	subs	r2, r2, r3
 800a1fe:	697b      	ldr	r3, [r7, #20]
 800a200:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 800a202:	697b      	ldr	r3, [r7, #20]
 800a204:	68db      	ldr	r3, [r3, #12]
 800a206:	b29b      	uxth	r3, r3
 800a208:	461a      	mov	r2, r3
 800a20a:	6879      	ldr	r1, [r7, #4]
 800a20c:	68f8      	ldr	r0, [r7, #12]
 800a20e:	f000 febb 	bl	800af88 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a212:	2300      	movs	r3, #0
 800a214:	2200      	movs	r2, #0
 800a216:	2100      	movs	r1, #0
 800a218:	68f8      	ldr	r0, [r7, #12]
 800a21a:	f001 fb5e 	bl	800b8da <USBD_LL_PrepareReceive>
 800a21e:	e04e      	b.n	800a2be <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800a220:	697b      	ldr	r3, [r7, #20]
 800a222:	689b      	ldr	r3, [r3, #8]
 800a224:	697a      	ldr	r2, [r7, #20]
 800a226:	6912      	ldr	r2, [r2, #16]
 800a228:	fbb3 f1f2 	udiv	r1, r3, r2
 800a22c:	fb02 f201 	mul.w	r2, r2, r1
 800a230:	1a9b      	subs	r3, r3, r2
 800a232:	2b00      	cmp	r3, #0
 800a234:	d11c      	bne.n	800a270 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 800a236:	697b      	ldr	r3, [r7, #20]
 800a238:	689a      	ldr	r2, [r3, #8]
 800a23a:	697b      	ldr	r3, [r7, #20]
 800a23c:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800a23e:	429a      	cmp	r2, r3
 800a240:	d316      	bcc.n	800a270 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 800a242:	697b      	ldr	r3, [r7, #20]
 800a244:	689a      	ldr	r2, [r3, #8]
 800a246:	68fb      	ldr	r3, [r7, #12]
 800a248:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800a24c:	429a      	cmp	r2, r3
 800a24e:	d20f      	bcs.n	800a270 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 800a250:	2200      	movs	r2, #0
 800a252:	2100      	movs	r1, #0
 800a254:	68f8      	ldr	r0, [r7, #12]
 800a256:	f000 fe97 	bl	800af88 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800a25a:	68fb      	ldr	r3, [r7, #12]
 800a25c:	2200      	movs	r2, #0
 800a25e:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a262:	2300      	movs	r3, #0
 800a264:	2200      	movs	r2, #0
 800a266:	2100      	movs	r1, #0
 800a268:	68f8      	ldr	r0, [r7, #12]
 800a26a:	f001 fb36 	bl	800b8da <USBD_LL_PrepareReceive>
 800a26e:	e026      	b.n	800a2be <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800a270:	68fb      	ldr	r3, [r7, #12]
 800a272:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a276:	68db      	ldr	r3, [r3, #12]
 800a278:	2b00      	cmp	r3, #0
 800a27a:	d00a      	beq.n	800a292 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 800a27c:	68fb      	ldr	r3, [r7, #12]
 800a27e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800a282:	2b03      	cmp	r3, #3
 800a284:	d105      	bne.n	800a292 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800a286:	68fb      	ldr	r3, [r7, #12]
 800a288:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a28c:	68db      	ldr	r3, [r3, #12]
 800a28e:	68f8      	ldr	r0, [r7, #12]
 800a290:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 800a292:	2180      	movs	r1, #128	; 0x80
 800a294:	68f8      	ldr	r0, [r7, #12]
 800a296:	f001 fa73 	bl	800b780 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 800a29a:	68f8      	ldr	r0, [r7, #12]
 800a29c:	f000 fec9 	bl	800b032 <USBD_CtlReceiveStatus>
 800a2a0:	e00d      	b.n	800a2be <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800a2a2:	68fb      	ldr	r3, [r7, #12]
 800a2a4:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800a2a8:	2b04      	cmp	r3, #4
 800a2aa:	d004      	beq.n	800a2b6 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 800a2ac:	68fb      	ldr	r3, [r7, #12]
 800a2ae:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800a2b2:	2b00      	cmp	r3, #0
 800a2b4:	d103      	bne.n	800a2be <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 800a2b6:	2180      	movs	r1, #128	; 0x80
 800a2b8:	68f8      	ldr	r0, [r7, #12]
 800a2ba:	f001 fa61 	bl	800b780 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 800a2be:	68fb      	ldr	r3, [r7, #12]
 800a2c0:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800a2c4:	2b01      	cmp	r3, #1
 800a2c6:	d11d      	bne.n	800a304 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 800a2c8:	68f8      	ldr	r0, [r7, #12]
 800a2ca:	f7ff fe82 	bl	8009fd2 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800a2ce:	68fb      	ldr	r3, [r7, #12]
 800a2d0:	2200      	movs	r2, #0
 800a2d2:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800a2d6:	e015      	b.n	800a304 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800a2d8:	68fb      	ldr	r3, [r7, #12]
 800a2da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a2de:	695b      	ldr	r3, [r3, #20]
 800a2e0:	2b00      	cmp	r3, #0
 800a2e2:	d00d      	beq.n	800a300 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800a2e4:	68fb      	ldr	r3, [r7, #12]
 800a2e6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 800a2ea:	2b03      	cmp	r3, #3
 800a2ec:	d108      	bne.n	800a300 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 800a2ee:	68fb      	ldr	r3, [r7, #12]
 800a2f0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a2f4:	695b      	ldr	r3, [r3, #20]
 800a2f6:	7afa      	ldrb	r2, [r7, #11]
 800a2f8:	4611      	mov	r1, r2
 800a2fa:	68f8      	ldr	r0, [r7, #12]
 800a2fc:	4798      	blx	r3
 800a2fe:	e001      	b.n	800a304 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800a300:	2302      	movs	r3, #2
 800a302:	e000      	b.n	800a306 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 800a304:	2300      	movs	r3, #0
}
 800a306:	4618      	mov	r0, r3
 800a308:	3718      	adds	r7, #24
 800a30a:	46bd      	mov	sp, r7
 800a30c:	bd80      	pop	{r7, pc}

0800a30e <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800a30e:	b580      	push	{r7, lr}
 800a310:	b082      	sub	sp, #8
 800a312:	af00      	add	r7, sp, #0
 800a314:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a316:	2340      	movs	r3, #64	; 0x40
 800a318:	2200      	movs	r2, #0
 800a31a:	2100      	movs	r1, #0
 800a31c:	6878      	ldr	r0, [r7, #4]
 800a31e:	f001 f9ea 	bl	800b6f6 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800a322:	687b      	ldr	r3, [r7, #4]
 800a324:	2201      	movs	r2, #1
 800a326:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800a32a:	687b      	ldr	r3, [r7, #4]
 800a32c:	2240      	movs	r2, #64	; 0x40
 800a32e:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a332:	2340      	movs	r3, #64	; 0x40
 800a334:	2200      	movs	r2, #0
 800a336:	2180      	movs	r1, #128	; 0x80
 800a338:	6878      	ldr	r0, [r7, #4]
 800a33a:	f001 f9dc 	bl	800b6f6 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800a33e:	687b      	ldr	r3, [r7, #4]
 800a340:	2201      	movs	r2, #1
 800a342:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	2240      	movs	r2, #64	; 0x40
 800a348:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	2201      	movs	r2, #1
 800a34e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800a352:	687b      	ldr	r3, [r7, #4]
 800a354:	2200      	movs	r2, #0
 800a356:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800a35a:	687b      	ldr	r3, [r7, #4]
 800a35c:	2200      	movs	r2, #0
 800a35e:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800a360:	687b      	ldr	r3, [r7, #4]
 800a362:	2200      	movs	r2, #0
 800a364:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 800a368:	687b      	ldr	r3, [r7, #4]
 800a36a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a36e:	2b00      	cmp	r3, #0
 800a370:	d009      	beq.n	800a386 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800a372:	687b      	ldr	r3, [r7, #4]
 800a374:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a378:	685b      	ldr	r3, [r3, #4]
 800a37a:	687a      	ldr	r2, [r7, #4]
 800a37c:	6852      	ldr	r2, [r2, #4]
 800a37e:	b2d2      	uxtb	r2, r2
 800a380:	4611      	mov	r1, r2
 800a382:	6878      	ldr	r0, [r7, #4]
 800a384:	4798      	blx	r3
  }

  return USBD_OK;
 800a386:	2300      	movs	r3, #0
}
 800a388:	4618      	mov	r0, r3
 800a38a:	3708      	adds	r7, #8
 800a38c:	46bd      	mov	sp, r7
 800a38e:	bd80      	pop	{r7, pc}

0800a390 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800a390:	b480      	push	{r7}
 800a392:	b083      	sub	sp, #12
 800a394:	af00      	add	r7, sp, #0
 800a396:	6078      	str	r0, [r7, #4]
 800a398:	460b      	mov	r3, r1
 800a39a:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	78fa      	ldrb	r2, [r7, #3]
 800a3a0:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800a3a2:	2300      	movs	r3, #0
}
 800a3a4:	4618      	mov	r0, r3
 800a3a6:	370c      	adds	r7, #12
 800a3a8:	46bd      	mov	sp, r7
 800a3aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3ae:	4770      	bx	lr

0800a3b0 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800a3b0:	b480      	push	{r7}
 800a3b2:	b083      	sub	sp, #12
 800a3b4:	af00      	add	r7, sp, #0
 800a3b6:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 800a3b8:	687b      	ldr	r3, [r7, #4]
 800a3ba:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 800a3be:	687b      	ldr	r3, [r7, #4]
 800a3c0:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	2204      	movs	r2, #4
 800a3c8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800a3cc:	2300      	movs	r3, #0
}
 800a3ce:	4618      	mov	r0, r3
 800a3d0:	370c      	adds	r7, #12
 800a3d2:	46bd      	mov	sp, r7
 800a3d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3d8:	4770      	bx	lr

0800a3da <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800a3da:	b480      	push	{r7}
 800a3dc:	b083      	sub	sp, #12
 800a3de:	af00      	add	r7, sp, #0
 800a3e0:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800a3e2:	687b      	ldr	r3, [r7, #4]
 800a3e4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a3e8:	2b04      	cmp	r3, #4
 800a3ea:	d105      	bne.n	800a3f8 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 800a3f2:	687b      	ldr	r3, [r7, #4]
 800a3f4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800a3f8:	2300      	movs	r3, #0
}
 800a3fa:	4618      	mov	r0, r3
 800a3fc:	370c      	adds	r7, #12
 800a3fe:	46bd      	mov	sp, r7
 800a400:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a404:	4770      	bx	lr

0800a406 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800a406:	b580      	push	{r7, lr}
 800a408:	b082      	sub	sp, #8
 800a40a:	af00      	add	r7, sp, #0
 800a40c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a40e:	687b      	ldr	r3, [r7, #4]
 800a410:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a414:	2b03      	cmp	r3, #3
 800a416:	d10b      	bne.n	800a430 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a41e:	69db      	ldr	r3, [r3, #28]
 800a420:	2b00      	cmp	r3, #0
 800a422:	d005      	beq.n	800a430 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800a424:	687b      	ldr	r3, [r7, #4]
 800a426:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a42a:	69db      	ldr	r3, [r3, #28]
 800a42c:	6878      	ldr	r0, [r7, #4]
 800a42e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800a430:	2300      	movs	r3, #0
}
 800a432:	4618      	mov	r0, r3
 800a434:	3708      	adds	r7, #8
 800a436:	46bd      	mov	sp, r7
 800a438:	bd80      	pop	{r7, pc}
	...

0800a43c <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 800a43c:	b580      	push	{r7, lr}
 800a43e:	b084      	sub	sp, #16
 800a440:	af00      	add	r7, sp, #0
 800a442:	6078      	str	r0, [r7, #4]
 800a444:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a446:	2300      	movs	r3, #0
 800a448:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a44a:	683b      	ldr	r3, [r7, #0]
 800a44c:	781b      	ldrb	r3, [r3, #0]
 800a44e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a452:	2b20      	cmp	r3, #32
 800a454:	d004      	beq.n	800a460 <USBD_StdDevReq+0x24>
 800a456:	2b40      	cmp	r3, #64	; 0x40
 800a458:	d002      	beq.n	800a460 <USBD_StdDevReq+0x24>
 800a45a:	2b00      	cmp	r3, #0
 800a45c:	d008      	beq.n	800a470 <USBD_StdDevReq+0x34>
 800a45e:	e04c      	b.n	800a4fa <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a466:	689b      	ldr	r3, [r3, #8]
 800a468:	6839      	ldr	r1, [r7, #0]
 800a46a:	6878      	ldr	r0, [r7, #4]
 800a46c:	4798      	blx	r3
      break;
 800a46e:	e049      	b.n	800a504 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a470:	683b      	ldr	r3, [r7, #0]
 800a472:	785b      	ldrb	r3, [r3, #1]
 800a474:	2b09      	cmp	r3, #9
 800a476:	d83a      	bhi.n	800a4ee <USBD_StdDevReq+0xb2>
 800a478:	a201      	add	r2, pc, #4	; (adr r2, 800a480 <USBD_StdDevReq+0x44>)
 800a47a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a47e:	bf00      	nop
 800a480:	0800a4d1 	.word	0x0800a4d1
 800a484:	0800a4e5 	.word	0x0800a4e5
 800a488:	0800a4ef 	.word	0x0800a4ef
 800a48c:	0800a4db 	.word	0x0800a4db
 800a490:	0800a4ef 	.word	0x0800a4ef
 800a494:	0800a4b3 	.word	0x0800a4b3
 800a498:	0800a4a9 	.word	0x0800a4a9
 800a49c:	0800a4ef 	.word	0x0800a4ef
 800a4a0:	0800a4c7 	.word	0x0800a4c7
 800a4a4:	0800a4bd 	.word	0x0800a4bd
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800a4a8:	6839      	ldr	r1, [r7, #0]
 800a4aa:	6878      	ldr	r0, [r7, #4]
 800a4ac:	f000 f9d4 	bl	800a858 <USBD_GetDescriptor>
          break;
 800a4b0:	e022      	b.n	800a4f8 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800a4b2:	6839      	ldr	r1, [r7, #0]
 800a4b4:	6878      	ldr	r0, [r7, #4]
 800a4b6:	f000 fb37 	bl	800ab28 <USBD_SetAddress>
          break;
 800a4ba:	e01d      	b.n	800a4f8 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 800a4bc:	6839      	ldr	r1, [r7, #0]
 800a4be:	6878      	ldr	r0, [r7, #4]
 800a4c0:	f000 fb74 	bl	800abac <USBD_SetConfig>
          break;
 800a4c4:	e018      	b.n	800a4f8 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800a4c6:	6839      	ldr	r1, [r7, #0]
 800a4c8:	6878      	ldr	r0, [r7, #4]
 800a4ca:	f000 fbfd 	bl	800acc8 <USBD_GetConfig>
          break;
 800a4ce:	e013      	b.n	800a4f8 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800a4d0:	6839      	ldr	r1, [r7, #0]
 800a4d2:	6878      	ldr	r0, [r7, #4]
 800a4d4:	f000 fc2c 	bl	800ad30 <USBD_GetStatus>
          break;
 800a4d8:	e00e      	b.n	800a4f8 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800a4da:	6839      	ldr	r1, [r7, #0]
 800a4dc:	6878      	ldr	r0, [r7, #4]
 800a4de:	f000 fc5a 	bl	800ad96 <USBD_SetFeature>
          break;
 800a4e2:	e009      	b.n	800a4f8 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800a4e4:	6839      	ldr	r1, [r7, #0]
 800a4e6:	6878      	ldr	r0, [r7, #4]
 800a4e8:	f000 fc69 	bl	800adbe <USBD_ClrFeature>
          break;
 800a4ec:	e004      	b.n	800a4f8 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 800a4ee:	6839      	ldr	r1, [r7, #0]
 800a4f0:	6878      	ldr	r0, [r7, #4]
 800a4f2:	f000 fcc2 	bl	800ae7a <USBD_CtlError>
          break;
 800a4f6:	bf00      	nop
      }
      break;
 800a4f8:	e004      	b.n	800a504 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 800a4fa:	6839      	ldr	r1, [r7, #0]
 800a4fc:	6878      	ldr	r0, [r7, #4]
 800a4fe:	f000 fcbc 	bl	800ae7a <USBD_CtlError>
      break;
 800a502:	bf00      	nop
  }

  return ret;
 800a504:	7bfb      	ldrb	r3, [r7, #15]
}
 800a506:	4618      	mov	r0, r3
 800a508:	3710      	adds	r7, #16
 800a50a:	46bd      	mov	sp, r7
 800a50c:	bd80      	pop	{r7, pc}
 800a50e:	bf00      	nop

0800a510 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 800a510:	b580      	push	{r7, lr}
 800a512:	b084      	sub	sp, #16
 800a514:	af00      	add	r7, sp, #0
 800a516:	6078      	str	r0, [r7, #4]
 800a518:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a51a:	2300      	movs	r3, #0
 800a51c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a51e:	683b      	ldr	r3, [r7, #0]
 800a520:	781b      	ldrb	r3, [r3, #0]
 800a522:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a526:	2b20      	cmp	r3, #32
 800a528:	d003      	beq.n	800a532 <USBD_StdItfReq+0x22>
 800a52a:	2b40      	cmp	r3, #64	; 0x40
 800a52c:	d001      	beq.n	800a532 <USBD_StdItfReq+0x22>
 800a52e:	2b00      	cmp	r3, #0
 800a530:	d12a      	bne.n	800a588 <USBD_StdItfReq+0x78>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800a532:	687b      	ldr	r3, [r7, #4]
 800a534:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a538:	3b01      	subs	r3, #1
 800a53a:	2b02      	cmp	r3, #2
 800a53c:	d81d      	bhi.n	800a57a <USBD_StdItfReq+0x6a>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800a53e:	683b      	ldr	r3, [r7, #0]
 800a540:	889b      	ldrh	r3, [r3, #4]
 800a542:	b2db      	uxtb	r3, r3
 800a544:	2b01      	cmp	r3, #1
 800a546:	d813      	bhi.n	800a570 <USBD_StdItfReq+0x60>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a54e:	689b      	ldr	r3, [r3, #8]
 800a550:	6839      	ldr	r1, [r7, #0]
 800a552:	6878      	ldr	r0, [r7, #4]
 800a554:	4798      	blx	r3
 800a556:	4603      	mov	r3, r0
 800a558:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800a55a:	683b      	ldr	r3, [r7, #0]
 800a55c:	88db      	ldrh	r3, [r3, #6]
 800a55e:	2b00      	cmp	r3, #0
 800a560:	d110      	bne.n	800a584 <USBD_StdItfReq+0x74>
 800a562:	7bfb      	ldrb	r3, [r7, #15]
 800a564:	2b00      	cmp	r3, #0
 800a566:	d10d      	bne.n	800a584 <USBD_StdItfReq+0x74>
            {
              USBD_CtlSendStatus(pdev);
 800a568:	6878      	ldr	r0, [r7, #4]
 800a56a:	f000 fd4f 	bl	800b00c <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800a56e:	e009      	b.n	800a584 <USBD_StdItfReq+0x74>
            USBD_CtlError(pdev, req);
 800a570:	6839      	ldr	r1, [r7, #0]
 800a572:	6878      	ldr	r0, [r7, #4]
 800a574:	f000 fc81 	bl	800ae7a <USBD_CtlError>
          break;
 800a578:	e004      	b.n	800a584 <USBD_StdItfReq+0x74>

        default:
          USBD_CtlError(pdev, req);
 800a57a:	6839      	ldr	r1, [r7, #0]
 800a57c:	6878      	ldr	r0, [r7, #4]
 800a57e:	f000 fc7c 	bl	800ae7a <USBD_CtlError>
          break;
 800a582:	e000      	b.n	800a586 <USBD_StdItfReq+0x76>
          break;
 800a584:	bf00      	nop
      }
      break;
 800a586:	e004      	b.n	800a592 <USBD_StdItfReq+0x82>

    default:
      USBD_CtlError(pdev, req);
 800a588:	6839      	ldr	r1, [r7, #0]
 800a58a:	6878      	ldr	r0, [r7, #4]
 800a58c:	f000 fc75 	bl	800ae7a <USBD_CtlError>
      break;
 800a590:	bf00      	nop
  }

  return USBD_OK;
 800a592:	2300      	movs	r3, #0
}
 800a594:	4618      	mov	r0, r3
 800a596:	3710      	adds	r7, #16
 800a598:	46bd      	mov	sp, r7
 800a59a:	bd80      	pop	{r7, pc}

0800a59c <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 800a59c:	b580      	push	{r7, lr}
 800a59e:	b084      	sub	sp, #16
 800a5a0:	af00      	add	r7, sp, #0
 800a5a2:	6078      	str	r0, [r7, #4]
 800a5a4:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800a5a6:	2300      	movs	r3, #0
 800a5a8:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 800a5aa:	683b      	ldr	r3, [r7, #0]
 800a5ac:	889b      	ldrh	r3, [r3, #4]
 800a5ae:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a5b0:	683b      	ldr	r3, [r7, #0]
 800a5b2:	781b      	ldrb	r3, [r3, #0]
 800a5b4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a5b8:	2b20      	cmp	r3, #32
 800a5ba:	d004      	beq.n	800a5c6 <USBD_StdEPReq+0x2a>
 800a5bc:	2b40      	cmp	r3, #64	; 0x40
 800a5be:	d002      	beq.n	800a5c6 <USBD_StdEPReq+0x2a>
 800a5c0:	2b00      	cmp	r3, #0
 800a5c2:	d008      	beq.n	800a5d6 <USBD_StdEPReq+0x3a>
 800a5c4:	e13d      	b.n	800a842 <USBD_StdEPReq+0x2a6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800a5c6:	687b      	ldr	r3, [r7, #4]
 800a5c8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a5cc:	689b      	ldr	r3, [r3, #8]
 800a5ce:	6839      	ldr	r1, [r7, #0]
 800a5d0:	6878      	ldr	r0, [r7, #4]
 800a5d2:	4798      	blx	r3
      break;
 800a5d4:	e13a      	b.n	800a84c <USBD_StdEPReq+0x2b0>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 800a5d6:	683b      	ldr	r3, [r7, #0]
 800a5d8:	781b      	ldrb	r3, [r3, #0]
 800a5da:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a5de:	2b20      	cmp	r3, #32
 800a5e0:	d10a      	bne.n	800a5f8 <USBD_StdEPReq+0x5c>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800a5e2:	687b      	ldr	r3, [r7, #4]
 800a5e4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a5e8:	689b      	ldr	r3, [r3, #8]
 800a5ea:	6839      	ldr	r1, [r7, #0]
 800a5ec:	6878      	ldr	r0, [r7, #4]
 800a5ee:	4798      	blx	r3
 800a5f0:	4603      	mov	r3, r0
 800a5f2:	73fb      	strb	r3, [r7, #15]

        return ret;
 800a5f4:	7bfb      	ldrb	r3, [r7, #15]
 800a5f6:	e12a      	b.n	800a84e <USBD_StdEPReq+0x2b2>
      }

      switch (req->bRequest)
 800a5f8:	683b      	ldr	r3, [r7, #0]
 800a5fa:	785b      	ldrb	r3, [r3, #1]
 800a5fc:	2b01      	cmp	r3, #1
 800a5fe:	d03e      	beq.n	800a67e <USBD_StdEPReq+0xe2>
 800a600:	2b03      	cmp	r3, #3
 800a602:	d002      	beq.n	800a60a <USBD_StdEPReq+0x6e>
 800a604:	2b00      	cmp	r3, #0
 800a606:	d070      	beq.n	800a6ea <USBD_StdEPReq+0x14e>
 800a608:	e115      	b.n	800a836 <USBD_StdEPReq+0x29a>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800a60a:	687b      	ldr	r3, [r7, #4]
 800a60c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a610:	2b02      	cmp	r3, #2
 800a612:	d002      	beq.n	800a61a <USBD_StdEPReq+0x7e>
 800a614:	2b03      	cmp	r3, #3
 800a616:	d015      	beq.n	800a644 <USBD_StdEPReq+0xa8>
 800a618:	e02b      	b.n	800a672 <USBD_StdEPReq+0xd6>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a61a:	7bbb      	ldrb	r3, [r7, #14]
 800a61c:	2b00      	cmp	r3, #0
 800a61e:	d00c      	beq.n	800a63a <USBD_StdEPReq+0x9e>
 800a620:	7bbb      	ldrb	r3, [r7, #14]
 800a622:	2b80      	cmp	r3, #128	; 0x80
 800a624:	d009      	beq.n	800a63a <USBD_StdEPReq+0x9e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800a626:	7bbb      	ldrb	r3, [r7, #14]
 800a628:	4619      	mov	r1, r3
 800a62a:	6878      	ldr	r0, [r7, #4]
 800a62c:	f001 f8a8 	bl	800b780 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800a630:	2180      	movs	r1, #128	; 0x80
 800a632:	6878      	ldr	r0, [r7, #4]
 800a634:	f001 f8a4 	bl	800b780 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800a638:	e020      	b.n	800a67c <USBD_StdEPReq+0xe0>
                USBD_CtlError(pdev, req);
 800a63a:	6839      	ldr	r1, [r7, #0]
 800a63c:	6878      	ldr	r0, [r7, #4]
 800a63e:	f000 fc1c 	bl	800ae7a <USBD_CtlError>
              break;
 800a642:	e01b      	b.n	800a67c <USBD_StdEPReq+0xe0>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800a644:	683b      	ldr	r3, [r7, #0]
 800a646:	885b      	ldrh	r3, [r3, #2]
 800a648:	2b00      	cmp	r3, #0
 800a64a:	d10e      	bne.n	800a66a <USBD_StdEPReq+0xce>
              {
                if ((ep_addr != 0x00U) &&
 800a64c:	7bbb      	ldrb	r3, [r7, #14]
 800a64e:	2b00      	cmp	r3, #0
 800a650:	d00b      	beq.n	800a66a <USBD_StdEPReq+0xce>
 800a652:	7bbb      	ldrb	r3, [r7, #14]
 800a654:	2b80      	cmp	r3, #128	; 0x80
 800a656:	d008      	beq.n	800a66a <USBD_StdEPReq+0xce>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800a658:	683b      	ldr	r3, [r7, #0]
 800a65a:	88db      	ldrh	r3, [r3, #6]
 800a65c:	2b00      	cmp	r3, #0
 800a65e:	d104      	bne.n	800a66a <USBD_StdEPReq+0xce>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 800a660:	7bbb      	ldrb	r3, [r7, #14]
 800a662:	4619      	mov	r1, r3
 800a664:	6878      	ldr	r0, [r7, #4]
 800a666:	f001 f88b 	bl	800b780 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 800a66a:	6878      	ldr	r0, [r7, #4]
 800a66c:	f000 fcce 	bl	800b00c <USBD_CtlSendStatus>

              break;
 800a670:	e004      	b.n	800a67c <USBD_StdEPReq+0xe0>

            default:
              USBD_CtlError(pdev, req);
 800a672:	6839      	ldr	r1, [r7, #0]
 800a674:	6878      	ldr	r0, [r7, #4]
 800a676:	f000 fc00 	bl	800ae7a <USBD_CtlError>
              break;
 800a67a:	bf00      	nop
          }
          break;
 800a67c:	e0e0      	b.n	800a840 <USBD_StdEPReq+0x2a4>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800a67e:	687b      	ldr	r3, [r7, #4]
 800a680:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a684:	2b02      	cmp	r3, #2
 800a686:	d002      	beq.n	800a68e <USBD_StdEPReq+0xf2>
 800a688:	2b03      	cmp	r3, #3
 800a68a:	d015      	beq.n	800a6b8 <USBD_StdEPReq+0x11c>
 800a68c:	e026      	b.n	800a6dc <USBD_StdEPReq+0x140>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a68e:	7bbb      	ldrb	r3, [r7, #14]
 800a690:	2b00      	cmp	r3, #0
 800a692:	d00c      	beq.n	800a6ae <USBD_StdEPReq+0x112>
 800a694:	7bbb      	ldrb	r3, [r7, #14]
 800a696:	2b80      	cmp	r3, #128	; 0x80
 800a698:	d009      	beq.n	800a6ae <USBD_StdEPReq+0x112>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800a69a:	7bbb      	ldrb	r3, [r7, #14]
 800a69c:	4619      	mov	r1, r3
 800a69e:	6878      	ldr	r0, [r7, #4]
 800a6a0:	f001 f86e 	bl	800b780 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800a6a4:	2180      	movs	r1, #128	; 0x80
 800a6a6:	6878      	ldr	r0, [r7, #4]
 800a6a8:	f001 f86a 	bl	800b780 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800a6ac:	e01c      	b.n	800a6e8 <USBD_StdEPReq+0x14c>
                USBD_CtlError(pdev, req);
 800a6ae:	6839      	ldr	r1, [r7, #0]
 800a6b0:	6878      	ldr	r0, [r7, #4]
 800a6b2:	f000 fbe2 	bl	800ae7a <USBD_CtlError>
              break;
 800a6b6:	e017      	b.n	800a6e8 <USBD_StdEPReq+0x14c>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800a6b8:	683b      	ldr	r3, [r7, #0]
 800a6ba:	885b      	ldrh	r3, [r3, #2]
 800a6bc:	2b00      	cmp	r3, #0
 800a6be:	d112      	bne.n	800a6e6 <USBD_StdEPReq+0x14a>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800a6c0:	7bbb      	ldrb	r3, [r7, #14]
 800a6c2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a6c6:	2b00      	cmp	r3, #0
 800a6c8:	d004      	beq.n	800a6d4 <USBD_StdEPReq+0x138>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 800a6ca:	7bbb      	ldrb	r3, [r7, #14]
 800a6cc:	4619      	mov	r1, r3
 800a6ce:	6878      	ldr	r0, [r7, #4]
 800a6d0:	f001 f875 	bl	800b7be <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 800a6d4:	6878      	ldr	r0, [r7, #4]
 800a6d6:	f000 fc99 	bl	800b00c <USBD_CtlSendStatus>
              }
              break;
 800a6da:	e004      	b.n	800a6e6 <USBD_StdEPReq+0x14a>

            default:
              USBD_CtlError(pdev, req);
 800a6dc:	6839      	ldr	r1, [r7, #0]
 800a6de:	6878      	ldr	r0, [r7, #4]
 800a6e0:	f000 fbcb 	bl	800ae7a <USBD_CtlError>
              break;
 800a6e4:	e000      	b.n	800a6e8 <USBD_StdEPReq+0x14c>
              break;
 800a6e6:	bf00      	nop
          }
          break;
 800a6e8:	e0aa      	b.n	800a840 <USBD_StdEPReq+0x2a4>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800a6ea:	687b      	ldr	r3, [r7, #4]
 800a6ec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a6f0:	2b02      	cmp	r3, #2
 800a6f2:	d002      	beq.n	800a6fa <USBD_StdEPReq+0x15e>
 800a6f4:	2b03      	cmp	r3, #3
 800a6f6:	d032      	beq.n	800a75e <USBD_StdEPReq+0x1c2>
 800a6f8:	e097      	b.n	800a82a <USBD_StdEPReq+0x28e>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a6fa:	7bbb      	ldrb	r3, [r7, #14]
 800a6fc:	2b00      	cmp	r3, #0
 800a6fe:	d007      	beq.n	800a710 <USBD_StdEPReq+0x174>
 800a700:	7bbb      	ldrb	r3, [r7, #14]
 800a702:	2b80      	cmp	r3, #128	; 0x80
 800a704:	d004      	beq.n	800a710 <USBD_StdEPReq+0x174>
              {
                USBD_CtlError(pdev, req);
 800a706:	6839      	ldr	r1, [r7, #0]
 800a708:	6878      	ldr	r0, [r7, #4]
 800a70a:	f000 fbb6 	bl	800ae7a <USBD_CtlError>
                break;
 800a70e:	e091      	b.n	800a834 <USBD_StdEPReq+0x298>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a710:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a714:	2b00      	cmp	r3, #0
 800a716:	da0b      	bge.n	800a730 <USBD_StdEPReq+0x194>
 800a718:	7bbb      	ldrb	r3, [r7, #14]
 800a71a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a71e:	4613      	mov	r3, r2
 800a720:	009b      	lsls	r3, r3, #2
 800a722:	4413      	add	r3, r2
 800a724:	009b      	lsls	r3, r3, #2
 800a726:	3310      	adds	r3, #16
 800a728:	687a      	ldr	r2, [r7, #4]
 800a72a:	4413      	add	r3, r2
 800a72c:	3304      	adds	r3, #4
 800a72e:	e00b      	b.n	800a748 <USBD_StdEPReq+0x1ac>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800a730:	7bbb      	ldrb	r3, [r7, #14]
 800a732:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a736:	4613      	mov	r3, r2
 800a738:	009b      	lsls	r3, r3, #2
 800a73a:	4413      	add	r3, r2
 800a73c:	009b      	lsls	r3, r3, #2
 800a73e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800a742:	687a      	ldr	r2, [r7, #4]
 800a744:	4413      	add	r3, r2
 800a746:	3304      	adds	r3, #4
 800a748:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800a74a:	68bb      	ldr	r3, [r7, #8]
 800a74c:	2200      	movs	r2, #0
 800a74e:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800a750:	68bb      	ldr	r3, [r7, #8]
 800a752:	2202      	movs	r2, #2
 800a754:	4619      	mov	r1, r3
 800a756:	6878      	ldr	r0, [r7, #4]
 800a758:	f000 fbfa 	bl	800af50 <USBD_CtlSendData>
              break;
 800a75c:	e06a      	b.n	800a834 <USBD_StdEPReq+0x298>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800a75e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a762:	2b00      	cmp	r3, #0
 800a764:	da11      	bge.n	800a78a <USBD_StdEPReq+0x1ee>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800a766:	7bbb      	ldrb	r3, [r7, #14]
 800a768:	f003 020f 	and.w	r2, r3, #15
 800a76c:	6879      	ldr	r1, [r7, #4]
 800a76e:	4613      	mov	r3, r2
 800a770:	009b      	lsls	r3, r3, #2
 800a772:	4413      	add	r3, r2
 800a774:	009b      	lsls	r3, r3, #2
 800a776:	440b      	add	r3, r1
 800a778:	3318      	adds	r3, #24
 800a77a:	681b      	ldr	r3, [r3, #0]
 800a77c:	2b00      	cmp	r3, #0
 800a77e:	d117      	bne.n	800a7b0 <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 800a780:	6839      	ldr	r1, [r7, #0]
 800a782:	6878      	ldr	r0, [r7, #4]
 800a784:	f000 fb79 	bl	800ae7a <USBD_CtlError>
                  break;
 800a788:	e054      	b.n	800a834 <USBD_StdEPReq+0x298>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800a78a:	7bbb      	ldrb	r3, [r7, #14]
 800a78c:	f003 020f 	and.w	r2, r3, #15
 800a790:	6879      	ldr	r1, [r7, #4]
 800a792:	4613      	mov	r3, r2
 800a794:	009b      	lsls	r3, r3, #2
 800a796:	4413      	add	r3, r2
 800a798:	009b      	lsls	r3, r3, #2
 800a79a:	440b      	add	r3, r1
 800a79c:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 800a7a0:	681b      	ldr	r3, [r3, #0]
 800a7a2:	2b00      	cmp	r3, #0
 800a7a4:	d104      	bne.n	800a7b0 <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 800a7a6:	6839      	ldr	r1, [r7, #0]
 800a7a8:	6878      	ldr	r0, [r7, #4]
 800a7aa:	f000 fb66 	bl	800ae7a <USBD_CtlError>
                  break;
 800a7ae:	e041      	b.n	800a834 <USBD_StdEPReq+0x298>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a7b0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a7b4:	2b00      	cmp	r3, #0
 800a7b6:	da0b      	bge.n	800a7d0 <USBD_StdEPReq+0x234>
 800a7b8:	7bbb      	ldrb	r3, [r7, #14]
 800a7ba:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a7be:	4613      	mov	r3, r2
 800a7c0:	009b      	lsls	r3, r3, #2
 800a7c2:	4413      	add	r3, r2
 800a7c4:	009b      	lsls	r3, r3, #2
 800a7c6:	3310      	adds	r3, #16
 800a7c8:	687a      	ldr	r2, [r7, #4]
 800a7ca:	4413      	add	r3, r2
 800a7cc:	3304      	adds	r3, #4
 800a7ce:	e00b      	b.n	800a7e8 <USBD_StdEPReq+0x24c>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800a7d0:	7bbb      	ldrb	r3, [r7, #14]
 800a7d2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a7d6:	4613      	mov	r3, r2
 800a7d8:	009b      	lsls	r3, r3, #2
 800a7da:	4413      	add	r3, r2
 800a7dc:	009b      	lsls	r3, r3, #2
 800a7de:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800a7e2:	687a      	ldr	r2, [r7, #4]
 800a7e4:	4413      	add	r3, r2
 800a7e6:	3304      	adds	r3, #4
 800a7e8:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800a7ea:	7bbb      	ldrb	r3, [r7, #14]
 800a7ec:	2b00      	cmp	r3, #0
 800a7ee:	d002      	beq.n	800a7f6 <USBD_StdEPReq+0x25a>
 800a7f0:	7bbb      	ldrb	r3, [r7, #14]
 800a7f2:	2b80      	cmp	r3, #128	; 0x80
 800a7f4:	d103      	bne.n	800a7fe <USBD_StdEPReq+0x262>
              {
                pep->status = 0x0000U;
 800a7f6:	68bb      	ldr	r3, [r7, #8]
 800a7f8:	2200      	movs	r2, #0
 800a7fa:	601a      	str	r2, [r3, #0]
 800a7fc:	e00e      	b.n	800a81c <USBD_StdEPReq+0x280>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 800a7fe:	7bbb      	ldrb	r3, [r7, #14]
 800a800:	4619      	mov	r1, r3
 800a802:	6878      	ldr	r0, [r7, #4]
 800a804:	f000 fffa 	bl	800b7fc <USBD_LL_IsStallEP>
 800a808:	4603      	mov	r3, r0
 800a80a:	2b00      	cmp	r3, #0
 800a80c:	d003      	beq.n	800a816 <USBD_StdEPReq+0x27a>
              {
                pep->status = 0x0001U;
 800a80e:	68bb      	ldr	r3, [r7, #8]
 800a810:	2201      	movs	r2, #1
 800a812:	601a      	str	r2, [r3, #0]
 800a814:	e002      	b.n	800a81c <USBD_StdEPReq+0x280>
              }
              else
              {
                pep->status = 0x0000U;
 800a816:	68bb      	ldr	r3, [r7, #8]
 800a818:	2200      	movs	r2, #0
 800a81a:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800a81c:	68bb      	ldr	r3, [r7, #8]
 800a81e:	2202      	movs	r2, #2
 800a820:	4619      	mov	r1, r3
 800a822:	6878      	ldr	r0, [r7, #4]
 800a824:	f000 fb94 	bl	800af50 <USBD_CtlSendData>
              break;
 800a828:	e004      	b.n	800a834 <USBD_StdEPReq+0x298>

            default:
              USBD_CtlError(pdev, req);
 800a82a:	6839      	ldr	r1, [r7, #0]
 800a82c:	6878      	ldr	r0, [r7, #4]
 800a82e:	f000 fb24 	bl	800ae7a <USBD_CtlError>
              break;
 800a832:	bf00      	nop
          }
          break;
 800a834:	e004      	b.n	800a840 <USBD_StdEPReq+0x2a4>

        default:
          USBD_CtlError(pdev, req);
 800a836:	6839      	ldr	r1, [r7, #0]
 800a838:	6878      	ldr	r0, [r7, #4]
 800a83a:	f000 fb1e 	bl	800ae7a <USBD_CtlError>
          break;
 800a83e:	bf00      	nop
      }
      break;
 800a840:	e004      	b.n	800a84c <USBD_StdEPReq+0x2b0>

    default:
      USBD_CtlError(pdev, req);
 800a842:	6839      	ldr	r1, [r7, #0]
 800a844:	6878      	ldr	r0, [r7, #4]
 800a846:	f000 fb18 	bl	800ae7a <USBD_CtlError>
      break;
 800a84a:	bf00      	nop
  }

  return ret;
 800a84c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a84e:	4618      	mov	r0, r3
 800a850:	3710      	adds	r7, #16
 800a852:	46bd      	mov	sp, r7
 800a854:	bd80      	pop	{r7, pc}
	...

0800a858 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800a858:	b580      	push	{r7, lr}
 800a85a:	b084      	sub	sp, #16
 800a85c:	af00      	add	r7, sp, #0
 800a85e:	6078      	str	r0, [r7, #4]
 800a860:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800a862:	2300      	movs	r3, #0
 800a864:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800a866:	2300      	movs	r3, #0
 800a868:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800a86a:	2300      	movs	r3, #0
 800a86c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800a86e:	683b      	ldr	r3, [r7, #0]
 800a870:	885b      	ldrh	r3, [r3, #2]
 800a872:	0a1b      	lsrs	r3, r3, #8
 800a874:	b29b      	uxth	r3, r3
 800a876:	3b01      	subs	r3, #1
 800a878:	2b06      	cmp	r3, #6
 800a87a:	f200 8128 	bhi.w	800aace <USBD_GetDescriptor+0x276>
 800a87e:	a201      	add	r2, pc, #4	; (adr r2, 800a884 <USBD_GetDescriptor+0x2c>)
 800a880:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a884:	0800a8a1 	.word	0x0800a8a1
 800a888:	0800a8b9 	.word	0x0800a8b9
 800a88c:	0800a8f9 	.word	0x0800a8f9
 800a890:	0800aacf 	.word	0x0800aacf
 800a894:	0800aacf 	.word	0x0800aacf
 800a898:	0800aa6f 	.word	0x0800aa6f
 800a89c:	0800aa9b 	.word	0x0800aa9b
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800a8a0:	687b      	ldr	r3, [r7, #4]
 800a8a2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a8a6:	681b      	ldr	r3, [r3, #0]
 800a8a8:	687a      	ldr	r2, [r7, #4]
 800a8aa:	7c12      	ldrb	r2, [r2, #16]
 800a8ac:	f107 0108 	add.w	r1, r7, #8
 800a8b0:	4610      	mov	r0, r2
 800a8b2:	4798      	blx	r3
 800a8b4:	60f8      	str	r0, [r7, #12]
      break;
 800a8b6:	e112      	b.n	800aade <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a8b8:	687b      	ldr	r3, [r7, #4]
 800a8ba:	7c1b      	ldrb	r3, [r3, #16]
 800a8bc:	2b00      	cmp	r3, #0
 800a8be:	d10d      	bne.n	800a8dc <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800a8c0:	687b      	ldr	r3, [r7, #4]
 800a8c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a8c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a8c8:	f107 0208 	add.w	r2, r7, #8
 800a8cc:	4610      	mov	r0, r2
 800a8ce:	4798      	blx	r3
 800a8d0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800a8d2:	68fb      	ldr	r3, [r7, #12]
 800a8d4:	3301      	adds	r3, #1
 800a8d6:	2202      	movs	r2, #2
 800a8d8:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800a8da:	e100      	b.n	800aade <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800a8dc:	687b      	ldr	r3, [r7, #4]
 800a8de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a8e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a8e4:	f107 0208 	add.w	r2, r7, #8
 800a8e8:	4610      	mov	r0, r2
 800a8ea:	4798      	blx	r3
 800a8ec:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800a8ee:	68fb      	ldr	r3, [r7, #12]
 800a8f0:	3301      	adds	r3, #1
 800a8f2:	2202      	movs	r2, #2
 800a8f4:	701a      	strb	r2, [r3, #0]
      break;
 800a8f6:	e0f2      	b.n	800aade <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800a8f8:	683b      	ldr	r3, [r7, #0]
 800a8fa:	885b      	ldrh	r3, [r3, #2]
 800a8fc:	b2db      	uxtb	r3, r3
 800a8fe:	2b05      	cmp	r3, #5
 800a900:	f200 80ac 	bhi.w	800aa5c <USBD_GetDescriptor+0x204>
 800a904:	a201      	add	r2, pc, #4	; (adr r2, 800a90c <USBD_GetDescriptor+0xb4>)
 800a906:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a90a:	bf00      	nop
 800a90c:	0800a925 	.word	0x0800a925
 800a910:	0800a959 	.word	0x0800a959
 800a914:	0800a98d 	.word	0x0800a98d
 800a918:	0800a9c1 	.word	0x0800a9c1
 800a91c:	0800a9f5 	.word	0x0800a9f5
 800a920:	0800aa29 	.word	0x0800aa29
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800a924:	687b      	ldr	r3, [r7, #4]
 800a926:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a92a:	685b      	ldr	r3, [r3, #4]
 800a92c:	2b00      	cmp	r3, #0
 800a92e:	d00b      	beq.n	800a948 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800a930:	687b      	ldr	r3, [r7, #4]
 800a932:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a936:	685b      	ldr	r3, [r3, #4]
 800a938:	687a      	ldr	r2, [r7, #4]
 800a93a:	7c12      	ldrb	r2, [r2, #16]
 800a93c:	f107 0108 	add.w	r1, r7, #8
 800a940:	4610      	mov	r0, r2
 800a942:	4798      	blx	r3
 800a944:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a946:	e091      	b.n	800aa6c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a948:	6839      	ldr	r1, [r7, #0]
 800a94a:	6878      	ldr	r0, [r7, #4]
 800a94c:	f000 fa95 	bl	800ae7a <USBD_CtlError>
            err++;
 800a950:	7afb      	ldrb	r3, [r7, #11]
 800a952:	3301      	adds	r3, #1
 800a954:	72fb      	strb	r3, [r7, #11]
          break;
 800a956:	e089      	b.n	800aa6c <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800a958:	687b      	ldr	r3, [r7, #4]
 800a95a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a95e:	689b      	ldr	r3, [r3, #8]
 800a960:	2b00      	cmp	r3, #0
 800a962:	d00b      	beq.n	800a97c <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800a964:	687b      	ldr	r3, [r7, #4]
 800a966:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a96a:	689b      	ldr	r3, [r3, #8]
 800a96c:	687a      	ldr	r2, [r7, #4]
 800a96e:	7c12      	ldrb	r2, [r2, #16]
 800a970:	f107 0108 	add.w	r1, r7, #8
 800a974:	4610      	mov	r0, r2
 800a976:	4798      	blx	r3
 800a978:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a97a:	e077      	b.n	800aa6c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a97c:	6839      	ldr	r1, [r7, #0]
 800a97e:	6878      	ldr	r0, [r7, #4]
 800a980:	f000 fa7b 	bl	800ae7a <USBD_CtlError>
            err++;
 800a984:	7afb      	ldrb	r3, [r7, #11]
 800a986:	3301      	adds	r3, #1
 800a988:	72fb      	strb	r3, [r7, #11]
          break;
 800a98a:	e06f      	b.n	800aa6c <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800a98c:	687b      	ldr	r3, [r7, #4]
 800a98e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a992:	68db      	ldr	r3, [r3, #12]
 800a994:	2b00      	cmp	r3, #0
 800a996:	d00b      	beq.n	800a9b0 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800a998:	687b      	ldr	r3, [r7, #4]
 800a99a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a99e:	68db      	ldr	r3, [r3, #12]
 800a9a0:	687a      	ldr	r2, [r7, #4]
 800a9a2:	7c12      	ldrb	r2, [r2, #16]
 800a9a4:	f107 0108 	add.w	r1, r7, #8
 800a9a8:	4610      	mov	r0, r2
 800a9aa:	4798      	blx	r3
 800a9ac:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a9ae:	e05d      	b.n	800aa6c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a9b0:	6839      	ldr	r1, [r7, #0]
 800a9b2:	6878      	ldr	r0, [r7, #4]
 800a9b4:	f000 fa61 	bl	800ae7a <USBD_CtlError>
            err++;
 800a9b8:	7afb      	ldrb	r3, [r7, #11]
 800a9ba:	3301      	adds	r3, #1
 800a9bc:	72fb      	strb	r3, [r7, #11]
          break;
 800a9be:	e055      	b.n	800aa6c <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800a9c0:	687b      	ldr	r3, [r7, #4]
 800a9c2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a9c6:	691b      	ldr	r3, [r3, #16]
 800a9c8:	2b00      	cmp	r3, #0
 800a9ca:	d00b      	beq.n	800a9e4 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800a9cc:	687b      	ldr	r3, [r7, #4]
 800a9ce:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a9d2:	691b      	ldr	r3, [r3, #16]
 800a9d4:	687a      	ldr	r2, [r7, #4]
 800a9d6:	7c12      	ldrb	r2, [r2, #16]
 800a9d8:	f107 0108 	add.w	r1, r7, #8
 800a9dc:	4610      	mov	r0, r2
 800a9de:	4798      	blx	r3
 800a9e0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a9e2:	e043      	b.n	800aa6c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a9e4:	6839      	ldr	r1, [r7, #0]
 800a9e6:	6878      	ldr	r0, [r7, #4]
 800a9e8:	f000 fa47 	bl	800ae7a <USBD_CtlError>
            err++;
 800a9ec:	7afb      	ldrb	r3, [r7, #11]
 800a9ee:	3301      	adds	r3, #1
 800a9f0:	72fb      	strb	r3, [r7, #11]
          break;
 800a9f2:	e03b      	b.n	800aa6c <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800a9f4:	687b      	ldr	r3, [r7, #4]
 800a9f6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a9fa:	695b      	ldr	r3, [r3, #20]
 800a9fc:	2b00      	cmp	r3, #0
 800a9fe:	d00b      	beq.n	800aa18 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800aa00:	687b      	ldr	r3, [r7, #4]
 800aa02:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800aa06:	695b      	ldr	r3, [r3, #20]
 800aa08:	687a      	ldr	r2, [r7, #4]
 800aa0a:	7c12      	ldrb	r2, [r2, #16]
 800aa0c:	f107 0108 	add.w	r1, r7, #8
 800aa10:	4610      	mov	r0, r2
 800aa12:	4798      	blx	r3
 800aa14:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800aa16:	e029      	b.n	800aa6c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800aa18:	6839      	ldr	r1, [r7, #0]
 800aa1a:	6878      	ldr	r0, [r7, #4]
 800aa1c:	f000 fa2d 	bl	800ae7a <USBD_CtlError>
            err++;
 800aa20:	7afb      	ldrb	r3, [r7, #11]
 800aa22:	3301      	adds	r3, #1
 800aa24:	72fb      	strb	r3, [r7, #11]
          break;
 800aa26:	e021      	b.n	800aa6c <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800aa28:	687b      	ldr	r3, [r7, #4]
 800aa2a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800aa2e:	699b      	ldr	r3, [r3, #24]
 800aa30:	2b00      	cmp	r3, #0
 800aa32:	d00b      	beq.n	800aa4c <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800aa34:	687b      	ldr	r3, [r7, #4]
 800aa36:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800aa3a:	699b      	ldr	r3, [r3, #24]
 800aa3c:	687a      	ldr	r2, [r7, #4]
 800aa3e:	7c12      	ldrb	r2, [r2, #16]
 800aa40:	f107 0108 	add.w	r1, r7, #8
 800aa44:	4610      	mov	r0, r2
 800aa46:	4798      	blx	r3
 800aa48:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800aa4a:	e00f      	b.n	800aa6c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800aa4c:	6839      	ldr	r1, [r7, #0]
 800aa4e:	6878      	ldr	r0, [r7, #4]
 800aa50:	f000 fa13 	bl	800ae7a <USBD_CtlError>
            err++;
 800aa54:	7afb      	ldrb	r3, [r7, #11]
 800aa56:	3301      	adds	r3, #1
 800aa58:	72fb      	strb	r3, [r7, #11]
          break;
 800aa5a:	e007      	b.n	800aa6c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 800aa5c:	6839      	ldr	r1, [r7, #0]
 800aa5e:	6878      	ldr	r0, [r7, #4]
 800aa60:	f000 fa0b 	bl	800ae7a <USBD_CtlError>
          err++;
 800aa64:	7afb      	ldrb	r3, [r7, #11]
 800aa66:	3301      	adds	r3, #1
 800aa68:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 800aa6a:	e038      	b.n	800aade <USBD_GetDescriptor+0x286>
 800aa6c:	e037      	b.n	800aade <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800aa6e:	687b      	ldr	r3, [r7, #4]
 800aa70:	7c1b      	ldrb	r3, [r3, #16]
 800aa72:	2b00      	cmp	r3, #0
 800aa74:	d109      	bne.n	800aa8a <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800aa76:	687b      	ldr	r3, [r7, #4]
 800aa78:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800aa7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aa7e:	f107 0208 	add.w	r2, r7, #8
 800aa82:	4610      	mov	r0, r2
 800aa84:	4798      	blx	r3
 800aa86:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800aa88:	e029      	b.n	800aade <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800aa8a:	6839      	ldr	r1, [r7, #0]
 800aa8c:	6878      	ldr	r0, [r7, #4]
 800aa8e:	f000 f9f4 	bl	800ae7a <USBD_CtlError>
        err++;
 800aa92:	7afb      	ldrb	r3, [r7, #11]
 800aa94:	3301      	adds	r3, #1
 800aa96:	72fb      	strb	r3, [r7, #11]
      break;
 800aa98:	e021      	b.n	800aade <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800aa9a:	687b      	ldr	r3, [r7, #4]
 800aa9c:	7c1b      	ldrb	r3, [r3, #16]
 800aa9e:	2b00      	cmp	r3, #0
 800aaa0:	d10d      	bne.n	800aabe <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800aaa2:	687b      	ldr	r3, [r7, #4]
 800aaa4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800aaa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aaaa:	f107 0208 	add.w	r2, r7, #8
 800aaae:	4610      	mov	r0, r2
 800aab0:	4798      	blx	r3
 800aab2:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800aab4:	68fb      	ldr	r3, [r7, #12]
 800aab6:	3301      	adds	r3, #1
 800aab8:	2207      	movs	r2, #7
 800aaba:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800aabc:	e00f      	b.n	800aade <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800aabe:	6839      	ldr	r1, [r7, #0]
 800aac0:	6878      	ldr	r0, [r7, #4]
 800aac2:	f000 f9da 	bl	800ae7a <USBD_CtlError>
        err++;
 800aac6:	7afb      	ldrb	r3, [r7, #11]
 800aac8:	3301      	adds	r3, #1
 800aaca:	72fb      	strb	r3, [r7, #11]
      break;
 800aacc:	e007      	b.n	800aade <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800aace:	6839      	ldr	r1, [r7, #0]
 800aad0:	6878      	ldr	r0, [r7, #4]
 800aad2:	f000 f9d2 	bl	800ae7a <USBD_CtlError>
      err++;
 800aad6:	7afb      	ldrb	r3, [r7, #11]
 800aad8:	3301      	adds	r3, #1
 800aada:	72fb      	strb	r3, [r7, #11]
      break;
 800aadc:	bf00      	nop
  }

  if (err != 0U)
 800aade:	7afb      	ldrb	r3, [r7, #11]
 800aae0:	2b00      	cmp	r3, #0
 800aae2:	d11c      	bne.n	800ab1e <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 800aae4:	893b      	ldrh	r3, [r7, #8]
 800aae6:	2b00      	cmp	r3, #0
 800aae8:	d011      	beq.n	800ab0e <USBD_GetDescriptor+0x2b6>
 800aaea:	683b      	ldr	r3, [r7, #0]
 800aaec:	88db      	ldrh	r3, [r3, #6]
 800aaee:	2b00      	cmp	r3, #0
 800aaf0:	d00d      	beq.n	800ab0e <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 800aaf2:	683b      	ldr	r3, [r7, #0]
 800aaf4:	88da      	ldrh	r2, [r3, #6]
 800aaf6:	893b      	ldrh	r3, [r7, #8]
 800aaf8:	4293      	cmp	r3, r2
 800aafa:	bf28      	it	cs
 800aafc:	4613      	movcs	r3, r2
 800aafe:	b29b      	uxth	r3, r3
 800ab00:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800ab02:	893b      	ldrh	r3, [r7, #8]
 800ab04:	461a      	mov	r2, r3
 800ab06:	68f9      	ldr	r1, [r7, #12]
 800ab08:	6878      	ldr	r0, [r7, #4]
 800ab0a:	f000 fa21 	bl	800af50 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 800ab0e:	683b      	ldr	r3, [r7, #0]
 800ab10:	88db      	ldrh	r3, [r3, #6]
 800ab12:	2b00      	cmp	r3, #0
 800ab14:	d104      	bne.n	800ab20 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 800ab16:	6878      	ldr	r0, [r7, #4]
 800ab18:	f000 fa78 	bl	800b00c <USBD_CtlSendStatus>
 800ab1c:	e000      	b.n	800ab20 <USBD_GetDescriptor+0x2c8>
    return;
 800ab1e:	bf00      	nop
    }
  }
}
 800ab20:	3710      	adds	r7, #16
 800ab22:	46bd      	mov	sp, r7
 800ab24:	bd80      	pop	{r7, pc}
 800ab26:	bf00      	nop

0800ab28 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800ab28:	b580      	push	{r7, lr}
 800ab2a:	b084      	sub	sp, #16
 800ab2c:	af00      	add	r7, sp, #0
 800ab2e:	6078      	str	r0, [r7, #4]
 800ab30:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800ab32:	683b      	ldr	r3, [r7, #0]
 800ab34:	889b      	ldrh	r3, [r3, #4]
 800ab36:	2b00      	cmp	r3, #0
 800ab38:	d130      	bne.n	800ab9c <USBD_SetAddress+0x74>
 800ab3a:	683b      	ldr	r3, [r7, #0]
 800ab3c:	88db      	ldrh	r3, [r3, #6]
 800ab3e:	2b00      	cmp	r3, #0
 800ab40:	d12c      	bne.n	800ab9c <USBD_SetAddress+0x74>
 800ab42:	683b      	ldr	r3, [r7, #0]
 800ab44:	885b      	ldrh	r3, [r3, #2]
 800ab46:	2b7f      	cmp	r3, #127	; 0x7f
 800ab48:	d828      	bhi.n	800ab9c <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800ab4a:	683b      	ldr	r3, [r7, #0]
 800ab4c:	885b      	ldrh	r3, [r3, #2]
 800ab4e:	b2db      	uxtb	r3, r3
 800ab50:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ab54:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ab56:	687b      	ldr	r3, [r7, #4]
 800ab58:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ab5c:	2b03      	cmp	r3, #3
 800ab5e:	d104      	bne.n	800ab6a <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 800ab60:	6839      	ldr	r1, [r7, #0]
 800ab62:	6878      	ldr	r0, [r7, #4]
 800ab64:	f000 f989 	bl	800ae7a <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ab68:	e01c      	b.n	800aba4 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800ab6a:	687b      	ldr	r3, [r7, #4]
 800ab6c:	7bfa      	ldrb	r2, [r7, #15]
 800ab6e:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800ab72:	7bfb      	ldrb	r3, [r7, #15]
 800ab74:	4619      	mov	r1, r3
 800ab76:	6878      	ldr	r0, [r7, #4]
 800ab78:	f000 fe6d 	bl	800b856 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 800ab7c:	6878      	ldr	r0, [r7, #4]
 800ab7e:	f000 fa45 	bl	800b00c <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800ab82:	7bfb      	ldrb	r3, [r7, #15]
 800ab84:	2b00      	cmp	r3, #0
 800ab86:	d004      	beq.n	800ab92 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800ab88:	687b      	ldr	r3, [r7, #4]
 800ab8a:	2202      	movs	r2, #2
 800ab8c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ab90:	e008      	b.n	800aba4 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800ab92:	687b      	ldr	r3, [r7, #4]
 800ab94:	2201      	movs	r2, #1
 800ab96:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ab9a:	e003      	b.n	800aba4 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800ab9c:	6839      	ldr	r1, [r7, #0]
 800ab9e:	6878      	ldr	r0, [r7, #4]
 800aba0:	f000 f96b 	bl	800ae7a <USBD_CtlError>
  }
}
 800aba4:	bf00      	nop
 800aba6:	3710      	adds	r7, #16
 800aba8:	46bd      	mov	sp, r7
 800abaa:	bd80      	pop	{r7, pc}

0800abac <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800abac:	b580      	push	{r7, lr}
 800abae:	b082      	sub	sp, #8
 800abb0:	af00      	add	r7, sp, #0
 800abb2:	6078      	str	r0, [r7, #4]
 800abb4:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800abb6:	683b      	ldr	r3, [r7, #0]
 800abb8:	885b      	ldrh	r3, [r3, #2]
 800abba:	b2da      	uxtb	r2, r3
 800abbc:	4b41      	ldr	r3, [pc, #260]	; (800acc4 <USBD_SetConfig+0x118>)
 800abbe:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800abc0:	4b40      	ldr	r3, [pc, #256]	; (800acc4 <USBD_SetConfig+0x118>)
 800abc2:	781b      	ldrb	r3, [r3, #0]
 800abc4:	2b01      	cmp	r3, #1
 800abc6:	d904      	bls.n	800abd2 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 800abc8:	6839      	ldr	r1, [r7, #0]
 800abca:	6878      	ldr	r0, [r7, #4]
 800abcc:	f000 f955 	bl	800ae7a <USBD_CtlError>
 800abd0:	e075      	b.n	800acbe <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 800abd2:	687b      	ldr	r3, [r7, #4]
 800abd4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800abd8:	2b02      	cmp	r3, #2
 800abda:	d002      	beq.n	800abe2 <USBD_SetConfig+0x36>
 800abdc:	2b03      	cmp	r3, #3
 800abde:	d023      	beq.n	800ac28 <USBD_SetConfig+0x7c>
 800abe0:	e062      	b.n	800aca8 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 800abe2:	4b38      	ldr	r3, [pc, #224]	; (800acc4 <USBD_SetConfig+0x118>)
 800abe4:	781b      	ldrb	r3, [r3, #0]
 800abe6:	2b00      	cmp	r3, #0
 800abe8:	d01a      	beq.n	800ac20 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 800abea:	4b36      	ldr	r3, [pc, #216]	; (800acc4 <USBD_SetConfig+0x118>)
 800abec:	781b      	ldrb	r3, [r3, #0]
 800abee:	461a      	mov	r2, r3
 800abf0:	687b      	ldr	r3, [r7, #4]
 800abf2:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800abf4:	687b      	ldr	r3, [r7, #4]
 800abf6:	2203      	movs	r2, #3
 800abf8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800abfc:	4b31      	ldr	r3, [pc, #196]	; (800acc4 <USBD_SetConfig+0x118>)
 800abfe:	781b      	ldrb	r3, [r3, #0]
 800ac00:	4619      	mov	r1, r3
 800ac02:	6878      	ldr	r0, [r7, #4]
 800ac04:	f7ff f9f0 	bl	8009fe8 <USBD_SetClassConfig>
 800ac08:	4603      	mov	r3, r0
 800ac0a:	2b02      	cmp	r3, #2
 800ac0c:	d104      	bne.n	800ac18 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 800ac0e:	6839      	ldr	r1, [r7, #0]
 800ac10:	6878      	ldr	r0, [r7, #4]
 800ac12:	f000 f932 	bl	800ae7a <USBD_CtlError>
            return;
 800ac16:	e052      	b.n	800acbe <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 800ac18:	6878      	ldr	r0, [r7, #4]
 800ac1a:	f000 f9f7 	bl	800b00c <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800ac1e:	e04e      	b.n	800acbe <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800ac20:	6878      	ldr	r0, [r7, #4]
 800ac22:	f000 f9f3 	bl	800b00c <USBD_CtlSendStatus>
        break;
 800ac26:	e04a      	b.n	800acbe <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 800ac28:	4b26      	ldr	r3, [pc, #152]	; (800acc4 <USBD_SetConfig+0x118>)
 800ac2a:	781b      	ldrb	r3, [r3, #0]
 800ac2c:	2b00      	cmp	r3, #0
 800ac2e:	d112      	bne.n	800ac56 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800ac30:	687b      	ldr	r3, [r7, #4]
 800ac32:	2202      	movs	r2, #2
 800ac34:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 800ac38:	4b22      	ldr	r3, [pc, #136]	; (800acc4 <USBD_SetConfig+0x118>)
 800ac3a:	781b      	ldrb	r3, [r3, #0]
 800ac3c:	461a      	mov	r2, r3
 800ac3e:	687b      	ldr	r3, [r7, #4]
 800ac40:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 800ac42:	4b20      	ldr	r3, [pc, #128]	; (800acc4 <USBD_SetConfig+0x118>)
 800ac44:	781b      	ldrb	r3, [r3, #0]
 800ac46:	4619      	mov	r1, r3
 800ac48:	6878      	ldr	r0, [r7, #4]
 800ac4a:	f7ff f9ec 	bl	800a026 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 800ac4e:	6878      	ldr	r0, [r7, #4]
 800ac50:	f000 f9dc 	bl	800b00c <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800ac54:	e033      	b.n	800acbe <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 800ac56:	4b1b      	ldr	r3, [pc, #108]	; (800acc4 <USBD_SetConfig+0x118>)
 800ac58:	781b      	ldrb	r3, [r3, #0]
 800ac5a:	461a      	mov	r2, r3
 800ac5c:	687b      	ldr	r3, [r7, #4]
 800ac5e:	685b      	ldr	r3, [r3, #4]
 800ac60:	429a      	cmp	r2, r3
 800ac62:	d01d      	beq.n	800aca0 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800ac64:	687b      	ldr	r3, [r7, #4]
 800ac66:	685b      	ldr	r3, [r3, #4]
 800ac68:	b2db      	uxtb	r3, r3
 800ac6a:	4619      	mov	r1, r3
 800ac6c:	6878      	ldr	r0, [r7, #4]
 800ac6e:	f7ff f9da 	bl	800a026 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 800ac72:	4b14      	ldr	r3, [pc, #80]	; (800acc4 <USBD_SetConfig+0x118>)
 800ac74:	781b      	ldrb	r3, [r3, #0]
 800ac76:	461a      	mov	r2, r3
 800ac78:	687b      	ldr	r3, [r7, #4]
 800ac7a:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800ac7c:	4b11      	ldr	r3, [pc, #68]	; (800acc4 <USBD_SetConfig+0x118>)
 800ac7e:	781b      	ldrb	r3, [r3, #0]
 800ac80:	4619      	mov	r1, r3
 800ac82:	6878      	ldr	r0, [r7, #4]
 800ac84:	f7ff f9b0 	bl	8009fe8 <USBD_SetClassConfig>
 800ac88:	4603      	mov	r3, r0
 800ac8a:	2b02      	cmp	r3, #2
 800ac8c:	d104      	bne.n	800ac98 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 800ac8e:	6839      	ldr	r1, [r7, #0]
 800ac90:	6878      	ldr	r0, [r7, #4]
 800ac92:	f000 f8f2 	bl	800ae7a <USBD_CtlError>
            return;
 800ac96:	e012      	b.n	800acbe <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800ac98:	6878      	ldr	r0, [r7, #4]
 800ac9a:	f000 f9b7 	bl	800b00c <USBD_CtlSendStatus>
        break;
 800ac9e:	e00e      	b.n	800acbe <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800aca0:	6878      	ldr	r0, [r7, #4]
 800aca2:	f000 f9b3 	bl	800b00c <USBD_CtlSendStatus>
        break;
 800aca6:	e00a      	b.n	800acbe <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 800aca8:	6839      	ldr	r1, [r7, #0]
 800acaa:	6878      	ldr	r0, [r7, #4]
 800acac:	f000 f8e5 	bl	800ae7a <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 800acb0:	4b04      	ldr	r3, [pc, #16]	; (800acc4 <USBD_SetConfig+0x118>)
 800acb2:	781b      	ldrb	r3, [r3, #0]
 800acb4:	4619      	mov	r1, r3
 800acb6:	6878      	ldr	r0, [r7, #4]
 800acb8:	f7ff f9b5 	bl	800a026 <USBD_ClrClassConfig>
        break;
 800acbc:	bf00      	nop
    }
  }
}
 800acbe:	3708      	adds	r7, #8
 800acc0:	46bd      	mov	sp, r7
 800acc2:	bd80      	pop	{r7, pc}
 800acc4:	20000218 	.word	0x20000218

0800acc8 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800acc8:	b580      	push	{r7, lr}
 800acca:	b082      	sub	sp, #8
 800accc:	af00      	add	r7, sp, #0
 800acce:	6078      	str	r0, [r7, #4]
 800acd0:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800acd2:	683b      	ldr	r3, [r7, #0]
 800acd4:	88db      	ldrh	r3, [r3, #6]
 800acd6:	2b01      	cmp	r3, #1
 800acd8:	d004      	beq.n	800ace4 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800acda:	6839      	ldr	r1, [r7, #0]
 800acdc:	6878      	ldr	r0, [r7, #4]
 800acde:	f000 f8cc 	bl	800ae7a <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800ace2:	e021      	b.n	800ad28 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 800ace4:	687b      	ldr	r3, [r7, #4]
 800ace6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800acea:	2b01      	cmp	r3, #1
 800acec:	db17      	blt.n	800ad1e <USBD_GetConfig+0x56>
 800acee:	2b02      	cmp	r3, #2
 800acf0:	dd02      	ble.n	800acf8 <USBD_GetConfig+0x30>
 800acf2:	2b03      	cmp	r3, #3
 800acf4:	d00b      	beq.n	800ad0e <USBD_GetConfig+0x46>
 800acf6:	e012      	b.n	800ad1e <USBD_GetConfig+0x56>
        pdev->dev_default_config = 0U;
 800acf8:	687b      	ldr	r3, [r7, #4]
 800acfa:	2200      	movs	r2, #0
 800acfc:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 800acfe:	687b      	ldr	r3, [r7, #4]
 800ad00:	3308      	adds	r3, #8
 800ad02:	2201      	movs	r2, #1
 800ad04:	4619      	mov	r1, r3
 800ad06:	6878      	ldr	r0, [r7, #4]
 800ad08:	f000 f922 	bl	800af50 <USBD_CtlSendData>
        break;
 800ad0c:	e00c      	b.n	800ad28 <USBD_GetConfig+0x60>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 800ad0e:	687b      	ldr	r3, [r7, #4]
 800ad10:	3304      	adds	r3, #4
 800ad12:	2201      	movs	r2, #1
 800ad14:	4619      	mov	r1, r3
 800ad16:	6878      	ldr	r0, [r7, #4]
 800ad18:	f000 f91a 	bl	800af50 <USBD_CtlSendData>
        break;
 800ad1c:	e004      	b.n	800ad28 <USBD_GetConfig+0x60>
        USBD_CtlError(pdev, req);
 800ad1e:	6839      	ldr	r1, [r7, #0]
 800ad20:	6878      	ldr	r0, [r7, #4]
 800ad22:	f000 f8aa 	bl	800ae7a <USBD_CtlError>
        break;
 800ad26:	bf00      	nop
}
 800ad28:	bf00      	nop
 800ad2a:	3708      	adds	r7, #8
 800ad2c:	46bd      	mov	sp, r7
 800ad2e:	bd80      	pop	{r7, pc}

0800ad30 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ad30:	b580      	push	{r7, lr}
 800ad32:	b082      	sub	sp, #8
 800ad34:	af00      	add	r7, sp, #0
 800ad36:	6078      	str	r0, [r7, #4]
 800ad38:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800ad3a:	687b      	ldr	r3, [r7, #4]
 800ad3c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ad40:	3b01      	subs	r3, #1
 800ad42:	2b02      	cmp	r3, #2
 800ad44:	d81e      	bhi.n	800ad84 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800ad46:	683b      	ldr	r3, [r7, #0]
 800ad48:	88db      	ldrh	r3, [r3, #6]
 800ad4a:	2b02      	cmp	r3, #2
 800ad4c:	d004      	beq.n	800ad58 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 800ad4e:	6839      	ldr	r1, [r7, #0]
 800ad50:	6878      	ldr	r0, [r7, #4]
 800ad52:	f000 f892 	bl	800ae7a <USBD_CtlError>
        break;
 800ad56:	e01a      	b.n	800ad8e <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800ad58:	687b      	ldr	r3, [r7, #4]
 800ad5a:	2201      	movs	r2, #1
 800ad5c:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 800ad5e:	687b      	ldr	r3, [r7, #4]
 800ad60:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800ad64:	2b00      	cmp	r3, #0
 800ad66:	d005      	beq.n	800ad74 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800ad68:	687b      	ldr	r3, [r7, #4]
 800ad6a:	68db      	ldr	r3, [r3, #12]
 800ad6c:	f043 0202 	orr.w	r2, r3, #2
 800ad70:	687b      	ldr	r3, [r7, #4]
 800ad72:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800ad74:	687b      	ldr	r3, [r7, #4]
 800ad76:	330c      	adds	r3, #12
 800ad78:	2202      	movs	r2, #2
 800ad7a:	4619      	mov	r1, r3
 800ad7c:	6878      	ldr	r0, [r7, #4]
 800ad7e:	f000 f8e7 	bl	800af50 <USBD_CtlSendData>
      break;
 800ad82:	e004      	b.n	800ad8e <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 800ad84:	6839      	ldr	r1, [r7, #0]
 800ad86:	6878      	ldr	r0, [r7, #4]
 800ad88:	f000 f877 	bl	800ae7a <USBD_CtlError>
      break;
 800ad8c:	bf00      	nop
  }
}
 800ad8e:	bf00      	nop
 800ad90:	3708      	adds	r7, #8
 800ad92:	46bd      	mov	sp, r7
 800ad94:	bd80      	pop	{r7, pc}

0800ad96 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800ad96:	b580      	push	{r7, lr}
 800ad98:	b082      	sub	sp, #8
 800ad9a:	af00      	add	r7, sp, #0
 800ad9c:	6078      	str	r0, [r7, #4]
 800ad9e:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800ada0:	683b      	ldr	r3, [r7, #0]
 800ada2:	885b      	ldrh	r3, [r3, #2]
 800ada4:	2b01      	cmp	r3, #1
 800ada6:	d106      	bne.n	800adb6 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800ada8:	687b      	ldr	r3, [r7, #4]
 800adaa:	2201      	movs	r2, #1
 800adac:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 800adb0:	6878      	ldr	r0, [r7, #4]
 800adb2:	f000 f92b 	bl	800b00c <USBD_CtlSendStatus>
  }
}
 800adb6:	bf00      	nop
 800adb8:	3708      	adds	r7, #8
 800adba:	46bd      	mov	sp, r7
 800adbc:	bd80      	pop	{r7, pc}

0800adbe <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800adbe:	b580      	push	{r7, lr}
 800adc0:	b082      	sub	sp, #8
 800adc2:	af00      	add	r7, sp, #0
 800adc4:	6078      	str	r0, [r7, #4]
 800adc6:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800adc8:	687b      	ldr	r3, [r7, #4]
 800adca:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800adce:	3b01      	subs	r3, #1
 800add0:	2b02      	cmp	r3, #2
 800add2:	d80b      	bhi.n	800adec <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800add4:	683b      	ldr	r3, [r7, #0]
 800add6:	885b      	ldrh	r3, [r3, #2]
 800add8:	2b01      	cmp	r3, #1
 800adda:	d10c      	bne.n	800adf6 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 800addc:	687b      	ldr	r3, [r7, #4]
 800adde:	2200      	movs	r2, #0
 800ade0:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 800ade4:	6878      	ldr	r0, [r7, #4]
 800ade6:	f000 f911 	bl	800b00c <USBD_CtlSendStatus>
      }
      break;
 800adea:	e004      	b.n	800adf6 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 800adec:	6839      	ldr	r1, [r7, #0]
 800adee:	6878      	ldr	r0, [r7, #4]
 800adf0:	f000 f843 	bl	800ae7a <USBD_CtlError>
      break;
 800adf4:	e000      	b.n	800adf8 <USBD_ClrFeature+0x3a>
      break;
 800adf6:	bf00      	nop
  }
}
 800adf8:	bf00      	nop
 800adfa:	3708      	adds	r7, #8
 800adfc:	46bd      	mov	sp, r7
 800adfe:	bd80      	pop	{r7, pc}

0800ae00 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800ae00:	b480      	push	{r7}
 800ae02:	b083      	sub	sp, #12
 800ae04:	af00      	add	r7, sp, #0
 800ae06:	6078      	str	r0, [r7, #4]
 800ae08:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 800ae0a:	683b      	ldr	r3, [r7, #0]
 800ae0c:	781a      	ldrb	r2, [r3, #0]
 800ae0e:	687b      	ldr	r3, [r7, #4]
 800ae10:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 800ae12:	683b      	ldr	r3, [r7, #0]
 800ae14:	785a      	ldrb	r2, [r3, #1]
 800ae16:	687b      	ldr	r3, [r7, #4]
 800ae18:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 800ae1a:	683b      	ldr	r3, [r7, #0]
 800ae1c:	3302      	adds	r3, #2
 800ae1e:	781b      	ldrb	r3, [r3, #0]
 800ae20:	b29a      	uxth	r2, r3
 800ae22:	683b      	ldr	r3, [r7, #0]
 800ae24:	3303      	adds	r3, #3
 800ae26:	781b      	ldrb	r3, [r3, #0]
 800ae28:	b29b      	uxth	r3, r3
 800ae2a:	021b      	lsls	r3, r3, #8
 800ae2c:	b29b      	uxth	r3, r3
 800ae2e:	4413      	add	r3, r2
 800ae30:	b29a      	uxth	r2, r3
 800ae32:	687b      	ldr	r3, [r7, #4]
 800ae34:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 800ae36:	683b      	ldr	r3, [r7, #0]
 800ae38:	3304      	adds	r3, #4
 800ae3a:	781b      	ldrb	r3, [r3, #0]
 800ae3c:	b29a      	uxth	r2, r3
 800ae3e:	683b      	ldr	r3, [r7, #0]
 800ae40:	3305      	adds	r3, #5
 800ae42:	781b      	ldrb	r3, [r3, #0]
 800ae44:	b29b      	uxth	r3, r3
 800ae46:	021b      	lsls	r3, r3, #8
 800ae48:	b29b      	uxth	r3, r3
 800ae4a:	4413      	add	r3, r2
 800ae4c:	b29a      	uxth	r2, r3
 800ae4e:	687b      	ldr	r3, [r7, #4]
 800ae50:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 800ae52:	683b      	ldr	r3, [r7, #0]
 800ae54:	3306      	adds	r3, #6
 800ae56:	781b      	ldrb	r3, [r3, #0]
 800ae58:	b29a      	uxth	r2, r3
 800ae5a:	683b      	ldr	r3, [r7, #0]
 800ae5c:	3307      	adds	r3, #7
 800ae5e:	781b      	ldrb	r3, [r3, #0]
 800ae60:	b29b      	uxth	r3, r3
 800ae62:	021b      	lsls	r3, r3, #8
 800ae64:	b29b      	uxth	r3, r3
 800ae66:	4413      	add	r3, r2
 800ae68:	b29a      	uxth	r2, r3
 800ae6a:	687b      	ldr	r3, [r7, #4]
 800ae6c:	80da      	strh	r2, [r3, #6]

}
 800ae6e:	bf00      	nop
 800ae70:	370c      	adds	r7, #12
 800ae72:	46bd      	mov	sp, r7
 800ae74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae78:	4770      	bx	lr

0800ae7a <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 800ae7a:	b580      	push	{r7, lr}
 800ae7c:	b082      	sub	sp, #8
 800ae7e:	af00      	add	r7, sp, #0
 800ae80:	6078      	str	r0, [r7, #4]
 800ae82:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 800ae84:	2180      	movs	r1, #128	; 0x80
 800ae86:	6878      	ldr	r0, [r7, #4]
 800ae88:	f000 fc7a 	bl	800b780 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 800ae8c:	2100      	movs	r1, #0
 800ae8e:	6878      	ldr	r0, [r7, #4]
 800ae90:	f000 fc76 	bl	800b780 <USBD_LL_StallEP>
}
 800ae94:	bf00      	nop
 800ae96:	3708      	adds	r7, #8
 800ae98:	46bd      	mov	sp, r7
 800ae9a:	bd80      	pop	{r7, pc}

0800ae9c <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800ae9c:	b580      	push	{r7, lr}
 800ae9e:	b086      	sub	sp, #24
 800aea0:	af00      	add	r7, sp, #0
 800aea2:	60f8      	str	r0, [r7, #12]
 800aea4:	60b9      	str	r1, [r7, #8]
 800aea6:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800aea8:	2300      	movs	r3, #0
 800aeaa:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 800aeac:	68fb      	ldr	r3, [r7, #12]
 800aeae:	2b00      	cmp	r3, #0
 800aeb0:	d032      	beq.n	800af18 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800aeb2:	68f8      	ldr	r0, [r7, #12]
 800aeb4:	f000 f834 	bl	800af20 <USBD_GetLen>
 800aeb8:	4603      	mov	r3, r0
 800aeba:	3301      	adds	r3, #1
 800aebc:	b29b      	uxth	r3, r3
 800aebe:	005b      	lsls	r3, r3, #1
 800aec0:	b29a      	uxth	r2, r3
 800aec2:	687b      	ldr	r3, [r7, #4]
 800aec4:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800aec6:	7dfb      	ldrb	r3, [r7, #23]
 800aec8:	1c5a      	adds	r2, r3, #1
 800aeca:	75fa      	strb	r2, [r7, #23]
 800aecc:	461a      	mov	r2, r3
 800aece:	68bb      	ldr	r3, [r7, #8]
 800aed0:	4413      	add	r3, r2
 800aed2:	687a      	ldr	r2, [r7, #4]
 800aed4:	7812      	ldrb	r2, [r2, #0]
 800aed6:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800aed8:	7dfb      	ldrb	r3, [r7, #23]
 800aeda:	1c5a      	adds	r2, r3, #1
 800aedc:	75fa      	strb	r2, [r7, #23]
 800aede:	461a      	mov	r2, r3
 800aee0:	68bb      	ldr	r3, [r7, #8]
 800aee2:	4413      	add	r3, r2
 800aee4:	2203      	movs	r2, #3
 800aee6:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 800aee8:	e012      	b.n	800af10 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 800aeea:	68fb      	ldr	r3, [r7, #12]
 800aeec:	1c5a      	adds	r2, r3, #1
 800aeee:	60fa      	str	r2, [r7, #12]
 800aef0:	7dfa      	ldrb	r2, [r7, #23]
 800aef2:	1c51      	adds	r1, r2, #1
 800aef4:	75f9      	strb	r1, [r7, #23]
 800aef6:	4611      	mov	r1, r2
 800aef8:	68ba      	ldr	r2, [r7, #8]
 800aefa:	440a      	add	r2, r1
 800aefc:	781b      	ldrb	r3, [r3, #0]
 800aefe:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 800af00:	7dfb      	ldrb	r3, [r7, #23]
 800af02:	1c5a      	adds	r2, r3, #1
 800af04:	75fa      	strb	r2, [r7, #23]
 800af06:	461a      	mov	r2, r3
 800af08:	68bb      	ldr	r3, [r7, #8]
 800af0a:	4413      	add	r3, r2
 800af0c:	2200      	movs	r2, #0
 800af0e:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 800af10:	68fb      	ldr	r3, [r7, #12]
 800af12:	781b      	ldrb	r3, [r3, #0]
 800af14:	2b00      	cmp	r3, #0
 800af16:	d1e8      	bne.n	800aeea <USBD_GetString+0x4e>
    }
  }
}
 800af18:	bf00      	nop
 800af1a:	3718      	adds	r7, #24
 800af1c:	46bd      	mov	sp, r7
 800af1e:	bd80      	pop	{r7, pc}

0800af20 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800af20:	b480      	push	{r7}
 800af22:	b085      	sub	sp, #20
 800af24:	af00      	add	r7, sp, #0
 800af26:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800af28:	2300      	movs	r3, #0
 800af2a:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 800af2c:	e005      	b.n	800af3a <USBD_GetLen+0x1a>
  {
    len++;
 800af2e:	7bfb      	ldrb	r3, [r7, #15]
 800af30:	3301      	adds	r3, #1
 800af32:	73fb      	strb	r3, [r7, #15]
    buf++;
 800af34:	687b      	ldr	r3, [r7, #4]
 800af36:	3301      	adds	r3, #1
 800af38:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 800af3a:	687b      	ldr	r3, [r7, #4]
 800af3c:	781b      	ldrb	r3, [r3, #0]
 800af3e:	2b00      	cmp	r3, #0
 800af40:	d1f5      	bne.n	800af2e <USBD_GetLen+0xe>
  }

  return len;
 800af42:	7bfb      	ldrb	r3, [r7, #15]
}
 800af44:	4618      	mov	r0, r3
 800af46:	3714      	adds	r7, #20
 800af48:	46bd      	mov	sp, r7
 800af4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af4e:	4770      	bx	lr

0800af50 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 800af50:	b580      	push	{r7, lr}
 800af52:	b084      	sub	sp, #16
 800af54:	af00      	add	r7, sp, #0
 800af56:	60f8      	str	r0, [r7, #12]
 800af58:	60b9      	str	r1, [r7, #8]
 800af5a:	4613      	mov	r3, r2
 800af5c:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800af5e:	68fb      	ldr	r3, [r7, #12]
 800af60:	2202      	movs	r2, #2
 800af62:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800af66:	88fa      	ldrh	r2, [r7, #6]
 800af68:	68fb      	ldr	r3, [r7, #12]
 800af6a:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 800af6c:	88fa      	ldrh	r2, [r7, #6]
 800af6e:	68fb      	ldr	r3, [r7, #12]
 800af70:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800af72:	88fb      	ldrh	r3, [r7, #6]
 800af74:	68ba      	ldr	r2, [r7, #8]
 800af76:	2100      	movs	r1, #0
 800af78:	68f8      	ldr	r0, [r7, #12]
 800af7a:	f000 fc8b 	bl	800b894 <USBD_LL_Transmit>

  return USBD_OK;
 800af7e:	2300      	movs	r3, #0
}
 800af80:	4618      	mov	r0, r3
 800af82:	3710      	adds	r7, #16
 800af84:	46bd      	mov	sp, r7
 800af86:	bd80      	pop	{r7, pc}

0800af88 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 800af88:	b580      	push	{r7, lr}
 800af8a:	b084      	sub	sp, #16
 800af8c:	af00      	add	r7, sp, #0
 800af8e:	60f8      	str	r0, [r7, #12]
 800af90:	60b9      	str	r1, [r7, #8]
 800af92:	4613      	mov	r3, r2
 800af94:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800af96:	88fb      	ldrh	r3, [r7, #6]
 800af98:	68ba      	ldr	r2, [r7, #8]
 800af9a:	2100      	movs	r1, #0
 800af9c:	68f8      	ldr	r0, [r7, #12]
 800af9e:	f000 fc79 	bl	800b894 <USBD_LL_Transmit>

  return USBD_OK;
 800afa2:	2300      	movs	r3, #0
}
 800afa4:	4618      	mov	r0, r3
 800afa6:	3710      	adds	r7, #16
 800afa8:	46bd      	mov	sp, r7
 800afaa:	bd80      	pop	{r7, pc}

0800afac <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 800afac:	b580      	push	{r7, lr}
 800afae:	b084      	sub	sp, #16
 800afb0:	af00      	add	r7, sp, #0
 800afb2:	60f8      	str	r0, [r7, #12]
 800afb4:	60b9      	str	r1, [r7, #8]
 800afb6:	4613      	mov	r3, r2
 800afb8:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800afba:	68fb      	ldr	r3, [r7, #12]
 800afbc:	2203      	movs	r2, #3
 800afbe:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800afc2:	88fa      	ldrh	r2, [r7, #6]
 800afc4:	68fb      	ldr	r3, [r7, #12]
 800afc6:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 800afca:	88fa      	ldrh	r2, [r7, #6]
 800afcc:	68fb      	ldr	r3, [r7, #12]
 800afce:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800afd2:	88fb      	ldrh	r3, [r7, #6]
 800afd4:	68ba      	ldr	r2, [r7, #8]
 800afd6:	2100      	movs	r1, #0
 800afd8:	68f8      	ldr	r0, [r7, #12]
 800afda:	f000 fc7e 	bl	800b8da <USBD_LL_PrepareReceive>

  return USBD_OK;
 800afde:	2300      	movs	r3, #0
}
 800afe0:	4618      	mov	r0, r3
 800afe2:	3710      	adds	r7, #16
 800afe4:	46bd      	mov	sp, r7
 800afe6:	bd80      	pop	{r7, pc}

0800afe8 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 800afe8:	b580      	push	{r7, lr}
 800afea:	b084      	sub	sp, #16
 800afec:	af00      	add	r7, sp, #0
 800afee:	60f8      	str	r0, [r7, #12]
 800aff0:	60b9      	str	r1, [r7, #8]
 800aff2:	4613      	mov	r3, r2
 800aff4:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800aff6:	88fb      	ldrh	r3, [r7, #6]
 800aff8:	68ba      	ldr	r2, [r7, #8]
 800affa:	2100      	movs	r1, #0
 800affc:	68f8      	ldr	r0, [r7, #12]
 800affe:	f000 fc6c 	bl	800b8da <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b002:	2300      	movs	r3, #0
}
 800b004:	4618      	mov	r0, r3
 800b006:	3710      	adds	r7, #16
 800b008:	46bd      	mov	sp, r7
 800b00a:	bd80      	pop	{r7, pc}

0800b00c <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800b00c:	b580      	push	{r7, lr}
 800b00e:	b082      	sub	sp, #8
 800b010:	af00      	add	r7, sp, #0
 800b012:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800b014:	687b      	ldr	r3, [r7, #4]
 800b016:	2204      	movs	r2, #4
 800b018:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800b01c:	2300      	movs	r3, #0
 800b01e:	2200      	movs	r2, #0
 800b020:	2100      	movs	r1, #0
 800b022:	6878      	ldr	r0, [r7, #4]
 800b024:	f000 fc36 	bl	800b894 <USBD_LL_Transmit>

  return USBD_OK;
 800b028:	2300      	movs	r3, #0
}
 800b02a:	4618      	mov	r0, r3
 800b02c:	3708      	adds	r7, #8
 800b02e:	46bd      	mov	sp, r7
 800b030:	bd80      	pop	{r7, pc}

0800b032 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800b032:	b580      	push	{r7, lr}
 800b034:	b082      	sub	sp, #8
 800b036:	af00      	add	r7, sp, #0
 800b038:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800b03a:	687b      	ldr	r3, [r7, #4]
 800b03c:	2205      	movs	r2, #5
 800b03e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b042:	2300      	movs	r3, #0
 800b044:	2200      	movs	r2, #0
 800b046:	2100      	movs	r1, #0
 800b048:	6878      	ldr	r0, [r7, #4]
 800b04a:	f000 fc46 	bl	800b8da <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b04e:	2300      	movs	r3, #0
}
 800b050:	4618      	mov	r0, r3
 800b052:	3708      	adds	r7, #8
 800b054:	46bd      	mov	sp, r7
 800b056:	bd80      	pop	{r7, pc}

0800b058 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800b058:	b580      	push	{r7, lr}
 800b05a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800b05c:	2200      	movs	r2, #0
 800b05e:	4912      	ldr	r1, [pc, #72]	; (800b0a8 <MX_USB_DEVICE_Init+0x50>)
 800b060:	4812      	ldr	r0, [pc, #72]	; (800b0ac <MX_USB_DEVICE_Init+0x54>)
 800b062:	f7fe ff65 	bl	8009f30 <USBD_Init>
 800b066:	4603      	mov	r3, r0
 800b068:	2b00      	cmp	r3, #0
 800b06a:	d001      	beq.n	800b070 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800b06c:	f7f7 fd9a 	bl	8002ba4 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800b070:	490f      	ldr	r1, [pc, #60]	; (800b0b0 <MX_USB_DEVICE_Init+0x58>)
 800b072:	480e      	ldr	r0, [pc, #56]	; (800b0ac <MX_USB_DEVICE_Init+0x54>)
 800b074:	f7fe ff87 	bl	8009f86 <USBD_RegisterClass>
 800b078:	4603      	mov	r3, r0
 800b07a:	2b00      	cmp	r3, #0
 800b07c:	d001      	beq.n	800b082 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800b07e:	f7f7 fd91 	bl	8002ba4 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800b082:	490c      	ldr	r1, [pc, #48]	; (800b0b4 <MX_USB_DEVICE_Init+0x5c>)
 800b084:	4809      	ldr	r0, [pc, #36]	; (800b0ac <MX_USB_DEVICE_Init+0x54>)
 800b086:	f7fe feb5 	bl	8009df4 <USBD_CDC_RegisterInterface>
 800b08a:	4603      	mov	r3, r0
 800b08c:	2b00      	cmp	r3, #0
 800b08e:	d001      	beq.n	800b094 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800b090:	f7f7 fd88 	bl	8002ba4 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800b094:	4805      	ldr	r0, [pc, #20]	; (800b0ac <MX_USB_DEVICE_Init+0x54>)
 800b096:	f7fe ff90 	bl	8009fba <USBD_Start>
 800b09a:	4603      	mov	r3, r0
 800b09c:	2b00      	cmp	r3, #0
 800b09e:	d001      	beq.n	800b0a4 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800b0a0:	f7f7 fd80 	bl	8002ba4 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800b0a4:	bf00      	nop
 800b0a6:	bd80      	pop	{r7, pc}
 800b0a8:	20000138 	.word	0x20000138
 800b0ac:	200004f0 	.word	0x200004f0
 800b0b0:	20000024 	.word	0x20000024
 800b0b4:	20000128 	.word	0x20000128

0800b0b8 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800b0b8:	b580      	push	{r7, lr}
 800b0ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800b0bc:	2200      	movs	r2, #0
 800b0be:	4905      	ldr	r1, [pc, #20]	; (800b0d4 <CDC_Init_FS+0x1c>)
 800b0c0:	4805      	ldr	r0, [pc, #20]	; (800b0d8 <CDC_Init_FS+0x20>)
 800b0c2:	f7fe feae 	bl	8009e22 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800b0c6:	4905      	ldr	r1, [pc, #20]	; (800b0dc <CDC_Init_FS+0x24>)
 800b0c8:	4803      	ldr	r0, [pc, #12]	; (800b0d8 <CDC_Init_FS+0x20>)
 800b0ca:	f7fe fec4 	bl	8009e56 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800b0ce:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800b0d0:	4618      	mov	r0, r3
 800b0d2:	bd80      	pop	{r7, pc}
 800b0d4:	20000b9c 	.word	0x20000b9c
 800b0d8:	200004f0 	.word	0x200004f0
 800b0dc:	200007b4 	.word	0x200007b4

0800b0e0 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800b0e0:	b480      	push	{r7}
 800b0e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800b0e4:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800b0e6:	4618      	mov	r0, r3
 800b0e8:	46bd      	mov	sp, r7
 800b0ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0ee:	4770      	bx	lr

0800b0f0 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800b0f0:	b480      	push	{r7}
 800b0f2:	b083      	sub	sp, #12
 800b0f4:	af00      	add	r7, sp, #0
 800b0f6:	4603      	mov	r3, r0
 800b0f8:	6039      	str	r1, [r7, #0]
 800b0fa:	71fb      	strb	r3, [r7, #7]
 800b0fc:	4613      	mov	r3, r2
 800b0fe:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800b100:	79fb      	ldrb	r3, [r7, #7]
 800b102:	2b23      	cmp	r3, #35	; 0x23
 800b104:	d84a      	bhi.n	800b19c <CDC_Control_FS+0xac>
 800b106:	a201      	add	r2, pc, #4	; (adr r2, 800b10c <CDC_Control_FS+0x1c>)
 800b108:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b10c:	0800b19d 	.word	0x0800b19d
 800b110:	0800b19d 	.word	0x0800b19d
 800b114:	0800b19d 	.word	0x0800b19d
 800b118:	0800b19d 	.word	0x0800b19d
 800b11c:	0800b19d 	.word	0x0800b19d
 800b120:	0800b19d 	.word	0x0800b19d
 800b124:	0800b19d 	.word	0x0800b19d
 800b128:	0800b19d 	.word	0x0800b19d
 800b12c:	0800b19d 	.word	0x0800b19d
 800b130:	0800b19d 	.word	0x0800b19d
 800b134:	0800b19d 	.word	0x0800b19d
 800b138:	0800b19d 	.word	0x0800b19d
 800b13c:	0800b19d 	.word	0x0800b19d
 800b140:	0800b19d 	.word	0x0800b19d
 800b144:	0800b19d 	.word	0x0800b19d
 800b148:	0800b19d 	.word	0x0800b19d
 800b14c:	0800b19d 	.word	0x0800b19d
 800b150:	0800b19d 	.word	0x0800b19d
 800b154:	0800b19d 	.word	0x0800b19d
 800b158:	0800b19d 	.word	0x0800b19d
 800b15c:	0800b19d 	.word	0x0800b19d
 800b160:	0800b19d 	.word	0x0800b19d
 800b164:	0800b19d 	.word	0x0800b19d
 800b168:	0800b19d 	.word	0x0800b19d
 800b16c:	0800b19d 	.word	0x0800b19d
 800b170:	0800b19d 	.word	0x0800b19d
 800b174:	0800b19d 	.word	0x0800b19d
 800b178:	0800b19d 	.word	0x0800b19d
 800b17c:	0800b19d 	.word	0x0800b19d
 800b180:	0800b19d 	.word	0x0800b19d
 800b184:	0800b19d 	.word	0x0800b19d
 800b188:	0800b19d 	.word	0x0800b19d
 800b18c:	0800b19d 	.word	0x0800b19d
 800b190:	0800b19d 	.word	0x0800b19d
 800b194:	0800b19d 	.word	0x0800b19d
 800b198:	0800b19d 	.word	0x0800b19d
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800b19c:	bf00      	nop
  }

  return (USBD_OK);
 800b19e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800b1a0:	4618      	mov	r0, r3
 800b1a2:	370c      	adds	r7, #12
 800b1a4:	46bd      	mov	sp, r7
 800b1a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1aa:	4770      	bx	lr

0800b1ac <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800b1ac:	b580      	push	{r7, lr}
 800b1ae:	b082      	sub	sp, #8
 800b1b0:	af00      	add	r7, sp, #0
 800b1b2:	6078      	str	r0, [r7, #4]
 800b1b4:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800b1b6:	6879      	ldr	r1, [r7, #4]
 800b1b8:	4805      	ldr	r0, [pc, #20]	; (800b1d0 <CDC_Receive_FS+0x24>)
 800b1ba:	f7fe fe4c 	bl	8009e56 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800b1be:	4804      	ldr	r0, [pc, #16]	; (800b1d0 <CDC_Receive_FS+0x24>)
 800b1c0:	f7fe fe8c 	bl	8009edc <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800b1c4:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800b1c6:	4618      	mov	r0, r3
 800b1c8:	3708      	adds	r7, #8
 800b1ca:	46bd      	mov	sp, r7
 800b1cc:	bd80      	pop	{r7, pc}
 800b1ce:	bf00      	nop
 800b1d0:	200004f0 	.word	0x200004f0

0800b1d4 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800b1d4:	b580      	push	{r7, lr}
 800b1d6:	b084      	sub	sp, #16
 800b1d8:	af00      	add	r7, sp, #0
 800b1da:	6078      	str	r0, [r7, #4]
 800b1dc:	460b      	mov	r3, r1
 800b1de:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800b1e0:	2300      	movs	r3, #0
 800b1e2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800b1e4:	4b0d      	ldr	r3, [pc, #52]	; (800b21c <CDC_Transmit_FS+0x48>)
 800b1e6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b1ea:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800b1ec:	68bb      	ldr	r3, [r7, #8]
 800b1ee:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800b1f2:	2b00      	cmp	r3, #0
 800b1f4:	d001      	beq.n	800b1fa <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800b1f6:	2301      	movs	r3, #1
 800b1f8:	e00b      	b.n	800b212 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800b1fa:	887b      	ldrh	r3, [r7, #2]
 800b1fc:	461a      	mov	r2, r3
 800b1fe:	6879      	ldr	r1, [r7, #4]
 800b200:	4806      	ldr	r0, [pc, #24]	; (800b21c <CDC_Transmit_FS+0x48>)
 800b202:	f7fe fe0e 	bl	8009e22 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800b206:	4805      	ldr	r0, [pc, #20]	; (800b21c <CDC_Transmit_FS+0x48>)
 800b208:	f7fe fe39 	bl	8009e7e <USBD_CDC_TransmitPacket>
 800b20c:	4603      	mov	r3, r0
 800b20e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800b210:	7bfb      	ldrb	r3, [r7, #15]
}
 800b212:	4618      	mov	r0, r3
 800b214:	3710      	adds	r7, #16
 800b216:	46bd      	mov	sp, r7
 800b218:	bd80      	pop	{r7, pc}
 800b21a:	bf00      	nop
 800b21c:	200004f0 	.word	0x200004f0

0800b220 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b220:	b480      	push	{r7}
 800b222:	b083      	sub	sp, #12
 800b224:	af00      	add	r7, sp, #0
 800b226:	4603      	mov	r3, r0
 800b228:	6039      	str	r1, [r7, #0]
 800b22a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800b22c:	683b      	ldr	r3, [r7, #0]
 800b22e:	2212      	movs	r2, #18
 800b230:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800b232:	4b03      	ldr	r3, [pc, #12]	; (800b240 <USBD_FS_DeviceDescriptor+0x20>)
}
 800b234:	4618      	mov	r0, r3
 800b236:	370c      	adds	r7, #12
 800b238:	46bd      	mov	sp, r7
 800b23a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b23e:	4770      	bx	lr
 800b240:	20000154 	.word	0x20000154

0800b244 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b244:	b480      	push	{r7}
 800b246:	b083      	sub	sp, #12
 800b248:	af00      	add	r7, sp, #0
 800b24a:	4603      	mov	r3, r0
 800b24c:	6039      	str	r1, [r7, #0]
 800b24e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800b250:	683b      	ldr	r3, [r7, #0]
 800b252:	2204      	movs	r2, #4
 800b254:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800b256:	4b03      	ldr	r3, [pc, #12]	; (800b264 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800b258:	4618      	mov	r0, r3
 800b25a:	370c      	adds	r7, #12
 800b25c:	46bd      	mov	sp, r7
 800b25e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b262:	4770      	bx	lr
 800b264:	20000168 	.word	0x20000168

0800b268 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b268:	b580      	push	{r7, lr}
 800b26a:	b082      	sub	sp, #8
 800b26c:	af00      	add	r7, sp, #0
 800b26e:	4603      	mov	r3, r0
 800b270:	6039      	str	r1, [r7, #0]
 800b272:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800b274:	79fb      	ldrb	r3, [r7, #7]
 800b276:	2b00      	cmp	r3, #0
 800b278:	d105      	bne.n	800b286 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800b27a:	683a      	ldr	r2, [r7, #0]
 800b27c:	4907      	ldr	r1, [pc, #28]	; (800b29c <USBD_FS_ProductStrDescriptor+0x34>)
 800b27e:	4808      	ldr	r0, [pc, #32]	; (800b2a0 <USBD_FS_ProductStrDescriptor+0x38>)
 800b280:	f7ff fe0c 	bl	800ae9c <USBD_GetString>
 800b284:	e004      	b.n	800b290 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800b286:	683a      	ldr	r2, [r7, #0]
 800b288:	4904      	ldr	r1, [pc, #16]	; (800b29c <USBD_FS_ProductStrDescriptor+0x34>)
 800b28a:	4805      	ldr	r0, [pc, #20]	; (800b2a0 <USBD_FS_ProductStrDescriptor+0x38>)
 800b28c:	f7ff fe06 	bl	800ae9c <USBD_GetString>
  }
  return USBD_StrDesc;
 800b290:	4b02      	ldr	r3, [pc, #8]	; (800b29c <USBD_FS_ProductStrDescriptor+0x34>)
}
 800b292:	4618      	mov	r0, r3
 800b294:	3708      	adds	r7, #8
 800b296:	46bd      	mov	sp, r7
 800b298:	bd80      	pop	{r7, pc}
 800b29a:	bf00      	nop
 800b29c:	20000f84 	.word	0x20000f84
 800b2a0:	0800c678 	.word	0x0800c678

0800b2a4 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b2a4:	b580      	push	{r7, lr}
 800b2a6:	b082      	sub	sp, #8
 800b2a8:	af00      	add	r7, sp, #0
 800b2aa:	4603      	mov	r3, r0
 800b2ac:	6039      	str	r1, [r7, #0]
 800b2ae:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800b2b0:	683a      	ldr	r2, [r7, #0]
 800b2b2:	4904      	ldr	r1, [pc, #16]	; (800b2c4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800b2b4:	4804      	ldr	r0, [pc, #16]	; (800b2c8 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800b2b6:	f7ff fdf1 	bl	800ae9c <USBD_GetString>
  return USBD_StrDesc;
 800b2ba:	4b02      	ldr	r3, [pc, #8]	; (800b2c4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800b2bc:	4618      	mov	r0, r3
 800b2be:	3708      	adds	r7, #8
 800b2c0:	46bd      	mov	sp, r7
 800b2c2:	bd80      	pop	{r7, pc}
 800b2c4:	20000f84 	.word	0x20000f84
 800b2c8:	0800c690 	.word	0x0800c690

0800b2cc <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b2cc:	b580      	push	{r7, lr}
 800b2ce:	b082      	sub	sp, #8
 800b2d0:	af00      	add	r7, sp, #0
 800b2d2:	4603      	mov	r3, r0
 800b2d4:	6039      	str	r1, [r7, #0]
 800b2d6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800b2d8:	683b      	ldr	r3, [r7, #0]
 800b2da:	221a      	movs	r2, #26
 800b2dc:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800b2de:	f000 f843 	bl	800b368 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800b2e2:	4b02      	ldr	r3, [pc, #8]	; (800b2ec <USBD_FS_SerialStrDescriptor+0x20>)
}
 800b2e4:	4618      	mov	r0, r3
 800b2e6:	3708      	adds	r7, #8
 800b2e8:	46bd      	mov	sp, r7
 800b2ea:	bd80      	pop	{r7, pc}
 800b2ec:	2000016c 	.word	0x2000016c

0800b2f0 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b2f0:	b580      	push	{r7, lr}
 800b2f2:	b082      	sub	sp, #8
 800b2f4:	af00      	add	r7, sp, #0
 800b2f6:	4603      	mov	r3, r0
 800b2f8:	6039      	str	r1, [r7, #0]
 800b2fa:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800b2fc:	79fb      	ldrb	r3, [r7, #7]
 800b2fe:	2b00      	cmp	r3, #0
 800b300:	d105      	bne.n	800b30e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800b302:	683a      	ldr	r2, [r7, #0]
 800b304:	4907      	ldr	r1, [pc, #28]	; (800b324 <USBD_FS_ConfigStrDescriptor+0x34>)
 800b306:	4808      	ldr	r0, [pc, #32]	; (800b328 <USBD_FS_ConfigStrDescriptor+0x38>)
 800b308:	f7ff fdc8 	bl	800ae9c <USBD_GetString>
 800b30c:	e004      	b.n	800b318 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800b30e:	683a      	ldr	r2, [r7, #0]
 800b310:	4904      	ldr	r1, [pc, #16]	; (800b324 <USBD_FS_ConfigStrDescriptor+0x34>)
 800b312:	4805      	ldr	r0, [pc, #20]	; (800b328 <USBD_FS_ConfigStrDescriptor+0x38>)
 800b314:	f7ff fdc2 	bl	800ae9c <USBD_GetString>
  }
  return USBD_StrDesc;
 800b318:	4b02      	ldr	r3, [pc, #8]	; (800b324 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800b31a:	4618      	mov	r0, r3
 800b31c:	3708      	adds	r7, #8
 800b31e:	46bd      	mov	sp, r7
 800b320:	bd80      	pop	{r7, pc}
 800b322:	bf00      	nop
 800b324:	20000f84 	.word	0x20000f84
 800b328:	0800c6a4 	.word	0x0800c6a4

0800b32c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b32c:	b580      	push	{r7, lr}
 800b32e:	b082      	sub	sp, #8
 800b330:	af00      	add	r7, sp, #0
 800b332:	4603      	mov	r3, r0
 800b334:	6039      	str	r1, [r7, #0]
 800b336:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800b338:	79fb      	ldrb	r3, [r7, #7]
 800b33a:	2b00      	cmp	r3, #0
 800b33c:	d105      	bne.n	800b34a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800b33e:	683a      	ldr	r2, [r7, #0]
 800b340:	4907      	ldr	r1, [pc, #28]	; (800b360 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800b342:	4808      	ldr	r0, [pc, #32]	; (800b364 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800b344:	f7ff fdaa 	bl	800ae9c <USBD_GetString>
 800b348:	e004      	b.n	800b354 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800b34a:	683a      	ldr	r2, [r7, #0]
 800b34c:	4904      	ldr	r1, [pc, #16]	; (800b360 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800b34e:	4805      	ldr	r0, [pc, #20]	; (800b364 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800b350:	f7ff fda4 	bl	800ae9c <USBD_GetString>
  }
  return USBD_StrDesc;
 800b354:	4b02      	ldr	r3, [pc, #8]	; (800b360 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800b356:	4618      	mov	r0, r3
 800b358:	3708      	adds	r7, #8
 800b35a:	46bd      	mov	sp, r7
 800b35c:	bd80      	pop	{r7, pc}
 800b35e:	bf00      	nop
 800b360:	20000f84 	.word	0x20000f84
 800b364:	0800c6b0 	.word	0x0800c6b0

0800b368 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800b368:	b580      	push	{r7, lr}
 800b36a:	b084      	sub	sp, #16
 800b36c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800b36e:	4b0f      	ldr	r3, [pc, #60]	; (800b3ac <Get_SerialNum+0x44>)
 800b370:	681b      	ldr	r3, [r3, #0]
 800b372:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800b374:	4b0e      	ldr	r3, [pc, #56]	; (800b3b0 <Get_SerialNum+0x48>)
 800b376:	681b      	ldr	r3, [r3, #0]
 800b378:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800b37a:	4b0e      	ldr	r3, [pc, #56]	; (800b3b4 <Get_SerialNum+0x4c>)
 800b37c:	681b      	ldr	r3, [r3, #0]
 800b37e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800b380:	68fa      	ldr	r2, [r7, #12]
 800b382:	687b      	ldr	r3, [r7, #4]
 800b384:	4413      	add	r3, r2
 800b386:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800b388:	68fb      	ldr	r3, [r7, #12]
 800b38a:	2b00      	cmp	r3, #0
 800b38c:	d009      	beq.n	800b3a2 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800b38e:	2208      	movs	r2, #8
 800b390:	4909      	ldr	r1, [pc, #36]	; (800b3b8 <Get_SerialNum+0x50>)
 800b392:	68f8      	ldr	r0, [r7, #12]
 800b394:	f000 f814 	bl	800b3c0 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800b398:	2204      	movs	r2, #4
 800b39a:	4908      	ldr	r1, [pc, #32]	; (800b3bc <Get_SerialNum+0x54>)
 800b39c:	68b8      	ldr	r0, [r7, #8]
 800b39e:	f000 f80f 	bl	800b3c0 <IntToUnicode>
  }
}
 800b3a2:	bf00      	nop
 800b3a4:	3710      	adds	r7, #16
 800b3a6:	46bd      	mov	sp, r7
 800b3a8:	bd80      	pop	{r7, pc}
 800b3aa:	bf00      	nop
 800b3ac:	1ffff7ac 	.word	0x1ffff7ac
 800b3b0:	1ffff7b0 	.word	0x1ffff7b0
 800b3b4:	1ffff7b4 	.word	0x1ffff7b4
 800b3b8:	2000016e 	.word	0x2000016e
 800b3bc:	2000017e 	.word	0x2000017e

0800b3c0 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800b3c0:	b480      	push	{r7}
 800b3c2:	b087      	sub	sp, #28
 800b3c4:	af00      	add	r7, sp, #0
 800b3c6:	60f8      	str	r0, [r7, #12]
 800b3c8:	60b9      	str	r1, [r7, #8]
 800b3ca:	4613      	mov	r3, r2
 800b3cc:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800b3ce:	2300      	movs	r3, #0
 800b3d0:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800b3d2:	2300      	movs	r3, #0
 800b3d4:	75fb      	strb	r3, [r7, #23]
 800b3d6:	e027      	b.n	800b428 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800b3d8:	68fb      	ldr	r3, [r7, #12]
 800b3da:	0f1b      	lsrs	r3, r3, #28
 800b3dc:	2b09      	cmp	r3, #9
 800b3de:	d80b      	bhi.n	800b3f8 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800b3e0:	68fb      	ldr	r3, [r7, #12]
 800b3e2:	0f1b      	lsrs	r3, r3, #28
 800b3e4:	b2da      	uxtb	r2, r3
 800b3e6:	7dfb      	ldrb	r3, [r7, #23]
 800b3e8:	005b      	lsls	r3, r3, #1
 800b3ea:	4619      	mov	r1, r3
 800b3ec:	68bb      	ldr	r3, [r7, #8]
 800b3ee:	440b      	add	r3, r1
 800b3f0:	3230      	adds	r2, #48	; 0x30
 800b3f2:	b2d2      	uxtb	r2, r2
 800b3f4:	701a      	strb	r2, [r3, #0]
 800b3f6:	e00a      	b.n	800b40e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800b3f8:	68fb      	ldr	r3, [r7, #12]
 800b3fa:	0f1b      	lsrs	r3, r3, #28
 800b3fc:	b2da      	uxtb	r2, r3
 800b3fe:	7dfb      	ldrb	r3, [r7, #23]
 800b400:	005b      	lsls	r3, r3, #1
 800b402:	4619      	mov	r1, r3
 800b404:	68bb      	ldr	r3, [r7, #8]
 800b406:	440b      	add	r3, r1
 800b408:	3237      	adds	r2, #55	; 0x37
 800b40a:	b2d2      	uxtb	r2, r2
 800b40c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800b40e:	68fb      	ldr	r3, [r7, #12]
 800b410:	011b      	lsls	r3, r3, #4
 800b412:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800b414:	7dfb      	ldrb	r3, [r7, #23]
 800b416:	005b      	lsls	r3, r3, #1
 800b418:	3301      	adds	r3, #1
 800b41a:	68ba      	ldr	r2, [r7, #8]
 800b41c:	4413      	add	r3, r2
 800b41e:	2200      	movs	r2, #0
 800b420:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800b422:	7dfb      	ldrb	r3, [r7, #23]
 800b424:	3301      	adds	r3, #1
 800b426:	75fb      	strb	r3, [r7, #23]
 800b428:	7dfa      	ldrb	r2, [r7, #23]
 800b42a:	79fb      	ldrb	r3, [r7, #7]
 800b42c:	429a      	cmp	r2, r3
 800b42e:	d3d3      	bcc.n	800b3d8 <IntToUnicode+0x18>
  }
}
 800b430:	bf00      	nop
 800b432:	371c      	adds	r7, #28
 800b434:	46bd      	mov	sp, r7
 800b436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b43a:	4770      	bx	lr

0800b43c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800b43c:	b580      	push	{r7, lr}
 800b43e:	b08a      	sub	sp, #40	; 0x28
 800b440:	af00      	add	r7, sp, #0
 800b442:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b444:	f107 0314 	add.w	r3, r7, #20
 800b448:	2200      	movs	r2, #0
 800b44a:	601a      	str	r2, [r3, #0]
 800b44c:	605a      	str	r2, [r3, #4]
 800b44e:	609a      	str	r2, [r3, #8]
 800b450:	60da      	str	r2, [r3, #12]
 800b452:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB)
 800b454:	687b      	ldr	r3, [r7, #4]
 800b456:	681b      	ldr	r3, [r3, #0]
 800b458:	4a1c      	ldr	r2, [pc, #112]	; (800b4cc <HAL_PCD_MspInit+0x90>)
 800b45a:	4293      	cmp	r3, r2
 800b45c:	d131      	bne.n	800b4c2 <HAL_PCD_MspInit+0x86>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800b45e:	4b1c      	ldr	r3, [pc, #112]	; (800b4d0 <HAL_PCD_MspInit+0x94>)
 800b460:	695b      	ldr	r3, [r3, #20]
 800b462:	4a1b      	ldr	r2, [pc, #108]	; (800b4d0 <HAL_PCD_MspInit+0x94>)
 800b464:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b468:	6153      	str	r3, [r2, #20]
 800b46a:	4b19      	ldr	r3, [pc, #100]	; (800b4d0 <HAL_PCD_MspInit+0x94>)
 800b46c:	695b      	ldr	r3, [r3, #20]
 800b46e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b472:	613b      	str	r3, [r7, #16]
 800b474:	693b      	ldr	r3, [r7, #16]
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = DM_Pin|DP_Pin;
 800b476:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800b47a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b47c:	2302      	movs	r3, #2
 800b47e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b480:	2300      	movs	r3, #0
 800b482:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800b484:	2303      	movs	r3, #3
 800b486:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF14_USB;
 800b488:	230e      	movs	r3, #14
 800b48a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b48c:	f107 0314 	add.w	r3, r7, #20
 800b490:	4619      	mov	r1, r3
 800b492:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800b496:	f7f7 fe45 	bl	8003124 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800b49a:	4b0d      	ldr	r3, [pc, #52]	; (800b4d0 <HAL_PCD_MspInit+0x94>)
 800b49c:	69db      	ldr	r3, [r3, #28]
 800b49e:	4a0c      	ldr	r2, [pc, #48]	; (800b4d0 <HAL_PCD_MspInit+0x94>)
 800b4a0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800b4a4:	61d3      	str	r3, [r2, #28]
 800b4a6:	4b0a      	ldr	r3, [pc, #40]	; (800b4d0 <HAL_PCD_MspInit+0x94>)
 800b4a8:	69db      	ldr	r3, [r3, #28]
 800b4aa:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b4ae:	60fb      	str	r3, [r7, #12]
 800b4b0:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN_RX0_IRQn, 0, 0);
 800b4b2:	2200      	movs	r2, #0
 800b4b4:	2100      	movs	r1, #0
 800b4b6:	2014      	movs	r0, #20
 800b4b8:	f7f7 fdfd 	bl	80030b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN_RX0_IRQn);
 800b4bc:	2014      	movs	r0, #20
 800b4be:	f7f7 fe16 	bl	80030ee <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800b4c2:	bf00      	nop
 800b4c4:	3728      	adds	r7, #40	; 0x28
 800b4c6:	46bd      	mov	sp, r7
 800b4c8:	bd80      	pop	{r7, pc}
 800b4ca:	bf00      	nop
 800b4cc:	40005c00 	.word	0x40005c00
 800b4d0:	40021000 	.word	0x40021000

0800b4d4 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b4d4:	b580      	push	{r7, lr}
 800b4d6:	b082      	sub	sp, #8
 800b4d8:	af00      	add	r7, sp, #0
 800b4da:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800b4dc:	687b      	ldr	r3, [r7, #4]
 800b4de:	f8d3 22e8 	ldr.w	r2, [r3, #744]	; 0x2e8
 800b4e2:	687b      	ldr	r3, [r7, #4]
 800b4e4:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 800b4e8:	4619      	mov	r1, r3
 800b4ea:	4610      	mov	r0, r2
 800b4ec:	f7fe fdae 	bl	800a04c <USBD_LL_SetupStage>
}
 800b4f0:	bf00      	nop
 800b4f2:	3708      	adds	r7, #8
 800b4f4:	46bd      	mov	sp, r7
 800b4f6:	bd80      	pop	{r7, pc}

0800b4f8 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b4f8:	b580      	push	{r7, lr}
 800b4fa:	b082      	sub	sp, #8
 800b4fc:	af00      	add	r7, sp, #0
 800b4fe:	6078      	str	r0, [r7, #4]
 800b500:	460b      	mov	r3, r1
 800b502:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800b504:	687b      	ldr	r3, [r7, #4]
 800b506:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 800b50a:	78fa      	ldrb	r2, [r7, #3]
 800b50c:	6879      	ldr	r1, [r7, #4]
 800b50e:	4613      	mov	r3, r2
 800b510:	009b      	lsls	r3, r3, #2
 800b512:	4413      	add	r3, r2
 800b514:	00db      	lsls	r3, r3, #3
 800b516:	440b      	add	r3, r1
 800b518:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800b51c:	681a      	ldr	r2, [r3, #0]
 800b51e:	78fb      	ldrb	r3, [r7, #3]
 800b520:	4619      	mov	r1, r3
 800b522:	f7fe fdde 	bl	800a0e2 <USBD_LL_DataOutStage>
}
 800b526:	bf00      	nop
 800b528:	3708      	adds	r7, #8
 800b52a:	46bd      	mov	sp, r7
 800b52c:	bd80      	pop	{r7, pc}

0800b52e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b52e:	b580      	push	{r7, lr}
 800b530:	b082      	sub	sp, #8
 800b532:	af00      	add	r7, sp, #0
 800b534:	6078      	str	r0, [r7, #4]
 800b536:	460b      	mov	r3, r1
 800b538:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800b53a:	687b      	ldr	r3, [r7, #4]
 800b53c:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 800b540:	78fa      	ldrb	r2, [r7, #3]
 800b542:	6879      	ldr	r1, [r7, #4]
 800b544:	4613      	mov	r3, r2
 800b546:	009b      	lsls	r3, r3, #2
 800b548:	4413      	add	r3, r2
 800b54a:	00db      	lsls	r3, r3, #3
 800b54c:	440b      	add	r3, r1
 800b54e:	333c      	adds	r3, #60	; 0x3c
 800b550:	681a      	ldr	r2, [r3, #0]
 800b552:	78fb      	ldrb	r3, [r7, #3]
 800b554:	4619      	mov	r1, r3
 800b556:	f7fe fe35 	bl	800a1c4 <USBD_LL_DataInStage>
}
 800b55a:	bf00      	nop
 800b55c:	3708      	adds	r7, #8
 800b55e:	46bd      	mov	sp, r7
 800b560:	bd80      	pop	{r7, pc}

0800b562 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b562:	b580      	push	{r7, lr}
 800b564:	b082      	sub	sp, #8
 800b566:	af00      	add	r7, sp, #0
 800b568:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800b56a:	687b      	ldr	r3, [r7, #4]
 800b56c:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800b570:	4618      	mov	r0, r3
 800b572:	f7fe ff48 	bl	800a406 <USBD_LL_SOF>
}
 800b576:	bf00      	nop
 800b578:	3708      	adds	r7, #8
 800b57a:	46bd      	mov	sp, r7
 800b57c:	bd80      	pop	{r7, pc}

0800b57e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b57e:	b580      	push	{r7, lr}
 800b580:	b084      	sub	sp, #16
 800b582:	af00      	add	r7, sp, #0
 800b584:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800b586:	2301      	movs	r3, #1
 800b588:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800b58a:	687b      	ldr	r3, [r7, #4]
 800b58c:	689b      	ldr	r3, [r3, #8]
 800b58e:	2b02      	cmp	r3, #2
 800b590:	d001      	beq.n	800b596 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800b592:	f7f7 fb07 	bl	8002ba4 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800b596:	687b      	ldr	r3, [r7, #4]
 800b598:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800b59c:	7bfa      	ldrb	r2, [r7, #15]
 800b59e:	4611      	mov	r1, r2
 800b5a0:	4618      	mov	r0, r3
 800b5a2:	f7fe fef5 	bl	800a390 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800b5a6:	687b      	ldr	r3, [r7, #4]
 800b5a8:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800b5ac:	4618      	mov	r0, r3
 800b5ae:	f7fe feae 	bl	800a30e <USBD_LL_Reset>
}
 800b5b2:	bf00      	nop
 800b5b4:	3710      	adds	r7, #16
 800b5b6:	46bd      	mov	sp, r7
 800b5b8:	bd80      	pop	{r7, pc}
	...

0800b5bc <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b5bc:	b580      	push	{r7, lr}
 800b5be:	b082      	sub	sp, #8
 800b5c0:	af00      	add	r7, sp, #0
 800b5c2:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800b5c4:	687b      	ldr	r3, [r7, #4]
 800b5c6:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800b5ca:	4618      	mov	r0, r3
 800b5cc:	f7fe fef0 	bl	800a3b0 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800b5d0:	687b      	ldr	r3, [r7, #4]
 800b5d2:	699b      	ldr	r3, [r3, #24]
 800b5d4:	2b00      	cmp	r3, #0
 800b5d6:	d005      	beq.n	800b5e4 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800b5d8:	4b04      	ldr	r3, [pc, #16]	; (800b5ec <HAL_PCD_SuspendCallback+0x30>)
 800b5da:	691b      	ldr	r3, [r3, #16]
 800b5dc:	4a03      	ldr	r2, [pc, #12]	; (800b5ec <HAL_PCD_SuspendCallback+0x30>)
 800b5de:	f043 0306 	orr.w	r3, r3, #6
 800b5e2:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800b5e4:	bf00      	nop
 800b5e6:	3708      	adds	r7, #8
 800b5e8:	46bd      	mov	sp, r7
 800b5ea:	bd80      	pop	{r7, pc}
 800b5ec:	e000ed00 	.word	0xe000ed00

0800b5f0 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b5f0:	b580      	push	{r7, lr}
 800b5f2:	b082      	sub	sp, #8
 800b5f4:	af00      	add	r7, sp, #0
 800b5f6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800b5f8:	687b      	ldr	r3, [r7, #4]
 800b5fa:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800b5fe:	4618      	mov	r0, r3
 800b600:	f7fe feeb 	bl	800a3da <USBD_LL_Resume>
}
 800b604:	bf00      	nop
 800b606:	3708      	adds	r7, #8
 800b608:	46bd      	mov	sp, r7
 800b60a:	bd80      	pop	{r7, pc}

0800b60c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800b60c:	b580      	push	{r7, lr}
 800b60e:	b082      	sub	sp, #8
 800b610:	af00      	add	r7, sp, #0
 800b612:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800b614:	4a28      	ldr	r2, [pc, #160]	; (800b6b8 <USBD_LL_Init+0xac>)
 800b616:	687b      	ldr	r3, [r7, #4]
 800b618:	f8c2 32e8 	str.w	r3, [r2, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 800b61c:	687b      	ldr	r3, [r7, #4]
 800b61e:	4a26      	ldr	r2, [pc, #152]	; (800b6b8 <USBD_LL_Init+0xac>)
 800b620:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 800b624:	4b24      	ldr	r3, [pc, #144]	; (800b6b8 <USBD_LL_Init+0xac>)
 800b626:	4a25      	ldr	r2, [pc, #148]	; (800b6bc <USBD_LL_Init+0xb0>)
 800b628:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800b62a:	4b23      	ldr	r3, [pc, #140]	; (800b6b8 <USBD_LL_Init+0xac>)
 800b62c:	2208      	movs	r2, #8
 800b62e:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800b630:	4b21      	ldr	r3, [pc, #132]	; (800b6b8 <USBD_LL_Init+0xac>)
 800b632:	2202      	movs	r2, #2
 800b634:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800b636:	4b20      	ldr	r3, [pc, #128]	; (800b6b8 <USBD_LL_Init+0xac>)
 800b638:	2202      	movs	r2, #2
 800b63a:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800b63c:	4b1e      	ldr	r3, [pc, #120]	; (800b6b8 <USBD_LL_Init+0xac>)
 800b63e:	2200      	movs	r2, #0
 800b640:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800b642:	4b1d      	ldr	r3, [pc, #116]	; (800b6b8 <USBD_LL_Init+0xac>)
 800b644:	2200      	movs	r2, #0
 800b646:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800b648:	481b      	ldr	r0, [pc, #108]	; (800b6b8 <USBD_LL_Init+0xac>)
 800b64a:	f7f8 fc6e 	bl	8003f2a <HAL_PCD_Init>
 800b64e:	4603      	mov	r3, r0
 800b650:	2b00      	cmp	r3, #0
 800b652:	d001      	beq.n	800b658 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 800b654:	f7f7 faa6 	bl	8002ba4 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800b658:	687b      	ldr	r3, [r7, #4]
 800b65a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800b65e:	2318      	movs	r3, #24
 800b660:	2200      	movs	r2, #0
 800b662:	2100      	movs	r1, #0
 800b664:	f7f9 ff0a 	bl	800547c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800b668:	687b      	ldr	r3, [r7, #4]
 800b66a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800b66e:	2358      	movs	r3, #88	; 0x58
 800b670:	2200      	movs	r2, #0
 800b672:	2180      	movs	r1, #128	; 0x80
 800b674:	f7f9 ff02 	bl	800547c <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800b678:	687b      	ldr	r3, [r7, #4]
 800b67a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800b67e:	23c0      	movs	r3, #192	; 0xc0
 800b680:	2200      	movs	r2, #0
 800b682:	2181      	movs	r1, #129	; 0x81
 800b684:	f7f9 fefa 	bl	800547c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800b688:	687b      	ldr	r3, [r7, #4]
 800b68a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800b68e:	f44f 7388 	mov.w	r3, #272	; 0x110
 800b692:	2200      	movs	r2, #0
 800b694:	2101      	movs	r1, #1
 800b696:	f7f9 fef1 	bl	800547c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800b69a:	687b      	ldr	r3, [r7, #4]
 800b69c:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800b6a0:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b6a4:	2200      	movs	r2, #0
 800b6a6:	2182      	movs	r1, #130	; 0x82
 800b6a8:	f7f9 fee8 	bl	800547c <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800b6ac:	2300      	movs	r3, #0
}
 800b6ae:	4618      	mov	r0, r3
 800b6b0:	3708      	adds	r7, #8
 800b6b2:	46bd      	mov	sp, r7
 800b6b4:	bd80      	pop	{r7, pc}
 800b6b6:	bf00      	nop
 800b6b8:	20001184 	.word	0x20001184
 800b6bc:	40005c00 	.word	0x40005c00

0800b6c0 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800b6c0:	b580      	push	{r7, lr}
 800b6c2:	b084      	sub	sp, #16
 800b6c4:	af00      	add	r7, sp, #0
 800b6c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b6c8:	2300      	movs	r3, #0
 800b6ca:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b6cc:	2300      	movs	r3, #0
 800b6ce:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800b6d0:	687b      	ldr	r3, [r7, #4]
 800b6d2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b6d6:	4618      	mov	r0, r3
 800b6d8:	f7f8 fd05 	bl	80040e6 <HAL_PCD_Start>
 800b6dc:	4603      	mov	r3, r0
 800b6de:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b6e0:	7bfb      	ldrb	r3, [r7, #15]
 800b6e2:	4618      	mov	r0, r3
 800b6e4:	f000 f954 	bl	800b990 <USBD_Get_USB_Status>
 800b6e8:	4603      	mov	r3, r0
 800b6ea:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b6ec:	7bbb      	ldrb	r3, [r7, #14]
}
 800b6ee:	4618      	mov	r0, r3
 800b6f0:	3710      	adds	r7, #16
 800b6f2:	46bd      	mov	sp, r7
 800b6f4:	bd80      	pop	{r7, pc}

0800b6f6 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800b6f6:	b580      	push	{r7, lr}
 800b6f8:	b084      	sub	sp, #16
 800b6fa:	af00      	add	r7, sp, #0
 800b6fc:	6078      	str	r0, [r7, #4]
 800b6fe:	4608      	mov	r0, r1
 800b700:	4611      	mov	r1, r2
 800b702:	461a      	mov	r2, r3
 800b704:	4603      	mov	r3, r0
 800b706:	70fb      	strb	r3, [r7, #3]
 800b708:	460b      	mov	r3, r1
 800b70a:	70bb      	strb	r3, [r7, #2]
 800b70c:	4613      	mov	r3, r2
 800b70e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b710:	2300      	movs	r3, #0
 800b712:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b714:	2300      	movs	r3, #0
 800b716:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800b718:	687b      	ldr	r3, [r7, #4]
 800b71a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800b71e:	78bb      	ldrb	r3, [r7, #2]
 800b720:	883a      	ldrh	r2, [r7, #0]
 800b722:	78f9      	ldrb	r1, [r7, #3]
 800b724:	f7f8 fe21 	bl	800436a <HAL_PCD_EP_Open>
 800b728:	4603      	mov	r3, r0
 800b72a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b72c:	7bfb      	ldrb	r3, [r7, #15]
 800b72e:	4618      	mov	r0, r3
 800b730:	f000 f92e 	bl	800b990 <USBD_Get_USB_Status>
 800b734:	4603      	mov	r3, r0
 800b736:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b738:	7bbb      	ldrb	r3, [r7, #14]
}
 800b73a:	4618      	mov	r0, r3
 800b73c:	3710      	adds	r7, #16
 800b73e:	46bd      	mov	sp, r7
 800b740:	bd80      	pop	{r7, pc}

0800b742 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b742:	b580      	push	{r7, lr}
 800b744:	b084      	sub	sp, #16
 800b746:	af00      	add	r7, sp, #0
 800b748:	6078      	str	r0, [r7, #4]
 800b74a:	460b      	mov	r3, r1
 800b74c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b74e:	2300      	movs	r3, #0
 800b750:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b752:	2300      	movs	r3, #0
 800b754:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800b756:	687b      	ldr	r3, [r7, #4]
 800b758:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b75c:	78fa      	ldrb	r2, [r7, #3]
 800b75e:	4611      	mov	r1, r2
 800b760:	4618      	mov	r0, r3
 800b762:	f7f8 fe68 	bl	8004436 <HAL_PCD_EP_Close>
 800b766:	4603      	mov	r3, r0
 800b768:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b76a:	7bfb      	ldrb	r3, [r7, #15]
 800b76c:	4618      	mov	r0, r3
 800b76e:	f000 f90f 	bl	800b990 <USBD_Get_USB_Status>
 800b772:	4603      	mov	r3, r0
 800b774:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b776:	7bbb      	ldrb	r3, [r7, #14]
}
 800b778:	4618      	mov	r0, r3
 800b77a:	3710      	adds	r7, #16
 800b77c:	46bd      	mov	sp, r7
 800b77e:	bd80      	pop	{r7, pc}

0800b780 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b780:	b580      	push	{r7, lr}
 800b782:	b084      	sub	sp, #16
 800b784:	af00      	add	r7, sp, #0
 800b786:	6078      	str	r0, [r7, #4]
 800b788:	460b      	mov	r3, r1
 800b78a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b78c:	2300      	movs	r3, #0
 800b78e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b790:	2300      	movs	r3, #0
 800b792:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800b794:	687b      	ldr	r3, [r7, #4]
 800b796:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b79a:	78fa      	ldrb	r2, [r7, #3]
 800b79c:	4611      	mov	r1, r2
 800b79e:	4618      	mov	r0, r3
 800b7a0:	f7f8 ff29 	bl	80045f6 <HAL_PCD_EP_SetStall>
 800b7a4:	4603      	mov	r3, r0
 800b7a6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b7a8:	7bfb      	ldrb	r3, [r7, #15]
 800b7aa:	4618      	mov	r0, r3
 800b7ac:	f000 f8f0 	bl	800b990 <USBD_Get_USB_Status>
 800b7b0:	4603      	mov	r3, r0
 800b7b2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b7b4:	7bbb      	ldrb	r3, [r7, #14]
}
 800b7b6:	4618      	mov	r0, r3
 800b7b8:	3710      	adds	r7, #16
 800b7ba:	46bd      	mov	sp, r7
 800b7bc:	bd80      	pop	{r7, pc}

0800b7be <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b7be:	b580      	push	{r7, lr}
 800b7c0:	b084      	sub	sp, #16
 800b7c2:	af00      	add	r7, sp, #0
 800b7c4:	6078      	str	r0, [r7, #4]
 800b7c6:	460b      	mov	r3, r1
 800b7c8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b7ca:	2300      	movs	r3, #0
 800b7cc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b7ce:	2300      	movs	r3, #0
 800b7d0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800b7d2:	687b      	ldr	r3, [r7, #4]
 800b7d4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b7d8:	78fa      	ldrb	r2, [r7, #3]
 800b7da:	4611      	mov	r1, r2
 800b7dc:	4618      	mov	r0, r3
 800b7de:	f7f8 ff5c 	bl	800469a <HAL_PCD_EP_ClrStall>
 800b7e2:	4603      	mov	r3, r0
 800b7e4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b7e6:	7bfb      	ldrb	r3, [r7, #15]
 800b7e8:	4618      	mov	r0, r3
 800b7ea:	f000 f8d1 	bl	800b990 <USBD_Get_USB_Status>
 800b7ee:	4603      	mov	r3, r0
 800b7f0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b7f2:	7bbb      	ldrb	r3, [r7, #14]
}
 800b7f4:	4618      	mov	r0, r3
 800b7f6:	3710      	adds	r7, #16
 800b7f8:	46bd      	mov	sp, r7
 800b7fa:	bd80      	pop	{r7, pc}

0800b7fc <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b7fc:	b480      	push	{r7}
 800b7fe:	b085      	sub	sp, #20
 800b800:	af00      	add	r7, sp, #0
 800b802:	6078      	str	r0, [r7, #4]
 800b804:	460b      	mov	r3, r1
 800b806:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800b808:	687b      	ldr	r3, [r7, #4]
 800b80a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b80e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800b810:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800b814:	2b00      	cmp	r3, #0
 800b816:	da0c      	bge.n	800b832 <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800b818:	78fb      	ldrb	r3, [r7, #3]
 800b81a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b81e:	68f9      	ldr	r1, [r7, #12]
 800b820:	1c5a      	adds	r2, r3, #1
 800b822:	4613      	mov	r3, r2
 800b824:	009b      	lsls	r3, r3, #2
 800b826:	4413      	add	r3, r2
 800b828:	00db      	lsls	r3, r3, #3
 800b82a:	440b      	add	r3, r1
 800b82c:	3302      	adds	r3, #2
 800b82e:	781b      	ldrb	r3, [r3, #0]
 800b830:	e00b      	b.n	800b84a <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800b832:	78fb      	ldrb	r3, [r7, #3]
 800b834:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b838:	68f9      	ldr	r1, [r7, #12]
 800b83a:	4613      	mov	r3, r2
 800b83c:	009b      	lsls	r3, r3, #2
 800b83e:	4413      	add	r3, r2
 800b840:	00db      	lsls	r3, r3, #3
 800b842:	440b      	add	r3, r1
 800b844:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 800b848:	781b      	ldrb	r3, [r3, #0]
  }
}
 800b84a:	4618      	mov	r0, r3
 800b84c:	3714      	adds	r7, #20
 800b84e:	46bd      	mov	sp, r7
 800b850:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b854:	4770      	bx	lr

0800b856 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800b856:	b580      	push	{r7, lr}
 800b858:	b084      	sub	sp, #16
 800b85a:	af00      	add	r7, sp, #0
 800b85c:	6078      	str	r0, [r7, #4]
 800b85e:	460b      	mov	r3, r1
 800b860:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b862:	2300      	movs	r3, #0
 800b864:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b866:	2300      	movs	r3, #0
 800b868:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800b86a:	687b      	ldr	r3, [r7, #4]
 800b86c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b870:	78fa      	ldrb	r2, [r7, #3]
 800b872:	4611      	mov	r1, r2
 800b874:	4618      	mov	r0, r3
 800b876:	f7f8 fd53 	bl	8004320 <HAL_PCD_SetAddress>
 800b87a:	4603      	mov	r3, r0
 800b87c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b87e:	7bfb      	ldrb	r3, [r7, #15]
 800b880:	4618      	mov	r0, r3
 800b882:	f000 f885 	bl	800b990 <USBD_Get_USB_Status>
 800b886:	4603      	mov	r3, r0
 800b888:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b88a:	7bbb      	ldrb	r3, [r7, #14]
}
 800b88c:	4618      	mov	r0, r3
 800b88e:	3710      	adds	r7, #16
 800b890:	46bd      	mov	sp, r7
 800b892:	bd80      	pop	{r7, pc}

0800b894 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800b894:	b580      	push	{r7, lr}
 800b896:	b086      	sub	sp, #24
 800b898:	af00      	add	r7, sp, #0
 800b89a:	60f8      	str	r0, [r7, #12]
 800b89c:	607a      	str	r2, [r7, #4]
 800b89e:	461a      	mov	r2, r3
 800b8a0:	460b      	mov	r3, r1
 800b8a2:	72fb      	strb	r3, [r7, #11]
 800b8a4:	4613      	mov	r3, r2
 800b8a6:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b8a8:	2300      	movs	r3, #0
 800b8aa:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b8ac:	2300      	movs	r3, #0
 800b8ae:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800b8b0:	68fb      	ldr	r3, [r7, #12]
 800b8b2:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800b8b6:	893b      	ldrh	r3, [r7, #8]
 800b8b8:	7af9      	ldrb	r1, [r7, #11]
 800b8ba:	687a      	ldr	r2, [r7, #4]
 800b8bc:	f7f8 fe58 	bl	8004570 <HAL_PCD_EP_Transmit>
 800b8c0:	4603      	mov	r3, r0
 800b8c2:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b8c4:	7dfb      	ldrb	r3, [r7, #23]
 800b8c6:	4618      	mov	r0, r3
 800b8c8:	f000 f862 	bl	800b990 <USBD_Get_USB_Status>
 800b8cc:	4603      	mov	r3, r0
 800b8ce:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800b8d0:	7dbb      	ldrb	r3, [r7, #22]
}
 800b8d2:	4618      	mov	r0, r3
 800b8d4:	3718      	adds	r7, #24
 800b8d6:	46bd      	mov	sp, r7
 800b8d8:	bd80      	pop	{r7, pc}

0800b8da <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800b8da:	b580      	push	{r7, lr}
 800b8dc:	b086      	sub	sp, #24
 800b8de:	af00      	add	r7, sp, #0
 800b8e0:	60f8      	str	r0, [r7, #12]
 800b8e2:	607a      	str	r2, [r7, #4]
 800b8e4:	461a      	mov	r2, r3
 800b8e6:	460b      	mov	r3, r1
 800b8e8:	72fb      	strb	r3, [r7, #11]
 800b8ea:	4613      	mov	r3, r2
 800b8ec:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b8ee:	2300      	movs	r3, #0
 800b8f0:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b8f2:	2300      	movs	r3, #0
 800b8f4:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800b8f6:	68fb      	ldr	r3, [r7, #12]
 800b8f8:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800b8fc:	893b      	ldrh	r3, [r7, #8]
 800b8fe:	7af9      	ldrb	r1, [r7, #11]
 800b900:	687a      	ldr	r2, [r7, #4]
 800b902:	f7f8 fde0 	bl	80044c6 <HAL_PCD_EP_Receive>
 800b906:	4603      	mov	r3, r0
 800b908:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b90a:	7dfb      	ldrb	r3, [r7, #23]
 800b90c:	4618      	mov	r0, r3
 800b90e:	f000 f83f 	bl	800b990 <USBD_Get_USB_Status>
 800b912:	4603      	mov	r3, r0
 800b914:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800b916:	7dbb      	ldrb	r3, [r7, #22]
}
 800b918:	4618      	mov	r0, r3
 800b91a:	3718      	adds	r7, #24
 800b91c:	46bd      	mov	sp, r7
 800b91e:	bd80      	pop	{r7, pc}

0800b920 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b920:	b580      	push	{r7, lr}
 800b922:	b082      	sub	sp, #8
 800b924:	af00      	add	r7, sp, #0
 800b926:	6078      	str	r0, [r7, #4]
 800b928:	460b      	mov	r3, r1
 800b92a:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800b92c:	687b      	ldr	r3, [r7, #4]
 800b92e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b932:	78fa      	ldrb	r2, [r7, #3]
 800b934:	4611      	mov	r1, r2
 800b936:	4618      	mov	r0, r3
 800b938:	f7f8 fe02 	bl	8004540 <HAL_PCD_EP_GetRxCount>
 800b93c:	4603      	mov	r3, r0
}
 800b93e:	4618      	mov	r0, r3
 800b940:	3708      	adds	r7, #8
 800b942:	46bd      	mov	sp, r7
 800b944:	bd80      	pop	{r7, pc}
	...

0800b948 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800b948:	b480      	push	{r7}
 800b94a:	b083      	sub	sp, #12
 800b94c:	af00      	add	r7, sp, #0
 800b94e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800b950:	4b03      	ldr	r3, [pc, #12]	; (800b960 <USBD_static_malloc+0x18>)
}
 800b952:	4618      	mov	r0, r3
 800b954:	370c      	adds	r7, #12
 800b956:	46bd      	mov	sp, r7
 800b958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b95c:	4770      	bx	lr
 800b95e:	bf00      	nop
 800b960:	2000021c 	.word	0x2000021c

0800b964 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800b964:	b480      	push	{r7}
 800b966:	b083      	sub	sp, #12
 800b968:	af00      	add	r7, sp, #0
 800b96a:	6078      	str	r0, [r7, #4]

}
 800b96c:	bf00      	nop
 800b96e:	370c      	adds	r7, #12
 800b970:	46bd      	mov	sp, r7
 800b972:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b976:	4770      	bx	lr

0800b978 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b978:	b480      	push	{r7}
 800b97a:	b083      	sub	sp, #12
 800b97c:	af00      	add	r7, sp, #0
 800b97e:	6078      	str	r0, [r7, #4]
 800b980:	460b      	mov	r3, r1
 800b982:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 800b984:	bf00      	nop
 800b986:	370c      	adds	r7, #12
 800b988:	46bd      	mov	sp, r7
 800b98a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b98e:	4770      	bx	lr

0800b990 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800b990:	b480      	push	{r7}
 800b992:	b085      	sub	sp, #20
 800b994:	af00      	add	r7, sp, #0
 800b996:	4603      	mov	r3, r0
 800b998:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b99a:	2300      	movs	r3, #0
 800b99c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800b99e:	79fb      	ldrb	r3, [r7, #7]
 800b9a0:	2b03      	cmp	r3, #3
 800b9a2:	d817      	bhi.n	800b9d4 <USBD_Get_USB_Status+0x44>
 800b9a4:	a201      	add	r2, pc, #4	; (adr r2, 800b9ac <USBD_Get_USB_Status+0x1c>)
 800b9a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b9aa:	bf00      	nop
 800b9ac:	0800b9bd 	.word	0x0800b9bd
 800b9b0:	0800b9c3 	.word	0x0800b9c3
 800b9b4:	0800b9c9 	.word	0x0800b9c9
 800b9b8:	0800b9cf 	.word	0x0800b9cf
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800b9bc:	2300      	movs	r3, #0
 800b9be:	73fb      	strb	r3, [r7, #15]
    break;
 800b9c0:	e00b      	b.n	800b9da <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800b9c2:	2302      	movs	r3, #2
 800b9c4:	73fb      	strb	r3, [r7, #15]
    break;
 800b9c6:	e008      	b.n	800b9da <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800b9c8:	2301      	movs	r3, #1
 800b9ca:	73fb      	strb	r3, [r7, #15]
    break;
 800b9cc:	e005      	b.n	800b9da <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800b9ce:	2302      	movs	r3, #2
 800b9d0:	73fb      	strb	r3, [r7, #15]
    break;
 800b9d2:	e002      	b.n	800b9da <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800b9d4:	2302      	movs	r3, #2
 800b9d6:	73fb      	strb	r3, [r7, #15]
    break;
 800b9d8:	bf00      	nop
  }
  return usb_status;
 800b9da:	7bfb      	ldrb	r3, [r7, #15]
}
 800b9dc:	4618      	mov	r0, r3
 800b9de:	3714      	adds	r7, #20
 800b9e0:	46bd      	mov	sp, r7
 800b9e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9e6:	4770      	bx	lr

0800b9e8 <__errno>:
 800b9e8:	4b01      	ldr	r3, [pc, #4]	; (800b9f0 <__errno+0x8>)
 800b9ea:	6818      	ldr	r0, [r3, #0]
 800b9ec:	4770      	bx	lr
 800b9ee:	bf00      	nop
 800b9f0:	20000188 	.word	0x20000188

0800b9f4 <__libc_init_array>:
 800b9f4:	b570      	push	{r4, r5, r6, lr}
 800b9f6:	4e0d      	ldr	r6, [pc, #52]	; (800ba2c <__libc_init_array+0x38>)
 800b9f8:	4c0d      	ldr	r4, [pc, #52]	; (800ba30 <__libc_init_array+0x3c>)
 800b9fa:	1ba4      	subs	r4, r4, r6
 800b9fc:	10a4      	asrs	r4, r4, #2
 800b9fe:	2500      	movs	r5, #0
 800ba00:	42a5      	cmp	r5, r4
 800ba02:	d109      	bne.n	800ba18 <__libc_init_array+0x24>
 800ba04:	4e0b      	ldr	r6, [pc, #44]	; (800ba34 <__libc_init_array+0x40>)
 800ba06:	4c0c      	ldr	r4, [pc, #48]	; (800ba38 <__libc_init_array+0x44>)
 800ba08:	f000 fe2a 	bl	800c660 <_init>
 800ba0c:	1ba4      	subs	r4, r4, r6
 800ba0e:	10a4      	asrs	r4, r4, #2
 800ba10:	2500      	movs	r5, #0
 800ba12:	42a5      	cmp	r5, r4
 800ba14:	d105      	bne.n	800ba22 <__libc_init_array+0x2e>
 800ba16:	bd70      	pop	{r4, r5, r6, pc}
 800ba18:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800ba1c:	4798      	blx	r3
 800ba1e:	3501      	adds	r5, #1
 800ba20:	e7ee      	b.n	800ba00 <__libc_init_array+0xc>
 800ba22:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800ba26:	4798      	blx	r3
 800ba28:	3501      	adds	r5, #1
 800ba2a:	e7f2      	b.n	800ba12 <__libc_init_array+0x1e>
 800ba2c:	0800c740 	.word	0x0800c740
 800ba30:	0800c740 	.word	0x0800c740
 800ba34:	0800c740 	.word	0x0800c740
 800ba38:	0800c744 	.word	0x0800c744

0800ba3c <memset>:
 800ba3c:	4402      	add	r2, r0
 800ba3e:	4603      	mov	r3, r0
 800ba40:	4293      	cmp	r3, r2
 800ba42:	d100      	bne.n	800ba46 <memset+0xa>
 800ba44:	4770      	bx	lr
 800ba46:	f803 1b01 	strb.w	r1, [r3], #1
 800ba4a:	e7f9      	b.n	800ba40 <memset+0x4>

0800ba4c <asin>:
 800ba4c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ba4e:	ed2d 8b02 	vpush	{d8}
 800ba52:	4e26      	ldr	r6, [pc, #152]	; (800baec <asin+0xa0>)
 800ba54:	b08b      	sub	sp, #44	; 0x2c
 800ba56:	ec55 4b10 	vmov	r4, r5, d0
 800ba5a:	f000 f8ad 	bl	800bbb8 <__ieee754_asin>
 800ba5e:	f996 3000 	ldrsb.w	r3, [r6]
 800ba62:	eeb0 8a40 	vmov.f32	s16, s0
 800ba66:	eef0 8a60 	vmov.f32	s17, s1
 800ba6a:	3301      	adds	r3, #1
 800ba6c:	d036      	beq.n	800badc <asin+0x90>
 800ba6e:	4622      	mov	r2, r4
 800ba70:	462b      	mov	r3, r5
 800ba72:	4620      	mov	r0, r4
 800ba74:	4629      	mov	r1, r5
 800ba76:	f7f4 fffd 	bl	8000a74 <__aeabi_dcmpun>
 800ba7a:	4607      	mov	r7, r0
 800ba7c:	bb70      	cbnz	r0, 800badc <asin+0x90>
 800ba7e:	ec45 4b10 	vmov	d0, r4, r5
 800ba82:	f000 fdd9 	bl	800c638 <fabs>
 800ba86:	2200      	movs	r2, #0
 800ba88:	4b19      	ldr	r3, [pc, #100]	; (800baf0 <asin+0xa4>)
 800ba8a:	ec51 0b10 	vmov	r0, r1, d0
 800ba8e:	f7f4 ffe7 	bl	8000a60 <__aeabi_dcmpgt>
 800ba92:	b318      	cbz	r0, 800badc <asin+0x90>
 800ba94:	2301      	movs	r3, #1
 800ba96:	9300      	str	r3, [sp, #0]
 800ba98:	4816      	ldr	r0, [pc, #88]	; (800baf4 <asin+0xa8>)
 800ba9a:	4b17      	ldr	r3, [pc, #92]	; (800baf8 <asin+0xac>)
 800ba9c:	9301      	str	r3, [sp, #4]
 800ba9e:	9708      	str	r7, [sp, #32]
 800baa0:	e9cd 4504 	strd	r4, r5, [sp, #16]
 800baa4:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800baa8:	f000 fdd2 	bl	800c650 <nan>
 800baac:	f996 3000 	ldrsb.w	r3, [r6]
 800bab0:	2b02      	cmp	r3, #2
 800bab2:	ed8d 0b06 	vstr	d0, [sp, #24]
 800bab6:	d104      	bne.n	800bac2 <asin+0x76>
 800bab8:	f7ff ff96 	bl	800b9e8 <__errno>
 800babc:	2321      	movs	r3, #33	; 0x21
 800babe:	6003      	str	r3, [r0, #0]
 800bac0:	e004      	b.n	800bacc <asin+0x80>
 800bac2:	4668      	mov	r0, sp
 800bac4:	f000 fdc1 	bl	800c64a <matherr>
 800bac8:	2800      	cmp	r0, #0
 800baca:	d0f5      	beq.n	800bab8 <asin+0x6c>
 800bacc:	9b08      	ldr	r3, [sp, #32]
 800bace:	b11b      	cbz	r3, 800bad8 <asin+0x8c>
 800bad0:	f7ff ff8a 	bl	800b9e8 <__errno>
 800bad4:	9b08      	ldr	r3, [sp, #32]
 800bad6:	6003      	str	r3, [r0, #0]
 800bad8:	ed9d 8b06 	vldr	d8, [sp, #24]
 800badc:	eeb0 0a48 	vmov.f32	s0, s16
 800bae0:	eef0 0a68 	vmov.f32	s1, s17
 800bae4:	b00b      	add	sp, #44	; 0x2c
 800bae6:	ecbd 8b02 	vpop	{d8}
 800baea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800baec:	200001ec 	.word	0x200001ec
 800baf0:	3ff00000 	.word	0x3ff00000
 800baf4:	0800c6f4 	.word	0x0800c6f4
 800baf8:	0800c6f0 	.word	0x0800c6f0

0800bafc <atan2>:
 800bafc:	f000 ba6c 	b.w	800bfd8 <__ieee754_atan2>

0800bb00 <sqrt>:
 800bb00:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800bb04:	ed2d 8b02 	vpush	{d8}
 800bb08:	b08b      	sub	sp, #44	; 0x2c
 800bb0a:	ec55 4b10 	vmov	r4, r5, d0
 800bb0e:	f000 fb41 	bl	800c194 <__ieee754_sqrt>
 800bb12:	4b26      	ldr	r3, [pc, #152]	; (800bbac <sqrt+0xac>)
 800bb14:	eeb0 8a40 	vmov.f32	s16, s0
 800bb18:	eef0 8a60 	vmov.f32	s17, s1
 800bb1c:	f993 6000 	ldrsb.w	r6, [r3]
 800bb20:	1c73      	adds	r3, r6, #1
 800bb22:	d02a      	beq.n	800bb7a <sqrt+0x7a>
 800bb24:	4622      	mov	r2, r4
 800bb26:	462b      	mov	r3, r5
 800bb28:	4620      	mov	r0, r4
 800bb2a:	4629      	mov	r1, r5
 800bb2c:	f7f4 ffa2 	bl	8000a74 <__aeabi_dcmpun>
 800bb30:	4607      	mov	r7, r0
 800bb32:	bb10      	cbnz	r0, 800bb7a <sqrt+0x7a>
 800bb34:	f04f 0800 	mov.w	r8, #0
 800bb38:	f04f 0900 	mov.w	r9, #0
 800bb3c:	4642      	mov	r2, r8
 800bb3e:	464b      	mov	r3, r9
 800bb40:	4620      	mov	r0, r4
 800bb42:	4629      	mov	r1, r5
 800bb44:	f7f4 ff6e 	bl	8000a24 <__aeabi_dcmplt>
 800bb48:	b1b8      	cbz	r0, 800bb7a <sqrt+0x7a>
 800bb4a:	2301      	movs	r3, #1
 800bb4c:	9300      	str	r3, [sp, #0]
 800bb4e:	4b18      	ldr	r3, [pc, #96]	; (800bbb0 <sqrt+0xb0>)
 800bb50:	9301      	str	r3, [sp, #4]
 800bb52:	9708      	str	r7, [sp, #32]
 800bb54:	e9cd 4504 	strd	r4, r5, [sp, #16]
 800bb58:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800bb5c:	b9b6      	cbnz	r6, 800bb8c <sqrt+0x8c>
 800bb5e:	e9cd 8906 	strd	r8, r9, [sp, #24]
 800bb62:	4668      	mov	r0, sp
 800bb64:	f000 fd71 	bl	800c64a <matherr>
 800bb68:	b1d0      	cbz	r0, 800bba0 <sqrt+0xa0>
 800bb6a:	9b08      	ldr	r3, [sp, #32]
 800bb6c:	b11b      	cbz	r3, 800bb76 <sqrt+0x76>
 800bb6e:	f7ff ff3b 	bl	800b9e8 <__errno>
 800bb72:	9b08      	ldr	r3, [sp, #32]
 800bb74:	6003      	str	r3, [r0, #0]
 800bb76:	ed9d 8b06 	vldr	d8, [sp, #24]
 800bb7a:	eeb0 0a48 	vmov.f32	s0, s16
 800bb7e:	eef0 0a68 	vmov.f32	s1, s17
 800bb82:	b00b      	add	sp, #44	; 0x2c
 800bb84:	ecbd 8b02 	vpop	{d8}
 800bb88:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800bb8c:	4642      	mov	r2, r8
 800bb8e:	464b      	mov	r3, r9
 800bb90:	4640      	mov	r0, r8
 800bb92:	4649      	mov	r1, r9
 800bb94:	f7f4 fdfe 	bl	8000794 <__aeabi_ddiv>
 800bb98:	2e02      	cmp	r6, #2
 800bb9a:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800bb9e:	d1e0      	bne.n	800bb62 <sqrt+0x62>
 800bba0:	f7ff ff22 	bl	800b9e8 <__errno>
 800bba4:	2321      	movs	r3, #33	; 0x21
 800bba6:	6003      	str	r3, [r0, #0]
 800bba8:	e7df      	b.n	800bb6a <sqrt+0x6a>
 800bbaa:	bf00      	nop
 800bbac:	200001ec 	.word	0x200001ec
 800bbb0:	0800c6f5 	.word	0x0800c6f5
 800bbb4:	00000000 	.word	0x00000000

0800bbb8 <__ieee754_asin>:
 800bbb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bbbc:	ec55 4b10 	vmov	r4, r5, d0
 800bbc0:	4bcb      	ldr	r3, [pc, #812]	; (800bef0 <__ieee754_asin+0x338>)
 800bbc2:	b087      	sub	sp, #28
 800bbc4:	f025 4700 	bic.w	r7, r5, #2147483648	; 0x80000000
 800bbc8:	429f      	cmp	r7, r3
 800bbca:	9501      	str	r5, [sp, #4]
 800bbcc:	dd31      	ble.n	800bc32 <__ieee754_asin+0x7a>
 800bbce:	f107 4740 	add.w	r7, r7, #3221225472	; 0xc0000000
 800bbd2:	ee10 3a10 	vmov	r3, s0
 800bbd6:	f507 1780 	add.w	r7, r7, #1048576	; 0x100000
 800bbda:	433b      	orrs	r3, r7
 800bbdc:	d117      	bne.n	800bc0e <__ieee754_asin+0x56>
 800bbde:	a3aa      	add	r3, pc, #680	; (adr r3, 800be88 <__ieee754_asin+0x2d0>)
 800bbe0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bbe4:	ee10 0a10 	vmov	r0, s0
 800bbe8:	4629      	mov	r1, r5
 800bbea:	f7f4 fca9 	bl	8000540 <__aeabi_dmul>
 800bbee:	a3a8      	add	r3, pc, #672	; (adr r3, 800be90 <__ieee754_asin+0x2d8>)
 800bbf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bbf4:	4606      	mov	r6, r0
 800bbf6:	460f      	mov	r7, r1
 800bbf8:	4620      	mov	r0, r4
 800bbfa:	4629      	mov	r1, r5
 800bbfc:	f7f4 fca0 	bl	8000540 <__aeabi_dmul>
 800bc00:	4602      	mov	r2, r0
 800bc02:	460b      	mov	r3, r1
 800bc04:	4630      	mov	r0, r6
 800bc06:	4639      	mov	r1, r7
 800bc08:	f7f4 fae4 	bl	80001d4 <__adddf3>
 800bc0c:	e00a      	b.n	800bc24 <__ieee754_asin+0x6c>
 800bc0e:	ee10 2a10 	vmov	r2, s0
 800bc12:	462b      	mov	r3, r5
 800bc14:	4620      	mov	r0, r4
 800bc16:	4629      	mov	r1, r5
 800bc18:	f7f4 fada 	bl	80001d0 <__aeabi_dsub>
 800bc1c:	4602      	mov	r2, r0
 800bc1e:	460b      	mov	r3, r1
 800bc20:	f7f4 fdb8 	bl	8000794 <__aeabi_ddiv>
 800bc24:	4604      	mov	r4, r0
 800bc26:	460d      	mov	r5, r1
 800bc28:	ec45 4b10 	vmov	d0, r4, r5
 800bc2c:	b007      	add	sp, #28
 800bc2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bc32:	4bb0      	ldr	r3, [pc, #704]	; (800bef4 <__ieee754_asin+0x33c>)
 800bc34:	429f      	cmp	r7, r3
 800bc36:	dc11      	bgt.n	800bc5c <__ieee754_asin+0xa4>
 800bc38:	f1b7 5f79 	cmp.w	r7, #1044381696	; 0x3e400000
 800bc3c:	f280 80ae 	bge.w	800bd9c <__ieee754_asin+0x1e4>
 800bc40:	a395      	add	r3, pc, #596	; (adr r3, 800be98 <__ieee754_asin+0x2e0>)
 800bc42:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc46:	ee10 0a10 	vmov	r0, s0
 800bc4a:	4629      	mov	r1, r5
 800bc4c:	f7f4 fac2 	bl	80001d4 <__adddf3>
 800bc50:	2200      	movs	r2, #0
 800bc52:	4ba9      	ldr	r3, [pc, #676]	; (800bef8 <__ieee754_asin+0x340>)
 800bc54:	f7f4 ff04 	bl	8000a60 <__aeabi_dcmpgt>
 800bc58:	2800      	cmp	r0, #0
 800bc5a:	d1e5      	bne.n	800bc28 <__ieee754_asin+0x70>
 800bc5c:	ec45 4b10 	vmov	d0, r4, r5
 800bc60:	f000 fcea 	bl	800c638 <fabs>
 800bc64:	2000      	movs	r0, #0
 800bc66:	ec53 2b10 	vmov	r2, r3, d0
 800bc6a:	49a3      	ldr	r1, [pc, #652]	; (800bef8 <__ieee754_asin+0x340>)
 800bc6c:	f7f4 fab0 	bl	80001d0 <__aeabi_dsub>
 800bc70:	2200      	movs	r2, #0
 800bc72:	4ba2      	ldr	r3, [pc, #648]	; (800befc <__ieee754_asin+0x344>)
 800bc74:	f7f4 fc64 	bl	8000540 <__aeabi_dmul>
 800bc78:	a389      	add	r3, pc, #548	; (adr r3, 800bea0 <__ieee754_asin+0x2e8>)
 800bc7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc7e:	4604      	mov	r4, r0
 800bc80:	460d      	mov	r5, r1
 800bc82:	f7f4 fc5d 	bl	8000540 <__aeabi_dmul>
 800bc86:	a388      	add	r3, pc, #544	; (adr r3, 800bea8 <__ieee754_asin+0x2f0>)
 800bc88:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc8c:	f7f4 faa2 	bl	80001d4 <__adddf3>
 800bc90:	4622      	mov	r2, r4
 800bc92:	462b      	mov	r3, r5
 800bc94:	f7f4 fc54 	bl	8000540 <__aeabi_dmul>
 800bc98:	a385      	add	r3, pc, #532	; (adr r3, 800beb0 <__ieee754_asin+0x2f8>)
 800bc9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc9e:	f7f4 fa97 	bl	80001d0 <__aeabi_dsub>
 800bca2:	4622      	mov	r2, r4
 800bca4:	462b      	mov	r3, r5
 800bca6:	f7f4 fc4b 	bl	8000540 <__aeabi_dmul>
 800bcaa:	a383      	add	r3, pc, #524	; (adr r3, 800beb8 <__ieee754_asin+0x300>)
 800bcac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bcb0:	f7f4 fa90 	bl	80001d4 <__adddf3>
 800bcb4:	4622      	mov	r2, r4
 800bcb6:	462b      	mov	r3, r5
 800bcb8:	f7f4 fc42 	bl	8000540 <__aeabi_dmul>
 800bcbc:	a380      	add	r3, pc, #512	; (adr r3, 800bec0 <__ieee754_asin+0x308>)
 800bcbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bcc2:	f7f4 fa85 	bl	80001d0 <__aeabi_dsub>
 800bcc6:	4622      	mov	r2, r4
 800bcc8:	462b      	mov	r3, r5
 800bcca:	f7f4 fc39 	bl	8000540 <__aeabi_dmul>
 800bcce:	a37e      	add	r3, pc, #504	; (adr r3, 800bec8 <__ieee754_asin+0x310>)
 800bcd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bcd4:	f7f4 fa7e 	bl	80001d4 <__adddf3>
 800bcd8:	4622      	mov	r2, r4
 800bcda:	462b      	mov	r3, r5
 800bcdc:	f7f4 fc30 	bl	8000540 <__aeabi_dmul>
 800bce0:	a37b      	add	r3, pc, #492	; (adr r3, 800bed0 <__ieee754_asin+0x318>)
 800bce2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bce6:	4680      	mov	r8, r0
 800bce8:	4689      	mov	r9, r1
 800bcea:	4620      	mov	r0, r4
 800bcec:	4629      	mov	r1, r5
 800bcee:	f7f4 fc27 	bl	8000540 <__aeabi_dmul>
 800bcf2:	a379      	add	r3, pc, #484	; (adr r3, 800bed8 <__ieee754_asin+0x320>)
 800bcf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bcf8:	f7f4 fa6a 	bl	80001d0 <__aeabi_dsub>
 800bcfc:	4622      	mov	r2, r4
 800bcfe:	462b      	mov	r3, r5
 800bd00:	f7f4 fc1e 	bl	8000540 <__aeabi_dmul>
 800bd04:	a376      	add	r3, pc, #472	; (adr r3, 800bee0 <__ieee754_asin+0x328>)
 800bd06:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd0a:	f7f4 fa63 	bl	80001d4 <__adddf3>
 800bd0e:	4622      	mov	r2, r4
 800bd10:	462b      	mov	r3, r5
 800bd12:	f7f4 fc15 	bl	8000540 <__aeabi_dmul>
 800bd16:	a374      	add	r3, pc, #464	; (adr r3, 800bee8 <__ieee754_asin+0x330>)
 800bd18:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd1c:	f7f4 fa58 	bl	80001d0 <__aeabi_dsub>
 800bd20:	4622      	mov	r2, r4
 800bd22:	462b      	mov	r3, r5
 800bd24:	f7f4 fc0c 	bl	8000540 <__aeabi_dmul>
 800bd28:	4b73      	ldr	r3, [pc, #460]	; (800bef8 <__ieee754_asin+0x340>)
 800bd2a:	2200      	movs	r2, #0
 800bd2c:	f7f4 fa52 	bl	80001d4 <__adddf3>
 800bd30:	ec45 4b10 	vmov	d0, r4, r5
 800bd34:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bd38:	f000 fa2c 	bl	800c194 <__ieee754_sqrt>
 800bd3c:	4b70      	ldr	r3, [pc, #448]	; (800bf00 <__ieee754_asin+0x348>)
 800bd3e:	429f      	cmp	r7, r3
 800bd40:	ec5b ab10 	vmov	sl, fp, d0
 800bd44:	f340 80de 	ble.w	800bf04 <__ieee754_asin+0x34c>
 800bd48:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800bd4c:	4640      	mov	r0, r8
 800bd4e:	4649      	mov	r1, r9
 800bd50:	f7f4 fd20 	bl	8000794 <__aeabi_ddiv>
 800bd54:	4652      	mov	r2, sl
 800bd56:	465b      	mov	r3, fp
 800bd58:	f7f4 fbf2 	bl	8000540 <__aeabi_dmul>
 800bd5c:	4652      	mov	r2, sl
 800bd5e:	465b      	mov	r3, fp
 800bd60:	f7f4 fa38 	bl	80001d4 <__adddf3>
 800bd64:	4602      	mov	r2, r0
 800bd66:	460b      	mov	r3, r1
 800bd68:	f7f4 fa34 	bl	80001d4 <__adddf3>
 800bd6c:	a348      	add	r3, pc, #288	; (adr r3, 800be90 <__ieee754_asin+0x2d8>)
 800bd6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd72:	f7f4 fa2d 	bl	80001d0 <__aeabi_dsub>
 800bd76:	4602      	mov	r2, r0
 800bd78:	460b      	mov	r3, r1
 800bd7a:	a143      	add	r1, pc, #268	; (adr r1, 800be88 <__ieee754_asin+0x2d0>)
 800bd7c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bd80:	f7f4 fa26 	bl	80001d0 <__aeabi_dsub>
 800bd84:	9b01      	ldr	r3, [sp, #4]
 800bd86:	2b00      	cmp	r3, #0
 800bd88:	bfdc      	itt	le
 800bd8a:	4602      	movle	r2, r0
 800bd8c:	f101 4300 	addle.w	r3, r1, #2147483648	; 0x80000000
 800bd90:	4604      	mov	r4, r0
 800bd92:	460d      	mov	r5, r1
 800bd94:	bfdc      	itt	le
 800bd96:	4614      	movle	r4, r2
 800bd98:	461d      	movle	r5, r3
 800bd9a:	e745      	b.n	800bc28 <__ieee754_asin+0x70>
 800bd9c:	ee10 2a10 	vmov	r2, s0
 800bda0:	ee10 0a10 	vmov	r0, s0
 800bda4:	462b      	mov	r3, r5
 800bda6:	4629      	mov	r1, r5
 800bda8:	f7f4 fbca 	bl	8000540 <__aeabi_dmul>
 800bdac:	a33c      	add	r3, pc, #240	; (adr r3, 800bea0 <__ieee754_asin+0x2e8>)
 800bdae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bdb2:	4606      	mov	r6, r0
 800bdb4:	460f      	mov	r7, r1
 800bdb6:	f7f4 fbc3 	bl	8000540 <__aeabi_dmul>
 800bdba:	a33b      	add	r3, pc, #236	; (adr r3, 800bea8 <__ieee754_asin+0x2f0>)
 800bdbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bdc0:	f7f4 fa08 	bl	80001d4 <__adddf3>
 800bdc4:	4632      	mov	r2, r6
 800bdc6:	463b      	mov	r3, r7
 800bdc8:	f7f4 fbba 	bl	8000540 <__aeabi_dmul>
 800bdcc:	a338      	add	r3, pc, #224	; (adr r3, 800beb0 <__ieee754_asin+0x2f8>)
 800bdce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bdd2:	f7f4 f9fd 	bl	80001d0 <__aeabi_dsub>
 800bdd6:	4632      	mov	r2, r6
 800bdd8:	463b      	mov	r3, r7
 800bdda:	f7f4 fbb1 	bl	8000540 <__aeabi_dmul>
 800bdde:	a336      	add	r3, pc, #216	; (adr r3, 800beb8 <__ieee754_asin+0x300>)
 800bde0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bde4:	f7f4 f9f6 	bl	80001d4 <__adddf3>
 800bde8:	4632      	mov	r2, r6
 800bdea:	463b      	mov	r3, r7
 800bdec:	f7f4 fba8 	bl	8000540 <__aeabi_dmul>
 800bdf0:	a333      	add	r3, pc, #204	; (adr r3, 800bec0 <__ieee754_asin+0x308>)
 800bdf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bdf6:	f7f4 f9eb 	bl	80001d0 <__aeabi_dsub>
 800bdfa:	4632      	mov	r2, r6
 800bdfc:	463b      	mov	r3, r7
 800bdfe:	f7f4 fb9f 	bl	8000540 <__aeabi_dmul>
 800be02:	a331      	add	r3, pc, #196	; (adr r3, 800bec8 <__ieee754_asin+0x310>)
 800be04:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be08:	f7f4 f9e4 	bl	80001d4 <__adddf3>
 800be0c:	4632      	mov	r2, r6
 800be0e:	463b      	mov	r3, r7
 800be10:	f7f4 fb96 	bl	8000540 <__aeabi_dmul>
 800be14:	a32e      	add	r3, pc, #184	; (adr r3, 800bed0 <__ieee754_asin+0x318>)
 800be16:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be1a:	4680      	mov	r8, r0
 800be1c:	4689      	mov	r9, r1
 800be1e:	4630      	mov	r0, r6
 800be20:	4639      	mov	r1, r7
 800be22:	f7f4 fb8d 	bl	8000540 <__aeabi_dmul>
 800be26:	a32c      	add	r3, pc, #176	; (adr r3, 800bed8 <__ieee754_asin+0x320>)
 800be28:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be2c:	f7f4 f9d0 	bl	80001d0 <__aeabi_dsub>
 800be30:	4632      	mov	r2, r6
 800be32:	463b      	mov	r3, r7
 800be34:	f7f4 fb84 	bl	8000540 <__aeabi_dmul>
 800be38:	a329      	add	r3, pc, #164	; (adr r3, 800bee0 <__ieee754_asin+0x328>)
 800be3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be3e:	f7f4 f9c9 	bl	80001d4 <__adddf3>
 800be42:	4632      	mov	r2, r6
 800be44:	463b      	mov	r3, r7
 800be46:	f7f4 fb7b 	bl	8000540 <__aeabi_dmul>
 800be4a:	a327      	add	r3, pc, #156	; (adr r3, 800bee8 <__ieee754_asin+0x330>)
 800be4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be50:	f7f4 f9be 	bl	80001d0 <__aeabi_dsub>
 800be54:	4632      	mov	r2, r6
 800be56:	463b      	mov	r3, r7
 800be58:	f7f4 fb72 	bl	8000540 <__aeabi_dmul>
 800be5c:	2200      	movs	r2, #0
 800be5e:	4b26      	ldr	r3, [pc, #152]	; (800bef8 <__ieee754_asin+0x340>)
 800be60:	f7f4 f9b8 	bl	80001d4 <__adddf3>
 800be64:	4602      	mov	r2, r0
 800be66:	460b      	mov	r3, r1
 800be68:	4640      	mov	r0, r8
 800be6a:	4649      	mov	r1, r9
 800be6c:	f7f4 fc92 	bl	8000794 <__aeabi_ddiv>
 800be70:	4622      	mov	r2, r4
 800be72:	462b      	mov	r3, r5
 800be74:	f7f4 fb64 	bl	8000540 <__aeabi_dmul>
 800be78:	4602      	mov	r2, r0
 800be7a:	460b      	mov	r3, r1
 800be7c:	4620      	mov	r0, r4
 800be7e:	4629      	mov	r1, r5
 800be80:	e6c2      	b.n	800bc08 <__ieee754_asin+0x50>
 800be82:	bf00      	nop
 800be84:	f3af 8000 	nop.w
 800be88:	54442d18 	.word	0x54442d18
 800be8c:	3ff921fb 	.word	0x3ff921fb
 800be90:	33145c07 	.word	0x33145c07
 800be94:	3c91a626 	.word	0x3c91a626
 800be98:	8800759c 	.word	0x8800759c
 800be9c:	7e37e43c 	.word	0x7e37e43c
 800bea0:	0dfdf709 	.word	0x0dfdf709
 800bea4:	3f023de1 	.word	0x3f023de1
 800bea8:	7501b288 	.word	0x7501b288
 800beac:	3f49efe0 	.word	0x3f49efe0
 800beb0:	b5688f3b 	.word	0xb5688f3b
 800beb4:	3fa48228 	.word	0x3fa48228
 800beb8:	0e884455 	.word	0x0e884455
 800bebc:	3fc9c155 	.word	0x3fc9c155
 800bec0:	03eb6f7d 	.word	0x03eb6f7d
 800bec4:	3fd4d612 	.word	0x3fd4d612
 800bec8:	55555555 	.word	0x55555555
 800becc:	3fc55555 	.word	0x3fc55555
 800bed0:	b12e9282 	.word	0xb12e9282
 800bed4:	3fb3b8c5 	.word	0x3fb3b8c5
 800bed8:	1b8d0159 	.word	0x1b8d0159
 800bedc:	3fe6066c 	.word	0x3fe6066c
 800bee0:	9c598ac8 	.word	0x9c598ac8
 800bee4:	40002ae5 	.word	0x40002ae5
 800bee8:	1c8a2d4b 	.word	0x1c8a2d4b
 800beec:	40033a27 	.word	0x40033a27
 800bef0:	3fefffff 	.word	0x3fefffff
 800bef4:	3fdfffff 	.word	0x3fdfffff
 800bef8:	3ff00000 	.word	0x3ff00000
 800befc:	3fe00000 	.word	0x3fe00000
 800bf00:	3fef3332 	.word	0x3fef3332
 800bf04:	ee10 2a10 	vmov	r2, s0
 800bf08:	ee10 0a10 	vmov	r0, s0
 800bf0c:	465b      	mov	r3, fp
 800bf0e:	4659      	mov	r1, fp
 800bf10:	f7f4 f960 	bl	80001d4 <__adddf3>
 800bf14:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800bf18:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800bf1c:	4640      	mov	r0, r8
 800bf1e:	4649      	mov	r1, r9
 800bf20:	f7f4 fc38 	bl	8000794 <__aeabi_ddiv>
 800bf24:	4602      	mov	r2, r0
 800bf26:	460b      	mov	r3, r1
 800bf28:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800bf2c:	f7f4 fb08 	bl	8000540 <__aeabi_dmul>
 800bf30:	2600      	movs	r6, #0
 800bf32:	4680      	mov	r8, r0
 800bf34:	4689      	mov	r9, r1
 800bf36:	4632      	mov	r2, r6
 800bf38:	465b      	mov	r3, fp
 800bf3a:	4630      	mov	r0, r6
 800bf3c:	4659      	mov	r1, fp
 800bf3e:	f7f4 faff 	bl	8000540 <__aeabi_dmul>
 800bf42:	4602      	mov	r2, r0
 800bf44:	460b      	mov	r3, r1
 800bf46:	4620      	mov	r0, r4
 800bf48:	4629      	mov	r1, r5
 800bf4a:	f7f4 f941 	bl	80001d0 <__aeabi_dsub>
 800bf4e:	4632      	mov	r2, r6
 800bf50:	4604      	mov	r4, r0
 800bf52:	460d      	mov	r5, r1
 800bf54:	465b      	mov	r3, fp
 800bf56:	4650      	mov	r0, sl
 800bf58:	4659      	mov	r1, fp
 800bf5a:	f7f4 f93b 	bl	80001d4 <__adddf3>
 800bf5e:	4602      	mov	r2, r0
 800bf60:	460b      	mov	r3, r1
 800bf62:	4620      	mov	r0, r4
 800bf64:	4629      	mov	r1, r5
 800bf66:	f7f4 fc15 	bl	8000794 <__aeabi_ddiv>
 800bf6a:	4602      	mov	r2, r0
 800bf6c:	460b      	mov	r3, r1
 800bf6e:	f7f4 f931 	bl	80001d4 <__adddf3>
 800bf72:	4602      	mov	r2, r0
 800bf74:	460b      	mov	r3, r1
 800bf76:	a114      	add	r1, pc, #80	; (adr r1, 800bfc8 <__ieee754_asin+0x410>)
 800bf78:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bf7c:	f7f4 f928 	bl	80001d0 <__aeabi_dsub>
 800bf80:	4602      	mov	r2, r0
 800bf82:	460b      	mov	r3, r1
 800bf84:	4640      	mov	r0, r8
 800bf86:	4649      	mov	r1, r9
 800bf88:	f7f4 f922 	bl	80001d0 <__aeabi_dsub>
 800bf8c:	465f      	mov	r7, fp
 800bf8e:	4604      	mov	r4, r0
 800bf90:	460d      	mov	r5, r1
 800bf92:	4632      	mov	r2, r6
 800bf94:	465b      	mov	r3, fp
 800bf96:	4630      	mov	r0, r6
 800bf98:	4639      	mov	r1, r7
 800bf9a:	f7f4 f91b 	bl	80001d4 <__adddf3>
 800bf9e:	4602      	mov	r2, r0
 800bfa0:	460b      	mov	r3, r1
 800bfa2:	a10b      	add	r1, pc, #44	; (adr r1, 800bfd0 <__ieee754_asin+0x418>)
 800bfa4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bfa8:	f7f4 f912 	bl	80001d0 <__aeabi_dsub>
 800bfac:	4602      	mov	r2, r0
 800bfae:	460b      	mov	r3, r1
 800bfb0:	4620      	mov	r0, r4
 800bfb2:	4629      	mov	r1, r5
 800bfb4:	f7f4 f90c 	bl	80001d0 <__aeabi_dsub>
 800bfb8:	4602      	mov	r2, r0
 800bfba:	460b      	mov	r3, r1
 800bfbc:	a104      	add	r1, pc, #16	; (adr r1, 800bfd0 <__ieee754_asin+0x418>)
 800bfbe:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bfc2:	e6dd      	b.n	800bd80 <__ieee754_asin+0x1c8>
 800bfc4:	f3af 8000 	nop.w
 800bfc8:	33145c07 	.word	0x33145c07
 800bfcc:	3c91a626 	.word	0x3c91a626
 800bfd0:	54442d18 	.word	0x54442d18
 800bfd4:	3fe921fb 	.word	0x3fe921fb

0800bfd8 <__ieee754_atan2>:
 800bfd8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bfdc:	ec57 6b11 	vmov	r6, r7, d1
 800bfe0:	4273      	negs	r3, r6
 800bfe2:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 800bfe6:	4333      	orrs	r3, r6
 800bfe8:	f8df e1a4 	ldr.w	lr, [pc, #420]	; 800c190 <__ieee754_atan2+0x1b8>
 800bfec:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 800bff0:	4573      	cmp	r3, lr
 800bff2:	ec51 0b10 	vmov	r0, r1, d0
 800bff6:	ee11 8a10 	vmov	r8, s2
 800bffa:	d80a      	bhi.n	800c012 <__ieee754_atan2+0x3a>
 800bffc:	4244      	negs	r4, r0
 800bffe:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800c002:	4304      	orrs	r4, r0
 800c004:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 800c008:	4574      	cmp	r4, lr
 800c00a:	468c      	mov	ip, r1
 800c00c:	ee10 9a10 	vmov	r9, s0
 800c010:	d907      	bls.n	800c022 <__ieee754_atan2+0x4a>
 800c012:	4632      	mov	r2, r6
 800c014:	463b      	mov	r3, r7
 800c016:	f7f4 f8dd 	bl	80001d4 <__adddf3>
 800c01a:	ec41 0b10 	vmov	d0, r0, r1
 800c01e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c022:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 800c026:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800c02a:	4334      	orrs	r4, r6
 800c02c:	d103      	bne.n	800c036 <__ieee754_atan2+0x5e>
 800c02e:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c032:	f000 b961 	b.w	800c2f8 <atan>
 800c036:	17bc      	asrs	r4, r7, #30
 800c038:	f004 0402 	and.w	r4, r4, #2
 800c03c:	ea53 0909 	orrs.w	r9, r3, r9
 800c040:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 800c044:	d107      	bne.n	800c056 <__ieee754_atan2+0x7e>
 800c046:	2c02      	cmp	r4, #2
 800c048:	d073      	beq.n	800c132 <__ieee754_atan2+0x15a>
 800c04a:	2c03      	cmp	r4, #3
 800c04c:	d1e5      	bne.n	800c01a <__ieee754_atan2+0x42>
 800c04e:	a13e      	add	r1, pc, #248	; (adr r1, 800c148 <__ieee754_atan2+0x170>)
 800c050:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c054:	e7e1      	b.n	800c01a <__ieee754_atan2+0x42>
 800c056:	ea52 0808 	orrs.w	r8, r2, r8
 800c05a:	d106      	bne.n	800c06a <__ieee754_atan2+0x92>
 800c05c:	f1bc 0f00 	cmp.w	ip, #0
 800c060:	da6b      	bge.n	800c13a <__ieee754_atan2+0x162>
 800c062:	a13b      	add	r1, pc, #236	; (adr r1, 800c150 <__ieee754_atan2+0x178>)
 800c064:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c068:	e7d7      	b.n	800c01a <__ieee754_atan2+0x42>
 800c06a:	4572      	cmp	r2, lr
 800c06c:	d120      	bne.n	800c0b0 <__ieee754_atan2+0xd8>
 800c06e:	4293      	cmp	r3, r2
 800c070:	d111      	bne.n	800c096 <__ieee754_atan2+0xbe>
 800c072:	2c02      	cmp	r4, #2
 800c074:	d007      	beq.n	800c086 <__ieee754_atan2+0xae>
 800c076:	2c03      	cmp	r4, #3
 800c078:	d009      	beq.n	800c08e <__ieee754_atan2+0xb6>
 800c07a:	2c01      	cmp	r4, #1
 800c07c:	d155      	bne.n	800c12a <__ieee754_atan2+0x152>
 800c07e:	a136      	add	r1, pc, #216	; (adr r1, 800c158 <__ieee754_atan2+0x180>)
 800c080:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c084:	e7c9      	b.n	800c01a <__ieee754_atan2+0x42>
 800c086:	a136      	add	r1, pc, #216	; (adr r1, 800c160 <__ieee754_atan2+0x188>)
 800c088:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c08c:	e7c5      	b.n	800c01a <__ieee754_atan2+0x42>
 800c08e:	a136      	add	r1, pc, #216	; (adr r1, 800c168 <__ieee754_atan2+0x190>)
 800c090:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c094:	e7c1      	b.n	800c01a <__ieee754_atan2+0x42>
 800c096:	2c02      	cmp	r4, #2
 800c098:	d04b      	beq.n	800c132 <__ieee754_atan2+0x15a>
 800c09a:	2c03      	cmp	r4, #3
 800c09c:	d0d7      	beq.n	800c04e <__ieee754_atan2+0x76>
 800c09e:	2c01      	cmp	r4, #1
 800c0a0:	f04f 0000 	mov.w	r0, #0
 800c0a4:	d102      	bne.n	800c0ac <__ieee754_atan2+0xd4>
 800c0a6:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 800c0aa:	e7b6      	b.n	800c01a <__ieee754_atan2+0x42>
 800c0ac:	2100      	movs	r1, #0
 800c0ae:	e7b4      	b.n	800c01a <__ieee754_atan2+0x42>
 800c0b0:	4573      	cmp	r3, lr
 800c0b2:	d0d3      	beq.n	800c05c <__ieee754_atan2+0x84>
 800c0b4:	1a9b      	subs	r3, r3, r2
 800c0b6:	151b      	asrs	r3, r3, #20
 800c0b8:	2b3c      	cmp	r3, #60	; 0x3c
 800c0ba:	dc1e      	bgt.n	800c0fa <__ieee754_atan2+0x122>
 800c0bc:	2f00      	cmp	r7, #0
 800c0be:	da01      	bge.n	800c0c4 <__ieee754_atan2+0xec>
 800c0c0:	333c      	adds	r3, #60	; 0x3c
 800c0c2:	db1e      	blt.n	800c102 <__ieee754_atan2+0x12a>
 800c0c4:	4632      	mov	r2, r6
 800c0c6:	463b      	mov	r3, r7
 800c0c8:	f7f4 fb64 	bl	8000794 <__aeabi_ddiv>
 800c0cc:	ec41 0b10 	vmov	d0, r0, r1
 800c0d0:	f000 fab2 	bl	800c638 <fabs>
 800c0d4:	f000 f910 	bl	800c2f8 <atan>
 800c0d8:	ec51 0b10 	vmov	r0, r1, d0
 800c0dc:	2c01      	cmp	r4, #1
 800c0de:	d013      	beq.n	800c108 <__ieee754_atan2+0x130>
 800c0e0:	2c02      	cmp	r4, #2
 800c0e2:	d015      	beq.n	800c110 <__ieee754_atan2+0x138>
 800c0e4:	2c00      	cmp	r4, #0
 800c0e6:	d098      	beq.n	800c01a <__ieee754_atan2+0x42>
 800c0e8:	a321      	add	r3, pc, #132	; (adr r3, 800c170 <__ieee754_atan2+0x198>)
 800c0ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c0ee:	f7f4 f86f 	bl	80001d0 <__aeabi_dsub>
 800c0f2:	a321      	add	r3, pc, #132	; (adr r3, 800c178 <__ieee754_atan2+0x1a0>)
 800c0f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c0f8:	e014      	b.n	800c124 <__ieee754_atan2+0x14c>
 800c0fa:	a121      	add	r1, pc, #132	; (adr r1, 800c180 <__ieee754_atan2+0x1a8>)
 800c0fc:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c100:	e7ec      	b.n	800c0dc <__ieee754_atan2+0x104>
 800c102:	2000      	movs	r0, #0
 800c104:	2100      	movs	r1, #0
 800c106:	e7e9      	b.n	800c0dc <__ieee754_atan2+0x104>
 800c108:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c10c:	4619      	mov	r1, r3
 800c10e:	e784      	b.n	800c01a <__ieee754_atan2+0x42>
 800c110:	a317      	add	r3, pc, #92	; (adr r3, 800c170 <__ieee754_atan2+0x198>)
 800c112:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c116:	f7f4 f85b 	bl	80001d0 <__aeabi_dsub>
 800c11a:	4602      	mov	r2, r0
 800c11c:	460b      	mov	r3, r1
 800c11e:	a116      	add	r1, pc, #88	; (adr r1, 800c178 <__ieee754_atan2+0x1a0>)
 800c120:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c124:	f7f4 f854 	bl	80001d0 <__aeabi_dsub>
 800c128:	e777      	b.n	800c01a <__ieee754_atan2+0x42>
 800c12a:	a117      	add	r1, pc, #92	; (adr r1, 800c188 <__ieee754_atan2+0x1b0>)
 800c12c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c130:	e773      	b.n	800c01a <__ieee754_atan2+0x42>
 800c132:	a111      	add	r1, pc, #68	; (adr r1, 800c178 <__ieee754_atan2+0x1a0>)
 800c134:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c138:	e76f      	b.n	800c01a <__ieee754_atan2+0x42>
 800c13a:	a111      	add	r1, pc, #68	; (adr r1, 800c180 <__ieee754_atan2+0x1a8>)
 800c13c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c140:	e76b      	b.n	800c01a <__ieee754_atan2+0x42>
 800c142:	bf00      	nop
 800c144:	f3af 8000 	nop.w
 800c148:	54442d18 	.word	0x54442d18
 800c14c:	c00921fb 	.word	0xc00921fb
 800c150:	54442d18 	.word	0x54442d18
 800c154:	bff921fb 	.word	0xbff921fb
 800c158:	54442d18 	.word	0x54442d18
 800c15c:	bfe921fb 	.word	0xbfe921fb
 800c160:	7f3321d2 	.word	0x7f3321d2
 800c164:	4002d97c 	.word	0x4002d97c
 800c168:	7f3321d2 	.word	0x7f3321d2
 800c16c:	c002d97c 	.word	0xc002d97c
 800c170:	33145c07 	.word	0x33145c07
 800c174:	3ca1a626 	.word	0x3ca1a626
 800c178:	54442d18 	.word	0x54442d18
 800c17c:	400921fb 	.word	0x400921fb
 800c180:	54442d18 	.word	0x54442d18
 800c184:	3ff921fb 	.word	0x3ff921fb
 800c188:	54442d18 	.word	0x54442d18
 800c18c:	3fe921fb 	.word	0x3fe921fb
 800c190:	7ff00000 	.word	0x7ff00000

0800c194 <__ieee754_sqrt>:
 800c194:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c198:	4955      	ldr	r1, [pc, #340]	; (800c2f0 <__ieee754_sqrt+0x15c>)
 800c19a:	ec55 4b10 	vmov	r4, r5, d0
 800c19e:	43a9      	bics	r1, r5
 800c1a0:	462b      	mov	r3, r5
 800c1a2:	462a      	mov	r2, r5
 800c1a4:	d112      	bne.n	800c1cc <__ieee754_sqrt+0x38>
 800c1a6:	ee10 2a10 	vmov	r2, s0
 800c1aa:	ee10 0a10 	vmov	r0, s0
 800c1ae:	4629      	mov	r1, r5
 800c1b0:	f7f4 f9c6 	bl	8000540 <__aeabi_dmul>
 800c1b4:	4602      	mov	r2, r0
 800c1b6:	460b      	mov	r3, r1
 800c1b8:	4620      	mov	r0, r4
 800c1ba:	4629      	mov	r1, r5
 800c1bc:	f7f4 f80a 	bl	80001d4 <__adddf3>
 800c1c0:	4604      	mov	r4, r0
 800c1c2:	460d      	mov	r5, r1
 800c1c4:	ec45 4b10 	vmov	d0, r4, r5
 800c1c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c1cc:	2d00      	cmp	r5, #0
 800c1ce:	ee10 0a10 	vmov	r0, s0
 800c1d2:	4621      	mov	r1, r4
 800c1d4:	dc0f      	bgt.n	800c1f6 <__ieee754_sqrt+0x62>
 800c1d6:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800c1da:	4330      	orrs	r0, r6
 800c1dc:	d0f2      	beq.n	800c1c4 <__ieee754_sqrt+0x30>
 800c1de:	b155      	cbz	r5, 800c1f6 <__ieee754_sqrt+0x62>
 800c1e0:	ee10 2a10 	vmov	r2, s0
 800c1e4:	4620      	mov	r0, r4
 800c1e6:	4629      	mov	r1, r5
 800c1e8:	f7f3 fff2 	bl	80001d0 <__aeabi_dsub>
 800c1ec:	4602      	mov	r2, r0
 800c1ee:	460b      	mov	r3, r1
 800c1f0:	f7f4 fad0 	bl	8000794 <__aeabi_ddiv>
 800c1f4:	e7e4      	b.n	800c1c0 <__ieee754_sqrt+0x2c>
 800c1f6:	151b      	asrs	r3, r3, #20
 800c1f8:	d073      	beq.n	800c2e2 <__ieee754_sqrt+0x14e>
 800c1fa:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800c1fe:	07dd      	lsls	r5, r3, #31
 800c200:	f3c2 0213 	ubfx	r2, r2, #0, #20
 800c204:	bf48      	it	mi
 800c206:	0fc8      	lsrmi	r0, r1, #31
 800c208:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800c20c:	bf44      	itt	mi
 800c20e:	0049      	lslmi	r1, r1, #1
 800c210:	eb00 0242 	addmi.w	r2, r0, r2, lsl #1
 800c214:	2500      	movs	r5, #0
 800c216:	1058      	asrs	r0, r3, #1
 800c218:	0fcb      	lsrs	r3, r1, #31
 800c21a:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 800c21e:	0049      	lsls	r1, r1, #1
 800c220:	2316      	movs	r3, #22
 800c222:	462c      	mov	r4, r5
 800c224:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 800c228:	19a7      	adds	r7, r4, r6
 800c22a:	4297      	cmp	r7, r2
 800c22c:	bfde      	ittt	le
 800c22e:	19bc      	addle	r4, r7, r6
 800c230:	1bd2      	suble	r2, r2, r7
 800c232:	19ad      	addle	r5, r5, r6
 800c234:	0fcf      	lsrs	r7, r1, #31
 800c236:	3b01      	subs	r3, #1
 800c238:	eb07 0242 	add.w	r2, r7, r2, lsl #1
 800c23c:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800c240:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800c244:	d1f0      	bne.n	800c228 <__ieee754_sqrt+0x94>
 800c246:	f04f 0c20 	mov.w	ip, #32
 800c24a:	469e      	mov	lr, r3
 800c24c:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800c250:	42a2      	cmp	r2, r4
 800c252:	eb06 070e 	add.w	r7, r6, lr
 800c256:	dc02      	bgt.n	800c25e <__ieee754_sqrt+0xca>
 800c258:	d112      	bne.n	800c280 <__ieee754_sqrt+0xec>
 800c25a:	428f      	cmp	r7, r1
 800c25c:	d810      	bhi.n	800c280 <__ieee754_sqrt+0xec>
 800c25e:	2f00      	cmp	r7, #0
 800c260:	eb07 0e06 	add.w	lr, r7, r6
 800c264:	da42      	bge.n	800c2ec <__ieee754_sqrt+0x158>
 800c266:	f1be 0f00 	cmp.w	lr, #0
 800c26a:	db3f      	blt.n	800c2ec <__ieee754_sqrt+0x158>
 800c26c:	f104 0801 	add.w	r8, r4, #1
 800c270:	1b12      	subs	r2, r2, r4
 800c272:	428f      	cmp	r7, r1
 800c274:	bf88      	it	hi
 800c276:	f102 32ff 	addhi.w	r2, r2, #4294967295
 800c27a:	1bc9      	subs	r1, r1, r7
 800c27c:	4433      	add	r3, r6
 800c27e:	4644      	mov	r4, r8
 800c280:	0052      	lsls	r2, r2, #1
 800c282:	f1bc 0c01 	subs.w	ip, ip, #1
 800c286:	eb02 72d1 	add.w	r2, r2, r1, lsr #31
 800c28a:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800c28e:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800c292:	d1dd      	bne.n	800c250 <__ieee754_sqrt+0xbc>
 800c294:	430a      	orrs	r2, r1
 800c296:	d006      	beq.n	800c2a6 <__ieee754_sqrt+0x112>
 800c298:	1c5c      	adds	r4, r3, #1
 800c29a:	bf13      	iteet	ne
 800c29c:	3301      	addne	r3, #1
 800c29e:	3501      	addeq	r5, #1
 800c2a0:	4663      	moveq	r3, ip
 800c2a2:	f023 0301 	bicne.w	r3, r3, #1
 800c2a6:	106a      	asrs	r2, r5, #1
 800c2a8:	085b      	lsrs	r3, r3, #1
 800c2aa:	07e9      	lsls	r1, r5, #31
 800c2ac:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 800c2b0:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 800c2b4:	bf48      	it	mi
 800c2b6:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 800c2ba:	eb02 5500 	add.w	r5, r2, r0, lsl #20
 800c2be:	461c      	mov	r4, r3
 800c2c0:	e780      	b.n	800c1c4 <__ieee754_sqrt+0x30>
 800c2c2:	0aca      	lsrs	r2, r1, #11
 800c2c4:	3815      	subs	r0, #21
 800c2c6:	0549      	lsls	r1, r1, #21
 800c2c8:	2a00      	cmp	r2, #0
 800c2ca:	d0fa      	beq.n	800c2c2 <__ieee754_sqrt+0x12e>
 800c2cc:	02d6      	lsls	r6, r2, #11
 800c2ce:	d50a      	bpl.n	800c2e6 <__ieee754_sqrt+0x152>
 800c2d0:	f1c3 0420 	rsb	r4, r3, #32
 800c2d4:	fa21 f404 	lsr.w	r4, r1, r4
 800c2d8:	1e5d      	subs	r5, r3, #1
 800c2da:	4099      	lsls	r1, r3
 800c2dc:	4322      	orrs	r2, r4
 800c2de:	1b43      	subs	r3, r0, r5
 800c2e0:	e78b      	b.n	800c1fa <__ieee754_sqrt+0x66>
 800c2e2:	4618      	mov	r0, r3
 800c2e4:	e7f0      	b.n	800c2c8 <__ieee754_sqrt+0x134>
 800c2e6:	0052      	lsls	r2, r2, #1
 800c2e8:	3301      	adds	r3, #1
 800c2ea:	e7ef      	b.n	800c2cc <__ieee754_sqrt+0x138>
 800c2ec:	46a0      	mov	r8, r4
 800c2ee:	e7bf      	b.n	800c270 <__ieee754_sqrt+0xdc>
 800c2f0:	7ff00000 	.word	0x7ff00000
 800c2f4:	00000000 	.word	0x00000000

0800c2f8 <atan>:
 800c2f8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c2fc:	ec55 4b10 	vmov	r4, r5, d0
 800c300:	4bc3      	ldr	r3, [pc, #780]	; (800c610 <atan+0x318>)
 800c302:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800c306:	429e      	cmp	r6, r3
 800c308:	46ab      	mov	fp, r5
 800c30a:	dd18      	ble.n	800c33e <atan+0x46>
 800c30c:	4bc1      	ldr	r3, [pc, #772]	; (800c614 <atan+0x31c>)
 800c30e:	429e      	cmp	r6, r3
 800c310:	dc01      	bgt.n	800c316 <atan+0x1e>
 800c312:	d109      	bne.n	800c328 <atan+0x30>
 800c314:	b144      	cbz	r4, 800c328 <atan+0x30>
 800c316:	4622      	mov	r2, r4
 800c318:	462b      	mov	r3, r5
 800c31a:	4620      	mov	r0, r4
 800c31c:	4629      	mov	r1, r5
 800c31e:	f7f3 ff59 	bl	80001d4 <__adddf3>
 800c322:	4604      	mov	r4, r0
 800c324:	460d      	mov	r5, r1
 800c326:	e006      	b.n	800c336 <atan+0x3e>
 800c328:	f1bb 0f00 	cmp.w	fp, #0
 800c32c:	f340 8131 	ble.w	800c592 <atan+0x29a>
 800c330:	a59b      	add	r5, pc, #620	; (adr r5, 800c5a0 <atan+0x2a8>)
 800c332:	e9d5 4500 	ldrd	r4, r5, [r5]
 800c336:	ec45 4b10 	vmov	d0, r4, r5
 800c33a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c33e:	4bb6      	ldr	r3, [pc, #728]	; (800c618 <atan+0x320>)
 800c340:	429e      	cmp	r6, r3
 800c342:	dc14      	bgt.n	800c36e <atan+0x76>
 800c344:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 800c348:	429e      	cmp	r6, r3
 800c34a:	dc0d      	bgt.n	800c368 <atan+0x70>
 800c34c:	a396      	add	r3, pc, #600	; (adr r3, 800c5a8 <atan+0x2b0>)
 800c34e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c352:	ee10 0a10 	vmov	r0, s0
 800c356:	4629      	mov	r1, r5
 800c358:	f7f3 ff3c 	bl	80001d4 <__adddf3>
 800c35c:	2200      	movs	r2, #0
 800c35e:	4baf      	ldr	r3, [pc, #700]	; (800c61c <atan+0x324>)
 800c360:	f7f4 fb7e 	bl	8000a60 <__aeabi_dcmpgt>
 800c364:	2800      	cmp	r0, #0
 800c366:	d1e6      	bne.n	800c336 <atan+0x3e>
 800c368:	f04f 3aff 	mov.w	sl, #4294967295
 800c36c:	e02b      	b.n	800c3c6 <atan+0xce>
 800c36e:	f000 f963 	bl	800c638 <fabs>
 800c372:	4bab      	ldr	r3, [pc, #684]	; (800c620 <atan+0x328>)
 800c374:	429e      	cmp	r6, r3
 800c376:	ec55 4b10 	vmov	r4, r5, d0
 800c37a:	f300 80bf 	bgt.w	800c4fc <atan+0x204>
 800c37e:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 800c382:	429e      	cmp	r6, r3
 800c384:	f300 80a0 	bgt.w	800c4c8 <atan+0x1d0>
 800c388:	ee10 2a10 	vmov	r2, s0
 800c38c:	ee10 0a10 	vmov	r0, s0
 800c390:	462b      	mov	r3, r5
 800c392:	4629      	mov	r1, r5
 800c394:	f7f3 ff1e 	bl	80001d4 <__adddf3>
 800c398:	2200      	movs	r2, #0
 800c39a:	4ba0      	ldr	r3, [pc, #640]	; (800c61c <atan+0x324>)
 800c39c:	f7f3 ff18 	bl	80001d0 <__aeabi_dsub>
 800c3a0:	2200      	movs	r2, #0
 800c3a2:	4606      	mov	r6, r0
 800c3a4:	460f      	mov	r7, r1
 800c3a6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800c3aa:	4620      	mov	r0, r4
 800c3ac:	4629      	mov	r1, r5
 800c3ae:	f7f3 ff11 	bl	80001d4 <__adddf3>
 800c3b2:	4602      	mov	r2, r0
 800c3b4:	460b      	mov	r3, r1
 800c3b6:	4630      	mov	r0, r6
 800c3b8:	4639      	mov	r1, r7
 800c3ba:	f7f4 f9eb 	bl	8000794 <__aeabi_ddiv>
 800c3be:	f04f 0a00 	mov.w	sl, #0
 800c3c2:	4604      	mov	r4, r0
 800c3c4:	460d      	mov	r5, r1
 800c3c6:	4622      	mov	r2, r4
 800c3c8:	462b      	mov	r3, r5
 800c3ca:	4620      	mov	r0, r4
 800c3cc:	4629      	mov	r1, r5
 800c3ce:	f7f4 f8b7 	bl	8000540 <__aeabi_dmul>
 800c3d2:	4602      	mov	r2, r0
 800c3d4:	460b      	mov	r3, r1
 800c3d6:	4680      	mov	r8, r0
 800c3d8:	4689      	mov	r9, r1
 800c3da:	f7f4 f8b1 	bl	8000540 <__aeabi_dmul>
 800c3de:	a374      	add	r3, pc, #464	; (adr r3, 800c5b0 <atan+0x2b8>)
 800c3e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c3e4:	4606      	mov	r6, r0
 800c3e6:	460f      	mov	r7, r1
 800c3e8:	f7f4 f8aa 	bl	8000540 <__aeabi_dmul>
 800c3ec:	a372      	add	r3, pc, #456	; (adr r3, 800c5b8 <atan+0x2c0>)
 800c3ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c3f2:	f7f3 feef 	bl	80001d4 <__adddf3>
 800c3f6:	4632      	mov	r2, r6
 800c3f8:	463b      	mov	r3, r7
 800c3fa:	f7f4 f8a1 	bl	8000540 <__aeabi_dmul>
 800c3fe:	a370      	add	r3, pc, #448	; (adr r3, 800c5c0 <atan+0x2c8>)
 800c400:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c404:	f7f3 fee6 	bl	80001d4 <__adddf3>
 800c408:	4632      	mov	r2, r6
 800c40a:	463b      	mov	r3, r7
 800c40c:	f7f4 f898 	bl	8000540 <__aeabi_dmul>
 800c410:	a36d      	add	r3, pc, #436	; (adr r3, 800c5c8 <atan+0x2d0>)
 800c412:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c416:	f7f3 fedd 	bl	80001d4 <__adddf3>
 800c41a:	4632      	mov	r2, r6
 800c41c:	463b      	mov	r3, r7
 800c41e:	f7f4 f88f 	bl	8000540 <__aeabi_dmul>
 800c422:	a36b      	add	r3, pc, #428	; (adr r3, 800c5d0 <atan+0x2d8>)
 800c424:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c428:	f7f3 fed4 	bl	80001d4 <__adddf3>
 800c42c:	4632      	mov	r2, r6
 800c42e:	463b      	mov	r3, r7
 800c430:	f7f4 f886 	bl	8000540 <__aeabi_dmul>
 800c434:	a368      	add	r3, pc, #416	; (adr r3, 800c5d8 <atan+0x2e0>)
 800c436:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c43a:	f7f3 fecb 	bl	80001d4 <__adddf3>
 800c43e:	4642      	mov	r2, r8
 800c440:	464b      	mov	r3, r9
 800c442:	f7f4 f87d 	bl	8000540 <__aeabi_dmul>
 800c446:	a366      	add	r3, pc, #408	; (adr r3, 800c5e0 <atan+0x2e8>)
 800c448:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c44c:	4680      	mov	r8, r0
 800c44e:	4689      	mov	r9, r1
 800c450:	4630      	mov	r0, r6
 800c452:	4639      	mov	r1, r7
 800c454:	f7f4 f874 	bl	8000540 <__aeabi_dmul>
 800c458:	a363      	add	r3, pc, #396	; (adr r3, 800c5e8 <atan+0x2f0>)
 800c45a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c45e:	f7f3 feb7 	bl	80001d0 <__aeabi_dsub>
 800c462:	4632      	mov	r2, r6
 800c464:	463b      	mov	r3, r7
 800c466:	f7f4 f86b 	bl	8000540 <__aeabi_dmul>
 800c46a:	a361      	add	r3, pc, #388	; (adr r3, 800c5f0 <atan+0x2f8>)
 800c46c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c470:	f7f3 feae 	bl	80001d0 <__aeabi_dsub>
 800c474:	4632      	mov	r2, r6
 800c476:	463b      	mov	r3, r7
 800c478:	f7f4 f862 	bl	8000540 <__aeabi_dmul>
 800c47c:	a35e      	add	r3, pc, #376	; (adr r3, 800c5f8 <atan+0x300>)
 800c47e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c482:	f7f3 fea5 	bl	80001d0 <__aeabi_dsub>
 800c486:	4632      	mov	r2, r6
 800c488:	463b      	mov	r3, r7
 800c48a:	f7f4 f859 	bl	8000540 <__aeabi_dmul>
 800c48e:	a35c      	add	r3, pc, #368	; (adr r3, 800c600 <atan+0x308>)
 800c490:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c494:	f7f3 fe9c 	bl	80001d0 <__aeabi_dsub>
 800c498:	4632      	mov	r2, r6
 800c49a:	463b      	mov	r3, r7
 800c49c:	f7f4 f850 	bl	8000540 <__aeabi_dmul>
 800c4a0:	4602      	mov	r2, r0
 800c4a2:	460b      	mov	r3, r1
 800c4a4:	4640      	mov	r0, r8
 800c4a6:	4649      	mov	r1, r9
 800c4a8:	f7f3 fe94 	bl	80001d4 <__adddf3>
 800c4ac:	4622      	mov	r2, r4
 800c4ae:	462b      	mov	r3, r5
 800c4b0:	f7f4 f846 	bl	8000540 <__aeabi_dmul>
 800c4b4:	f1ba 3fff 	cmp.w	sl, #4294967295
 800c4b8:	4602      	mov	r2, r0
 800c4ba:	460b      	mov	r3, r1
 800c4bc:	d14b      	bne.n	800c556 <atan+0x25e>
 800c4be:	4620      	mov	r0, r4
 800c4c0:	4629      	mov	r1, r5
 800c4c2:	f7f3 fe85 	bl	80001d0 <__aeabi_dsub>
 800c4c6:	e72c      	b.n	800c322 <atan+0x2a>
 800c4c8:	ee10 0a10 	vmov	r0, s0
 800c4cc:	2200      	movs	r2, #0
 800c4ce:	4b53      	ldr	r3, [pc, #332]	; (800c61c <atan+0x324>)
 800c4d0:	4629      	mov	r1, r5
 800c4d2:	f7f3 fe7d 	bl	80001d0 <__aeabi_dsub>
 800c4d6:	2200      	movs	r2, #0
 800c4d8:	4606      	mov	r6, r0
 800c4da:	460f      	mov	r7, r1
 800c4dc:	4b4f      	ldr	r3, [pc, #316]	; (800c61c <atan+0x324>)
 800c4de:	4620      	mov	r0, r4
 800c4e0:	4629      	mov	r1, r5
 800c4e2:	f7f3 fe77 	bl	80001d4 <__adddf3>
 800c4e6:	4602      	mov	r2, r0
 800c4e8:	460b      	mov	r3, r1
 800c4ea:	4630      	mov	r0, r6
 800c4ec:	4639      	mov	r1, r7
 800c4ee:	f7f4 f951 	bl	8000794 <__aeabi_ddiv>
 800c4f2:	f04f 0a01 	mov.w	sl, #1
 800c4f6:	4604      	mov	r4, r0
 800c4f8:	460d      	mov	r5, r1
 800c4fa:	e764      	b.n	800c3c6 <atan+0xce>
 800c4fc:	4b49      	ldr	r3, [pc, #292]	; (800c624 <atan+0x32c>)
 800c4fe:	429e      	cmp	r6, r3
 800c500:	dc1d      	bgt.n	800c53e <atan+0x246>
 800c502:	ee10 0a10 	vmov	r0, s0
 800c506:	2200      	movs	r2, #0
 800c508:	4b47      	ldr	r3, [pc, #284]	; (800c628 <atan+0x330>)
 800c50a:	4629      	mov	r1, r5
 800c50c:	f7f3 fe60 	bl	80001d0 <__aeabi_dsub>
 800c510:	2200      	movs	r2, #0
 800c512:	4606      	mov	r6, r0
 800c514:	460f      	mov	r7, r1
 800c516:	4b44      	ldr	r3, [pc, #272]	; (800c628 <atan+0x330>)
 800c518:	4620      	mov	r0, r4
 800c51a:	4629      	mov	r1, r5
 800c51c:	f7f4 f810 	bl	8000540 <__aeabi_dmul>
 800c520:	2200      	movs	r2, #0
 800c522:	4b3e      	ldr	r3, [pc, #248]	; (800c61c <atan+0x324>)
 800c524:	f7f3 fe56 	bl	80001d4 <__adddf3>
 800c528:	4602      	mov	r2, r0
 800c52a:	460b      	mov	r3, r1
 800c52c:	4630      	mov	r0, r6
 800c52e:	4639      	mov	r1, r7
 800c530:	f7f4 f930 	bl	8000794 <__aeabi_ddiv>
 800c534:	f04f 0a02 	mov.w	sl, #2
 800c538:	4604      	mov	r4, r0
 800c53a:	460d      	mov	r5, r1
 800c53c:	e743      	b.n	800c3c6 <atan+0xce>
 800c53e:	462b      	mov	r3, r5
 800c540:	ee10 2a10 	vmov	r2, s0
 800c544:	2000      	movs	r0, #0
 800c546:	4939      	ldr	r1, [pc, #228]	; (800c62c <atan+0x334>)
 800c548:	f7f4 f924 	bl	8000794 <__aeabi_ddiv>
 800c54c:	f04f 0a03 	mov.w	sl, #3
 800c550:	4604      	mov	r4, r0
 800c552:	460d      	mov	r5, r1
 800c554:	e737      	b.n	800c3c6 <atan+0xce>
 800c556:	4b36      	ldr	r3, [pc, #216]	; (800c630 <atan+0x338>)
 800c558:	4e36      	ldr	r6, [pc, #216]	; (800c634 <atan+0x33c>)
 800c55a:	ea4f 0aca 	mov.w	sl, sl, lsl #3
 800c55e:	4456      	add	r6, sl
 800c560:	449a      	add	sl, r3
 800c562:	e9da 2300 	ldrd	r2, r3, [sl]
 800c566:	f7f3 fe33 	bl	80001d0 <__aeabi_dsub>
 800c56a:	4622      	mov	r2, r4
 800c56c:	462b      	mov	r3, r5
 800c56e:	f7f3 fe2f 	bl	80001d0 <__aeabi_dsub>
 800c572:	4602      	mov	r2, r0
 800c574:	460b      	mov	r3, r1
 800c576:	e9d6 0100 	ldrd	r0, r1, [r6]
 800c57a:	f7f3 fe29 	bl	80001d0 <__aeabi_dsub>
 800c57e:	f1bb 0f00 	cmp.w	fp, #0
 800c582:	4604      	mov	r4, r0
 800c584:	460d      	mov	r5, r1
 800c586:	f6bf aed6 	bge.w	800c336 <atan+0x3e>
 800c58a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c58e:	461d      	mov	r5, r3
 800c590:	e6d1      	b.n	800c336 <atan+0x3e>
 800c592:	a51d      	add	r5, pc, #116	; (adr r5, 800c608 <atan+0x310>)
 800c594:	e9d5 4500 	ldrd	r4, r5, [r5]
 800c598:	e6cd      	b.n	800c336 <atan+0x3e>
 800c59a:	bf00      	nop
 800c59c:	f3af 8000 	nop.w
 800c5a0:	54442d18 	.word	0x54442d18
 800c5a4:	3ff921fb 	.word	0x3ff921fb
 800c5a8:	8800759c 	.word	0x8800759c
 800c5ac:	7e37e43c 	.word	0x7e37e43c
 800c5b0:	e322da11 	.word	0xe322da11
 800c5b4:	3f90ad3a 	.word	0x3f90ad3a
 800c5b8:	24760deb 	.word	0x24760deb
 800c5bc:	3fa97b4b 	.word	0x3fa97b4b
 800c5c0:	a0d03d51 	.word	0xa0d03d51
 800c5c4:	3fb10d66 	.word	0x3fb10d66
 800c5c8:	c54c206e 	.word	0xc54c206e
 800c5cc:	3fb745cd 	.word	0x3fb745cd
 800c5d0:	920083ff 	.word	0x920083ff
 800c5d4:	3fc24924 	.word	0x3fc24924
 800c5d8:	5555550d 	.word	0x5555550d
 800c5dc:	3fd55555 	.word	0x3fd55555
 800c5e0:	2c6a6c2f 	.word	0x2c6a6c2f
 800c5e4:	bfa2b444 	.word	0xbfa2b444
 800c5e8:	52defd9a 	.word	0x52defd9a
 800c5ec:	3fadde2d 	.word	0x3fadde2d
 800c5f0:	af749a6d 	.word	0xaf749a6d
 800c5f4:	3fb3b0f2 	.word	0x3fb3b0f2
 800c5f8:	fe231671 	.word	0xfe231671
 800c5fc:	3fbc71c6 	.word	0x3fbc71c6
 800c600:	9998ebc4 	.word	0x9998ebc4
 800c604:	3fc99999 	.word	0x3fc99999
 800c608:	54442d18 	.word	0x54442d18
 800c60c:	bff921fb 	.word	0xbff921fb
 800c610:	440fffff 	.word	0x440fffff
 800c614:	7ff00000 	.word	0x7ff00000
 800c618:	3fdbffff 	.word	0x3fdbffff
 800c61c:	3ff00000 	.word	0x3ff00000
 800c620:	3ff2ffff 	.word	0x3ff2ffff
 800c624:	40037fff 	.word	0x40037fff
 800c628:	3ff80000 	.word	0x3ff80000
 800c62c:	bff00000 	.word	0xbff00000
 800c630:	0800c720 	.word	0x0800c720
 800c634:	0800c700 	.word	0x0800c700

0800c638 <fabs>:
 800c638:	ec51 0b10 	vmov	r0, r1, d0
 800c63c:	ee10 2a10 	vmov	r2, s0
 800c640:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800c644:	ec43 2b10 	vmov	d0, r2, r3
 800c648:	4770      	bx	lr

0800c64a <matherr>:
 800c64a:	2000      	movs	r0, #0
 800c64c:	4770      	bx	lr
	...

0800c650 <nan>:
 800c650:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800c658 <nan+0x8>
 800c654:	4770      	bx	lr
 800c656:	bf00      	nop
 800c658:	00000000 	.word	0x00000000
 800c65c:	7ff80000 	.word	0x7ff80000

0800c660 <_init>:
 800c660:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c662:	bf00      	nop
 800c664:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c666:	bc08      	pop	{r3}
 800c668:	469e      	mov	lr, r3
 800c66a:	4770      	bx	lr

0800c66c <_fini>:
 800c66c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c66e:	bf00      	nop
 800c670:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c672:	bc08      	pop	{r3}
 800c674:	469e      	mov	lr, r3
 800c676:	4770      	bx	lr
