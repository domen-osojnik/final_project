
naloga_imu.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008654  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000078  080087dc  080087dc  000187dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008854  08008854  0002017c  2**0
                  CONTENTS
  4 .ARM          00000000  08008854  08008854  0002017c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08008854  08008854  0002017c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008854  08008854  00018854  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008858  08008858  00018858  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000017c  20000000  0800885c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001274  2000017c  080089d8  0002017c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200013f0  080089d8  000213f0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002017c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016e0a  00000000  00000000  000201ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000031b2  00000000  00000000  00036fb6  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000f30  00000000  00000000  0003a168  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000db8  00000000  00000000  0003b098  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000202b2  00000000  00000000  0003be50  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00010537  00000000  00000000  0005c102  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000b0caa  00000000  00000000  0006c639  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0011d2e3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003d80  00000000  00000000  0011d360  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000017c 	.word	0x2000017c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080087c4 	.word	0x080087c4

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000180 	.word	0x20000180
 80001c4:	080087c4 	.word	0x080087c4

080001c8 <i2c1_pisiRegister>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

uint8_t i2c1_pisiRegister(uint8_t naprava, uint8_t reg, uint8_t podatek)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	b086      	sub	sp, #24
 80001cc:	af04      	add	r7, sp, #16
 80001ce:	4603      	mov	r3, r0
 80001d0:	71fb      	strb	r3, [r7, #7]
 80001d2:	460b      	mov	r3, r1
 80001d4:	71bb      	strb	r3, [r7, #6]
 80001d6:	4613      	mov	r3, r2
 80001d8:	717b      	strb	r3, [r7, #5]
  naprava <<= 1;
 80001da:	79fb      	ldrb	r3, [r7, #7]
 80001dc:	005b      	lsls	r3, r3, #1
 80001de:	71fb      	strb	r3, [r7, #7]
  return HAL_I2C_Mem_Write(&hi2c1, naprava, reg, I2C_MEMADD_SIZE_8BIT, &podatek, 1, 10);
 80001e0:	79fb      	ldrb	r3, [r7, #7]
 80001e2:	b299      	uxth	r1, r3
 80001e4:	79bb      	ldrb	r3, [r7, #6]
 80001e6:	b29a      	uxth	r2, r3
 80001e8:	230a      	movs	r3, #10
 80001ea:	9302      	str	r3, [sp, #8]
 80001ec:	2301      	movs	r3, #1
 80001ee:	9301      	str	r3, [sp, #4]
 80001f0:	1d7b      	adds	r3, r7, #5
 80001f2:	9300      	str	r3, [sp, #0]
 80001f4:	2301      	movs	r3, #1
 80001f6:	4804      	ldr	r0, [pc, #16]	; (8000208 <i2c1_pisiRegister+0x40>)
 80001f8:	f000 fede 	bl	8000fb8 <HAL_I2C_Mem_Write>
 80001fc:	4603      	mov	r3, r0
}
 80001fe:	4618      	mov	r0, r3
 8000200:	3708      	adds	r7, #8
 8000202:	46bd      	mov	sp, r7
 8000204:	bd80      	pop	{r7, pc}
 8000206:	bf00      	nop
 8000208:	200003bc 	.word	0x200003bc

0800020c <i2c1_beriRegistre>:

void i2c1_beriRegistre(uint8_t naprava, uint8_t reg, uint8_t* podatek, uint8_t dolzina)
{
 800020c:	b580      	push	{r7, lr}
 800020e:	b086      	sub	sp, #24
 8000210:	af04      	add	r7, sp, #16
 8000212:	603a      	str	r2, [r7, #0]
 8000214:	461a      	mov	r2, r3
 8000216:	4603      	mov	r3, r0
 8000218:	71fb      	strb	r3, [r7, #7]
 800021a:	460b      	mov	r3, r1
 800021c:	71bb      	strb	r3, [r7, #6]
 800021e:	4613      	mov	r3, r2
 8000220:	717b      	strb	r3, [r7, #5]
  if ((dolzina>1)&&(naprava==0x19))  // ce je naprava 0x19 moramo postaviti ta bit, ce zelimo brati vec zlogov
 8000222:	797b      	ldrb	r3, [r7, #5]
 8000224:	2b01      	cmp	r3, #1
 8000226:	d906      	bls.n	8000236 <i2c1_beriRegistre+0x2a>
 8000228:	79fb      	ldrb	r3, [r7, #7]
 800022a:	2b19      	cmp	r3, #25
 800022c:	d103      	bne.n	8000236 <i2c1_beriRegistre+0x2a>
    reg |= 0x80;
 800022e:	79bb      	ldrb	r3, [r7, #6]
 8000230:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000234:	71bb      	strb	r3, [r7, #6]
  naprava <<= 1;
 8000236:	79fb      	ldrb	r3, [r7, #7]
 8000238:	005b      	lsls	r3, r3, #1
 800023a:	71fb      	strb	r3, [r7, #7]
  HAL_I2C_Mem_Read(&hi2c1, naprava, reg, I2C_MEMADD_SIZE_8BIT, podatek, dolzina, dolzina);
 800023c:	79fb      	ldrb	r3, [r7, #7]
 800023e:	b299      	uxth	r1, r3
 8000240:	79bb      	ldrb	r3, [r7, #6]
 8000242:	b298      	uxth	r0, r3
 8000244:	797b      	ldrb	r3, [r7, #5]
 8000246:	b29b      	uxth	r3, r3
 8000248:	797a      	ldrb	r2, [r7, #5]
 800024a:	9202      	str	r2, [sp, #8]
 800024c:	9301      	str	r3, [sp, #4]
 800024e:	683b      	ldr	r3, [r7, #0]
 8000250:	9300      	str	r3, [sp, #0]
 8000252:	2301      	movs	r3, #1
 8000254:	4602      	mov	r2, r0
 8000256:	4803      	ldr	r0, [pc, #12]	; (8000264 <i2c1_beriRegistre+0x58>)
 8000258:	f000 ffc2 	bl	80011e0 <HAL_I2C_Mem_Read>
}
 800025c:	bf00      	nop
 800025e:	3708      	adds	r7, #8
 8000260:	46bd      	mov	sp, r7
 8000262:	bd80      	pop	{r7, pc}
 8000264:	200003bc 	.word	0x200003bc

08000268 <initLSM303DLHC>:

void initLSM303DLHC()
{
 8000268:	b580      	push	{r7, lr}
 800026a:	af00      	add	r7, sp, #0
  HAL_Delay(10);
 800026c:	200a      	movs	r0, #10
 800026e:	f000 fb33 	bl	80008d8 <HAL_Delay>
  // Za potrebe testa, moramo testni napravi sporociti kateri senzor imamo
  #define OLD_SENSOR 0x73 // Odkomentiramo za LSM303DLHC / stari senzor
  //#define NEW_SENSOR 0x6E // Odkomentiramo za LSM303AGR / novi senzor

  #if defined(OLD_SENSOR) && !defined(NEW_SENSOR)
  i2c1_pisiRegister(0x1e, 0x4F, OLD_SENSOR); // Povemo testni napravi, da imamo stari senzor
 8000272:	2273      	movs	r2, #115	; 0x73
 8000274:	214f      	movs	r1, #79	; 0x4f
 8000276:	201e      	movs	r0, #30
 8000278:	f7ff ffa6 	bl	80001c8 <i2c1_pisiRegister>
  #elif !defined(OLD_SENSOR) && defined(NEW_SENSOR)
  i2c1_pisiRegister(0x1e, 0x4F, NEW_SENSOR); // Povemo testni napravi, da imamo novi senzor
  #else
  for(;;); // V primeru napake, pocakamo tukaj
  #endif
  HAL_Delay(100);
 800027c:	2064      	movs	r0, #100	; 0x64
 800027e:	f000 fb2b 	bl	80008d8 <HAL_Delay>

  // inicializiraj pospeskometer
  i2c1_pisiRegister(0x19, 0x20, 0x27);  // zbudi pospeskometer in omogoci osi
 8000282:	2227      	movs	r2, #39	; 0x27
 8000284:	2120      	movs	r1, #32
 8000286:	2019      	movs	r0, #25
 8000288:	f7ff ff9e 	bl	80001c8 <i2c1_pisiRegister>
  i2c1_pisiRegister(0x19, 0x23, 0x88);  // nastavi posodobitev samo ko se prebere vrednost ter visoko locljivost
 800028c:	2288      	movs	r2, #136	; 0x88
 800028e:	2123      	movs	r1, #35	; 0x23
 8000290:	2019      	movs	r0, #25
 8000292:	f7ff ff99 	bl	80001c8 <i2c1_pisiRegister>
}
 8000296:	bf00      	nop
 8000298:	bd80      	pop	{r7, pc}
	...

0800029c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800029c:	b580      	push	{r7, lr}
 800029e:	b082      	sub	sp, #8
 80002a0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80002a2:	f000 fab3 	bl	800080c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80002a6:	f000 f82f 	bl	8000308 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80002aa:	f000 f909 	bl	80004c0 <MX_GPIO_Init>
  MX_I2C1_Init();
 80002ae:	f000 f88b 	bl	80003c8 <MX_I2C1_Init>
  MX_SPI1_Init();
 80002b2:	f000 f8c7 	bl	8000444 <MX_SPI1_Init>
  MX_USB_DEVICE_Init();
 80002b6:	f007 fd91 	bl	8007ddc <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
  __HAL_I2C_ENABLE(&hi2c1);
 80002ba:	4b11      	ldr	r3, [pc, #68]	; (8000300 <main+0x64>)
 80002bc:	681b      	ldr	r3, [r3, #0]
 80002be:	681a      	ldr	r2, [r3, #0]
 80002c0:	4b0f      	ldr	r3, [pc, #60]	; (8000300 <main+0x64>)
 80002c2:	681b      	ldr	r3, [r3, #0]
 80002c4:	f042 0201 	orr.w	r2, r2, #1
 80002c8:	601a      	str	r2, [r3, #0]
  initLSM303DLHC();
 80002ca:	f7ff ffcd 	bl	8000268 <initLSM303DLHC>

  int16_t meritev[4];
  meritev[0] = 0xaaab;// glava za zaznamek zacetek paketa
 80002ce:	f64a 23ab 	movw	r3, #43691	; 0xaaab
 80002d2:	803b      	strh	r3, [r7, #0]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	    HAL_Delay(100);
 80002d4:	2064      	movs	r0, #100	; 0x64
 80002d6:	f000 faff 	bl	80008d8 <HAL_Delay>

	    i2c1_beriRegistre(0x19, 0x28,(uint8_t*)&meritev[1], 6);
 80002da:	463b      	mov	r3, r7
 80002dc:	1c9a      	adds	r2, r3, #2
 80002de:	2306      	movs	r3, #6
 80002e0:	2128      	movs	r1, #40	; 0x28
 80002e2:	2019      	movs	r0, #25
 80002e4:	f7ff ff92 	bl	800020c <i2c1_beriRegistre>

	    CDC_Transmit_FS((uint8_t*)&meritev, 8);
 80002e8:	463b      	mov	r3, r7
 80002ea:	2108      	movs	r1, #8
 80002ec:	4618      	mov	r0, r3
 80002ee:	f007 fe33 	bl	8007f58 <CDC_Transmit_FS>

	    HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_13);
 80002f2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80002f6:	4803      	ldr	r0, [pc, #12]	; (8000304 <main+0x68>)
 80002f8:	f000 fdb4 	bl	8000e64 <HAL_GPIO_TogglePin>
  {
 80002fc:	e7ea      	b.n	80002d4 <main+0x38>
 80002fe:	bf00      	nop
 8000300:	200003bc 	.word	0x200003bc
 8000304:	48001000 	.word	0x48001000

08000308 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000308:	b580      	push	{r7, lr}
 800030a:	b09e      	sub	sp, #120	; 0x78
 800030c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800030e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000312:	2228      	movs	r2, #40	; 0x28
 8000314:	2100      	movs	r1, #0
 8000316:	4618      	mov	r0, r3
 8000318:	f008 fa4c 	bl	80087b4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800031c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000320:	2200      	movs	r2, #0
 8000322:	601a      	str	r2, [r3, #0]
 8000324:	605a      	str	r2, [r3, #4]
 8000326:	609a      	str	r2, [r3, #8]
 8000328:	60da      	str	r2, [r3, #12]
 800032a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800032c:	463b      	mov	r3, r7
 800032e:	223c      	movs	r2, #60	; 0x3c
 8000330:	2100      	movs	r1, #0
 8000332:	4618      	mov	r0, r3
 8000334:	f008 fa3e 	bl	80087b4 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8000338:	2303      	movs	r3, #3
 800033a:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800033c:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000340:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000342:	2300      	movs	r3, #0
 8000344:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000346:	2301      	movs	r3, #1
 8000348:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800034a:	2310      	movs	r3, #16
 800034c:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800034e:	2302      	movs	r3, #2
 8000350:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000352:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000356:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000358:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800035c:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800035e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000362:	4618      	mov	r0, r3
 8000364:	f002 fdf6 	bl	8002f54 <HAL_RCC_OscConfig>
 8000368:	4603      	mov	r3, r0
 800036a:	2b00      	cmp	r3, #0
 800036c:	d001      	beq.n	8000372 <SystemClock_Config+0x6a>
  {
    Error_Handler();
 800036e:	f000 f927 	bl	80005c0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000372:	230f      	movs	r3, #15
 8000374:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000376:	2302      	movs	r3, #2
 8000378:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800037a:	2300      	movs	r3, #0
 800037c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800037e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000382:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000384:	2300      	movs	r3, #0
 8000386:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000388:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800038c:	2102      	movs	r1, #2
 800038e:	4618      	mov	r0, r3
 8000390:	f003 fce8 	bl	8003d64 <HAL_RCC_ClockConfig>
 8000394:	4603      	mov	r3, r0
 8000396:	2b00      	cmp	r3, #0
 8000398:	d001      	beq.n	800039e <SystemClock_Config+0x96>
  {
    Error_Handler();
 800039a:	f000 f911 	bl	80005c0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_I2C1;
 800039e:	4b09      	ldr	r3, [pc, #36]	; (80003c4 <SystemClock_Config+0xbc>)
 80003a0:	603b      	str	r3, [r7, #0]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 80003a2:	2300      	movs	r3, #0
 80003a4:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.USBClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 80003a6:	2300      	movs	r3, #0
 80003a8:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80003aa:	463b      	mov	r3, r7
 80003ac:	4618      	mov	r0, r3
 80003ae:	f003 febf 	bl	8004130 <HAL_RCCEx_PeriphCLKConfig>
 80003b2:	4603      	mov	r3, r0
 80003b4:	2b00      	cmp	r3, #0
 80003b6:	d001      	beq.n	80003bc <SystemClock_Config+0xb4>
  {
    Error_Handler();
 80003b8:	f000 f902 	bl	80005c0 <Error_Handler>
  }
}
 80003bc:	bf00      	nop
 80003be:	3778      	adds	r7, #120	; 0x78
 80003c0:	46bd      	mov	sp, r7
 80003c2:	bd80      	pop	{r7, pc}
 80003c4:	00020020 	.word	0x00020020

080003c8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80003c8:	b580      	push	{r7, lr}
 80003ca:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80003cc:	4b1b      	ldr	r3, [pc, #108]	; (800043c <MX_I2C1_Init+0x74>)
 80003ce:	4a1c      	ldr	r2, [pc, #112]	; (8000440 <MX_I2C1_Init+0x78>)
 80003d0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x0000020B;
 80003d2:	4b1a      	ldr	r3, [pc, #104]	; (800043c <MX_I2C1_Init+0x74>)
 80003d4:	f240 220b 	movw	r2, #523	; 0x20b
 80003d8:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80003da:	4b18      	ldr	r3, [pc, #96]	; (800043c <MX_I2C1_Init+0x74>)
 80003dc:	2200      	movs	r2, #0
 80003de:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80003e0:	4b16      	ldr	r3, [pc, #88]	; (800043c <MX_I2C1_Init+0x74>)
 80003e2:	2201      	movs	r2, #1
 80003e4:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80003e6:	4b15      	ldr	r3, [pc, #84]	; (800043c <MX_I2C1_Init+0x74>)
 80003e8:	2200      	movs	r2, #0
 80003ea:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80003ec:	4b13      	ldr	r3, [pc, #76]	; (800043c <MX_I2C1_Init+0x74>)
 80003ee:	2200      	movs	r2, #0
 80003f0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80003f2:	4b12      	ldr	r3, [pc, #72]	; (800043c <MX_I2C1_Init+0x74>)
 80003f4:	2200      	movs	r2, #0
 80003f6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80003f8:	4b10      	ldr	r3, [pc, #64]	; (800043c <MX_I2C1_Init+0x74>)
 80003fa:	2200      	movs	r2, #0
 80003fc:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80003fe:	4b0f      	ldr	r3, [pc, #60]	; (800043c <MX_I2C1_Init+0x74>)
 8000400:	2200      	movs	r2, #0
 8000402:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000404:	480d      	ldr	r0, [pc, #52]	; (800043c <MX_I2C1_Init+0x74>)
 8000406:	f000 fd47 	bl	8000e98 <HAL_I2C_Init>
 800040a:	4603      	mov	r3, r0
 800040c:	2b00      	cmp	r3, #0
 800040e:	d001      	beq.n	8000414 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000410:	f000 f8d6 	bl	80005c0 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000414:	2100      	movs	r1, #0
 8000416:	4809      	ldr	r0, [pc, #36]	; (800043c <MX_I2C1_Init+0x74>)
 8000418:	f001 fa18 	bl	800184c <HAL_I2CEx_ConfigAnalogFilter>
 800041c:	4603      	mov	r3, r0
 800041e:	2b00      	cmp	r3, #0
 8000420:	d001      	beq.n	8000426 <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 8000422:	f000 f8cd 	bl	80005c0 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000426:	2100      	movs	r1, #0
 8000428:	4804      	ldr	r0, [pc, #16]	; (800043c <MX_I2C1_Init+0x74>)
 800042a:	f001 fa5a 	bl	80018e2 <HAL_I2CEx_ConfigDigitalFilter>
 800042e:	4603      	mov	r3, r0
 8000430:	2b00      	cmp	r3, #0
 8000432:	d001      	beq.n	8000438 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 8000434:	f000 f8c4 	bl	80005c0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000438:	bf00      	nop
 800043a:	bd80      	pop	{r7, pc}
 800043c:	200003bc 	.word	0x200003bc
 8000440:	40005400 	.word	0x40005400

08000444 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000444:	b580      	push	{r7, lr}
 8000446:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000448:	4b1b      	ldr	r3, [pc, #108]	; (80004b8 <MX_SPI1_Init+0x74>)
 800044a:	4a1c      	ldr	r2, [pc, #112]	; (80004bc <MX_SPI1_Init+0x78>)
 800044c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800044e:	4b1a      	ldr	r3, [pc, #104]	; (80004b8 <MX_SPI1_Init+0x74>)
 8000450:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000454:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000456:	4b18      	ldr	r3, [pc, #96]	; (80004b8 <MX_SPI1_Init+0x74>)
 8000458:	2200      	movs	r2, #0
 800045a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 800045c:	4b16      	ldr	r3, [pc, #88]	; (80004b8 <MX_SPI1_Init+0x74>)
 800045e:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000462:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000464:	4b14      	ldr	r3, [pc, #80]	; (80004b8 <MX_SPI1_Init+0x74>)
 8000466:	2200      	movs	r2, #0
 8000468:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800046a:	4b13      	ldr	r3, [pc, #76]	; (80004b8 <MX_SPI1_Init+0x74>)
 800046c:	2200      	movs	r2, #0
 800046e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000470:	4b11      	ldr	r3, [pc, #68]	; (80004b8 <MX_SPI1_Init+0x74>)
 8000472:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000476:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000478:	4b0f      	ldr	r3, [pc, #60]	; (80004b8 <MX_SPI1_Init+0x74>)
 800047a:	2208      	movs	r2, #8
 800047c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800047e:	4b0e      	ldr	r3, [pc, #56]	; (80004b8 <MX_SPI1_Init+0x74>)
 8000480:	2200      	movs	r2, #0
 8000482:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000484:	4b0c      	ldr	r3, [pc, #48]	; (80004b8 <MX_SPI1_Init+0x74>)
 8000486:	2200      	movs	r2, #0
 8000488:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800048a:	4b0b      	ldr	r3, [pc, #44]	; (80004b8 <MX_SPI1_Init+0x74>)
 800048c:	2200      	movs	r2, #0
 800048e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000490:	4b09      	ldr	r3, [pc, #36]	; (80004b8 <MX_SPI1_Init+0x74>)
 8000492:	2207      	movs	r2, #7
 8000494:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000496:	4b08      	ldr	r3, [pc, #32]	; (80004b8 <MX_SPI1_Init+0x74>)
 8000498:	2200      	movs	r2, #0
 800049a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800049c:	4b06      	ldr	r3, [pc, #24]	; (80004b8 <MX_SPI1_Init+0x74>)
 800049e:	2208      	movs	r2, #8
 80004a0:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80004a2:	4805      	ldr	r0, [pc, #20]	; (80004b8 <MX_SPI1_Init+0x74>)
 80004a4:	f003 fff4 	bl	8004490 <HAL_SPI_Init>
 80004a8:	4603      	mov	r3, r0
 80004aa:	2b00      	cmp	r3, #0
 80004ac:	d001      	beq.n	80004b2 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80004ae:	f000 f887 	bl	80005c0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80004b2:	bf00      	nop
 80004b4:	bd80      	pop	{r7, pc}
 80004b6:	bf00      	nop
 80004b8:	20000408 	.word	0x20000408
 80004bc:	40013000 	.word	0x40013000

080004c0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80004c0:	b580      	push	{r7, lr}
 80004c2:	b08a      	sub	sp, #40	; 0x28
 80004c4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004c6:	f107 0314 	add.w	r3, r7, #20
 80004ca:	2200      	movs	r2, #0
 80004cc:	601a      	str	r2, [r3, #0]
 80004ce:	605a      	str	r2, [r3, #4]
 80004d0:	609a      	str	r2, [r3, #8]
 80004d2:	60da      	str	r2, [r3, #12]
 80004d4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80004d6:	4b37      	ldr	r3, [pc, #220]	; (80005b4 <MX_GPIO_Init+0xf4>)
 80004d8:	695b      	ldr	r3, [r3, #20]
 80004da:	4a36      	ldr	r2, [pc, #216]	; (80005b4 <MX_GPIO_Init+0xf4>)
 80004dc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80004e0:	6153      	str	r3, [r2, #20]
 80004e2:	4b34      	ldr	r3, [pc, #208]	; (80005b4 <MX_GPIO_Init+0xf4>)
 80004e4:	695b      	ldr	r3, [r3, #20]
 80004e6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80004ea:	613b      	str	r3, [r7, #16]
 80004ec:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80004ee:	4b31      	ldr	r3, [pc, #196]	; (80005b4 <MX_GPIO_Init+0xf4>)
 80004f0:	695b      	ldr	r3, [r3, #20]
 80004f2:	4a30      	ldr	r2, [pc, #192]	; (80005b4 <MX_GPIO_Init+0xf4>)
 80004f4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80004f8:	6153      	str	r3, [r2, #20]
 80004fa:	4b2e      	ldr	r3, [pc, #184]	; (80005b4 <MX_GPIO_Init+0xf4>)
 80004fc:	695b      	ldr	r3, [r3, #20]
 80004fe:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000502:	60fb      	str	r3, [r7, #12]
 8000504:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000506:	4b2b      	ldr	r3, [pc, #172]	; (80005b4 <MX_GPIO_Init+0xf4>)
 8000508:	695b      	ldr	r3, [r3, #20]
 800050a:	4a2a      	ldr	r2, [pc, #168]	; (80005b4 <MX_GPIO_Init+0xf4>)
 800050c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000510:	6153      	str	r3, [r2, #20]
 8000512:	4b28      	ldr	r3, [pc, #160]	; (80005b4 <MX_GPIO_Init+0xf4>)
 8000514:	695b      	ldr	r3, [r3, #20]
 8000516:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800051a:	60bb      	str	r3, [r7, #8]
 800051c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800051e:	4b25      	ldr	r3, [pc, #148]	; (80005b4 <MX_GPIO_Init+0xf4>)
 8000520:	695b      	ldr	r3, [r3, #20]
 8000522:	4a24      	ldr	r2, [pc, #144]	; (80005b4 <MX_GPIO_Init+0xf4>)
 8000524:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000528:	6153      	str	r3, [r2, #20]
 800052a:	4b22      	ldr	r3, [pc, #136]	; (80005b4 <MX_GPIO_Init+0xf4>)
 800052c:	695b      	ldr	r3, [r3, #20]
 800052e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000532:	607b      	str	r3, [r7, #4]
 8000534:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000536:	4b1f      	ldr	r3, [pc, #124]	; (80005b4 <MX_GPIO_Init+0xf4>)
 8000538:	695b      	ldr	r3, [r3, #20]
 800053a:	4a1e      	ldr	r2, [pc, #120]	; (80005b4 <MX_GPIO_Init+0xf4>)
 800053c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000540:	6153      	str	r3, [r2, #20]
 8000542:	4b1c      	ldr	r3, [pc, #112]	; (80005b4 <MX_GPIO_Init+0xf4>)
 8000544:	695b      	ldr	r3, [r3, #20]
 8000546:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800054a:	603b      	str	r3, [r7, #0]
 800054c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 800054e:	2200      	movs	r2, #0
 8000550:	f64f 7108 	movw	r1, #65288	; 0xff08
 8000554:	4818      	ldr	r0, [pc, #96]	; (80005b8 <MX_GPIO_Init+0xf8>)
 8000556:	f000 fc6d 	bl	8000e34 <HAL_GPIO_WritePin>
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
                          |LD6_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : DRDY_Pin MEMS_INT3_Pin MEMS_INT4_Pin MEMS_INT1_Pin
                           MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = DRDY_Pin|MEMS_INT3_Pin|MEMS_INT4_Pin|MEMS_INT1_Pin
 800055a:	2337      	movs	r3, #55	; 0x37
 800055c:	617b      	str	r3, [r7, #20]
                          |MEMS_INT2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800055e:	4b17      	ldr	r3, [pc, #92]	; (80005bc <MX_GPIO_Init+0xfc>)
 8000560:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000562:	2300      	movs	r3, #0
 8000564:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000566:	f107 0314 	add.w	r3, r7, #20
 800056a:	4619      	mov	r1, r3
 800056c:	4812      	ldr	r0, [pc, #72]	; (80005b8 <MX_GPIO_Init+0xf8>)
 800056e:	f000 fae7 	bl	8000b40 <HAL_GPIO_Init>

  /*Configure GPIO pins : CS_I2C_SPI_Pin LD4_Pin LD3_Pin LD5_Pin
                           LD7_Pin LD9_Pin LD10_Pin LD8_Pin
                           LD6_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 8000572:	f64f 7308 	movw	r3, #65288	; 0xff08
 8000576:	617b      	str	r3, [r7, #20]
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
                          |LD6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000578:	2301      	movs	r3, #1
 800057a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800057c:	2300      	movs	r3, #0
 800057e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000580:	2300      	movs	r3, #0
 8000582:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000584:	f107 0314 	add.w	r3, r7, #20
 8000588:	4619      	mov	r1, r3
 800058a:	480b      	ldr	r0, [pc, #44]	; (80005b8 <MX_GPIO_Init+0xf8>)
 800058c:	f000 fad8 	bl	8000b40 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000590:	2301      	movs	r3, #1
 8000592:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000594:	2300      	movs	r3, #0
 8000596:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000598:	2300      	movs	r3, #0
 800059a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800059c:	f107 0314 	add.w	r3, r7, #20
 80005a0:	4619      	mov	r1, r3
 80005a2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005a6:	f000 facb 	bl	8000b40 <HAL_GPIO_Init>

}
 80005aa:	bf00      	nop
 80005ac:	3728      	adds	r7, #40	; 0x28
 80005ae:	46bd      	mov	sp, r7
 80005b0:	bd80      	pop	{r7, pc}
 80005b2:	bf00      	nop
 80005b4:	40021000 	.word	0x40021000
 80005b8:	48001000 	.word	0x48001000
 80005bc:	10120000 	.word	0x10120000

080005c0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80005c0:	b480      	push	{r7}
 80005c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80005c4:	bf00      	nop
 80005c6:	46bd      	mov	sp, r7
 80005c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005cc:	4770      	bx	lr
	...

080005d0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	b082      	sub	sp, #8
 80005d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80005d6:	4b0f      	ldr	r3, [pc, #60]	; (8000614 <HAL_MspInit+0x44>)
 80005d8:	699b      	ldr	r3, [r3, #24]
 80005da:	4a0e      	ldr	r2, [pc, #56]	; (8000614 <HAL_MspInit+0x44>)
 80005dc:	f043 0301 	orr.w	r3, r3, #1
 80005e0:	6193      	str	r3, [r2, #24]
 80005e2:	4b0c      	ldr	r3, [pc, #48]	; (8000614 <HAL_MspInit+0x44>)
 80005e4:	699b      	ldr	r3, [r3, #24]
 80005e6:	f003 0301 	and.w	r3, r3, #1
 80005ea:	607b      	str	r3, [r7, #4]
 80005ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80005ee:	4b09      	ldr	r3, [pc, #36]	; (8000614 <HAL_MspInit+0x44>)
 80005f0:	69db      	ldr	r3, [r3, #28]
 80005f2:	4a08      	ldr	r2, [pc, #32]	; (8000614 <HAL_MspInit+0x44>)
 80005f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005f8:	61d3      	str	r3, [r2, #28]
 80005fa:	4b06      	ldr	r3, [pc, #24]	; (8000614 <HAL_MspInit+0x44>)
 80005fc:	69db      	ldr	r3, [r3, #28]
 80005fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000602:	603b      	str	r3, [r7, #0]
 8000604:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000606:	2007      	movs	r0, #7
 8000608:	f000 fa58 	bl	8000abc <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800060c:	bf00      	nop
 800060e:	3708      	adds	r7, #8
 8000610:	46bd      	mov	sp, r7
 8000612:	bd80      	pop	{r7, pc}
 8000614:	40021000 	.word	0x40021000

08000618 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	b08a      	sub	sp, #40	; 0x28
 800061c:	af00      	add	r7, sp, #0
 800061e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000620:	f107 0314 	add.w	r3, r7, #20
 8000624:	2200      	movs	r2, #0
 8000626:	601a      	str	r2, [r3, #0]
 8000628:	605a      	str	r2, [r3, #4]
 800062a:	609a      	str	r2, [r3, #8]
 800062c:	60da      	str	r2, [r3, #12]
 800062e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000630:	687b      	ldr	r3, [r7, #4]
 8000632:	681b      	ldr	r3, [r3, #0]
 8000634:	4a17      	ldr	r2, [pc, #92]	; (8000694 <HAL_I2C_MspInit+0x7c>)
 8000636:	4293      	cmp	r3, r2
 8000638:	d127      	bne.n	800068a <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800063a:	4b17      	ldr	r3, [pc, #92]	; (8000698 <HAL_I2C_MspInit+0x80>)
 800063c:	695b      	ldr	r3, [r3, #20]
 800063e:	4a16      	ldr	r2, [pc, #88]	; (8000698 <HAL_I2C_MspInit+0x80>)
 8000640:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000644:	6153      	str	r3, [r2, #20]
 8000646:	4b14      	ldr	r3, [pc, #80]	; (8000698 <HAL_I2C_MspInit+0x80>)
 8000648:	695b      	ldr	r3, [r3, #20]
 800064a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800064e:	613b      	str	r3, [r7, #16]
 8000650:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C1_SCL_Pin|I2C1_SDA_Pin;
 8000652:	23c0      	movs	r3, #192	; 0xc0
 8000654:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000656:	2312      	movs	r3, #18
 8000658:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800065a:	2301      	movs	r3, #1
 800065c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800065e:	2303      	movs	r3, #3
 8000660:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000662:	2304      	movs	r3, #4
 8000664:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000666:	f107 0314 	add.w	r3, r7, #20
 800066a:	4619      	mov	r1, r3
 800066c:	480b      	ldr	r0, [pc, #44]	; (800069c <HAL_I2C_MspInit+0x84>)
 800066e:	f000 fa67 	bl	8000b40 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000672:	4b09      	ldr	r3, [pc, #36]	; (8000698 <HAL_I2C_MspInit+0x80>)
 8000674:	69db      	ldr	r3, [r3, #28]
 8000676:	4a08      	ldr	r2, [pc, #32]	; (8000698 <HAL_I2C_MspInit+0x80>)
 8000678:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800067c:	61d3      	str	r3, [r2, #28]
 800067e:	4b06      	ldr	r3, [pc, #24]	; (8000698 <HAL_I2C_MspInit+0x80>)
 8000680:	69db      	ldr	r3, [r3, #28]
 8000682:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000686:	60fb      	str	r3, [r7, #12]
 8000688:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800068a:	bf00      	nop
 800068c:	3728      	adds	r7, #40	; 0x28
 800068e:	46bd      	mov	sp, r7
 8000690:	bd80      	pop	{r7, pc}
 8000692:	bf00      	nop
 8000694:	40005400 	.word	0x40005400
 8000698:	40021000 	.word	0x40021000
 800069c:	48000400 	.word	0x48000400

080006a0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	b08a      	sub	sp, #40	; 0x28
 80006a4:	af00      	add	r7, sp, #0
 80006a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006a8:	f107 0314 	add.w	r3, r7, #20
 80006ac:	2200      	movs	r2, #0
 80006ae:	601a      	str	r2, [r3, #0]
 80006b0:	605a      	str	r2, [r3, #4]
 80006b2:	609a      	str	r2, [r3, #8]
 80006b4:	60da      	str	r2, [r3, #12]
 80006b6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80006b8:	687b      	ldr	r3, [r7, #4]
 80006ba:	681b      	ldr	r3, [r3, #0]
 80006bc:	4a17      	ldr	r2, [pc, #92]	; (800071c <HAL_SPI_MspInit+0x7c>)
 80006be:	4293      	cmp	r3, r2
 80006c0:	d128      	bne.n	8000714 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80006c2:	4b17      	ldr	r3, [pc, #92]	; (8000720 <HAL_SPI_MspInit+0x80>)
 80006c4:	699b      	ldr	r3, [r3, #24]
 80006c6:	4a16      	ldr	r2, [pc, #88]	; (8000720 <HAL_SPI_MspInit+0x80>)
 80006c8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80006cc:	6193      	str	r3, [r2, #24]
 80006ce:	4b14      	ldr	r3, [pc, #80]	; (8000720 <HAL_SPI_MspInit+0x80>)
 80006d0:	699b      	ldr	r3, [r3, #24]
 80006d2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80006d6:	613b      	str	r3, [r7, #16]
 80006d8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006da:	4b11      	ldr	r3, [pc, #68]	; (8000720 <HAL_SPI_MspInit+0x80>)
 80006dc:	695b      	ldr	r3, [r3, #20]
 80006de:	4a10      	ldr	r2, [pc, #64]	; (8000720 <HAL_SPI_MspInit+0x80>)
 80006e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80006e4:	6153      	str	r3, [r2, #20]
 80006e6:	4b0e      	ldr	r3, [pc, #56]	; (8000720 <HAL_SPI_MspInit+0x80>)
 80006e8:	695b      	ldr	r3, [r3, #20]
 80006ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80006ee:	60fb      	str	r3, [r7, #12]
 80006f0:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MISOA7_Pin;
 80006f2:	23e0      	movs	r3, #224	; 0xe0
 80006f4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006f6:	2302      	movs	r3, #2
 80006f8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006fa:	2300      	movs	r3, #0
 80006fc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80006fe:	2303      	movs	r3, #3
 8000700:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000702:	2305      	movs	r3, #5
 8000704:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000706:	f107 0314 	add.w	r3, r7, #20
 800070a:	4619      	mov	r1, r3
 800070c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000710:	f000 fa16 	bl	8000b40 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000714:	bf00      	nop
 8000716:	3728      	adds	r7, #40	; 0x28
 8000718:	46bd      	mov	sp, r7
 800071a:	bd80      	pop	{r7, pc}
 800071c:	40013000 	.word	0x40013000
 8000720:	40021000 	.word	0x40021000

08000724 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000724:	b480      	push	{r7}
 8000726:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000728:	bf00      	nop
 800072a:	46bd      	mov	sp, r7
 800072c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000730:	4770      	bx	lr

08000732 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000732:	b480      	push	{r7}
 8000734:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000736:	e7fe      	b.n	8000736 <HardFault_Handler+0x4>

08000738 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000738:	b480      	push	{r7}
 800073a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800073c:	e7fe      	b.n	800073c <MemManage_Handler+0x4>

0800073e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800073e:	b480      	push	{r7}
 8000740:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000742:	e7fe      	b.n	8000742 <BusFault_Handler+0x4>

08000744 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000744:	b480      	push	{r7}
 8000746:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000748:	e7fe      	b.n	8000748 <UsageFault_Handler+0x4>

0800074a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800074a:	b480      	push	{r7}
 800074c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800074e:	bf00      	nop
 8000750:	46bd      	mov	sp, r7
 8000752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000756:	4770      	bx	lr

08000758 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000758:	b480      	push	{r7}
 800075a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800075c:	bf00      	nop
 800075e:	46bd      	mov	sp, r7
 8000760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000764:	4770      	bx	lr

08000766 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000766:	b480      	push	{r7}
 8000768:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800076a:	bf00      	nop
 800076c:	46bd      	mov	sp, r7
 800076e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000772:	4770      	bx	lr

08000774 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000778:	f000 f88e 	bl	8000898 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800077c:	bf00      	nop
 800077e:	bd80      	pop	{r7, pc}

08000780 <USB_LP_CAN_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN_RX0 interrupts.
  */
void USB_LP_CAN_RX0_IRQHandler(void)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000784:	4802      	ldr	r0, [pc, #8]	; (8000790 <USB_LP_CAN_RX0_IRQHandler+0x10>)
 8000786:	f001 f9fc 	bl	8001b82 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN_RX0_IRQn 1 */
}
 800078a:	bf00      	nop
 800078c:	bd80      	pop	{r7, pc}
 800078e:	bf00      	nop
 8000790:	20001104 	.word	0x20001104

08000794 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000794:	b480      	push	{r7}
 8000796:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000798:	4b06      	ldr	r3, [pc, #24]	; (80007b4 <SystemInit+0x20>)
 800079a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800079e:	4a05      	ldr	r2, [pc, #20]	; (80007b4 <SystemInit+0x20>)
 80007a0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80007a4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80007a8:	bf00      	nop
 80007aa:	46bd      	mov	sp, r7
 80007ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b0:	4770      	bx	lr
 80007b2:	bf00      	nop
 80007b4:	e000ed00 	.word	0xe000ed00

080007b8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80007b8:	f8df d034 	ldr.w	sp, [pc, #52]	; 80007f0 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80007bc:	480d      	ldr	r0, [pc, #52]	; (80007f4 <LoopForever+0x6>)
  ldr r1, =_edata
 80007be:	490e      	ldr	r1, [pc, #56]	; (80007f8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80007c0:	4a0e      	ldr	r2, [pc, #56]	; (80007fc <LoopForever+0xe>)
  movs r3, #0
 80007c2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80007c4:	e002      	b.n	80007cc <LoopCopyDataInit>

080007c6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80007c6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80007c8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80007ca:	3304      	adds	r3, #4

080007cc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80007cc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80007ce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80007d0:	d3f9      	bcc.n	80007c6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80007d2:	4a0b      	ldr	r2, [pc, #44]	; (8000800 <LoopForever+0x12>)
  ldr r4, =_ebss
 80007d4:	4c0b      	ldr	r4, [pc, #44]	; (8000804 <LoopForever+0x16>)
  movs r3, #0
 80007d6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80007d8:	e001      	b.n	80007de <LoopFillZerobss>

080007da <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80007da:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80007dc:	3204      	adds	r2, #4

080007de <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80007de:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80007e0:	d3fb      	bcc.n	80007da <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80007e2:	f7ff ffd7 	bl	8000794 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80007e6:	f007 ffc1 	bl	800876c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80007ea:	f7ff fd57 	bl	800029c <main>

080007ee <LoopForever>:

LoopForever:
    b LoopForever
 80007ee:	e7fe      	b.n	80007ee <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80007f0:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 80007f4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80007f8:	2000017c 	.word	0x2000017c
  ldr r2, =_sidata
 80007fc:	0800885c 	.word	0x0800885c
  ldr r2, =_sbss
 8000800:	2000017c 	.word	0x2000017c
  ldr r4, =_ebss
 8000804:	200013f0 	.word	0x200013f0

08000808 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000808:	e7fe      	b.n	8000808 <ADC1_2_IRQHandler>
	...

0800080c <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800080c:	b580      	push	{r7, lr}
 800080e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000810:	4b08      	ldr	r3, [pc, #32]	; (8000834 <HAL_Init+0x28>)
 8000812:	681b      	ldr	r3, [r3, #0]
 8000814:	4a07      	ldr	r2, [pc, #28]	; (8000834 <HAL_Init+0x28>)
 8000816:	f043 0310 	orr.w	r3, r3, #16
 800081a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800081c:	2003      	movs	r0, #3
 800081e:	f000 f94d 	bl	8000abc <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000822:	2000      	movs	r0, #0
 8000824:	f000 f808 	bl	8000838 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000828:	f7ff fed2 	bl	80005d0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800082c:	2300      	movs	r3, #0
}
 800082e:	4618      	mov	r0, r3
 8000830:	bd80      	pop	{r7, pc}
 8000832:	bf00      	nop
 8000834:	40022000 	.word	0x40022000

08000838 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000838:	b580      	push	{r7, lr}
 800083a:	b082      	sub	sp, #8
 800083c:	af00      	add	r7, sp, #0
 800083e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000840:	4b12      	ldr	r3, [pc, #72]	; (800088c <HAL_InitTick+0x54>)
 8000842:	681a      	ldr	r2, [r3, #0]
 8000844:	4b12      	ldr	r3, [pc, #72]	; (8000890 <HAL_InitTick+0x58>)
 8000846:	781b      	ldrb	r3, [r3, #0]
 8000848:	4619      	mov	r1, r3
 800084a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800084e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000852:	fbb2 f3f3 	udiv	r3, r2, r3
 8000856:	4618      	mov	r0, r3
 8000858:	f000 f965 	bl	8000b26 <HAL_SYSTICK_Config>
 800085c:	4603      	mov	r3, r0
 800085e:	2b00      	cmp	r3, #0
 8000860:	d001      	beq.n	8000866 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000862:	2301      	movs	r3, #1
 8000864:	e00e      	b.n	8000884 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000866:	687b      	ldr	r3, [r7, #4]
 8000868:	2b0f      	cmp	r3, #15
 800086a:	d80a      	bhi.n	8000882 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800086c:	2200      	movs	r2, #0
 800086e:	6879      	ldr	r1, [r7, #4]
 8000870:	f04f 30ff 	mov.w	r0, #4294967295
 8000874:	f000 f92d 	bl	8000ad2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000878:	4a06      	ldr	r2, [pc, #24]	; (8000894 <HAL_InitTick+0x5c>)
 800087a:	687b      	ldr	r3, [r7, #4]
 800087c:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 800087e:	2300      	movs	r3, #0
 8000880:	e000      	b.n	8000884 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000882:	2301      	movs	r3, #1
}
 8000884:	4618      	mov	r0, r3
 8000886:	3708      	adds	r7, #8
 8000888:	46bd      	mov	sp, r7
 800088a:	bd80      	pop	{r7, pc}
 800088c:	20000000 	.word	0x20000000
 8000890:	20000008 	.word	0x20000008
 8000894:	20000004 	.word	0x20000004

08000898 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000898:	b480      	push	{r7}
 800089a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800089c:	4b06      	ldr	r3, [pc, #24]	; (80008b8 <HAL_IncTick+0x20>)
 800089e:	781b      	ldrb	r3, [r3, #0]
 80008a0:	461a      	mov	r2, r3
 80008a2:	4b06      	ldr	r3, [pc, #24]	; (80008bc <HAL_IncTick+0x24>)
 80008a4:	681b      	ldr	r3, [r3, #0]
 80008a6:	4413      	add	r3, r2
 80008a8:	4a04      	ldr	r2, [pc, #16]	; (80008bc <HAL_IncTick+0x24>)
 80008aa:	6013      	str	r3, [r2, #0]
}
 80008ac:	bf00      	nop
 80008ae:	46bd      	mov	sp, r7
 80008b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b4:	4770      	bx	lr
 80008b6:	bf00      	nop
 80008b8:	20000008 	.word	0x20000008
 80008bc:	2000046c 	.word	0x2000046c

080008c0 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80008c0:	b480      	push	{r7}
 80008c2:	af00      	add	r7, sp, #0
  return uwTick;  
 80008c4:	4b03      	ldr	r3, [pc, #12]	; (80008d4 <HAL_GetTick+0x14>)
 80008c6:	681b      	ldr	r3, [r3, #0]
}
 80008c8:	4618      	mov	r0, r3
 80008ca:	46bd      	mov	sp, r7
 80008cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d0:	4770      	bx	lr
 80008d2:	bf00      	nop
 80008d4:	2000046c 	.word	0x2000046c

080008d8 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80008d8:	b580      	push	{r7, lr}
 80008da:	b084      	sub	sp, #16
 80008dc:	af00      	add	r7, sp, #0
 80008de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80008e0:	f7ff ffee 	bl	80008c0 <HAL_GetTick>
 80008e4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80008e6:	687b      	ldr	r3, [r7, #4]
 80008e8:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80008ea:	68fb      	ldr	r3, [r7, #12]
 80008ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80008f0:	d005      	beq.n	80008fe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80008f2:	4b09      	ldr	r3, [pc, #36]	; (8000918 <HAL_Delay+0x40>)
 80008f4:	781b      	ldrb	r3, [r3, #0]
 80008f6:	461a      	mov	r2, r3
 80008f8:	68fb      	ldr	r3, [r7, #12]
 80008fa:	4413      	add	r3, r2
 80008fc:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80008fe:	bf00      	nop
 8000900:	f7ff ffde 	bl	80008c0 <HAL_GetTick>
 8000904:	4602      	mov	r2, r0
 8000906:	68bb      	ldr	r3, [r7, #8]
 8000908:	1ad3      	subs	r3, r2, r3
 800090a:	68fa      	ldr	r2, [r7, #12]
 800090c:	429a      	cmp	r2, r3
 800090e:	d8f7      	bhi.n	8000900 <HAL_Delay+0x28>
  {
  }
}
 8000910:	bf00      	nop
 8000912:	3710      	adds	r7, #16
 8000914:	46bd      	mov	sp, r7
 8000916:	bd80      	pop	{r7, pc}
 8000918:	20000008 	.word	0x20000008

0800091c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800091c:	b480      	push	{r7}
 800091e:	b085      	sub	sp, #20
 8000920:	af00      	add	r7, sp, #0
 8000922:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	f003 0307 	and.w	r3, r3, #7
 800092a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800092c:	4b0c      	ldr	r3, [pc, #48]	; (8000960 <__NVIC_SetPriorityGrouping+0x44>)
 800092e:	68db      	ldr	r3, [r3, #12]
 8000930:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000932:	68ba      	ldr	r2, [r7, #8]
 8000934:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000938:	4013      	ands	r3, r2
 800093a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800093c:	68fb      	ldr	r3, [r7, #12]
 800093e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000940:	68bb      	ldr	r3, [r7, #8]
 8000942:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000944:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000948:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800094c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800094e:	4a04      	ldr	r2, [pc, #16]	; (8000960 <__NVIC_SetPriorityGrouping+0x44>)
 8000950:	68bb      	ldr	r3, [r7, #8]
 8000952:	60d3      	str	r3, [r2, #12]
}
 8000954:	bf00      	nop
 8000956:	3714      	adds	r7, #20
 8000958:	46bd      	mov	sp, r7
 800095a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800095e:	4770      	bx	lr
 8000960:	e000ed00 	.word	0xe000ed00

08000964 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000964:	b480      	push	{r7}
 8000966:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000968:	4b04      	ldr	r3, [pc, #16]	; (800097c <__NVIC_GetPriorityGrouping+0x18>)
 800096a:	68db      	ldr	r3, [r3, #12]
 800096c:	0a1b      	lsrs	r3, r3, #8
 800096e:	f003 0307 	and.w	r3, r3, #7
}
 8000972:	4618      	mov	r0, r3
 8000974:	46bd      	mov	sp, r7
 8000976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800097a:	4770      	bx	lr
 800097c:	e000ed00 	.word	0xe000ed00

08000980 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000980:	b480      	push	{r7}
 8000982:	b083      	sub	sp, #12
 8000984:	af00      	add	r7, sp, #0
 8000986:	4603      	mov	r3, r0
 8000988:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800098a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800098e:	2b00      	cmp	r3, #0
 8000990:	db0b      	blt.n	80009aa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000992:	79fb      	ldrb	r3, [r7, #7]
 8000994:	f003 021f 	and.w	r2, r3, #31
 8000998:	4907      	ldr	r1, [pc, #28]	; (80009b8 <__NVIC_EnableIRQ+0x38>)
 800099a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800099e:	095b      	lsrs	r3, r3, #5
 80009a0:	2001      	movs	r0, #1
 80009a2:	fa00 f202 	lsl.w	r2, r0, r2
 80009a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80009aa:	bf00      	nop
 80009ac:	370c      	adds	r7, #12
 80009ae:	46bd      	mov	sp, r7
 80009b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b4:	4770      	bx	lr
 80009b6:	bf00      	nop
 80009b8:	e000e100 	.word	0xe000e100

080009bc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80009bc:	b480      	push	{r7}
 80009be:	b083      	sub	sp, #12
 80009c0:	af00      	add	r7, sp, #0
 80009c2:	4603      	mov	r3, r0
 80009c4:	6039      	str	r1, [r7, #0]
 80009c6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80009c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009cc:	2b00      	cmp	r3, #0
 80009ce:	db0a      	blt.n	80009e6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009d0:	683b      	ldr	r3, [r7, #0]
 80009d2:	b2da      	uxtb	r2, r3
 80009d4:	490c      	ldr	r1, [pc, #48]	; (8000a08 <__NVIC_SetPriority+0x4c>)
 80009d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009da:	0112      	lsls	r2, r2, #4
 80009dc:	b2d2      	uxtb	r2, r2
 80009de:	440b      	add	r3, r1
 80009e0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80009e4:	e00a      	b.n	80009fc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009e6:	683b      	ldr	r3, [r7, #0]
 80009e8:	b2da      	uxtb	r2, r3
 80009ea:	4908      	ldr	r1, [pc, #32]	; (8000a0c <__NVIC_SetPriority+0x50>)
 80009ec:	79fb      	ldrb	r3, [r7, #7]
 80009ee:	f003 030f 	and.w	r3, r3, #15
 80009f2:	3b04      	subs	r3, #4
 80009f4:	0112      	lsls	r2, r2, #4
 80009f6:	b2d2      	uxtb	r2, r2
 80009f8:	440b      	add	r3, r1
 80009fa:	761a      	strb	r2, [r3, #24]
}
 80009fc:	bf00      	nop
 80009fe:	370c      	adds	r7, #12
 8000a00:	46bd      	mov	sp, r7
 8000a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a06:	4770      	bx	lr
 8000a08:	e000e100 	.word	0xe000e100
 8000a0c:	e000ed00 	.word	0xe000ed00

08000a10 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a10:	b480      	push	{r7}
 8000a12:	b089      	sub	sp, #36	; 0x24
 8000a14:	af00      	add	r7, sp, #0
 8000a16:	60f8      	str	r0, [r7, #12]
 8000a18:	60b9      	str	r1, [r7, #8]
 8000a1a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000a1c:	68fb      	ldr	r3, [r7, #12]
 8000a1e:	f003 0307 	and.w	r3, r3, #7
 8000a22:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000a24:	69fb      	ldr	r3, [r7, #28]
 8000a26:	f1c3 0307 	rsb	r3, r3, #7
 8000a2a:	2b04      	cmp	r3, #4
 8000a2c:	bf28      	it	cs
 8000a2e:	2304      	movcs	r3, #4
 8000a30:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a32:	69fb      	ldr	r3, [r7, #28]
 8000a34:	3304      	adds	r3, #4
 8000a36:	2b06      	cmp	r3, #6
 8000a38:	d902      	bls.n	8000a40 <NVIC_EncodePriority+0x30>
 8000a3a:	69fb      	ldr	r3, [r7, #28]
 8000a3c:	3b03      	subs	r3, #3
 8000a3e:	e000      	b.n	8000a42 <NVIC_EncodePriority+0x32>
 8000a40:	2300      	movs	r3, #0
 8000a42:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a44:	f04f 32ff 	mov.w	r2, #4294967295
 8000a48:	69bb      	ldr	r3, [r7, #24]
 8000a4a:	fa02 f303 	lsl.w	r3, r2, r3
 8000a4e:	43da      	mvns	r2, r3
 8000a50:	68bb      	ldr	r3, [r7, #8]
 8000a52:	401a      	ands	r2, r3
 8000a54:	697b      	ldr	r3, [r7, #20]
 8000a56:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000a58:	f04f 31ff 	mov.w	r1, #4294967295
 8000a5c:	697b      	ldr	r3, [r7, #20]
 8000a5e:	fa01 f303 	lsl.w	r3, r1, r3
 8000a62:	43d9      	mvns	r1, r3
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a68:	4313      	orrs	r3, r2
         );
}
 8000a6a:	4618      	mov	r0, r3
 8000a6c:	3724      	adds	r7, #36	; 0x24
 8000a6e:	46bd      	mov	sp, r7
 8000a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a74:	4770      	bx	lr
	...

08000a78 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	b082      	sub	sp, #8
 8000a7c:	af00      	add	r7, sp, #0
 8000a7e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	3b01      	subs	r3, #1
 8000a84:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000a88:	d301      	bcc.n	8000a8e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000a8a:	2301      	movs	r3, #1
 8000a8c:	e00f      	b.n	8000aae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000a8e:	4a0a      	ldr	r2, [pc, #40]	; (8000ab8 <SysTick_Config+0x40>)
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	3b01      	subs	r3, #1
 8000a94:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000a96:	210f      	movs	r1, #15
 8000a98:	f04f 30ff 	mov.w	r0, #4294967295
 8000a9c:	f7ff ff8e 	bl	80009bc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000aa0:	4b05      	ldr	r3, [pc, #20]	; (8000ab8 <SysTick_Config+0x40>)
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000aa6:	4b04      	ldr	r3, [pc, #16]	; (8000ab8 <SysTick_Config+0x40>)
 8000aa8:	2207      	movs	r2, #7
 8000aaa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000aac:	2300      	movs	r3, #0
}
 8000aae:	4618      	mov	r0, r3
 8000ab0:	3708      	adds	r7, #8
 8000ab2:	46bd      	mov	sp, r7
 8000ab4:	bd80      	pop	{r7, pc}
 8000ab6:	bf00      	nop
 8000ab8:	e000e010 	.word	0xe000e010

08000abc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	b082      	sub	sp, #8
 8000ac0:	af00      	add	r7, sp, #0
 8000ac2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ac4:	6878      	ldr	r0, [r7, #4]
 8000ac6:	f7ff ff29 	bl	800091c <__NVIC_SetPriorityGrouping>
}
 8000aca:	bf00      	nop
 8000acc:	3708      	adds	r7, #8
 8000ace:	46bd      	mov	sp, r7
 8000ad0:	bd80      	pop	{r7, pc}

08000ad2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ad2:	b580      	push	{r7, lr}
 8000ad4:	b086      	sub	sp, #24
 8000ad6:	af00      	add	r7, sp, #0
 8000ad8:	4603      	mov	r3, r0
 8000ada:	60b9      	str	r1, [r7, #8]
 8000adc:	607a      	str	r2, [r7, #4]
 8000ade:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000ae0:	2300      	movs	r3, #0
 8000ae2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000ae4:	f7ff ff3e 	bl	8000964 <__NVIC_GetPriorityGrouping>
 8000ae8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000aea:	687a      	ldr	r2, [r7, #4]
 8000aec:	68b9      	ldr	r1, [r7, #8]
 8000aee:	6978      	ldr	r0, [r7, #20]
 8000af0:	f7ff ff8e 	bl	8000a10 <NVIC_EncodePriority>
 8000af4:	4602      	mov	r2, r0
 8000af6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000afa:	4611      	mov	r1, r2
 8000afc:	4618      	mov	r0, r3
 8000afe:	f7ff ff5d 	bl	80009bc <__NVIC_SetPriority>
}
 8000b02:	bf00      	nop
 8000b04:	3718      	adds	r7, #24
 8000b06:	46bd      	mov	sp, r7
 8000b08:	bd80      	pop	{r7, pc}

08000b0a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b0a:	b580      	push	{r7, lr}
 8000b0c:	b082      	sub	sp, #8
 8000b0e:	af00      	add	r7, sp, #0
 8000b10:	4603      	mov	r3, r0
 8000b12:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000b14:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b18:	4618      	mov	r0, r3
 8000b1a:	f7ff ff31 	bl	8000980 <__NVIC_EnableIRQ>
}
 8000b1e:	bf00      	nop
 8000b20:	3708      	adds	r7, #8
 8000b22:	46bd      	mov	sp, r7
 8000b24:	bd80      	pop	{r7, pc}

08000b26 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000b26:	b580      	push	{r7, lr}
 8000b28:	b082      	sub	sp, #8
 8000b2a:	af00      	add	r7, sp, #0
 8000b2c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000b2e:	6878      	ldr	r0, [r7, #4]
 8000b30:	f7ff ffa2 	bl	8000a78 <SysTick_Config>
 8000b34:	4603      	mov	r3, r0
}
 8000b36:	4618      	mov	r0, r3
 8000b38:	3708      	adds	r7, #8
 8000b3a:	46bd      	mov	sp, r7
 8000b3c:	bd80      	pop	{r7, pc}
	...

08000b40 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000b40:	b480      	push	{r7}
 8000b42:	b087      	sub	sp, #28
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	6078      	str	r0, [r7, #4]
 8000b48:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000b4e:	e154      	b.n	8000dfa <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000b50:	683b      	ldr	r3, [r7, #0]
 8000b52:	681a      	ldr	r2, [r3, #0]
 8000b54:	2101      	movs	r1, #1
 8000b56:	697b      	ldr	r3, [r7, #20]
 8000b58:	fa01 f303 	lsl.w	r3, r1, r3
 8000b5c:	4013      	ands	r3, r2
 8000b5e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000b60:	68fb      	ldr	r3, [r7, #12]
 8000b62:	2b00      	cmp	r3, #0
 8000b64:	f000 8146 	beq.w	8000df4 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000b68:	683b      	ldr	r3, [r7, #0]
 8000b6a:	685b      	ldr	r3, [r3, #4]
 8000b6c:	2b01      	cmp	r3, #1
 8000b6e:	d00b      	beq.n	8000b88 <HAL_GPIO_Init+0x48>
 8000b70:	683b      	ldr	r3, [r7, #0]
 8000b72:	685b      	ldr	r3, [r3, #4]
 8000b74:	2b02      	cmp	r3, #2
 8000b76:	d007      	beq.n	8000b88 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000b78:	683b      	ldr	r3, [r7, #0]
 8000b7a:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000b7c:	2b11      	cmp	r3, #17
 8000b7e:	d003      	beq.n	8000b88 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000b80:	683b      	ldr	r3, [r7, #0]
 8000b82:	685b      	ldr	r3, [r3, #4]
 8000b84:	2b12      	cmp	r3, #18
 8000b86:	d130      	bne.n	8000bea <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	689b      	ldr	r3, [r3, #8]
 8000b8c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000b8e:	697b      	ldr	r3, [r7, #20]
 8000b90:	005b      	lsls	r3, r3, #1
 8000b92:	2203      	movs	r2, #3
 8000b94:	fa02 f303 	lsl.w	r3, r2, r3
 8000b98:	43db      	mvns	r3, r3
 8000b9a:	693a      	ldr	r2, [r7, #16]
 8000b9c:	4013      	ands	r3, r2
 8000b9e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000ba0:	683b      	ldr	r3, [r7, #0]
 8000ba2:	68da      	ldr	r2, [r3, #12]
 8000ba4:	697b      	ldr	r3, [r7, #20]
 8000ba6:	005b      	lsls	r3, r3, #1
 8000ba8:	fa02 f303 	lsl.w	r3, r2, r3
 8000bac:	693a      	ldr	r2, [r7, #16]
 8000bae:	4313      	orrs	r3, r2
 8000bb0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	693a      	ldr	r2, [r7, #16]
 8000bb6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	685b      	ldr	r3, [r3, #4]
 8000bbc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000bbe:	2201      	movs	r2, #1
 8000bc0:	697b      	ldr	r3, [r7, #20]
 8000bc2:	fa02 f303 	lsl.w	r3, r2, r3
 8000bc6:	43db      	mvns	r3, r3
 8000bc8:	693a      	ldr	r2, [r7, #16]
 8000bca:	4013      	ands	r3, r2
 8000bcc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8000bce:	683b      	ldr	r3, [r7, #0]
 8000bd0:	685b      	ldr	r3, [r3, #4]
 8000bd2:	091b      	lsrs	r3, r3, #4
 8000bd4:	f003 0201 	and.w	r2, r3, #1
 8000bd8:	697b      	ldr	r3, [r7, #20]
 8000bda:	fa02 f303 	lsl.w	r3, r2, r3
 8000bde:	693a      	ldr	r2, [r7, #16]
 8000be0:	4313      	orrs	r3, r2
 8000be2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	693a      	ldr	r2, [r7, #16]
 8000be8:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	68db      	ldr	r3, [r3, #12]
 8000bee:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000bf0:	697b      	ldr	r3, [r7, #20]
 8000bf2:	005b      	lsls	r3, r3, #1
 8000bf4:	2203      	movs	r2, #3
 8000bf6:	fa02 f303 	lsl.w	r3, r2, r3
 8000bfa:	43db      	mvns	r3, r3
 8000bfc:	693a      	ldr	r2, [r7, #16]
 8000bfe:	4013      	ands	r3, r2
 8000c00:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000c02:	683b      	ldr	r3, [r7, #0]
 8000c04:	689a      	ldr	r2, [r3, #8]
 8000c06:	697b      	ldr	r3, [r7, #20]
 8000c08:	005b      	lsls	r3, r3, #1
 8000c0a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c0e:	693a      	ldr	r2, [r7, #16]
 8000c10:	4313      	orrs	r3, r2
 8000c12:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	693a      	ldr	r2, [r7, #16]
 8000c18:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000c1a:	683b      	ldr	r3, [r7, #0]
 8000c1c:	685b      	ldr	r3, [r3, #4]
 8000c1e:	2b02      	cmp	r3, #2
 8000c20:	d003      	beq.n	8000c2a <HAL_GPIO_Init+0xea>
 8000c22:	683b      	ldr	r3, [r7, #0]
 8000c24:	685b      	ldr	r3, [r3, #4]
 8000c26:	2b12      	cmp	r3, #18
 8000c28:	d123      	bne.n	8000c72 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000c2a:	697b      	ldr	r3, [r7, #20]
 8000c2c:	08da      	lsrs	r2, r3, #3
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	3208      	adds	r2, #8
 8000c32:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000c36:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000c38:	697b      	ldr	r3, [r7, #20]
 8000c3a:	f003 0307 	and.w	r3, r3, #7
 8000c3e:	009b      	lsls	r3, r3, #2
 8000c40:	220f      	movs	r2, #15
 8000c42:	fa02 f303 	lsl.w	r3, r2, r3
 8000c46:	43db      	mvns	r3, r3
 8000c48:	693a      	ldr	r2, [r7, #16]
 8000c4a:	4013      	ands	r3, r2
 8000c4c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000c4e:	683b      	ldr	r3, [r7, #0]
 8000c50:	691a      	ldr	r2, [r3, #16]
 8000c52:	697b      	ldr	r3, [r7, #20]
 8000c54:	f003 0307 	and.w	r3, r3, #7
 8000c58:	009b      	lsls	r3, r3, #2
 8000c5a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c5e:	693a      	ldr	r2, [r7, #16]
 8000c60:	4313      	orrs	r3, r2
 8000c62:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000c64:	697b      	ldr	r3, [r7, #20]
 8000c66:	08da      	lsrs	r2, r3, #3
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	3208      	adds	r2, #8
 8000c6c:	6939      	ldr	r1, [r7, #16]
 8000c6e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	681b      	ldr	r3, [r3, #0]
 8000c76:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000c78:	697b      	ldr	r3, [r7, #20]
 8000c7a:	005b      	lsls	r3, r3, #1
 8000c7c:	2203      	movs	r2, #3
 8000c7e:	fa02 f303 	lsl.w	r3, r2, r3
 8000c82:	43db      	mvns	r3, r3
 8000c84:	693a      	ldr	r2, [r7, #16]
 8000c86:	4013      	ands	r3, r2
 8000c88:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000c8a:	683b      	ldr	r3, [r7, #0]
 8000c8c:	685b      	ldr	r3, [r3, #4]
 8000c8e:	f003 0203 	and.w	r2, r3, #3
 8000c92:	697b      	ldr	r3, [r7, #20]
 8000c94:	005b      	lsls	r3, r3, #1
 8000c96:	fa02 f303 	lsl.w	r3, r2, r3
 8000c9a:	693a      	ldr	r2, [r7, #16]
 8000c9c:	4313      	orrs	r3, r2
 8000c9e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	693a      	ldr	r2, [r7, #16]
 8000ca4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000ca6:	683b      	ldr	r3, [r7, #0]
 8000ca8:	685b      	ldr	r3, [r3, #4]
 8000caa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	f000 80a0 	beq.w	8000df4 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cb4:	4b58      	ldr	r3, [pc, #352]	; (8000e18 <HAL_GPIO_Init+0x2d8>)
 8000cb6:	699b      	ldr	r3, [r3, #24]
 8000cb8:	4a57      	ldr	r2, [pc, #348]	; (8000e18 <HAL_GPIO_Init+0x2d8>)
 8000cba:	f043 0301 	orr.w	r3, r3, #1
 8000cbe:	6193      	str	r3, [r2, #24]
 8000cc0:	4b55      	ldr	r3, [pc, #340]	; (8000e18 <HAL_GPIO_Init+0x2d8>)
 8000cc2:	699b      	ldr	r3, [r3, #24]
 8000cc4:	f003 0301 	and.w	r3, r3, #1
 8000cc8:	60bb      	str	r3, [r7, #8]
 8000cca:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000ccc:	4a53      	ldr	r2, [pc, #332]	; (8000e1c <HAL_GPIO_Init+0x2dc>)
 8000cce:	697b      	ldr	r3, [r7, #20]
 8000cd0:	089b      	lsrs	r3, r3, #2
 8000cd2:	3302      	adds	r3, #2
 8000cd4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000cd8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000cda:	697b      	ldr	r3, [r7, #20]
 8000cdc:	f003 0303 	and.w	r3, r3, #3
 8000ce0:	009b      	lsls	r3, r3, #2
 8000ce2:	220f      	movs	r2, #15
 8000ce4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ce8:	43db      	mvns	r3, r3
 8000cea:	693a      	ldr	r2, [r7, #16]
 8000cec:	4013      	ands	r3, r2
 8000cee:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000cf6:	d019      	beq.n	8000d2c <HAL_GPIO_Init+0x1ec>
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	4a49      	ldr	r2, [pc, #292]	; (8000e20 <HAL_GPIO_Init+0x2e0>)
 8000cfc:	4293      	cmp	r3, r2
 8000cfe:	d013      	beq.n	8000d28 <HAL_GPIO_Init+0x1e8>
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	4a48      	ldr	r2, [pc, #288]	; (8000e24 <HAL_GPIO_Init+0x2e4>)
 8000d04:	4293      	cmp	r3, r2
 8000d06:	d00d      	beq.n	8000d24 <HAL_GPIO_Init+0x1e4>
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	4a47      	ldr	r2, [pc, #284]	; (8000e28 <HAL_GPIO_Init+0x2e8>)
 8000d0c:	4293      	cmp	r3, r2
 8000d0e:	d007      	beq.n	8000d20 <HAL_GPIO_Init+0x1e0>
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	4a46      	ldr	r2, [pc, #280]	; (8000e2c <HAL_GPIO_Init+0x2ec>)
 8000d14:	4293      	cmp	r3, r2
 8000d16:	d101      	bne.n	8000d1c <HAL_GPIO_Init+0x1dc>
 8000d18:	2304      	movs	r3, #4
 8000d1a:	e008      	b.n	8000d2e <HAL_GPIO_Init+0x1ee>
 8000d1c:	2305      	movs	r3, #5
 8000d1e:	e006      	b.n	8000d2e <HAL_GPIO_Init+0x1ee>
 8000d20:	2303      	movs	r3, #3
 8000d22:	e004      	b.n	8000d2e <HAL_GPIO_Init+0x1ee>
 8000d24:	2302      	movs	r3, #2
 8000d26:	e002      	b.n	8000d2e <HAL_GPIO_Init+0x1ee>
 8000d28:	2301      	movs	r3, #1
 8000d2a:	e000      	b.n	8000d2e <HAL_GPIO_Init+0x1ee>
 8000d2c:	2300      	movs	r3, #0
 8000d2e:	697a      	ldr	r2, [r7, #20]
 8000d30:	f002 0203 	and.w	r2, r2, #3
 8000d34:	0092      	lsls	r2, r2, #2
 8000d36:	4093      	lsls	r3, r2
 8000d38:	693a      	ldr	r2, [r7, #16]
 8000d3a:	4313      	orrs	r3, r2
 8000d3c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000d3e:	4937      	ldr	r1, [pc, #220]	; (8000e1c <HAL_GPIO_Init+0x2dc>)
 8000d40:	697b      	ldr	r3, [r7, #20]
 8000d42:	089b      	lsrs	r3, r3, #2
 8000d44:	3302      	adds	r3, #2
 8000d46:	693a      	ldr	r2, [r7, #16]
 8000d48:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000d4c:	4b38      	ldr	r3, [pc, #224]	; (8000e30 <HAL_GPIO_Init+0x2f0>)
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d52:	68fb      	ldr	r3, [r7, #12]
 8000d54:	43db      	mvns	r3, r3
 8000d56:	693a      	ldr	r2, [r7, #16]
 8000d58:	4013      	ands	r3, r2
 8000d5a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000d5c:	683b      	ldr	r3, [r7, #0]
 8000d5e:	685b      	ldr	r3, [r3, #4]
 8000d60:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	d003      	beq.n	8000d70 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8000d68:	693a      	ldr	r2, [r7, #16]
 8000d6a:	68fb      	ldr	r3, [r7, #12]
 8000d6c:	4313      	orrs	r3, r2
 8000d6e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000d70:	4a2f      	ldr	r2, [pc, #188]	; (8000e30 <HAL_GPIO_Init+0x2f0>)
 8000d72:	693b      	ldr	r3, [r7, #16]
 8000d74:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000d76:	4b2e      	ldr	r3, [pc, #184]	; (8000e30 <HAL_GPIO_Init+0x2f0>)
 8000d78:	685b      	ldr	r3, [r3, #4]
 8000d7a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d7c:	68fb      	ldr	r3, [r7, #12]
 8000d7e:	43db      	mvns	r3, r3
 8000d80:	693a      	ldr	r2, [r7, #16]
 8000d82:	4013      	ands	r3, r2
 8000d84:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000d86:	683b      	ldr	r3, [r7, #0]
 8000d88:	685b      	ldr	r3, [r3, #4]
 8000d8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d003      	beq.n	8000d9a <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8000d92:	693a      	ldr	r2, [r7, #16]
 8000d94:	68fb      	ldr	r3, [r7, #12]
 8000d96:	4313      	orrs	r3, r2
 8000d98:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000d9a:	4a25      	ldr	r2, [pc, #148]	; (8000e30 <HAL_GPIO_Init+0x2f0>)
 8000d9c:	693b      	ldr	r3, [r7, #16]
 8000d9e:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000da0:	4b23      	ldr	r3, [pc, #140]	; (8000e30 <HAL_GPIO_Init+0x2f0>)
 8000da2:	689b      	ldr	r3, [r3, #8]
 8000da4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000da6:	68fb      	ldr	r3, [r7, #12]
 8000da8:	43db      	mvns	r3, r3
 8000daa:	693a      	ldr	r2, [r7, #16]
 8000dac:	4013      	ands	r3, r2
 8000dae:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000db0:	683b      	ldr	r3, [r7, #0]
 8000db2:	685b      	ldr	r3, [r3, #4]
 8000db4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	d003      	beq.n	8000dc4 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8000dbc:	693a      	ldr	r2, [r7, #16]
 8000dbe:	68fb      	ldr	r3, [r7, #12]
 8000dc0:	4313      	orrs	r3, r2
 8000dc2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000dc4:	4a1a      	ldr	r2, [pc, #104]	; (8000e30 <HAL_GPIO_Init+0x2f0>)
 8000dc6:	693b      	ldr	r3, [r7, #16]
 8000dc8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000dca:	4b19      	ldr	r3, [pc, #100]	; (8000e30 <HAL_GPIO_Init+0x2f0>)
 8000dcc:	68db      	ldr	r3, [r3, #12]
 8000dce:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000dd0:	68fb      	ldr	r3, [r7, #12]
 8000dd2:	43db      	mvns	r3, r3
 8000dd4:	693a      	ldr	r2, [r7, #16]
 8000dd6:	4013      	ands	r3, r2
 8000dd8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000dda:	683b      	ldr	r3, [r7, #0]
 8000ddc:	685b      	ldr	r3, [r3, #4]
 8000dde:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d003      	beq.n	8000dee <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8000de6:	693a      	ldr	r2, [r7, #16]
 8000de8:	68fb      	ldr	r3, [r7, #12]
 8000dea:	4313      	orrs	r3, r2
 8000dec:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000dee:	4a10      	ldr	r2, [pc, #64]	; (8000e30 <HAL_GPIO_Init+0x2f0>)
 8000df0:	693b      	ldr	r3, [r7, #16]
 8000df2:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8000df4:	697b      	ldr	r3, [r7, #20]
 8000df6:	3301      	adds	r3, #1
 8000df8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000dfa:	683b      	ldr	r3, [r7, #0]
 8000dfc:	681a      	ldr	r2, [r3, #0]
 8000dfe:	697b      	ldr	r3, [r7, #20]
 8000e00:	fa22 f303 	lsr.w	r3, r2, r3
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	f47f aea3 	bne.w	8000b50 <HAL_GPIO_Init+0x10>
  }
}
 8000e0a:	bf00      	nop
 8000e0c:	371c      	adds	r7, #28
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e14:	4770      	bx	lr
 8000e16:	bf00      	nop
 8000e18:	40021000 	.word	0x40021000
 8000e1c:	40010000 	.word	0x40010000
 8000e20:	48000400 	.word	0x48000400
 8000e24:	48000800 	.word	0x48000800
 8000e28:	48000c00 	.word	0x48000c00
 8000e2c:	48001000 	.word	0x48001000
 8000e30:	40010400 	.word	0x40010400

08000e34 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000e34:	b480      	push	{r7}
 8000e36:	b083      	sub	sp, #12
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	6078      	str	r0, [r7, #4]
 8000e3c:	460b      	mov	r3, r1
 8000e3e:	807b      	strh	r3, [r7, #2]
 8000e40:	4613      	mov	r3, r2
 8000e42:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000e44:	787b      	ldrb	r3, [r7, #1]
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d003      	beq.n	8000e52 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000e4a:	887a      	ldrh	r2, [r7, #2]
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000e50:	e002      	b.n	8000e58 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000e52:	887a      	ldrh	r2, [r7, #2]
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000e58:	bf00      	nop
 8000e5a:	370c      	adds	r7, #12
 8000e5c:	46bd      	mov	sp, r7
 8000e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e62:	4770      	bx	lr

08000e64 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000e64:	b480      	push	{r7}
 8000e66:	b085      	sub	sp, #20
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	6078      	str	r0, [r7, #4]
 8000e6c:	460b      	mov	r3, r1
 8000e6e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	695b      	ldr	r3, [r3, #20]
 8000e74:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000e76:	887a      	ldrh	r2, [r7, #2]
 8000e78:	68fb      	ldr	r3, [r7, #12]
 8000e7a:	4013      	ands	r3, r2
 8000e7c:	041a      	lsls	r2, r3, #16
 8000e7e:	68fb      	ldr	r3, [r7, #12]
 8000e80:	43d9      	mvns	r1, r3
 8000e82:	887b      	ldrh	r3, [r7, #2]
 8000e84:	400b      	ands	r3, r1
 8000e86:	431a      	orrs	r2, r3
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	619a      	str	r2, [r3, #24]
}
 8000e8c:	bf00      	nop
 8000e8e:	3714      	adds	r7, #20
 8000e90:	46bd      	mov	sp, r7
 8000e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e96:	4770      	bx	lr

08000e98 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b082      	sub	sp, #8
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	d101      	bne.n	8000eaa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8000ea6:	2301      	movs	r3, #1
 8000ea8:	e081      	b.n	8000fae <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8000eb0:	b2db      	uxtb	r3, r3
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d106      	bne.n	8000ec4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	2200      	movs	r2, #0
 8000eba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8000ebe:	6878      	ldr	r0, [r7, #4]
 8000ec0:	f7ff fbaa 	bl	8000618 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	2224      	movs	r2, #36	; 0x24
 8000ec8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	681a      	ldr	r2, [r3, #0]
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	f022 0201 	bic.w	r2, r2, #1
 8000eda:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	685a      	ldr	r2, [r3, #4]
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8000ee8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	689a      	ldr	r2, [r3, #8]
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8000ef8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	68db      	ldr	r3, [r3, #12]
 8000efe:	2b01      	cmp	r3, #1
 8000f00:	d107      	bne.n	8000f12 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	689a      	ldr	r2, [r3, #8]
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000f0e:	609a      	str	r2, [r3, #8]
 8000f10:	e006      	b.n	8000f20 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	689a      	ldr	r2, [r3, #8]
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8000f1e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	68db      	ldr	r3, [r3, #12]
 8000f24:	2b02      	cmp	r3, #2
 8000f26:	d104      	bne.n	8000f32 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000f30:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	685b      	ldr	r3, [r3, #4]
 8000f38:	687a      	ldr	r2, [r7, #4]
 8000f3a:	6812      	ldr	r2, [r2, #0]
 8000f3c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000f40:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000f44:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	68da      	ldr	r2, [r3, #12]
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8000f54:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	691a      	ldr	r2, [r3, #16]
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	695b      	ldr	r3, [r3, #20]
 8000f5e:	ea42 0103 	orr.w	r1, r2, r3
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	699b      	ldr	r3, [r3, #24]
 8000f66:	021a      	lsls	r2, r3, #8
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	430a      	orrs	r2, r1
 8000f6e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	69d9      	ldr	r1, [r3, #28]
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	6a1a      	ldr	r2, [r3, #32]
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	430a      	orrs	r2, r1
 8000f7e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	681a      	ldr	r2, [r3, #0]
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	f042 0201 	orr.w	r2, r2, #1
 8000f8e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	2200      	movs	r2, #0
 8000f94:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	2220      	movs	r2, #32
 8000f9a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8000fac:	2300      	movs	r3, #0
}
 8000fae:	4618      	mov	r0, r3
 8000fb0:	3708      	adds	r7, #8
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	bd80      	pop	{r7, pc}
	...

08000fb8 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b088      	sub	sp, #32
 8000fbc:	af02      	add	r7, sp, #8
 8000fbe:	60f8      	str	r0, [r7, #12]
 8000fc0:	4608      	mov	r0, r1
 8000fc2:	4611      	mov	r1, r2
 8000fc4:	461a      	mov	r2, r3
 8000fc6:	4603      	mov	r3, r0
 8000fc8:	817b      	strh	r3, [r7, #10]
 8000fca:	460b      	mov	r3, r1
 8000fcc:	813b      	strh	r3, [r7, #8]
 8000fce:	4613      	mov	r3, r2
 8000fd0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8000fd2:	68fb      	ldr	r3, [r7, #12]
 8000fd4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8000fd8:	b2db      	uxtb	r3, r3
 8000fda:	2b20      	cmp	r3, #32
 8000fdc:	f040 80f9 	bne.w	80011d2 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8000fe0:	6a3b      	ldr	r3, [r7, #32]
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d002      	beq.n	8000fec <HAL_I2C_Mem_Write+0x34>
 8000fe6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d105      	bne.n	8000ff8 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8000fec:	68fb      	ldr	r3, [r7, #12]
 8000fee:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000ff2:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8000ff4:	2301      	movs	r3, #1
 8000ff6:	e0ed      	b.n	80011d4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8000ff8:	68fb      	ldr	r3, [r7, #12]
 8000ffa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8000ffe:	2b01      	cmp	r3, #1
 8001000:	d101      	bne.n	8001006 <HAL_I2C_Mem_Write+0x4e>
 8001002:	2302      	movs	r3, #2
 8001004:	e0e6      	b.n	80011d4 <HAL_I2C_Mem_Write+0x21c>
 8001006:	68fb      	ldr	r3, [r7, #12]
 8001008:	2201      	movs	r2, #1
 800100a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800100e:	f7ff fc57 	bl	80008c0 <HAL_GetTick>
 8001012:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001014:	697b      	ldr	r3, [r7, #20]
 8001016:	9300      	str	r3, [sp, #0]
 8001018:	2319      	movs	r3, #25
 800101a:	2201      	movs	r2, #1
 800101c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001020:	68f8      	ldr	r0, [r7, #12]
 8001022:	f000 fac3 	bl	80015ac <I2C_WaitOnFlagUntilTimeout>
 8001026:	4603      	mov	r3, r0
 8001028:	2b00      	cmp	r3, #0
 800102a:	d001      	beq.n	8001030 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 800102c:	2301      	movs	r3, #1
 800102e:	e0d1      	b.n	80011d4 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001030:	68fb      	ldr	r3, [r7, #12]
 8001032:	2221      	movs	r2, #33	; 0x21
 8001034:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001038:	68fb      	ldr	r3, [r7, #12]
 800103a:	2240      	movs	r2, #64	; 0x40
 800103c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001040:	68fb      	ldr	r3, [r7, #12]
 8001042:	2200      	movs	r2, #0
 8001044:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001046:	68fb      	ldr	r3, [r7, #12]
 8001048:	6a3a      	ldr	r2, [r7, #32]
 800104a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800104c:	68fb      	ldr	r3, [r7, #12]
 800104e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001050:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001052:	68fb      	ldr	r3, [r7, #12]
 8001054:	2200      	movs	r2, #0
 8001056:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001058:	88f8      	ldrh	r0, [r7, #6]
 800105a:	893a      	ldrh	r2, [r7, #8]
 800105c:	8979      	ldrh	r1, [r7, #10]
 800105e:	697b      	ldr	r3, [r7, #20]
 8001060:	9301      	str	r3, [sp, #4]
 8001062:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001064:	9300      	str	r3, [sp, #0]
 8001066:	4603      	mov	r3, r0
 8001068:	68f8      	ldr	r0, [r7, #12]
 800106a:	f000 f9d3 	bl	8001414 <I2C_RequestMemoryWrite>
 800106e:	4603      	mov	r3, r0
 8001070:	2b00      	cmp	r3, #0
 8001072:	d005      	beq.n	8001080 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001074:	68fb      	ldr	r3, [r7, #12]
 8001076:	2200      	movs	r2, #0
 8001078:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800107c:	2301      	movs	r3, #1
 800107e:	e0a9      	b.n	80011d4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001080:	68fb      	ldr	r3, [r7, #12]
 8001082:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001084:	b29b      	uxth	r3, r3
 8001086:	2bff      	cmp	r3, #255	; 0xff
 8001088:	d90e      	bls.n	80010a8 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800108a:	68fb      	ldr	r3, [r7, #12]
 800108c:	22ff      	movs	r2, #255	; 0xff
 800108e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8001090:	68fb      	ldr	r3, [r7, #12]
 8001092:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001094:	b2da      	uxtb	r2, r3
 8001096:	8979      	ldrh	r1, [r7, #10]
 8001098:	2300      	movs	r3, #0
 800109a:	9300      	str	r3, [sp, #0]
 800109c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80010a0:	68f8      	ldr	r0, [r7, #12]
 80010a2:	f000 fba5 	bl	80017f0 <I2C_TransferConfig>
 80010a6:	e00f      	b.n	80010c8 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80010a8:	68fb      	ldr	r3, [r7, #12]
 80010aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80010ac:	b29a      	uxth	r2, r3
 80010ae:	68fb      	ldr	r3, [r7, #12]
 80010b0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80010b2:	68fb      	ldr	r3, [r7, #12]
 80010b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80010b6:	b2da      	uxtb	r2, r3
 80010b8:	8979      	ldrh	r1, [r7, #10]
 80010ba:	2300      	movs	r3, #0
 80010bc:	9300      	str	r3, [sp, #0]
 80010be:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80010c2:	68f8      	ldr	r0, [r7, #12]
 80010c4:	f000 fb94 	bl	80017f0 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80010c8:	697a      	ldr	r2, [r7, #20]
 80010ca:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80010cc:	68f8      	ldr	r0, [r7, #12]
 80010ce:	f000 faad 	bl	800162c <I2C_WaitOnTXISFlagUntilTimeout>
 80010d2:	4603      	mov	r3, r0
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d001      	beq.n	80010dc <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 80010d8:	2301      	movs	r3, #1
 80010da:	e07b      	b.n	80011d4 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80010dc:	68fb      	ldr	r3, [r7, #12]
 80010de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010e0:	781a      	ldrb	r2, [r3, #0]
 80010e2:	68fb      	ldr	r3, [r7, #12]
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80010e8:	68fb      	ldr	r3, [r7, #12]
 80010ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010ec:	1c5a      	adds	r2, r3, #1
 80010ee:	68fb      	ldr	r3, [r7, #12]
 80010f0:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80010f2:	68fb      	ldr	r3, [r7, #12]
 80010f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80010f6:	b29b      	uxth	r3, r3
 80010f8:	3b01      	subs	r3, #1
 80010fa:	b29a      	uxth	r2, r3
 80010fc:	68fb      	ldr	r3, [r7, #12]
 80010fe:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001100:	68fb      	ldr	r3, [r7, #12]
 8001102:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001104:	3b01      	subs	r3, #1
 8001106:	b29a      	uxth	r2, r3
 8001108:	68fb      	ldr	r3, [r7, #12]
 800110a:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800110c:	68fb      	ldr	r3, [r7, #12]
 800110e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001110:	b29b      	uxth	r3, r3
 8001112:	2b00      	cmp	r3, #0
 8001114:	d034      	beq.n	8001180 <HAL_I2C_Mem_Write+0x1c8>
 8001116:	68fb      	ldr	r3, [r7, #12]
 8001118:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800111a:	2b00      	cmp	r3, #0
 800111c:	d130      	bne.n	8001180 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800111e:	697b      	ldr	r3, [r7, #20]
 8001120:	9300      	str	r3, [sp, #0]
 8001122:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001124:	2200      	movs	r2, #0
 8001126:	2180      	movs	r1, #128	; 0x80
 8001128:	68f8      	ldr	r0, [r7, #12]
 800112a:	f000 fa3f 	bl	80015ac <I2C_WaitOnFlagUntilTimeout>
 800112e:	4603      	mov	r3, r0
 8001130:	2b00      	cmp	r3, #0
 8001132:	d001      	beq.n	8001138 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8001134:	2301      	movs	r3, #1
 8001136:	e04d      	b.n	80011d4 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001138:	68fb      	ldr	r3, [r7, #12]
 800113a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800113c:	b29b      	uxth	r3, r3
 800113e:	2bff      	cmp	r3, #255	; 0xff
 8001140:	d90e      	bls.n	8001160 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001142:	68fb      	ldr	r3, [r7, #12]
 8001144:	22ff      	movs	r2, #255	; 0xff
 8001146:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8001148:	68fb      	ldr	r3, [r7, #12]
 800114a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800114c:	b2da      	uxtb	r2, r3
 800114e:	8979      	ldrh	r1, [r7, #10]
 8001150:	2300      	movs	r3, #0
 8001152:	9300      	str	r3, [sp, #0]
 8001154:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001158:	68f8      	ldr	r0, [r7, #12]
 800115a:	f000 fb49 	bl	80017f0 <I2C_TransferConfig>
 800115e:	e00f      	b.n	8001180 <HAL_I2C_Mem_Write+0x1c8>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001160:	68fb      	ldr	r3, [r7, #12]
 8001162:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001164:	b29a      	uxth	r2, r3
 8001166:	68fb      	ldr	r3, [r7, #12]
 8001168:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800116a:	68fb      	ldr	r3, [r7, #12]
 800116c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800116e:	b2da      	uxtb	r2, r3
 8001170:	8979      	ldrh	r1, [r7, #10]
 8001172:	2300      	movs	r3, #0
 8001174:	9300      	str	r3, [sp, #0]
 8001176:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800117a:	68f8      	ldr	r0, [r7, #12]
 800117c:	f000 fb38 	bl	80017f0 <I2C_TransferConfig>
        }
      }

    } while (hi2c->XferCount > 0U);
 8001180:	68fb      	ldr	r3, [r7, #12]
 8001182:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001184:	b29b      	uxth	r3, r3
 8001186:	2b00      	cmp	r3, #0
 8001188:	d19e      	bne.n	80010c8 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800118a:	697a      	ldr	r2, [r7, #20]
 800118c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800118e:	68f8      	ldr	r0, [r7, #12]
 8001190:	f000 fa8c 	bl	80016ac <I2C_WaitOnSTOPFlagUntilTimeout>
 8001194:	4603      	mov	r3, r0
 8001196:	2b00      	cmp	r3, #0
 8001198:	d001      	beq.n	800119e <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800119a:	2301      	movs	r3, #1
 800119c:	e01a      	b.n	80011d4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800119e:	68fb      	ldr	r3, [r7, #12]
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	2220      	movs	r2, #32
 80011a4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80011a6:	68fb      	ldr	r3, [r7, #12]
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	6859      	ldr	r1, [r3, #4]
 80011ac:	68fb      	ldr	r3, [r7, #12]
 80011ae:	681a      	ldr	r2, [r3, #0]
 80011b0:	4b0a      	ldr	r3, [pc, #40]	; (80011dc <HAL_I2C_Mem_Write+0x224>)
 80011b2:	400b      	ands	r3, r1
 80011b4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80011b6:	68fb      	ldr	r3, [r7, #12]
 80011b8:	2220      	movs	r2, #32
 80011ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80011be:	68fb      	ldr	r3, [r7, #12]
 80011c0:	2200      	movs	r2, #0
 80011c2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80011c6:	68fb      	ldr	r3, [r7, #12]
 80011c8:	2200      	movs	r2, #0
 80011ca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80011ce:	2300      	movs	r3, #0
 80011d0:	e000      	b.n	80011d4 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 80011d2:	2302      	movs	r3, #2
  }
}
 80011d4:	4618      	mov	r0, r3
 80011d6:	3718      	adds	r7, #24
 80011d8:	46bd      	mov	sp, r7
 80011da:	bd80      	pop	{r7, pc}
 80011dc:	fe00e800 	.word	0xfe00e800

080011e0 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b088      	sub	sp, #32
 80011e4:	af02      	add	r7, sp, #8
 80011e6:	60f8      	str	r0, [r7, #12]
 80011e8:	4608      	mov	r0, r1
 80011ea:	4611      	mov	r1, r2
 80011ec:	461a      	mov	r2, r3
 80011ee:	4603      	mov	r3, r0
 80011f0:	817b      	strh	r3, [r7, #10]
 80011f2:	460b      	mov	r3, r1
 80011f4:	813b      	strh	r3, [r7, #8]
 80011f6:	4613      	mov	r3, r2
 80011f8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80011fa:	68fb      	ldr	r3, [r7, #12]
 80011fc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001200:	b2db      	uxtb	r3, r3
 8001202:	2b20      	cmp	r3, #32
 8001204:	f040 80fd 	bne.w	8001402 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8001208:	6a3b      	ldr	r3, [r7, #32]
 800120a:	2b00      	cmp	r3, #0
 800120c:	d002      	beq.n	8001214 <HAL_I2C_Mem_Read+0x34>
 800120e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001210:	2b00      	cmp	r3, #0
 8001212:	d105      	bne.n	8001220 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8001214:	68fb      	ldr	r3, [r7, #12]
 8001216:	f44f 7200 	mov.w	r2, #512	; 0x200
 800121a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800121c:	2301      	movs	r3, #1
 800121e:	e0f1      	b.n	8001404 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001220:	68fb      	ldr	r3, [r7, #12]
 8001222:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001226:	2b01      	cmp	r3, #1
 8001228:	d101      	bne.n	800122e <HAL_I2C_Mem_Read+0x4e>
 800122a:	2302      	movs	r3, #2
 800122c:	e0ea      	b.n	8001404 <HAL_I2C_Mem_Read+0x224>
 800122e:	68fb      	ldr	r3, [r7, #12]
 8001230:	2201      	movs	r2, #1
 8001232:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001236:	f7ff fb43 	bl	80008c0 <HAL_GetTick>
 800123a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800123c:	697b      	ldr	r3, [r7, #20]
 800123e:	9300      	str	r3, [sp, #0]
 8001240:	2319      	movs	r3, #25
 8001242:	2201      	movs	r2, #1
 8001244:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001248:	68f8      	ldr	r0, [r7, #12]
 800124a:	f000 f9af 	bl	80015ac <I2C_WaitOnFlagUntilTimeout>
 800124e:	4603      	mov	r3, r0
 8001250:	2b00      	cmp	r3, #0
 8001252:	d001      	beq.n	8001258 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8001254:	2301      	movs	r3, #1
 8001256:	e0d5      	b.n	8001404 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001258:	68fb      	ldr	r3, [r7, #12]
 800125a:	2222      	movs	r2, #34	; 0x22
 800125c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001260:	68fb      	ldr	r3, [r7, #12]
 8001262:	2240      	movs	r2, #64	; 0x40
 8001264:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001268:	68fb      	ldr	r3, [r7, #12]
 800126a:	2200      	movs	r2, #0
 800126c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800126e:	68fb      	ldr	r3, [r7, #12]
 8001270:	6a3a      	ldr	r2, [r7, #32]
 8001272:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001274:	68fb      	ldr	r3, [r7, #12]
 8001276:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001278:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800127a:	68fb      	ldr	r3, [r7, #12]
 800127c:	2200      	movs	r2, #0
 800127e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001280:	88f8      	ldrh	r0, [r7, #6]
 8001282:	893a      	ldrh	r2, [r7, #8]
 8001284:	8979      	ldrh	r1, [r7, #10]
 8001286:	697b      	ldr	r3, [r7, #20]
 8001288:	9301      	str	r3, [sp, #4]
 800128a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800128c:	9300      	str	r3, [sp, #0]
 800128e:	4603      	mov	r3, r0
 8001290:	68f8      	ldr	r0, [r7, #12]
 8001292:	f000 f913 	bl	80014bc <I2C_RequestMemoryRead>
 8001296:	4603      	mov	r3, r0
 8001298:	2b00      	cmp	r3, #0
 800129a:	d005      	beq.n	80012a8 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800129c:	68fb      	ldr	r3, [r7, #12]
 800129e:	2200      	movs	r2, #0
 80012a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80012a4:	2301      	movs	r3, #1
 80012a6:	e0ad      	b.n	8001404 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80012a8:	68fb      	ldr	r3, [r7, #12]
 80012aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80012ac:	b29b      	uxth	r3, r3
 80012ae:	2bff      	cmp	r3, #255	; 0xff
 80012b0:	d90e      	bls.n	80012d0 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80012b2:	68fb      	ldr	r3, [r7, #12]
 80012b4:	22ff      	movs	r2, #255	; 0xff
 80012b6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 80012b8:	68fb      	ldr	r3, [r7, #12]
 80012ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80012bc:	b2da      	uxtb	r2, r3
 80012be:	8979      	ldrh	r1, [r7, #10]
 80012c0:	4b52      	ldr	r3, [pc, #328]	; (800140c <HAL_I2C_Mem_Read+0x22c>)
 80012c2:	9300      	str	r3, [sp, #0]
 80012c4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80012c8:	68f8      	ldr	r0, [r7, #12]
 80012ca:	f000 fa91 	bl	80017f0 <I2C_TransferConfig>
 80012ce:	e00f      	b.n	80012f0 <HAL_I2C_Mem_Read+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80012d0:	68fb      	ldr	r3, [r7, #12]
 80012d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80012d4:	b29a      	uxth	r2, r3
 80012d6:	68fb      	ldr	r3, [r7, #12]
 80012d8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 80012da:	68fb      	ldr	r3, [r7, #12]
 80012dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80012de:	b2da      	uxtb	r2, r3
 80012e0:	8979      	ldrh	r1, [r7, #10]
 80012e2:	4b4a      	ldr	r3, [pc, #296]	; (800140c <HAL_I2C_Mem_Read+0x22c>)
 80012e4:	9300      	str	r3, [sp, #0]
 80012e6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80012ea:	68f8      	ldr	r0, [r7, #12]
 80012ec:	f000 fa80 	bl	80017f0 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80012f0:	697b      	ldr	r3, [r7, #20]
 80012f2:	9300      	str	r3, [sp, #0]
 80012f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80012f6:	2200      	movs	r2, #0
 80012f8:	2104      	movs	r1, #4
 80012fa:	68f8      	ldr	r0, [r7, #12]
 80012fc:	f000 f956 	bl	80015ac <I2C_WaitOnFlagUntilTimeout>
 8001300:	4603      	mov	r3, r0
 8001302:	2b00      	cmp	r3, #0
 8001304:	d001      	beq.n	800130a <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8001306:	2301      	movs	r3, #1
 8001308:	e07c      	b.n	8001404 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800130a:	68fb      	ldr	r3, [r7, #12]
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001310:	68fb      	ldr	r3, [r7, #12]
 8001312:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001314:	b2d2      	uxtb	r2, r2
 8001316:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001318:	68fb      	ldr	r3, [r7, #12]
 800131a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800131c:	1c5a      	adds	r2, r3, #1
 800131e:	68fb      	ldr	r3, [r7, #12]
 8001320:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8001322:	68fb      	ldr	r3, [r7, #12]
 8001324:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001326:	3b01      	subs	r3, #1
 8001328:	b29a      	uxth	r2, r3
 800132a:	68fb      	ldr	r3, [r7, #12]
 800132c:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800132e:	68fb      	ldr	r3, [r7, #12]
 8001330:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001332:	b29b      	uxth	r3, r3
 8001334:	3b01      	subs	r3, #1
 8001336:	b29a      	uxth	r2, r3
 8001338:	68fb      	ldr	r3, [r7, #12]
 800133a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800133c:	68fb      	ldr	r3, [r7, #12]
 800133e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001340:	b29b      	uxth	r3, r3
 8001342:	2b00      	cmp	r3, #0
 8001344:	d034      	beq.n	80013b0 <HAL_I2C_Mem_Read+0x1d0>
 8001346:	68fb      	ldr	r3, [r7, #12]
 8001348:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800134a:	2b00      	cmp	r3, #0
 800134c:	d130      	bne.n	80013b0 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800134e:	697b      	ldr	r3, [r7, #20]
 8001350:	9300      	str	r3, [sp, #0]
 8001352:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001354:	2200      	movs	r2, #0
 8001356:	2180      	movs	r1, #128	; 0x80
 8001358:	68f8      	ldr	r0, [r7, #12]
 800135a:	f000 f927 	bl	80015ac <I2C_WaitOnFlagUntilTimeout>
 800135e:	4603      	mov	r3, r0
 8001360:	2b00      	cmp	r3, #0
 8001362:	d001      	beq.n	8001368 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8001364:	2301      	movs	r3, #1
 8001366:	e04d      	b.n	8001404 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001368:	68fb      	ldr	r3, [r7, #12]
 800136a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800136c:	b29b      	uxth	r3, r3
 800136e:	2bff      	cmp	r3, #255	; 0xff
 8001370:	d90e      	bls.n	8001390 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001372:	68fb      	ldr	r3, [r7, #12]
 8001374:	22ff      	movs	r2, #255	; 0xff
 8001376:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8001378:	68fb      	ldr	r3, [r7, #12]
 800137a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800137c:	b2da      	uxtb	r2, r3
 800137e:	8979      	ldrh	r1, [r7, #10]
 8001380:	2300      	movs	r3, #0
 8001382:	9300      	str	r3, [sp, #0]
 8001384:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001388:	68f8      	ldr	r0, [r7, #12]
 800138a:	f000 fa31 	bl	80017f0 <I2C_TransferConfig>
 800138e:	e00f      	b.n	80013b0 <HAL_I2C_Mem_Read+0x1d0>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001390:	68fb      	ldr	r3, [r7, #12]
 8001392:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001394:	b29a      	uxth	r2, r3
 8001396:	68fb      	ldr	r3, [r7, #12]
 8001398:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800139a:	68fb      	ldr	r3, [r7, #12]
 800139c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800139e:	b2da      	uxtb	r2, r3
 80013a0:	8979      	ldrh	r1, [r7, #10]
 80013a2:	2300      	movs	r3, #0
 80013a4:	9300      	str	r3, [sp, #0]
 80013a6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80013aa:	68f8      	ldr	r0, [r7, #12]
 80013ac:	f000 fa20 	bl	80017f0 <I2C_TransferConfig>
        }
      }
    } while (hi2c->XferCount > 0U);
 80013b0:	68fb      	ldr	r3, [r7, #12]
 80013b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80013b4:	b29b      	uxth	r3, r3
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d19a      	bne.n	80012f0 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80013ba:	697a      	ldr	r2, [r7, #20]
 80013bc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80013be:	68f8      	ldr	r0, [r7, #12]
 80013c0:	f000 f974 	bl	80016ac <I2C_WaitOnSTOPFlagUntilTimeout>
 80013c4:	4603      	mov	r3, r0
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d001      	beq.n	80013ce <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 80013ca:	2301      	movs	r3, #1
 80013cc:	e01a      	b.n	8001404 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80013ce:	68fb      	ldr	r3, [r7, #12]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	2220      	movs	r2, #32
 80013d4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80013d6:	68fb      	ldr	r3, [r7, #12]
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	6859      	ldr	r1, [r3, #4]
 80013dc:	68fb      	ldr	r3, [r7, #12]
 80013de:	681a      	ldr	r2, [r3, #0]
 80013e0:	4b0b      	ldr	r3, [pc, #44]	; (8001410 <HAL_I2C_Mem_Read+0x230>)
 80013e2:	400b      	ands	r3, r1
 80013e4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80013e6:	68fb      	ldr	r3, [r7, #12]
 80013e8:	2220      	movs	r2, #32
 80013ea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80013ee:	68fb      	ldr	r3, [r7, #12]
 80013f0:	2200      	movs	r2, #0
 80013f2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80013f6:	68fb      	ldr	r3, [r7, #12]
 80013f8:	2200      	movs	r2, #0
 80013fa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80013fe:	2300      	movs	r3, #0
 8001400:	e000      	b.n	8001404 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8001402:	2302      	movs	r3, #2
  }
}
 8001404:	4618      	mov	r0, r3
 8001406:	3718      	adds	r7, #24
 8001408:	46bd      	mov	sp, r7
 800140a:	bd80      	pop	{r7, pc}
 800140c:	80002400 	.word	0x80002400
 8001410:	fe00e800 	.word	0xfe00e800

08001414 <I2C_RequestMemoryWrite>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                                uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	b086      	sub	sp, #24
 8001418:	af02      	add	r7, sp, #8
 800141a:	60f8      	str	r0, [r7, #12]
 800141c:	4608      	mov	r0, r1
 800141e:	4611      	mov	r1, r2
 8001420:	461a      	mov	r2, r3
 8001422:	4603      	mov	r3, r0
 8001424:	817b      	strh	r3, [r7, #10]
 8001426:	460b      	mov	r3, r1
 8001428:	813b      	strh	r3, [r7, #8]
 800142a:	4613      	mov	r3, r2
 800142c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800142e:	88fb      	ldrh	r3, [r7, #6]
 8001430:	b2da      	uxtb	r2, r3
 8001432:	8979      	ldrh	r1, [r7, #10]
 8001434:	4b20      	ldr	r3, [pc, #128]	; (80014b8 <I2C_RequestMemoryWrite+0xa4>)
 8001436:	9300      	str	r3, [sp, #0]
 8001438:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800143c:	68f8      	ldr	r0, [r7, #12]
 800143e:	f000 f9d7 	bl	80017f0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001442:	69fa      	ldr	r2, [r7, #28]
 8001444:	69b9      	ldr	r1, [r7, #24]
 8001446:	68f8      	ldr	r0, [r7, #12]
 8001448:	f000 f8f0 	bl	800162c <I2C_WaitOnTXISFlagUntilTimeout>
 800144c:	4603      	mov	r3, r0
 800144e:	2b00      	cmp	r3, #0
 8001450:	d001      	beq.n	8001456 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8001452:	2301      	movs	r3, #1
 8001454:	e02c      	b.n	80014b0 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001456:	88fb      	ldrh	r3, [r7, #6]
 8001458:	2b01      	cmp	r3, #1
 800145a:	d105      	bne.n	8001468 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800145c:	893b      	ldrh	r3, [r7, #8]
 800145e:	b2da      	uxtb	r2, r3
 8001460:	68fb      	ldr	r3, [r7, #12]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	629a      	str	r2, [r3, #40]	; 0x28
 8001466:	e015      	b.n	8001494 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8001468:	893b      	ldrh	r3, [r7, #8]
 800146a:	0a1b      	lsrs	r3, r3, #8
 800146c:	b29b      	uxth	r3, r3
 800146e:	b2da      	uxtb	r2, r3
 8001470:	68fb      	ldr	r3, [r7, #12]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001476:	69fa      	ldr	r2, [r7, #28]
 8001478:	69b9      	ldr	r1, [r7, #24]
 800147a:	68f8      	ldr	r0, [r7, #12]
 800147c:	f000 f8d6 	bl	800162c <I2C_WaitOnTXISFlagUntilTimeout>
 8001480:	4603      	mov	r3, r0
 8001482:	2b00      	cmp	r3, #0
 8001484:	d001      	beq.n	800148a <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8001486:	2301      	movs	r3, #1
 8001488:	e012      	b.n	80014b0 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800148a:	893b      	ldrh	r3, [r7, #8]
 800148c:	b2da      	uxtb	r2, r3
 800148e:	68fb      	ldr	r3, [r7, #12]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8001494:	69fb      	ldr	r3, [r7, #28]
 8001496:	9300      	str	r3, [sp, #0]
 8001498:	69bb      	ldr	r3, [r7, #24]
 800149a:	2200      	movs	r2, #0
 800149c:	2180      	movs	r1, #128	; 0x80
 800149e:	68f8      	ldr	r0, [r7, #12]
 80014a0:	f000 f884 	bl	80015ac <I2C_WaitOnFlagUntilTimeout>
 80014a4:	4603      	mov	r3, r0
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d001      	beq.n	80014ae <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80014aa:	2301      	movs	r3, #1
 80014ac:	e000      	b.n	80014b0 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 80014ae:	2300      	movs	r3, #0
}
 80014b0:	4618      	mov	r0, r3
 80014b2:	3710      	adds	r7, #16
 80014b4:	46bd      	mov	sp, r7
 80014b6:	bd80      	pop	{r7, pc}
 80014b8:	80002000 	.word	0x80002000

080014bc <I2C_RequestMemoryRead>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                               uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	b086      	sub	sp, #24
 80014c0:	af02      	add	r7, sp, #8
 80014c2:	60f8      	str	r0, [r7, #12]
 80014c4:	4608      	mov	r0, r1
 80014c6:	4611      	mov	r1, r2
 80014c8:	461a      	mov	r2, r3
 80014ca:	4603      	mov	r3, r0
 80014cc:	817b      	strh	r3, [r7, #10]
 80014ce:	460b      	mov	r3, r1
 80014d0:	813b      	strh	r3, [r7, #8]
 80014d2:	4613      	mov	r3, r2
 80014d4:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80014d6:	88fb      	ldrh	r3, [r7, #6]
 80014d8:	b2da      	uxtb	r2, r3
 80014da:	8979      	ldrh	r1, [r7, #10]
 80014dc:	4b20      	ldr	r3, [pc, #128]	; (8001560 <I2C_RequestMemoryRead+0xa4>)
 80014de:	9300      	str	r3, [sp, #0]
 80014e0:	2300      	movs	r3, #0
 80014e2:	68f8      	ldr	r0, [r7, #12]
 80014e4:	f000 f984 	bl	80017f0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80014e8:	69fa      	ldr	r2, [r7, #28]
 80014ea:	69b9      	ldr	r1, [r7, #24]
 80014ec:	68f8      	ldr	r0, [r7, #12]
 80014ee:	f000 f89d 	bl	800162c <I2C_WaitOnTXISFlagUntilTimeout>
 80014f2:	4603      	mov	r3, r0
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d001      	beq.n	80014fc <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 80014f8:	2301      	movs	r3, #1
 80014fa:	e02c      	b.n	8001556 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80014fc:	88fb      	ldrh	r3, [r7, #6]
 80014fe:	2b01      	cmp	r3, #1
 8001500:	d105      	bne.n	800150e <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001502:	893b      	ldrh	r3, [r7, #8]
 8001504:	b2da      	uxtb	r2, r3
 8001506:	68fb      	ldr	r3, [r7, #12]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	629a      	str	r2, [r3, #40]	; 0x28
 800150c:	e015      	b.n	800153a <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800150e:	893b      	ldrh	r3, [r7, #8]
 8001510:	0a1b      	lsrs	r3, r3, #8
 8001512:	b29b      	uxth	r3, r3
 8001514:	b2da      	uxtb	r2, r3
 8001516:	68fb      	ldr	r3, [r7, #12]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800151c:	69fa      	ldr	r2, [r7, #28]
 800151e:	69b9      	ldr	r1, [r7, #24]
 8001520:	68f8      	ldr	r0, [r7, #12]
 8001522:	f000 f883 	bl	800162c <I2C_WaitOnTXISFlagUntilTimeout>
 8001526:	4603      	mov	r3, r0
 8001528:	2b00      	cmp	r3, #0
 800152a:	d001      	beq.n	8001530 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 800152c:	2301      	movs	r3, #1
 800152e:	e012      	b.n	8001556 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001530:	893b      	ldrh	r3, [r7, #8]
 8001532:	b2da      	uxtb	r2, r3
 8001534:	68fb      	ldr	r3, [r7, #12]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800153a:	69fb      	ldr	r3, [r7, #28]
 800153c:	9300      	str	r3, [sp, #0]
 800153e:	69bb      	ldr	r3, [r7, #24]
 8001540:	2200      	movs	r2, #0
 8001542:	2140      	movs	r1, #64	; 0x40
 8001544:	68f8      	ldr	r0, [r7, #12]
 8001546:	f000 f831 	bl	80015ac <I2C_WaitOnFlagUntilTimeout>
 800154a:	4603      	mov	r3, r0
 800154c:	2b00      	cmp	r3, #0
 800154e:	d001      	beq.n	8001554 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8001550:	2301      	movs	r3, #1
 8001552:	e000      	b.n	8001556 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8001554:	2300      	movs	r3, #0
}
 8001556:	4618      	mov	r0, r3
 8001558:	3710      	adds	r7, #16
 800155a:	46bd      	mov	sp, r7
 800155c:	bd80      	pop	{r7, pc}
 800155e:	bf00      	nop
 8001560:	80002000 	.word	0x80002000

08001564 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8001564:	b480      	push	{r7}
 8001566:	b083      	sub	sp, #12
 8001568:	af00      	add	r7, sp, #0
 800156a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	699b      	ldr	r3, [r3, #24]
 8001572:	f003 0302 	and.w	r3, r3, #2
 8001576:	2b02      	cmp	r3, #2
 8001578:	d103      	bne.n	8001582 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	2200      	movs	r2, #0
 8001580:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	699b      	ldr	r3, [r3, #24]
 8001588:	f003 0301 	and.w	r3, r3, #1
 800158c:	2b01      	cmp	r3, #1
 800158e:	d007      	beq.n	80015a0 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	699a      	ldr	r2, [r3, #24]
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	f042 0201 	orr.w	r2, r2, #1
 800159e:	619a      	str	r2, [r3, #24]
  }
}
 80015a0:	bf00      	nop
 80015a2:	370c      	adds	r7, #12
 80015a4:	46bd      	mov	sp, r7
 80015a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015aa:	4770      	bx	lr

080015ac <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80015ac:	b580      	push	{r7, lr}
 80015ae:	b084      	sub	sp, #16
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	60f8      	str	r0, [r7, #12]
 80015b4:	60b9      	str	r1, [r7, #8]
 80015b6:	603b      	str	r3, [r7, #0]
 80015b8:	4613      	mov	r3, r2
 80015ba:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80015bc:	e022      	b.n	8001604 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80015be:	683b      	ldr	r3, [r7, #0]
 80015c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80015c4:	d01e      	beq.n	8001604 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80015c6:	f7ff f97b 	bl	80008c0 <HAL_GetTick>
 80015ca:	4602      	mov	r2, r0
 80015cc:	69bb      	ldr	r3, [r7, #24]
 80015ce:	1ad3      	subs	r3, r2, r3
 80015d0:	683a      	ldr	r2, [r7, #0]
 80015d2:	429a      	cmp	r2, r3
 80015d4:	d302      	bcc.n	80015dc <I2C_WaitOnFlagUntilTimeout+0x30>
 80015d6:	683b      	ldr	r3, [r7, #0]
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d113      	bne.n	8001604 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015e0:	f043 0220 	orr.w	r2, r3, #32
 80015e4:	68fb      	ldr	r3, [r7, #12]
 80015e6:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	2220      	movs	r2, #32
 80015ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80015f0:	68fb      	ldr	r3, [r7, #12]
 80015f2:	2200      	movs	r2, #0
 80015f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80015f8:	68fb      	ldr	r3, [r7, #12]
 80015fa:	2200      	movs	r2, #0
 80015fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8001600:	2301      	movs	r3, #1
 8001602:	e00f      	b.n	8001624 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001604:	68fb      	ldr	r3, [r7, #12]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	699a      	ldr	r2, [r3, #24]
 800160a:	68bb      	ldr	r3, [r7, #8]
 800160c:	4013      	ands	r3, r2
 800160e:	68ba      	ldr	r2, [r7, #8]
 8001610:	429a      	cmp	r2, r3
 8001612:	bf0c      	ite	eq
 8001614:	2301      	moveq	r3, #1
 8001616:	2300      	movne	r3, #0
 8001618:	b2db      	uxtb	r3, r3
 800161a:	461a      	mov	r2, r3
 800161c:	79fb      	ldrb	r3, [r7, #7]
 800161e:	429a      	cmp	r2, r3
 8001620:	d0cd      	beq.n	80015be <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001622:	2300      	movs	r3, #0
}
 8001624:	4618      	mov	r0, r3
 8001626:	3710      	adds	r7, #16
 8001628:	46bd      	mov	sp, r7
 800162a:	bd80      	pop	{r7, pc}

0800162c <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	b084      	sub	sp, #16
 8001630:	af00      	add	r7, sp, #0
 8001632:	60f8      	str	r0, [r7, #12]
 8001634:	60b9      	str	r1, [r7, #8]
 8001636:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001638:	e02c      	b.n	8001694 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800163a:	687a      	ldr	r2, [r7, #4]
 800163c:	68b9      	ldr	r1, [r7, #8]
 800163e:	68f8      	ldr	r0, [r7, #12]
 8001640:	f000 f870 	bl	8001724 <I2C_IsAcknowledgeFailed>
 8001644:	4603      	mov	r3, r0
 8001646:	2b00      	cmp	r3, #0
 8001648:	d001      	beq.n	800164e <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800164a:	2301      	movs	r3, #1
 800164c:	e02a      	b.n	80016a4 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800164e:	68bb      	ldr	r3, [r7, #8]
 8001650:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001654:	d01e      	beq.n	8001694 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001656:	f7ff f933 	bl	80008c0 <HAL_GetTick>
 800165a:	4602      	mov	r2, r0
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	1ad3      	subs	r3, r2, r3
 8001660:	68ba      	ldr	r2, [r7, #8]
 8001662:	429a      	cmp	r2, r3
 8001664:	d302      	bcc.n	800166c <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8001666:	68bb      	ldr	r3, [r7, #8]
 8001668:	2b00      	cmp	r3, #0
 800166a:	d113      	bne.n	8001694 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001670:	f043 0220 	orr.w	r2, r3, #32
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	2220      	movs	r2, #32
 800167c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	2200      	movs	r2, #0
 8001684:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001688:	68fb      	ldr	r3, [r7, #12]
 800168a:	2200      	movs	r2, #0
 800168c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8001690:	2301      	movs	r3, #1
 8001692:	e007      	b.n	80016a4 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	699b      	ldr	r3, [r3, #24]
 800169a:	f003 0302 	and.w	r3, r3, #2
 800169e:	2b02      	cmp	r3, #2
 80016a0:	d1cb      	bne.n	800163a <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80016a2:	2300      	movs	r3, #0
}
 80016a4:	4618      	mov	r0, r3
 80016a6:	3710      	adds	r7, #16
 80016a8:	46bd      	mov	sp, r7
 80016aa:	bd80      	pop	{r7, pc}

080016ac <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80016ac:	b580      	push	{r7, lr}
 80016ae:	b084      	sub	sp, #16
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	60f8      	str	r0, [r7, #12]
 80016b4:	60b9      	str	r1, [r7, #8]
 80016b6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80016b8:	e028      	b.n	800170c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80016ba:	687a      	ldr	r2, [r7, #4]
 80016bc:	68b9      	ldr	r1, [r7, #8]
 80016be:	68f8      	ldr	r0, [r7, #12]
 80016c0:	f000 f830 	bl	8001724 <I2C_IsAcknowledgeFailed>
 80016c4:	4603      	mov	r3, r0
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d001      	beq.n	80016ce <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80016ca:	2301      	movs	r3, #1
 80016cc:	e026      	b.n	800171c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80016ce:	f7ff f8f7 	bl	80008c0 <HAL_GetTick>
 80016d2:	4602      	mov	r2, r0
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	1ad3      	subs	r3, r2, r3
 80016d8:	68ba      	ldr	r2, [r7, #8]
 80016da:	429a      	cmp	r2, r3
 80016dc:	d302      	bcc.n	80016e4 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80016de:	68bb      	ldr	r3, [r7, #8]
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d113      	bne.n	800170c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016e8:	f043 0220 	orr.w	r2, r3, #32
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	2220      	movs	r2, #32
 80016f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80016f8:	68fb      	ldr	r3, [r7, #12]
 80016fa:	2200      	movs	r2, #0
 80016fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	2200      	movs	r2, #0
 8001704:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8001708:	2301      	movs	r3, #1
 800170a:	e007      	b.n	800171c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	699b      	ldr	r3, [r3, #24]
 8001712:	f003 0320 	and.w	r3, r3, #32
 8001716:	2b20      	cmp	r3, #32
 8001718:	d1cf      	bne.n	80016ba <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800171a:	2300      	movs	r3, #0
}
 800171c:	4618      	mov	r0, r3
 800171e:	3710      	adds	r7, #16
 8001720:	46bd      	mov	sp, r7
 8001722:	bd80      	pop	{r7, pc}

08001724 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	b084      	sub	sp, #16
 8001728:	af00      	add	r7, sp, #0
 800172a:	60f8      	str	r0, [r7, #12]
 800172c:	60b9      	str	r1, [r7, #8]
 800172e:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	699b      	ldr	r3, [r3, #24]
 8001736:	f003 0310 	and.w	r3, r3, #16
 800173a:	2b10      	cmp	r3, #16
 800173c:	d151      	bne.n	80017e2 <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800173e:	e022      	b.n	8001786 <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8001740:	68bb      	ldr	r3, [r7, #8]
 8001742:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001746:	d01e      	beq.n	8001786 <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001748:	f7ff f8ba 	bl	80008c0 <HAL_GetTick>
 800174c:	4602      	mov	r2, r0
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	1ad3      	subs	r3, r2, r3
 8001752:	68ba      	ldr	r2, [r7, #8]
 8001754:	429a      	cmp	r2, r3
 8001756:	d302      	bcc.n	800175e <I2C_IsAcknowledgeFailed+0x3a>
 8001758:	68bb      	ldr	r3, [r7, #8]
 800175a:	2b00      	cmp	r3, #0
 800175c:	d113      	bne.n	8001786 <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800175e:	68fb      	ldr	r3, [r7, #12]
 8001760:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001762:	f043 0220 	orr.w	r2, r3, #32
 8001766:	68fb      	ldr	r3, [r7, #12]
 8001768:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800176a:	68fb      	ldr	r3, [r7, #12]
 800176c:	2220      	movs	r2, #32
 800176e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	2200      	movs	r2, #0
 8001776:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800177a:	68fb      	ldr	r3, [r7, #12]
 800177c:	2200      	movs	r2, #0
 800177e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8001782:	2301      	movs	r3, #1
 8001784:	e02e      	b.n	80017e4 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001786:	68fb      	ldr	r3, [r7, #12]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	699b      	ldr	r3, [r3, #24]
 800178c:	f003 0320 	and.w	r3, r3, #32
 8001790:	2b20      	cmp	r3, #32
 8001792:	d1d5      	bne.n	8001740 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	2210      	movs	r2, #16
 800179a:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	2220      	movs	r2, #32
 80017a2:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80017a4:	68f8      	ldr	r0, [r7, #12]
 80017a6:	f7ff fedd 	bl	8001564 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80017aa:	68fb      	ldr	r3, [r7, #12]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	6859      	ldr	r1, [r3, #4]
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	681a      	ldr	r2, [r3, #0]
 80017b4:	4b0d      	ldr	r3, [pc, #52]	; (80017ec <I2C_IsAcknowledgeFailed+0xc8>)
 80017b6:	400b      	ands	r3, r1
 80017b8:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80017ba:	68fb      	ldr	r3, [r7, #12]
 80017bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017be:	f043 0204 	orr.w	r2, r3, #4
 80017c2:	68fb      	ldr	r3, [r7, #12]
 80017c4:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80017c6:	68fb      	ldr	r3, [r7, #12]
 80017c8:	2220      	movs	r2, #32
 80017ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80017ce:	68fb      	ldr	r3, [r7, #12]
 80017d0:	2200      	movs	r2, #0
 80017d2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80017d6:	68fb      	ldr	r3, [r7, #12]
 80017d8:	2200      	movs	r2, #0
 80017da:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 80017de:	2301      	movs	r3, #1
 80017e0:	e000      	b.n	80017e4 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 80017e2:	2300      	movs	r3, #0
}
 80017e4:	4618      	mov	r0, r3
 80017e6:	3710      	adds	r7, #16
 80017e8:	46bd      	mov	sp, r7
 80017ea:	bd80      	pop	{r7, pc}
 80017ec:	fe00e800 	.word	0xfe00e800

080017f0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80017f0:	b480      	push	{r7}
 80017f2:	b085      	sub	sp, #20
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	60f8      	str	r0, [r7, #12]
 80017f8:	607b      	str	r3, [r7, #4]
 80017fa:	460b      	mov	r3, r1
 80017fc:	817b      	strh	r3, [r7, #10]
 80017fe:	4613      	mov	r3, r2
 8001800:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 8001802:	68fb      	ldr	r3, [r7, #12]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	685a      	ldr	r2, [r3, #4]
 8001808:	69bb      	ldr	r3, [r7, #24]
 800180a:	0d5b      	lsrs	r3, r3, #21
 800180c:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8001810:	4b0d      	ldr	r3, [pc, #52]	; (8001848 <I2C_TransferConfig+0x58>)
 8001812:	430b      	orrs	r3, r1
 8001814:	43db      	mvns	r3, r3
 8001816:	ea02 0103 	and.w	r1, r2, r3
 800181a:	897b      	ldrh	r3, [r7, #10]
 800181c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001820:	7a7b      	ldrb	r3, [r7, #9]
 8001822:	041b      	lsls	r3, r3, #16
 8001824:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8001828:	431a      	orrs	r2, r3
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	431a      	orrs	r2, r3
 800182e:	69bb      	ldr	r3, [r7, #24]
 8001830:	431a      	orrs	r2, r3
 8001832:	68fb      	ldr	r3, [r7, #12]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	430a      	orrs	r2, r1
 8001838:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 800183a:	bf00      	nop
 800183c:	3714      	adds	r7, #20
 800183e:	46bd      	mov	sp, r7
 8001840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001844:	4770      	bx	lr
 8001846:	bf00      	nop
 8001848:	03ff63ff 	.word	0x03ff63ff

0800184c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800184c:	b480      	push	{r7}
 800184e:	b083      	sub	sp, #12
 8001850:	af00      	add	r7, sp, #0
 8001852:	6078      	str	r0, [r7, #4]
 8001854:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800185c:	b2db      	uxtb	r3, r3
 800185e:	2b20      	cmp	r3, #32
 8001860:	d138      	bne.n	80018d4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001868:	2b01      	cmp	r3, #1
 800186a:	d101      	bne.n	8001870 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800186c:	2302      	movs	r3, #2
 800186e:	e032      	b.n	80018d6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	2201      	movs	r2, #1
 8001874:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	2224      	movs	r2, #36	; 0x24
 800187c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	681a      	ldr	r2, [r3, #0]
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	f022 0201 	bic.w	r2, r2, #1
 800188e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	681a      	ldr	r2, [r3, #0]
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800189e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	6819      	ldr	r1, [r3, #0]
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	683a      	ldr	r2, [r7, #0]
 80018ac:	430a      	orrs	r2, r1
 80018ae:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	681a      	ldr	r2, [r3, #0]
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	f042 0201 	orr.w	r2, r2, #1
 80018be:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	2220      	movs	r2, #32
 80018c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	2200      	movs	r2, #0
 80018cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80018d0:	2300      	movs	r3, #0
 80018d2:	e000      	b.n	80018d6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80018d4:	2302      	movs	r3, #2
  }
}
 80018d6:	4618      	mov	r0, r3
 80018d8:	370c      	adds	r7, #12
 80018da:	46bd      	mov	sp, r7
 80018dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e0:	4770      	bx	lr

080018e2 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80018e2:	b480      	push	{r7}
 80018e4:	b085      	sub	sp, #20
 80018e6:	af00      	add	r7, sp, #0
 80018e8:	6078      	str	r0, [r7, #4]
 80018ea:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80018f2:	b2db      	uxtb	r3, r3
 80018f4:	2b20      	cmp	r3, #32
 80018f6:	d139      	bne.n	800196c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80018fe:	2b01      	cmp	r3, #1
 8001900:	d101      	bne.n	8001906 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001902:	2302      	movs	r3, #2
 8001904:	e033      	b.n	800196e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	2201      	movs	r2, #1
 800190a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	2224      	movs	r2, #36	; 0x24
 8001912:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	681a      	ldr	r2, [r3, #0]
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	f022 0201 	bic.w	r2, r2, #1
 8001924:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001934:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001936:	683b      	ldr	r3, [r7, #0]
 8001938:	021b      	lsls	r3, r3, #8
 800193a:	68fa      	ldr	r2, [r7, #12]
 800193c:	4313      	orrs	r3, r2
 800193e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	68fa      	ldr	r2, [r7, #12]
 8001946:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	681a      	ldr	r2, [r3, #0]
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	f042 0201 	orr.w	r2, r2, #1
 8001956:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	2220      	movs	r2, #32
 800195c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	2200      	movs	r2, #0
 8001964:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001968:	2300      	movs	r3, #0
 800196a:	e000      	b.n	800196e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800196c:	2302      	movs	r3, #2
  }
}
 800196e:	4618      	mov	r0, r3
 8001970:	3714      	adds	r7, #20
 8001972:	46bd      	mov	sp, r7
 8001974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001978:	4770      	bx	lr

0800197a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800197a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800197c:	b08b      	sub	sp, #44	; 0x2c
 800197e:	af06      	add	r7, sp, #24
 8001980:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	2b00      	cmp	r3, #0
 8001986:	d101      	bne.n	800198c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001988:	2301      	movs	r3, #1
 800198a:	e0d0      	b.n	8001b2e <HAL_PCD_Init+0x1b4>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8001992:	b2db      	uxtb	r3, r3
 8001994:	2b00      	cmp	r3, #0
 8001996:	d106      	bne.n	80019a6 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	2200      	movs	r2, #0
 800199c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80019a0:	6878      	ldr	r0, [r7, #4]
 80019a2:	f006 fc0d 	bl	80081c0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	2203      	movs	r2, #3
 80019aa:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	4618      	mov	r0, r3
 80019b4:	f002 fe2e 	bl	8004614 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80019b8:	2300      	movs	r3, #0
 80019ba:	73fb      	strb	r3, [r7, #15]
 80019bc:	e04c      	b.n	8001a58 <HAL_PCD_Init+0xde>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80019be:	7bfb      	ldrb	r3, [r7, #15]
 80019c0:	6879      	ldr	r1, [r7, #4]
 80019c2:	1c5a      	adds	r2, r3, #1
 80019c4:	4613      	mov	r3, r2
 80019c6:	009b      	lsls	r3, r3, #2
 80019c8:	4413      	add	r3, r2
 80019ca:	00db      	lsls	r3, r3, #3
 80019cc:	440b      	add	r3, r1
 80019ce:	3301      	adds	r3, #1
 80019d0:	2201      	movs	r2, #1
 80019d2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80019d4:	7bfb      	ldrb	r3, [r7, #15]
 80019d6:	6879      	ldr	r1, [r7, #4]
 80019d8:	1c5a      	adds	r2, r3, #1
 80019da:	4613      	mov	r3, r2
 80019dc:	009b      	lsls	r3, r3, #2
 80019de:	4413      	add	r3, r2
 80019e0:	00db      	lsls	r3, r3, #3
 80019e2:	440b      	add	r3, r1
 80019e4:	7bfa      	ldrb	r2, [r7, #15]
 80019e6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80019e8:	7bfa      	ldrb	r2, [r7, #15]
 80019ea:	7bfb      	ldrb	r3, [r7, #15]
 80019ec:	b298      	uxth	r0, r3
 80019ee:	6879      	ldr	r1, [r7, #4]
 80019f0:	4613      	mov	r3, r2
 80019f2:	009b      	lsls	r3, r3, #2
 80019f4:	4413      	add	r3, r2
 80019f6:	00db      	lsls	r3, r3, #3
 80019f8:	440b      	add	r3, r1
 80019fa:	3336      	adds	r3, #54	; 0x36
 80019fc:	4602      	mov	r2, r0
 80019fe:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001a00:	7bfb      	ldrb	r3, [r7, #15]
 8001a02:	6879      	ldr	r1, [r7, #4]
 8001a04:	1c5a      	adds	r2, r3, #1
 8001a06:	4613      	mov	r3, r2
 8001a08:	009b      	lsls	r3, r3, #2
 8001a0a:	4413      	add	r3, r2
 8001a0c:	00db      	lsls	r3, r3, #3
 8001a0e:	440b      	add	r3, r1
 8001a10:	3303      	adds	r3, #3
 8001a12:	2200      	movs	r2, #0
 8001a14:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001a16:	7bfa      	ldrb	r2, [r7, #15]
 8001a18:	6879      	ldr	r1, [r7, #4]
 8001a1a:	4613      	mov	r3, r2
 8001a1c:	009b      	lsls	r3, r3, #2
 8001a1e:	4413      	add	r3, r2
 8001a20:	00db      	lsls	r3, r3, #3
 8001a22:	440b      	add	r3, r1
 8001a24:	3338      	adds	r3, #56	; 0x38
 8001a26:	2200      	movs	r2, #0
 8001a28:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001a2a:	7bfa      	ldrb	r2, [r7, #15]
 8001a2c:	6879      	ldr	r1, [r7, #4]
 8001a2e:	4613      	mov	r3, r2
 8001a30:	009b      	lsls	r3, r3, #2
 8001a32:	4413      	add	r3, r2
 8001a34:	00db      	lsls	r3, r3, #3
 8001a36:	440b      	add	r3, r1
 8001a38:	333c      	adds	r3, #60	; 0x3c
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001a3e:	7bfa      	ldrb	r2, [r7, #15]
 8001a40:	6879      	ldr	r1, [r7, #4]
 8001a42:	4613      	mov	r3, r2
 8001a44:	009b      	lsls	r3, r3, #2
 8001a46:	4413      	add	r3, r2
 8001a48:	00db      	lsls	r3, r3, #3
 8001a4a:	440b      	add	r3, r1
 8001a4c:	3340      	adds	r3, #64	; 0x40
 8001a4e:	2200      	movs	r2, #0
 8001a50:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001a52:	7bfb      	ldrb	r3, [r7, #15]
 8001a54:	3301      	adds	r3, #1
 8001a56:	73fb      	strb	r3, [r7, #15]
 8001a58:	7bfa      	ldrb	r2, [r7, #15]
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	685b      	ldr	r3, [r3, #4]
 8001a5e:	429a      	cmp	r2, r3
 8001a60:	d3ad      	bcc.n	80019be <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001a62:	2300      	movs	r3, #0
 8001a64:	73fb      	strb	r3, [r7, #15]
 8001a66:	e044      	b.n	8001af2 <HAL_PCD_Init+0x178>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001a68:	7bfa      	ldrb	r2, [r7, #15]
 8001a6a:	6879      	ldr	r1, [r7, #4]
 8001a6c:	4613      	mov	r3, r2
 8001a6e:	009b      	lsls	r3, r3, #2
 8001a70:	4413      	add	r3, r2
 8001a72:	00db      	lsls	r3, r3, #3
 8001a74:	440b      	add	r3, r1
 8001a76:	f203 1369 	addw	r3, r3, #361	; 0x169
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001a7e:	7bfa      	ldrb	r2, [r7, #15]
 8001a80:	6879      	ldr	r1, [r7, #4]
 8001a82:	4613      	mov	r3, r2
 8001a84:	009b      	lsls	r3, r3, #2
 8001a86:	4413      	add	r3, r2
 8001a88:	00db      	lsls	r3, r3, #3
 8001a8a:	440b      	add	r3, r1
 8001a8c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001a90:	7bfa      	ldrb	r2, [r7, #15]
 8001a92:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001a94:	7bfa      	ldrb	r2, [r7, #15]
 8001a96:	6879      	ldr	r1, [r7, #4]
 8001a98:	4613      	mov	r3, r2
 8001a9a:	009b      	lsls	r3, r3, #2
 8001a9c:	4413      	add	r3, r2
 8001a9e:	00db      	lsls	r3, r3, #3
 8001aa0:	440b      	add	r3, r1
 8001aa2:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001aaa:	7bfa      	ldrb	r2, [r7, #15]
 8001aac:	6879      	ldr	r1, [r7, #4]
 8001aae:	4613      	mov	r3, r2
 8001ab0:	009b      	lsls	r3, r3, #2
 8001ab2:	4413      	add	r3, r2
 8001ab4:	00db      	lsls	r3, r3, #3
 8001ab6:	440b      	add	r3, r1
 8001ab8:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8001abc:	2200      	movs	r2, #0
 8001abe:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001ac0:	7bfa      	ldrb	r2, [r7, #15]
 8001ac2:	6879      	ldr	r1, [r7, #4]
 8001ac4:	4613      	mov	r3, r2
 8001ac6:	009b      	lsls	r3, r3, #2
 8001ac8:	4413      	add	r3, r2
 8001aca:	00db      	lsls	r3, r3, #3
 8001acc:	440b      	add	r3, r1
 8001ace:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001ad6:	7bfa      	ldrb	r2, [r7, #15]
 8001ad8:	6879      	ldr	r1, [r7, #4]
 8001ada:	4613      	mov	r3, r2
 8001adc:	009b      	lsls	r3, r3, #2
 8001ade:	4413      	add	r3, r2
 8001ae0:	00db      	lsls	r3, r3, #3
 8001ae2:	440b      	add	r3, r1
 8001ae4:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8001ae8:	2200      	movs	r2, #0
 8001aea:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001aec:	7bfb      	ldrb	r3, [r7, #15]
 8001aee:	3301      	adds	r3, #1
 8001af0:	73fb      	strb	r3, [r7, #15]
 8001af2:	7bfa      	ldrb	r2, [r7, #15]
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	685b      	ldr	r3, [r3, #4]
 8001af8:	429a      	cmp	r2, r3
 8001afa:	d3b5      	bcc.n	8001a68 <HAL_PCD_Init+0xee>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	603b      	str	r3, [r7, #0]
 8001b02:	687e      	ldr	r6, [r7, #4]
 8001b04:	466d      	mov	r5, sp
 8001b06:	f106 0410 	add.w	r4, r6, #16
 8001b0a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001b0c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001b0e:	6823      	ldr	r3, [r4, #0]
 8001b10:	602b      	str	r3, [r5, #0]
 8001b12:	1d33      	adds	r3, r6, #4
 8001b14:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001b16:	6838      	ldr	r0, [r7, #0]
 8001b18:	f002 fd97 	bl	800464a <USB_DevInit>

  hpcd->USB_Address = 0U;
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	2200      	movs	r2, #0
 8001b20:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	2201      	movs	r2, #1
 8001b28:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  return HAL_OK;
 8001b2c:	2300      	movs	r3, #0
}
 8001b2e:	4618      	mov	r0, r3
 8001b30:	3714      	adds	r7, #20
 8001b32:	46bd      	mov	sp, r7
 8001b34:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001b36 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001b36:	b580      	push	{r7, lr}
 8001b38:	b082      	sub	sp, #8
 8001b3a:	af00      	add	r7, sp, #0
 8001b3c:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001b44:	2b01      	cmp	r3, #1
 8001b46:	d101      	bne.n	8001b4c <HAL_PCD_Start+0x16>
 8001b48:	2302      	movs	r3, #2
 8001b4a:	e016      	b.n	8001b7a <HAL_PCD_Start+0x44>
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	2201      	movs	r2, #1
 8001b50:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	4618      	mov	r0, r3
 8001b5a:	f002 fd44 	bl	80045e6 <USB_EnableGlobalInt>

  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8001b5e:	2101      	movs	r1, #1
 8001b60:	6878      	ldr	r0, [r7, #4]
 8001b62:	f006 fdcb 	bl	80086fc <HAL_PCDEx_SetConnectionState>

  (void)USB_DevConnect(hpcd->Instance);
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	4618      	mov	r0, r3
 8001b6c:	f004 fd1c 	bl	80065a8 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	2200      	movs	r2, #0
 8001b74:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001b78:	2300      	movs	r3, #0
}
 8001b7a:	4618      	mov	r0, r3
 8001b7c:	3708      	adds	r7, #8
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	bd80      	pop	{r7, pc}

08001b82 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001b82:	b580      	push	{r7, lr}
 8001b84:	b082      	sub	sp, #8
 8001b86:	af00      	add	r7, sp, #0
 8001b88:	6078      	str	r0, [r7, #4]
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	4618      	mov	r0, r3
 8001b90:	f004 fd15 	bl	80065be <USB_ReadInterrupts>
 8001b94:	4603      	mov	r3, r0
 8001b96:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001b9a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001b9e:	d102      	bne.n	8001ba6 <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8001ba0:	6878      	ldr	r0, [r7, #4]
 8001ba2:	f000 faf6 	bl	8002192 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	4618      	mov	r0, r3
 8001bac:	f004 fd07 	bl	80065be <USB_ReadInterrupts>
 8001bb0:	4603      	mov	r3, r0
 8001bb2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001bb6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001bba:	d112      	bne.n	8001be2 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001bc4:	b29a      	uxth	r2, r3
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001bce:	b292      	uxth	r2, r2
 8001bd0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8001bd4:	6878      	ldr	r0, [r7, #4]
 8001bd6:	f006 fb94 	bl	8008302 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8001bda:	2100      	movs	r1, #0
 8001bdc:	6878      	ldr	r0, [r7, #4]
 8001bde:	f000 f8c7 	bl	8001d70 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	4618      	mov	r0, r3
 8001be8:	f004 fce9 	bl	80065be <USB_ReadInterrupts>
 8001bec:	4603      	mov	r3, r0
 8001bee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001bf2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001bf6:	d10b      	bne.n	8001c10 <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001c00:	b29a      	uxth	r2, r3
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001c0a:	b292      	uxth	r2, r2
 8001c0c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	4618      	mov	r0, r3
 8001c16:	f004 fcd2 	bl	80065be <USB_ReadInterrupts>
 8001c1a:	4603      	mov	r3, r0
 8001c1c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001c20:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001c24:	d10b      	bne.n	8001c3e <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001c2e:	b29a      	uxth	r2, r3
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001c38:	b292      	uxth	r2, r2
 8001c3a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	4618      	mov	r0, r3
 8001c44:	f004 fcbb 	bl	80065be <USB_ReadInterrupts>
 8001c48:	4603      	mov	r3, r0
 8001c4a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001c4e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001c52:	d126      	bne.n	8001ca2 <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001c5c:	b29a      	uxth	r2, r3
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	f022 0204 	bic.w	r2, r2, #4
 8001c66:	b292      	uxth	r2, r2
 8001c68:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001c74:	b29a      	uxth	r2, r3
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	f022 0208 	bic.w	r2, r2, #8
 8001c7e:	b292      	uxth	r2, r2
 8001c80:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8001c84:	6878      	ldr	r0, [r7, #4]
 8001c86:	f006 fb75 	bl	8008374 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001c92:	b29a      	uxth	r2, r3
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001c9c:	b292      	uxth	r2, r2
 8001c9e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	4618      	mov	r0, r3
 8001ca8:	f004 fc89 	bl	80065be <USB_ReadInterrupts>
 8001cac:	4603      	mov	r3, r0
 8001cae:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001cb2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001cb6:	d126      	bne.n	8001d06 <HAL_PCD_IRQHandler+0x184>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001cc0:	b29a      	uxth	r2, r3
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	f042 0208 	orr.w	r2, r2, #8
 8001cca:	b292      	uxth	r2, r2
 8001ccc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001cd8:	b29a      	uxth	r2, r3
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001ce2:	b292      	uxth	r2, r2
 8001ce4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001cf0:	b29a      	uxth	r2, r3
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	f042 0204 	orr.w	r2, r2, #4
 8001cfa:	b292      	uxth	r2, r2
 8001cfc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8001d00:	6878      	ldr	r0, [r7, #4]
 8001d02:	f006 fb1d 	bl	8008340 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	4618      	mov	r0, r3
 8001d0c:	f004 fc57 	bl	80065be <USB_ReadInterrupts>
 8001d10:	4603      	mov	r3, r0
 8001d12:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001d16:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001d1a:	d10e      	bne.n	8001d3a <HAL_PCD_IRQHandler+0x1b8>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001d24:	b29a      	uxth	r2, r3
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001d2e:	b292      	uxth	r2, r2
 8001d30:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8001d34:	6878      	ldr	r0, [r7, #4]
 8001d36:	f006 fad6 	bl	80082e6 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	4618      	mov	r0, r3
 8001d40:	f004 fc3d 	bl	80065be <USB_ReadInterrupts>
 8001d44:	4603      	mov	r3, r0
 8001d46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d4a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001d4e:	d10b      	bne.n	8001d68 <HAL_PCD_IRQHandler+0x1e6>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001d58:	b29a      	uxth	r2, r3
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001d62:	b292      	uxth	r2, r2
 8001d64:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 8001d68:	bf00      	nop
 8001d6a:	3708      	adds	r7, #8
 8001d6c:	46bd      	mov	sp, r7
 8001d6e:	bd80      	pop	{r7, pc}

08001d70 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001d70:	b580      	push	{r7, lr}
 8001d72:	b082      	sub	sp, #8
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	6078      	str	r0, [r7, #4]
 8001d78:	460b      	mov	r3, r1
 8001d7a:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001d82:	2b01      	cmp	r3, #1
 8001d84:	d101      	bne.n	8001d8a <HAL_PCD_SetAddress+0x1a>
 8001d86:	2302      	movs	r3, #2
 8001d88:	e013      	b.n	8001db2 <HAL_PCD_SetAddress+0x42>
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	2201      	movs	r2, #1
 8001d8e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	78fa      	ldrb	r2, [r7, #3]
 8001d96:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	78fa      	ldrb	r2, [r7, #3]
 8001da0:	4611      	mov	r1, r2
 8001da2:	4618      	mov	r0, r3
 8001da4:	f004 fbec 	bl	8006580 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	2200      	movs	r2, #0
 8001dac:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001db0:	2300      	movs	r3, #0
}
 8001db2:	4618      	mov	r0, r3
 8001db4:	3708      	adds	r7, #8
 8001db6:	46bd      	mov	sp, r7
 8001db8:	bd80      	pop	{r7, pc}

08001dba <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 8001dba:	b580      	push	{r7, lr}
 8001dbc:	b084      	sub	sp, #16
 8001dbe:	af00      	add	r7, sp, #0
 8001dc0:	6078      	str	r0, [r7, #4]
 8001dc2:	4608      	mov	r0, r1
 8001dc4:	4611      	mov	r1, r2
 8001dc6:	461a      	mov	r2, r3
 8001dc8:	4603      	mov	r3, r0
 8001dca:	70fb      	strb	r3, [r7, #3]
 8001dcc:	460b      	mov	r3, r1
 8001dce:	803b      	strh	r3, [r7, #0]
 8001dd0:	4613      	mov	r3, r2
 8001dd2:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001dd4:	2300      	movs	r3, #0
 8001dd6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001dd8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	da0e      	bge.n	8001dfe <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001de0:	78fb      	ldrb	r3, [r7, #3]
 8001de2:	f003 0307 	and.w	r3, r3, #7
 8001de6:	1c5a      	adds	r2, r3, #1
 8001de8:	4613      	mov	r3, r2
 8001dea:	009b      	lsls	r3, r3, #2
 8001dec:	4413      	add	r3, r2
 8001dee:	00db      	lsls	r3, r3, #3
 8001df0:	687a      	ldr	r2, [r7, #4]
 8001df2:	4413      	add	r3, r2
 8001df4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	2201      	movs	r2, #1
 8001dfa:	705a      	strb	r2, [r3, #1]
 8001dfc:	e00e      	b.n	8001e1c <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001dfe:	78fb      	ldrb	r3, [r7, #3]
 8001e00:	f003 0207 	and.w	r2, r3, #7
 8001e04:	4613      	mov	r3, r2
 8001e06:	009b      	lsls	r3, r3, #2
 8001e08:	4413      	add	r3, r2
 8001e0a:	00db      	lsls	r3, r3, #3
 8001e0c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001e10:	687a      	ldr	r2, [r7, #4]
 8001e12:	4413      	add	r3, r2
 8001e14:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	2200      	movs	r2, #0
 8001e1a:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001e1c:	78fb      	ldrb	r3, [r7, #3]
 8001e1e:	f003 0307 	and.w	r3, r3, #7
 8001e22:	b2da      	uxtb	r2, r3
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001e28:	883a      	ldrh	r2, [r7, #0]
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	78ba      	ldrb	r2, [r7, #2]
 8001e32:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	785b      	ldrb	r3, [r3, #1]
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d004      	beq.n	8001e46 <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	781b      	ldrb	r3, [r3, #0]
 8001e40:	b29a      	uxth	r2, r3
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001e46:	78bb      	ldrb	r3, [r7, #2]
 8001e48:	2b02      	cmp	r3, #2
 8001e4a:	d102      	bne.n	8001e52 <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	2200      	movs	r2, #0
 8001e50:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001e58:	2b01      	cmp	r3, #1
 8001e5a:	d101      	bne.n	8001e60 <HAL_PCD_EP_Open+0xa6>
 8001e5c:	2302      	movs	r3, #2
 8001e5e:	e00e      	b.n	8001e7e <HAL_PCD_EP_Open+0xc4>
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	2201      	movs	r2, #1
 8001e64:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	68f9      	ldr	r1, [r7, #12]
 8001e6e:	4618      	mov	r0, r3
 8001e70:	f002 fc0c 	bl	800468c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	2200      	movs	r2, #0
 8001e78:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8001e7c:	7afb      	ldrb	r3, [r7, #11]
}
 8001e7e:	4618      	mov	r0, r3
 8001e80:	3710      	adds	r7, #16
 8001e82:	46bd      	mov	sp, r7
 8001e84:	bd80      	pop	{r7, pc}

08001e86 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001e86:	b580      	push	{r7, lr}
 8001e88:	b084      	sub	sp, #16
 8001e8a:	af00      	add	r7, sp, #0
 8001e8c:	6078      	str	r0, [r7, #4]
 8001e8e:	460b      	mov	r3, r1
 8001e90:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001e92:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	da0e      	bge.n	8001eb8 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001e9a:	78fb      	ldrb	r3, [r7, #3]
 8001e9c:	f003 0307 	and.w	r3, r3, #7
 8001ea0:	1c5a      	adds	r2, r3, #1
 8001ea2:	4613      	mov	r3, r2
 8001ea4:	009b      	lsls	r3, r3, #2
 8001ea6:	4413      	add	r3, r2
 8001ea8:	00db      	lsls	r3, r3, #3
 8001eaa:	687a      	ldr	r2, [r7, #4]
 8001eac:	4413      	add	r3, r2
 8001eae:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	2201      	movs	r2, #1
 8001eb4:	705a      	strb	r2, [r3, #1]
 8001eb6:	e00e      	b.n	8001ed6 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001eb8:	78fb      	ldrb	r3, [r7, #3]
 8001eba:	f003 0207 	and.w	r2, r3, #7
 8001ebe:	4613      	mov	r3, r2
 8001ec0:	009b      	lsls	r3, r3, #2
 8001ec2:	4413      	add	r3, r2
 8001ec4:	00db      	lsls	r3, r3, #3
 8001ec6:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001eca:	687a      	ldr	r2, [r7, #4]
 8001ecc:	4413      	add	r3, r2
 8001ece:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	2200      	movs	r2, #0
 8001ed4:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8001ed6:	78fb      	ldrb	r3, [r7, #3]
 8001ed8:	f003 0307 	and.w	r3, r3, #7
 8001edc:	b2da      	uxtb	r2, r3
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001ee8:	2b01      	cmp	r3, #1
 8001eea:	d101      	bne.n	8001ef0 <HAL_PCD_EP_Close+0x6a>
 8001eec:	2302      	movs	r3, #2
 8001eee:	e00e      	b.n	8001f0e <HAL_PCD_EP_Close+0x88>
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	2201      	movs	r2, #1
 8001ef4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	68f9      	ldr	r1, [r7, #12]
 8001efe:	4618      	mov	r0, r3
 8001f00:	f002 ff32 	bl	8004d68 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	2200      	movs	r2, #0
 8001f08:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 8001f0c:	2300      	movs	r3, #0
}
 8001f0e:	4618      	mov	r0, r3
 8001f10:	3710      	adds	r7, #16
 8001f12:	46bd      	mov	sp, r7
 8001f14:	bd80      	pop	{r7, pc}

08001f16 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001f16:	b580      	push	{r7, lr}
 8001f18:	b086      	sub	sp, #24
 8001f1a:	af00      	add	r7, sp, #0
 8001f1c:	60f8      	str	r0, [r7, #12]
 8001f1e:	607a      	str	r2, [r7, #4]
 8001f20:	603b      	str	r3, [r7, #0]
 8001f22:	460b      	mov	r3, r1
 8001f24:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001f26:	7afb      	ldrb	r3, [r7, #11]
 8001f28:	f003 0207 	and.w	r2, r3, #7
 8001f2c:	4613      	mov	r3, r2
 8001f2e:	009b      	lsls	r3, r3, #2
 8001f30:	4413      	add	r3, r2
 8001f32:	00db      	lsls	r3, r3, #3
 8001f34:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001f38:	68fa      	ldr	r2, [r7, #12]
 8001f3a:	4413      	add	r3, r2
 8001f3c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001f3e:	697b      	ldr	r3, [r7, #20]
 8001f40:	687a      	ldr	r2, [r7, #4]
 8001f42:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001f44:	697b      	ldr	r3, [r7, #20]
 8001f46:	683a      	ldr	r2, [r7, #0]
 8001f48:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8001f4a:	697b      	ldr	r3, [r7, #20]
 8001f4c:	2200      	movs	r2, #0
 8001f4e:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8001f50:	697b      	ldr	r3, [r7, #20]
 8001f52:	2200      	movs	r2, #0
 8001f54:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001f56:	7afb      	ldrb	r3, [r7, #11]
 8001f58:	f003 0307 	and.w	r3, r3, #7
 8001f5c:	b2da      	uxtb	r2, r3
 8001f5e:	697b      	ldr	r3, [r7, #20]
 8001f60:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001f62:	7afb      	ldrb	r3, [r7, #11]
 8001f64:	f003 0307 	and.w	r3, r3, #7
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d106      	bne.n	8001f7a <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	6979      	ldr	r1, [r7, #20]
 8001f72:	4618      	mov	r0, r3
 8001f74:	f003 f8e5 	bl	8005142 <USB_EPStartXfer>
 8001f78:	e005      	b.n	8001f86 <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	6979      	ldr	r1, [r7, #20]
 8001f80:	4618      	mov	r0, r3
 8001f82:	f003 f8de 	bl	8005142 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001f86:	2300      	movs	r3, #0
}
 8001f88:	4618      	mov	r0, r3
 8001f8a:	3718      	adds	r7, #24
 8001f8c:	46bd      	mov	sp, r7
 8001f8e:	bd80      	pop	{r7, pc}

08001f90 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001f90:	b480      	push	{r7}
 8001f92:	b083      	sub	sp, #12
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	6078      	str	r0, [r7, #4]
 8001f98:	460b      	mov	r3, r1
 8001f9a:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8001f9c:	78fb      	ldrb	r3, [r7, #3]
 8001f9e:	f003 0207 	and.w	r2, r3, #7
 8001fa2:	6879      	ldr	r1, [r7, #4]
 8001fa4:	4613      	mov	r3, r2
 8001fa6:	009b      	lsls	r3, r3, #2
 8001fa8:	4413      	add	r3, r2
 8001faa:	00db      	lsls	r3, r3, #3
 8001fac:	440b      	add	r3, r1
 8001fae:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8001fb2:	681b      	ldr	r3, [r3, #0]
}
 8001fb4:	4618      	mov	r0, r3
 8001fb6:	370c      	adds	r7, #12
 8001fb8:	46bd      	mov	sp, r7
 8001fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fbe:	4770      	bx	lr

08001fc0 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	b086      	sub	sp, #24
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	60f8      	str	r0, [r7, #12]
 8001fc8:	607a      	str	r2, [r7, #4]
 8001fca:	603b      	str	r3, [r7, #0]
 8001fcc:	460b      	mov	r3, r1
 8001fce:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001fd0:	7afb      	ldrb	r3, [r7, #11]
 8001fd2:	f003 0307 	and.w	r3, r3, #7
 8001fd6:	1c5a      	adds	r2, r3, #1
 8001fd8:	4613      	mov	r3, r2
 8001fda:	009b      	lsls	r3, r3, #2
 8001fdc:	4413      	add	r3, r2
 8001fde:	00db      	lsls	r3, r3, #3
 8001fe0:	68fa      	ldr	r2, [r7, #12]
 8001fe2:	4413      	add	r3, r2
 8001fe4:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001fe6:	697b      	ldr	r3, [r7, #20]
 8001fe8:	687a      	ldr	r2, [r7, #4]
 8001fea:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001fec:	697b      	ldr	r3, [r7, #20]
 8001fee:	683a      	ldr	r2, [r7, #0]
 8001ff0:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 8001ff2:	697b      	ldr	r3, [r7, #20]
 8001ff4:	2201      	movs	r2, #1
 8001ff6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8001ffa:	697b      	ldr	r3, [r7, #20]
 8001ffc:	683a      	ldr	r2, [r7, #0]
 8001ffe:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 8002000:	697b      	ldr	r3, [r7, #20]
 8002002:	2200      	movs	r2, #0
 8002004:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8002006:	697b      	ldr	r3, [r7, #20]
 8002008:	2201      	movs	r2, #1
 800200a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800200c:	7afb      	ldrb	r3, [r7, #11]
 800200e:	f003 0307 	and.w	r3, r3, #7
 8002012:	b2da      	uxtb	r2, r3
 8002014:	697b      	ldr	r3, [r7, #20]
 8002016:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002018:	7afb      	ldrb	r3, [r7, #11]
 800201a:	f003 0307 	and.w	r3, r3, #7
 800201e:	2b00      	cmp	r3, #0
 8002020:	d106      	bne.n	8002030 <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	6979      	ldr	r1, [r7, #20]
 8002028:	4618      	mov	r0, r3
 800202a:	f003 f88a 	bl	8005142 <USB_EPStartXfer>
 800202e:	e005      	b.n	800203c <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	6979      	ldr	r1, [r7, #20]
 8002036:	4618      	mov	r0, r3
 8002038:	f003 f883 	bl	8005142 <USB_EPStartXfer>
  }

  return HAL_OK;
 800203c:	2300      	movs	r3, #0
}
 800203e:	4618      	mov	r0, r3
 8002040:	3718      	adds	r7, #24
 8002042:	46bd      	mov	sp, r7
 8002044:	bd80      	pop	{r7, pc}

08002046 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002046:	b580      	push	{r7, lr}
 8002048:	b084      	sub	sp, #16
 800204a:	af00      	add	r7, sp, #0
 800204c:	6078      	str	r0, [r7, #4]
 800204e:	460b      	mov	r3, r1
 8002050:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002052:	78fb      	ldrb	r3, [r7, #3]
 8002054:	f003 0207 	and.w	r2, r3, #7
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	685b      	ldr	r3, [r3, #4]
 800205c:	429a      	cmp	r2, r3
 800205e:	d901      	bls.n	8002064 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002060:	2301      	movs	r3, #1
 8002062:	e03e      	b.n	80020e2 <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002064:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002068:	2b00      	cmp	r3, #0
 800206a:	da0e      	bge.n	800208a <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800206c:	78fb      	ldrb	r3, [r7, #3]
 800206e:	f003 0307 	and.w	r3, r3, #7
 8002072:	1c5a      	adds	r2, r3, #1
 8002074:	4613      	mov	r3, r2
 8002076:	009b      	lsls	r3, r3, #2
 8002078:	4413      	add	r3, r2
 800207a:	00db      	lsls	r3, r3, #3
 800207c:	687a      	ldr	r2, [r7, #4]
 800207e:	4413      	add	r3, r2
 8002080:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	2201      	movs	r2, #1
 8002086:	705a      	strb	r2, [r3, #1]
 8002088:	e00c      	b.n	80020a4 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800208a:	78fa      	ldrb	r2, [r7, #3]
 800208c:	4613      	mov	r3, r2
 800208e:	009b      	lsls	r3, r3, #2
 8002090:	4413      	add	r3, r2
 8002092:	00db      	lsls	r3, r3, #3
 8002094:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002098:	687a      	ldr	r2, [r7, #4]
 800209a:	4413      	add	r3, r2
 800209c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	2200      	movs	r2, #0
 80020a2:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	2201      	movs	r2, #1
 80020a8:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80020aa:	78fb      	ldrb	r3, [r7, #3]
 80020ac:	f003 0307 	and.w	r3, r3, #7
 80020b0:	b2da      	uxtb	r2, r3
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80020bc:	2b01      	cmp	r3, #1
 80020be:	d101      	bne.n	80020c4 <HAL_PCD_EP_SetStall+0x7e>
 80020c0:	2302      	movs	r3, #2
 80020c2:	e00e      	b.n	80020e2 <HAL_PCD_EP_SetStall+0x9c>
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	2201      	movs	r2, #1
 80020c8:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	68f9      	ldr	r1, [r7, #12]
 80020d2:	4618      	mov	r0, r3
 80020d4:	f004 f955 	bl	8006382 <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	2200      	movs	r2, #0
 80020dc:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80020e0:	2300      	movs	r3, #0
}
 80020e2:	4618      	mov	r0, r3
 80020e4:	3710      	adds	r7, #16
 80020e6:	46bd      	mov	sp, r7
 80020e8:	bd80      	pop	{r7, pc}

080020ea <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80020ea:	b580      	push	{r7, lr}
 80020ec:	b084      	sub	sp, #16
 80020ee:	af00      	add	r7, sp, #0
 80020f0:	6078      	str	r0, [r7, #4]
 80020f2:	460b      	mov	r3, r1
 80020f4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80020f6:	78fb      	ldrb	r3, [r7, #3]
 80020f8:	f003 020f 	and.w	r2, r3, #15
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	685b      	ldr	r3, [r3, #4]
 8002100:	429a      	cmp	r2, r3
 8002102:	d901      	bls.n	8002108 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002104:	2301      	movs	r3, #1
 8002106:	e040      	b.n	800218a <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002108:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800210c:	2b00      	cmp	r3, #0
 800210e:	da0e      	bge.n	800212e <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002110:	78fb      	ldrb	r3, [r7, #3]
 8002112:	f003 0307 	and.w	r3, r3, #7
 8002116:	1c5a      	adds	r2, r3, #1
 8002118:	4613      	mov	r3, r2
 800211a:	009b      	lsls	r3, r3, #2
 800211c:	4413      	add	r3, r2
 800211e:	00db      	lsls	r3, r3, #3
 8002120:	687a      	ldr	r2, [r7, #4]
 8002122:	4413      	add	r3, r2
 8002124:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	2201      	movs	r2, #1
 800212a:	705a      	strb	r2, [r3, #1]
 800212c:	e00e      	b.n	800214c <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800212e:	78fb      	ldrb	r3, [r7, #3]
 8002130:	f003 0207 	and.w	r2, r3, #7
 8002134:	4613      	mov	r3, r2
 8002136:	009b      	lsls	r3, r3, #2
 8002138:	4413      	add	r3, r2
 800213a:	00db      	lsls	r3, r3, #3
 800213c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002140:	687a      	ldr	r2, [r7, #4]
 8002142:	4413      	add	r3, r2
 8002144:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	2200      	movs	r2, #0
 800214a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	2200      	movs	r2, #0
 8002150:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002152:	78fb      	ldrb	r3, [r7, #3]
 8002154:	f003 0307 	and.w	r3, r3, #7
 8002158:	b2da      	uxtb	r2, r3
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002164:	2b01      	cmp	r3, #1
 8002166:	d101      	bne.n	800216c <HAL_PCD_EP_ClrStall+0x82>
 8002168:	2302      	movs	r3, #2
 800216a:	e00e      	b.n	800218a <HAL_PCD_EP_ClrStall+0xa0>
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	2201      	movs	r2, #1
 8002170:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	68f9      	ldr	r1, [r7, #12]
 800217a:	4618      	mov	r0, r3
 800217c:	f004 f952 	bl	8006424 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	2200      	movs	r2, #0
 8002184:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8002188:	2300      	movs	r3, #0
}
 800218a:	4618      	mov	r0, r3
 800218c:	3710      	adds	r7, #16
 800218e:	46bd      	mov	sp, r7
 8002190:	bd80      	pop	{r7, pc}

08002192 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8002192:	b580      	push	{r7, lr}
 8002194:	b08e      	sub	sp, #56	; 0x38
 8002196:	af00      	add	r7, sp, #0
 8002198:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800219a:	e2df      	b.n	800275c <PCD_EP_ISR_Handler+0x5ca>
  {
    wIstr = hpcd->Instance->ISTR;
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80021a4:	85fb      	strh	r3, [r7, #46]	; 0x2e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 80021a6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80021a8:	b2db      	uxtb	r3, r3
 80021aa:	f003 030f 	and.w	r3, r3, #15
 80021ae:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 80021b2:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	f040 8158 	bne.w	800246c <PCD_EP_ISR_Handler+0x2da>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 80021bc:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80021be:	f003 0310 	and.w	r3, r3, #16
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d152      	bne.n	800226c <PCD_EP_ISR_Handler+0xda>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	881b      	ldrh	r3, [r3, #0]
 80021cc:	b29b      	uxth	r3, r3
 80021ce:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80021d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80021d6:	81fb      	strh	r3, [r7, #14]
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681a      	ldr	r2, [r3, #0]
 80021dc:	89fb      	ldrh	r3, [r7, #14]
 80021de:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80021e2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80021e6:	b29b      	uxth	r3, r3
 80021e8:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	3328      	adds	r3, #40	; 0x28
 80021ee:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80021f8:	b29b      	uxth	r3, r3
 80021fa:	461a      	mov	r2, r3
 80021fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021fe:	781b      	ldrb	r3, [r3, #0]
 8002200:	00db      	lsls	r3, r3, #3
 8002202:	4413      	add	r3, r2
 8002204:	3302      	adds	r3, #2
 8002206:	005b      	lsls	r3, r3, #1
 8002208:	687a      	ldr	r2, [r7, #4]
 800220a:	6812      	ldr	r2, [r2, #0]
 800220c:	4413      	add	r3, r2
 800220e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002212:	881b      	ldrh	r3, [r3, #0]
 8002214:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002218:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800221a:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 800221c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800221e:	695a      	ldr	r2, [r3, #20]
 8002220:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002222:	69db      	ldr	r3, [r3, #28]
 8002224:	441a      	add	r2, r3
 8002226:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002228:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 800222a:	2100      	movs	r1, #0
 800222c:	6878      	ldr	r0, [r7, #4]
 800222e:	f006 f840 	bl	80082b2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002238:	b2db      	uxtb	r3, r3
 800223a:	2b00      	cmp	r3, #0
 800223c:	f000 828e 	beq.w	800275c <PCD_EP_ISR_Handler+0x5ca>
 8002240:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002242:	699b      	ldr	r3, [r3, #24]
 8002244:	2b00      	cmp	r3, #0
 8002246:	f040 8289 	bne.w	800275c <PCD_EP_ISR_Handler+0x5ca>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002250:	b2db      	uxtb	r3, r3
 8002252:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002256:	b2da      	uxtb	r2, r3
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	b292      	uxth	r2, r2
 800225e:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	2200      	movs	r2, #0
 8002266:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800226a:	e277      	b.n	800275c <PCD_EP_ISR_Handler+0x5ca>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002272:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	881b      	ldrh	r3, [r3, #0]
 800227a:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 800227c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800227e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002282:	2b00      	cmp	r3, #0
 8002284:	d034      	beq.n	80022f0 <PCD_EP_ISR_Handler+0x15e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800228e:	b29b      	uxth	r3, r3
 8002290:	461a      	mov	r2, r3
 8002292:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002294:	781b      	ldrb	r3, [r3, #0]
 8002296:	00db      	lsls	r3, r3, #3
 8002298:	4413      	add	r3, r2
 800229a:	3306      	adds	r3, #6
 800229c:	005b      	lsls	r3, r3, #1
 800229e:	687a      	ldr	r2, [r7, #4]
 80022a0:	6812      	ldr	r2, [r2, #0]
 80022a2:	4413      	add	r3, r2
 80022a4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80022a8:	881b      	ldrh	r3, [r3, #0]
 80022aa:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80022ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022b0:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	6818      	ldr	r0, [r3, #0]
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 80022bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022be:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 80022c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022c2:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80022c4:	b29b      	uxth	r3, r3
 80022c6:	f004 f9cf 	bl	8006668 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	881b      	ldrh	r3, [r3, #0]
 80022d0:	b29a      	uxth	r2, r3
 80022d2:	f640 738f 	movw	r3, #3983	; 0xf8f
 80022d6:	4013      	ands	r3, r2
 80022d8:	823b      	strh	r3, [r7, #16]
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	8a3a      	ldrh	r2, [r7, #16]
 80022e0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80022e4:	b292      	uxth	r2, r2
 80022e6:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 80022e8:	6878      	ldr	r0, [r7, #4]
 80022ea:	f005 ffb5 	bl	8008258 <HAL_PCD_SetupStageCallback>
 80022ee:	e235      	b.n	800275c <PCD_EP_ISR_Handler+0x5ca>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80022f0:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	f280 8231 	bge.w	800275c <PCD_EP_ISR_Handler+0x5ca>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	881b      	ldrh	r3, [r3, #0]
 8002300:	b29a      	uxth	r2, r3
 8002302:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002306:	4013      	ands	r3, r2
 8002308:	83bb      	strh	r3, [r7, #28]
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	8bba      	ldrh	r2, [r7, #28]
 8002310:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002314:	b292      	uxth	r2, r2
 8002316:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002320:	b29b      	uxth	r3, r3
 8002322:	461a      	mov	r2, r3
 8002324:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002326:	781b      	ldrb	r3, [r3, #0]
 8002328:	00db      	lsls	r3, r3, #3
 800232a:	4413      	add	r3, r2
 800232c:	3306      	adds	r3, #6
 800232e:	005b      	lsls	r3, r3, #1
 8002330:	687a      	ldr	r2, [r7, #4]
 8002332:	6812      	ldr	r2, [r2, #0]
 8002334:	4413      	add	r3, r2
 8002336:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800233a:	881b      	ldrh	r3, [r3, #0]
 800233c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002340:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002342:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8002344:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002346:	69db      	ldr	r3, [r3, #28]
 8002348:	2b00      	cmp	r3, #0
 800234a:	d019      	beq.n	8002380 <PCD_EP_ISR_Handler+0x1ee>
 800234c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800234e:	695b      	ldr	r3, [r3, #20]
 8002350:	2b00      	cmp	r3, #0
 8002352:	d015      	beq.n	8002380 <PCD_EP_ISR_Handler+0x1ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	6818      	ldr	r0, [r3, #0]
 8002358:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800235a:	6959      	ldr	r1, [r3, #20]
 800235c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800235e:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8002360:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002362:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002364:	b29b      	uxth	r3, r3
 8002366:	f004 f97f 	bl	8006668 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 800236a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800236c:	695a      	ldr	r2, [r3, #20]
 800236e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002370:	69db      	ldr	r3, [r3, #28]
 8002372:	441a      	add	r2, r3
 8002374:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002376:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8002378:	2100      	movs	r1, #0
 800237a:	6878      	ldr	r0, [r7, #4]
 800237c:	f005 ff7e 	bl	800827c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	61bb      	str	r3, [r7, #24]
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800238e:	b29b      	uxth	r3, r3
 8002390:	461a      	mov	r2, r3
 8002392:	69bb      	ldr	r3, [r7, #24]
 8002394:	4413      	add	r3, r2
 8002396:	61bb      	str	r3, [r7, #24]
 8002398:	69bb      	ldr	r3, [r7, #24]
 800239a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800239e:	617b      	str	r3, [r7, #20]
 80023a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023a2:	691b      	ldr	r3, [r3, #16]
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d112      	bne.n	80023ce <PCD_EP_ISR_Handler+0x23c>
 80023a8:	697b      	ldr	r3, [r7, #20]
 80023aa:	881b      	ldrh	r3, [r3, #0]
 80023ac:	b29b      	uxth	r3, r3
 80023ae:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80023b2:	b29a      	uxth	r2, r3
 80023b4:	697b      	ldr	r3, [r7, #20]
 80023b6:	801a      	strh	r2, [r3, #0]
 80023b8:	697b      	ldr	r3, [r7, #20]
 80023ba:	881b      	ldrh	r3, [r3, #0]
 80023bc:	b29b      	uxth	r3, r3
 80023be:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80023c2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80023c6:	b29a      	uxth	r2, r3
 80023c8:	697b      	ldr	r3, [r7, #20]
 80023ca:	801a      	strh	r2, [r3, #0]
 80023cc:	e02f      	b.n	800242e <PCD_EP_ISR_Handler+0x29c>
 80023ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023d0:	691b      	ldr	r3, [r3, #16]
 80023d2:	2b3e      	cmp	r3, #62	; 0x3e
 80023d4:	d813      	bhi.n	80023fe <PCD_EP_ISR_Handler+0x26c>
 80023d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023d8:	691b      	ldr	r3, [r3, #16]
 80023da:	085b      	lsrs	r3, r3, #1
 80023dc:	633b      	str	r3, [r7, #48]	; 0x30
 80023de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023e0:	691b      	ldr	r3, [r3, #16]
 80023e2:	f003 0301 	and.w	r3, r3, #1
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d002      	beq.n	80023f0 <PCD_EP_ISR_Handler+0x25e>
 80023ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023ec:	3301      	adds	r3, #1
 80023ee:	633b      	str	r3, [r7, #48]	; 0x30
 80023f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023f2:	b29b      	uxth	r3, r3
 80023f4:	029b      	lsls	r3, r3, #10
 80023f6:	b29a      	uxth	r2, r3
 80023f8:	697b      	ldr	r3, [r7, #20]
 80023fa:	801a      	strh	r2, [r3, #0]
 80023fc:	e017      	b.n	800242e <PCD_EP_ISR_Handler+0x29c>
 80023fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002400:	691b      	ldr	r3, [r3, #16]
 8002402:	095b      	lsrs	r3, r3, #5
 8002404:	633b      	str	r3, [r7, #48]	; 0x30
 8002406:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002408:	691b      	ldr	r3, [r3, #16]
 800240a:	f003 031f 	and.w	r3, r3, #31
 800240e:	2b00      	cmp	r3, #0
 8002410:	d102      	bne.n	8002418 <PCD_EP_ISR_Handler+0x286>
 8002412:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002414:	3b01      	subs	r3, #1
 8002416:	633b      	str	r3, [r7, #48]	; 0x30
 8002418:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800241a:	b29b      	uxth	r3, r3
 800241c:	029b      	lsls	r3, r3, #10
 800241e:	b29b      	uxth	r3, r3
 8002420:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002424:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002428:	b29a      	uxth	r2, r3
 800242a:	697b      	ldr	r3, [r7, #20]
 800242c:	801a      	strh	r2, [r3, #0]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	881b      	ldrh	r3, [r3, #0]
 8002434:	b29b      	uxth	r3, r3
 8002436:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800243a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800243e:	827b      	strh	r3, [r7, #18]
 8002440:	8a7b      	ldrh	r3, [r7, #18]
 8002442:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8002446:	827b      	strh	r3, [r7, #18]
 8002448:	8a7b      	ldrh	r3, [r7, #18]
 800244a:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800244e:	827b      	strh	r3, [r7, #18]
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681a      	ldr	r2, [r3, #0]
 8002454:	8a7b      	ldrh	r3, [r7, #18]
 8002456:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800245a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800245e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002462:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002466:	b29b      	uxth	r3, r3
 8002468:	8013      	strh	r3, [r2, #0]
 800246a:	e177      	b.n	800275c <PCD_EP_ISR_Handler+0x5ca>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	461a      	mov	r2, r3
 8002472:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002476:	009b      	lsls	r3, r3, #2
 8002478:	4413      	add	r3, r2
 800247a:	881b      	ldrh	r3, [r3, #0]
 800247c:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800247e:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8002482:	2b00      	cmp	r3, #0
 8002484:	f280 80ea 	bge.w	800265c <PCD_EP_ISR_Handler+0x4ca>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	461a      	mov	r2, r3
 800248e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002492:	009b      	lsls	r3, r3, #2
 8002494:	4413      	add	r3, r2
 8002496:	881b      	ldrh	r3, [r3, #0]
 8002498:	b29a      	uxth	r2, r3
 800249a:	f640 738f 	movw	r3, #3983	; 0xf8f
 800249e:	4013      	ands	r3, r2
 80024a0:	853b      	strh	r3, [r7, #40]	; 0x28
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	461a      	mov	r2, r3
 80024a8:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80024ac:	009b      	lsls	r3, r3, #2
 80024ae:	4413      	add	r3, r2
 80024b0:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80024b2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80024b6:	b292      	uxth	r2, r2
 80024b8:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 80024ba:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 80024be:	4613      	mov	r3, r2
 80024c0:	009b      	lsls	r3, r3, #2
 80024c2:	4413      	add	r3, r2
 80024c4:	00db      	lsls	r3, r3, #3
 80024c6:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80024ca:	687a      	ldr	r2, [r7, #4]
 80024cc:	4413      	add	r3, r2
 80024ce:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 80024d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024d2:	7b1b      	ldrb	r3, [r3, #12]
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d122      	bne.n	800251e <PCD_EP_ISR_Handler+0x38c>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80024e0:	b29b      	uxth	r3, r3
 80024e2:	461a      	mov	r2, r3
 80024e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024e6:	781b      	ldrb	r3, [r3, #0]
 80024e8:	00db      	lsls	r3, r3, #3
 80024ea:	4413      	add	r3, r2
 80024ec:	3306      	adds	r3, #6
 80024ee:	005b      	lsls	r3, r3, #1
 80024f0:	687a      	ldr	r2, [r7, #4]
 80024f2:	6812      	ldr	r2, [r2, #0]
 80024f4:	4413      	add	r3, r2
 80024f6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80024fa:	881b      	ldrh	r3, [r3, #0]
 80024fc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002500:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 8002502:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002504:	2b00      	cmp	r3, #0
 8002506:	f000 8087 	beq.w	8002618 <PCD_EP_ISR_Handler+0x486>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	6818      	ldr	r0, [r3, #0]
 800250e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002510:	6959      	ldr	r1, [r3, #20]
 8002512:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002514:	88da      	ldrh	r2, [r3, #6]
 8002516:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002518:	f004 f8a6 	bl	8006668 <USB_ReadPMA>
 800251c:	e07c      	b.n	8002618 <PCD_EP_ISR_Handler+0x486>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 800251e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002520:	78db      	ldrb	r3, [r3, #3]
 8002522:	2b02      	cmp	r3, #2
 8002524:	d108      	bne.n	8002538 <PCD_EP_ISR_Handler+0x3a6>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8002526:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002528:	461a      	mov	r2, r3
 800252a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800252c:	6878      	ldr	r0, [r7, #4]
 800252e:	f000 f923 	bl	8002778 <HAL_PCD_EP_DB_Receive>
 8002532:	4603      	mov	r3, r0
 8002534:	86fb      	strh	r3, [r7, #54]	; 0x36
 8002536:	e06f      	b.n	8002618 <PCD_EP_ISR_Handler+0x486>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	461a      	mov	r2, r3
 800253e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002540:	781b      	ldrb	r3, [r3, #0]
 8002542:	009b      	lsls	r3, r3, #2
 8002544:	4413      	add	r3, r2
 8002546:	881b      	ldrh	r3, [r3, #0]
 8002548:	b29b      	uxth	r3, r3
 800254a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800254e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002552:	847b      	strh	r3, [r7, #34]	; 0x22
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	461a      	mov	r2, r3
 800255a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800255c:	781b      	ldrb	r3, [r3, #0]
 800255e:	009b      	lsls	r3, r3, #2
 8002560:	441a      	add	r2, r3
 8002562:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8002564:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002568:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800256c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002570:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002574:	b29b      	uxth	r3, r3
 8002576:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	461a      	mov	r2, r3
 800257e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002580:	781b      	ldrb	r3, [r3, #0]
 8002582:	009b      	lsls	r3, r3, #2
 8002584:	4413      	add	r3, r2
 8002586:	881b      	ldrh	r3, [r3, #0]
 8002588:	b29b      	uxth	r3, r3
 800258a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800258e:	2b00      	cmp	r3, #0
 8002590:	d021      	beq.n	80025d6 <PCD_EP_ISR_Handler+0x444>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800259a:	b29b      	uxth	r3, r3
 800259c:	461a      	mov	r2, r3
 800259e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025a0:	781b      	ldrb	r3, [r3, #0]
 80025a2:	00db      	lsls	r3, r3, #3
 80025a4:	4413      	add	r3, r2
 80025a6:	3302      	adds	r3, #2
 80025a8:	005b      	lsls	r3, r3, #1
 80025aa:	687a      	ldr	r2, [r7, #4]
 80025ac:	6812      	ldr	r2, [r2, #0]
 80025ae:	4413      	add	r3, r2
 80025b0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80025b4:	881b      	ldrh	r3, [r3, #0]
 80025b6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80025ba:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 80025bc:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d02a      	beq.n	8002618 <PCD_EP_ISR_Handler+0x486>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	6818      	ldr	r0, [r3, #0]
 80025c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025c8:	6959      	ldr	r1, [r3, #20]
 80025ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025cc:	891a      	ldrh	r2, [r3, #8]
 80025ce:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80025d0:	f004 f84a 	bl	8006668 <USB_ReadPMA>
 80025d4:	e020      	b.n	8002618 <PCD_EP_ISR_Handler+0x486>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80025de:	b29b      	uxth	r3, r3
 80025e0:	461a      	mov	r2, r3
 80025e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025e4:	781b      	ldrb	r3, [r3, #0]
 80025e6:	00db      	lsls	r3, r3, #3
 80025e8:	4413      	add	r3, r2
 80025ea:	3306      	adds	r3, #6
 80025ec:	005b      	lsls	r3, r3, #1
 80025ee:	687a      	ldr	r2, [r7, #4]
 80025f0:	6812      	ldr	r2, [r2, #0]
 80025f2:	4413      	add	r3, r2
 80025f4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80025f8:	881b      	ldrh	r3, [r3, #0]
 80025fa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80025fe:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8002600:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002602:	2b00      	cmp	r3, #0
 8002604:	d008      	beq.n	8002618 <PCD_EP_ISR_Handler+0x486>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	6818      	ldr	r0, [r3, #0]
 800260a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800260c:	6959      	ldr	r1, [r3, #20]
 800260e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002610:	895a      	ldrh	r2, [r3, #10]
 8002612:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002614:	f004 f828 	bl	8006668 <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8002618:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800261a:	69da      	ldr	r2, [r3, #28]
 800261c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800261e:	441a      	add	r2, r3
 8002620:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002622:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8002624:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002626:	695a      	ldr	r2, [r3, #20]
 8002628:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800262a:	441a      	add	r2, r3
 800262c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800262e:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8002630:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002632:	699b      	ldr	r3, [r3, #24]
 8002634:	2b00      	cmp	r3, #0
 8002636:	d004      	beq.n	8002642 <PCD_EP_ISR_Handler+0x4b0>
 8002638:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800263a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800263c:	691b      	ldr	r3, [r3, #16]
 800263e:	429a      	cmp	r2, r3
 8002640:	d206      	bcs.n	8002650 <PCD_EP_ISR_Handler+0x4be>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8002642:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002644:	781b      	ldrb	r3, [r3, #0]
 8002646:	4619      	mov	r1, r3
 8002648:	6878      	ldr	r0, [r7, #4]
 800264a:	f005 fe17 	bl	800827c <HAL_PCD_DataOutStageCallback>
 800264e:	e005      	b.n	800265c <PCD_EP_ISR_Handler+0x4ca>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002656:	4618      	mov	r0, r3
 8002658:	f002 fd73 	bl	8005142 <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 800265c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800265e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002662:	2b00      	cmp	r3, #0
 8002664:	d07a      	beq.n	800275c <PCD_EP_ISR_Handler+0x5ca>
      {
        ep = &hpcd->IN_ep[epindex];
 8002666:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800266a:	1c5a      	adds	r2, r3, #1
 800266c:	4613      	mov	r3, r2
 800266e:	009b      	lsls	r3, r3, #2
 8002670:	4413      	add	r3, r2
 8002672:	00db      	lsls	r3, r3, #3
 8002674:	687a      	ldr	r2, [r7, #4]
 8002676:	4413      	add	r3, r2
 8002678:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	461a      	mov	r2, r3
 8002680:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002684:	009b      	lsls	r3, r3, #2
 8002686:	4413      	add	r3, r2
 8002688:	881b      	ldrh	r3, [r3, #0]
 800268a:	b29b      	uxth	r3, r3
 800268c:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8002690:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002694:	843b      	strh	r3, [r7, #32]
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	461a      	mov	r2, r3
 800269c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80026a0:	009b      	lsls	r3, r3, #2
 80026a2:	441a      	add	r2, r3
 80026a4:	8c3b      	ldrh	r3, [r7, #32]
 80026a6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80026aa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80026ae:	b29b      	uxth	r3, r3
 80026b0:	8013      	strh	r3, [r2, #0]

        /* Manage all non bulk transaction or Bulk Single Buffer Transaction */
        if ((ep->type != EP_TYPE_BULK) ||
 80026b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026b4:	78db      	ldrb	r3, [r3, #3]
 80026b6:	2b02      	cmp	r3, #2
 80026b8:	d108      	bne.n	80026cc <PCD_EP_ISR_Handler+0x53a>
            ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 80026ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026bc:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type != EP_TYPE_BULK) ||
 80026be:	2b02      	cmp	r3, #2
 80026c0:	d146      	bne.n	8002750 <PCD_EP_ISR_Handler+0x5be>
            ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 80026c2:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80026c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d141      	bne.n	8002750 <PCD_EP_ISR_Handler+0x5be>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80026d4:	b29b      	uxth	r3, r3
 80026d6:	461a      	mov	r2, r3
 80026d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026da:	781b      	ldrb	r3, [r3, #0]
 80026dc:	00db      	lsls	r3, r3, #3
 80026de:	4413      	add	r3, r2
 80026e0:	3302      	adds	r3, #2
 80026e2:	005b      	lsls	r3, r3, #1
 80026e4:	687a      	ldr	r2, [r7, #4]
 80026e6:	6812      	ldr	r2, [r2, #0]
 80026e8:	4413      	add	r3, r2
 80026ea:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80026ee:	881b      	ldrh	r3, [r3, #0]
 80026f0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80026f4:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 80026f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026f8:	699a      	ldr	r2, [r3, #24]
 80026fa:	8bfb      	ldrh	r3, [r7, #30]
 80026fc:	429a      	cmp	r2, r3
 80026fe:	d906      	bls.n	800270e <PCD_EP_ISR_Handler+0x57c>
          {
            ep->xfer_len -= TxByteNbre;
 8002700:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002702:	699a      	ldr	r2, [r3, #24]
 8002704:	8bfb      	ldrh	r3, [r7, #30]
 8002706:	1ad2      	subs	r2, r2, r3
 8002708:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800270a:	619a      	str	r2, [r3, #24]
 800270c:	e002      	b.n	8002714 <PCD_EP_ISR_Handler+0x582>
          }
          else
          {
            ep->xfer_len = 0U;
 800270e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002710:	2200      	movs	r2, #0
 8002712:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 8002714:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002716:	699b      	ldr	r3, [r3, #24]
 8002718:	2b00      	cmp	r3, #0
 800271a:	d106      	bne.n	800272a <PCD_EP_ISR_Handler+0x598>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800271c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800271e:	781b      	ldrb	r3, [r3, #0]
 8002720:	4619      	mov	r1, r3
 8002722:	6878      	ldr	r0, [r7, #4]
 8002724:	f005 fdc5 	bl	80082b2 <HAL_PCD_DataInStageCallback>
 8002728:	e018      	b.n	800275c <PCD_EP_ISR_Handler+0x5ca>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 800272a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800272c:	695a      	ldr	r2, [r3, #20]
 800272e:	8bfb      	ldrh	r3, [r7, #30]
 8002730:	441a      	add	r2, r3
 8002732:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002734:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 8002736:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002738:	69da      	ldr	r2, [r3, #28]
 800273a:	8bfb      	ldrh	r3, [r7, #30]
 800273c:	441a      	add	r2, r3
 800273e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002740:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002748:	4618      	mov	r0, r3
 800274a:	f002 fcfa 	bl	8005142 <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 800274e:	e005      	b.n	800275c <PCD_EP_ISR_Handler+0x5ca>
          }
        }
        /* bulk in double buffer enable in case of transferLen> Ep_Mps */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8002750:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002752:	461a      	mov	r2, r3
 8002754:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002756:	6878      	ldr	r0, [r7, #4]
 8002758:	f000 f91b 	bl	8002992 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002764:	b29b      	uxth	r3, r3
 8002766:	b21b      	sxth	r3, r3
 8002768:	2b00      	cmp	r3, #0
 800276a:	f6ff ad17 	blt.w	800219c <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 800276e:	2300      	movs	r3, #0
}
 8002770:	4618      	mov	r0, r3
 8002772:	3738      	adds	r7, #56	; 0x38
 8002774:	46bd      	mov	sp, r7
 8002776:	bd80      	pop	{r7, pc}

08002778 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002778:	b580      	push	{r7, lr}
 800277a:	b088      	sub	sp, #32
 800277c:	af00      	add	r7, sp, #0
 800277e:	60f8      	str	r0, [r7, #12]
 8002780:	60b9      	str	r1, [r7, #8]
 8002782:	4613      	mov	r3, r2
 8002784:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002786:	88fb      	ldrh	r3, [r7, #6]
 8002788:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800278c:	2b00      	cmp	r3, #0
 800278e:	d07e      	beq.n	800288e <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002798:	b29b      	uxth	r3, r3
 800279a:	461a      	mov	r2, r3
 800279c:	68bb      	ldr	r3, [r7, #8]
 800279e:	781b      	ldrb	r3, [r3, #0]
 80027a0:	00db      	lsls	r3, r3, #3
 80027a2:	4413      	add	r3, r2
 80027a4:	3302      	adds	r3, #2
 80027a6:	005b      	lsls	r3, r3, #1
 80027a8:	68fa      	ldr	r2, [r7, #12]
 80027aa:	6812      	ldr	r2, [r2, #0]
 80027ac:	4413      	add	r3, r2
 80027ae:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80027b2:	881b      	ldrh	r3, [r3, #0]
 80027b4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80027b8:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80027ba:	68bb      	ldr	r3, [r7, #8]
 80027bc:	699a      	ldr	r2, [r3, #24]
 80027be:	8b7b      	ldrh	r3, [r7, #26]
 80027c0:	429a      	cmp	r2, r3
 80027c2:	d306      	bcc.n	80027d2 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 80027c4:	68bb      	ldr	r3, [r7, #8]
 80027c6:	699a      	ldr	r2, [r3, #24]
 80027c8:	8b7b      	ldrh	r3, [r7, #26]
 80027ca:	1ad2      	subs	r2, r2, r3
 80027cc:	68bb      	ldr	r3, [r7, #8]
 80027ce:	619a      	str	r2, [r3, #24]
 80027d0:	e002      	b.n	80027d8 <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 80027d2:	68bb      	ldr	r3, [r7, #8]
 80027d4:	2200      	movs	r2, #0
 80027d6:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80027d8:	68bb      	ldr	r3, [r7, #8]
 80027da:	699b      	ldr	r3, [r3, #24]
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d123      	bne.n	8002828 <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	461a      	mov	r2, r3
 80027e6:	68bb      	ldr	r3, [r7, #8]
 80027e8:	781b      	ldrb	r3, [r3, #0]
 80027ea:	009b      	lsls	r3, r3, #2
 80027ec:	4413      	add	r3, r2
 80027ee:	881b      	ldrh	r3, [r3, #0]
 80027f0:	b29b      	uxth	r3, r3
 80027f2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80027f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80027fa:	833b      	strh	r3, [r7, #24]
 80027fc:	8b3b      	ldrh	r3, [r7, #24]
 80027fe:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002802:	833b      	strh	r3, [r7, #24]
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	461a      	mov	r2, r3
 800280a:	68bb      	ldr	r3, [r7, #8]
 800280c:	781b      	ldrb	r3, [r3, #0]
 800280e:	009b      	lsls	r3, r3, #2
 8002810:	441a      	add	r2, r3
 8002812:	8b3b      	ldrh	r3, [r7, #24]
 8002814:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002818:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800281c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002820:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002824:	b29b      	uxth	r3, r3
 8002826:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002828:	88fb      	ldrh	r3, [r7, #6]
 800282a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800282e:	2b00      	cmp	r3, #0
 8002830:	d01f      	beq.n	8002872 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	461a      	mov	r2, r3
 8002838:	68bb      	ldr	r3, [r7, #8]
 800283a:	781b      	ldrb	r3, [r3, #0]
 800283c:	009b      	lsls	r3, r3, #2
 800283e:	4413      	add	r3, r2
 8002840:	881b      	ldrh	r3, [r3, #0]
 8002842:	b29b      	uxth	r3, r3
 8002844:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002848:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800284c:	82fb      	strh	r3, [r7, #22]
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	461a      	mov	r2, r3
 8002854:	68bb      	ldr	r3, [r7, #8]
 8002856:	781b      	ldrb	r3, [r3, #0]
 8002858:	009b      	lsls	r3, r3, #2
 800285a:	441a      	add	r2, r3
 800285c:	8afb      	ldrh	r3, [r7, #22]
 800285e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002862:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002866:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800286a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800286e:	b29b      	uxth	r3, r3
 8002870:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002872:	8b7b      	ldrh	r3, [r7, #26]
 8002874:	2b00      	cmp	r3, #0
 8002876:	f000 8087 	beq.w	8002988 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	6818      	ldr	r0, [r3, #0]
 800287e:	68bb      	ldr	r3, [r7, #8]
 8002880:	6959      	ldr	r1, [r3, #20]
 8002882:	68bb      	ldr	r3, [r7, #8]
 8002884:	891a      	ldrh	r2, [r3, #8]
 8002886:	8b7b      	ldrh	r3, [r7, #26]
 8002888:	f003 feee 	bl	8006668 <USB_ReadPMA>
 800288c:	e07c      	b.n	8002988 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002896:	b29b      	uxth	r3, r3
 8002898:	461a      	mov	r2, r3
 800289a:	68bb      	ldr	r3, [r7, #8]
 800289c:	781b      	ldrb	r3, [r3, #0]
 800289e:	00db      	lsls	r3, r3, #3
 80028a0:	4413      	add	r3, r2
 80028a2:	3306      	adds	r3, #6
 80028a4:	005b      	lsls	r3, r3, #1
 80028a6:	68fa      	ldr	r2, [r7, #12]
 80028a8:	6812      	ldr	r2, [r2, #0]
 80028aa:	4413      	add	r3, r2
 80028ac:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80028b0:	881b      	ldrh	r3, [r3, #0]
 80028b2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80028b6:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80028b8:	68bb      	ldr	r3, [r7, #8]
 80028ba:	699a      	ldr	r2, [r3, #24]
 80028bc:	8b7b      	ldrh	r3, [r7, #26]
 80028be:	429a      	cmp	r2, r3
 80028c0:	d306      	bcc.n	80028d0 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 80028c2:	68bb      	ldr	r3, [r7, #8]
 80028c4:	699a      	ldr	r2, [r3, #24]
 80028c6:	8b7b      	ldrh	r3, [r7, #26]
 80028c8:	1ad2      	subs	r2, r2, r3
 80028ca:	68bb      	ldr	r3, [r7, #8]
 80028cc:	619a      	str	r2, [r3, #24]
 80028ce:	e002      	b.n	80028d6 <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 80028d0:	68bb      	ldr	r3, [r7, #8]
 80028d2:	2200      	movs	r2, #0
 80028d4:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80028d6:	68bb      	ldr	r3, [r7, #8]
 80028d8:	699b      	ldr	r3, [r3, #24]
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d123      	bne.n	8002926 <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	461a      	mov	r2, r3
 80028e4:	68bb      	ldr	r3, [r7, #8]
 80028e6:	781b      	ldrb	r3, [r3, #0]
 80028e8:	009b      	lsls	r3, r3, #2
 80028ea:	4413      	add	r3, r2
 80028ec:	881b      	ldrh	r3, [r3, #0]
 80028ee:	b29b      	uxth	r3, r3
 80028f0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80028f4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80028f8:	83fb      	strh	r3, [r7, #30]
 80028fa:	8bfb      	ldrh	r3, [r7, #30]
 80028fc:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002900:	83fb      	strh	r3, [r7, #30]
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	461a      	mov	r2, r3
 8002908:	68bb      	ldr	r3, [r7, #8]
 800290a:	781b      	ldrb	r3, [r3, #0]
 800290c:	009b      	lsls	r3, r3, #2
 800290e:	441a      	add	r2, r3
 8002910:	8bfb      	ldrh	r3, [r7, #30]
 8002912:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002916:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800291a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800291e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002922:	b29b      	uxth	r3, r3
 8002924:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8002926:	88fb      	ldrh	r3, [r7, #6]
 8002928:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800292c:	2b00      	cmp	r3, #0
 800292e:	d11f      	bne.n	8002970 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	461a      	mov	r2, r3
 8002936:	68bb      	ldr	r3, [r7, #8]
 8002938:	781b      	ldrb	r3, [r3, #0]
 800293a:	009b      	lsls	r3, r3, #2
 800293c:	4413      	add	r3, r2
 800293e:	881b      	ldrh	r3, [r3, #0]
 8002940:	b29b      	uxth	r3, r3
 8002942:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002946:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800294a:	83bb      	strh	r3, [r7, #28]
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	461a      	mov	r2, r3
 8002952:	68bb      	ldr	r3, [r7, #8]
 8002954:	781b      	ldrb	r3, [r3, #0]
 8002956:	009b      	lsls	r3, r3, #2
 8002958:	441a      	add	r2, r3
 800295a:	8bbb      	ldrh	r3, [r7, #28]
 800295c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002960:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002964:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002968:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800296c:	b29b      	uxth	r3, r3
 800296e:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002970:	8b7b      	ldrh	r3, [r7, #26]
 8002972:	2b00      	cmp	r3, #0
 8002974:	d008      	beq.n	8002988 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	6818      	ldr	r0, [r3, #0]
 800297a:	68bb      	ldr	r3, [r7, #8]
 800297c:	6959      	ldr	r1, [r3, #20]
 800297e:	68bb      	ldr	r3, [r7, #8]
 8002980:	895a      	ldrh	r2, [r3, #10]
 8002982:	8b7b      	ldrh	r3, [r7, #26]
 8002984:	f003 fe70 	bl	8006668 <USB_ReadPMA>
    }
  }

  return count;
 8002988:	8b7b      	ldrh	r3, [r7, #26]
}
 800298a:	4618      	mov	r0, r3
 800298c:	3720      	adds	r7, #32
 800298e:	46bd      	mov	sp, r7
 8002990:	bd80      	pop	{r7, pc}

08002992 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002992:	b580      	push	{r7, lr}
 8002994:	b092      	sub	sp, #72	; 0x48
 8002996:	af00      	add	r7, sp, #0
 8002998:	60f8      	str	r0, [r7, #12]
 800299a:	60b9      	str	r1, [r7, #8]
 800299c:	4613      	mov	r3, r2
 800299e:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80029a0:	88fb      	ldrh	r3, [r7, #6]
 80029a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	f000 8132 	beq.w	8002c10 <HAL_PCD_EP_DB_Transmit+0x27e>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80029b4:	b29b      	uxth	r3, r3
 80029b6:	461a      	mov	r2, r3
 80029b8:	68bb      	ldr	r3, [r7, #8]
 80029ba:	781b      	ldrb	r3, [r3, #0]
 80029bc:	00db      	lsls	r3, r3, #3
 80029be:	4413      	add	r3, r2
 80029c0:	3302      	adds	r3, #2
 80029c2:	005b      	lsls	r3, r3, #1
 80029c4:	68fa      	ldr	r2, [r7, #12]
 80029c6:	6812      	ldr	r2, [r2, #0]
 80029c8:	4413      	add	r3, r2
 80029ca:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80029ce:	881b      	ldrh	r3, [r3, #0]
 80029d0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80029d4:	85fb      	strh	r3, [r7, #46]	; 0x2e

    if (ep->xfer_len > TxByteNbre)
 80029d6:	68bb      	ldr	r3, [r7, #8]
 80029d8:	699a      	ldr	r2, [r3, #24]
 80029da:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80029dc:	429a      	cmp	r2, r3
 80029de:	d906      	bls.n	80029ee <HAL_PCD_EP_DB_Transmit+0x5c>
    {
      ep->xfer_len -= TxByteNbre;
 80029e0:	68bb      	ldr	r3, [r7, #8]
 80029e2:	699a      	ldr	r2, [r3, #24]
 80029e4:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80029e6:	1ad2      	subs	r2, r2, r3
 80029e8:	68bb      	ldr	r3, [r7, #8]
 80029ea:	619a      	str	r2, [r3, #24]
 80029ec:	e002      	b.n	80029f4 <HAL_PCD_EP_DB_Transmit+0x62>
    }
    else
    {
      ep->xfer_len = 0U;
 80029ee:	68bb      	ldr	r3, [r7, #8]
 80029f0:	2200      	movs	r2, #0
 80029f2:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80029f4:	68bb      	ldr	r3, [r7, #8]
 80029f6:	699b      	ldr	r3, [r3, #24]
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d12c      	bne.n	8002a56 <HAL_PCD_EP_DB_Transmit+0xc4>
    {
      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80029fc:	68bb      	ldr	r3, [r7, #8]
 80029fe:	781b      	ldrb	r3, [r3, #0]
 8002a00:	4619      	mov	r1, r3
 8002a02:	68f8      	ldr	r0, [r7, #12]
 8002a04:	f005 fc55 	bl	80082b2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002a08:	88fb      	ldrh	r3, [r7, #6]
 8002a0a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	f000 822f 	beq.w	8002e72 <HAL_PCD_EP_DB_Transmit+0x4e0>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	461a      	mov	r2, r3
 8002a1a:	68bb      	ldr	r3, [r7, #8]
 8002a1c:	781b      	ldrb	r3, [r3, #0]
 8002a1e:	009b      	lsls	r3, r3, #2
 8002a20:	4413      	add	r3, r2
 8002a22:	881b      	ldrh	r3, [r3, #0]
 8002a24:	b29b      	uxth	r3, r3
 8002a26:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002a2a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a2e:	827b      	strh	r3, [r7, #18]
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	461a      	mov	r2, r3
 8002a36:	68bb      	ldr	r3, [r7, #8]
 8002a38:	781b      	ldrb	r3, [r3, #0]
 8002a3a:	009b      	lsls	r3, r3, #2
 8002a3c:	441a      	add	r2, r3
 8002a3e:	8a7b      	ldrh	r3, [r7, #18]
 8002a40:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002a44:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002a48:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002a4c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002a50:	b29b      	uxth	r3, r3
 8002a52:	8013      	strh	r3, [r2, #0]
 8002a54:	e20d      	b.n	8002e72 <HAL_PCD_EP_DB_Transmit+0x4e0>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002a56:	88fb      	ldrh	r3, [r7, #6]
 8002a58:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d01f      	beq.n	8002aa0 <HAL_PCD_EP_DB_Transmit+0x10e>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	461a      	mov	r2, r3
 8002a66:	68bb      	ldr	r3, [r7, #8]
 8002a68:	781b      	ldrb	r3, [r3, #0]
 8002a6a:	009b      	lsls	r3, r3, #2
 8002a6c:	4413      	add	r3, r2
 8002a6e:	881b      	ldrh	r3, [r3, #0]
 8002a70:	b29b      	uxth	r3, r3
 8002a72:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002a76:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a7a:	84bb      	strh	r3, [r7, #36]	; 0x24
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	461a      	mov	r2, r3
 8002a82:	68bb      	ldr	r3, [r7, #8]
 8002a84:	781b      	ldrb	r3, [r3, #0]
 8002a86:	009b      	lsls	r3, r3, #2
 8002a88:	441a      	add	r2, r3
 8002a8a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002a8c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002a90:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002a94:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002a98:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002a9c:	b29b      	uxth	r3, r3
 8002a9e:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002aa0:	68bb      	ldr	r3, [r7, #8]
 8002aa2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002aa6:	2b01      	cmp	r3, #1
 8002aa8:	f040 81e3 	bne.w	8002e72 <HAL_PCD_EP_DB_Transmit+0x4e0>
      {
        ep->xfer_buff += TxByteNbre;
 8002aac:	68bb      	ldr	r3, [r7, #8]
 8002aae:	695a      	ldr	r2, [r3, #20]
 8002ab0:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002ab2:	441a      	add	r2, r3
 8002ab4:	68bb      	ldr	r3, [r7, #8]
 8002ab6:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8002ab8:	68bb      	ldr	r3, [r7, #8]
 8002aba:	69da      	ldr	r2, [r3, #28]
 8002abc:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002abe:	441a      	add	r2, r3
 8002ac0:	68bb      	ldr	r3, [r7, #8]
 8002ac2:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002ac4:	68bb      	ldr	r3, [r7, #8]
 8002ac6:	6a1a      	ldr	r2, [r3, #32]
 8002ac8:	68bb      	ldr	r3, [r7, #8]
 8002aca:	691b      	ldr	r3, [r3, #16]
 8002acc:	429a      	cmp	r2, r3
 8002ace:	d309      	bcc.n	8002ae4 <HAL_PCD_EP_DB_Transmit+0x152>
        {
          len = ep->maxpacket;
 8002ad0:	68bb      	ldr	r3, [r7, #8]
 8002ad2:	691b      	ldr	r3, [r3, #16]
 8002ad4:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db -= len;
 8002ad6:	68bb      	ldr	r3, [r7, #8]
 8002ad8:	6a1a      	ldr	r2, [r3, #32]
 8002ada:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002adc:	1ad2      	subs	r2, r2, r3
 8002ade:	68bb      	ldr	r3, [r7, #8]
 8002ae0:	621a      	str	r2, [r3, #32]
 8002ae2:	e014      	b.n	8002b0e <HAL_PCD_EP_DB_Transmit+0x17c>
        }
        else if (ep->xfer_len_db == 0U)
 8002ae4:	68bb      	ldr	r3, [r7, #8]
 8002ae6:	6a1b      	ldr	r3, [r3, #32]
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d106      	bne.n	8002afa <HAL_PCD_EP_DB_Transmit+0x168>
        {
          len = TxByteNbre;
 8002aec:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002aee:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_fill_db = 0U;
 8002af0:	68bb      	ldr	r3, [r7, #8]
 8002af2:	2200      	movs	r2, #0
 8002af4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002af8:	e009      	b.n	8002b0e <HAL_PCD_EP_DB_Transmit+0x17c>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8002afa:	68bb      	ldr	r3, [r7, #8]
 8002afc:	2200      	movs	r2, #0
 8002afe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8002b02:	68bb      	ldr	r3, [r7, #8]
 8002b04:	6a1b      	ldr	r3, [r3, #32]
 8002b06:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db = 0U;
 8002b08:	68bb      	ldr	r3, [r7, #8]
 8002b0a:	2200      	movs	r2, #0
 8002b0c:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002b0e:	68bb      	ldr	r3, [r7, #8]
 8002b10:	785b      	ldrb	r3, [r3, #1]
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d155      	bne.n	8002bc2 <HAL_PCD_EP_DB_Transmit+0x230>
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	61bb      	str	r3, [r7, #24]
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002b24:	b29b      	uxth	r3, r3
 8002b26:	461a      	mov	r2, r3
 8002b28:	69bb      	ldr	r3, [r7, #24]
 8002b2a:	4413      	add	r3, r2
 8002b2c:	61bb      	str	r3, [r7, #24]
 8002b2e:	68bb      	ldr	r3, [r7, #8]
 8002b30:	781b      	ldrb	r3, [r3, #0]
 8002b32:	011a      	lsls	r2, r3, #4
 8002b34:	69bb      	ldr	r3, [r7, #24]
 8002b36:	4413      	add	r3, r2
 8002b38:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002b3c:	617b      	str	r3, [r7, #20]
 8002b3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d112      	bne.n	8002b6a <HAL_PCD_EP_DB_Transmit+0x1d8>
 8002b44:	697b      	ldr	r3, [r7, #20]
 8002b46:	881b      	ldrh	r3, [r3, #0]
 8002b48:	b29b      	uxth	r3, r3
 8002b4a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002b4e:	b29a      	uxth	r2, r3
 8002b50:	697b      	ldr	r3, [r7, #20]
 8002b52:	801a      	strh	r2, [r3, #0]
 8002b54:	697b      	ldr	r3, [r7, #20]
 8002b56:	881b      	ldrh	r3, [r3, #0]
 8002b58:	b29b      	uxth	r3, r3
 8002b5a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002b5e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002b62:	b29a      	uxth	r2, r3
 8002b64:	697b      	ldr	r3, [r7, #20]
 8002b66:	801a      	strh	r2, [r3, #0]
 8002b68:	e047      	b.n	8002bfa <HAL_PCD_EP_DB_Transmit+0x268>
 8002b6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b6c:	2b3e      	cmp	r3, #62	; 0x3e
 8002b6e:	d811      	bhi.n	8002b94 <HAL_PCD_EP_DB_Transmit+0x202>
 8002b70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b72:	085b      	lsrs	r3, r3, #1
 8002b74:	62bb      	str	r3, [r7, #40]	; 0x28
 8002b76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b78:	f003 0301 	and.w	r3, r3, #1
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d002      	beq.n	8002b86 <HAL_PCD_EP_DB_Transmit+0x1f4>
 8002b80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b82:	3301      	adds	r3, #1
 8002b84:	62bb      	str	r3, [r7, #40]	; 0x28
 8002b86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b88:	b29b      	uxth	r3, r3
 8002b8a:	029b      	lsls	r3, r3, #10
 8002b8c:	b29a      	uxth	r2, r3
 8002b8e:	697b      	ldr	r3, [r7, #20]
 8002b90:	801a      	strh	r2, [r3, #0]
 8002b92:	e032      	b.n	8002bfa <HAL_PCD_EP_DB_Transmit+0x268>
 8002b94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b96:	095b      	lsrs	r3, r3, #5
 8002b98:	62bb      	str	r3, [r7, #40]	; 0x28
 8002b9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b9c:	f003 031f 	and.w	r3, r3, #31
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d102      	bne.n	8002baa <HAL_PCD_EP_DB_Transmit+0x218>
 8002ba4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ba6:	3b01      	subs	r3, #1
 8002ba8:	62bb      	str	r3, [r7, #40]	; 0x28
 8002baa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bac:	b29b      	uxth	r3, r3
 8002bae:	029b      	lsls	r3, r3, #10
 8002bb0:	b29b      	uxth	r3, r3
 8002bb2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002bb6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002bba:	b29a      	uxth	r2, r3
 8002bbc:	697b      	ldr	r3, [r7, #20]
 8002bbe:	801a      	strh	r2, [r3, #0]
 8002bc0:	e01b      	b.n	8002bfa <HAL_PCD_EP_DB_Transmit+0x268>
 8002bc2:	68bb      	ldr	r3, [r7, #8]
 8002bc4:	785b      	ldrb	r3, [r3, #1]
 8002bc6:	2b01      	cmp	r3, #1
 8002bc8:	d117      	bne.n	8002bfa <HAL_PCD_EP_DB_Transmit+0x268>
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	623b      	str	r3, [r7, #32]
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002bd8:	b29b      	uxth	r3, r3
 8002bda:	461a      	mov	r2, r3
 8002bdc:	6a3b      	ldr	r3, [r7, #32]
 8002bde:	4413      	add	r3, r2
 8002be0:	623b      	str	r3, [r7, #32]
 8002be2:	68bb      	ldr	r3, [r7, #8]
 8002be4:	781b      	ldrb	r3, [r3, #0]
 8002be6:	011a      	lsls	r2, r3, #4
 8002be8:	6a3b      	ldr	r3, [r7, #32]
 8002bea:	4413      	add	r3, r2
 8002bec:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002bf0:	61fb      	str	r3, [r7, #28]
 8002bf2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002bf4:	b29a      	uxth	r2, r3
 8002bf6:	69fb      	ldr	r3, [r7, #28]
 8002bf8:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	6818      	ldr	r0, [r3, #0]
 8002bfe:	68bb      	ldr	r3, [r7, #8]
 8002c00:	6959      	ldr	r1, [r3, #20]
 8002c02:	68bb      	ldr	r3, [r7, #8]
 8002c04:	891a      	ldrh	r2, [r3, #8]
 8002c06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c08:	b29b      	uxth	r3, r3
 8002c0a:	f003 fce8 	bl	80065de <USB_WritePMA>
 8002c0e:	e130      	b.n	8002e72 <HAL_PCD_EP_DB_Transmit+0x4e0>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002c18:	b29b      	uxth	r3, r3
 8002c1a:	461a      	mov	r2, r3
 8002c1c:	68bb      	ldr	r3, [r7, #8]
 8002c1e:	781b      	ldrb	r3, [r3, #0]
 8002c20:	00db      	lsls	r3, r3, #3
 8002c22:	4413      	add	r3, r2
 8002c24:	3306      	adds	r3, #6
 8002c26:	005b      	lsls	r3, r3, #1
 8002c28:	68fa      	ldr	r2, [r7, #12]
 8002c2a:	6812      	ldr	r2, [r2, #0]
 8002c2c:	4413      	add	r3, r2
 8002c2e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002c32:	881b      	ldrh	r3, [r3, #0]
 8002c34:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002c38:	85fb      	strh	r3, [r7, #46]	; 0x2e

    if (ep->xfer_len >= TxByteNbre)
 8002c3a:	68bb      	ldr	r3, [r7, #8]
 8002c3c:	699a      	ldr	r2, [r3, #24]
 8002c3e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002c40:	429a      	cmp	r2, r3
 8002c42:	d306      	bcc.n	8002c52 <HAL_PCD_EP_DB_Transmit+0x2c0>
    {
      ep->xfer_len -= TxByteNbre;
 8002c44:	68bb      	ldr	r3, [r7, #8]
 8002c46:	699a      	ldr	r2, [r3, #24]
 8002c48:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002c4a:	1ad2      	subs	r2, r2, r3
 8002c4c:	68bb      	ldr	r3, [r7, #8]
 8002c4e:	619a      	str	r2, [r3, #24]
 8002c50:	e002      	b.n	8002c58 <HAL_PCD_EP_DB_Transmit+0x2c6>
    }
    else
    {
      ep->xfer_len = 0U;
 8002c52:	68bb      	ldr	r3, [r7, #8]
 8002c54:	2200      	movs	r2, #0
 8002c56:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002c58:	68bb      	ldr	r3, [r7, #8]
 8002c5a:	699b      	ldr	r3, [r3, #24]
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d12c      	bne.n	8002cba <HAL_PCD_EP_DB_Transmit+0x328>
    {
      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002c60:	68bb      	ldr	r3, [r7, #8]
 8002c62:	781b      	ldrb	r3, [r3, #0]
 8002c64:	4619      	mov	r1, r3
 8002c66:	68f8      	ldr	r0, [r7, #12]
 8002c68:	f005 fb23 	bl	80082b2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /*need to Free USB Buff*/
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002c6c:	88fb      	ldrh	r3, [r7, #6]
 8002c6e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	f040 80fd 	bne.w	8002e72 <HAL_PCD_EP_DB_Transmit+0x4e0>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	461a      	mov	r2, r3
 8002c7e:	68bb      	ldr	r3, [r7, #8]
 8002c80:	781b      	ldrb	r3, [r3, #0]
 8002c82:	009b      	lsls	r3, r3, #2
 8002c84:	4413      	add	r3, r2
 8002c86:	881b      	ldrh	r3, [r3, #0]
 8002c88:	b29b      	uxth	r3, r3
 8002c8a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002c8e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c92:	84fb      	strh	r3, [r7, #38]	; 0x26
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	461a      	mov	r2, r3
 8002c9a:	68bb      	ldr	r3, [r7, #8]
 8002c9c:	781b      	ldrb	r3, [r3, #0]
 8002c9e:	009b      	lsls	r3, r3, #2
 8002ca0:	441a      	add	r2, r3
 8002ca2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8002ca4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002ca8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002cac:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002cb0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002cb4:	b29b      	uxth	r3, r3
 8002cb6:	8013      	strh	r3, [r2, #0]
 8002cb8:	e0db      	b.n	8002e72 <HAL_PCD_EP_DB_Transmit+0x4e0>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002cba:	88fb      	ldrh	r3, [r7, #6]
 8002cbc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d11f      	bne.n	8002d04 <HAL_PCD_EP_DB_Transmit+0x372>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	461a      	mov	r2, r3
 8002cca:	68bb      	ldr	r3, [r7, #8]
 8002ccc:	781b      	ldrb	r3, [r3, #0]
 8002cce:	009b      	lsls	r3, r3, #2
 8002cd0:	4413      	add	r3, r2
 8002cd2:	881b      	ldrh	r3, [r3, #0]
 8002cd4:	b29b      	uxth	r3, r3
 8002cd6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002cda:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002cde:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	461a      	mov	r2, r3
 8002ce6:	68bb      	ldr	r3, [r7, #8]
 8002ce8:	781b      	ldrb	r3, [r3, #0]
 8002cea:	009b      	lsls	r3, r3, #2
 8002cec:	441a      	add	r2, r3
 8002cee:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8002cf0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002cf4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002cf8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002cfc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002d00:	b29b      	uxth	r3, r3
 8002d02:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002d04:	68bb      	ldr	r3, [r7, #8]
 8002d06:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002d0a:	2b01      	cmp	r3, #1
 8002d0c:	f040 80b1 	bne.w	8002e72 <HAL_PCD_EP_DB_Transmit+0x4e0>
      {
        ep->xfer_buff += TxByteNbre;
 8002d10:	68bb      	ldr	r3, [r7, #8]
 8002d12:	695a      	ldr	r2, [r3, #20]
 8002d14:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002d16:	441a      	add	r2, r3
 8002d18:	68bb      	ldr	r3, [r7, #8]
 8002d1a:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8002d1c:	68bb      	ldr	r3, [r7, #8]
 8002d1e:	69da      	ldr	r2, [r3, #28]
 8002d20:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002d22:	441a      	add	r2, r3
 8002d24:	68bb      	ldr	r3, [r7, #8]
 8002d26:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002d28:	68bb      	ldr	r3, [r7, #8]
 8002d2a:	6a1a      	ldr	r2, [r3, #32]
 8002d2c:	68bb      	ldr	r3, [r7, #8]
 8002d2e:	691b      	ldr	r3, [r3, #16]
 8002d30:	429a      	cmp	r2, r3
 8002d32:	d309      	bcc.n	8002d48 <HAL_PCD_EP_DB_Transmit+0x3b6>
        {
          len = ep->maxpacket;
 8002d34:	68bb      	ldr	r3, [r7, #8]
 8002d36:	691b      	ldr	r3, [r3, #16]
 8002d38:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db -= len;
 8002d3a:	68bb      	ldr	r3, [r7, #8]
 8002d3c:	6a1a      	ldr	r2, [r3, #32]
 8002d3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d40:	1ad2      	subs	r2, r2, r3
 8002d42:	68bb      	ldr	r3, [r7, #8]
 8002d44:	621a      	str	r2, [r3, #32]
 8002d46:	e014      	b.n	8002d72 <HAL_PCD_EP_DB_Transmit+0x3e0>
        }
        else if (ep->xfer_len_db == 0U)
 8002d48:	68bb      	ldr	r3, [r7, #8]
 8002d4a:	6a1b      	ldr	r3, [r3, #32]
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d106      	bne.n	8002d5e <HAL_PCD_EP_DB_Transmit+0x3cc>
        {
          len = TxByteNbre;
 8002d50:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002d52:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_fill_db = 0U;
 8002d54:	68bb      	ldr	r3, [r7, #8]
 8002d56:	2200      	movs	r2, #0
 8002d58:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002d5c:	e009      	b.n	8002d72 <HAL_PCD_EP_DB_Transmit+0x3e0>
        }
        else
        {
          len = ep->xfer_len_db;
 8002d5e:	68bb      	ldr	r3, [r7, #8]
 8002d60:	6a1b      	ldr	r3, [r3, #32]
 8002d62:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db = 0U;
 8002d64:	68bb      	ldr	r3, [r7, #8]
 8002d66:	2200      	movs	r2, #0
 8002d68:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8002d6a:	68bb      	ldr	r3, [r7, #8]
 8002d6c:	2200      	movs	r2, #0
 8002d6e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	637b      	str	r3, [r7, #52]	; 0x34
 8002d78:	68bb      	ldr	r3, [r7, #8]
 8002d7a:	785b      	ldrb	r3, [r3, #1]
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d155      	bne.n	8002e2c <HAL_PCD_EP_DB_Transmit+0x49a>
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	647b      	str	r3, [r7, #68]	; 0x44
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002d8e:	b29b      	uxth	r3, r3
 8002d90:	461a      	mov	r2, r3
 8002d92:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002d94:	4413      	add	r3, r2
 8002d96:	647b      	str	r3, [r7, #68]	; 0x44
 8002d98:	68bb      	ldr	r3, [r7, #8]
 8002d9a:	781b      	ldrb	r3, [r3, #0]
 8002d9c:	011a      	lsls	r2, r3, #4
 8002d9e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002da0:	4413      	add	r3, r2
 8002da2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002da6:	643b      	str	r3, [r7, #64]	; 0x40
 8002da8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d112      	bne.n	8002dd4 <HAL_PCD_EP_DB_Transmit+0x442>
 8002dae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002db0:	881b      	ldrh	r3, [r3, #0]
 8002db2:	b29b      	uxth	r3, r3
 8002db4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002db8:	b29a      	uxth	r2, r3
 8002dba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002dbc:	801a      	strh	r2, [r3, #0]
 8002dbe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002dc0:	881b      	ldrh	r3, [r3, #0]
 8002dc2:	b29b      	uxth	r3, r3
 8002dc4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002dc8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002dcc:	b29a      	uxth	r2, r3
 8002dce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002dd0:	801a      	strh	r2, [r3, #0]
 8002dd2:	e044      	b.n	8002e5e <HAL_PCD_EP_DB_Transmit+0x4cc>
 8002dd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002dd6:	2b3e      	cmp	r3, #62	; 0x3e
 8002dd8:	d811      	bhi.n	8002dfe <HAL_PCD_EP_DB_Transmit+0x46c>
 8002dda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ddc:	085b      	lsrs	r3, r3, #1
 8002dde:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002de0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002de2:	f003 0301 	and.w	r3, r3, #1
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d002      	beq.n	8002df0 <HAL_PCD_EP_DB_Transmit+0x45e>
 8002dea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002dec:	3301      	adds	r3, #1
 8002dee:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002df0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002df2:	b29b      	uxth	r3, r3
 8002df4:	029b      	lsls	r3, r3, #10
 8002df6:	b29a      	uxth	r2, r3
 8002df8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002dfa:	801a      	strh	r2, [r3, #0]
 8002dfc:	e02f      	b.n	8002e5e <HAL_PCD_EP_DB_Transmit+0x4cc>
 8002dfe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e00:	095b      	lsrs	r3, r3, #5
 8002e02:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002e04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e06:	f003 031f 	and.w	r3, r3, #31
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d102      	bne.n	8002e14 <HAL_PCD_EP_DB_Transmit+0x482>
 8002e0e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002e10:	3b01      	subs	r3, #1
 8002e12:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002e14:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002e16:	b29b      	uxth	r3, r3
 8002e18:	029b      	lsls	r3, r3, #10
 8002e1a:	b29b      	uxth	r3, r3
 8002e1c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002e20:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002e24:	b29a      	uxth	r2, r3
 8002e26:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002e28:	801a      	strh	r2, [r3, #0]
 8002e2a:	e018      	b.n	8002e5e <HAL_PCD_EP_DB_Transmit+0x4cc>
 8002e2c:	68bb      	ldr	r3, [r7, #8]
 8002e2e:	785b      	ldrb	r3, [r3, #1]
 8002e30:	2b01      	cmp	r3, #1
 8002e32:	d114      	bne.n	8002e5e <HAL_PCD_EP_DB_Transmit+0x4cc>
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002e3c:	b29b      	uxth	r3, r3
 8002e3e:	461a      	mov	r2, r3
 8002e40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e42:	4413      	add	r3, r2
 8002e44:	637b      	str	r3, [r7, #52]	; 0x34
 8002e46:	68bb      	ldr	r3, [r7, #8]
 8002e48:	781b      	ldrb	r3, [r3, #0]
 8002e4a:	011a      	lsls	r2, r3, #4
 8002e4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e4e:	4413      	add	r3, r2
 8002e50:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002e54:	633b      	str	r3, [r7, #48]	; 0x30
 8002e56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e58:	b29a      	uxth	r2, r3
 8002e5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e5c:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	6818      	ldr	r0, [r3, #0]
 8002e62:	68bb      	ldr	r3, [r7, #8]
 8002e64:	6959      	ldr	r1, [r3, #20]
 8002e66:	68bb      	ldr	r3, [r7, #8]
 8002e68:	895a      	ldrh	r2, [r3, #10]
 8002e6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e6c:	b29b      	uxth	r3, r3
 8002e6e:	f003 fbb6 	bl	80065de <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	461a      	mov	r2, r3
 8002e78:	68bb      	ldr	r3, [r7, #8]
 8002e7a:	781b      	ldrb	r3, [r3, #0]
 8002e7c:	009b      	lsls	r3, r3, #2
 8002e7e:	4413      	add	r3, r2
 8002e80:	881b      	ldrh	r3, [r3, #0]
 8002e82:	b29b      	uxth	r3, r3
 8002e84:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002e88:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002e8c:	823b      	strh	r3, [r7, #16]
 8002e8e:	8a3b      	ldrh	r3, [r7, #16]
 8002e90:	f083 0310 	eor.w	r3, r3, #16
 8002e94:	823b      	strh	r3, [r7, #16]
 8002e96:	8a3b      	ldrh	r3, [r7, #16]
 8002e98:	f083 0320 	eor.w	r3, r3, #32
 8002e9c:	823b      	strh	r3, [r7, #16]
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	461a      	mov	r2, r3
 8002ea4:	68bb      	ldr	r3, [r7, #8]
 8002ea6:	781b      	ldrb	r3, [r3, #0]
 8002ea8:	009b      	lsls	r3, r3, #2
 8002eaa:	441a      	add	r2, r3
 8002eac:	8a3b      	ldrh	r3, [r7, #16]
 8002eae:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002eb2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002eb6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002eba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002ebe:	b29b      	uxth	r3, r3
 8002ec0:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8002ec2:	2300      	movs	r3, #0
}
 8002ec4:	4618      	mov	r0, r3
 8002ec6:	3748      	adds	r7, #72	; 0x48
 8002ec8:	46bd      	mov	sp, r7
 8002eca:	bd80      	pop	{r7, pc}

08002ecc <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8002ecc:	b480      	push	{r7}
 8002ece:	b087      	sub	sp, #28
 8002ed0:	af00      	add	r7, sp, #0
 8002ed2:	60f8      	str	r0, [r7, #12]
 8002ed4:	607b      	str	r3, [r7, #4]
 8002ed6:	460b      	mov	r3, r1
 8002ed8:	817b      	strh	r3, [r7, #10]
 8002eda:	4613      	mov	r3, r2
 8002edc:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8002ede:	897b      	ldrh	r3, [r7, #10]
 8002ee0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ee4:	b29b      	uxth	r3, r3
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d00b      	beq.n	8002f02 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002eea:	897b      	ldrh	r3, [r7, #10]
 8002eec:	f003 0307 	and.w	r3, r3, #7
 8002ef0:	1c5a      	adds	r2, r3, #1
 8002ef2:	4613      	mov	r3, r2
 8002ef4:	009b      	lsls	r3, r3, #2
 8002ef6:	4413      	add	r3, r2
 8002ef8:	00db      	lsls	r3, r3, #3
 8002efa:	68fa      	ldr	r2, [r7, #12]
 8002efc:	4413      	add	r3, r2
 8002efe:	617b      	str	r3, [r7, #20]
 8002f00:	e009      	b.n	8002f16 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002f02:	897a      	ldrh	r2, [r7, #10]
 8002f04:	4613      	mov	r3, r2
 8002f06:	009b      	lsls	r3, r3, #2
 8002f08:	4413      	add	r3, r2
 8002f0a:	00db      	lsls	r3, r3, #3
 8002f0c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002f10:	68fa      	ldr	r2, [r7, #12]
 8002f12:	4413      	add	r3, r2
 8002f14:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8002f16:	893b      	ldrh	r3, [r7, #8]
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d107      	bne.n	8002f2c <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8002f1c:	697b      	ldr	r3, [r7, #20]
 8002f1e:	2200      	movs	r2, #0
 8002f20:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	b29a      	uxth	r2, r3
 8002f26:	697b      	ldr	r3, [r7, #20]
 8002f28:	80da      	strh	r2, [r3, #6]
 8002f2a:	e00b      	b.n	8002f44 <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8002f2c:	697b      	ldr	r3, [r7, #20]
 8002f2e:	2201      	movs	r2, #1
 8002f30:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	b29a      	uxth	r2, r3
 8002f36:	697b      	ldr	r3, [r7, #20]
 8002f38:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	0c1b      	lsrs	r3, r3, #16
 8002f3e:	b29a      	uxth	r2, r3
 8002f40:	697b      	ldr	r3, [r7, #20]
 8002f42:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 8002f44:	2300      	movs	r3, #0
}
 8002f46:	4618      	mov	r0, r3
 8002f48:	371c      	adds	r7, #28
 8002f4a:	46bd      	mov	sp, r7
 8002f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f50:	4770      	bx	lr
	...

08002f54 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002f54:	b580      	push	{r7, lr}
 8002f56:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8002f5a:	af00      	add	r7, sp, #0
 8002f5c:	1d3b      	adds	r3, r7, #4
 8002f5e:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002f60:	1d3b      	adds	r3, r7, #4
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d102      	bne.n	8002f6e <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8002f68:	2301      	movs	r3, #1
 8002f6a:	f000 bef4 	b.w	8003d56 <HAL_RCC_OscConfig+0xe02>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002f6e:	1d3b      	adds	r3, r7, #4
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	f003 0301 	and.w	r3, r3, #1
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	f000 816a 	beq.w	8003252 <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8002f7e:	4bb3      	ldr	r3, [pc, #716]	; (800324c <HAL_RCC_OscConfig+0x2f8>)
 8002f80:	685b      	ldr	r3, [r3, #4]
 8002f82:	f003 030c 	and.w	r3, r3, #12
 8002f86:	2b04      	cmp	r3, #4
 8002f88:	d00c      	beq.n	8002fa4 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002f8a:	4bb0      	ldr	r3, [pc, #704]	; (800324c <HAL_RCC_OscConfig+0x2f8>)
 8002f8c:	685b      	ldr	r3, [r3, #4]
 8002f8e:	f003 030c 	and.w	r3, r3, #12
 8002f92:	2b08      	cmp	r3, #8
 8002f94:	d159      	bne.n	800304a <HAL_RCC_OscConfig+0xf6>
 8002f96:	4bad      	ldr	r3, [pc, #692]	; (800324c <HAL_RCC_OscConfig+0x2f8>)
 8002f98:	685b      	ldr	r3, [r3, #4]
 8002f9a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f9e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002fa2:	d152      	bne.n	800304a <HAL_RCC_OscConfig+0xf6>
 8002fa4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002fa8:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fac:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8002fb0:	fa93 f3a3 	rbit	r3, r3
 8002fb4:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002fb8:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002fbc:	fab3 f383 	clz	r3, r3
 8002fc0:	b2db      	uxtb	r3, r3
 8002fc2:	095b      	lsrs	r3, r3, #5
 8002fc4:	b2db      	uxtb	r3, r3
 8002fc6:	f043 0301 	orr.w	r3, r3, #1
 8002fca:	b2db      	uxtb	r3, r3
 8002fcc:	2b01      	cmp	r3, #1
 8002fce:	d102      	bne.n	8002fd6 <HAL_RCC_OscConfig+0x82>
 8002fd0:	4b9e      	ldr	r3, [pc, #632]	; (800324c <HAL_RCC_OscConfig+0x2f8>)
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	e015      	b.n	8003002 <HAL_RCC_OscConfig+0xae>
 8002fd6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002fda:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fde:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8002fe2:	fa93 f3a3 	rbit	r3, r3
 8002fe6:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8002fea:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002fee:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8002ff2:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8002ff6:	fa93 f3a3 	rbit	r3, r3
 8002ffa:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8002ffe:	4b93      	ldr	r3, [pc, #588]	; (800324c <HAL_RCC_OscConfig+0x2f8>)
 8003000:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003002:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003006:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 800300a:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 800300e:	fa92 f2a2 	rbit	r2, r2
 8003012:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8003016:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 800301a:	fab2 f282 	clz	r2, r2
 800301e:	b2d2      	uxtb	r2, r2
 8003020:	f042 0220 	orr.w	r2, r2, #32
 8003024:	b2d2      	uxtb	r2, r2
 8003026:	f002 021f 	and.w	r2, r2, #31
 800302a:	2101      	movs	r1, #1
 800302c:	fa01 f202 	lsl.w	r2, r1, r2
 8003030:	4013      	ands	r3, r2
 8003032:	2b00      	cmp	r3, #0
 8003034:	f000 810c 	beq.w	8003250 <HAL_RCC_OscConfig+0x2fc>
 8003038:	1d3b      	adds	r3, r7, #4
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	685b      	ldr	r3, [r3, #4]
 800303e:	2b00      	cmp	r3, #0
 8003040:	f040 8106 	bne.w	8003250 <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 8003044:	2301      	movs	r3, #1
 8003046:	f000 be86 	b.w	8003d56 <HAL_RCC_OscConfig+0xe02>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800304a:	1d3b      	adds	r3, r7, #4
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	685b      	ldr	r3, [r3, #4]
 8003050:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003054:	d106      	bne.n	8003064 <HAL_RCC_OscConfig+0x110>
 8003056:	4b7d      	ldr	r3, [pc, #500]	; (800324c <HAL_RCC_OscConfig+0x2f8>)
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	4a7c      	ldr	r2, [pc, #496]	; (800324c <HAL_RCC_OscConfig+0x2f8>)
 800305c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003060:	6013      	str	r3, [r2, #0]
 8003062:	e030      	b.n	80030c6 <HAL_RCC_OscConfig+0x172>
 8003064:	1d3b      	adds	r3, r7, #4
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	685b      	ldr	r3, [r3, #4]
 800306a:	2b00      	cmp	r3, #0
 800306c:	d10c      	bne.n	8003088 <HAL_RCC_OscConfig+0x134>
 800306e:	4b77      	ldr	r3, [pc, #476]	; (800324c <HAL_RCC_OscConfig+0x2f8>)
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	4a76      	ldr	r2, [pc, #472]	; (800324c <HAL_RCC_OscConfig+0x2f8>)
 8003074:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003078:	6013      	str	r3, [r2, #0]
 800307a:	4b74      	ldr	r3, [pc, #464]	; (800324c <HAL_RCC_OscConfig+0x2f8>)
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	4a73      	ldr	r2, [pc, #460]	; (800324c <HAL_RCC_OscConfig+0x2f8>)
 8003080:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003084:	6013      	str	r3, [r2, #0]
 8003086:	e01e      	b.n	80030c6 <HAL_RCC_OscConfig+0x172>
 8003088:	1d3b      	adds	r3, r7, #4
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	685b      	ldr	r3, [r3, #4]
 800308e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003092:	d10c      	bne.n	80030ae <HAL_RCC_OscConfig+0x15a>
 8003094:	4b6d      	ldr	r3, [pc, #436]	; (800324c <HAL_RCC_OscConfig+0x2f8>)
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	4a6c      	ldr	r2, [pc, #432]	; (800324c <HAL_RCC_OscConfig+0x2f8>)
 800309a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800309e:	6013      	str	r3, [r2, #0]
 80030a0:	4b6a      	ldr	r3, [pc, #424]	; (800324c <HAL_RCC_OscConfig+0x2f8>)
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	4a69      	ldr	r2, [pc, #420]	; (800324c <HAL_RCC_OscConfig+0x2f8>)
 80030a6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80030aa:	6013      	str	r3, [r2, #0]
 80030ac:	e00b      	b.n	80030c6 <HAL_RCC_OscConfig+0x172>
 80030ae:	4b67      	ldr	r3, [pc, #412]	; (800324c <HAL_RCC_OscConfig+0x2f8>)
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	4a66      	ldr	r2, [pc, #408]	; (800324c <HAL_RCC_OscConfig+0x2f8>)
 80030b4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80030b8:	6013      	str	r3, [r2, #0]
 80030ba:	4b64      	ldr	r3, [pc, #400]	; (800324c <HAL_RCC_OscConfig+0x2f8>)
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	4a63      	ldr	r2, [pc, #396]	; (800324c <HAL_RCC_OscConfig+0x2f8>)
 80030c0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80030c4:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80030c6:	4b61      	ldr	r3, [pc, #388]	; (800324c <HAL_RCC_OscConfig+0x2f8>)
 80030c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030ca:	f023 020f 	bic.w	r2, r3, #15
 80030ce:	1d3b      	adds	r3, r7, #4
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	689b      	ldr	r3, [r3, #8]
 80030d4:	495d      	ldr	r1, [pc, #372]	; (800324c <HAL_RCC_OscConfig+0x2f8>)
 80030d6:	4313      	orrs	r3, r2
 80030d8:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80030da:	1d3b      	adds	r3, r7, #4
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	685b      	ldr	r3, [r3, #4]
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d059      	beq.n	8003198 <HAL_RCC_OscConfig+0x244>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030e4:	f7fd fbec 	bl	80008c0 <HAL_GetTick>
 80030e8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80030ec:	e00a      	b.n	8003104 <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80030ee:	f7fd fbe7 	bl	80008c0 <HAL_GetTick>
 80030f2:	4602      	mov	r2, r0
 80030f4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80030f8:	1ad3      	subs	r3, r2, r3
 80030fa:	2b64      	cmp	r3, #100	; 0x64
 80030fc:	d902      	bls.n	8003104 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 80030fe:	2303      	movs	r3, #3
 8003100:	f000 be29 	b.w	8003d56 <HAL_RCC_OscConfig+0xe02>
 8003104:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003108:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800310c:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8003110:	fa93 f3a3 	rbit	r3, r3
 8003114:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8003118:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800311c:	fab3 f383 	clz	r3, r3
 8003120:	b2db      	uxtb	r3, r3
 8003122:	095b      	lsrs	r3, r3, #5
 8003124:	b2db      	uxtb	r3, r3
 8003126:	f043 0301 	orr.w	r3, r3, #1
 800312a:	b2db      	uxtb	r3, r3
 800312c:	2b01      	cmp	r3, #1
 800312e:	d102      	bne.n	8003136 <HAL_RCC_OscConfig+0x1e2>
 8003130:	4b46      	ldr	r3, [pc, #280]	; (800324c <HAL_RCC_OscConfig+0x2f8>)
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	e015      	b.n	8003162 <HAL_RCC_OscConfig+0x20e>
 8003136:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800313a:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800313e:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8003142:	fa93 f3a3 	rbit	r3, r3
 8003146:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 800314a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800314e:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8003152:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8003156:	fa93 f3a3 	rbit	r3, r3
 800315a:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 800315e:	4b3b      	ldr	r3, [pc, #236]	; (800324c <HAL_RCC_OscConfig+0x2f8>)
 8003160:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003162:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003166:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 800316a:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 800316e:	fa92 f2a2 	rbit	r2, r2
 8003172:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8003176:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 800317a:	fab2 f282 	clz	r2, r2
 800317e:	b2d2      	uxtb	r2, r2
 8003180:	f042 0220 	orr.w	r2, r2, #32
 8003184:	b2d2      	uxtb	r2, r2
 8003186:	f002 021f 	and.w	r2, r2, #31
 800318a:	2101      	movs	r1, #1
 800318c:	fa01 f202 	lsl.w	r2, r1, r2
 8003190:	4013      	ands	r3, r2
 8003192:	2b00      	cmp	r3, #0
 8003194:	d0ab      	beq.n	80030ee <HAL_RCC_OscConfig+0x19a>
 8003196:	e05c      	b.n	8003252 <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003198:	f7fd fb92 	bl	80008c0 <HAL_GetTick>
 800319c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80031a0:	e00a      	b.n	80031b8 <HAL_RCC_OscConfig+0x264>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80031a2:	f7fd fb8d 	bl	80008c0 <HAL_GetTick>
 80031a6:	4602      	mov	r2, r0
 80031a8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80031ac:	1ad3      	subs	r3, r2, r3
 80031ae:	2b64      	cmp	r3, #100	; 0x64
 80031b0:	d902      	bls.n	80031b8 <HAL_RCC_OscConfig+0x264>
          {
            return HAL_TIMEOUT;
 80031b2:	2303      	movs	r3, #3
 80031b4:	f000 bdcf 	b.w	8003d56 <HAL_RCC_OscConfig+0xe02>
 80031b8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80031bc:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031c0:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 80031c4:	fa93 f3a3 	rbit	r3, r3
 80031c8:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 80031cc:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80031d0:	fab3 f383 	clz	r3, r3
 80031d4:	b2db      	uxtb	r3, r3
 80031d6:	095b      	lsrs	r3, r3, #5
 80031d8:	b2db      	uxtb	r3, r3
 80031da:	f043 0301 	orr.w	r3, r3, #1
 80031de:	b2db      	uxtb	r3, r3
 80031e0:	2b01      	cmp	r3, #1
 80031e2:	d102      	bne.n	80031ea <HAL_RCC_OscConfig+0x296>
 80031e4:	4b19      	ldr	r3, [pc, #100]	; (800324c <HAL_RCC_OscConfig+0x2f8>)
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	e015      	b.n	8003216 <HAL_RCC_OscConfig+0x2c2>
 80031ea:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80031ee:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031f2:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 80031f6:	fa93 f3a3 	rbit	r3, r3
 80031fa:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 80031fe:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003202:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8003206:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 800320a:	fa93 f3a3 	rbit	r3, r3
 800320e:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8003212:	4b0e      	ldr	r3, [pc, #56]	; (800324c <HAL_RCC_OscConfig+0x2f8>)
 8003214:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003216:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800321a:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 800321e:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8003222:	fa92 f2a2 	rbit	r2, r2
 8003226:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 800322a:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 800322e:	fab2 f282 	clz	r2, r2
 8003232:	b2d2      	uxtb	r2, r2
 8003234:	f042 0220 	orr.w	r2, r2, #32
 8003238:	b2d2      	uxtb	r2, r2
 800323a:	f002 021f 	and.w	r2, r2, #31
 800323e:	2101      	movs	r1, #1
 8003240:	fa01 f202 	lsl.w	r2, r1, r2
 8003244:	4013      	ands	r3, r2
 8003246:	2b00      	cmp	r3, #0
 8003248:	d1ab      	bne.n	80031a2 <HAL_RCC_OscConfig+0x24e>
 800324a:	e002      	b.n	8003252 <HAL_RCC_OscConfig+0x2fe>
 800324c:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003250:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003252:	1d3b      	adds	r3, r7, #4
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	f003 0302 	and.w	r3, r3, #2
 800325c:	2b00      	cmp	r3, #0
 800325e:	f000 816f 	beq.w	8003540 <HAL_RCC_OscConfig+0x5ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8003262:	4bd0      	ldr	r3, [pc, #832]	; (80035a4 <HAL_RCC_OscConfig+0x650>)
 8003264:	685b      	ldr	r3, [r3, #4]
 8003266:	f003 030c 	and.w	r3, r3, #12
 800326a:	2b00      	cmp	r3, #0
 800326c:	d00b      	beq.n	8003286 <HAL_RCC_OscConfig+0x332>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800326e:	4bcd      	ldr	r3, [pc, #820]	; (80035a4 <HAL_RCC_OscConfig+0x650>)
 8003270:	685b      	ldr	r3, [r3, #4]
 8003272:	f003 030c 	and.w	r3, r3, #12
 8003276:	2b08      	cmp	r3, #8
 8003278:	d16c      	bne.n	8003354 <HAL_RCC_OscConfig+0x400>
 800327a:	4bca      	ldr	r3, [pc, #808]	; (80035a4 <HAL_RCC_OscConfig+0x650>)
 800327c:	685b      	ldr	r3, [r3, #4]
 800327e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003282:	2b00      	cmp	r3, #0
 8003284:	d166      	bne.n	8003354 <HAL_RCC_OscConfig+0x400>
 8003286:	2302      	movs	r3, #2
 8003288:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800328c:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8003290:	fa93 f3a3 	rbit	r3, r3
 8003294:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8003298:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800329c:	fab3 f383 	clz	r3, r3
 80032a0:	b2db      	uxtb	r3, r3
 80032a2:	095b      	lsrs	r3, r3, #5
 80032a4:	b2db      	uxtb	r3, r3
 80032a6:	f043 0301 	orr.w	r3, r3, #1
 80032aa:	b2db      	uxtb	r3, r3
 80032ac:	2b01      	cmp	r3, #1
 80032ae:	d102      	bne.n	80032b6 <HAL_RCC_OscConfig+0x362>
 80032b0:	4bbc      	ldr	r3, [pc, #752]	; (80035a4 <HAL_RCC_OscConfig+0x650>)
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	e013      	b.n	80032de <HAL_RCC_OscConfig+0x38a>
 80032b6:	2302      	movs	r3, #2
 80032b8:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032bc:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 80032c0:	fa93 f3a3 	rbit	r3, r3
 80032c4:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 80032c8:	2302      	movs	r3, #2
 80032ca:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 80032ce:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80032d2:	fa93 f3a3 	rbit	r3, r3
 80032d6:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 80032da:	4bb2      	ldr	r3, [pc, #712]	; (80035a4 <HAL_RCC_OscConfig+0x650>)
 80032dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032de:	2202      	movs	r2, #2
 80032e0:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 80032e4:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 80032e8:	fa92 f2a2 	rbit	r2, r2
 80032ec:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 80032f0:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 80032f4:	fab2 f282 	clz	r2, r2
 80032f8:	b2d2      	uxtb	r2, r2
 80032fa:	f042 0220 	orr.w	r2, r2, #32
 80032fe:	b2d2      	uxtb	r2, r2
 8003300:	f002 021f 	and.w	r2, r2, #31
 8003304:	2101      	movs	r1, #1
 8003306:	fa01 f202 	lsl.w	r2, r1, r2
 800330a:	4013      	ands	r3, r2
 800330c:	2b00      	cmp	r3, #0
 800330e:	d007      	beq.n	8003320 <HAL_RCC_OscConfig+0x3cc>
 8003310:	1d3b      	adds	r3, r7, #4
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	691b      	ldr	r3, [r3, #16]
 8003316:	2b01      	cmp	r3, #1
 8003318:	d002      	beq.n	8003320 <HAL_RCC_OscConfig+0x3cc>
      {
        return HAL_ERROR;
 800331a:	2301      	movs	r3, #1
 800331c:	f000 bd1b 	b.w	8003d56 <HAL_RCC_OscConfig+0xe02>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003320:	4ba0      	ldr	r3, [pc, #640]	; (80035a4 <HAL_RCC_OscConfig+0x650>)
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003328:	1d3b      	adds	r3, r7, #4
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	695b      	ldr	r3, [r3, #20]
 800332e:	21f8      	movs	r1, #248	; 0xf8
 8003330:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003334:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8003338:	fa91 f1a1 	rbit	r1, r1
 800333c:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8003340:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8003344:	fab1 f181 	clz	r1, r1
 8003348:	b2c9      	uxtb	r1, r1
 800334a:	408b      	lsls	r3, r1
 800334c:	4995      	ldr	r1, [pc, #596]	; (80035a4 <HAL_RCC_OscConfig+0x650>)
 800334e:	4313      	orrs	r3, r2
 8003350:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003352:	e0f5      	b.n	8003540 <HAL_RCC_OscConfig+0x5ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003354:	1d3b      	adds	r3, r7, #4
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	691b      	ldr	r3, [r3, #16]
 800335a:	2b00      	cmp	r3, #0
 800335c:	f000 8085 	beq.w	800346a <HAL_RCC_OscConfig+0x516>
 8003360:	2301      	movs	r3, #1
 8003362:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003366:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 800336a:	fa93 f3a3 	rbit	r3, r3
 800336e:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8003372:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003376:	fab3 f383 	clz	r3, r3
 800337a:	b2db      	uxtb	r3, r3
 800337c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003380:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003384:	009b      	lsls	r3, r3, #2
 8003386:	461a      	mov	r2, r3
 8003388:	2301      	movs	r3, #1
 800338a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800338c:	f7fd fa98 	bl	80008c0 <HAL_GetTick>
 8003390:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003394:	e00a      	b.n	80033ac <HAL_RCC_OscConfig+0x458>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003396:	f7fd fa93 	bl	80008c0 <HAL_GetTick>
 800339a:	4602      	mov	r2, r0
 800339c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80033a0:	1ad3      	subs	r3, r2, r3
 80033a2:	2b02      	cmp	r3, #2
 80033a4:	d902      	bls.n	80033ac <HAL_RCC_OscConfig+0x458>
          {
            return HAL_TIMEOUT;
 80033a6:	2303      	movs	r3, #3
 80033a8:	f000 bcd5 	b.w	8003d56 <HAL_RCC_OscConfig+0xe02>
 80033ac:	2302      	movs	r3, #2
 80033ae:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033b2:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 80033b6:	fa93 f3a3 	rbit	r3, r3
 80033ba:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 80033be:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80033c2:	fab3 f383 	clz	r3, r3
 80033c6:	b2db      	uxtb	r3, r3
 80033c8:	095b      	lsrs	r3, r3, #5
 80033ca:	b2db      	uxtb	r3, r3
 80033cc:	f043 0301 	orr.w	r3, r3, #1
 80033d0:	b2db      	uxtb	r3, r3
 80033d2:	2b01      	cmp	r3, #1
 80033d4:	d102      	bne.n	80033dc <HAL_RCC_OscConfig+0x488>
 80033d6:	4b73      	ldr	r3, [pc, #460]	; (80035a4 <HAL_RCC_OscConfig+0x650>)
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	e013      	b.n	8003404 <HAL_RCC_OscConfig+0x4b0>
 80033dc:	2302      	movs	r3, #2
 80033de:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033e2:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 80033e6:	fa93 f3a3 	rbit	r3, r3
 80033ea:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 80033ee:	2302      	movs	r3, #2
 80033f0:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 80033f4:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 80033f8:	fa93 f3a3 	rbit	r3, r3
 80033fc:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8003400:	4b68      	ldr	r3, [pc, #416]	; (80035a4 <HAL_RCC_OscConfig+0x650>)
 8003402:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003404:	2202      	movs	r2, #2
 8003406:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 800340a:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800340e:	fa92 f2a2 	rbit	r2, r2
 8003412:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8003416:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 800341a:	fab2 f282 	clz	r2, r2
 800341e:	b2d2      	uxtb	r2, r2
 8003420:	f042 0220 	orr.w	r2, r2, #32
 8003424:	b2d2      	uxtb	r2, r2
 8003426:	f002 021f 	and.w	r2, r2, #31
 800342a:	2101      	movs	r1, #1
 800342c:	fa01 f202 	lsl.w	r2, r1, r2
 8003430:	4013      	ands	r3, r2
 8003432:	2b00      	cmp	r3, #0
 8003434:	d0af      	beq.n	8003396 <HAL_RCC_OscConfig+0x442>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003436:	4b5b      	ldr	r3, [pc, #364]	; (80035a4 <HAL_RCC_OscConfig+0x650>)
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800343e:	1d3b      	adds	r3, r7, #4
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	695b      	ldr	r3, [r3, #20]
 8003444:	21f8      	movs	r1, #248	; 0xf8
 8003446:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800344a:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 800344e:	fa91 f1a1 	rbit	r1, r1
 8003452:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8003456:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 800345a:	fab1 f181 	clz	r1, r1
 800345e:	b2c9      	uxtb	r1, r1
 8003460:	408b      	lsls	r3, r1
 8003462:	4950      	ldr	r1, [pc, #320]	; (80035a4 <HAL_RCC_OscConfig+0x650>)
 8003464:	4313      	orrs	r3, r2
 8003466:	600b      	str	r3, [r1, #0]
 8003468:	e06a      	b.n	8003540 <HAL_RCC_OscConfig+0x5ec>
 800346a:	2301      	movs	r3, #1
 800346c:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003470:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8003474:	fa93 f3a3 	rbit	r3, r3
 8003478:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 800347c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003480:	fab3 f383 	clz	r3, r3
 8003484:	b2db      	uxtb	r3, r3
 8003486:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800348a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800348e:	009b      	lsls	r3, r3, #2
 8003490:	461a      	mov	r2, r3
 8003492:	2300      	movs	r3, #0
 8003494:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003496:	f7fd fa13 	bl	80008c0 <HAL_GetTick>
 800349a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800349e:	e00a      	b.n	80034b6 <HAL_RCC_OscConfig+0x562>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80034a0:	f7fd fa0e 	bl	80008c0 <HAL_GetTick>
 80034a4:	4602      	mov	r2, r0
 80034a6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80034aa:	1ad3      	subs	r3, r2, r3
 80034ac:	2b02      	cmp	r3, #2
 80034ae:	d902      	bls.n	80034b6 <HAL_RCC_OscConfig+0x562>
          {
            return HAL_TIMEOUT;
 80034b0:	2303      	movs	r3, #3
 80034b2:	f000 bc50 	b.w	8003d56 <HAL_RCC_OscConfig+0xe02>
 80034b6:	2302      	movs	r3, #2
 80034b8:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034bc:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80034c0:	fa93 f3a3 	rbit	r3, r3
 80034c4:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 80034c8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80034cc:	fab3 f383 	clz	r3, r3
 80034d0:	b2db      	uxtb	r3, r3
 80034d2:	095b      	lsrs	r3, r3, #5
 80034d4:	b2db      	uxtb	r3, r3
 80034d6:	f043 0301 	orr.w	r3, r3, #1
 80034da:	b2db      	uxtb	r3, r3
 80034dc:	2b01      	cmp	r3, #1
 80034de:	d102      	bne.n	80034e6 <HAL_RCC_OscConfig+0x592>
 80034e0:	4b30      	ldr	r3, [pc, #192]	; (80035a4 <HAL_RCC_OscConfig+0x650>)
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	e013      	b.n	800350e <HAL_RCC_OscConfig+0x5ba>
 80034e6:	2302      	movs	r3, #2
 80034e8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034ec:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80034f0:	fa93 f3a3 	rbit	r3, r3
 80034f4:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80034f8:	2302      	movs	r3, #2
 80034fa:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80034fe:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8003502:	fa93 f3a3 	rbit	r3, r3
 8003506:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800350a:	4b26      	ldr	r3, [pc, #152]	; (80035a4 <HAL_RCC_OscConfig+0x650>)
 800350c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800350e:	2202      	movs	r2, #2
 8003510:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8003514:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8003518:	fa92 f2a2 	rbit	r2, r2
 800351c:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8003520:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8003524:	fab2 f282 	clz	r2, r2
 8003528:	b2d2      	uxtb	r2, r2
 800352a:	f042 0220 	orr.w	r2, r2, #32
 800352e:	b2d2      	uxtb	r2, r2
 8003530:	f002 021f 	and.w	r2, r2, #31
 8003534:	2101      	movs	r1, #1
 8003536:	fa01 f202 	lsl.w	r2, r1, r2
 800353a:	4013      	ands	r3, r2
 800353c:	2b00      	cmp	r3, #0
 800353e:	d1af      	bne.n	80034a0 <HAL_RCC_OscConfig+0x54c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003540:	1d3b      	adds	r3, r7, #4
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	f003 0308 	and.w	r3, r3, #8
 800354a:	2b00      	cmp	r3, #0
 800354c:	f000 80da 	beq.w	8003704 <HAL_RCC_OscConfig+0x7b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003550:	1d3b      	adds	r3, r7, #4
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	699b      	ldr	r3, [r3, #24]
 8003556:	2b00      	cmp	r3, #0
 8003558:	d069      	beq.n	800362e <HAL_RCC_OscConfig+0x6da>
 800355a:	2301      	movs	r3, #1
 800355c:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003560:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8003564:	fa93 f3a3 	rbit	r3, r3
 8003568:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 800356c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003570:	fab3 f383 	clz	r3, r3
 8003574:	b2db      	uxtb	r3, r3
 8003576:	461a      	mov	r2, r3
 8003578:	4b0b      	ldr	r3, [pc, #44]	; (80035a8 <HAL_RCC_OscConfig+0x654>)
 800357a:	4413      	add	r3, r2
 800357c:	009b      	lsls	r3, r3, #2
 800357e:	461a      	mov	r2, r3
 8003580:	2301      	movs	r3, #1
 8003582:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003584:	f7fd f99c 	bl	80008c0 <HAL_GetTick>
 8003588:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800358c:	e00e      	b.n	80035ac <HAL_RCC_OscConfig+0x658>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800358e:	f7fd f997 	bl	80008c0 <HAL_GetTick>
 8003592:	4602      	mov	r2, r0
 8003594:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003598:	1ad3      	subs	r3, r2, r3
 800359a:	2b02      	cmp	r3, #2
 800359c:	d906      	bls.n	80035ac <HAL_RCC_OscConfig+0x658>
        {
          return HAL_TIMEOUT;
 800359e:	2303      	movs	r3, #3
 80035a0:	e3d9      	b.n	8003d56 <HAL_RCC_OscConfig+0xe02>
 80035a2:	bf00      	nop
 80035a4:	40021000 	.word	0x40021000
 80035a8:	10908120 	.word	0x10908120
 80035ac:	2302      	movs	r3, #2
 80035ae:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035b2:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80035b6:	fa93 f3a3 	rbit	r3, r3
 80035ba:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80035be:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80035c2:	2202      	movs	r2, #2
 80035c4:	601a      	str	r2, [r3, #0]
 80035c6:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	fa93 f2a3 	rbit	r2, r3
 80035d0:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 80035d4:	601a      	str	r2, [r3, #0]
 80035d6:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 80035da:	2202      	movs	r2, #2
 80035dc:	601a      	str	r2, [r3, #0]
 80035de:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	fa93 f2a3 	rbit	r2, r3
 80035e8:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 80035ec:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80035ee:	4ba5      	ldr	r3, [pc, #660]	; (8003884 <HAL_RCC_OscConfig+0x930>)
 80035f0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80035f2:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 80035f6:	2102      	movs	r1, #2
 80035f8:	6019      	str	r1, [r3, #0]
 80035fa:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	fa93 f1a3 	rbit	r1, r3
 8003604:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8003608:	6019      	str	r1, [r3, #0]
  return result;
 800360a:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	fab3 f383 	clz	r3, r3
 8003614:	b2db      	uxtb	r3, r3
 8003616:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800361a:	b2db      	uxtb	r3, r3
 800361c:	f003 031f 	and.w	r3, r3, #31
 8003620:	2101      	movs	r1, #1
 8003622:	fa01 f303 	lsl.w	r3, r1, r3
 8003626:	4013      	ands	r3, r2
 8003628:	2b00      	cmp	r3, #0
 800362a:	d0b0      	beq.n	800358e <HAL_RCC_OscConfig+0x63a>
 800362c:	e06a      	b.n	8003704 <HAL_RCC_OscConfig+0x7b0>
 800362e:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8003632:	2201      	movs	r2, #1
 8003634:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003636:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	fa93 f2a3 	rbit	r2, r3
 8003640:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8003644:	601a      	str	r2, [r3, #0]
  return result;
 8003646:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800364a:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800364c:	fab3 f383 	clz	r3, r3
 8003650:	b2db      	uxtb	r3, r3
 8003652:	461a      	mov	r2, r3
 8003654:	4b8c      	ldr	r3, [pc, #560]	; (8003888 <HAL_RCC_OscConfig+0x934>)
 8003656:	4413      	add	r3, r2
 8003658:	009b      	lsls	r3, r3, #2
 800365a:	461a      	mov	r2, r3
 800365c:	2300      	movs	r3, #0
 800365e:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003660:	f7fd f92e 	bl	80008c0 <HAL_GetTick>
 8003664:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003668:	e009      	b.n	800367e <HAL_RCC_OscConfig+0x72a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800366a:	f7fd f929 	bl	80008c0 <HAL_GetTick>
 800366e:	4602      	mov	r2, r0
 8003670:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003674:	1ad3      	subs	r3, r2, r3
 8003676:	2b02      	cmp	r3, #2
 8003678:	d901      	bls.n	800367e <HAL_RCC_OscConfig+0x72a>
        {
          return HAL_TIMEOUT;
 800367a:	2303      	movs	r3, #3
 800367c:	e36b      	b.n	8003d56 <HAL_RCC_OscConfig+0xe02>
 800367e:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8003682:	2202      	movs	r2, #2
 8003684:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003686:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	fa93 f2a3 	rbit	r2, r3
 8003690:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8003694:	601a      	str	r2, [r3, #0]
 8003696:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 800369a:	2202      	movs	r2, #2
 800369c:	601a      	str	r2, [r3, #0]
 800369e:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	fa93 f2a3 	rbit	r2, r3
 80036a8:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80036ac:	601a      	str	r2, [r3, #0]
 80036ae:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 80036b2:	2202      	movs	r2, #2
 80036b4:	601a      	str	r2, [r3, #0]
 80036b6:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	fa93 f2a3 	rbit	r2, r3
 80036c0:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80036c4:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80036c6:	4b6f      	ldr	r3, [pc, #444]	; (8003884 <HAL_RCC_OscConfig+0x930>)
 80036c8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80036ca:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80036ce:	2102      	movs	r1, #2
 80036d0:	6019      	str	r1, [r3, #0]
 80036d2:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	fa93 f1a3 	rbit	r1, r3
 80036dc:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80036e0:	6019      	str	r1, [r3, #0]
  return result;
 80036e2:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	fab3 f383 	clz	r3, r3
 80036ec:	b2db      	uxtb	r3, r3
 80036ee:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80036f2:	b2db      	uxtb	r3, r3
 80036f4:	f003 031f 	and.w	r3, r3, #31
 80036f8:	2101      	movs	r1, #1
 80036fa:	fa01 f303 	lsl.w	r3, r1, r3
 80036fe:	4013      	ands	r3, r2
 8003700:	2b00      	cmp	r3, #0
 8003702:	d1b2      	bne.n	800366a <HAL_RCC_OscConfig+0x716>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003704:	1d3b      	adds	r3, r7, #4
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	f003 0304 	and.w	r3, r3, #4
 800370e:	2b00      	cmp	r3, #0
 8003710:	f000 8158 	beq.w	80039c4 <HAL_RCC_OscConfig+0xa70>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003714:	2300      	movs	r3, #0
 8003716:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800371a:	4b5a      	ldr	r3, [pc, #360]	; (8003884 <HAL_RCC_OscConfig+0x930>)
 800371c:	69db      	ldr	r3, [r3, #28]
 800371e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003722:	2b00      	cmp	r3, #0
 8003724:	d112      	bne.n	800374c <HAL_RCC_OscConfig+0x7f8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003726:	4b57      	ldr	r3, [pc, #348]	; (8003884 <HAL_RCC_OscConfig+0x930>)
 8003728:	69db      	ldr	r3, [r3, #28]
 800372a:	4a56      	ldr	r2, [pc, #344]	; (8003884 <HAL_RCC_OscConfig+0x930>)
 800372c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003730:	61d3      	str	r3, [r2, #28]
 8003732:	4b54      	ldr	r3, [pc, #336]	; (8003884 <HAL_RCC_OscConfig+0x930>)
 8003734:	69db      	ldr	r3, [r3, #28]
 8003736:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 800373a:	f107 0308 	add.w	r3, r7, #8
 800373e:	601a      	str	r2, [r3, #0]
 8003740:	f107 0308 	add.w	r3, r7, #8
 8003744:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8003746:	2301      	movs	r3, #1
 8003748:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800374c:	4b4f      	ldr	r3, [pc, #316]	; (800388c <HAL_RCC_OscConfig+0x938>)
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003754:	2b00      	cmp	r3, #0
 8003756:	d11a      	bne.n	800378e <HAL_RCC_OscConfig+0x83a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003758:	4b4c      	ldr	r3, [pc, #304]	; (800388c <HAL_RCC_OscConfig+0x938>)
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	4a4b      	ldr	r2, [pc, #300]	; (800388c <HAL_RCC_OscConfig+0x938>)
 800375e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003762:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003764:	f7fd f8ac 	bl	80008c0 <HAL_GetTick>
 8003768:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800376c:	e009      	b.n	8003782 <HAL_RCC_OscConfig+0x82e>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800376e:	f7fd f8a7 	bl	80008c0 <HAL_GetTick>
 8003772:	4602      	mov	r2, r0
 8003774:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003778:	1ad3      	subs	r3, r2, r3
 800377a:	2b64      	cmp	r3, #100	; 0x64
 800377c:	d901      	bls.n	8003782 <HAL_RCC_OscConfig+0x82e>
        {
          return HAL_TIMEOUT;
 800377e:	2303      	movs	r3, #3
 8003780:	e2e9      	b.n	8003d56 <HAL_RCC_OscConfig+0xe02>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003782:	4b42      	ldr	r3, [pc, #264]	; (800388c <HAL_RCC_OscConfig+0x938>)
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800378a:	2b00      	cmp	r3, #0
 800378c:	d0ef      	beq.n	800376e <HAL_RCC_OscConfig+0x81a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800378e:	1d3b      	adds	r3, r7, #4
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	68db      	ldr	r3, [r3, #12]
 8003794:	2b01      	cmp	r3, #1
 8003796:	d106      	bne.n	80037a6 <HAL_RCC_OscConfig+0x852>
 8003798:	4b3a      	ldr	r3, [pc, #232]	; (8003884 <HAL_RCC_OscConfig+0x930>)
 800379a:	6a1b      	ldr	r3, [r3, #32]
 800379c:	4a39      	ldr	r2, [pc, #228]	; (8003884 <HAL_RCC_OscConfig+0x930>)
 800379e:	f043 0301 	orr.w	r3, r3, #1
 80037a2:	6213      	str	r3, [r2, #32]
 80037a4:	e02f      	b.n	8003806 <HAL_RCC_OscConfig+0x8b2>
 80037a6:	1d3b      	adds	r3, r7, #4
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	68db      	ldr	r3, [r3, #12]
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d10c      	bne.n	80037ca <HAL_RCC_OscConfig+0x876>
 80037b0:	4b34      	ldr	r3, [pc, #208]	; (8003884 <HAL_RCC_OscConfig+0x930>)
 80037b2:	6a1b      	ldr	r3, [r3, #32]
 80037b4:	4a33      	ldr	r2, [pc, #204]	; (8003884 <HAL_RCC_OscConfig+0x930>)
 80037b6:	f023 0301 	bic.w	r3, r3, #1
 80037ba:	6213      	str	r3, [r2, #32]
 80037bc:	4b31      	ldr	r3, [pc, #196]	; (8003884 <HAL_RCC_OscConfig+0x930>)
 80037be:	6a1b      	ldr	r3, [r3, #32]
 80037c0:	4a30      	ldr	r2, [pc, #192]	; (8003884 <HAL_RCC_OscConfig+0x930>)
 80037c2:	f023 0304 	bic.w	r3, r3, #4
 80037c6:	6213      	str	r3, [r2, #32]
 80037c8:	e01d      	b.n	8003806 <HAL_RCC_OscConfig+0x8b2>
 80037ca:	1d3b      	adds	r3, r7, #4
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	68db      	ldr	r3, [r3, #12]
 80037d0:	2b05      	cmp	r3, #5
 80037d2:	d10c      	bne.n	80037ee <HAL_RCC_OscConfig+0x89a>
 80037d4:	4b2b      	ldr	r3, [pc, #172]	; (8003884 <HAL_RCC_OscConfig+0x930>)
 80037d6:	6a1b      	ldr	r3, [r3, #32]
 80037d8:	4a2a      	ldr	r2, [pc, #168]	; (8003884 <HAL_RCC_OscConfig+0x930>)
 80037da:	f043 0304 	orr.w	r3, r3, #4
 80037de:	6213      	str	r3, [r2, #32]
 80037e0:	4b28      	ldr	r3, [pc, #160]	; (8003884 <HAL_RCC_OscConfig+0x930>)
 80037e2:	6a1b      	ldr	r3, [r3, #32]
 80037e4:	4a27      	ldr	r2, [pc, #156]	; (8003884 <HAL_RCC_OscConfig+0x930>)
 80037e6:	f043 0301 	orr.w	r3, r3, #1
 80037ea:	6213      	str	r3, [r2, #32]
 80037ec:	e00b      	b.n	8003806 <HAL_RCC_OscConfig+0x8b2>
 80037ee:	4b25      	ldr	r3, [pc, #148]	; (8003884 <HAL_RCC_OscConfig+0x930>)
 80037f0:	6a1b      	ldr	r3, [r3, #32]
 80037f2:	4a24      	ldr	r2, [pc, #144]	; (8003884 <HAL_RCC_OscConfig+0x930>)
 80037f4:	f023 0301 	bic.w	r3, r3, #1
 80037f8:	6213      	str	r3, [r2, #32]
 80037fa:	4b22      	ldr	r3, [pc, #136]	; (8003884 <HAL_RCC_OscConfig+0x930>)
 80037fc:	6a1b      	ldr	r3, [r3, #32]
 80037fe:	4a21      	ldr	r2, [pc, #132]	; (8003884 <HAL_RCC_OscConfig+0x930>)
 8003800:	f023 0304 	bic.w	r3, r3, #4
 8003804:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003806:	1d3b      	adds	r3, r7, #4
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	68db      	ldr	r3, [r3, #12]
 800380c:	2b00      	cmp	r3, #0
 800380e:	d06b      	beq.n	80038e8 <HAL_RCC_OscConfig+0x994>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003810:	f7fd f856 	bl	80008c0 <HAL_GetTick>
 8003814:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003818:	e00b      	b.n	8003832 <HAL_RCC_OscConfig+0x8de>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800381a:	f7fd f851 	bl	80008c0 <HAL_GetTick>
 800381e:	4602      	mov	r2, r0
 8003820:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003824:	1ad3      	subs	r3, r2, r3
 8003826:	f241 3288 	movw	r2, #5000	; 0x1388
 800382a:	4293      	cmp	r3, r2
 800382c:	d901      	bls.n	8003832 <HAL_RCC_OscConfig+0x8de>
        {
          return HAL_TIMEOUT;
 800382e:	2303      	movs	r3, #3
 8003830:	e291      	b.n	8003d56 <HAL_RCC_OscConfig+0xe02>
 8003832:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8003836:	2202      	movs	r2, #2
 8003838:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800383a:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	fa93 f2a3 	rbit	r2, r3
 8003844:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8003848:	601a      	str	r2, [r3, #0]
 800384a:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 800384e:	2202      	movs	r2, #2
 8003850:	601a      	str	r2, [r3, #0]
 8003852:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	fa93 f2a3 	rbit	r2, r3
 800385c:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8003860:	601a      	str	r2, [r3, #0]
  return result;
 8003862:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8003866:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003868:	fab3 f383 	clz	r3, r3
 800386c:	b2db      	uxtb	r3, r3
 800386e:	095b      	lsrs	r3, r3, #5
 8003870:	b2db      	uxtb	r3, r3
 8003872:	f043 0302 	orr.w	r3, r3, #2
 8003876:	b2db      	uxtb	r3, r3
 8003878:	2b02      	cmp	r3, #2
 800387a:	d109      	bne.n	8003890 <HAL_RCC_OscConfig+0x93c>
 800387c:	4b01      	ldr	r3, [pc, #4]	; (8003884 <HAL_RCC_OscConfig+0x930>)
 800387e:	6a1b      	ldr	r3, [r3, #32]
 8003880:	e014      	b.n	80038ac <HAL_RCC_OscConfig+0x958>
 8003882:	bf00      	nop
 8003884:	40021000 	.word	0x40021000
 8003888:	10908120 	.word	0x10908120
 800388c:	40007000 	.word	0x40007000
 8003890:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8003894:	2202      	movs	r2, #2
 8003896:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003898:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	fa93 f2a3 	rbit	r2, r3
 80038a2:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80038a6:	601a      	str	r2, [r3, #0]
 80038a8:	4bbb      	ldr	r3, [pc, #748]	; (8003b98 <HAL_RCC_OscConfig+0xc44>)
 80038aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038ac:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 80038b0:	2102      	movs	r1, #2
 80038b2:	6011      	str	r1, [r2, #0]
 80038b4:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 80038b8:	6812      	ldr	r2, [r2, #0]
 80038ba:	fa92 f1a2 	rbit	r1, r2
 80038be:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 80038c2:	6011      	str	r1, [r2, #0]
  return result;
 80038c4:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 80038c8:	6812      	ldr	r2, [r2, #0]
 80038ca:	fab2 f282 	clz	r2, r2
 80038ce:	b2d2      	uxtb	r2, r2
 80038d0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80038d4:	b2d2      	uxtb	r2, r2
 80038d6:	f002 021f 	and.w	r2, r2, #31
 80038da:	2101      	movs	r1, #1
 80038dc:	fa01 f202 	lsl.w	r2, r1, r2
 80038e0:	4013      	ands	r3, r2
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d099      	beq.n	800381a <HAL_RCC_OscConfig+0x8c6>
 80038e6:	e063      	b.n	80039b0 <HAL_RCC_OscConfig+0xa5c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80038e8:	f7fc ffea 	bl	80008c0 <HAL_GetTick>
 80038ec:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80038f0:	e00b      	b.n	800390a <HAL_RCC_OscConfig+0x9b6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80038f2:	f7fc ffe5 	bl	80008c0 <HAL_GetTick>
 80038f6:	4602      	mov	r2, r0
 80038f8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80038fc:	1ad3      	subs	r3, r2, r3
 80038fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8003902:	4293      	cmp	r3, r2
 8003904:	d901      	bls.n	800390a <HAL_RCC_OscConfig+0x9b6>
        {
          return HAL_TIMEOUT;
 8003906:	2303      	movs	r3, #3
 8003908:	e225      	b.n	8003d56 <HAL_RCC_OscConfig+0xe02>
 800390a:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800390e:	2202      	movs	r2, #2
 8003910:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003912:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	fa93 f2a3 	rbit	r2, r3
 800391c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8003920:	601a      	str	r2, [r3, #0]
 8003922:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8003926:	2202      	movs	r2, #2
 8003928:	601a      	str	r2, [r3, #0]
 800392a:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	fa93 f2a3 	rbit	r2, r3
 8003934:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8003938:	601a      	str	r2, [r3, #0]
  return result;
 800393a:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800393e:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003940:	fab3 f383 	clz	r3, r3
 8003944:	b2db      	uxtb	r3, r3
 8003946:	095b      	lsrs	r3, r3, #5
 8003948:	b2db      	uxtb	r3, r3
 800394a:	f043 0302 	orr.w	r3, r3, #2
 800394e:	b2db      	uxtb	r3, r3
 8003950:	2b02      	cmp	r3, #2
 8003952:	d102      	bne.n	800395a <HAL_RCC_OscConfig+0xa06>
 8003954:	4b90      	ldr	r3, [pc, #576]	; (8003b98 <HAL_RCC_OscConfig+0xc44>)
 8003956:	6a1b      	ldr	r3, [r3, #32]
 8003958:	e00d      	b.n	8003976 <HAL_RCC_OscConfig+0xa22>
 800395a:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800395e:	2202      	movs	r2, #2
 8003960:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003962:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	fa93 f2a3 	rbit	r2, r3
 800396c:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8003970:	601a      	str	r2, [r3, #0]
 8003972:	4b89      	ldr	r3, [pc, #548]	; (8003b98 <HAL_RCC_OscConfig+0xc44>)
 8003974:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003976:	f107 0288 	add.w	r2, r7, #136	; 0x88
 800397a:	2102      	movs	r1, #2
 800397c:	6011      	str	r1, [r2, #0]
 800397e:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8003982:	6812      	ldr	r2, [r2, #0]
 8003984:	fa92 f1a2 	rbit	r1, r2
 8003988:	f107 0284 	add.w	r2, r7, #132	; 0x84
 800398c:	6011      	str	r1, [r2, #0]
  return result;
 800398e:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8003992:	6812      	ldr	r2, [r2, #0]
 8003994:	fab2 f282 	clz	r2, r2
 8003998:	b2d2      	uxtb	r2, r2
 800399a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800399e:	b2d2      	uxtb	r2, r2
 80039a0:	f002 021f 	and.w	r2, r2, #31
 80039a4:	2101      	movs	r1, #1
 80039a6:	fa01 f202 	lsl.w	r2, r1, r2
 80039aa:	4013      	ands	r3, r2
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d1a0      	bne.n	80038f2 <HAL_RCC_OscConfig+0x99e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80039b0:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 80039b4:	2b01      	cmp	r3, #1
 80039b6:	d105      	bne.n	80039c4 <HAL_RCC_OscConfig+0xa70>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80039b8:	4b77      	ldr	r3, [pc, #476]	; (8003b98 <HAL_RCC_OscConfig+0xc44>)
 80039ba:	69db      	ldr	r3, [r3, #28]
 80039bc:	4a76      	ldr	r2, [pc, #472]	; (8003b98 <HAL_RCC_OscConfig+0xc44>)
 80039be:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80039c2:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80039c4:	1d3b      	adds	r3, r7, #4
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	69db      	ldr	r3, [r3, #28]
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	f000 81c2 	beq.w	8003d54 <HAL_RCC_OscConfig+0xe00>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80039d0:	4b71      	ldr	r3, [pc, #452]	; (8003b98 <HAL_RCC_OscConfig+0xc44>)
 80039d2:	685b      	ldr	r3, [r3, #4]
 80039d4:	f003 030c 	and.w	r3, r3, #12
 80039d8:	2b08      	cmp	r3, #8
 80039da:	f000 819c 	beq.w	8003d16 <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80039de:	1d3b      	adds	r3, r7, #4
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	69db      	ldr	r3, [r3, #28]
 80039e4:	2b02      	cmp	r3, #2
 80039e6:	f040 8114 	bne.w	8003c12 <HAL_RCC_OscConfig+0xcbe>
 80039ea:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80039ee:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80039f2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039f4:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	fa93 f2a3 	rbit	r2, r3
 80039fe:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8003a02:	601a      	str	r2, [r3, #0]
  return result;
 8003a04:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8003a08:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a0a:	fab3 f383 	clz	r3, r3
 8003a0e:	b2db      	uxtb	r3, r3
 8003a10:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003a14:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003a18:	009b      	lsls	r3, r3, #2
 8003a1a:	461a      	mov	r2, r3
 8003a1c:	2300      	movs	r3, #0
 8003a1e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a20:	f7fc ff4e 	bl	80008c0 <HAL_GetTick>
 8003a24:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003a28:	e009      	b.n	8003a3e <HAL_RCC_OscConfig+0xaea>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003a2a:	f7fc ff49 	bl	80008c0 <HAL_GetTick>
 8003a2e:	4602      	mov	r2, r0
 8003a30:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003a34:	1ad3      	subs	r3, r2, r3
 8003a36:	2b02      	cmp	r3, #2
 8003a38:	d901      	bls.n	8003a3e <HAL_RCC_OscConfig+0xaea>
          {
            return HAL_TIMEOUT;
 8003a3a:	2303      	movs	r3, #3
 8003a3c:	e18b      	b.n	8003d56 <HAL_RCC_OscConfig+0xe02>
 8003a3e:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8003a42:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003a46:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a48:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	fa93 f2a3 	rbit	r2, r3
 8003a52:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8003a56:	601a      	str	r2, [r3, #0]
  return result;
 8003a58:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8003a5c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003a5e:	fab3 f383 	clz	r3, r3
 8003a62:	b2db      	uxtb	r3, r3
 8003a64:	095b      	lsrs	r3, r3, #5
 8003a66:	b2db      	uxtb	r3, r3
 8003a68:	f043 0301 	orr.w	r3, r3, #1
 8003a6c:	b2db      	uxtb	r3, r3
 8003a6e:	2b01      	cmp	r3, #1
 8003a70:	d102      	bne.n	8003a78 <HAL_RCC_OscConfig+0xb24>
 8003a72:	4b49      	ldr	r3, [pc, #292]	; (8003b98 <HAL_RCC_OscConfig+0xc44>)
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	e01b      	b.n	8003ab0 <HAL_RCC_OscConfig+0xb5c>
 8003a78:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8003a7c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003a80:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a82:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	fa93 f2a3 	rbit	r2, r3
 8003a8c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8003a90:	601a      	str	r2, [r3, #0]
 8003a92:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8003a96:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003a9a:	601a      	str	r2, [r3, #0]
 8003a9c:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	fa93 f2a3 	rbit	r2, r3
 8003aa6:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8003aaa:	601a      	str	r2, [r3, #0]
 8003aac:	4b3a      	ldr	r3, [pc, #232]	; (8003b98 <HAL_RCC_OscConfig+0xc44>)
 8003aae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ab0:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8003ab4:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003ab8:	6011      	str	r1, [r2, #0]
 8003aba:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8003abe:	6812      	ldr	r2, [r2, #0]
 8003ac0:	fa92 f1a2 	rbit	r1, r2
 8003ac4:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8003ac8:	6011      	str	r1, [r2, #0]
  return result;
 8003aca:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8003ace:	6812      	ldr	r2, [r2, #0]
 8003ad0:	fab2 f282 	clz	r2, r2
 8003ad4:	b2d2      	uxtb	r2, r2
 8003ad6:	f042 0220 	orr.w	r2, r2, #32
 8003ada:	b2d2      	uxtb	r2, r2
 8003adc:	f002 021f 	and.w	r2, r2, #31
 8003ae0:	2101      	movs	r1, #1
 8003ae2:	fa01 f202 	lsl.w	r2, r1, r2
 8003ae6:	4013      	ands	r3, r2
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d19e      	bne.n	8003a2a <HAL_RCC_OscConfig+0xad6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003aec:	4b2a      	ldr	r3, [pc, #168]	; (8003b98 <HAL_RCC_OscConfig+0xc44>)
 8003aee:	685b      	ldr	r3, [r3, #4]
 8003af0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003af4:	1d3b      	adds	r3, r7, #4
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8003afa:	1d3b      	adds	r3, r7, #4
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	6a1b      	ldr	r3, [r3, #32]
 8003b00:	430b      	orrs	r3, r1
 8003b02:	4925      	ldr	r1, [pc, #148]	; (8003b98 <HAL_RCC_OscConfig+0xc44>)
 8003b04:	4313      	orrs	r3, r2
 8003b06:	604b      	str	r3, [r1, #4]
 8003b08:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8003b0c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003b10:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b12:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	fa93 f2a3 	rbit	r2, r3
 8003b1c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003b20:	601a      	str	r2, [r3, #0]
  return result;
 8003b22:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003b26:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003b28:	fab3 f383 	clz	r3, r3
 8003b2c:	b2db      	uxtb	r3, r3
 8003b2e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003b32:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003b36:	009b      	lsls	r3, r3, #2
 8003b38:	461a      	mov	r2, r3
 8003b3a:	2301      	movs	r3, #1
 8003b3c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b3e:	f7fc febf 	bl	80008c0 <HAL_GetTick>
 8003b42:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003b46:	e009      	b.n	8003b5c <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003b48:	f7fc feba 	bl	80008c0 <HAL_GetTick>
 8003b4c:	4602      	mov	r2, r0
 8003b4e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003b52:	1ad3      	subs	r3, r2, r3
 8003b54:	2b02      	cmp	r3, #2
 8003b56:	d901      	bls.n	8003b5c <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 8003b58:	2303      	movs	r3, #3
 8003b5a:	e0fc      	b.n	8003d56 <HAL_RCC_OscConfig+0xe02>
 8003b5c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8003b60:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003b64:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b66:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	fa93 f2a3 	rbit	r2, r3
 8003b70:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8003b74:	601a      	str	r2, [r3, #0]
  return result;
 8003b76:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8003b7a:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003b7c:	fab3 f383 	clz	r3, r3
 8003b80:	b2db      	uxtb	r3, r3
 8003b82:	095b      	lsrs	r3, r3, #5
 8003b84:	b2db      	uxtb	r3, r3
 8003b86:	f043 0301 	orr.w	r3, r3, #1
 8003b8a:	b2db      	uxtb	r3, r3
 8003b8c:	2b01      	cmp	r3, #1
 8003b8e:	d105      	bne.n	8003b9c <HAL_RCC_OscConfig+0xc48>
 8003b90:	4b01      	ldr	r3, [pc, #4]	; (8003b98 <HAL_RCC_OscConfig+0xc44>)
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	e01e      	b.n	8003bd4 <HAL_RCC_OscConfig+0xc80>
 8003b96:	bf00      	nop
 8003b98:	40021000 	.word	0x40021000
 8003b9c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003ba0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003ba4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ba6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	fa93 f2a3 	rbit	r2, r3
 8003bb0:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8003bb4:	601a      	str	r2, [r3, #0]
 8003bb6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003bba:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003bbe:	601a      	str	r2, [r3, #0]
 8003bc0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	fa93 f2a3 	rbit	r2, r3
 8003bca:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8003bce:	601a      	str	r2, [r3, #0]
 8003bd0:	4b63      	ldr	r3, [pc, #396]	; (8003d60 <HAL_RCC_OscConfig+0xe0c>)
 8003bd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bd4:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8003bd8:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003bdc:	6011      	str	r1, [r2, #0]
 8003bde:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8003be2:	6812      	ldr	r2, [r2, #0]
 8003be4:	fa92 f1a2 	rbit	r1, r2
 8003be8:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8003bec:	6011      	str	r1, [r2, #0]
  return result;
 8003bee:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8003bf2:	6812      	ldr	r2, [r2, #0]
 8003bf4:	fab2 f282 	clz	r2, r2
 8003bf8:	b2d2      	uxtb	r2, r2
 8003bfa:	f042 0220 	orr.w	r2, r2, #32
 8003bfe:	b2d2      	uxtb	r2, r2
 8003c00:	f002 021f 	and.w	r2, r2, #31
 8003c04:	2101      	movs	r1, #1
 8003c06:	fa01 f202 	lsl.w	r2, r1, r2
 8003c0a:	4013      	ands	r3, r2
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d09b      	beq.n	8003b48 <HAL_RCC_OscConfig+0xbf4>
 8003c10:	e0a0      	b.n	8003d54 <HAL_RCC_OscConfig+0xe00>
 8003c12:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003c16:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003c1a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c1c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	fa93 f2a3 	rbit	r2, r3
 8003c26:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003c2a:	601a      	str	r2, [r3, #0]
  return result;
 8003c2c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003c30:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c32:	fab3 f383 	clz	r3, r3
 8003c36:	b2db      	uxtb	r3, r3
 8003c38:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003c3c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003c40:	009b      	lsls	r3, r3, #2
 8003c42:	461a      	mov	r2, r3
 8003c44:	2300      	movs	r3, #0
 8003c46:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c48:	f7fc fe3a 	bl	80008c0 <HAL_GetTick>
 8003c4c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003c50:	e009      	b.n	8003c66 <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003c52:	f7fc fe35 	bl	80008c0 <HAL_GetTick>
 8003c56:	4602      	mov	r2, r0
 8003c58:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003c5c:	1ad3      	subs	r3, r2, r3
 8003c5e:	2b02      	cmp	r3, #2
 8003c60:	d901      	bls.n	8003c66 <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 8003c62:	2303      	movs	r3, #3
 8003c64:	e077      	b.n	8003d56 <HAL_RCC_OscConfig+0xe02>
 8003c66:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003c6a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003c6e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c70:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	fa93 f2a3 	rbit	r2, r3
 8003c7a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003c7e:	601a      	str	r2, [r3, #0]
  return result;
 8003c80:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003c84:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003c86:	fab3 f383 	clz	r3, r3
 8003c8a:	b2db      	uxtb	r3, r3
 8003c8c:	095b      	lsrs	r3, r3, #5
 8003c8e:	b2db      	uxtb	r3, r3
 8003c90:	f043 0301 	orr.w	r3, r3, #1
 8003c94:	b2db      	uxtb	r3, r3
 8003c96:	2b01      	cmp	r3, #1
 8003c98:	d102      	bne.n	8003ca0 <HAL_RCC_OscConfig+0xd4c>
 8003c9a:	4b31      	ldr	r3, [pc, #196]	; (8003d60 <HAL_RCC_OscConfig+0xe0c>)
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	e01b      	b.n	8003cd8 <HAL_RCC_OscConfig+0xd84>
 8003ca0:	f107 0320 	add.w	r3, r7, #32
 8003ca4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003ca8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003caa:	f107 0320 	add.w	r3, r7, #32
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	fa93 f2a3 	rbit	r2, r3
 8003cb4:	f107 031c 	add.w	r3, r7, #28
 8003cb8:	601a      	str	r2, [r3, #0]
 8003cba:	f107 0318 	add.w	r3, r7, #24
 8003cbe:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003cc2:	601a      	str	r2, [r3, #0]
 8003cc4:	f107 0318 	add.w	r3, r7, #24
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	fa93 f2a3 	rbit	r2, r3
 8003cce:	f107 0314 	add.w	r3, r7, #20
 8003cd2:	601a      	str	r2, [r3, #0]
 8003cd4:	4b22      	ldr	r3, [pc, #136]	; (8003d60 <HAL_RCC_OscConfig+0xe0c>)
 8003cd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cd8:	f107 0210 	add.w	r2, r7, #16
 8003cdc:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003ce0:	6011      	str	r1, [r2, #0]
 8003ce2:	f107 0210 	add.w	r2, r7, #16
 8003ce6:	6812      	ldr	r2, [r2, #0]
 8003ce8:	fa92 f1a2 	rbit	r1, r2
 8003cec:	f107 020c 	add.w	r2, r7, #12
 8003cf0:	6011      	str	r1, [r2, #0]
  return result;
 8003cf2:	f107 020c 	add.w	r2, r7, #12
 8003cf6:	6812      	ldr	r2, [r2, #0]
 8003cf8:	fab2 f282 	clz	r2, r2
 8003cfc:	b2d2      	uxtb	r2, r2
 8003cfe:	f042 0220 	orr.w	r2, r2, #32
 8003d02:	b2d2      	uxtb	r2, r2
 8003d04:	f002 021f 	and.w	r2, r2, #31
 8003d08:	2101      	movs	r1, #1
 8003d0a:	fa01 f202 	lsl.w	r2, r1, r2
 8003d0e:	4013      	ands	r3, r2
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d19e      	bne.n	8003c52 <HAL_RCC_OscConfig+0xcfe>
 8003d14:	e01e      	b.n	8003d54 <HAL_RCC_OscConfig+0xe00>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003d16:	1d3b      	adds	r3, r7, #4
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	69db      	ldr	r3, [r3, #28]
 8003d1c:	2b01      	cmp	r3, #1
 8003d1e:	d101      	bne.n	8003d24 <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 8003d20:	2301      	movs	r3, #1
 8003d22:	e018      	b.n	8003d56 <HAL_RCC_OscConfig+0xe02>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003d24:	4b0e      	ldr	r3, [pc, #56]	; (8003d60 <HAL_RCC_OscConfig+0xe0c>)
 8003d26:	685b      	ldr	r3, [r3, #4]
 8003d28:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003d2c:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8003d30:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003d34:	1d3b      	adds	r3, r7, #4
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	6a1b      	ldr	r3, [r3, #32]
 8003d3a:	429a      	cmp	r2, r3
 8003d3c:	d108      	bne.n	8003d50 <HAL_RCC_OscConfig+0xdfc>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8003d3e:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8003d42:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003d46:	1d3b      	adds	r3, r7, #4
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003d4c:	429a      	cmp	r2, r3
 8003d4e:	d001      	beq.n	8003d54 <HAL_RCC_OscConfig+0xe00>
#endif
        {
          return HAL_ERROR;
 8003d50:	2301      	movs	r3, #1
 8003d52:	e000      	b.n	8003d56 <HAL_RCC_OscConfig+0xe02>
        }
      }
    }
  }

  return HAL_OK;
 8003d54:	2300      	movs	r3, #0
}
 8003d56:	4618      	mov	r0, r3
 8003d58:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8003d5c:	46bd      	mov	sp, r7
 8003d5e:	bd80      	pop	{r7, pc}
 8003d60:	40021000 	.word	0x40021000

08003d64 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003d64:	b580      	push	{r7, lr}
 8003d66:	b09e      	sub	sp, #120	; 0x78
 8003d68:	af00      	add	r7, sp, #0
 8003d6a:	6078      	str	r0, [r7, #4]
 8003d6c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8003d6e:	2300      	movs	r3, #0
 8003d70:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d101      	bne.n	8003d7c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003d78:	2301      	movs	r3, #1
 8003d7a:	e162      	b.n	8004042 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003d7c:	4b90      	ldr	r3, [pc, #576]	; (8003fc0 <HAL_RCC_ClockConfig+0x25c>)
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	f003 0307 	and.w	r3, r3, #7
 8003d84:	683a      	ldr	r2, [r7, #0]
 8003d86:	429a      	cmp	r2, r3
 8003d88:	d910      	bls.n	8003dac <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d8a:	4b8d      	ldr	r3, [pc, #564]	; (8003fc0 <HAL_RCC_ClockConfig+0x25c>)
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	f023 0207 	bic.w	r2, r3, #7
 8003d92:	498b      	ldr	r1, [pc, #556]	; (8003fc0 <HAL_RCC_ClockConfig+0x25c>)
 8003d94:	683b      	ldr	r3, [r7, #0]
 8003d96:	4313      	orrs	r3, r2
 8003d98:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d9a:	4b89      	ldr	r3, [pc, #548]	; (8003fc0 <HAL_RCC_ClockConfig+0x25c>)
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	f003 0307 	and.w	r3, r3, #7
 8003da2:	683a      	ldr	r2, [r7, #0]
 8003da4:	429a      	cmp	r2, r3
 8003da6:	d001      	beq.n	8003dac <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003da8:	2301      	movs	r3, #1
 8003daa:	e14a      	b.n	8004042 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	f003 0302 	and.w	r3, r3, #2
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d008      	beq.n	8003dca <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003db8:	4b82      	ldr	r3, [pc, #520]	; (8003fc4 <HAL_RCC_ClockConfig+0x260>)
 8003dba:	685b      	ldr	r3, [r3, #4]
 8003dbc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	689b      	ldr	r3, [r3, #8]
 8003dc4:	497f      	ldr	r1, [pc, #508]	; (8003fc4 <HAL_RCC_ClockConfig+0x260>)
 8003dc6:	4313      	orrs	r3, r2
 8003dc8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	f003 0301 	and.w	r3, r3, #1
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	f000 80dc 	beq.w	8003f90 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	685b      	ldr	r3, [r3, #4]
 8003ddc:	2b01      	cmp	r3, #1
 8003dde:	d13c      	bne.n	8003e5a <HAL_RCC_ClockConfig+0xf6>
 8003de0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003de4:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003de6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003de8:	fa93 f3a3 	rbit	r3, r3
 8003dec:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8003dee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003df0:	fab3 f383 	clz	r3, r3
 8003df4:	b2db      	uxtb	r3, r3
 8003df6:	095b      	lsrs	r3, r3, #5
 8003df8:	b2db      	uxtb	r3, r3
 8003dfa:	f043 0301 	orr.w	r3, r3, #1
 8003dfe:	b2db      	uxtb	r3, r3
 8003e00:	2b01      	cmp	r3, #1
 8003e02:	d102      	bne.n	8003e0a <HAL_RCC_ClockConfig+0xa6>
 8003e04:	4b6f      	ldr	r3, [pc, #444]	; (8003fc4 <HAL_RCC_ClockConfig+0x260>)
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	e00f      	b.n	8003e2a <HAL_RCC_ClockConfig+0xc6>
 8003e0a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003e0e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e10:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003e12:	fa93 f3a3 	rbit	r3, r3
 8003e16:	667b      	str	r3, [r7, #100]	; 0x64
 8003e18:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003e1c:	663b      	str	r3, [r7, #96]	; 0x60
 8003e1e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003e20:	fa93 f3a3 	rbit	r3, r3
 8003e24:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003e26:	4b67      	ldr	r3, [pc, #412]	; (8003fc4 <HAL_RCC_ClockConfig+0x260>)
 8003e28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e2a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003e2e:	65ba      	str	r2, [r7, #88]	; 0x58
 8003e30:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003e32:	fa92 f2a2 	rbit	r2, r2
 8003e36:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8003e38:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003e3a:	fab2 f282 	clz	r2, r2
 8003e3e:	b2d2      	uxtb	r2, r2
 8003e40:	f042 0220 	orr.w	r2, r2, #32
 8003e44:	b2d2      	uxtb	r2, r2
 8003e46:	f002 021f 	and.w	r2, r2, #31
 8003e4a:	2101      	movs	r1, #1
 8003e4c:	fa01 f202 	lsl.w	r2, r1, r2
 8003e50:	4013      	ands	r3, r2
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d17b      	bne.n	8003f4e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003e56:	2301      	movs	r3, #1
 8003e58:	e0f3      	b.n	8004042 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	685b      	ldr	r3, [r3, #4]
 8003e5e:	2b02      	cmp	r3, #2
 8003e60:	d13c      	bne.n	8003edc <HAL_RCC_ClockConfig+0x178>
 8003e62:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003e66:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e68:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003e6a:	fa93 f3a3 	rbit	r3, r3
 8003e6e:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8003e70:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003e72:	fab3 f383 	clz	r3, r3
 8003e76:	b2db      	uxtb	r3, r3
 8003e78:	095b      	lsrs	r3, r3, #5
 8003e7a:	b2db      	uxtb	r3, r3
 8003e7c:	f043 0301 	orr.w	r3, r3, #1
 8003e80:	b2db      	uxtb	r3, r3
 8003e82:	2b01      	cmp	r3, #1
 8003e84:	d102      	bne.n	8003e8c <HAL_RCC_ClockConfig+0x128>
 8003e86:	4b4f      	ldr	r3, [pc, #316]	; (8003fc4 <HAL_RCC_ClockConfig+0x260>)
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	e00f      	b.n	8003eac <HAL_RCC_ClockConfig+0x148>
 8003e8c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003e90:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e92:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003e94:	fa93 f3a3 	rbit	r3, r3
 8003e98:	647b      	str	r3, [r7, #68]	; 0x44
 8003e9a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003e9e:	643b      	str	r3, [r7, #64]	; 0x40
 8003ea0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003ea2:	fa93 f3a3 	rbit	r3, r3
 8003ea6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003ea8:	4b46      	ldr	r3, [pc, #280]	; (8003fc4 <HAL_RCC_ClockConfig+0x260>)
 8003eaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eac:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003eb0:	63ba      	str	r2, [r7, #56]	; 0x38
 8003eb2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003eb4:	fa92 f2a2 	rbit	r2, r2
 8003eb8:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8003eba:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003ebc:	fab2 f282 	clz	r2, r2
 8003ec0:	b2d2      	uxtb	r2, r2
 8003ec2:	f042 0220 	orr.w	r2, r2, #32
 8003ec6:	b2d2      	uxtb	r2, r2
 8003ec8:	f002 021f 	and.w	r2, r2, #31
 8003ecc:	2101      	movs	r1, #1
 8003ece:	fa01 f202 	lsl.w	r2, r1, r2
 8003ed2:	4013      	ands	r3, r2
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d13a      	bne.n	8003f4e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003ed8:	2301      	movs	r3, #1
 8003eda:	e0b2      	b.n	8004042 <HAL_RCC_ClockConfig+0x2de>
 8003edc:	2302      	movs	r3, #2
 8003ede:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ee0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ee2:	fa93 f3a3 	rbit	r3, r3
 8003ee6:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003ee8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003eea:	fab3 f383 	clz	r3, r3
 8003eee:	b2db      	uxtb	r3, r3
 8003ef0:	095b      	lsrs	r3, r3, #5
 8003ef2:	b2db      	uxtb	r3, r3
 8003ef4:	f043 0301 	orr.w	r3, r3, #1
 8003ef8:	b2db      	uxtb	r3, r3
 8003efa:	2b01      	cmp	r3, #1
 8003efc:	d102      	bne.n	8003f04 <HAL_RCC_ClockConfig+0x1a0>
 8003efe:	4b31      	ldr	r3, [pc, #196]	; (8003fc4 <HAL_RCC_ClockConfig+0x260>)
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	e00d      	b.n	8003f20 <HAL_RCC_ClockConfig+0x1bc>
 8003f04:	2302      	movs	r3, #2
 8003f06:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f0a:	fa93 f3a3 	rbit	r3, r3
 8003f0e:	627b      	str	r3, [r7, #36]	; 0x24
 8003f10:	2302      	movs	r3, #2
 8003f12:	623b      	str	r3, [r7, #32]
 8003f14:	6a3b      	ldr	r3, [r7, #32]
 8003f16:	fa93 f3a3 	rbit	r3, r3
 8003f1a:	61fb      	str	r3, [r7, #28]
 8003f1c:	4b29      	ldr	r3, [pc, #164]	; (8003fc4 <HAL_RCC_ClockConfig+0x260>)
 8003f1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f20:	2202      	movs	r2, #2
 8003f22:	61ba      	str	r2, [r7, #24]
 8003f24:	69ba      	ldr	r2, [r7, #24]
 8003f26:	fa92 f2a2 	rbit	r2, r2
 8003f2a:	617a      	str	r2, [r7, #20]
  return result;
 8003f2c:	697a      	ldr	r2, [r7, #20]
 8003f2e:	fab2 f282 	clz	r2, r2
 8003f32:	b2d2      	uxtb	r2, r2
 8003f34:	f042 0220 	orr.w	r2, r2, #32
 8003f38:	b2d2      	uxtb	r2, r2
 8003f3a:	f002 021f 	and.w	r2, r2, #31
 8003f3e:	2101      	movs	r1, #1
 8003f40:	fa01 f202 	lsl.w	r2, r1, r2
 8003f44:	4013      	ands	r3, r2
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d101      	bne.n	8003f4e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003f4a:	2301      	movs	r3, #1
 8003f4c:	e079      	b.n	8004042 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003f4e:	4b1d      	ldr	r3, [pc, #116]	; (8003fc4 <HAL_RCC_ClockConfig+0x260>)
 8003f50:	685b      	ldr	r3, [r3, #4]
 8003f52:	f023 0203 	bic.w	r2, r3, #3
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	685b      	ldr	r3, [r3, #4]
 8003f5a:	491a      	ldr	r1, [pc, #104]	; (8003fc4 <HAL_RCC_ClockConfig+0x260>)
 8003f5c:	4313      	orrs	r3, r2
 8003f5e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003f60:	f7fc fcae 	bl	80008c0 <HAL_GetTick>
 8003f64:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f66:	e00a      	b.n	8003f7e <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003f68:	f7fc fcaa 	bl	80008c0 <HAL_GetTick>
 8003f6c:	4602      	mov	r2, r0
 8003f6e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003f70:	1ad3      	subs	r3, r2, r3
 8003f72:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f76:	4293      	cmp	r3, r2
 8003f78:	d901      	bls.n	8003f7e <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8003f7a:	2303      	movs	r3, #3
 8003f7c:	e061      	b.n	8004042 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f7e:	4b11      	ldr	r3, [pc, #68]	; (8003fc4 <HAL_RCC_ClockConfig+0x260>)
 8003f80:	685b      	ldr	r3, [r3, #4]
 8003f82:	f003 020c 	and.w	r2, r3, #12
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	685b      	ldr	r3, [r3, #4]
 8003f8a:	009b      	lsls	r3, r3, #2
 8003f8c:	429a      	cmp	r2, r3
 8003f8e:	d1eb      	bne.n	8003f68 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003f90:	4b0b      	ldr	r3, [pc, #44]	; (8003fc0 <HAL_RCC_ClockConfig+0x25c>)
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	f003 0307 	and.w	r3, r3, #7
 8003f98:	683a      	ldr	r2, [r7, #0]
 8003f9a:	429a      	cmp	r2, r3
 8003f9c:	d214      	bcs.n	8003fc8 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f9e:	4b08      	ldr	r3, [pc, #32]	; (8003fc0 <HAL_RCC_ClockConfig+0x25c>)
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	f023 0207 	bic.w	r2, r3, #7
 8003fa6:	4906      	ldr	r1, [pc, #24]	; (8003fc0 <HAL_RCC_ClockConfig+0x25c>)
 8003fa8:	683b      	ldr	r3, [r7, #0]
 8003faa:	4313      	orrs	r3, r2
 8003fac:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003fae:	4b04      	ldr	r3, [pc, #16]	; (8003fc0 <HAL_RCC_ClockConfig+0x25c>)
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	f003 0307 	and.w	r3, r3, #7
 8003fb6:	683a      	ldr	r2, [r7, #0]
 8003fb8:	429a      	cmp	r2, r3
 8003fba:	d005      	beq.n	8003fc8 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8003fbc:	2301      	movs	r3, #1
 8003fbe:	e040      	b.n	8004042 <HAL_RCC_ClockConfig+0x2de>
 8003fc0:	40022000 	.word	0x40022000
 8003fc4:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	f003 0304 	and.w	r3, r3, #4
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d008      	beq.n	8003fe6 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003fd4:	4b1d      	ldr	r3, [pc, #116]	; (800404c <HAL_RCC_ClockConfig+0x2e8>)
 8003fd6:	685b      	ldr	r3, [r3, #4]
 8003fd8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	68db      	ldr	r3, [r3, #12]
 8003fe0:	491a      	ldr	r1, [pc, #104]	; (800404c <HAL_RCC_ClockConfig+0x2e8>)
 8003fe2:	4313      	orrs	r3, r2
 8003fe4:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	f003 0308 	and.w	r3, r3, #8
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d009      	beq.n	8004006 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003ff2:	4b16      	ldr	r3, [pc, #88]	; (800404c <HAL_RCC_ClockConfig+0x2e8>)
 8003ff4:	685b      	ldr	r3, [r3, #4]
 8003ff6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	691b      	ldr	r3, [r3, #16]
 8003ffe:	00db      	lsls	r3, r3, #3
 8004000:	4912      	ldr	r1, [pc, #72]	; (800404c <HAL_RCC_ClockConfig+0x2e8>)
 8004002:	4313      	orrs	r3, r2
 8004004:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8004006:	f000 f829 	bl	800405c <HAL_RCC_GetSysClockFreq>
 800400a:	4601      	mov	r1, r0
 800400c:	4b0f      	ldr	r3, [pc, #60]	; (800404c <HAL_RCC_ClockConfig+0x2e8>)
 800400e:	685b      	ldr	r3, [r3, #4]
 8004010:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004014:	22f0      	movs	r2, #240	; 0xf0
 8004016:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004018:	693a      	ldr	r2, [r7, #16]
 800401a:	fa92 f2a2 	rbit	r2, r2
 800401e:	60fa      	str	r2, [r7, #12]
  return result;
 8004020:	68fa      	ldr	r2, [r7, #12]
 8004022:	fab2 f282 	clz	r2, r2
 8004026:	b2d2      	uxtb	r2, r2
 8004028:	40d3      	lsrs	r3, r2
 800402a:	4a09      	ldr	r2, [pc, #36]	; (8004050 <HAL_RCC_ClockConfig+0x2ec>)
 800402c:	5cd3      	ldrb	r3, [r2, r3]
 800402e:	fa21 f303 	lsr.w	r3, r1, r3
 8004032:	4a08      	ldr	r2, [pc, #32]	; (8004054 <HAL_RCC_ClockConfig+0x2f0>)
 8004034:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8004036:	4b08      	ldr	r3, [pc, #32]	; (8004058 <HAL_RCC_ClockConfig+0x2f4>)
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	4618      	mov	r0, r3
 800403c:	f7fc fbfc 	bl	8000838 <HAL_InitTick>
  
  return HAL_OK;
 8004040:	2300      	movs	r3, #0
}
 8004042:	4618      	mov	r0, r3
 8004044:	3778      	adds	r7, #120	; 0x78
 8004046:	46bd      	mov	sp, r7
 8004048:	bd80      	pop	{r7, pc}
 800404a:	bf00      	nop
 800404c:	40021000 	.word	0x40021000
 8004050:	08008824 	.word	0x08008824
 8004054:	20000000 	.word	0x20000000
 8004058:	20000004 	.word	0x20000004

0800405c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800405c:	b480      	push	{r7}
 800405e:	b08b      	sub	sp, #44	; 0x2c
 8004060:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004062:	2300      	movs	r3, #0
 8004064:	61fb      	str	r3, [r7, #28]
 8004066:	2300      	movs	r3, #0
 8004068:	61bb      	str	r3, [r7, #24]
 800406a:	2300      	movs	r3, #0
 800406c:	627b      	str	r3, [r7, #36]	; 0x24
 800406e:	2300      	movs	r3, #0
 8004070:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8004072:	2300      	movs	r3, #0
 8004074:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8004076:	4b29      	ldr	r3, [pc, #164]	; (800411c <HAL_RCC_GetSysClockFreq+0xc0>)
 8004078:	685b      	ldr	r3, [r3, #4]
 800407a:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800407c:	69fb      	ldr	r3, [r7, #28]
 800407e:	f003 030c 	and.w	r3, r3, #12
 8004082:	2b04      	cmp	r3, #4
 8004084:	d002      	beq.n	800408c <HAL_RCC_GetSysClockFreq+0x30>
 8004086:	2b08      	cmp	r3, #8
 8004088:	d003      	beq.n	8004092 <HAL_RCC_GetSysClockFreq+0x36>
 800408a:	e03c      	b.n	8004106 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800408c:	4b24      	ldr	r3, [pc, #144]	; (8004120 <HAL_RCC_GetSysClockFreq+0xc4>)
 800408e:	623b      	str	r3, [r7, #32]
      break;
 8004090:	e03c      	b.n	800410c <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8004092:	69fb      	ldr	r3, [r7, #28]
 8004094:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8004098:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 800409c:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800409e:	68ba      	ldr	r2, [r7, #8]
 80040a0:	fa92 f2a2 	rbit	r2, r2
 80040a4:	607a      	str	r2, [r7, #4]
  return result;
 80040a6:	687a      	ldr	r2, [r7, #4]
 80040a8:	fab2 f282 	clz	r2, r2
 80040ac:	b2d2      	uxtb	r2, r2
 80040ae:	40d3      	lsrs	r3, r2
 80040b0:	4a1c      	ldr	r2, [pc, #112]	; (8004124 <HAL_RCC_GetSysClockFreq+0xc8>)
 80040b2:	5cd3      	ldrb	r3, [r2, r3]
 80040b4:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80040b6:	4b19      	ldr	r3, [pc, #100]	; (800411c <HAL_RCC_GetSysClockFreq+0xc0>)
 80040b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040ba:	f003 030f 	and.w	r3, r3, #15
 80040be:	220f      	movs	r2, #15
 80040c0:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040c2:	693a      	ldr	r2, [r7, #16]
 80040c4:	fa92 f2a2 	rbit	r2, r2
 80040c8:	60fa      	str	r2, [r7, #12]
  return result;
 80040ca:	68fa      	ldr	r2, [r7, #12]
 80040cc:	fab2 f282 	clz	r2, r2
 80040d0:	b2d2      	uxtb	r2, r2
 80040d2:	40d3      	lsrs	r3, r2
 80040d4:	4a14      	ldr	r2, [pc, #80]	; (8004128 <HAL_RCC_GetSysClockFreq+0xcc>)
 80040d6:	5cd3      	ldrb	r3, [r2, r3]
 80040d8:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 80040da:	69fb      	ldr	r3, [r7, #28]
 80040dc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d008      	beq.n	80040f6 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80040e4:	4a0e      	ldr	r2, [pc, #56]	; (8004120 <HAL_RCC_GetSysClockFreq+0xc4>)
 80040e6:	69bb      	ldr	r3, [r7, #24]
 80040e8:	fbb2 f2f3 	udiv	r2, r2, r3
 80040ec:	697b      	ldr	r3, [r7, #20]
 80040ee:	fb02 f303 	mul.w	r3, r2, r3
 80040f2:	627b      	str	r3, [r7, #36]	; 0x24
 80040f4:	e004      	b.n	8004100 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80040f6:	697b      	ldr	r3, [r7, #20]
 80040f8:	4a0c      	ldr	r2, [pc, #48]	; (800412c <HAL_RCC_GetSysClockFreq+0xd0>)
 80040fa:	fb02 f303 	mul.w	r3, r2, r3
 80040fe:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8004100:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004102:	623b      	str	r3, [r7, #32]
      break;
 8004104:	e002      	b.n	800410c <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004106:	4b06      	ldr	r3, [pc, #24]	; (8004120 <HAL_RCC_GetSysClockFreq+0xc4>)
 8004108:	623b      	str	r3, [r7, #32]
      break;
 800410a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800410c:	6a3b      	ldr	r3, [r7, #32]
}
 800410e:	4618      	mov	r0, r3
 8004110:	372c      	adds	r7, #44	; 0x2c
 8004112:	46bd      	mov	sp, r7
 8004114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004118:	4770      	bx	lr
 800411a:	bf00      	nop
 800411c:	40021000 	.word	0x40021000
 8004120:	007a1200 	.word	0x007a1200
 8004124:	08008834 	.word	0x08008834
 8004128:	08008844 	.word	0x08008844
 800412c:	003d0900 	.word	0x003d0900

08004130 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004130:	b580      	push	{r7, lr}
 8004132:	b092      	sub	sp, #72	; 0x48
 8004134:	af00      	add	r7, sp, #0
 8004136:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004138:	2300      	movs	r3, #0
 800413a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 800413c:	2300      	movs	r3, #0
 800413e:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8004140:	2300      	movs	r3, #0
 8004142:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800414e:	2b00      	cmp	r3, #0
 8004150:	f000 80d4 	beq.w	80042fc <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004154:	4b4e      	ldr	r3, [pc, #312]	; (8004290 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004156:	69db      	ldr	r3, [r3, #28]
 8004158:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800415c:	2b00      	cmp	r3, #0
 800415e:	d10e      	bne.n	800417e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004160:	4b4b      	ldr	r3, [pc, #300]	; (8004290 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004162:	69db      	ldr	r3, [r3, #28]
 8004164:	4a4a      	ldr	r2, [pc, #296]	; (8004290 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004166:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800416a:	61d3      	str	r3, [r2, #28]
 800416c:	4b48      	ldr	r3, [pc, #288]	; (8004290 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800416e:	69db      	ldr	r3, [r3, #28]
 8004170:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004174:	60bb      	str	r3, [r7, #8]
 8004176:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004178:	2301      	movs	r3, #1
 800417a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800417e:	4b45      	ldr	r3, [pc, #276]	; (8004294 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004186:	2b00      	cmp	r3, #0
 8004188:	d118      	bne.n	80041bc <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800418a:	4b42      	ldr	r3, [pc, #264]	; (8004294 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	4a41      	ldr	r2, [pc, #260]	; (8004294 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004190:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004194:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004196:	f7fc fb93 	bl	80008c0 <HAL_GetTick>
 800419a:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800419c:	e008      	b.n	80041b0 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800419e:	f7fc fb8f 	bl	80008c0 <HAL_GetTick>
 80041a2:	4602      	mov	r2, r0
 80041a4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80041a6:	1ad3      	subs	r3, r2, r3
 80041a8:	2b64      	cmp	r3, #100	; 0x64
 80041aa:	d901      	bls.n	80041b0 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80041ac:	2303      	movs	r3, #3
 80041ae:	e169      	b.n	8004484 <HAL_RCCEx_PeriphCLKConfig+0x354>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80041b0:	4b38      	ldr	r3, [pc, #224]	; (8004294 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d0f0      	beq.n	800419e <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80041bc:	4b34      	ldr	r3, [pc, #208]	; (8004290 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80041be:	6a1b      	ldr	r3, [r3, #32]
 80041c0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80041c4:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80041c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	f000 8084 	beq.w	80042d6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	685b      	ldr	r3, [r3, #4]
 80041d2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80041d6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80041d8:	429a      	cmp	r2, r3
 80041da:	d07c      	beq.n	80042d6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80041dc:	4b2c      	ldr	r3, [pc, #176]	; (8004290 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80041de:	6a1b      	ldr	r3, [r3, #32]
 80041e0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80041e4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80041e6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80041ea:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041ee:	fa93 f3a3 	rbit	r3, r3
 80041f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80041f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80041f6:	fab3 f383 	clz	r3, r3
 80041fa:	b2db      	uxtb	r3, r3
 80041fc:	461a      	mov	r2, r3
 80041fe:	4b26      	ldr	r3, [pc, #152]	; (8004298 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004200:	4413      	add	r3, r2
 8004202:	009b      	lsls	r3, r3, #2
 8004204:	461a      	mov	r2, r3
 8004206:	2301      	movs	r3, #1
 8004208:	6013      	str	r3, [r2, #0]
 800420a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800420e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004210:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004212:	fa93 f3a3 	rbit	r3, r3
 8004216:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8004218:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 800421a:	fab3 f383 	clz	r3, r3
 800421e:	b2db      	uxtb	r3, r3
 8004220:	461a      	mov	r2, r3
 8004222:	4b1d      	ldr	r3, [pc, #116]	; (8004298 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004224:	4413      	add	r3, r2
 8004226:	009b      	lsls	r3, r3, #2
 8004228:	461a      	mov	r2, r3
 800422a:	2300      	movs	r3, #0
 800422c:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800422e:	4a18      	ldr	r2, [pc, #96]	; (8004290 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004230:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004232:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004234:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004236:	f003 0301 	and.w	r3, r3, #1
 800423a:	2b00      	cmp	r3, #0
 800423c:	d04b      	beq.n	80042d6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800423e:	f7fc fb3f 	bl	80008c0 <HAL_GetTick>
 8004242:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004244:	e00a      	b.n	800425c <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004246:	f7fc fb3b 	bl	80008c0 <HAL_GetTick>
 800424a:	4602      	mov	r2, r0
 800424c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800424e:	1ad3      	subs	r3, r2, r3
 8004250:	f241 3288 	movw	r2, #5000	; 0x1388
 8004254:	4293      	cmp	r3, r2
 8004256:	d901      	bls.n	800425c <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8004258:	2303      	movs	r3, #3
 800425a:	e113      	b.n	8004484 <HAL_RCCEx_PeriphCLKConfig+0x354>
 800425c:	2302      	movs	r3, #2
 800425e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004260:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004262:	fa93 f3a3 	rbit	r3, r3
 8004266:	627b      	str	r3, [r7, #36]	; 0x24
 8004268:	2302      	movs	r3, #2
 800426a:	623b      	str	r3, [r7, #32]
 800426c:	6a3b      	ldr	r3, [r7, #32]
 800426e:	fa93 f3a3 	rbit	r3, r3
 8004272:	61fb      	str	r3, [r7, #28]
  return result;
 8004274:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004276:	fab3 f383 	clz	r3, r3
 800427a:	b2db      	uxtb	r3, r3
 800427c:	095b      	lsrs	r3, r3, #5
 800427e:	b2db      	uxtb	r3, r3
 8004280:	f043 0302 	orr.w	r3, r3, #2
 8004284:	b2db      	uxtb	r3, r3
 8004286:	2b02      	cmp	r3, #2
 8004288:	d108      	bne.n	800429c <HAL_RCCEx_PeriphCLKConfig+0x16c>
 800428a:	4b01      	ldr	r3, [pc, #4]	; (8004290 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800428c:	6a1b      	ldr	r3, [r3, #32]
 800428e:	e00d      	b.n	80042ac <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8004290:	40021000 	.word	0x40021000
 8004294:	40007000 	.word	0x40007000
 8004298:	10908100 	.word	0x10908100
 800429c:	2302      	movs	r3, #2
 800429e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042a0:	69bb      	ldr	r3, [r7, #24]
 80042a2:	fa93 f3a3 	rbit	r3, r3
 80042a6:	617b      	str	r3, [r7, #20]
 80042a8:	4b78      	ldr	r3, [pc, #480]	; (800448c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80042aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042ac:	2202      	movs	r2, #2
 80042ae:	613a      	str	r2, [r7, #16]
 80042b0:	693a      	ldr	r2, [r7, #16]
 80042b2:	fa92 f2a2 	rbit	r2, r2
 80042b6:	60fa      	str	r2, [r7, #12]
  return result;
 80042b8:	68fa      	ldr	r2, [r7, #12]
 80042ba:	fab2 f282 	clz	r2, r2
 80042be:	b2d2      	uxtb	r2, r2
 80042c0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80042c4:	b2d2      	uxtb	r2, r2
 80042c6:	f002 021f 	and.w	r2, r2, #31
 80042ca:	2101      	movs	r1, #1
 80042cc:	fa01 f202 	lsl.w	r2, r1, r2
 80042d0:	4013      	ands	r3, r2
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d0b7      	beq.n	8004246 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80042d6:	4b6d      	ldr	r3, [pc, #436]	; (800448c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80042d8:	6a1b      	ldr	r3, [r3, #32]
 80042da:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	685b      	ldr	r3, [r3, #4]
 80042e2:	496a      	ldr	r1, [pc, #424]	; (800448c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80042e4:	4313      	orrs	r3, r2
 80042e6:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80042e8:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80042ec:	2b01      	cmp	r3, #1
 80042ee:	d105      	bne.n	80042fc <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80042f0:	4b66      	ldr	r3, [pc, #408]	; (800448c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80042f2:	69db      	ldr	r3, [r3, #28]
 80042f4:	4a65      	ldr	r2, [pc, #404]	; (800448c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80042f6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80042fa:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	f003 0301 	and.w	r3, r3, #1
 8004304:	2b00      	cmp	r3, #0
 8004306:	d008      	beq.n	800431a <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004308:	4b60      	ldr	r3, [pc, #384]	; (800448c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800430a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800430c:	f023 0203 	bic.w	r2, r3, #3
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	689b      	ldr	r3, [r3, #8]
 8004314:	495d      	ldr	r1, [pc, #372]	; (800448c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004316:	4313      	orrs	r3, r2
 8004318:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	f003 0302 	and.w	r3, r3, #2
 8004322:	2b00      	cmp	r3, #0
 8004324:	d008      	beq.n	8004338 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004326:	4b59      	ldr	r3, [pc, #356]	; (800448c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004328:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800432a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	68db      	ldr	r3, [r3, #12]
 8004332:	4956      	ldr	r1, [pc, #344]	; (800448c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004334:	4313      	orrs	r3, r2
 8004336:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	f003 0304 	and.w	r3, r3, #4
 8004340:	2b00      	cmp	r3, #0
 8004342:	d008      	beq.n	8004356 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004344:	4b51      	ldr	r3, [pc, #324]	; (800448c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004346:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004348:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	691b      	ldr	r3, [r3, #16]
 8004350:	494e      	ldr	r1, [pc, #312]	; (800448c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004352:	4313      	orrs	r3, r2
 8004354:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	f003 0320 	and.w	r3, r3, #32
 800435e:	2b00      	cmp	r3, #0
 8004360:	d008      	beq.n	8004374 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004362:	4b4a      	ldr	r3, [pc, #296]	; (800448c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004364:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004366:	f023 0210 	bic.w	r2, r3, #16
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	69db      	ldr	r3, [r3, #28]
 800436e:	4947      	ldr	r1, [pc, #284]	; (800448c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004370:	4313      	orrs	r3, r2
 8004372:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800437c:	2b00      	cmp	r3, #0
 800437e:	d008      	beq.n	8004392 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8004380:	4b42      	ldr	r3, [pc, #264]	; (800448c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004382:	685b      	ldr	r3, [r3, #4]
 8004384:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800438c:	493f      	ldr	r1, [pc, #252]	; (800448c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800438e:	4313      	orrs	r3, r2
 8004390:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800439a:	2b00      	cmp	r3, #0
 800439c:	d008      	beq.n	80043b0 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800439e:	4b3b      	ldr	r3, [pc, #236]	; (800448c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80043a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043a2:	f023 0220 	bic.w	r2, r3, #32
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	6a1b      	ldr	r3, [r3, #32]
 80043aa:	4938      	ldr	r1, [pc, #224]	; (800448c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80043ac:	4313      	orrs	r3, r2
 80043ae:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	f003 0308 	and.w	r3, r3, #8
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d008      	beq.n	80043ce <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80043bc:	4b33      	ldr	r3, [pc, #204]	; (800448c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80043be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043c0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	695b      	ldr	r3, [r3, #20]
 80043c8:	4930      	ldr	r1, [pc, #192]	; (800448c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80043ca:	4313      	orrs	r3, r2
 80043cc:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	f003 0310 	and.w	r3, r3, #16
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d008      	beq.n	80043ec <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80043da:	4b2c      	ldr	r3, [pc, #176]	; (800448c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80043dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043de:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	699b      	ldr	r3, [r3, #24]
 80043e6:	4929      	ldr	r1, [pc, #164]	; (800448c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80043e8:	4313      	orrs	r3, r2
 80043ea:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d008      	beq.n	800440a <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80043f8:	4b24      	ldr	r3, [pc, #144]	; (800448c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80043fa:	685b      	ldr	r3, [r3, #4]
 80043fc:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004404:	4921      	ldr	r1, [pc, #132]	; (800448c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004406:	4313      	orrs	r3, r2
 8004408:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004412:	2b00      	cmp	r3, #0
 8004414:	d008      	beq.n	8004428 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8004416:	4b1d      	ldr	r3, [pc, #116]	; (800448c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004418:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800441a:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004422:	491a      	ldr	r1, [pc, #104]	; (800448c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004424:	4313      	orrs	r3, r2
 8004426:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004430:	2b00      	cmp	r3, #0
 8004432:	d008      	beq.n	8004446 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8004434:	4b15      	ldr	r3, [pc, #84]	; (800448c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004436:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004438:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004440:	4912      	ldr	r1, [pc, #72]	; (800448c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004442:	4313      	orrs	r3, r2
 8004444:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800444e:	2b00      	cmp	r3, #0
 8004450:	d008      	beq.n	8004464 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8004452:	4b0e      	ldr	r3, [pc, #56]	; (800448c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004454:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004456:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800445e:	490b      	ldr	r1, [pc, #44]	; (800448c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004460:	4313      	orrs	r3, r2
 8004462:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800446c:	2b00      	cmp	r3, #0
 800446e:	d008      	beq.n	8004482 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8004470:	4b06      	ldr	r3, [pc, #24]	; (800448c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004472:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004474:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800447c:	4903      	ldr	r1, [pc, #12]	; (800448c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800447e:	4313      	orrs	r3, r2
 8004480:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8004482:	2300      	movs	r3, #0
}
 8004484:	4618      	mov	r0, r3
 8004486:	3748      	adds	r7, #72	; 0x48
 8004488:	46bd      	mov	sp, r7
 800448a:	bd80      	pop	{r7, pc}
 800448c:	40021000 	.word	0x40021000

08004490 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004490:	b580      	push	{r7, lr}
 8004492:	b084      	sub	sp, #16
 8004494:	af00      	add	r7, sp, #0
 8004496:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	2b00      	cmp	r3, #0
 800449c:	d101      	bne.n	80044a2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800449e:	2301      	movs	r3, #1
 80044a0:	e09d      	b.n	80045de <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d108      	bne.n	80044bc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	685b      	ldr	r3, [r3, #4]
 80044ae:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80044b2:	d009      	beq.n	80044c8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	2200      	movs	r2, #0
 80044b8:	61da      	str	r2, [r3, #28]
 80044ba:	e005      	b.n	80044c8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	2200      	movs	r2, #0
 80044c0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	2200      	movs	r2, #0
 80044c6:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	2200      	movs	r2, #0
 80044cc:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80044d4:	b2db      	uxtb	r3, r3
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d106      	bne.n	80044e8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	2200      	movs	r2, #0
 80044de:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80044e2:	6878      	ldr	r0, [r7, #4]
 80044e4:	f7fc f8dc 	bl	80006a0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	2202      	movs	r2, #2
 80044ec:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	681a      	ldr	r2, [r3, #0]
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80044fe:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	68db      	ldr	r3, [r3, #12]
 8004504:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004508:	d902      	bls.n	8004510 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800450a:	2300      	movs	r3, #0
 800450c:	60fb      	str	r3, [r7, #12]
 800450e:	e002      	b.n	8004516 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004510:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004514:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	68db      	ldr	r3, [r3, #12]
 800451a:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800451e:	d007      	beq.n	8004530 <HAL_SPI_Init+0xa0>
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	68db      	ldr	r3, [r3, #12]
 8004524:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004528:	d002      	beq.n	8004530 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	2200      	movs	r2, #0
 800452e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	685b      	ldr	r3, [r3, #4]
 8004534:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	689b      	ldr	r3, [r3, #8]
 800453c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004540:	431a      	orrs	r2, r3
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	691b      	ldr	r3, [r3, #16]
 8004546:	f003 0302 	and.w	r3, r3, #2
 800454a:	431a      	orrs	r2, r3
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	695b      	ldr	r3, [r3, #20]
 8004550:	f003 0301 	and.w	r3, r3, #1
 8004554:	431a      	orrs	r2, r3
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	699b      	ldr	r3, [r3, #24]
 800455a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800455e:	431a      	orrs	r2, r3
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	69db      	ldr	r3, [r3, #28]
 8004564:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004568:	431a      	orrs	r2, r3
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	6a1b      	ldr	r3, [r3, #32]
 800456e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004572:	ea42 0103 	orr.w	r1, r2, r3
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800457a:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	430a      	orrs	r2, r1
 8004584:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	699b      	ldr	r3, [r3, #24]
 800458a:	0c1b      	lsrs	r3, r3, #16
 800458c:	f003 0204 	and.w	r2, r3, #4
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004594:	f003 0310 	and.w	r3, r3, #16
 8004598:	431a      	orrs	r2, r3
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800459e:	f003 0308 	and.w	r3, r3, #8
 80045a2:	431a      	orrs	r2, r3
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	68db      	ldr	r3, [r3, #12]
 80045a8:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80045ac:	ea42 0103 	orr.w	r1, r2, r3
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	430a      	orrs	r2, r1
 80045bc:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	69da      	ldr	r2, [r3, #28]
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80045cc:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	2200      	movs	r2, #0
 80045d2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	2201      	movs	r2, #1
 80045d8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80045dc:	2300      	movs	r3, #0
}
 80045de:	4618      	mov	r0, r3
 80045e0:	3710      	adds	r7, #16
 80045e2:	46bd      	mov	sp, r7
 80045e4:	bd80      	pop	{r7, pc}

080045e6 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 80045e6:	b480      	push	{r7}
 80045e8:	b085      	sub	sp, #20
 80045ea:	af00      	add	r7, sp, #0
 80045ec:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	2200      	movs	r2, #0
 80045f2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80045f6:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 80045fa:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	b29a      	uxth	r2, r3
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8004606:	2300      	movs	r3, #0
}
 8004608:	4618      	mov	r0, r3
 800460a:	3714      	adds	r7, #20
 800460c:	46bd      	mov	sp, r7
 800460e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004612:	4770      	bx	lr

08004614 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8004614:	b480      	push	{r7}
 8004616:	b085      	sub	sp, #20
 8004618:	af00      	add	r7, sp, #0
 800461a:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800461c:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8004620:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004628:	b29a      	uxth	r2, r3
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	b29b      	uxth	r3, r3
 800462e:	43db      	mvns	r3, r3
 8004630:	b29b      	uxth	r3, r3
 8004632:	4013      	ands	r3, r2
 8004634:	b29a      	uxth	r2, r3
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800463c:	2300      	movs	r3, #0
}
 800463e:	4618      	mov	r0, r3
 8004640:	3714      	adds	r7, #20
 8004642:	46bd      	mov	sp, r7
 8004644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004648:	4770      	bx	lr

0800464a <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800464a:	b084      	sub	sp, #16
 800464c:	b480      	push	{r7}
 800464e:	b083      	sub	sp, #12
 8004650:	af00      	add	r7, sp, #0
 8004652:	6078      	str	r0, [r7, #4]
 8004654:	f107 0014 	add.w	r0, r7, #20
 8004658:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	2201      	movs	r2, #1
 8004660:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	2200      	movs	r2, #0
 8004668:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	2200      	movs	r2, #0
 8004670:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	2200      	movs	r2, #0
 8004678:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 800467c:	2300      	movs	r3, #0
}
 800467e:	4618      	mov	r0, r3
 8004680:	370c      	adds	r7, #12
 8004682:	46bd      	mov	sp, r7
 8004684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004688:	b004      	add	sp, #16
 800468a:	4770      	bx	lr

0800468c <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800468c:	b480      	push	{r7}
 800468e:	b09b      	sub	sp, #108	; 0x6c
 8004690:	af00      	add	r7, sp, #0
 8004692:	6078      	str	r0, [r7, #4]
 8004694:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8004696:	2300      	movs	r3, #0
 8004698:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 800469c:	687a      	ldr	r2, [r7, #4]
 800469e:	683b      	ldr	r3, [r7, #0]
 80046a0:	781b      	ldrb	r3, [r3, #0]
 80046a2:	009b      	lsls	r3, r3, #2
 80046a4:	4413      	add	r3, r2
 80046a6:	881b      	ldrh	r3, [r3, #0]
 80046a8:	b29b      	uxth	r3, r3
 80046aa:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 80046ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80046b2:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 80046b6:	683b      	ldr	r3, [r7, #0]
 80046b8:	78db      	ldrb	r3, [r3, #3]
 80046ba:	2b03      	cmp	r3, #3
 80046bc:	d81f      	bhi.n	80046fe <USB_ActivateEndpoint+0x72>
 80046be:	a201      	add	r2, pc, #4	; (adr r2, 80046c4 <USB_ActivateEndpoint+0x38>)
 80046c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046c4:	080046d5 	.word	0x080046d5
 80046c8:	080046f1 	.word	0x080046f1
 80046cc:	08004707 	.word	0x08004707
 80046d0:	080046e3 	.word	0x080046e3
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 80046d4:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80046d8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80046dc:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 80046e0:	e012      	b.n	8004708 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 80046e2:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80046e6:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 80046ea:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 80046ee:	e00b      	b.n	8004708 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 80046f0:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80046f4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80046f8:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 80046fc:	e004      	b.n	8004708 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 80046fe:	2301      	movs	r3, #1
 8004700:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 8004704:	e000      	b.n	8004708 <USB_ActivateEndpoint+0x7c>
      break;
 8004706:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8004708:	687a      	ldr	r2, [r7, #4]
 800470a:	683b      	ldr	r3, [r7, #0]
 800470c:	781b      	ldrb	r3, [r3, #0]
 800470e:	009b      	lsls	r3, r3, #2
 8004710:	441a      	add	r2, r3
 8004712:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8004716:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800471a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800471e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004722:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004726:	b29b      	uxth	r3, r3
 8004728:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800472a:	687a      	ldr	r2, [r7, #4]
 800472c:	683b      	ldr	r3, [r7, #0]
 800472e:	781b      	ldrb	r3, [r3, #0]
 8004730:	009b      	lsls	r3, r3, #2
 8004732:	4413      	add	r3, r2
 8004734:	881b      	ldrh	r3, [r3, #0]
 8004736:	b29b      	uxth	r3, r3
 8004738:	b21b      	sxth	r3, r3
 800473a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800473e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004742:	b21a      	sxth	r2, r3
 8004744:	683b      	ldr	r3, [r7, #0]
 8004746:	781b      	ldrb	r3, [r3, #0]
 8004748:	b21b      	sxth	r3, r3
 800474a:	4313      	orrs	r3, r2
 800474c:	b21b      	sxth	r3, r3
 800474e:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8004752:	687a      	ldr	r2, [r7, #4]
 8004754:	683b      	ldr	r3, [r7, #0]
 8004756:	781b      	ldrb	r3, [r3, #0]
 8004758:	009b      	lsls	r3, r3, #2
 800475a:	441a      	add	r2, r3
 800475c:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8004760:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004764:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004768:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800476c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004770:	b29b      	uxth	r3, r3
 8004772:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8004774:	683b      	ldr	r3, [r7, #0]
 8004776:	7b1b      	ldrb	r3, [r3, #12]
 8004778:	2b00      	cmp	r3, #0
 800477a:	f040 8149 	bne.w	8004a10 <USB_ActivateEndpoint+0x384>
  {
    if (ep->is_in != 0U)
 800477e:	683b      	ldr	r3, [r7, #0]
 8004780:	785b      	ldrb	r3, [r3, #1]
 8004782:	2b00      	cmp	r3, #0
 8004784:	f000 8084 	beq.w	8004890 <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	617b      	str	r3, [r7, #20]
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004792:	b29b      	uxth	r3, r3
 8004794:	461a      	mov	r2, r3
 8004796:	697b      	ldr	r3, [r7, #20]
 8004798:	4413      	add	r3, r2
 800479a:	617b      	str	r3, [r7, #20]
 800479c:	683b      	ldr	r3, [r7, #0]
 800479e:	781b      	ldrb	r3, [r3, #0]
 80047a0:	011a      	lsls	r2, r3, #4
 80047a2:	697b      	ldr	r3, [r7, #20]
 80047a4:	4413      	add	r3, r2
 80047a6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80047aa:	613b      	str	r3, [r7, #16]
 80047ac:	683b      	ldr	r3, [r7, #0]
 80047ae:	88db      	ldrh	r3, [r3, #6]
 80047b0:	085b      	lsrs	r3, r3, #1
 80047b2:	b29b      	uxth	r3, r3
 80047b4:	005b      	lsls	r3, r3, #1
 80047b6:	b29a      	uxth	r2, r3
 80047b8:	693b      	ldr	r3, [r7, #16]
 80047ba:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80047bc:	687a      	ldr	r2, [r7, #4]
 80047be:	683b      	ldr	r3, [r7, #0]
 80047c0:	781b      	ldrb	r3, [r3, #0]
 80047c2:	009b      	lsls	r3, r3, #2
 80047c4:	4413      	add	r3, r2
 80047c6:	881b      	ldrh	r3, [r3, #0]
 80047c8:	81fb      	strh	r3, [r7, #14]
 80047ca:	89fb      	ldrh	r3, [r7, #14]
 80047cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d01b      	beq.n	800480c <USB_ActivateEndpoint+0x180>
 80047d4:	687a      	ldr	r2, [r7, #4]
 80047d6:	683b      	ldr	r3, [r7, #0]
 80047d8:	781b      	ldrb	r3, [r3, #0]
 80047da:	009b      	lsls	r3, r3, #2
 80047dc:	4413      	add	r3, r2
 80047de:	881b      	ldrh	r3, [r3, #0]
 80047e0:	b29b      	uxth	r3, r3
 80047e2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80047e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80047ea:	81bb      	strh	r3, [r7, #12]
 80047ec:	687a      	ldr	r2, [r7, #4]
 80047ee:	683b      	ldr	r3, [r7, #0]
 80047f0:	781b      	ldrb	r3, [r3, #0]
 80047f2:	009b      	lsls	r3, r3, #2
 80047f4:	441a      	add	r2, r3
 80047f6:	89bb      	ldrh	r3, [r7, #12]
 80047f8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80047fc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004800:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004804:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004808:	b29b      	uxth	r3, r3
 800480a:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800480c:	683b      	ldr	r3, [r7, #0]
 800480e:	78db      	ldrb	r3, [r3, #3]
 8004810:	2b01      	cmp	r3, #1
 8004812:	d020      	beq.n	8004856 <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004814:	687a      	ldr	r2, [r7, #4]
 8004816:	683b      	ldr	r3, [r7, #0]
 8004818:	781b      	ldrb	r3, [r3, #0]
 800481a:	009b      	lsls	r3, r3, #2
 800481c:	4413      	add	r3, r2
 800481e:	881b      	ldrh	r3, [r3, #0]
 8004820:	b29b      	uxth	r3, r3
 8004822:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004826:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800482a:	813b      	strh	r3, [r7, #8]
 800482c:	893b      	ldrh	r3, [r7, #8]
 800482e:	f083 0320 	eor.w	r3, r3, #32
 8004832:	813b      	strh	r3, [r7, #8]
 8004834:	687a      	ldr	r2, [r7, #4]
 8004836:	683b      	ldr	r3, [r7, #0]
 8004838:	781b      	ldrb	r3, [r3, #0]
 800483a:	009b      	lsls	r3, r3, #2
 800483c:	441a      	add	r2, r3
 800483e:	893b      	ldrh	r3, [r7, #8]
 8004840:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004844:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004848:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800484c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004850:	b29b      	uxth	r3, r3
 8004852:	8013      	strh	r3, [r2, #0]
 8004854:	e27f      	b.n	8004d56 <USB_ActivateEndpoint+0x6ca>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004856:	687a      	ldr	r2, [r7, #4]
 8004858:	683b      	ldr	r3, [r7, #0]
 800485a:	781b      	ldrb	r3, [r3, #0]
 800485c:	009b      	lsls	r3, r3, #2
 800485e:	4413      	add	r3, r2
 8004860:	881b      	ldrh	r3, [r3, #0]
 8004862:	b29b      	uxth	r3, r3
 8004864:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004868:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800486c:	817b      	strh	r3, [r7, #10]
 800486e:	687a      	ldr	r2, [r7, #4]
 8004870:	683b      	ldr	r3, [r7, #0]
 8004872:	781b      	ldrb	r3, [r3, #0]
 8004874:	009b      	lsls	r3, r3, #2
 8004876:	441a      	add	r2, r3
 8004878:	897b      	ldrh	r3, [r7, #10]
 800487a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800487e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004882:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004886:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800488a:	b29b      	uxth	r3, r3
 800488c:	8013      	strh	r3, [r2, #0]
 800488e:	e262      	b.n	8004d56 <USB_ActivateEndpoint+0x6ca>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800489a:	b29b      	uxth	r3, r3
 800489c:	461a      	mov	r2, r3
 800489e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048a0:	4413      	add	r3, r2
 80048a2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80048a4:	683b      	ldr	r3, [r7, #0]
 80048a6:	781b      	ldrb	r3, [r3, #0]
 80048a8:	011a      	lsls	r2, r3, #4
 80048aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048ac:	4413      	add	r3, r2
 80048ae:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 80048b2:	62bb      	str	r3, [r7, #40]	; 0x28
 80048b4:	683b      	ldr	r3, [r7, #0]
 80048b6:	88db      	ldrh	r3, [r3, #6]
 80048b8:	085b      	lsrs	r3, r3, #1
 80048ba:	b29b      	uxth	r3, r3
 80048bc:	005b      	lsls	r3, r3, #1
 80048be:	b29a      	uxth	r2, r3
 80048c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048c2:	801a      	strh	r2, [r3, #0]

      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	627b      	str	r3, [r7, #36]	; 0x24
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80048ce:	b29b      	uxth	r3, r3
 80048d0:	461a      	mov	r2, r3
 80048d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048d4:	4413      	add	r3, r2
 80048d6:	627b      	str	r3, [r7, #36]	; 0x24
 80048d8:	683b      	ldr	r3, [r7, #0]
 80048da:	781b      	ldrb	r3, [r3, #0]
 80048dc:	011a      	lsls	r2, r3, #4
 80048de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048e0:	4413      	add	r3, r2
 80048e2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80048e6:	623b      	str	r3, [r7, #32]
 80048e8:	683b      	ldr	r3, [r7, #0]
 80048ea:	691b      	ldr	r3, [r3, #16]
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d112      	bne.n	8004916 <USB_ActivateEndpoint+0x28a>
 80048f0:	6a3b      	ldr	r3, [r7, #32]
 80048f2:	881b      	ldrh	r3, [r3, #0]
 80048f4:	b29b      	uxth	r3, r3
 80048f6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80048fa:	b29a      	uxth	r2, r3
 80048fc:	6a3b      	ldr	r3, [r7, #32]
 80048fe:	801a      	strh	r2, [r3, #0]
 8004900:	6a3b      	ldr	r3, [r7, #32]
 8004902:	881b      	ldrh	r3, [r3, #0]
 8004904:	b29b      	uxth	r3, r3
 8004906:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800490a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800490e:	b29a      	uxth	r2, r3
 8004910:	6a3b      	ldr	r3, [r7, #32]
 8004912:	801a      	strh	r2, [r3, #0]
 8004914:	e02f      	b.n	8004976 <USB_ActivateEndpoint+0x2ea>
 8004916:	683b      	ldr	r3, [r7, #0]
 8004918:	691b      	ldr	r3, [r3, #16]
 800491a:	2b3e      	cmp	r3, #62	; 0x3e
 800491c:	d813      	bhi.n	8004946 <USB_ActivateEndpoint+0x2ba>
 800491e:	683b      	ldr	r3, [r7, #0]
 8004920:	691b      	ldr	r3, [r3, #16]
 8004922:	085b      	lsrs	r3, r3, #1
 8004924:	663b      	str	r3, [r7, #96]	; 0x60
 8004926:	683b      	ldr	r3, [r7, #0]
 8004928:	691b      	ldr	r3, [r3, #16]
 800492a:	f003 0301 	and.w	r3, r3, #1
 800492e:	2b00      	cmp	r3, #0
 8004930:	d002      	beq.n	8004938 <USB_ActivateEndpoint+0x2ac>
 8004932:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004934:	3301      	adds	r3, #1
 8004936:	663b      	str	r3, [r7, #96]	; 0x60
 8004938:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800493a:	b29b      	uxth	r3, r3
 800493c:	029b      	lsls	r3, r3, #10
 800493e:	b29a      	uxth	r2, r3
 8004940:	6a3b      	ldr	r3, [r7, #32]
 8004942:	801a      	strh	r2, [r3, #0]
 8004944:	e017      	b.n	8004976 <USB_ActivateEndpoint+0x2ea>
 8004946:	683b      	ldr	r3, [r7, #0]
 8004948:	691b      	ldr	r3, [r3, #16]
 800494a:	095b      	lsrs	r3, r3, #5
 800494c:	663b      	str	r3, [r7, #96]	; 0x60
 800494e:	683b      	ldr	r3, [r7, #0]
 8004950:	691b      	ldr	r3, [r3, #16]
 8004952:	f003 031f 	and.w	r3, r3, #31
 8004956:	2b00      	cmp	r3, #0
 8004958:	d102      	bne.n	8004960 <USB_ActivateEndpoint+0x2d4>
 800495a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800495c:	3b01      	subs	r3, #1
 800495e:	663b      	str	r3, [r7, #96]	; 0x60
 8004960:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004962:	b29b      	uxth	r3, r3
 8004964:	029b      	lsls	r3, r3, #10
 8004966:	b29b      	uxth	r3, r3
 8004968:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800496c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004970:	b29a      	uxth	r2, r3
 8004972:	6a3b      	ldr	r3, [r7, #32]
 8004974:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004976:	687a      	ldr	r2, [r7, #4]
 8004978:	683b      	ldr	r3, [r7, #0]
 800497a:	781b      	ldrb	r3, [r3, #0]
 800497c:	009b      	lsls	r3, r3, #2
 800497e:	4413      	add	r3, r2
 8004980:	881b      	ldrh	r3, [r3, #0]
 8004982:	83fb      	strh	r3, [r7, #30]
 8004984:	8bfb      	ldrh	r3, [r7, #30]
 8004986:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800498a:	2b00      	cmp	r3, #0
 800498c:	d01b      	beq.n	80049c6 <USB_ActivateEndpoint+0x33a>
 800498e:	687a      	ldr	r2, [r7, #4]
 8004990:	683b      	ldr	r3, [r7, #0]
 8004992:	781b      	ldrb	r3, [r3, #0]
 8004994:	009b      	lsls	r3, r3, #2
 8004996:	4413      	add	r3, r2
 8004998:	881b      	ldrh	r3, [r3, #0]
 800499a:	b29b      	uxth	r3, r3
 800499c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80049a0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80049a4:	83bb      	strh	r3, [r7, #28]
 80049a6:	687a      	ldr	r2, [r7, #4]
 80049a8:	683b      	ldr	r3, [r7, #0]
 80049aa:	781b      	ldrb	r3, [r3, #0]
 80049ac:	009b      	lsls	r3, r3, #2
 80049ae:	441a      	add	r2, r3
 80049b0:	8bbb      	ldrh	r3, [r7, #28]
 80049b2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80049b6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80049ba:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80049be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80049c2:	b29b      	uxth	r3, r3
 80049c4:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80049c6:	687a      	ldr	r2, [r7, #4]
 80049c8:	683b      	ldr	r3, [r7, #0]
 80049ca:	781b      	ldrb	r3, [r3, #0]
 80049cc:	009b      	lsls	r3, r3, #2
 80049ce:	4413      	add	r3, r2
 80049d0:	881b      	ldrh	r3, [r3, #0]
 80049d2:	b29b      	uxth	r3, r3
 80049d4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80049d8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80049dc:	837b      	strh	r3, [r7, #26]
 80049de:	8b7b      	ldrh	r3, [r7, #26]
 80049e0:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80049e4:	837b      	strh	r3, [r7, #26]
 80049e6:	8b7b      	ldrh	r3, [r7, #26]
 80049e8:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80049ec:	837b      	strh	r3, [r7, #26]
 80049ee:	687a      	ldr	r2, [r7, #4]
 80049f0:	683b      	ldr	r3, [r7, #0]
 80049f2:	781b      	ldrb	r3, [r3, #0]
 80049f4:	009b      	lsls	r3, r3, #2
 80049f6:	441a      	add	r2, r3
 80049f8:	8b7b      	ldrh	r3, [r7, #26]
 80049fa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80049fe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004a02:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004a06:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004a0a:	b29b      	uxth	r3, r3
 8004a0c:	8013      	strh	r3, [r2, #0]
 8004a0e:	e1a2      	b.n	8004d56 <USB_ActivateEndpoint+0x6ca>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 8004a10:	687a      	ldr	r2, [r7, #4]
 8004a12:	683b      	ldr	r3, [r7, #0]
 8004a14:	781b      	ldrb	r3, [r3, #0]
 8004a16:	009b      	lsls	r3, r3, #2
 8004a18:	4413      	add	r3, r2
 8004a1a:	881b      	ldrh	r3, [r3, #0]
 8004a1c:	b29b      	uxth	r3, r3
 8004a1e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004a22:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a26:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 8004a2a:	687a      	ldr	r2, [r7, #4]
 8004a2c:	683b      	ldr	r3, [r7, #0]
 8004a2e:	781b      	ldrb	r3, [r3, #0]
 8004a30:	009b      	lsls	r3, r3, #2
 8004a32:	441a      	add	r2, r3
 8004a34:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8004a38:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004a3c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004a40:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8004a44:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004a48:	b29b      	uxth	r3, r3
 8004a4a:	8013      	strh	r3, [r2, #0]

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	65bb      	str	r3, [r7, #88]	; 0x58
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004a56:	b29b      	uxth	r3, r3
 8004a58:	461a      	mov	r2, r3
 8004a5a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004a5c:	4413      	add	r3, r2
 8004a5e:	65bb      	str	r3, [r7, #88]	; 0x58
 8004a60:	683b      	ldr	r3, [r7, #0]
 8004a62:	781b      	ldrb	r3, [r3, #0]
 8004a64:	011a      	lsls	r2, r3, #4
 8004a66:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004a68:	4413      	add	r3, r2
 8004a6a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004a6e:	657b      	str	r3, [r7, #84]	; 0x54
 8004a70:	683b      	ldr	r3, [r7, #0]
 8004a72:	891b      	ldrh	r3, [r3, #8]
 8004a74:	085b      	lsrs	r3, r3, #1
 8004a76:	b29b      	uxth	r3, r3
 8004a78:	005b      	lsls	r3, r3, #1
 8004a7a:	b29a      	uxth	r2, r3
 8004a7c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004a7e:	801a      	strh	r2, [r3, #0]
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	653b      	str	r3, [r7, #80]	; 0x50
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004a8a:	b29b      	uxth	r3, r3
 8004a8c:	461a      	mov	r2, r3
 8004a8e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004a90:	4413      	add	r3, r2
 8004a92:	653b      	str	r3, [r7, #80]	; 0x50
 8004a94:	683b      	ldr	r3, [r7, #0]
 8004a96:	781b      	ldrb	r3, [r3, #0]
 8004a98:	011a      	lsls	r2, r3, #4
 8004a9a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004a9c:	4413      	add	r3, r2
 8004a9e:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8004aa2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004aa4:	683b      	ldr	r3, [r7, #0]
 8004aa6:	895b      	ldrh	r3, [r3, #10]
 8004aa8:	085b      	lsrs	r3, r3, #1
 8004aaa:	b29b      	uxth	r3, r3
 8004aac:	005b      	lsls	r3, r3, #1
 8004aae:	b29a      	uxth	r2, r3
 8004ab0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004ab2:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8004ab4:	683b      	ldr	r3, [r7, #0]
 8004ab6:	785b      	ldrb	r3, [r3, #1]
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	f040 8091 	bne.w	8004be0 <USB_ActivateEndpoint+0x554>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004abe:	687a      	ldr	r2, [r7, #4]
 8004ac0:	683b      	ldr	r3, [r7, #0]
 8004ac2:	781b      	ldrb	r3, [r3, #0]
 8004ac4:	009b      	lsls	r3, r3, #2
 8004ac6:	4413      	add	r3, r2
 8004ac8:	881b      	ldrh	r3, [r3, #0]
 8004aca:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8004acc:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8004ace:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d01b      	beq.n	8004b0e <USB_ActivateEndpoint+0x482>
 8004ad6:	687a      	ldr	r2, [r7, #4]
 8004ad8:	683b      	ldr	r3, [r7, #0]
 8004ada:	781b      	ldrb	r3, [r3, #0]
 8004adc:	009b      	lsls	r3, r3, #2
 8004ade:	4413      	add	r3, r2
 8004ae0:	881b      	ldrh	r3, [r3, #0]
 8004ae2:	b29b      	uxth	r3, r3
 8004ae4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004ae8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004aec:	877b      	strh	r3, [r7, #58]	; 0x3a
 8004aee:	687a      	ldr	r2, [r7, #4]
 8004af0:	683b      	ldr	r3, [r7, #0]
 8004af2:	781b      	ldrb	r3, [r3, #0]
 8004af4:	009b      	lsls	r3, r3, #2
 8004af6:	441a      	add	r2, r3
 8004af8:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8004afa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004afe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004b02:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004b06:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004b0a:	b29b      	uxth	r3, r3
 8004b0c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004b0e:	687a      	ldr	r2, [r7, #4]
 8004b10:	683b      	ldr	r3, [r7, #0]
 8004b12:	781b      	ldrb	r3, [r3, #0]
 8004b14:	009b      	lsls	r3, r3, #2
 8004b16:	4413      	add	r3, r2
 8004b18:	881b      	ldrh	r3, [r3, #0]
 8004b1a:	873b      	strh	r3, [r7, #56]	; 0x38
 8004b1c:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8004b1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d01b      	beq.n	8004b5e <USB_ActivateEndpoint+0x4d2>
 8004b26:	687a      	ldr	r2, [r7, #4]
 8004b28:	683b      	ldr	r3, [r7, #0]
 8004b2a:	781b      	ldrb	r3, [r3, #0]
 8004b2c:	009b      	lsls	r3, r3, #2
 8004b2e:	4413      	add	r3, r2
 8004b30:	881b      	ldrh	r3, [r3, #0]
 8004b32:	b29b      	uxth	r3, r3
 8004b34:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004b38:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b3c:	86fb      	strh	r3, [r7, #54]	; 0x36
 8004b3e:	687a      	ldr	r2, [r7, #4]
 8004b40:	683b      	ldr	r3, [r7, #0]
 8004b42:	781b      	ldrb	r3, [r3, #0]
 8004b44:	009b      	lsls	r3, r3, #2
 8004b46:	441a      	add	r2, r3
 8004b48:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004b4a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004b4e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004b52:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004b56:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004b5a:	b29b      	uxth	r3, r3
 8004b5c:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004b5e:	687a      	ldr	r2, [r7, #4]
 8004b60:	683b      	ldr	r3, [r7, #0]
 8004b62:	781b      	ldrb	r3, [r3, #0]
 8004b64:	009b      	lsls	r3, r3, #2
 8004b66:	4413      	add	r3, r2
 8004b68:	881b      	ldrh	r3, [r3, #0]
 8004b6a:	b29b      	uxth	r3, r3
 8004b6c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004b70:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b74:	86bb      	strh	r3, [r7, #52]	; 0x34
 8004b76:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8004b78:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8004b7c:	86bb      	strh	r3, [r7, #52]	; 0x34
 8004b7e:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8004b80:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004b84:	86bb      	strh	r3, [r7, #52]	; 0x34
 8004b86:	687a      	ldr	r2, [r7, #4]
 8004b88:	683b      	ldr	r3, [r7, #0]
 8004b8a:	781b      	ldrb	r3, [r3, #0]
 8004b8c:	009b      	lsls	r3, r3, #2
 8004b8e:	441a      	add	r2, r3
 8004b90:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8004b92:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004b96:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004b9a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004b9e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004ba2:	b29b      	uxth	r3, r3
 8004ba4:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004ba6:	687a      	ldr	r2, [r7, #4]
 8004ba8:	683b      	ldr	r3, [r7, #0]
 8004baa:	781b      	ldrb	r3, [r3, #0]
 8004bac:	009b      	lsls	r3, r3, #2
 8004bae:	4413      	add	r3, r2
 8004bb0:	881b      	ldrh	r3, [r3, #0]
 8004bb2:	b29b      	uxth	r3, r3
 8004bb4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004bb8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004bbc:	867b      	strh	r3, [r7, #50]	; 0x32
 8004bbe:	687a      	ldr	r2, [r7, #4]
 8004bc0:	683b      	ldr	r3, [r7, #0]
 8004bc2:	781b      	ldrb	r3, [r3, #0]
 8004bc4:	009b      	lsls	r3, r3, #2
 8004bc6:	441a      	add	r2, r3
 8004bc8:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8004bca:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004bce:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004bd2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004bd6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004bda:	b29b      	uxth	r3, r3
 8004bdc:	8013      	strh	r3, [r2, #0]
 8004bde:	e0ba      	b.n	8004d56 <USB_ActivateEndpoint+0x6ca>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004be0:	687a      	ldr	r2, [r7, #4]
 8004be2:	683b      	ldr	r3, [r7, #0]
 8004be4:	781b      	ldrb	r3, [r3, #0]
 8004be6:	009b      	lsls	r3, r3, #2
 8004be8:	4413      	add	r3, r2
 8004bea:	881b      	ldrh	r3, [r3, #0]
 8004bec:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8004bf0:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8004bf4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d01d      	beq.n	8004c38 <USB_ActivateEndpoint+0x5ac>
 8004bfc:	687a      	ldr	r2, [r7, #4]
 8004bfe:	683b      	ldr	r3, [r7, #0]
 8004c00:	781b      	ldrb	r3, [r3, #0]
 8004c02:	009b      	lsls	r3, r3, #2
 8004c04:	4413      	add	r3, r2
 8004c06:	881b      	ldrh	r3, [r3, #0]
 8004c08:	b29b      	uxth	r3, r3
 8004c0a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004c0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c12:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8004c16:	687a      	ldr	r2, [r7, #4]
 8004c18:	683b      	ldr	r3, [r7, #0]
 8004c1a:	781b      	ldrb	r3, [r3, #0]
 8004c1c:	009b      	lsls	r3, r3, #2
 8004c1e:	441a      	add	r2, r3
 8004c20:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8004c24:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004c28:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004c2c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004c30:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004c34:	b29b      	uxth	r3, r3
 8004c36:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004c38:	687a      	ldr	r2, [r7, #4]
 8004c3a:	683b      	ldr	r3, [r7, #0]
 8004c3c:	781b      	ldrb	r3, [r3, #0]
 8004c3e:	009b      	lsls	r3, r3, #2
 8004c40:	4413      	add	r3, r2
 8004c42:	881b      	ldrh	r3, [r3, #0]
 8004c44:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8004c48:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8004c4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d01d      	beq.n	8004c90 <USB_ActivateEndpoint+0x604>
 8004c54:	687a      	ldr	r2, [r7, #4]
 8004c56:	683b      	ldr	r3, [r7, #0]
 8004c58:	781b      	ldrb	r3, [r3, #0]
 8004c5a:	009b      	lsls	r3, r3, #2
 8004c5c:	4413      	add	r3, r2
 8004c5e:	881b      	ldrh	r3, [r3, #0]
 8004c60:	b29b      	uxth	r3, r3
 8004c62:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004c66:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c6a:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8004c6e:	687a      	ldr	r2, [r7, #4]
 8004c70:	683b      	ldr	r3, [r7, #0]
 8004c72:	781b      	ldrb	r3, [r3, #0]
 8004c74:	009b      	lsls	r3, r3, #2
 8004c76:	441a      	add	r2, r3
 8004c78:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8004c7c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004c80:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004c84:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004c88:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004c8c:	b29b      	uxth	r3, r3
 8004c8e:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004c90:	683b      	ldr	r3, [r7, #0]
 8004c92:	78db      	ldrb	r3, [r3, #3]
 8004c94:	2b01      	cmp	r3, #1
 8004c96:	d024      	beq.n	8004ce2 <USB_ActivateEndpoint+0x656>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004c98:	687a      	ldr	r2, [r7, #4]
 8004c9a:	683b      	ldr	r3, [r7, #0]
 8004c9c:	781b      	ldrb	r3, [r3, #0]
 8004c9e:	009b      	lsls	r3, r3, #2
 8004ca0:	4413      	add	r3, r2
 8004ca2:	881b      	ldrh	r3, [r3, #0]
 8004ca4:	b29b      	uxth	r3, r3
 8004ca6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004caa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004cae:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8004cb2:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8004cb6:	f083 0320 	eor.w	r3, r3, #32
 8004cba:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8004cbe:	687a      	ldr	r2, [r7, #4]
 8004cc0:	683b      	ldr	r3, [r7, #0]
 8004cc2:	781b      	ldrb	r3, [r3, #0]
 8004cc4:	009b      	lsls	r3, r3, #2
 8004cc6:	441a      	add	r2, r3
 8004cc8:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8004ccc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004cd0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004cd4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004cd8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004cdc:	b29b      	uxth	r3, r3
 8004cde:	8013      	strh	r3, [r2, #0]
 8004ce0:	e01d      	b.n	8004d1e <USB_ActivateEndpoint+0x692>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004ce2:	687a      	ldr	r2, [r7, #4]
 8004ce4:	683b      	ldr	r3, [r7, #0]
 8004ce6:	781b      	ldrb	r3, [r3, #0]
 8004ce8:	009b      	lsls	r3, r3, #2
 8004cea:	4413      	add	r3, r2
 8004cec:	881b      	ldrh	r3, [r3, #0]
 8004cee:	b29b      	uxth	r3, r3
 8004cf0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004cf4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004cf8:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8004cfc:	687a      	ldr	r2, [r7, #4]
 8004cfe:	683b      	ldr	r3, [r7, #0]
 8004d00:	781b      	ldrb	r3, [r3, #0]
 8004d02:	009b      	lsls	r3, r3, #2
 8004d04:	441a      	add	r2, r3
 8004d06:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8004d0a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004d0e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004d12:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004d16:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004d1a:	b29b      	uxth	r3, r3
 8004d1c:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004d1e:	687a      	ldr	r2, [r7, #4]
 8004d20:	683b      	ldr	r3, [r7, #0]
 8004d22:	781b      	ldrb	r3, [r3, #0]
 8004d24:	009b      	lsls	r3, r3, #2
 8004d26:	4413      	add	r3, r2
 8004d28:	881b      	ldrh	r3, [r3, #0]
 8004d2a:	b29b      	uxth	r3, r3
 8004d2c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004d30:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d34:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8004d36:	687a      	ldr	r2, [r7, #4]
 8004d38:	683b      	ldr	r3, [r7, #0]
 8004d3a:	781b      	ldrb	r3, [r3, #0]
 8004d3c:	009b      	lsls	r3, r3, #2
 8004d3e:	441a      	add	r2, r3
 8004d40:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8004d42:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004d46:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004d4a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004d4e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004d52:	b29b      	uxth	r3, r3
 8004d54:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 8004d56:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8004d5a:	4618      	mov	r0, r3
 8004d5c:	376c      	adds	r7, #108	; 0x6c
 8004d5e:	46bd      	mov	sp, r7
 8004d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d64:	4770      	bx	lr
 8004d66:	bf00      	nop

08004d68 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004d68:	b480      	push	{r7}
 8004d6a:	b08d      	sub	sp, #52	; 0x34
 8004d6c:	af00      	add	r7, sp, #0
 8004d6e:	6078      	str	r0, [r7, #4]
 8004d70:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8004d72:	683b      	ldr	r3, [r7, #0]
 8004d74:	7b1b      	ldrb	r3, [r3, #12]
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	f040 808e 	bne.w	8004e98 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8004d7c:	683b      	ldr	r3, [r7, #0]
 8004d7e:	785b      	ldrb	r3, [r3, #1]
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d044      	beq.n	8004e0e <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004d84:	687a      	ldr	r2, [r7, #4]
 8004d86:	683b      	ldr	r3, [r7, #0]
 8004d88:	781b      	ldrb	r3, [r3, #0]
 8004d8a:	009b      	lsls	r3, r3, #2
 8004d8c:	4413      	add	r3, r2
 8004d8e:	881b      	ldrh	r3, [r3, #0]
 8004d90:	81bb      	strh	r3, [r7, #12]
 8004d92:	89bb      	ldrh	r3, [r7, #12]
 8004d94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d01b      	beq.n	8004dd4 <USB_DeactivateEndpoint+0x6c>
 8004d9c:	687a      	ldr	r2, [r7, #4]
 8004d9e:	683b      	ldr	r3, [r7, #0]
 8004da0:	781b      	ldrb	r3, [r3, #0]
 8004da2:	009b      	lsls	r3, r3, #2
 8004da4:	4413      	add	r3, r2
 8004da6:	881b      	ldrh	r3, [r3, #0]
 8004da8:	b29b      	uxth	r3, r3
 8004daa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004dae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004db2:	817b      	strh	r3, [r7, #10]
 8004db4:	687a      	ldr	r2, [r7, #4]
 8004db6:	683b      	ldr	r3, [r7, #0]
 8004db8:	781b      	ldrb	r3, [r3, #0]
 8004dba:	009b      	lsls	r3, r3, #2
 8004dbc:	441a      	add	r2, r3
 8004dbe:	897b      	ldrh	r3, [r7, #10]
 8004dc0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004dc4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004dc8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004dcc:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004dd0:	b29b      	uxth	r3, r3
 8004dd2:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004dd4:	687a      	ldr	r2, [r7, #4]
 8004dd6:	683b      	ldr	r3, [r7, #0]
 8004dd8:	781b      	ldrb	r3, [r3, #0]
 8004dda:	009b      	lsls	r3, r3, #2
 8004ddc:	4413      	add	r3, r2
 8004dde:	881b      	ldrh	r3, [r3, #0]
 8004de0:	b29b      	uxth	r3, r3
 8004de2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004de6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004dea:	813b      	strh	r3, [r7, #8]
 8004dec:	687a      	ldr	r2, [r7, #4]
 8004dee:	683b      	ldr	r3, [r7, #0]
 8004df0:	781b      	ldrb	r3, [r3, #0]
 8004df2:	009b      	lsls	r3, r3, #2
 8004df4:	441a      	add	r2, r3
 8004df6:	893b      	ldrh	r3, [r7, #8]
 8004df8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004dfc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004e00:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004e04:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004e08:	b29b      	uxth	r3, r3
 8004e0a:	8013      	strh	r3, [r2, #0]
 8004e0c:	e192      	b.n	8005134 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004e0e:	687a      	ldr	r2, [r7, #4]
 8004e10:	683b      	ldr	r3, [r7, #0]
 8004e12:	781b      	ldrb	r3, [r3, #0]
 8004e14:	009b      	lsls	r3, r3, #2
 8004e16:	4413      	add	r3, r2
 8004e18:	881b      	ldrh	r3, [r3, #0]
 8004e1a:	827b      	strh	r3, [r7, #18]
 8004e1c:	8a7b      	ldrh	r3, [r7, #18]
 8004e1e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d01b      	beq.n	8004e5e <USB_DeactivateEndpoint+0xf6>
 8004e26:	687a      	ldr	r2, [r7, #4]
 8004e28:	683b      	ldr	r3, [r7, #0]
 8004e2a:	781b      	ldrb	r3, [r3, #0]
 8004e2c:	009b      	lsls	r3, r3, #2
 8004e2e:	4413      	add	r3, r2
 8004e30:	881b      	ldrh	r3, [r3, #0]
 8004e32:	b29b      	uxth	r3, r3
 8004e34:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004e38:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e3c:	823b      	strh	r3, [r7, #16]
 8004e3e:	687a      	ldr	r2, [r7, #4]
 8004e40:	683b      	ldr	r3, [r7, #0]
 8004e42:	781b      	ldrb	r3, [r3, #0]
 8004e44:	009b      	lsls	r3, r3, #2
 8004e46:	441a      	add	r2, r3
 8004e48:	8a3b      	ldrh	r3, [r7, #16]
 8004e4a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004e4e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004e52:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004e56:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004e5a:	b29b      	uxth	r3, r3
 8004e5c:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004e5e:	687a      	ldr	r2, [r7, #4]
 8004e60:	683b      	ldr	r3, [r7, #0]
 8004e62:	781b      	ldrb	r3, [r3, #0]
 8004e64:	009b      	lsls	r3, r3, #2
 8004e66:	4413      	add	r3, r2
 8004e68:	881b      	ldrh	r3, [r3, #0]
 8004e6a:	b29b      	uxth	r3, r3
 8004e6c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004e70:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e74:	81fb      	strh	r3, [r7, #14]
 8004e76:	687a      	ldr	r2, [r7, #4]
 8004e78:	683b      	ldr	r3, [r7, #0]
 8004e7a:	781b      	ldrb	r3, [r3, #0]
 8004e7c:	009b      	lsls	r3, r3, #2
 8004e7e:	441a      	add	r2, r3
 8004e80:	89fb      	ldrh	r3, [r7, #14]
 8004e82:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004e86:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004e8a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004e8e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004e92:	b29b      	uxth	r3, r3
 8004e94:	8013      	strh	r3, [r2, #0]
 8004e96:	e14d      	b.n	8005134 <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 8004e98:	683b      	ldr	r3, [r7, #0]
 8004e9a:	785b      	ldrb	r3, [r3, #1]
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	f040 80a5 	bne.w	8004fec <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004ea2:	687a      	ldr	r2, [r7, #4]
 8004ea4:	683b      	ldr	r3, [r7, #0]
 8004ea6:	781b      	ldrb	r3, [r3, #0]
 8004ea8:	009b      	lsls	r3, r3, #2
 8004eaa:	4413      	add	r3, r2
 8004eac:	881b      	ldrh	r3, [r3, #0]
 8004eae:	843b      	strh	r3, [r7, #32]
 8004eb0:	8c3b      	ldrh	r3, [r7, #32]
 8004eb2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d01b      	beq.n	8004ef2 <USB_DeactivateEndpoint+0x18a>
 8004eba:	687a      	ldr	r2, [r7, #4]
 8004ebc:	683b      	ldr	r3, [r7, #0]
 8004ebe:	781b      	ldrb	r3, [r3, #0]
 8004ec0:	009b      	lsls	r3, r3, #2
 8004ec2:	4413      	add	r3, r2
 8004ec4:	881b      	ldrh	r3, [r3, #0]
 8004ec6:	b29b      	uxth	r3, r3
 8004ec8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004ecc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ed0:	83fb      	strh	r3, [r7, #30]
 8004ed2:	687a      	ldr	r2, [r7, #4]
 8004ed4:	683b      	ldr	r3, [r7, #0]
 8004ed6:	781b      	ldrb	r3, [r3, #0]
 8004ed8:	009b      	lsls	r3, r3, #2
 8004eda:	441a      	add	r2, r3
 8004edc:	8bfb      	ldrh	r3, [r7, #30]
 8004ede:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004ee2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004ee6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004eea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004eee:	b29b      	uxth	r3, r3
 8004ef0:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004ef2:	687a      	ldr	r2, [r7, #4]
 8004ef4:	683b      	ldr	r3, [r7, #0]
 8004ef6:	781b      	ldrb	r3, [r3, #0]
 8004ef8:	009b      	lsls	r3, r3, #2
 8004efa:	4413      	add	r3, r2
 8004efc:	881b      	ldrh	r3, [r3, #0]
 8004efe:	83bb      	strh	r3, [r7, #28]
 8004f00:	8bbb      	ldrh	r3, [r7, #28]
 8004f02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d01b      	beq.n	8004f42 <USB_DeactivateEndpoint+0x1da>
 8004f0a:	687a      	ldr	r2, [r7, #4]
 8004f0c:	683b      	ldr	r3, [r7, #0]
 8004f0e:	781b      	ldrb	r3, [r3, #0]
 8004f10:	009b      	lsls	r3, r3, #2
 8004f12:	4413      	add	r3, r2
 8004f14:	881b      	ldrh	r3, [r3, #0]
 8004f16:	b29b      	uxth	r3, r3
 8004f18:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004f1c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f20:	837b      	strh	r3, [r7, #26]
 8004f22:	687a      	ldr	r2, [r7, #4]
 8004f24:	683b      	ldr	r3, [r7, #0]
 8004f26:	781b      	ldrb	r3, [r3, #0]
 8004f28:	009b      	lsls	r3, r3, #2
 8004f2a:	441a      	add	r2, r3
 8004f2c:	8b7b      	ldrh	r3, [r7, #26]
 8004f2e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004f32:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004f36:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004f3a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004f3e:	b29b      	uxth	r3, r3
 8004f40:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8004f42:	687a      	ldr	r2, [r7, #4]
 8004f44:	683b      	ldr	r3, [r7, #0]
 8004f46:	781b      	ldrb	r3, [r3, #0]
 8004f48:	009b      	lsls	r3, r3, #2
 8004f4a:	4413      	add	r3, r2
 8004f4c:	881b      	ldrh	r3, [r3, #0]
 8004f4e:	b29b      	uxth	r3, r3
 8004f50:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004f54:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f58:	833b      	strh	r3, [r7, #24]
 8004f5a:	687a      	ldr	r2, [r7, #4]
 8004f5c:	683b      	ldr	r3, [r7, #0]
 8004f5e:	781b      	ldrb	r3, [r3, #0]
 8004f60:	009b      	lsls	r3, r3, #2
 8004f62:	441a      	add	r2, r3
 8004f64:	8b3b      	ldrh	r3, [r7, #24]
 8004f66:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004f6a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004f6e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004f72:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004f76:	b29b      	uxth	r3, r3
 8004f78:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004f7a:	687a      	ldr	r2, [r7, #4]
 8004f7c:	683b      	ldr	r3, [r7, #0]
 8004f7e:	781b      	ldrb	r3, [r3, #0]
 8004f80:	009b      	lsls	r3, r3, #2
 8004f82:	4413      	add	r3, r2
 8004f84:	881b      	ldrh	r3, [r3, #0]
 8004f86:	b29b      	uxth	r3, r3
 8004f88:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004f8c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f90:	82fb      	strh	r3, [r7, #22]
 8004f92:	687a      	ldr	r2, [r7, #4]
 8004f94:	683b      	ldr	r3, [r7, #0]
 8004f96:	781b      	ldrb	r3, [r3, #0]
 8004f98:	009b      	lsls	r3, r3, #2
 8004f9a:	441a      	add	r2, r3
 8004f9c:	8afb      	ldrh	r3, [r7, #22]
 8004f9e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004fa2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004fa6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004faa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004fae:	b29b      	uxth	r3, r3
 8004fb0:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004fb2:	687a      	ldr	r2, [r7, #4]
 8004fb4:	683b      	ldr	r3, [r7, #0]
 8004fb6:	781b      	ldrb	r3, [r3, #0]
 8004fb8:	009b      	lsls	r3, r3, #2
 8004fba:	4413      	add	r3, r2
 8004fbc:	881b      	ldrh	r3, [r3, #0]
 8004fbe:	b29b      	uxth	r3, r3
 8004fc0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004fc4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004fc8:	82bb      	strh	r3, [r7, #20]
 8004fca:	687a      	ldr	r2, [r7, #4]
 8004fcc:	683b      	ldr	r3, [r7, #0]
 8004fce:	781b      	ldrb	r3, [r3, #0]
 8004fd0:	009b      	lsls	r3, r3, #2
 8004fd2:	441a      	add	r2, r3
 8004fd4:	8abb      	ldrh	r3, [r7, #20]
 8004fd6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004fda:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004fde:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004fe2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004fe6:	b29b      	uxth	r3, r3
 8004fe8:	8013      	strh	r3, [r2, #0]
 8004fea:	e0a3      	b.n	8005134 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004fec:	687a      	ldr	r2, [r7, #4]
 8004fee:	683b      	ldr	r3, [r7, #0]
 8004ff0:	781b      	ldrb	r3, [r3, #0]
 8004ff2:	009b      	lsls	r3, r3, #2
 8004ff4:	4413      	add	r3, r2
 8004ff6:	881b      	ldrh	r3, [r3, #0]
 8004ff8:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8004ffa:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8004ffc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005000:	2b00      	cmp	r3, #0
 8005002:	d01b      	beq.n	800503c <USB_DeactivateEndpoint+0x2d4>
 8005004:	687a      	ldr	r2, [r7, #4]
 8005006:	683b      	ldr	r3, [r7, #0]
 8005008:	781b      	ldrb	r3, [r3, #0]
 800500a:	009b      	lsls	r3, r3, #2
 800500c:	4413      	add	r3, r2
 800500e:	881b      	ldrh	r3, [r3, #0]
 8005010:	b29b      	uxth	r3, r3
 8005012:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005016:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800501a:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800501c:	687a      	ldr	r2, [r7, #4]
 800501e:	683b      	ldr	r3, [r7, #0]
 8005020:	781b      	ldrb	r3, [r3, #0]
 8005022:	009b      	lsls	r3, r3, #2
 8005024:	441a      	add	r2, r3
 8005026:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8005028:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800502c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005030:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005034:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005038:	b29b      	uxth	r3, r3
 800503a:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800503c:	687a      	ldr	r2, [r7, #4]
 800503e:	683b      	ldr	r3, [r7, #0]
 8005040:	781b      	ldrb	r3, [r3, #0]
 8005042:	009b      	lsls	r3, r3, #2
 8005044:	4413      	add	r3, r2
 8005046:	881b      	ldrh	r3, [r3, #0]
 8005048:	857b      	strh	r3, [r7, #42]	; 0x2a
 800504a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800504c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005050:	2b00      	cmp	r3, #0
 8005052:	d01b      	beq.n	800508c <USB_DeactivateEndpoint+0x324>
 8005054:	687a      	ldr	r2, [r7, #4]
 8005056:	683b      	ldr	r3, [r7, #0]
 8005058:	781b      	ldrb	r3, [r3, #0]
 800505a:	009b      	lsls	r3, r3, #2
 800505c:	4413      	add	r3, r2
 800505e:	881b      	ldrh	r3, [r3, #0]
 8005060:	b29b      	uxth	r3, r3
 8005062:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005066:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800506a:	853b      	strh	r3, [r7, #40]	; 0x28
 800506c:	687a      	ldr	r2, [r7, #4]
 800506e:	683b      	ldr	r3, [r7, #0]
 8005070:	781b      	ldrb	r3, [r3, #0]
 8005072:	009b      	lsls	r3, r3, #2
 8005074:	441a      	add	r2, r3
 8005076:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8005078:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800507c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005080:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005084:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005088:	b29b      	uxth	r3, r3
 800508a:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 800508c:	687a      	ldr	r2, [r7, #4]
 800508e:	683b      	ldr	r3, [r7, #0]
 8005090:	781b      	ldrb	r3, [r3, #0]
 8005092:	009b      	lsls	r3, r3, #2
 8005094:	4413      	add	r3, r2
 8005096:	881b      	ldrh	r3, [r3, #0]
 8005098:	b29b      	uxth	r3, r3
 800509a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800509e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80050a2:	84fb      	strh	r3, [r7, #38]	; 0x26
 80050a4:	687a      	ldr	r2, [r7, #4]
 80050a6:	683b      	ldr	r3, [r7, #0]
 80050a8:	781b      	ldrb	r3, [r3, #0]
 80050aa:	009b      	lsls	r3, r3, #2
 80050ac:	441a      	add	r2, r3
 80050ae:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80050b0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80050b4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80050b8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80050bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80050c0:	b29b      	uxth	r3, r3
 80050c2:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80050c4:	687a      	ldr	r2, [r7, #4]
 80050c6:	683b      	ldr	r3, [r7, #0]
 80050c8:	781b      	ldrb	r3, [r3, #0]
 80050ca:	009b      	lsls	r3, r3, #2
 80050cc:	4413      	add	r3, r2
 80050ce:	881b      	ldrh	r3, [r3, #0]
 80050d0:	b29b      	uxth	r3, r3
 80050d2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80050d6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80050da:	84bb      	strh	r3, [r7, #36]	; 0x24
 80050dc:	687a      	ldr	r2, [r7, #4]
 80050de:	683b      	ldr	r3, [r7, #0]
 80050e0:	781b      	ldrb	r3, [r3, #0]
 80050e2:	009b      	lsls	r3, r3, #2
 80050e4:	441a      	add	r2, r3
 80050e6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80050e8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80050ec:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80050f0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80050f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80050f8:	b29b      	uxth	r3, r3
 80050fa:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80050fc:	687a      	ldr	r2, [r7, #4]
 80050fe:	683b      	ldr	r3, [r7, #0]
 8005100:	781b      	ldrb	r3, [r3, #0]
 8005102:	009b      	lsls	r3, r3, #2
 8005104:	4413      	add	r3, r2
 8005106:	881b      	ldrh	r3, [r3, #0]
 8005108:	b29b      	uxth	r3, r3
 800510a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800510e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005112:	847b      	strh	r3, [r7, #34]	; 0x22
 8005114:	687a      	ldr	r2, [r7, #4]
 8005116:	683b      	ldr	r3, [r7, #0]
 8005118:	781b      	ldrb	r3, [r3, #0]
 800511a:	009b      	lsls	r3, r3, #2
 800511c:	441a      	add	r2, r3
 800511e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005120:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005124:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005128:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800512c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005130:	b29b      	uxth	r3, r3
 8005132:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8005134:	2300      	movs	r3, #0
}
 8005136:	4618      	mov	r0, r3
 8005138:	3734      	adds	r7, #52	; 0x34
 800513a:	46bd      	mov	sp, r7
 800513c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005140:	4770      	bx	lr

08005142 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005142:	b580      	push	{r7, lr}
 8005144:	b0c4      	sub	sp, #272	; 0x110
 8005146:	af00      	add	r7, sp, #0
 8005148:	1d3b      	adds	r3, r7, #4
 800514a:	6018      	str	r0, [r3, #0]
 800514c:	463b      	mov	r3, r7
 800514e:	6019      	str	r1, [r3, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005150:	463b      	mov	r3, r7
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	785b      	ldrb	r3, [r3, #1]
 8005156:	2b01      	cmp	r3, #1
 8005158:	f040 8557 	bne.w	8005c0a <USB_EPStartXfer+0xac8>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 800515c:	463b      	mov	r3, r7
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	699a      	ldr	r2, [r3, #24]
 8005162:	463b      	mov	r3, r7
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	691b      	ldr	r3, [r3, #16]
 8005168:	429a      	cmp	r2, r3
 800516a:	d905      	bls.n	8005178 <USB_EPStartXfer+0x36>
    {
      len = ep->maxpacket;
 800516c:	463b      	mov	r3, r7
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	691b      	ldr	r3, [r3, #16]
 8005172:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8005176:	e004      	b.n	8005182 <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 8005178:	463b      	mov	r3, r7
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	699b      	ldr	r3, [r3, #24]
 800517e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8005182:	463b      	mov	r3, r7
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	7b1b      	ldrb	r3, [r3, #12]
 8005188:	2b00      	cmp	r3, #0
 800518a:	d12c      	bne.n	80051e6 <USB_EPStartXfer+0xa4>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800518c:	463b      	mov	r3, r7
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	6959      	ldr	r1, [r3, #20]
 8005192:	463b      	mov	r3, r7
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	88da      	ldrh	r2, [r3, #6]
 8005198:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800519c:	b29b      	uxth	r3, r3
 800519e:	1d38      	adds	r0, r7, #4
 80051a0:	6800      	ldr	r0, [r0, #0]
 80051a2:	f001 fa1c 	bl	80065de <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80051a6:	1d3b      	adds	r3, r7, #4
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	617b      	str	r3, [r7, #20]
 80051ac:	1d3b      	adds	r3, r7, #4
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80051b4:	b29b      	uxth	r3, r3
 80051b6:	461a      	mov	r2, r3
 80051b8:	697b      	ldr	r3, [r7, #20]
 80051ba:	4413      	add	r3, r2
 80051bc:	617b      	str	r3, [r7, #20]
 80051be:	463b      	mov	r3, r7
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	781b      	ldrb	r3, [r3, #0]
 80051c4:	011a      	lsls	r2, r3, #4
 80051c6:	697b      	ldr	r3, [r7, #20]
 80051c8:	4413      	add	r3, r2
 80051ca:	f203 4204 	addw	r2, r3, #1028	; 0x404
 80051ce:	f107 0310 	add.w	r3, r7, #16
 80051d2:	601a      	str	r2, [r3, #0]
 80051d4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80051d8:	b29a      	uxth	r2, r3
 80051da:	f107 0310 	add.w	r3, r7, #16
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	801a      	strh	r2, [r3, #0]
 80051e2:	f000 bcdd 	b.w	8005ba0 <USB_EPStartXfer+0xa5e>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 80051e6:	463b      	mov	r3, r7
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	78db      	ldrb	r3, [r3, #3]
 80051ec:	2b02      	cmp	r3, #2
 80051ee:	f040 8347 	bne.w	8005880 <USB_EPStartXfer+0x73e>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 80051f2:	463b      	mov	r3, r7
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	6a1a      	ldr	r2, [r3, #32]
 80051f8:	463b      	mov	r3, r7
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	691b      	ldr	r3, [r3, #16]
 80051fe:	429a      	cmp	r2, r3
 8005200:	f240 82eb 	bls.w	80057da <USB_EPStartXfer+0x698>
        {
          /* enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 8005204:	1d3b      	adds	r3, r7, #4
 8005206:	681a      	ldr	r2, [r3, #0]
 8005208:	463b      	mov	r3, r7
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	781b      	ldrb	r3, [r3, #0]
 800520e:	009b      	lsls	r3, r3, #2
 8005210:	4413      	add	r3, r2
 8005212:	881b      	ldrh	r3, [r3, #0]
 8005214:	b29b      	uxth	r3, r3
 8005216:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800521a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800521e:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
 8005222:	1d3b      	adds	r3, r7, #4
 8005224:	681a      	ldr	r2, [r3, #0]
 8005226:	463b      	mov	r3, r7
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	781b      	ldrb	r3, [r3, #0]
 800522c:	009b      	lsls	r3, r3, #2
 800522e:	441a      	add	r2, r3
 8005230:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 8005234:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005238:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800523c:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8005240:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005244:	b29b      	uxth	r3, r3
 8005246:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8005248:	463b      	mov	r3, r7
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	6a1a      	ldr	r2, [r3, #32]
 800524e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005252:	1ad2      	subs	r2, r2, r3
 8005254:	463b      	mov	r3, r7
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800525a:	1d3b      	adds	r3, r7, #4
 800525c:	681a      	ldr	r2, [r3, #0]
 800525e:	463b      	mov	r3, r7
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	781b      	ldrb	r3, [r3, #0]
 8005264:	009b      	lsls	r3, r3, #2
 8005266:	4413      	add	r3, r2
 8005268:	881b      	ldrh	r3, [r3, #0]
 800526a:	b29b      	uxth	r3, r3
 800526c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005270:	2b00      	cmp	r3, #0
 8005272:	f000 8159 	beq.w	8005528 <USB_EPStartXfer+0x3e6>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005276:	1d3b      	adds	r3, r7, #4
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	637b      	str	r3, [r7, #52]	; 0x34
 800527c:	463b      	mov	r3, r7
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	785b      	ldrb	r3, [r3, #1]
 8005282:	2b00      	cmp	r3, #0
 8005284:	d164      	bne.n	8005350 <USB_EPStartXfer+0x20e>
 8005286:	1d3b      	adds	r3, r7, #4
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800528c:	1d3b      	adds	r3, r7, #4
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005294:	b29b      	uxth	r3, r3
 8005296:	461a      	mov	r2, r3
 8005298:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800529a:	4413      	add	r3, r2
 800529c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800529e:	463b      	mov	r3, r7
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	781b      	ldrb	r3, [r3, #0]
 80052a4:	011a      	lsls	r2, r3, #4
 80052a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052a8:	4413      	add	r3, r2
 80052aa:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80052ae:	62bb      	str	r3, [r7, #40]	; 0x28
 80052b0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d112      	bne.n	80052de <USB_EPStartXfer+0x19c>
 80052b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052ba:	881b      	ldrh	r3, [r3, #0]
 80052bc:	b29b      	uxth	r3, r3
 80052be:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80052c2:	b29a      	uxth	r2, r3
 80052c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052c6:	801a      	strh	r2, [r3, #0]
 80052c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052ca:	881b      	ldrh	r3, [r3, #0]
 80052cc:	b29b      	uxth	r3, r3
 80052ce:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80052d2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80052d6:	b29a      	uxth	r2, r3
 80052d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052da:	801a      	strh	r2, [r3, #0]
 80052dc:	e054      	b.n	8005388 <USB_EPStartXfer+0x246>
 80052de:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80052e2:	2b3e      	cmp	r3, #62	; 0x3e
 80052e4:	d817      	bhi.n	8005316 <USB_EPStartXfer+0x1d4>
 80052e6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80052ea:	085b      	lsrs	r3, r3, #1
 80052ec:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80052f0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80052f4:	f003 0301 	and.w	r3, r3, #1
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d004      	beq.n	8005306 <USB_EPStartXfer+0x1c4>
 80052fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005300:	3301      	adds	r3, #1
 8005302:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8005306:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800530a:	b29b      	uxth	r3, r3
 800530c:	029b      	lsls	r3, r3, #10
 800530e:	b29a      	uxth	r2, r3
 8005310:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005312:	801a      	strh	r2, [r3, #0]
 8005314:	e038      	b.n	8005388 <USB_EPStartXfer+0x246>
 8005316:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800531a:	095b      	lsrs	r3, r3, #5
 800531c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8005320:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005324:	f003 031f 	and.w	r3, r3, #31
 8005328:	2b00      	cmp	r3, #0
 800532a:	d104      	bne.n	8005336 <USB_EPStartXfer+0x1f4>
 800532c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005330:	3b01      	subs	r3, #1
 8005332:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8005336:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800533a:	b29b      	uxth	r3, r3
 800533c:	029b      	lsls	r3, r3, #10
 800533e:	b29b      	uxth	r3, r3
 8005340:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005344:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005348:	b29a      	uxth	r2, r3
 800534a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800534c:	801a      	strh	r2, [r3, #0]
 800534e:	e01b      	b.n	8005388 <USB_EPStartXfer+0x246>
 8005350:	463b      	mov	r3, r7
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	785b      	ldrb	r3, [r3, #1]
 8005356:	2b01      	cmp	r3, #1
 8005358:	d116      	bne.n	8005388 <USB_EPStartXfer+0x246>
 800535a:	1d3b      	adds	r3, r7, #4
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005362:	b29b      	uxth	r3, r3
 8005364:	461a      	mov	r2, r3
 8005366:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005368:	4413      	add	r3, r2
 800536a:	637b      	str	r3, [r7, #52]	; 0x34
 800536c:	463b      	mov	r3, r7
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	781b      	ldrb	r3, [r3, #0]
 8005372:	011a      	lsls	r2, r3, #4
 8005374:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005376:	4413      	add	r3, r2
 8005378:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800537c:	633b      	str	r3, [r7, #48]	; 0x30
 800537e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005382:	b29a      	uxth	r2, r3
 8005384:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005386:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8005388:	463b      	mov	r3, r7
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	895b      	ldrh	r3, [r3, #10]
 800538e:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005392:	463b      	mov	r3, r7
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	6959      	ldr	r1, [r3, #20]
 8005398:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800539c:	b29b      	uxth	r3, r3
 800539e:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 80053a2:	1d38      	adds	r0, r7, #4
 80053a4:	6800      	ldr	r0, [r0, #0]
 80053a6:	f001 f91a 	bl	80065de <USB_WritePMA>
            ep->xfer_buff += len;
 80053aa:	463b      	mov	r3, r7
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	695a      	ldr	r2, [r3, #20]
 80053b0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80053b4:	441a      	add	r2, r3
 80053b6:	463b      	mov	r3, r7
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80053bc:	463b      	mov	r3, r7
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	6a1a      	ldr	r2, [r3, #32]
 80053c2:	463b      	mov	r3, r7
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	691b      	ldr	r3, [r3, #16]
 80053c8:	429a      	cmp	r2, r3
 80053ca:	d909      	bls.n	80053e0 <USB_EPStartXfer+0x29e>
            {
              ep->xfer_len_db -= len;
 80053cc:	463b      	mov	r3, r7
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	6a1a      	ldr	r2, [r3, #32]
 80053d2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80053d6:	1ad2      	subs	r2, r2, r3
 80053d8:	463b      	mov	r3, r7
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	621a      	str	r2, [r3, #32]
 80053de:	e008      	b.n	80053f2 <USB_EPStartXfer+0x2b0>
            }
            else
            {
              len = ep->xfer_len_db;
 80053e0:	463b      	mov	r3, r7
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	6a1b      	ldr	r3, [r3, #32]
 80053e6:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
              ep->xfer_len_db = 0U;
 80053ea:	463b      	mov	r3, r7
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	2200      	movs	r2, #0
 80053f0:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80053f2:	463b      	mov	r3, r7
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	785b      	ldrb	r3, [r3, #1]
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d164      	bne.n	80054c6 <USB_EPStartXfer+0x384>
 80053fc:	1d3b      	adds	r3, r7, #4
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	61fb      	str	r3, [r7, #28]
 8005402:	1d3b      	adds	r3, r7, #4
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800540a:	b29b      	uxth	r3, r3
 800540c:	461a      	mov	r2, r3
 800540e:	69fb      	ldr	r3, [r7, #28]
 8005410:	4413      	add	r3, r2
 8005412:	61fb      	str	r3, [r7, #28]
 8005414:	463b      	mov	r3, r7
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	781b      	ldrb	r3, [r3, #0]
 800541a:	011a      	lsls	r2, r3, #4
 800541c:	69fb      	ldr	r3, [r7, #28]
 800541e:	4413      	add	r3, r2
 8005420:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005424:	61bb      	str	r3, [r7, #24]
 8005426:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800542a:	2b00      	cmp	r3, #0
 800542c:	d112      	bne.n	8005454 <USB_EPStartXfer+0x312>
 800542e:	69bb      	ldr	r3, [r7, #24]
 8005430:	881b      	ldrh	r3, [r3, #0]
 8005432:	b29b      	uxth	r3, r3
 8005434:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005438:	b29a      	uxth	r2, r3
 800543a:	69bb      	ldr	r3, [r7, #24]
 800543c:	801a      	strh	r2, [r3, #0]
 800543e:	69bb      	ldr	r3, [r7, #24]
 8005440:	881b      	ldrh	r3, [r3, #0]
 8005442:	b29b      	uxth	r3, r3
 8005444:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005448:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800544c:	b29a      	uxth	r2, r3
 800544e:	69bb      	ldr	r3, [r7, #24]
 8005450:	801a      	strh	r2, [r3, #0]
 8005452:	e057      	b.n	8005504 <USB_EPStartXfer+0x3c2>
 8005454:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005458:	2b3e      	cmp	r3, #62	; 0x3e
 800545a:	d817      	bhi.n	800548c <USB_EPStartXfer+0x34a>
 800545c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005460:	085b      	lsrs	r3, r3, #1
 8005462:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005466:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800546a:	f003 0301 	and.w	r3, r3, #1
 800546e:	2b00      	cmp	r3, #0
 8005470:	d004      	beq.n	800547c <USB_EPStartXfer+0x33a>
 8005472:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005476:	3301      	adds	r3, #1
 8005478:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800547c:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005480:	b29b      	uxth	r3, r3
 8005482:	029b      	lsls	r3, r3, #10
 8005484:	b29a      	uxth	r2, r3
 8005486:	69bb      	ldr	r3, [r7, #24]
 8005488:	801a      	strh	r2, [r3, #0]
 800548a:	e03b      	b.n	8005504 <USB_EPStartXfer+0x3c2>
 800548c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005490:	095b      	lsrs	r3, r3, #5
 8005492:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005496:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800549a:	f003 031f 	and.w	r3, r3, #31
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d104      	bne.n	80054ac <USB_EPStartXfer+0x36a>
 80054a2:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80054a6:	3b01      	subs	r3, #1
 80054a8:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80054ac:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80054b0:	b29b      	uxth	r3, r3
 80054b2:	029b      	lsls	r3, r3, #10
 80054b4:	b29b      	uxth	r3, r3
 80054b6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80054ba:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80054be:	b29a      	uxth	r2, r3
 80054c0:	69bb      	ldr	r3, [r7, #24]
 80054c2:	801a      	strh	r2, [r3, #0]
 80054c4:	e01e      	b.n	8005504 <USB_EPStartXfer+0x3c2>
 80054c6:	463b      	mov	r3, r7
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	785b      	ldrb	r3, [r3, #1]
 80054cc:	2b01      	cmp	r3, #1
 80054ce:	d119      	bne.n	8005504 <USB_EPStartXfer+0x3c2>
 80054d0:	1d3b      	adds	r3, r7, #4
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	627b      	str	r3, [r7, #36]	; 0x24
 80054d6:	1d3b      	adds	r3, r7, #4
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80054de:	b29b      	uxth	r3, r3
 80054e0:	461a      	mov	r2, r3
 80054e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054e4:	4413      	add	r3, r2
 80054e6:	627b      	str	r3, [r7, #36]	; 0x24
 80054e8:	463b      	mov	r3, r7
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	781b      	ldrb	r3, [r3, #0]
 80054ee:	011a      	lsls	r2, r3, #4
 80054f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054f2:	4413      	add	r3, r2
 80054f4:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80054f8:	623b      	str	r3, [r7, #32]
 80054fa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80054fe:	b29a      	uxth	r2, r3
 8005500:	6a3b      	ldr	r3, [r7, #32]
 8005502:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8005504:	463b      	mov	r3, r7
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	891b      	ldrh	r3, [r3, #8]
 800550a:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800550e:	463b      	mov	r3, r7
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	6959      	ldr	r1, [r3, #20]
 8005514:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005518:	b29b      	uxth	r3, r3
 800551a:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 800551e:	1d38      	adds	r0, r7, #4
 8005520:	6800      	ldr	r0, [r0, #0]
 8005522:	f001 f85c 	bl	80065de <USB_WritePMA>
 8005526:	e33b      	b.n	8005ba0 <USB_EPStartXfer+0xa5e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005528:	463b      	mov	r3, r7
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	785b      	ldrb	r3, [r3, #1]
 800552e:	2b00      	cmp	r3, #0
 8005530:	d164      	bne.n	80055fc <USB_EPStartXfer+0x4ba>
 8005532:	1d3b      	adds	r3, r7, #4
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005538:	1d3b      	adds	r3, r7, #4
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005540:	b29b      	uxth	r3, r3
 8005542:	461a      	mov	r2, r3
 8005544:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005546:	4413      	add	r3, r2
 8005548:	64fb      	str	r3, [r7, #76]	; 0x4c
 800554a:	463b      	mov	r3, r7
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	781b      	ldrb	r3, [r3, #0]
 8005550:	011a      	lsls	r2, r3, #4
 8005552:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005554:	4413      	add	r3, r2
 8005556:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800555a:	64bb      	str	r3, [r7, #72]	; 0x48
 800555c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005560:	2b00      	cmp	r3, #0
 8005562:	d112      	bne.n	800558a <USB_EPStartXfer+0x448>
 8005564:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005566:	881b      	ldrh	r3, [r3, #0]
 8005568:	b29b      	uxth	r3, r3
 800556a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800556e:	b29a      	uxth	r2, r3
 8005570:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005572:	801a      	strh	r2, [r3, #0]
 8005574:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005576:	881b      	ldrh	r3, [r3, #0]
 8005578:	b29b      	uxth	r3, r3
 800557a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800557e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005582:	b29a      	uxth	r2, r3
 8005584:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005586:	801a      	strh	r2, [r3, #0]
 8005588:	e057      	b.n	800563a <USB_EPStartXfer+0x4f8>
 800558a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800558e:	2b3e      	cmp	r3, #62	; 0x3e
 8005590:	d817      	bhi.n	80055c2 <USB_EPStartXfer+0x480>
 8005592:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005596:	085b      	lsrs	r3, r3, #1
 8005598:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800559c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80055a0:	f003 0301 	and.w	r3, r3, #1
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d004      	beq.n	80055b2 <USB_EPStartXfer+0x470>
 80055a8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80055ac:	3301      	adds	r3, #1
 80055ae:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80055b2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80055b6:	b29b      	uxth	r3, r3
 80055b8:	029b      	lsls	r3, r3, #10
 80055ba:	b29a      	uxth	r2, r3
 80055bc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80055be:	801a      	strh	r2, [r3, #0]
 80055c0:	e03b      	b.n	800563a <USB_EPStartXfer+0x4f8>
 80055c2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80055c6:	095b      	lsrs	r3, r3, #5
 80055c8:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80055cc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80055d0:	f003 031f 	and.w	r3, r3, #31
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d104      	bne.n	80055e2 <USB_EPStartXfer+0x4a0>
 80055d8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80055dc:	3b01      	subs	r3, #1
 80055de:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80055e2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80055e6:	b29b      	uxth	r3, r3
 80055e8:	029b      	lsls	r3, r3, #10
 80055ea:	b29b      	uxth	r3, r3
 80055ec:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80055f0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80055f4:	b29a      	uxth	r2, r3
 80055f6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80055f8:	801a      	strh	r2, [r3, #0]
 80055fa:	e01e      	b.n	800563a <USB_EPStartXfer+0x4f8>
 80055fc:	463b      	mov	r3, r7
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	785b      	ldrb	r3, [r3, #1]
 8005602:	2b01      	cmp	r3, #1
 8005604:	d119      	bne.n	800563a <USB_EPStartXfer+0x4f8>
 8005606:	1d3b      	adds	r3, r7, #4
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	657b      	str	r3, [r7, #84]	; 0x54
 800560c:	1d3b      	adds	r3, r7, #4
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005614:	b29b      	uxth	r3, r3
 8005616:	461a      	mov	r2, r3
 8005618:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800561a:	4413      	add	r3, r2
 800561c:	657b      	str	r3, [r7, #84]	; 0x54
 800561e:	463b      	mov	r3, r7
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	781b      	ldrb	r3, [r3, #0]
 8005624:	011a      	lsls	r2, r3, #4
 8005626:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005628:	4413      	add	r3, r2
 800562a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800562e:	653b      	str	r3, [r7, #80]	; 0x50
 8005630:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005634:	b29a      	uxth	r2, r3
 8005636:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005638:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800563a:	463b      	mov	r3, r7
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	891b      	ldrh	r3, [r3, #8]
 8005640:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005644:	463b      	mov	r3, r7
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	6959      	ldr	r1, [r3, #20]
 800564a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800564e:	b29b      	uxth	r3, r3
 8005650:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8005654:	1d38      	adds	r0, r7, #4
 8005656:	6800      	ldr	r0, [r0, #0]
 8005658:	f000 ffc1 	bl	80065de <USB_WritePMA>
            ep->xfer_buff += len;
 800565c:	463b      	mov	r3, r7
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	695a      	ldr	r2, [r3, #20]
 8005662:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005666:	441a      	add	r2, r3
 8005668:	463b      	mov	r3, r7
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800566e:	463b      	mov	r3, r7
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	6a1a      	ldr	r2, [r3, #32]
 8005674:	463b      	mov	r3, r7
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	691b      	ldr	r3, [r3, #16]
 800567a:	429a      	cmp	r2, r3
 800567c:	d909      	bls.n	8005692 <USB_EPStartXfer+0x550>
            {
              ep->xfer_len_db -= len;
 800567e:	463b      	mov	r3, r7
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	6a1a      	ldr	r2, [r3, #32]
 8005684:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005688:	1ad2      	subs	r2, r2, r3
 800568a:	463b      	mov	r3, r7
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	621a      	str	r2, [r3, #32]
 8005690:	e008      	b.n	80056a4 <USB_EPStartXfer+0x562>
            }
            else
            {
              len = ep->xfer_len_db;
 8005692:	463b      	mov	r3, r7
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	6a1b      	ldr	r3, [r3, #32]
 8005698:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
              ep->xfer_len_db = 0U;
 800569c:	463b      	mov	r3, r7
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	2200      	movs	r2, #0
 80056a2:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80056a4:	1d3b      	adds	r3, r7, #4
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	647b      	str	r3, [r7, #68]	; 0x44
 80056aa:	463b      	mov	r3, r7
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	785b      	ldrb	r3, [r3, #1]
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d164      	bne.n	800577e <USB_EPStartXfer+0x63c>
 80056b4:	1d3b      	adds	r3, r7, #4
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80056ba:	1d3b      	adds	r3, r7, #4
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80056c2:	b29b      	uxth	r3, r3
 80056c4:	461a      	mov	r2, r3
 80056c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80056c8:	4413      	add	r3, r2
 80056ca:	63fb      	str	r3, [r7, #60]	; 0x3c
 80056cc:	463b      	mov	r3, r7
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	781b      	ldrb	r3, [r3, #0]
 80056d2:	011a      	lsls	r2, r3, #4
 80056d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80056d6:	4413      	add	r3, r2
 80056d8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80056dc:	63bb      	str	r3, [r7, #56]	; 0x38
 80056de:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d112      	bne.n	800570c <USB_EPStartXfer+0x5ca>
 80056e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056e8:	881b      	ldrh	r3, [r3, #0]
 80056ea:	b29b      	uxth	r3, r3
 80056ec:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80056f0:	b29a      	uxth	r2, r3
 80056f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056f4:	801a      	strh	r2, [r3, #0]
 80056f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056f8:	881b      	ldrh	r3, [r3, #0]
 80056fa:	b29b      	uxth	r3, r3
 80056fc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005700:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005704:	b29a      	uxth	r2, r3
 8005706:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005708:	801a      	strh	r2, [r3, #0]
 800570a:	e054      	b.n	80057b6 <USB_EPStartXfer+0x674>
 800570c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005710:	2b3e      	cmp	r3, #62	; 0x3e
 8005712:	d817      	bhi.n	8005744 <USB_EPStartXfer+0x602>
 8005714:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005718:	085b      	lsrs	r3, r3, #1
 800571a:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800571e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005722:	f003 0301 	and.w	r3, r3, #1
 8005726:	2b00      	cmp	r3, #0
 8005728:	d004      	beq.n	8005734 <USB_EPStartXfer+0x5f2>
 800572a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800572e:	3301      	adds	r3, #1
 8005730:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8005734:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005738:	b29b      	uxth	r3, r3
 800573a:	029b      	lsls	r3, r3, #10
 800573c:	b29a      	uxth	r2, r3
 800573e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005740:	801a      	strh	r2, [r3, #0]
 8005742:	e038      	b.n	80057b6 <USB_EPStartXfer+0x674>
 8005744:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005748:	095b      	lsrs	r3, r3, #5
 800574a:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800574e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005752:	f003 031f 	and.w	r3, r3, #31
 8005756:	2b00      	cmp	r3, #0
 8005758:	d104      	bne.n	8005764 <USB_EPStartXfer+0x622>
 800575a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800575e:	3b01      	subs	r3, #1
 8005760:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8005764:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005768:	b29b      	uxth	r3, r3
 800576a:	029b      	lsls	r3, r3, #10
 800576c:	b29b      	uxth	r3, r3
 800576e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005772:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005776:	b29a      	uxth	r2, r3
 8005778:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800577a:	801a      	strh	r2, [r3, #0]
 800577c:	e01b      	b.n	80057b6 <USB_EPStartXfer+0x674>
 800577e:	463b      	mov	r3, r7
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	785b      	ldrb	r3, [r3, #1]
 8005784:	2b01      	cmp	r3, #1
 8005786:	d116      	bne.n	80057b6 <USB_EPStartXfer+0x674>
 8005788:	1d3b      	adds	r3, r7, #4
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005790:	b29b      	uxth	r3, r3
 8005792:	461a      	mov	r2, r3
 8005794:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005796:	4413      	add	r3, r2
 8005798:	647b      	str	r3, [r7, #68]	; 0x44
 800579a:	463b      	mov	r3, r7
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	781b      	ldrb	r3, [r3, #0]
 80057a0:	011a      	lsls	r2, r3, #4
 80057a2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80057a4:	4413      	add	r3, r2
 80057a6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80057aa:	643b      	str	r3, [r7, #64]	; 0x40
 80057ac:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80057b0:	b29a      	uxth	r2, r3
 80057b2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80057b4:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80057b6:	463b      	mov	r3, r7
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	895b      	ldrh	r3, [r3, #10]
 80057bc:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80057c0:	463b      	mov	r3, r7
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	6959      	ldr	r1, [r3, #20]
 80057c6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80057ca:	b29b      	uxth	r3, r3
 80057cc:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 80057d0:	1d38      	adds	r0, r7, #4
 80057d2:	6800      	ldr	r0, [r0, #0]
 80057d4:	f000 ff03 	bl	80065de <USB_WritePMA>
 80057d8:	e1e2      	b.n	8005ba0 <USB_EPStartXfer+0xa5e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 80057da:	463b      	mov	r3, r7
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	6a1b      	ldr	r3, [r3, #32]
 80057e0:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c

          /* disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 80057e4:	1d3b      	adds	r3, r7, #4
 80057e6:	681a      	ldr	r2, [r3, #0]
 80057e8:	463b      	mov	r3, r7
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	781b      	ldrb	r3, [r3, #0]
 80057ee:	009b      	lsls	r3, r3, #2
 80057f0:	4413      	add	r3, r2
 80057f2:	881b      	ldrh	r3, [r3, #0]
 80057f4:	b29b      	uxth	r3, r3
 80057f6:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 80057fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80057fe:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 8005802:	1d3b      	adds	r3, r7, #4
 8005804:	681a      	ldr	r2, [r3, #0]
 8005806:	463b      	mov	r3, r7
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	781b      	ldrb	r3, [r3, #0]
 800580c:	009b      	lsls	r3, r3, #2
 800580e:	441a      	add	r2, r3
 8005810:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8005814:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005818:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800581c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005820:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005824:	b29b      	uxth	r3, r3
 8005826:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8005828:	1d3b      	adds	r3, r7, #4
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	663b      	str	r3, [r7, #96]	; 0x60
 800582e:	1d3b      	adds	r3, r7, #4
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005836:	b29b      	uxth	r3, r3
 8005838:	461a      	mov	r2, r3
 800583a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800583c:	4413      	add	r3, r2
 800583e:	663b      	str	r3, [r7, #96]	; 0x60
 8005840:	463b      	mov	r3, r7
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	781b      	ldrb	r3, [r3, #0]
 8005846:	011a      	lsls	r2, r3, #4
 8005848:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800584a:	4413      	add	r3, r2
 800584c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005850:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005852:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005856:	b29a      	uxth	r2, r3
 8005858:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800585a:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800585c:	463b      	mov	r3, r7
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	891b      	ldrh	r3, [r3, #8]
 8005862:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005866:	463b      	mov	r3, r7
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	6959      	ldr	r1, [r3, #20]
 800586c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005870:	b29b      	uxth	r3, r3
 8005872:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8005876:	1d38      	adds	r0, r7, #4
 8005878:	6800      	ldr	r0, [r0, #0]
 800587a:	f000 feb0 	bl	80065de <USB_WritePMA>
 800587e:	e18f      	b.n	8005ba0 <USB_EPStartXfer+0xa5e>

      /* manage isochronous double buffer IN mode */
      else
      {
        /* Write the data to the USB endpoint */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8005880:	1d3b      	adds	r3, r7, #4
 8005882:	681a      	ldr	r2, [r3, #0]
 8005884:	463b      	mov	r3, r7
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	781b      	ldrb	r3, [r3, #0]
 800588a:	009b      	lsls	r3, r3, #2
 800588c:	4413      	add	r3, r2
 800588e:	881b      	ldrh	r3, [r3, #0]
 8005890:	b29b      	uxth	r3, r3
 8005892:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005896:	2b00      	cmp	r3, #0
 8005898:	f000 808f 	beq.w	80059ba <USB_EPStartXfer+0x878>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800589c:	1d3b      	adds	r3, r7, #4
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	67bb      	str	r3, [r7, #120]	; 0x78
 80058a2:	463b      	mov	r3, r7
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	785b      	ldrb	r3, [r3, #1]
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d164      	bne.n	8005976 <USB_EPStartXfer+0x834>
 80058ac:	1d3b      	adds	r3, r7, #4
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	673b      	str	r3, [r7, #112]	; 0x70
 80058b2:	1d3b      	adds	r3, r7, #4
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80058ba:	b29b      	uxth	r3, r3
 80058bc:	461a      	mov	r2, r3
 80058be:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80058c0:	4413      	add	r3, r2
 80058c2:	673b      	str	r3, [r7, #112]	; 0x70
 80058c4:	463b      	mov	r3, r7
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	781b      	ldrb	r3, [r3, #0]
 80058ca:	011a      	lsls	r2, r3, #4
 80058cc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80058ce:	4413      	add	r3, r2
 80058d0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80058d4:	66fb      	str	r3, [r7, #108]	; 0x6c
 80058d6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d112      	bne.n	8005904 <USB_EPStartXfer+0x7c2>
 80058de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80058e0:	881b      	ldrh	r3, [r3, #0]
 80058e2:	b29b      	uxth	r3, r3
 80058e4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80058e8:	b29a      	uxth	r2, r3
 80058ea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80058ec:	801a      	strh	r2, [r3, #0]
 80058ee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80058f0:	881b      	ldrh	r3, [r3, #0]
 80058f2:	b29b      	uxth	r3, r3
 80058f4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80058f8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80058fc:	b29a      	uxth	r2, r3
 80058fe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005900:	801a      	strh	r2, [r3, #0]
 8005902:	e054      	b.n	80059ae <USB_EPStartXfer+0x86c>
 8005904:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005908:	2b3e      	cmp	r3, #62	; 0x3e
 800590a:	d817      	bhi.n	800593c <USB_EPStartXfer+0x7fa>
 800590c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005910:	085b      	lsrs	r3, r3, #1
 8005912:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8005916:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800591a:	f003 0301 	and.w	r3, r3, #1
 800591e:	2b00      	cmp	r3, #0
 8005920:	d004      	beq.n	800592c <USB_EPStartXfer+0x7ea>
 8005922:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005926:	3301      	adds	r3, #1
 8005928:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800592c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005930:	b29b      	uxth	r3, r3
 8005932:	029b      	lsls	r3, r3, #10
 8005934:	b29a      	uxth	r2, r3
 8005936:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005938:	801a      	strh	r2, [r3, #0]
 800593a:	e038      	b.n	80059ae <USB_EPStartXfer+0x86c>
 800593c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005940:	095b      	lsrs	r3, r3, #5
 8005942:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8005946:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800594a:	f003 031f 	and.w	r3, r3, #31
 800594e:	2b00      	cmp	r3, #0
 8005950:	d104      	bne.n	800595c <USB_EPStartXfer+0x81a>
 8005952:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005956:	3b01      	subs	r3, #1
 8005958:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800595c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005960:	b29b      	uxth	r3, r3
 8005962:	029b      	lsls	r3, r3, #10
 8005964:	b29b      	uxth	r3, r3
 8005966:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800596a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800596e:	b29a      	uxth	r2, r3
 8005970:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005972:	801a      	strh	r2, [r3, #0]
 8005974:	e01b      	b.n	80059ae <USB_EPStartXfer+0x86c>
 8005976:	463b      	mov	r3, r7
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	785b      	ldrb	r3, [r3, #1]
 800597c:	2b01      	cmp	r3, #1
 800597e:	d116      	bne.n	80059ae <USB_EPStartXfer+0x86c>
 8005980:	1d3b      	adds	r3, r7, #4
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005988:	b29b      	uxth	r3, r3
 800598a:	461a      	mov	r2, r3
 800598c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800598e:	4413      	add	r3, r2
 8005990:	67bb      	str	r3, [r7, #120]	; 0x78
 8005992:	463b      	mov	r3, r7
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	781b      	ldrb	r3, [r3, #0]
 8005998:	011a      	lsls	r2, r3, #4
 800599a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800599c:	4413      	add	r3, r2
 800599e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80059a2:	677b      	str	r3, [r7, #116]	; 0x74
 80059a4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80059a8:	b29a      	uxth	r2, r3
 80059aa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80059ac:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 80059ae:	463b      	mov	r3, r7
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	895b      	ldrh	r3, [r3, #10]
 80059b4:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a
 80059b8:	e097      	b.n	8005aea <USB_EPStartXfer+0x9a8>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80059ba:	463b      	mov	r3, r7
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	785b      	ldrb	r3, [r3, #1]
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d168      	bne.n	8005a96 <USB_EPStartXfer+0x954>
 80059c4:	1d3b      	adds	r3, r7, #4
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80059cc:	1d3b      	adds	r3, r7, #4
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80059d4:	b29b      	uxth	r3, r3
 80059d6:	461a      	mov	r2, r3
 80059d8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80059dc:	4413      	add	r3, r2
 80059de:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80059e2:	463b      	mov	r3, r7
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	781b      	ldrb	r3, [r3, #0]
 80059e8:	011a      	lsls	r2, r3, #4
 80059ea:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80059ee:	4413      	add	r3, r2
 80059f0:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80059f4:	67fb      	str	r3, [r7, #124]	; 0x7c
 80059f6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d112      	bne.n	8005a24 <USB_EPStartXfer+0x8e2>
 80059fe:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005a00:	881b      	ldrh	r3, [r3, #0]
 8005a02:	b29b      	uxth	r3, r3
 8005a04:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005a08:	b29a      	uxth	r2, r3
 8005a0a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005a0c:	801a      	strh	r2, [r3, #0]
 8005a0e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005a10:	881b      	ldrh	r3, [r3, #0]
 8005a12:	b29b      	uxth	r3, r3
 8005a14:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005a18:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005a1c:	b29a      	uxth	r2, r3
 8005a1e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005a20:	801a      	strh	r2, [r3, #0]
 8005a22:	e05d      	b.n	8005ae0 <USB_EPStartXfer+0x99e>
 8005a24:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005a28:	2b3e      	cmp	r3, #62	; 0x3e
 8005a2a:	d817      	bhi.n	8005a5c <USB_EPStartXfer+0x91a>
 8005a2c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005a30:	085b      	lsrs	r3, r3, #1
 8005a32:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8005a36:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005a3a:	f003 0301 	and.w	r3, r3, #1
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d004      	beq.n	8005a4c <USB_EPStartXfer+0x90a>
 8005a42:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8005a46:	3301      	adds	r3, #1
 8005a48:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8005a4c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8005a50:	b29b      	uxth	r3, r3
 8005a52:	029b      	lsls	r3, r3, #10
 8005a54:	b29a      	uxth	r2, r3
 8005a56:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005a58:	801a      	strh	r2, [r3, #0]
 8005a5a:	e041      	b.n	8005ae0 <USB_EPStartXfer+0x99e>
 8005a5c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005a60:	095b      	lsrs	r3, r3, #5
 8005a62:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8005a66:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005a6a:	f003 031f 	and.w	r3, r3, #31
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d104      	bne.n	8005a7c <USB_EPStartXfer+0x93a>
 8005a72:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8005a76:	3b01      	subs	r3, #1
 8005a78:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8005a7c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8005a80:	b29b      	uxth	r3, r3
 8005a82:	029b      	lsls	r3, r3, #10
 8005a84:	b29b      	uxth	r3, r3
 8005a86:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005a8a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005a8e:	b29a      	uxth	r2, r3
 8005a90:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005a92:	801a      	strh	r2, [r3, #0]
 8005a94:	e024      	b.n	8005ae0 <USB_EPStartXfer+0x99e>
 8005a96:	463b      	mov	r3, r7
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	785b      	ldrb	r3, [r3, #1]
 8005a9c:	2b01      	cmp	r3, #1
 8005a9e:	d11f      	bne.n	8005ae0 <USB_EPStartXfer+0x99e>
 8005aa0:	1d3b      	adds	r3, r7, #4
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005aa8:	1d3b      	adds	r3, r7, #4
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005ab0:	b29b      	uxth	r3, r3
 8005ab2:	461a      	mov	r2, r3
 8005ab4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005ab8:	4413      	add	r3, r2
 8005aba:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005abe:	463b      	mov	r3, r7
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	781b      	ldrb	r3, [r3, #0]
 8005ac4:	011a      	lsls	r2, r3, #4
 8005ac6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005aca:	4413      	add	r3, r2
 8005acc:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005ad0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005ad4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005ad8:	b29a      	uxth	r2, r3
 8005ada:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005ade:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8005ae0:	463b      	mov	r3, r7
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	891b      	ldrh	r3, [r3, #8]
 8005ae6:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a
        }

        USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005aea:	463b      	mov	r3, r7
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	6959      	ldr	r1, [r3, #20]
 8005af0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005af4:	b29b      	uxth	r3, r3
 8005af6:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8005afa:	1d38      	adds	r0, r7, #4
 8005afc:	6800      	ldr	r0, [r0, #0]
 8005afe:	f000 fd6e 	bl	80065de <USB_WritePMA>
        PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 8005b02:	463b      	mov	r3, r7
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	785b      	ldrb	r3, [r3, #1]
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d122      	bne.n	8005b52 <USB_EPStartXfer+0xa10>
 8005b0c:	1d3b      	adds	r3, r7, #4
 8005b0e:	681a      	ldr	r2, [r3, #0]
 8005b10:	463b      	mov	r3, r7
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	781b      	ldrb	r3, [r3, #0]
 8005b16:	009b      	lsls	r3, r3, #2
 8005b18:	4413      	add	r3, r2
 8005b1a:	881b      	ldrh	r3, [r3, #0]
 8005b1c:	b29b      	uxth	r3, r3
 8005b1e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005b22:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b26:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
 8005b2a:	1d3b      	adds	r3, r7, #4
 8005b2c:	681a      	ldr	r2, [r3, #0]
 8005b2e:	463b      	mov	r3, r7
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	781b      	ldrb	r3, [r3, #0]
 8005b34:	009b      	lsls	r3, r3, #2
 8005b36:	441a      	add	r2, r3
 8005b38:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 8005b3c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005b40:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005b44:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005b48:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005b4c:	b29b      	uxth	r3, r3
 8005b4e:	8013      	strh	r3, [r2, #0]
 8005b50:	e026      	b.n	8005ba0 <USB_EPStartXfer+0xa5e>
 8005b52:	463b      	mov	r3, r7
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	785b      	ldrb	r3, [r3, #1]
 8005b58:	2b01      	cmp	r3, #1
 8005b5a:	d121      	bne.n	8005ba0 <USB_EPStartXfer+0xa5e>
 8005b5c:	1d3b      	adds	r3, r7, #4
 8005b5e:	681a      	ldr	r2, [r3, #0]
 8005b60:	463b      	mov	r3, r7
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	781b      	ldrb	r3, [r3, #0]
 8005b66:	009b      	lsls	r3, r3, #2
 8005b68:	4413      	add	r3, r2
 8005b6a:	881b      	ldrh	r3, [r3, #0]
 8005b6c:	b29b      	uxth	r3, r3
 8005b6e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005b72:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b76:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
 8005b7a:	1d3b      	adds	r3, r7, #4
 8005b7c:	681a      	ldr	r2, [r3, #0]
 8005b7e:	463b      	mov	r3, r7
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	781b      	ldrb	r3, [r3, #0]
 8005b84:	009b      	lsls	r3, r3, #2
 8005b86:	441a      	add	r2, r3
 8005b88:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
 8005b8c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005b90:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005b94:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005b98:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005b9c:	b29b      	uxth	r3, r3
 8005b9e:	8013      	strh	r3, [r2, #0]
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8005ba0:	1d3b      	adds	r3, r7, #4
 8005ba2:	681a      	ldr	r2, [r3, #0]
 8005ba4:	463b      	mov	r3, r7
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	781b      	ldrb	r3, [r3, #0]
 8005baa:	009b      	lsls	r3, r3, #2
 8005bac:	4413      	add	r3, r2
 8005bae:	881b      	ldrh	r3, [r3, #0]
 8005bb0:	b29b      	uxth	r3, r3
 8005bb2:	f107 020e 	add.w	r2, r7, #14
 8005bb6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005bba:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005bbe:	8013      	strh	r3, [r2, #0]
 8005bc0:	f107 030e 	add.w	r3, r7, #14
 8005bc4:	f107 020e 	add.w	r2, r7, #14
 8005bc8:	8812      	ldrh	r2, [r2, #0]
 8005bca:	f082 0210 	eor.w	r2, r2, #16
 8005bce:	801a      	strh	r2, [r3, #0]
 8005bd0:	f107 030e 	add.w	r3, r7, #14
 8005bd4:	f107 020e 	add.w	r2, r7, #14
 8005bd8:	8812      	ldrh	r2, [r2, #0]
 8005bda:	f082 0220 	eor.w	r2, r2, #32
 8005bde:	801a      	strh	r2, [r3, #0]
 8005be0:	1d3b      	adds	r3, r7, #4
 8005be2:	681a      	ldr	r2, [r3, #0]
 8005be4:	463b      	mov	r3, r7
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	781b      	ldrb	r3, [r3, #0]
 8005bea:	009b      	lsls	r3, r3, #2
 8005bec:	441a      	add	r2, r3
 8005bee:	f107 030e 	add.w	r3, r7, #14
 8005bf2:	881b      	ldrh	r3, [r3, #0]
 8005bf4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005bf8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005bfc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005c00:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005c04:	b29b      	uxth	r3, r3
 8005c06:	8013      	strh	r3, [r2, #0]
 8005c08:	e3b5      	b.n	8006376 <USB_EPStartXfer+0x1234>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8005c0a:	463b      	mov	r3, r7
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	7b1b      	ldrb	r3, [r3, #12]
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	f040 8090 	bne.w	8005d36 <USB_EPStartXfer+0xbf4>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8005c16:	463b      	mov	r3, r7
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	699a      	ldr	r2, [r3, #24]
 8005c1c:	463b      	mov	r3, r7
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	691b      	ldr	r3, [r3, #16]
 8005c22:	429a      	cmp	r2, r3
 8005c24:	d90e      	bls.n	8005c44 <USB_EPStartXfer+0xb02>
      {
        len = ep->maxpacket;
 8005c26:	463b      	mov	r3, r7
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	691b      	ldr	r3, [r3, #16]
 8005c2c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        ep->xfer_len -= len;
 8005c30:	463b      	mov	r3, r7
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	699a      	ldr	r2, [r3, #24]
 8005c36:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005c3a:	1ad2      	subs	r2, r2, r3
 8005c3c:	463b      	mov	r3, r7
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	619a      	str	r2, [r3, #24]
 8005c42:	e008      	b.n	8005c56 <USB_EPStartXfer+0xb14>
      }
      else
      {
        len = ep->xfer_len;
 8005c44:	463b      	mov	r3, r7
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	699b      	ldr	r3, [r3, #24]
 8005c4a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        ep->xfer_len = 0U;
 8005c4e:	463b      	mov	r3, r7
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	2200      	movs	r2, #0
 8005c54:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8005c56:	1d3b      	adds	r3, r7, #4
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8005c5e:	1d3b      	adds	r3, r7, #4
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005c66:	b29b      	uxth	r3, r3
 8005c68:	461a      	mov	r2, r3
 8005c6a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8005c6e:	4413      	add	r3, r2
 8005c70:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8005c74:	463b      	mov	r3, r7
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	781b      	ldrb	r3, [r3, #0]
 8005c7a:	011a      	lsls	r2, r3, #4
 8005c7c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8005c80:	4413      	add	r3, r2
 8005c82:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005c86:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005c8a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d116      	bne.n	8005cc0 <USB_EPStartXfer+0xb7e>
 8005c92:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005c96:	881b      	ldrh	r3, [r3, #0]
 8005c98:	b29b      	uxth	r3, r3
 8005c9a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005c9e:	b29a      	uxth	r2, r3
 8005ca0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005ca4:	801a      	strh	r2, [r3, #0]
 8005ca6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005caa:	881b      	ldrh	r3, [r3, #0]
 8005cac:	b29b      	uxth	r3, r3
 8005cae:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005cb2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005cb6:	b29a      	uxth	r2, r3
 8005cb8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005cbc:	801a      	strh	r2, [r3, #0]
 8005cbe:	e32c      	b.n	800631a <USB_EPStartXfer+0x11d8>
 8005cc0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005cc4:	2b3e      	cmp	r3, #62	; 0x3e
 8005cc6:	d818      	bhi.n	8005cfa <USB_EPStartXfer+0xbb8>
 8005cc8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005ccc:	085b      	lsrs	r3, r3, #1
 8005cce:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8005cd2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005cd6:	f003 0301 	and.w	r3, r3, #1
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d004      	beq.n	8005ce8 <USB_EPStartXfer+0xba6>
 8005cde:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8005ce2:	3301      	adds	r3, #1
 8005ce4:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8005ce8:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8005cec:	b29b      	uxth	r3, r3
 8005cee:	029b      	lsls	r3, r3, #10
 8005cf0:	b29a      	uxth	r2, r3
 8005cf2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005cf6:	801a      	strh	r2, [r3, #0]
 8005cf8:	e30f      	b.n	800631a <USB_EPStartXfer+0x11d8>
 8005cfa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005cfe:	095b      	lsrs	r3, r3, #5
 8005d00:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8005d04:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005d08:	f003 031f 	and.w	r3, r3, #31
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d104      	bne.n	8005d1a <USB_EPStartXfer+0xbd8>
 8005d10:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8005d14:	3b01      	subs	r3, #1
 8005d16:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8005d1a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8005d1e:	b29b      	uxth	r3, r3
 8005d20:	029b      	lsls	r3, r3, #10
 8005d22:	b29b      	uxth	r3, r3
 8005d24:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005d28:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005d2c:	b29a      	uxth	r2, r3
 8005d2e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005d32:	801a      	strh	r2, [r3, #0]
 8005d34:	e2f1      	b.n	800631a <USB_EPStartXfer+0x11d8>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8005d36:	463b      	mov	r3, r7
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	78db      	ldrb	r3, [r3, #3]
 8005d3c:	2b02      	cmp	r3, #2
 8005d3e:	f040 818f 	bne.w	8006060 <USB_EPStartXfer+0xf1e>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8005d42:	463b      	mov	r3, r7
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	785b      	ldrb	r3, [r3, #1]
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d175      	bne.n	8005e38 <USB_EPStartXfer+0xcf6>
 8005d4c:	1d3b      	adds	r3, r7, #4
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005d54:	1d3b      	adds	r3, r7, #4
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005d5c:	b29b      	uxth	r3, r3
 8005d5e:	461a      	mov	r2, r3
 8005d60:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8005d64:	4413      	add	r3, r2
 8005d66:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005d6a:	463b      	mov	r3, r7
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	781b      	ldrb	r3, [r3, #0]
 8005d70:	011a      	lsls	r2, r3, #4
 8005d72:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8005d76:	4413      	add	r3, r2
 8005d78:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005d7c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005d80:	463b      	mov	r3, r7
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	691b      	ldr	r3, [r3, #16]
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d116      	bne.n	8005db8 <USB_EPStartXfer+0xc76>
 8005d8a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005d8e:	881b      	ldrh	r3, [r3, #0]
 8005d90:	b29b      	uxth	r3, r3
 8005d92:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005d96:	b29a      	uxth	r2, r3
 8005d98:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005d9c:	801a      	strh	r2, [r3, #0]
 8005d9e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005da2:	881b      	ldrh	r3, [r3, #0]
 8005da4:	b29b      	uxth	r3, r3
 8005da6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005daa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005dae:	b29a      	uxth	r2, r3
 8005db0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005db4:	801a      	strh	r2, [r3, #0]
 8005db6:	e065      	b.n	8005e84 <USB_EPStartXfer+0xd42>
 8005db8:	463b      	mov	r3, r7
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	691b      	ldr	r3, [r3, #16]
 8005dbe:	2b3e      	cmp	r3, #62	; 0x3e
 8005dc0:	d81a      	bhi.n	8005df8 <USB_EPStartXfer+0xcb6>
 8005dc2:	463b      	mov	r3, r7
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	691b      	ldr	r3, [r3, #16]
 8005dc8:	085b      	lsrs	r3, r3, #1
 8005dca:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005dce:	463b      	mov	r3, r7
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	691b      	ldr	r3, [r3, #16]
 8005dd4:	f003 0301 	and.w	r3, r3, #1
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d004      	beq.n	8005de6 <USB_EPStartXfer+0xca4>
 8005ddc:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005de0:	3301      	adds	r3, #1
 8005de2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005de6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005dea:	b29b      	uxth	r3, r3
 8005dec:	029b      	lsls	r3, r3, #10
 8005dee:	b29a      	uxth	r2, r3
 8005df0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005df4:	801a      	strh	r2, [r3, #0]
 8005df6:	e045      	b.n	8005e84 <USB_EPStartXfer+0xd42>
 8005df8:	463b      	mov	r3, r7
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	691b      	ldr	r3, [r3, #16]
 8005dfe:	095b      	lsrs	r3, r3, #5
 8005e00:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005e04:	463b      	mov	r3, r7
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	691b      	ldr	r3, [r3, #16]
 8005e0a:	f003 031f 	and.w	r3, r3, #31
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d104      	bne.n	8005e1c <USB_EPStartXfer+0xcda>
 8005e12:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005e16:	3b01      	subs	r3, #1
 8005e18:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005e1c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005e20:	b29b      	uxth	r3, r3
 8005e22:	029b      	lsls	r3, r3, #10
 8005e24:	b29b      	uxth	r3, r3
 8005e26:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005e2a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005e2e:	b29a      	uxth	r2, r3
 8005e30:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005e34:	801a      	strh	r2, [r3, #0]
 8005e36:	e025      	b.n	8005e84 <USB_EPStartXfer+0xd42>
 8005e38:	463b      	mov	r3, r7
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	785b      	ldrb	r3, [r3, #1]
 8005e3e:	2b01      	cmp	r3, #1
 8005e40:	d120      	bne.n	8005e84 <USB_EPStartXfer+0xd42>
 8005e42:	1d3b      	adds	r3, r7, #4
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005e4a:	1d3b      	adds	r3, r7, #4
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005e52:	b29b      	uxth	r3, r3
 8005e54:	461a      	mov	r2, r3
 8005e56:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005e5a:	4413      	add	r3, r2
 8005e5c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005e60:	463b      	mov	r3, r7
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	781b      	ldrb	r3, [r3, #0]
 8005e66:	011a      	lsls	r2, r3, #4
 8005e68:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005e6c:	4413      	add	r3, r2
 8005e6e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005e72:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005e76:	463b      	mov	r3, r7
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	691b      	ldr	r3, [r3, #16]
 8005e7c:	b29a      	uxth	r2, r3
 8005e7e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8005e82:	801a      	strh	r2, [r3, #0]
 8005e84:	1d3b      	adds	r3, r7, #4
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005e8c:	463b      	mov	r3, r7
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	785b      	ldrb	r3, [r3, #1]
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d175      	bne.n	8005f82 <USB_EPStartXfer+0xe40>
 8005e96:	1d3b      	adds	r3, r7, #4
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005e9e:	1d3b      	adds	r3, r7, #4
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005ea6:	b29b      	uxth	r3, r3
 8005ea8:	461a      	mov	r2, r3
 8005eaa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005eae:	4413      	add	r3, r2
 8005eb0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005eb4:	463b      	mov	r3, r7
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	781b      	ldrb	r3, [r3, #0]
 8005eba:	011a      	lsls	r2, r3, #4
 8005ebc:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005ec0:	4413      	add	r3, r2
 8005ec2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005ec6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005eca:	463b      	mov	r3, r7
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	691b      	ldr	r3, [r3, #16]
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d116      	bne.n	8005f02 <USB_EPStartXfer+0xdc0>
 8005ed4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005ed8:	881b      	ldrh	r3, [r3, #0]
 8005eda:	b29b      	uxth	r3, r3
 8005edc:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005ee0:	b29a      	uxth	r2, r3
 8005ee2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005ee6:	801a      	strh	r2, [r3, #0]
 8005ee8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005eec:	881b      	ldrh	r3, [r3, #0]
 8005eee:	b29b      	uxth	r3, r3
 8005ef0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005ef4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005ef8:	b29a      	uxth	r2, r3
 8005efa:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005efe:	801a      	strh	r2, [r3, #0]
 8005f00:	e061      	b.n	8005fc6 <USB_EPStartXfer+0xe84>
 8005f02:	463b      	mov	r3, r7
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	691b      	ldr	r3, [r3, #16]
 8005f08:	2b3e      	cmp	r3, #62	; 0x3e
 8005f0a:	d81a      	bhi.n	8005f42 <USB_EPStartXfer+0xe00>
 8005f0c:	463b      	mov	r3, r7
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	691b      	ldr	r3, [r3, #16]
 8005f12:	085b      	lsrs	r3, r3, #1
 8005f14:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005f18:	463b      	mov	r3, r7
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	691b      	ldr	r3, [r3, #16]
 8005f1e:	f003 0301 	and.w	r3, r3, #1
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d004      	beq.n	8005f30 <USB_EPStartXfer+0xdee>
 8005f26:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005f2a:	3301      	adds	r3, #1
 8005f2c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005f30:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005f34:	b29b      	uxth	r3, r3
 8005f36:	029b      	lsls	r3, r3, #10
 8005f38:	b29a      	uxth	r2, r3
 8005f3a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005f3e:	801a      	strh	r2, [r3, #0]
 8005f40:	e041      	b.n	8005fc6 <USB_EPStartXfer+0xe84>
 8005f42:	463b      	mov	r3, r7
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	691b      	ldr	r3, [r3, #16]
 8005f48:	095b      	lsrs	r3, r3, #5
 8005f4a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005f4e:	463b      	mov	r3, r7
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	691b      	ldr	r3, [r3, #16]
 8005f54:	f003 031f 	and.w	r3, r3, #31
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d104      	bne.n	8005f66 <USB_EPStartXfer+0xe24>
 8005f5c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005f60:	3b01      	subs	r3, #1
 8005f62:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005f66:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005f6a:	b29b      	uxth	r3, r3
 8005f6c:	029b      	lsls	r3, r3, #10
 8005f6e:	b29b      	uxth	r3, r3
 8005f70:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005f74:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005f78:	b29a      	uxth	r2, r3
 8005f7a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005f7e:	801a      	strh	r2, [r3, #0]
 8005f80:	e021      	b.n	8005fc6 <USB_EPStartXfer+0xe84>
 8005f82:	463b      	mov	r3, r7
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	785b      	ldrb	r3, [r3, #1]
 8005f88:	2b01      	cmp	r3, #1
 8005f8a:	d11c      	bne.n	8005fc6 <USB_EPStartXfer+0xe84>
 8005f8c:	1d3b      	adds	r3, r7, #4
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005f94:	b29b      	uxth	r3, r3
 8005f96:	461a      	mov	r2, r3
 8005f98:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005f9c:	4413      	add	r3, r2
 8005f9e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005fa2:	463b      	mov	r3, r7
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	781b      	ldrb	r3, [r3, #0]
 8005fa8:	011a      	lsls	r2, r3, #4
 8005faa:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005fae:	4413      	add	r3, r2
 8005fb0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005fb4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8005fb8:	463b      	mov	r3, r7
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	691b      	ldr	r3, [r3, #16]
 8005fbe:	b29a      	uxth	r2, r3
 8005fc0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8005fc4:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8005fc6:	463b      	mov	r3, r7
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	69db      	ldr	r3, [r3, #28]
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	f000 81a4 	beq.w	800631a <USB_EPStartXfer+0x11d8>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8005fd2:	1d3b      	adds	r3, r7, #4
 8005fd4:	681a      	ldr	r2, [r3, #0]
 8005fd6:	463b      	mov	r3, r7
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	781b      	ldrb	r3, [r3, #0]
 8005fdc:	009b      	lsls	r3, r3, #2
 8005fde:	4413      	add	r3, r2
 8005fe0:	881b      	ldrh	r3, [r3, #0]
 8005fe2:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8005fe6:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8005fea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d005      	beq.n	8005ffe <USB_EPStartXfer+0xebc>
 8005ff2:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8005ff6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d10d      	bne.n	800601a <USB_EPStartXfer+0xed8>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8005ffe:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8006002:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8006006:	2b00      	cmp	r3, #0
 8006008:	f040 8187 	bne.w	800631a <USB_EPStartXfer+0x11d8>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800600c:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8006010:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006014:	2b00      	cmp	r3, #0
 8006016:	f040 8180 	bne.w	800631a <USB_EPStartXfer+0x11d8>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 800601a:	1d3b      	adds	r3, r7, #4
 800601c:	681a      	ldr	r2, [r3, #0]
 800601e:	463b      	mov	r3, r7
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	781b      	ldrb	r3, [r3, #0]
 8006024:	009b      	lsls	r3, r3, #2
 8006026:	4413      	add	r3, r2
 8006028:	881b      	ldrh	r3, [r3, #0]
 800602a:	b29b      	uxth	r3, r3
 800602c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006030:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006034:	f8a7 3098 	strh.w	r3, [r7, #152]	; 0x98
 8006038:	1d3b      	adds	r3, r7, #4
 800603a:	681a      	ldr	r2, [r3, #0]
 800603c:	463b      	mov	r3, r7
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	781b      	ldrb	r3, [r3, #0]
 8006042:	009b      	lsls	r3, r3, #2
 8006044:	441a      	add	r2, r3
 8006046:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 800604a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800604e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006052:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006056:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800605a:	b29b      	uxth	r3, r3
 800605c:	8013      	strh	r3, [r2, #0]
 800605e:	e15c      	b.n	800631a <USB_EPStartXfer+0x11d8>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8006060:	463b      	mov	r3, r7
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	78db      	ldrb	r3, [r3, #3]
 8006066:	2b01      	cmp	r3, #1
 8006068:	f040 8155 	bne.w	8006316 <USB_EPStartXfer+0x11d4>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 800606c:	463b      	mov	r3, r7
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	699a      	ldr	r2, [r3, #24]
 8006072:	463b      	mov	r3, r7
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	691b      	ldr	r3, [r3, #16]
 8006078:	429a      	cmp	r2, r3
 800607a:	d90e      	bls.n	800609a <USB_EPStartXfer+0xf58>
        {
          len = ep->maxpacket;
 800607c:	463b      	mov	r3, r7
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	691b      	ldr	r3, [r3, #16]
 8006082:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
          ep->xfer_len -= len;
 8006086:	463b      	mov	r3, r7
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	699a      	ldr	r2, [r3, #24]
 800608c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006090:	1ad2      	subs	r2, r2, r3
 8006092:	463b      	mov	r3, r7
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	619a      	str	r2, [r3, #24]
 8006098:	e008      	b.n	80060ac <USB_EPStartXfer+0xf6a>
        }
        else
        {
          len = ep->xfer_len;
 800609a:	463b      	mov	r3, r7
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	699b      	ldr	r3, [r3, #24]
 80060a0:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
          ep->xfer_len = 0U;
 80060a4:	463b      	mov	r3, r7
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	2200      	movs	r2, #0
 80060aa:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 80060ac:	463b      	mov	r3, r7
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	785b      	ldrb	r3, [r3, #1]
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d16f      	bne.n	8006196 <USB_EPStartXfer+0x1054>
 80060b6:	1d3b      	adds	r3, r7, #4
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80060be:	1d3b      	adds	r3, r7, #4
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80060c6:	b29b      	uxth	r3, r3
 80060c8:	461a      	mov	r2, r3
 80060ca:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80060ce:	4413      	add	r3, r2
 80060d0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80060d4:	463b      	mov	r3, r7
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	781b      	ldrb	r3, [r3, #0]
 80060da:	011a      	lsls	r2, r3, #4
 80060dc:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80060e0:	4413      	add	r3, r2
 80060e2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80060e6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80060ea:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d116      	bne.n	8006120 <USB_EPStartXfer+0xfde>
 80060f2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80060f6:	881b      	ldrh	r3, [r3, #0]
 80060f8:	b29b      	uxth	r3, r3
 80060fa:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80060fe:	b29a      	uxth	r2, r3
 8006100:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006104:	801a      	strh	r2, [r3, #0]
 8006106:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800610a:	881b      	ldrh	r3, [r3, #0]
 800610c:	b29b      	uxth	r3, r3
 800610e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006112:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006116:	b29a      	uxth	r2, r3
 8006118:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800611c:	801a      	strh	r2, [r3, #0]
 800611e:	e05f      	b.n	80061e0 <USB_EPStartXfer+0x109e>
 8006120:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006124:	2b3e      	cmp	r3, #62	; 0x3e
 8006126:	d818      	bhi.n	800615a <USB_EPStartXfer+0x1018>
 8006128:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800612c:	085b      	lsrs	r3, r3, #1
 800612e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006132:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006136:	f003 0301 	and.w	r3, r3, #1
 800613a:	2b00      	cmp	r3, #0
 800613c:	d004      	beq.n	8006148 <USB_EPStartXfer+0x1006>
 800613e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006142:	3301      	adds	r3, #1
 8006144:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006148:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800614c:	b29b      	uxth	r3, r3
 800614e:	029b      	lsls	r3, r3, #10
 8006150:	b29a      	uxth	r2, r3
 8006152:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006156:	801a      	strh	r2, [r3, #0]
 8006158:	e042      	b.n	80061e0 <USB_EPStartXfer+0x109e>
 800615a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800615e:	095b      	lsrs	r3, r3, #5
 8006160:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006164:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006168:	f003 031f 	and.w	r3, r3, #31
 800616c:	2b00      	cmp	r3, #0
 800616e:	d104      	bne.n	800617a <USB_EPStartXfer+0x1038>
 8006170:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006174:	3b01      	subs	r3, #1
 8006176:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800617a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800617e:	b29b      	uxth	r3, r3
 8006180:	029b      	lsls	r3, r3, #10
 8006182:	b29b      	uxth	r3, r3
 8006184:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006188:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800618c:	b29a      	uxth	r2, r3
 800618e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006192:	801a      	strh	r2, [r3, #0]
 8006194:	e024      	b.n	80061e0 <USB_EPStartXfer+0x109e>
 8006196:	463b      	mov	r3, r7
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	785b      	ldrb	r3, [r3, #1]
 800619c:	2b01      	cmp	r3, #1
 800619e:	d11f      	bne.n	80061e0 <USB_EPStartXfer+0x109e>
 80061a0:	1d3b      	adds	r3, r7, #4
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80061a8:	1d3b      	adds	r3, r7, #4
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80061b0:	b29b      	uxth	r3, r3
 80061b2:	461a      	mov	r2, r3
 80061b4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80061b8:	4413      	add	r3, r2
 80061ba:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80061be:	463b      	mov	r3, r7
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	781b      	ldrb	r3, [r3, #0]
 80061c4:	011a      	lsls	r2, r3, #4
 80061c6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80061ca:	4413      	add	r3, r2
 80061cc:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80061d0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80061d4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80061d8:	b29a      	uxth	r2, r3
 80061da:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80061de:	801a      	strh	r2, [r3, #0]
 80061e0:	1d3b      	adds	r3, r7, #4
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80061e8:	463b      	mov	r3, r7
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	785b      	ldrb	r3, [r3, #1]
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d16f      	bne.n	80062d2 <USB_EPStartXfer+0x1190>
 80061f2:	1d3b      	adds	r3, r7, #4
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80061fa:	1d3b      	adds	r3, r7, #4
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006202:	b29b      	uxth	r3, r3
 8006204:	461a      	mov	r2, r3
 8006206:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800620a:	4413      	add	r3, r2
 800620c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006210:	463b      	mov	r3, r7
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	781b      	ldrb	r3, [r3, #0]
 8006216:	011a      	lsls	r2, r3, #4
 8006218:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800621c:	4413      	add	r3, r2
 800621e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006222:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8006226:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800622a:	2b00      	cmp	r3, #0
 800622c:	d116      	bne.n	800625c <USB_EPStartXfer+0x111a>
 800622e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8006232:	881b      	ldrh	r3, [r3, #0]
 8006234:	b29b      	uxth	r3, r3
 8006236:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800623a:	b29a      	uxth	r2, r3
 800623c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8006240:	801a      	strh	r2, [r3, #0]
 8006242:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8006246:	881b      	ldrh	r3, [r3, #0]
 8006248:	b29b      	uxth	r3, r3
 800624a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800624e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006252:	b29a      	uxth	r2, r3
 8006254:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8006258:	801a      	strh	r2, [r3, #0]
 800625a:	e05e      	b.n	800631a <USB_EPStartXfer+0x11d8>
 800625c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006260:	2b3e      	cmp	r3, #62	; 0x3e
 8006262:	d818      	bhi.n	8006296 <USB_EPStartXfer+0x1154>
 8006264:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006268:	085b      	lsrs	r3, r3, #1
 800626a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800626e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006272:	f003 0301 	and.w	r3, r3, #1
 8006276:	2b00      	cmp	r3, #0
 8006278:	d004      	beq.n	8006284 <USB_EPStartXfer+0x1142>
 800627a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800627e:	3301      	adds	r3, #1
 8006280:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8006284:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006288:	b29b      	uxth	r3, r3
 800628a:	029b      	lsls	r3, r3, #10
 800628c:	b29a      	uxth	r2, r3
 800628e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8006292:	801a      	strh	r2, [r3, #0]
 8006294:	e041      	b.n	800631a <USB_EPStartXfer+0x11d8>
 8006296:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800629a:	095b      	lsrs	r3, r3, #5
 800629c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80062a0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80062a4:	f003 031f 	and.w	r3, r3, #31
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d104      	bne.n	80062b6 <USB_EPStartXfer+0x1174>
 80062ac:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80062b0:	3b01      	subs	r3, #1
 80062b2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80062b6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80062ba:	b29b      	uxth	r3, r3
 80062bc:	029b      	lsls	r3, r3, #10
 80062be:	b29b      	uxth	r3, r3
 80062c0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80062c4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80062c8:	b29a      	uxth	r2, r3
 80062ca:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80062ce:	801a      	strh	r2, [r3, #0]
 80062d0:	e023      	b.n	800631a <USB_EPStartXfer+0x11d8>
 80062d2:	463b      	mov	r3, r7
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	785b      	ldrb	r3, [r3, #1]
 80062d8:	2b01      	cmp	r3, #1
 80062da:	d11e      	bne.n	800631a <USB_EPStartXfer+0x11d8>
 80062dc:	1d3b      	adds	r3, r7, #4
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80062e4:	b29b      	uxth	r3, r3
 80062e6:	461a      	mov	r2, r3
 80062e8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80062ec:	4413      	add	r3, r2
 80062ee:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80062f2:	463b      	mov	r3, r7
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	781b      	ldrb	r3, [r3, #0]
 80062f8:	011a      	lsls	r2, r3, #4
 80062fa:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80062fe:	4413      	add	r3, r2
 8006300:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006304:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006308:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800630c:	b29a      	uxth	r2, r3
 800630e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8006312:	801a      	strh	r2, [r3, #0]
 8006314:	e001      	b.n	800631a <USB_EPStartXfer+0x11d8>
      }
      else
      {
        return HAL_ERROR;
 8006316:	2301      	movs	r3, #1
 8006318:	e02e      	b.n	8006378 <USB_EPStartXfer+0x1236>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800631a:	1d3b      	adds	r3, r7, #4
 800631c:	681a      	ldr	r2, [r3, #0]
 800631e:	463b      	mov	r3, r7
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	781b      	ldrb	r3, [r3, #0]
 8006324:	009b      	lsls	r3, r3, #2
 8006326:	4413      	add	r3, r2
 8006328:	881b      	ldrh	r3, [r3, #0]
 800632a:	b29b      	uxth	r3, r3
 800632c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006330:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006334:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 8006338:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 800633c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006340:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 8006344:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8006348:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800634c:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 8006350:	1d3b      	adds	r3, r7, #4
 8006352:	681a      	ldr	r2, [r3, #0]
 8006354:	463b      	mov	r3, r7
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	781b      	ldrb	r3, [r3, #0]
 800635a:	009b      	lsls	r3, r3, #2
 800635c:	441a      	add	r2, r3
 800635e:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8006362:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006366:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800636a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800636e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006372:	b29b      	uxth	r3, r3
 8006374:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8006376:	2300      	movs	r3, #0
}
 8006378:	4618      	mov	r0, r3
 800637a:	f507 7788 	add.w	r7, r7, #272	; 0x110
 800637e:	46bd      	mov	sp, r7
 8006380:	bd80      	pop	{r7, pc}

08006382 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006382:	b480      	push	{r7}
 8006384:	b085      	sub	sp, #20
 8006386:	af00      	add	r7, sp, #0
 8006388:	6078      	str	r0, [r7, #4]
 800638a:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800638c:	683b      	ldr	r3, [r7, #0]
 800638e:	785b      	ldrb	r3, [r3, #1]
 8006390:	2b00      	cmp	r3, #0
 8006392:	d020      	beq.n	80063d6 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8006394:	687a      	ldr	r2, [r7, #4]
 8006396:	683b      	ldr	r3, [r7, #0]
 8006398:	781b      	ldrb	r3, [r3, #0]
 800639a:	009b      	lsls	r3, r3, #2
 800639c:	4413      	add	r3, r2
 800639e:	881b      	ldrh	r3, [r3, #0]
 80063a0:	b29b      	uxth	r3, r3
 80063a2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80063a6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80063aa:	81bb      	strh	r3, [r7, #12]
 80063ac:	89bb      	ldrh	r3, [r7, #12]
 80063ae:	f083 0310 	eor.w	r3, r3, #16
 80063b2:	81bb      	strh	r3, [r7, #12]
 80063b4:	687a      	ldr	r2, [r7, #4]
 80063b6:	683b      	ldr	r3, [r7, #0]
 80063b8:	781b      	ldrb	r3, [r3, #0]
 80063ba:	009b      	lsls	r3, r3, #2
 80063bc:	441a      	add	r2, r3
 80063be:	89bb      	ldrh	r3, [r7, #12]
 80063c0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80063c4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80063c8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80063cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80063d0:	b29b      	uxth	r3, r3
 80063d2:	8013      	strh	r3, [r2, #0]
 80063d4:	e01f      	b.n	8006416 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 80063d6:	687a      	ldr	r2, [r7, #4]
 80063d8:	683b      	ldr	r3, [r7, #0]
 80063da:	781b      	ldrb	r3, [r3, #0]
 80063dc:	009b      	lsls	r3, r3, #2
 80063de:	4413      	add	r3, r2
 80063e0:	881b      	ldrh	r3, [r3, #0]
 80063e2:	b29b      	uxth	r3, r3
 80063e4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80063e8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80063ec:	81fb      	strh	r3, [r7, #14]
 80063ee:	89fb      	ldrh	r3, [r7, #14]
 80063f0:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80063f4:	81fb      	strh	r3, [r7, #14]
 80063f6:	687a      	ldr	r2, [r7, #4]
 80063f8:	683b      	ldr	r3, [r7, #0]
 80063fa:	781b      	ldrb	r3, [r3, #0]
 80063fc:	009b      	lsls	r3, r3, #2
 80063fe:	441a      	add	r2, r3
 8006400:	89fb      	ldrh	r3, [r7, #14]
 8006402:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006406:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800640a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800640e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006412:	b29b      	uxth	r3, r3
 8006414:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8006416:	2300      	movs	r3, #0
}
 8006418:	4618      	mov	r0, r3
 800641a:	3714      	adds	r7, #20
 800641c:	46bd      	mov	sp, r7
 800641e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006422:	4770      	bx	lr

08006424 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006424:	b480      	push	{r7}
 8006426:	b087      	sub	sp, #28
 8006428:	af00      	add	r7, sp, #0
 800642a:	6078      	str	r0, [r7, #4]
 800642c:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800642e:	683b      	ldr	r3, [r7, #0]
 8006430:	7b1b      	ldrb	r3, [r3, #12]
 8006432:	2b00      	cmp	r3, #0
 8006434:	f040 809d 	bne.w	8006572 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8006438:	683b      	ldr	r3, [r7, #0]
 800643a:	785b      	ldrb	r3, [r3, #1]
 800643c:	2b00      	cmp	r3, #0
 800643e:	d04c      	beq.n	80064da <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006440:	687a      	ldr	r2, [r7, #4]
 8006442:	683b      	ldr	r3, [r7, #0]
 8006444:	781b      	ldrb	r3, [r3, #0]
 8006446:	009b      	lsls	r3, r3, #2
 8006448:	4413      	add	r3, r2
 800644a:	881b      	ldrh	r3, [r3, #0]
 800644c:	823b      	strh	r3, [r7, #16]
 800644e:	8a3b      	ldrh	r3, [r7, #16]
 8006450:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006454:	2b00      	cmp	r3, #0
 8006456:	d01b      	beq.n	8006490 <USB_EPClearStall+0x6c>
 8006458:	687a      	ldr	r2, [r7, #4]
 800645a:	683b      	ldr	r3, [r7, #0]
 800645c:	781b      	ldrb	r3, [r3, #0]
 800645e:	009b      	lsls	r3, r3, #2
 8006460:	4413      	add	r3, r2
 8006462:	881b      	ldrh	r3, [r3, #0]
 8006464:	b29b      	uxth	r3, r3
 8006466:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800646a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800646e:	81fb      	strh	r3, [r7, #14]
 8006470:	687a      	ldr	r2, [r7, #4]
 8006472:	683b      	ldr	r3, [r7, #0]
 8006474:	781b      	ldrb	r3, [r3, #0]
 8006476:	009b      	lsls	r3, r3, #2
 8006478:	441a      	add	r2, r3
 800647a:	89fb      	ldrh	r3, [r7, #14]
 800647c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006480:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006484:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006488:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800648c:	b29b      	uxth	r3, r3
 800648e:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006490:	683b      	ldr	r3, [r7, #0]
 8006492:	78db      	ldrb	r3, [r3, #3]
 8006494:	2b01      	cmp	r3, #1
 8006496:	d06c      	beq.n	8006572 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8006498:	687a      	ldr	r2, [r7, #4]
 800649a:	683b      	ldr	r3, [r7, #0]
 800649c:	781b      	ldrb	r3, [r3, #0]
 800649e:	009b      	lsls	r3, r3, #2
 80064a0:	4413      	add	r3, r2
 80064a2:	881b      	ldrh	r3, [r3, #0]
 80064a4:	b29b      	uxth	r3, r3
 80064a6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80064aa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80064ae:	81bb      	strh	r3, [r7, #12]
 80064b0:	89bb      	ldrh	r3, [r7, #12]
 80064b2:	f083 0320 	eor.w	r3, r3, #32
 80064b6:	81bb      	strh	r3, [r7, #12]
 80064b8:	687a      	ldr	r2, [r7, #4]
 80064ba:	683b      	ldr	r3, [r7, #0]
 80064bc:	781b      	ldrb	r3, [r3, #0]
 80064be:	009b      	lsls	r3, r3, #2
 80064c0:	441a      	add	r2, r3
 80064c2:	89bb      	ldrh	r3, [r7, #12]
 80064c4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80064c8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80064cc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80064d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80064d4:	b29b      	uxth	r3, r3
 80064d6:	8013      	strh	r3, [r2, #0]
 80064d8:	e04b      	b.n	8006572 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80064da:	687a      	ldr	r2, [r7, #4]
 80064dc:	683b      	ldr	r3, [r7, #0]
 80064de:	781b      	ldrb	r3, [r3, #0]
 80064e0:	009b      	lsls	r3, r3, #2
 80064e2:	4413      	add	r3, r2
 80064e4:	881b      	ldrh	r3, [r3, #0]
 80064e6:	82fb      	strh	r3, [r7, #22]
 80064e8:	8afb      	ldrh	r3, [r7, #22]
 80064ea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d01b      	beq.n	800652a <USB_EPClearStall+0x106>
 80064f2:	687a      	ldr	r2, [r7, #4]
 80064f4:	683b      	ldr	r3, [r7, #0]
 80064f6:	781b      	ldrb	r3, [r3, #0]
 80064f8:	009b      	lsls	r3, r3, #2
 80064fa:	4413      	add	r3, r2
 80064fc:	881b      	ldrh	r3, [r3, #0]
 80064fe:	b29b      	uxth	r3, r3
 8006500:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006504:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006508:	82bb      	strh	r3, [r7, #20]
 800650a:	687a      	ldr	r2, [r7, #4]
 800650c:	683b      	ldr	r3, [r7, #0]
 800650e:	781b      	ldrb	r3, [r3, #0]
 8006510:	009b      	lsls	r3, r3, #2
 8006512:	441a      	add	r2, r3
 8006514:	8abb      	ldrh	r3, [r7, #20]
 8006516:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800651a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800651e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006522:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006526:	b29b      	uxth	r3, r3
 8006528:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800652a:	687a      	ldr	r2, [r7, #4]
 800652c:	683b      	ldr	r3, [r7, #0]
 800652e:	781b      	ldrb	r3, [r3, #0]
 8006530:	009b      	lsls	r3, r3, #2
 8006532:	4413      	add	r3, r2
 8006534:	881b      	ldrh	r3, [r3, #0]
 8006536:	b29b      	uxth	r3, r3
 8006538:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800653c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006540:	827b      	strh	r3, [r7, #18]
 8006542:	8a7b      	ldrh	r3, [r7, #18]
 8006544:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006548:	827b      	strh	r3, [r7, #18]
 800654a:	8a7b      	ldrh	r3, [r7, #18]
 800654c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006550:	827b      	strh	r3, [r7, #18]
 8006552:	687a      	ldr	r2, [r7, #4]
 8006554:	683b      	ldr	r3, [r7, #0]
 8006556:	781b      	ldrb	r3, [r3, #0]
 8006558:	009b      	lsls	r3, r3, #2
 800655a:	441a      	add	r2, r3
 800655c:	8a7b      	ldrh	r3, [r7, #18]
 800655e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006562:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006566:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800656a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800656e:	b29b      	uxth	r3, r3
 8006570:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8006572:	2300      	movs	r3, #0
}
 8006574:	4618      	mov	r0, r3
 8006576:	371c      	adds	r7, #28
 8006578:	46bd      	mov	sp, r7
 800657a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800657e:	4770      	bx	lr

08006580 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8006580:	b480      	push	{r7}
 8006582:	b083      	sub	sp, #12
 8006584:	af00      	add	r7, sp, #0
 8006586:	6078      	str	r0, [r7, #4]
 8006588:	460b      	mov	r3, r1
 800658a:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800658c:	78fb      	ldrb	r3, [r7, #3]
 800658e:	2b00      	cmp	r3, #0
 8006590:	d103      	bne.n	800659a <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	2280      	movs	r2, #128	; 0x80
 8006596:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 800659a:	2300      	movs	r3, #0
}
 800659c:	4618      	mov	r0, r3
 800659e:	370c      	adds	r7, #12
 80065a0:	46bd      	mov	sp, r7
 80065a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065a6:	4770      	bx	lr

080065a8 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 80065a8:	b480      	push	{r7}
 80065aa:	b083      	sub	sp, #12
 80065ac:	af00      	add	r7, sp, #0
 80065ae:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80065b0:	2300      	movs	r3, #0
}
 80065b2:	4618      	mov	r0, r3
 80065b4:	370c      	adds	r7, #12
 80065b6:	46bd      	mov	sp, r7
 80065b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065bc:	4770      	bx	lr

080065be <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 80065be:	b480      	push	{r7}
 80065c0:	b085      	sub	sp, #20
 80065c2:	af00      	add	r7, sp, #0
 80065c4:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80065cc:	b29b      	uxth	r3, r3
 80065ce:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 80065d0:	68fb      	ldr	r3, [r7, #12]
}
 80065d2:	4618      	mov	r0, r3
 80065d4:	3714      	adds	r7, #20
 80065d6:	46bd      	mov	sp, r7
 80065d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065dc:	4770      	bx	lr

080065de <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80065de:	b480      	push	{r7}
 80065e0:	b08d      	sub	sp, #52	; 0x34
 80065e2:	af00      	add	r7, sp, #0
 80065e4:	60f8      	str	r0, [r7, #12]
 80065e6:	60b9      	str	r1, [r7, #8]
 80065e8:	4611      	mov	r1, r2
 80065ea:	461a      	mov	r2, r3
 80065ec:	460b      	mov	r3, r1
 80065ee:	80fb      	strh	r3, [r7, #6]
 80065f0:	4613      	mov	r3, r2
 80065f2:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 80065f4:	88bb      	ldrh	r3, [r7, #4]
 80065f6:	3301      	adds	r3, #1
 80065f8:	085b      	lsrs	r3, r3, #1
 80065fa:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8006600:	68bb      	ldr	r3, [r7, #8]
 8006602:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8006604:	88fb      	ldrh	r3, [r7, #6]
 8006606:	005a      	lsls	r2, r3, #1
 8006608:	69fb      	ldr	r3, [r7, #28]
 800660a:	4413      	add	r3, r2
 800660c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006610:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 8006612:	6a3b      	ldr	r3, [r7, #32]
 8006614:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006616:	e01e      	b.n	8006656 <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 8006618:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800661a:	781b      	ldrb	r3, [r3, #0]
 800661c:	61bb      	str	r3, [r7, #24]
    pBuf++;
 800661e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006620:	3301      	adds	r3, #1
 8006622:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 8006624:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006626:	781b      	ldrb	r3, [r3, #0]
 8006628:	b29b      	uxth	r3, r3
 800662a:	021b      	lsls	r3, r3, #8
 800662c:	b29b      	uxth	r3, r3
 800662e:	461a      	mov	r2, r3
 8006630:	69bb      	ldr	r3, [r7, #24]
 8006632:	4313      	orrs	r3, r2
 8006634:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 8006636:	697b      	ldr	r3, [r7, #20]
 8006638:	b29a      	uxth	r2, r3
 800663a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800663c:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800663e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006640:	3302      	adds	r3, #2
 8006642:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 8006644:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006646:	3302      	adds	r3, #2
 8006648:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 800664a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800664c:	3301      	adds	r3, #1
 800664e:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 8006650:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006652:	3b01      	subs	r3, #1
 8006654:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006656:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006658:	2b00      	cmp	r3, #0
 800665a:	d1dd      	bne.n	8006618 <USB_WritePMA+0x3a>
  }
}
 800665c:	bf00      	nop
 800665e:	3734      	adds	r7, #52	; 0x34
 8006660:	46bd      	mov	sp, r7
 8006662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006666:	4770      	bx	lr

08006668 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8006668:	b480      	push	{r7}
 800666a:	b08b      	sub	sp, #44	; 0x2c
 800666c:	af00      	add	r7, sp, #0
 800666e:	60f8      	str	r0, [r7, #12]
 8006670:	60b9      	str	r1, [r7, #8]
 8006672:	4611      	mov	r1, r2
 8006674:	461a      	mov	r2, r3
 8006676:	460b      	mov	r3, r1
 8006678:	80fb      	strh	r3, [r7, #6]
 800667a:	4613      	mov	r3, r2
 800667c:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800667e:	88bb      	ldrh	r3, [r7, #4]
 8006680:	085b      	lsrs	r3, r3, #1
 8006682:	b29b      	uxth	r3, r3
 8006684:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800668a:	68bb      	ldr	r3, [r7, #8]
 800668c:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800668e:	88fb      	ldrh	r3, [r7, #6]
 8006690:	005a      	lsls	r2, r3, #1
 8006692:	697b      	ldr	r3, [r7, #20]
 8006694:	4413      	add	r3, r2
 8006696:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800669a:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 800669c:	69bb      	ldr	r3, [r7, #24]
 800669e:	627b      	str	r3, [r7, #36]	; 0x24
 80066a0:	e01b      	b.n	80066da <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 80066a2:	6a3b      	ldr	r3, [r7, #32]
 80066a4:	881b      	ldrh	r3, [r3, #0]
 80066a6:	b29b      	uxth	r3, r3
 80066a8:	613b      	str	r3, [r7, #16]
    pdwVal++;
 80066aa:	6a3b      	ldr	r3, [r7, #32]
 80066ac:	3302      	adds	r3, #2
 80066ae:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 80066b0:	693b      	ldr	r3, [r7, #16]
 80066b2:	b2da      	uxtb	r2, r3
 80066b4:	69fb      	ldr	r3, [r7, #28]
 80066b6:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80066b8:	69fb      	ldr	r3, [r7, #28]
 80066ba:	3301      	adds	r3, #1
 80066bc:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 80066be:	693b      	ldr	r3, [r7, #16]
 80066c0:	0a1b      	lsrs	r3, r3, #8
 80066c2:	b2da      	uxtb	r2, r3
 80066c4:	69fb      	ldr	r3, [r7, #28]
 80066c6:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80066c8:	69fb      	ldr	r3, [r7, #28]
 80066ca:	3301      	adds	r3, #1
 80066cc:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 80066ce:	6a3b      	ldr	r3, [r7, #32]
 80066d0:	3302      	adds	r3, #2
 80066d2:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 80066d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066d6:	3b01      	subs	r3, #1
 80066d8:	627b      	str	r3, [r7, #36]	; 0x24
 80066da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066dc:	2b00      	cmp	r3, #0
 80066de:	d1e0      	bne.n	80066a2 <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 80066e0:	88bb      	ldrh	r3, [r7, #4]
 80066e2:	f003 0301 	and.w	r3, r3, #1
 80066e6:	b29b      	uxth	r3, r3
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	d007      	beq.n	80066fc <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 80066ec:	6a3b      	ldr	r3, [r7, #32]
 80066ee:	881b      	ldrh	r3, [r3, #0]
 80066f0:	b29b      	uxth	r3, r3
 80066f2:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 80066f4:	693b      	ldr	r3, [r7, #16]
 80066f6:	b2da      	uxtb	r2, r3
 80066f8:	69fb      	ldr	r3, [r7, #28]
 80066fa:	701a      	strb	r2, [r3, #0]
  }
}
 80066fc:	bf00      	nop
 80066fe:	372c      	adds	r7, #44	; 0x2c
 8006700:	46bd      	mov	sp, r7
 8006702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006706:	4770      	bx	lr

08006708 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006708:	b580      	push	{r7, lr}
 800670a:	b084      	sub	sp, #16
 800670c:	af00      	add	r7, sp, #0
 800670e:	6078      	str	r0, [r7, #4]
 8006710:	460b      	mov	r3, r1
 8006712:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8006714:	2300      	movs	r3, #0
 8006716:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	7c1b      	ldrb	r3, [r3, #16]
 800671c:	2b00      	cmp	r3, #0
 800671e:	d115      	bne.n	800674c <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8006720:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006724:	2202      	movs	r2, #2
 8006726:	2181      	movs	r1, #129	; 0x81
 8006728:	6878      	ldr	r0, [r7, #4]
 800672a:	f001 fea6 	bl	800847a <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	2201      	movs	r2, #1
 8006732:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8006734:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006738:	2202      	movs	r2, #2
 800673a:	2101      	movs	r1, #1
 800673c:	6878      	ldr	r0, [r7, #4]
 800673e:	f001 fe9c 	bl	800847a <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	2201      	movs	r2, #1
 8006746:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 800674a:	e012      	b.n	8006772 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800674c:	2340      	movs	r3, #64	; 0x40
 800674e:	2202      	movs	r2, #2
 8006750:	2181      	movs	r1, #129	; 0x81
 8006752:	6878      	ldr	r0, [r7, #4]
 8006754:	f001 fe91 	bl	800847a <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	2201      	movs	r2, #1
 800675c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800675e:	2340      	movs	r3, #64	; 0x40
 8006760:	2202      	movs	r2, #2
 8006762:	2101      	movs	r1, #1
 8006764:	6878      	ldr	r0, [r7, #4]
 8006766:	f001 fe88 	bl	800847a <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	2201      	movs	r2, #1
 800676e:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8006772:	2308      	movs	r3, #8
 8006774:	2203      	movs	r2, #3
 8006776:	2182      	movs	r1, #130	; 0x82
 8006778:	6878      	ldr	r0, [r7, #4]
 800677a:	f001 fe7e 	bl	800847a <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	2201      	movs	r2, #1
 8006782:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8006784:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8006788:	f001 ffa0 	bl	80086cc <USBD_static_malloc>
 800678c:	4602      	mov	r2, r0
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800679a:	2b00      	cmp	r3, #0
 800679c:	d102      	bne.n	80067a4 <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 800679e:	2301      	movs	r3, #1
 80067a0:	73fb      	strb	r3, [r7, #15]
 80067a2:	e026      	b.n	80067f2 <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80067aa:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 80067b6:	68bb      	ldr	r3, [r7, #8]
 80067b8:	2200      	movs	r2, #0
 80067ba:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 80067be:	68bb      	ldr	r3, [r7, #8]
 80067c0:	2200      	movs	r2, #0
 80067c2:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	7c1b      	ldrb	r3, [r3, #16]
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d109      	bne.n	80067e2 <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80067ce:	68bb      	ldr	r3, [r7, #8]
 80067d0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80067d4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80067d8:	2101      	movs	r1, #1
 80067da:	6878      	ldr	r0, [r7, #4]
 80067dc:	f001 ff3f 	bl	800865e <USBD_LL_PrepareReceive>
 80067e0:	e007      	b.n	80067f2 <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80067e2:	68bb      	ldr	r3, [r7, #8]
 80067e4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80067e8:	2340      	movs	r3, #64	; 0x40
 80067ea:	2101      	movs	r1, #1
 80067ec:	6878      	ldr	r0, [r7, #4]
 80067ee:	f001 ff36 	bl	800865e <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 80067f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80067f4:	4618      	mov	r0, r3
 80067f6:	3710      	adds	r7, #16
 80067f8:	46bd      	mov	sp, r7
 80067fa:	bd80      	pop	{r7, pc}

080067fc <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80067fc:	b580      	push	{r7, lr}
 80067fe:	b084      	sub	sp, #16
 8006800:	af00      	add	r7, sp, #0
 8006802:	6078      	str	r0, [r7, #4]
 8006804:	460b      	mov	r3, r1
 8006806:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8006808:	2300      	movs	r3, #0
 800680a:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800680c:	2181      	movs	r1, #129	; 0x81
 800680e:	6878      	ldr	r0, [r7, #4]
 8006810:	f001 fe59 	bl	80084c6 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	2200      	movs	r2, #0
 8006818:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800681a:	2101      	movs	r1, #1
 800681c:	6878      	ldr	r0, [r7, #4]
 800681e:	f001 fe52 	bl	80084c6 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	2200      	movs	r2, #0
 8006826:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800682a:	2182      	movs	r1, #130	; 0x82
 800682c:	6878      	ldr	r0, [r7, #4]
 800682e:	f001 fe4a 	bl	80084c6 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	2200      	movs	r2, #0
 8006836:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800683e:	2b00      	cmp	r3, #0
 8006840:	d00e      	beq.n	8006860 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006848:	685b      	ldr	r3, [r3, #4]
 800684a:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006852:	4618      	mov	r0, r3
 8006854:	f001 ff48 	bl	80086e8 <USBD_static_free>
    pdev->pClassData = NULL;
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	2200      	movs	r2, #0
 800685c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 8006860:	7bfb      	ldrb	r3, [r7, #15]
}
 8006862:	4618      	mov	r0, r3
 8006864:	3710      	adds	r7, #16
 8006866:	46bd      	mov	sp, r7
 8006868:	bd80      	pop	{r7, pc}

0800686a <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800686a:	b580      	push	{r7, lr}
 800686c:	b086      	sub	sp, #24
 800686e:	af00      	add	r7, sp, #0
 8006870:	6078      	str	r0, [r7, #4]
 8006872:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800687a:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 800687c:	2300      	movs	r3, #0
 800687e:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8006880:	2300      	movs	r3, #0
 8006882:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 8006884:	2300      	movs	r3, #0
 8006886:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006888:	683b      	ldr	r3, [r7, #0]
 800688a:	781b      	ldrb	r3, [r3, #0]
 800688c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006890:	2b00      	cmp	r3, #0
 8006892:	d039      	beq.n	8006908 <USBD_CDC_Setup+0x9e>
 8006894:	2b20      	cmp	r3, #32
 8006896:	d17c      	bne.n	8006992 <USBD_CDC_Setup+0x128>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 8006898:	683b      	ldr	r3, [r7, #0]
 800689a:	88db      	ldrh	r3, [r3, #6]
 800689c:	2b00      	cmp	r3, #0
 800689e:	d029      	beq.n	80068f4 <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 80068a0:	683b      	ldr	r3, [r7, #0]
 80068a2:	781b      	ldrb	r3, [r3, #0]
 80068a4:	b25b      	sxtb	r3, r3
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	da11      	bge.n	80068ce <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80068b0:	689b      	ldr	r3, [r3, #8]
 80068b2:	683a      	ldr	r2, [r7, #0]
 80068b4:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 80068b6:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80068b8:	683a      	ldr	r2, [r7, #0]
 80068ba:	88d2      	ldrh	r2, [r2, #6]
 80068bc:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 80068be:	6939      	ldr	r1, [r7, #16]
 80068c0:	683b      	ldr	r3, [r7, #0]
 80068c2:	88db      	ldrh	r3, [r3, #6]
 80068c4:	461a      	mov	r2, r3
 80068c6:	6878      	ldr	r0, [r7, #4]
 80068c8:	f001 fa04 	bl	8007cd4 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 80068cc:	e068      	b.n	80069a0 <USBD_CDC_Setup+0x136>
          hcdc->CmdOpCode = req->bRequest;
 80068ce:	683b      	ldr	r3, [r7, #0]
 80068d0:	785a      	ldrb	r2, [r3, #1]
 80068d2:	693b      	ldr	r3, [r7, #16]
 80068d4:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 80068d8:	683b      	ldr	r3, [r7, #0]
 80068da:	88db      	ldrh	r3, [r3, #6]
 80068dc:	b2da      	uxtb	r2, r3
 80068de:	693b      	ldr	r3, [r7, #16]
 80068e0:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 80068e4:	6939      	ldr	r1, [r7, #16]
 80068e6:	683b      	ldr	r3, [r7, #0]
 80068e8:	88db      	ldrh	r3, [r3, #6]
 80068ea:	461a      	mov	r2, r3
 80068ec:	6878      	ldr	r0, [r7, #4]
 80068ee:	f001 fa1f 	bl	8007d30 <USBD_CtlPrepareRx>
      break;
 80068f2:	e055      	b.n	80069a0 <USBD_CDC_Setup+0x136>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80068fa:	689b      	ldr	r3, [r3, #8]
 80068fc:	683a      	ldr	r2, [r7, #0]
 80068fe:	7850      	ldrb	r0, [r2, #1]
 8006900:	2200      	movs	r2, #0
 8006902:	6839      	ldr	r1, [r7, #0]
 8006904:	4798      	blx	r3
      break;
 8006906:	e04b      	b.n	80069a0 <USBD_CDC_Setup+0x136>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006908:	683b      	ldr	r3, [r7, #0]
 800690a:	785b      	ldrb	r3, [r3, #1]
 800690c:	2b0a      	cmp	r3, #10
 800690e:	d017      	beq.n	8006940 <USBD_CDC_Setup+0xd6>
 8006910:	2b0b      	cmp	r3, #11
 8006912:	d029      	beq.n	8006968 <USBD_CDC_Setup+0xfe>
 8006914:	2b00      	cmp	r3, #0
 8006916:	d133      	bne.n	8006980 <USBD_CDC_Setup+0x116>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800691e:	2b03      	cmp	r3, #3
 8006920:	d107      	bne.n	8006932 <USBD_CDC_Setup+0xc8>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8006922:	f107 030c 	add.w	r3, r7, #12
 8006926:	2202      	movs	r2, #2
 8006928:	4619      	mov	r1, r3
 800692a:	6878      	ldr	r0, [r7, #4]
 800692c:	f001 f9d2 	bl	8007cd4 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006930:	e02e      	b.n	8006990 <USBD_CDC_Setup+0x126>
            USBD_CtlError(pdev, req);
 8006932:	6839      	ldr	r1, [r7, #0]
 8006934:	6878      	ldr	r0, [r7, #4]
 8006936:	f001 f962 	bl	8007bfe <USBD_CtlError>
            ret = USBD_FAIL;
 800693a:	2302      	movs	r3, #2
 800693c:	75fb      	strb	r3, [r7, #23]
          break;
 800693e:	e027      	b.n	8006990 <USBD_CDC_Setup+0x126>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006946:	2b03      	cmp	r3, #3
 8006948:	d107      	bne.n	800695a <USBD_CDC_Setup+0xf0>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 800694a:	f107 030f 	add.w	r3, r7, #15
 800694e:	2201      	movs	r2, #1
 8006950:	4619      	mov	r1, r3
 8006952:	6878      	ldr	r0, [r7, #4]
 8006954:	f001 f9be 	bl	8007cd4 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006958:	e01a      	b.n	8006990 <USBD_CDC_Setup+0x126>
            USBD_CtlError(pdev, req);
 800695a:	6839      	ldr	r1, [r7, #0]
 800695c:	6878      	ldr	r0, [r7, #4]
 800695e:	f001 f94e 	bl	8007bfe <USBD_CtlError>
            ret = USBD_FAIL;
 8006962:	2302      	movs	r3, #2
 8006964:	75fb      	strb	r3, [r7, #23]
          break;
 8006966:	e013      	b.n	8006990 <USBD_CDC_Setup+0x126>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800696e:	2b03      	cmp	r3, #3
 8006970:	d00d      	beq.n	800698e <USBD_CDC_Setup+0x124>
          {
            USBD_CtlError(pdev, req);
 8006972:	6839      	ldr	r1, [r7, #0]
 8006974:	6878      	ldr	r0, [r7, #4]
 8006976:	f001 f942 	bl	8007bfe <USBD_CtlError>
            ret = USBD_FAIL;
 800697a:	2302      	movs	r3, #2
 800697c:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800697e:	e006      	b.n	800698e <USBD_CDC_Setup+0x124>

        default:
          USBD_CtlError(pdev, req);
 8006980:	6839      	ldr	r1, [r7, #0]
 8006982:	6878      	ldr	r0, [r7, #4]
 8006984:	f001 f93b 	bl	8007bfe <USBD_CtlError>
          ret = USBD_FAIL;
 8006988:	2302      	movs	r3, #2
 800698a:	75fb      	strb	r3, [r7, #23]
          break;
 800698c:	e000      	b.n	8006990 <USBD_CDC_Setup+0x126>
          break;
 800698e:	bf00      	nop
      }
      break;
 8006990:	e006      	b.n	80069a0 <USBD_CDC_Setup+0x136>

    default:
      USBD_CtlError(pdev, req);
 8006992:	6839      	ldr	r1, [r7, #0]
 8006994:	6878      	ldr	r0, [r7, #4]
 8006996:	f001 f932 	bl	8007bfe <USBD_CtlError>
      ret = USBD_FAIL;
 800699a:	2302      	movs	r3, #2
 800699c:	75fb      	strb	r3, [r7, #23]
      break;
 800699e:	bf00      	nop
  }

  return ret;
 80069a0:	7dfb      	ldrb	r3, [r7, #23]
}
 80069a2:	4618      	mov	r0, r3
 80069a4:	3718      	adds	r7, #24
 80069a6:	46bd      	mov	sp, r7
 80069a8:	bd80      	pop	{r7, pc}

080069aa <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80069aa:	b580      	push	{r7, lr}
 80069ac:	b084      	sub	sp, #16
 80069ae:	af00      	add	r7, sp, #0
 80069b0:	6078      	str	r0, [r7, #4]
 80069b2:	460b      	mov	r3, r1
 80069b4:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80069bc:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80069c4:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	d03a      	beq.n	8006a46 <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 80069d0:	78fa      	ldrb	r2, [r7, #3]
 80069d2:	6879      	ldr	r1, [r7, #4]
 80069d4:	4613      	mov	r3, r2
 80069d6:	009b      	lsls	r3, r3, #2
 80069d8:	4413      	add	r3, r2
 80069da:	009b      	lsls	r3, r3, #2
 80069dc:	440b      	add	r3, r1
 80069de:	331c      	adds	r3, #28
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	d029      	beq.n	8006a3a <USBD_CDC_DataIn+0x90>
 80069e6:	78fa      	ldrb	r2, [r7, #3]
 80069e8:	6879      	ldr	r1, [r7, #4]
 80069ea:	4613      	mov	r3, r2
 80069ec:	009b      	lsls	r3, r3, #2
 80069ee:	4413      	add	r3, r2
 80069f0:	009b      	lsls	r3, r3, #2
 80069f2:	440b      	add	r3, r1
 80069f4:	331c      	adds	r3, #28
 80069f6:	681a      	ldr	r2, [r3, #0]
 80069f8:	78f9      	ldrb	r1, [r7, #3]
 80069fa:	68b8      	ldr	r0, [r7, #8]
 80069fc:	460b      	mov	r3, r1
 80069fe:	009b      	lsls	r3, r3, #2
 8006a00:	440b      	add	r3, r1
 8006a02:	00db      	lsls	r3, r3, #3
 8006a04:	4403      	add	r3, r0
 8006a06:	3338      	adds	r3, #56	; 0x38
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	fbb2 f1f3 	udiv	r1, r2, r3
 8006a0e:	fb03 f301 	mul.w	r3, r3, r1
 8006a12:	1ad3      	subs	r3, r2, r3
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	d110      	bne.n	8006a3a <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8006a18:	78fa      	ldrb	r2, [r7, #3]
 8006a1a:	6879      	ldr	r1, [r7, #4]
 8006a1c:	4613      	mov	r3, r2
 8006a1e:	009b      	lsls	r3, r3, #2
 8006a20:	4413      	add	r3, r2
 8006a22:	009b      	lsls	r3, r3, #2
 8006a24:	440b      	add	r3, r1
 8006a26:	331c      	adds	r3, #28
 8006a28:	2200      	movs	r2, #0
 8006a2a:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8006a2c:	78f9      	ldrb	r1, [r7, #3]
 8006a2e:	2300      	movs	r3, #0
 8006a30:	2200      	movs	r2, #0
 8006a32:	6878      	ldr	r0, [r7, #4]
 8006a34:	f001 fdf0 	bl	8008618 <USBD_LL_Transmit>
 8006a38:	e003      	b.n	8006a42 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	2200      	movs	r2, #0
 8006a3e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 8006a42:	2300      	movs	r3, #0
 8006a44:	e000      	b.n	8006a48 <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 8006a46:	2302      	movs	r3, #2
  }
}
 8006a48:	4618      	mov	r0, r3
 8006a4a:	3710      	adds	r7, #16
 8006a4c:	46bd      	mov	sp, r7
 8006a4e:	bd80      	pop	{r7, pc}

08006a50 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006a50:	b580      	push	{r7, lr}
 8006a52:	b084      	sub	sp, #16
 8006a54:	af00      	add	r7, sp, #0
 8006a56:	6078      	str	r0, [r7, #4]
 8006a58:	460b      	mov	r3, r1
 8006a5a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006a62:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8006a64:	78fb      	ldrb	r3, [r7, #3]
 8006a66:	4619      	mov	r1, r3
 8006a68:	6878      	ldr	r0, [r7, #4]
 8006a6a:	f001 fe1b 	bl	80086a4 <USBD_LL_GetRxDataSize>
 8006a6e:	4602      	mov	r2, r0
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	d00d      	beq.n	8006a9c <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006a86:	68db      	ldr	r3, [r3, #12]
 8006a88:	68fa      	ldr	r2, [r7, #12]
 8006a8a:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8006a8e:	68fa      	ldr	r2, [r7, #12]
 8006a90:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8006a94:	4611      	mov	r1, r2
 8006a96:	4798      	blx	r3

    return USBD_OK;
 8006a98:	2300      	movs	r3, #0
 8006a9a:	e000      	b.n	8006a9e <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 8006a9c:	2302      	movs	r3, #2
  }
}
 8006a9e:	4618      	mov	r0, r3
 8006aa0:	3710      	adds	r7, #16
 8006aa2:	46bd      	mov	sp, r7
 8006aa4:	bd80      	pop	{r7, pc}

08006aa6 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8006aa6:	b580      	push	{r7, lr}
 8006aa8:	b084      	sub	sp, #16
 8006aaa:	af00      	add	r7, sp, #0
 8006aac:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006ab4:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	d015      	beq.n	8006aec <USBD_CDC_EP0_RxReady+0x46>
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8006ac6:	2bff      	cmp	r3, #255	; 0xff
 8006ac8:	d010      	beq.n	8006aec <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006ad0:	689b      	ldr	r3, [r3, #8]
 8006ad2:	68fa      	ldr	r2, [r7, #12]
 8006ad4:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 8006ad8:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8006ada:	68fa      	ldr	r2, [r7, #12]
 8006adc:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8006ae0:	b292      	uxth	r2, r2
 8006ae2:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	22ff      	movs	r2, #255	; 0xff
 8006ae8:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 8006aec:	2300      	movs	r3, #0
}
 8006aee:	4618      	mov	r0, r3
 8006af0:	3710      	adds	r7, #16
 8006af2:	46bd      	mov	sp, r7
 8006af4:	bd80      	pop	{r7, pc}
	...

08006af8 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8006af8:	b480      	push	{r7}
 8006afa:	b083      	sub	sp, #12
 8006afc:	af00      	add	r7, sp, #0
 8006afe:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	2243      	movs	r2, #67	; 0x43
 8006b04:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 8006b06:	4b03      	ldr	r3, [pc, #12]	; (8006b14 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8006b08:	4618      	mov	r0, r3
 8006b0a:	370c      	adds	r7, #12
 8006b0c:	46bd      	mov	sp, r7
 8006b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b12:	4770      	bx	lr
 8006b14:	20000094 	.word	0x20000094

08006b18 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8006b18:	b480      	push	{r7}
 8006b1a:	b083      	sub	sp, #12
 8006b1c:	af00      	add	r7, sp, #0
 8006b1e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	2243      	movs	r2, #67	; 0x43
 8006b24:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 8006b26:	4b03      	ldr	r3, [pc, #12]	; (8006b34 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8006b28:	4618      	mov	r0, r3
 8006b2a:	370c      	adds	r7, #12
 8006b2c:	46bd      	mov	sp, r7
 8006b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b32:	4770      	bx	lr
 8006b34:	20000050 	.word	0x20000050

08006b38 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8006b38:	b480      	push	{r7}
 8006b3a:	b083      	sub	sp, #12
 8006b3c:	af00      	add	r7, sp, #0
 8006b3e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	2243      	movs	r2, #67	; 0x43
 8006b44:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 8006b46:	4b03      	ldr	r3, [pc, #12]	; (8006b54 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8006b48:	4618      	mov	r0, r3
 8006b4a:	370c      	adds	r7, #12
 8006b4c:	46bd      	mov	sp, r7
 8006b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b52:	4770      	bx	lr
 8006b54:	200000d8 	.word	0x200000d8

08006b58 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8006b58:	b480      	push	{r7}
 8006b5a:	b083      	sub	sp, #12
 8006b5c:	af00      	add	r7, sp, #0
 8006b5e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	220a      	movs	r2, #10
 8006b64:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 8006b66:	4b03      	ldr	r3, [pc, #12]	; (8006b74 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8006b68:	4618      	mov	r0, r3
 8006b6a:	370c      	adds	r7, #12
 8006b6c:	46bd      	mov	sp, r7
 8006b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b72:	4770      	bx	lr
 8006b74:	2000000c 	.word	0x2000000c

08006b78 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 8006b78:	b480      	push	{r7}
 8006b7a:	b085      	sub	sp, #20
 8006b7c:	af00      	add	r7, sp, #0
 8006b7e:	6078      	str	r0, [r7, #4]
 8006b80:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8006b82:	2302      	movs	r3, #2
 8006b84:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 8006b86:	683b      	ldr	r3, [r7, #0]
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	d005      	beq.n	8006b98 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	683a      	ldr	r2, [r7, #0]
 8006b90:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 8006b94:	2300      	movs	r3, #0
 8006b96:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8006b98:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b9a:	4618      	mov	r0, r3
 8006b9c:	3714      	adds	r7, #20
 8006b9e:	46bd      	mov	sp, r7
 8006ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ba4:	4770      	bx	lr

08006ba6 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 8006ba6:	b480      	push	{r7}
 8006ba8:	b087      	sub	sp, #28
 8006baa:	af00      	add	r7, sp, #0
 8006bac:	60f8      	str	r0, [r7, #12]
 8006bae:	60b9      	str	r1, [r7, #8]
 8006bb0:	4613      	mov	r3, r2
 8006bb2:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006bba:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8006bbc:	697b      	ldr	r3, [r7, #20]
 8006bbe:	68ba      	ldr	r2, [r7, #8]
 8006bc0:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8006bc4:	88fa      	ldrh	r2, [r7, #6]
 8006bc6:	697b      	ldr	r3, [r7, #20]
 8006bc8:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 8006bcc:	2300      	movs	r3, #0
}
 8006bce:	4618      	mov	r0, r3
 8006bd0:	371c      	adds	r7, #28
 8006bd2:	46bd      	mov	sp, r7
 8006bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bd8:	4770      	bx	lr

08006bda <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 8006bda:	b480      	push	{r7}
 8006bdc:	b085      	sub	sp, #20
 8006bde:	af00      	add	r7, sp, #0
 8006be0:	6078      	str	r0, [r7, #4]
 8006be2:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006bea:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	683a      	ldr	r2, [r7, #0]
 8006bf0:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 8006bf4:	2300      	movs	r3, #0
}
 8006bf6:	4618      	mov	r0, r3
 8006bf8:	3714      	adds	r7, #20
 8006bfa:	46bd      	mov	sp, r7
 8006bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c00:	4770      	bx	lr

08006c02 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8006c02:	b580      	push	{r7, lr}
 8006c04:	b084      	sub	sp, #16
 8006c06:	af00      	add	r7, sp, #0
 8006c08:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006c10:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	d01c      	beq.n	8006c56 <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	d115      	bne.n	8006c52 <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	2201      	movs	r2, #1
 8006c2a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8006c44:	b29b      	uxth	r3, r3
 8006c46:	2181      	movs	r1, #129	; 0x81
 8006c48:	6878      	ldr	r0, [r7, #4]
 8006c4a:	f001 fce5 	bl	8008618 <USBD_LL_Transmit>

      return USBD_OK;
 8006c4e:	2300      	movs	r3, #0
 8006c50:	e002      	b.n	8006c58 <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 8006c52:	2301      	movs	r3, #1
 8006c54:	e000      	b.n	8006c58 <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 8006c56:	2302      	movs	r3, #2
  }
}
 8006c58:	4618      	mov	r0, r3
 8006c5a:	3710      	adds	r7, #16
 8006c5c:	46bd      	mov	sp, r7
 8006c5e:	bd80      	pop	{r7, pc}

08006c60 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8006c60:	b580      	push	{r7, lr}
 8006c62:	b084      	sub	sp, #16
 8006c64:	af00      	add	r7, sp, #0
 8006c66:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006c6e:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	d017      	beq.n	8006caa <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	7c1b      	ldrb	r3, [r3, #16]
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d109      	bne.n	8006c96 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006c88:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006c8c:	2101      	movs	r1, #1
 8006c8e:	6878      	ldr	r0, [r7, #4]
 8006c90:	f001 fce5 	bl	800865e <USBD_LL_PrepareReceive>
 8006c94:	e007      	b.n	8006ca6 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006c9c:	2340      	movs	r3, #64	; 0x40
 8006c9e:	2101      	movs	r1, #1
 8006ca0:	6878      	ldr	r0, [r7, #4]
 8006ca2:	f001 fcdc 	bl	800865e <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8006ca6:	2300      	movs	r3, #0
 8006ca8:	e000      	b.n	8006cac <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 8006caa:	2302      	movs	r3, #2
  }
}
 8006cac:	4618      	mov	r0, r3
 8006cae:	3710      	adds	r7, #16
 8006cb0:	46bd      	mov	sp, r7
 8006cb2:	bd80      	pop	{r7, pc}

08006cb4 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8006cb4:	b580      	push	{r7, lr}
 8006cb6:	b084      	sub	sp, #16
 8006cb8:	af00      	add	r7, sp, #0
 8006cba:	60f8      	str	r0, [r7, #12]
 8006cbc:	60b9      	str	r1, [r7, #8]
 8006cbe:	4613      	mov	r3, r2
 8006cc0:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	d101      	bne.n	8006ccc <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8006cc8:	2302      	movs	r3, #2
 8006cca:	e01a      	b.n	8006d02 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	d003      	beq.n	8006cde <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	2200      	movs	r2, #0
 8006cda:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8006cde:	68bb      	ldr	r3, [r7, #8]
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	d003      	beq.n	8006cec <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	68ba      	ldr	r2, [r7, #8]
 8006ce8:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	2201      	movs	r2, #1
 8006cf0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	79fa      	ldrb	r2, [r7, #7]
 8006cf8:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8006cfa:	68f8      	ldr	r0, [r7, #12]
 8006cfc:	f001 fb48 	bl	8008390 <USBD_LL_Init>

  return USBD_OK;
 8006d00:	2300      	movs	r3, #0
}
 8006d02:	4618      	mov	r0, r3
 8006d04:	3710      	adds	r7, #16
 8006d06:	46bd      	mov	sp, r7
 8006d08:	bd80      	pop	{r7, pc}

08006d0a <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8006d0a:	b480      	push	{r7}
 8006d0c:	b085      	sub	sp, #20
 8006d0e:	af00      	add	r7, sp, #0
 8006d10:	6078      	str	r0, [r7, #4]
 8006d12:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8006d14:	2300      	movs	r3, #0
 8006d16:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 8006d18:	683b      	ldr	r3, [r7, #0]
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	d006      	beq.n	8006d2c <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	683a      	ldr	r2, [r7, #0]
 8006d22:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 8006d26:	2300      	movs	r3, #0
 8006d28:	73fb      	strb	r3, [r7, #15]
 8006d2a:	e001      	b.n	8006d30 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8006d2c:	2302      	movs	r3, #2
 8006d2e:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8006d30:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d32:	4618      	mov	r0, r3
 8006d34:	3714      	adds	r7, #20
 8006d36:	46bd      	mov	sp, r7
 8006d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d3c:	4770      	bx	lr

08006d3e <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8006d3e:	b580      	push	{r7, lr}
 8006d40:	b082      	sub	sp, #8
 8006d42:	af00      	add	r7, sp, #0
 8006d44:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8006d46:	6878      	ldr	r0, [r7, #4]
 8006d48:	f001 fb7c 	bl	8008444 <USBD_LL_Start>

  return USBD_OK;
 8006d4c:	2300      	movs	r3, #0
}
 8006d4e:	4618      	mov	r0, r3
 8006d50:	3708      	adds	r7, #8
 8006d52:	46bd      	mov	sp, r7
 8006d54:	bd80      	pop	{r7, pc}

08006d56 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8006d56:	b480      	push	{r7}
 8006d58:	b083      	sub	sp, #12
 8006d5a:	af00      	add	r7, sp, #0
 8006d5c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006d5e:	2300      	movs	r3, #0
}
 8006d60:	4618      	mov	r0, r3
 8006d62:	370c      	adds	r7, #12
 8006d64:	46bd      	mov	sp, r7
 8006d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d6a:	4770      	bx	lr

08006d6c <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8006d6c:	b580      	push	{r7, lr}
 8006d6e:	b084      	sub	sp, #16
 8006d70:	af00      	add	r7, sp, #0
 8006d72:	6078      	str	r0, [r7, #4]
 8006d74:	460b      	mov	r3, r1
 8006d76:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8006d78:	2302      	movs	r3, #2
 8006d7a:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d00c      	beq.n	8006da0 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	78fa      	ldrb	r2, [r7, #3]
 8006d90:	4611      	mov	r1, r2
 8006d92:	6878      	ldr	r0, [r7, #4]
 8006d94:	4798      	blx	r3
 8006d96:	4603      	mov	r3, r0
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	d101      	bne.n	8006da0 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8006d9c:	2300      	movs	r3, #0
 8006d9e:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8006da0:	7bfb      	ldrb	r3, [r7, #15]
}
 8006da2:	4618      	mov	r0, r3
 8006da4:	3710      	adds	r7, #16
 8006da6:	46bd      	mov	sp, r7
 8006da8:	bd80      	pop	{r7, pc}

08006daa <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8006daa:	b580      	push	{r7, lr}
 8006dac:	b082      	sub	sp, #8
 8006dae:	af00      	add	r7, sp, #0
 8006db0:	6078      	str	r0, [r7, #4]
 8006db2:	460b      	mov	r3, r1
 8006db4:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006dbc:	685b      	ldr	r3, [r3, #4]
 8006dbe:	78fa      	ldrb	r2, [r7, #3]
 8006dc0:	4611      	mov	r1, r2
 8006dc2:	6878      	ldr	r0, [r7, #4]
 8006dc4:	4798      	blx	r3

  return USBD_OK;
 8006dc6:	2300      	movs	r3, #0
}
 8006dc8:	4618      	mov	r0, r3
 8006dca:	3708      	adds	r7, #8
 8006dcc:	46bd      	mov	sp, r7
 8006dce:	bd80      	pop	{r7, pc}

08006dd0 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8006dd0:	b580      	push	{r7, lr}
 8006dd2:	b082      	sub	sp, #8
 8006dd4:	af00      	add	r7, sp, #0
 8006dd6:	6078      	str	r0, [r7, #4]
 8006dd8:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8006de0:	6839      	ldr	r1, [r7, #0]
 8006de2:	4618      	mov	r0, r3
 8006de4:	f000 fece 	bl	8007b84 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	2201      	movs	r2, #1
 8006dec:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8006df6:	461a      	mov	r2, r3
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8006e04:	f003 031f 	and.w	r3, r3, #31
 8006e08:	2b01      	cmp	r3, #1
 8006e0a:	d00c      	beq.n	8006e26 <USBD_LL_SetupStage+0x56>
 8006e0c:	2b01      	cmp	r3, #1
 8006e0e:	d302      	bcc.n	8006e16 <USBD_LL_SetupStage+0x46>
 8006e10:	2b02      	cmp	r3, #2
 8006e12:	d010      	beq.n	8006e36 <USBD_LL_SetupStage+0x66>
 8006e14:	e017      	b.n	8006e46 <USBD_LL_SetupStage+0x76>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8006e1c:	4619      	mov	r1, r3
 8006e1e:	6878      	ldr	r0, [r7, #4]
 8006e20:	f000 f9ce 	bl	80071c0 <USBD_StdDevReq>
      break;
 8006e24:	e01a      	b.n	8006e5c <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8006e2c:	4619      	mov	r1, r3
 8006e2e:	6878      	ldr	r0, [r7, #4]
 8006e30:	f000 fa30 	bl	8007294 <USBD_StdItfReq>
      break;
 8006e34:	e012      	b.n	8006e5c <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8006e3c:	4619      	mov	r1, r3
 8006e3e:	6878      	ldr	r0, [r7, #4]
 8006e40:	f000 fa6e 	bl	8007320 <USBD_StdEPReq>
      break;
 8006e44:	e00a      	b.n	8006e5c <USBD_LL_SetupStage+0x8c>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8006e4c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006e50:	b2db      	uxtb	r3, r3
 8006e52:	4619      	mov	r1, r3
 8006e54:	6878      	ldr	r0, [r7, #4]
 8006e56:	f001 fb55 	bl	8008504 <USBD_LL_StallEP>
      break;
 8006e5a:	bf00      	nop
  }

  return USBD_OK;
 8006e5c:	2300      	movs	r3, #0
}
 8006e5e:	4618      	mov	r0, r3
 8006e60:	3708      	adds	r7, #8
 8006e62:	46bd      	mov	sp, r7
 8006e64:	bd80      	pop	{r7, pc}

08006e66 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8006e66:	b580      	push	{r7, lr}
 8006e68:	b086      	sub	sp, #24
 8006e6a:	af00      	add	r7, sp, #0
 8006e6c:	60f8      	str	r0, [r7, #12]
 8006e6e:	460b      	mov	r3, r1
 8006e70:	607a      	str	r2, [r7, #4]
 8006e72:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8006e74:	7afb      	ldrb	r3, [r7, #11]
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	d14b      	bne.n	8006f12 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8006e80:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006e88:	2b03      	cmp	r3, #3
 8006e8a:	d134      	bne.n	8006ef6 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8006e8c:	697b      	ldr	r3, [r7, #20]
 8006e8e:	68da      	ldr	r2, [r3, #12]
 8006e90:	697b      	ldr	r3, [r7, #20]
 8006e92:	691b      	ldr	r3, [r3, #16]
 8006e94:	429a      	cmp	r2, r3
 8006e96:	d919      	bls.n	8006ecc <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8006e98:	697b      	ldr	r3, [r7, #20]
 8006e9a:	68da      	ldr	r2, [r3, #12]
 8006e9c:	697b      	ldr	r3, [r7, #20]
 8006e9e:	691b      	ldr	r3, [r3, #16]
 8006ea0:	1ad2      	subs	r2, r2, r3
 8006ea2:	697b      	ldr	r3, [r7, #20]
 8006ea4:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8006ea6:	697b      	ldr	r3, [r7, #20]
 8006ea8:	68da      	ldr	r2, [r3, #12]
 8006eaa:	697b      	ldr	r3, [r7, #20]
 8006eac:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8006eae:	429a      	cmp	r2, r3
 8006eb0:	d203      	bcs.n	8006eba <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8006eb2:	697b      	ldr	r3, [r7, #20]
 8006eb4:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8006eb6:	b29b      	uxth	r3, r3
 8006eb8:	e002      	b.n	8006ec0 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8006eba:	697b      	ldr	r3, [r7, #20]
 8006ebc:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8006ebe:	b29b      	uxth	r3, r3
 8006ec0:	461a      	mov	r2, r3
 8006ec2:	6879      	ldr	r1, [r7, #4]
 8006ec4:	68f8      	ldr	r0, [r7, #12]
 8006ec6:	f000 ff51 	bl	8007d6c <USBD_CtlContinueRx>
 8006eca:	e038      	b.n	8006f3e <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006ed2:	691b      	ldr	r3, [r3, #16]
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	d00a      	beq.n	8006eee <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8006ede:	2b03      	cmp	r3, #3
 8006ee0:	d105      	bne.n	8006eee <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006ee8:	691b      	ldr	r3, [r3, #16]
 8006eea:	68f8      	ldr	r0, [r7, #12]
 8006eec:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8006eee:	68f8      	ldr	r0, [r7, #12]
 8006ef0:	f000 ff4e 	bl	8007d90 <USBD_CtlSendStatus>
 8006ef4:	e023      	b.n	8006f3e <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006efc:	2b05      	cmp	r3, #5
 8006efe:	d11e      	bne.n	8006f3e <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	2200      	movs	r2, #0
 8006f04:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 8006f08:	2100      	movs	r1, #0
 8006f0a:	68f8      	ldr	r0, [r7, #12]
 8006f0c:	f001 fafa 	bl	8008504 <USBD_LL_StallEP>
 8006f10:	e015      	b.n	8006f3e <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006f18:	699b      	ldr	r3, [r3, #24]
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	d00d      	beq.n	8006f3a <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8006f24:	2b03      	cmp	r3, #3
 8006f26:	d108      	bne.n	8006f3a <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006f2e:	699b      	ldr	r3, [r3, #24]
 8006f30:	7afa      	ldrb	r2, [r7, #11]
 8006f32:	4611      	mov	r1, r2
 8006f34:	68f8      	ldr	r0, [r7, #12]
 8006f36:	4798      	blx	r3
 8006f38:	e001      	b.n	8006f3e <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8006f3a:	2302      	movs	r3, #2
 8006f3c:	e000      	b.n	8006f40 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8006f3e:	2300      	movs	r3, #0
}
 8006f40:	4618      	mov	r0, r3
 8006f42:	3718      	adds	r7, #24
 8006f44:	46bd      	mov	sp, r7
 8006f46:	bd80      	pop	{r7, pc}

08006f48 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8006f48:	b580      	push	{r7, lr}
 8006f4a:	b086      	sub	sp, #24
 8006f4c:	af00      	add	r7, sp, #0
 8006f4e:	60f8      	str	r0, [r7, #12]
 8006f50:	460b      	mov	r3, r1
 8006f52:	607a      	str	r2, [r7, #4]
 8006f54:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8006f56:	7afb      	ldrb	r3, [r7, #11]
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	d17f      	bne.n	800705c <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	3314      	adds	r3, #20
 8006f60:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006f68:	2b02      	cmp	r3, #2
 8006f6a:	d15c      	bne.n	8007026 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8006f6c:	697b      	ldr	r3, [r7, #20]
 8006f6e:	68da      	ldr	r2, [r3, #12]
 8006f70:	697b      	ldr	r3, [r7, #20]
 8006f72:	691b      	ldr	r3, [r3, #16]
 8006f74:	429a      	cmp	r2, r3
 8006f76:	d915      	bls.n	8006fa4 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8006f78:	697b      	ldr	r3, [r7, #20]
 8006f7a:	68da      	ldr	r2, [r3, #12]
 8006f7c:	697b      	ldr	r3, [r7, #20]
 8006f7e:	691b      	ldr	r3, [r3, #16]
 8006f80:	1ad2      	subs	r2, r2, r3
 8006f82:	697b      	ldr	r3, [r7, #20]
 8006f84:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8006f86:	697b      	ldr	r3, [r7, #20]
 8006f88:	68db      	ldr	r3, [r3, #12]
 8006f8a:	b29b      	uxth	r3, r3
 8006f8c:	461a      	mov	r2, r3
 8006f8e:	6879      	ldr	r1, [r7, #4]
 8006f90:	68f8      	ldr	r0, [r7, #12]
 8006f92:	f000 febb 	bl	8007d0c <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006f96:	2300      	movs	r3, #0
 8006f98:	2200      	movs	r2, #0
 8006f9a:	2100      	movs	r1, #0
 8006f9c:	68f8      	ldr	r0, [r7, #12]
 8006f9e:	f001 fb5e 	bl	800865e <USBD_LL_PrepareReceive>
 8006fa2:	e04e      	b.n	8007042 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8006fa4:	697b      	ldr	r3, [r7, #20]
 8006fa6:	689b      	ldr	r3, [r3, #8]
 8006fa8:	697a      	ldr	r2, [r7, #20]
 8006faa:	6912      	ldr	r2, [r2, #16]
 8006fac:	fbb3 f1f2 	udiv	r1, r3, r2
 8006fb0:	fb02 f201 	mul.w	r2, r2, r1
 8006fb4:	1a9b      	subs	r3, r3, r2
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	d11c      	bne.n	8006ff4 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 8006fba:	697b      	ldr	r3, [r7, #20]
 8006fbc:	689a      	ldr	r2, [r3, #8]
 8006fbe:	697b      	ldr	r3, [r7, #20]
 8006fc0:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8006fc2:	429a      	cmp	r2, r3
 8006fc4:	d316      	bcc.n	8006ff4 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8006fc6:	697b      	ldr	r3, [r7, #20]
 8006fc8:	689a      	ldr	r2, [r3, #8]
 8006fca:	68fb      	ldr	r3, [r7, #12]
 8006fcc:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8006fd0:	429a      	cmp	r2, r3
 8006fd2:	d20f      	bcs.n	8006ff4 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8006fd4:	2200      	movs	r2, #0
 8006fd6:	2100      	movs	r1, #0
 8006fd8:	68f8      	ldr	r0, [r7, #12]
 8006fda:	f000 fe97 	bl	8007d0c <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	2200      	movs	r2, #0
 8006fe2:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006fe6:	2300      	movs	r3, #0
 8006fe8:	2200      	movs	r2, #0
 8006fea:	2100      	movs	r1, #0
 8006fec:	68f8      	ldr	r0, [r7, #12]
 8006fee:	f001 fb36 	bl	800865e <USBD_LL_PrepareReceive>
 8006ff2:	e026      	b.n	8007042 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006ffa:	68db      	ldr	r3, [r3, #12]
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	d00a      	beq.n	8007016 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8007006:	2b03      	cmp	r3, #3
 8007008:	d105      	bne.n	8007016 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007010:	68db      	ldr	r3, [r3, #12]
 8007012:	68f8      	ldr	r0, [r7, #12]
 8007014:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8007016:	2180      	movs	r1, #128	; 0x80
 8007018:	68f8      	ldr	r0, [r7, #12]
 800701a:	f001 fa73 	bl	8008504 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 800701e:	68f8      	ldr	r0, [r7, #12]
 8007020:	f000 fec9 	bl	8007db6 <USBD_CtlReceiveStatus>
 8007024:	e00d      	b.n	8007042 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800702c:	2b04      	cmp	r3, #4
 800702e:	d004      	beq.n	800703a <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8007036:	2b00      	cmp	r3, #0
 8007038:	d103      	bne.n	8007042 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 800703a:	2180      	movs	r1, #128	; 0x80
 800703c:	68f8      	ldr	r0, [r7, #12]
 800703e:	f001 fa61 	bl	8008504 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8007048:	2b01      	cmp	r3, #1
 800704a:	d11d      	bne.n	8007088 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 800704c:	68f8      	ldr	r0, [r7, #12]
 800704e:	f7ff fe82 	bl	8006d56 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	2200      	movs	r2, #0
 8007056:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800705a:	e015      	b.n	8007088 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007062:	695b      	ldr	r3, [r3, #20]
 8007064:	2b00      	cmp	r3, #0
 8007066:	d00d      	beq.n	8007084 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 800706e:	2b03      	cmp	r3, #3
 8007070:	d108      	bne.n	8007084 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007078:	695b      	ldr	r3, [r3, #20]
 800707a:	7afa      	ldrb	r2, [r7, #11]
 800707c:	4611      	mov	r1, r2
 800707e:	68f8      	ldr	r0, [r7, #12]
 8007080:	4798      	blx	r3
 8007082:	e001      	b.n	8007088 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8007084:	2302      	movs	r3, #2
 8007086:	e000      	b.n	800708a <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8007088:	2300      	movs	r3, #0
}
 800708a:	4618      	mov	r0, r3
 800708c:	3718      	adds	r7, #24
 800708e:	46bd      	mov	sp, r7
 8007090:	bd80      	pop	{r7, pc}

08007092 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8007092:	b580      	push	{r7, lr}
 8007094:	b082      	sub	sp, #8
 8007096:	af00      	add	r7, sp, #0
 8007098:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800709a:	2340      	movs	r3, #64	; 0x40
 800709c:	2200      	movs	r2, #0
 800709e:	2100      	movs	r1, #0
 80070a0:	6878      	ldr	r0, [r7, #4]
 80070a2:	f001 f9ea 	bl	800847a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	2201      	movs	r2, #1
 80070aa:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	2240      	movs	r2, #64	; 0x40
 80070b2:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80070b6:	2340      	movs	r3, #64	; 0x40
 80070b8:	2200      	movs	r2, #0
 80070ba:	2180      	movs	r1, #128	; 0x80
 80070bc:	6878      	ldr	r0, [r7, #4]
 80070be:	f001 f9dc 	bl	800847a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	2201      	movs	r2, #1
 80070c6:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	2240      	movs	r2, #64	; 0x40
 80070cc:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	2201      	movs	r2, #1
 80070d2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	2200      	movs	r2, #0
 80070da:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	2200      	movs	r2, #0
 80070e2:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	2200      	movs	r2, #0
 80070e8:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	d009      	beq.n	800710a <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80070fc:	685b      	ldr	r3, [r3, #4]
 80070fe:	687a      	ldr	r2, [r7, #4]
 8007100:	6852      	ldr	r2, [r2, #4]
 8007102:	b2d2      	uxtb	r2, r2
 8007104:	4611      	mov	r1, r2
 8007106:	6878      	ldr	r0, [r7, #4]
 8007108:	4798      	blx	r3
  }

  return USBD_OK;
 800710a:	2300      	movs	r3, #0
}
 800710c:	4618      	mov	r0, r3
 800710e:	3708      	adds	r7, #8
 8007110:	46bd      	mov	sp, r7
 8007112:	bd80      	pop	{r7, pc}

08007114 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8007114:	b480      	push	{r7}
 8007116:	b083      	sub	sp, #12
 8007118:	af00      	add	r7, sp, #0
 800711a:	6078      	str	r0, [r7, #4]
 800711c:	460b      	mov	r3, r1
 800711e:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	78fa      	ldrb	r2, [r7, #3]
 8007124:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8007126:	2300      	movs	r3, #0
}
 8007128:	4618      	mov	r0, r3
 800712a:	370c      	adds	r7, #12
 800712c:	46bd      	mov	sp, r7
 800712e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007132:	4770      	bx	lr

08007134 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8007134:	b480      	push	{r7}
 8007136:	b083      	sub	sp, #12
 8007138:	af00      	add	r7, sp, #0
 800713a:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	2204      	movs	r2, #4
 800714c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8007150:	2300      	movs	r3, #0
}
 8007152:	4618      	mov	r0, r3
 8007154:	370c      	adds	r7, #12
 8007156:	46bd      	mov	sp, r7
 8007158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800715c:	4770      	bx	lr

0800715e <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800715e:	b480      	push	{r7}
 8007160:	b083      	sub	sp, #12
 8007162:	af00      	add	r7, sp, #0
 8007164:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800716c:	2b04      	cmp	r3, #4
 800716e:	d105      	bne.n	800717c <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800717c:	2300      	movs	r3, #0
}
 800717e:	4618      	mov	r0, r3
 8007180:	370c      	adds	r7, #12
 8007182:	46bd      	mov	sp, r7
 8007184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007188:	4770      	bx	lr

0800718a <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800718a:	b580      	push	{r7, lr}
 800718c:	b082      	sub	sp, #8
 800718e:	af00      	add	r7, sp, #0
 8007190:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007198:	2b03      	cmp	r3, #3
 800719a:	d10b      	bne.n	80071b4 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80071a2:	69db      	ldr	r3, [r3, #28]
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	d005      	beq.n	80071b4 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80071ae:	69db      	ldr	r3, [r3, #28]
 80071b0:	6878      	ldr	r0, [r7, #4]
 80071b2:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80071b4:	2300      	movs	r3, #0
}
 80071b6:	4618      	mov	r0, r3
 80071b8:	3708      	adds	r7, #8
 80071ba:	46bd      	mov	sp, r7
 80071bc:	bd80      	pop	{r7, pc}
	...

080071c0 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 80071c0:	b580      	push	{r7, lr}
 80071c2:	b084      	sub	sp, #16
 80071c4:	af00      	add	r7, sp, #0
 80071c6:	6078      	str	r0, [r7, #4]
 80071c8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80071ca:	2300      	movs	r3, #0
 80071cc:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80071ce:	683b      	ldr	r3, [r7, #0]
 80071d0:	781b      	ldrb	r3, [r3, #0]
 80071d2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80071d6:	2b20      	cmp	r3, #32
 80071d8:	d004      	beq.n	80071e4 <USBD_StdDevReq+0x24>
 80071da:	2b40      	cmp	r3, #64	; 0x40
 80071dc:	d002      	beq.n	80071e4 <USBD_StdDevReq+0x24>
 80071de:	2b00      	cmp	r3, #0
 80071e0:	d008      	beq.n	80071f4 <USBD_StdDevReq+0x34>
 80071e2:	e04c      	b.n	800727e <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80071ea:	689b      	ldr	r3, [r3, #8]
 80071ec:	6839      	ldr	r1, [r7, #0]
 80071ee:	6878      	ldr	r0, [r7, #4]
 80071f0:	4798      	blx	r3
      break;
 80071f2:	e049      	b.n	8007288 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80071f4:	683b      	ldr	r3, [r7, #0]
 80071f6:	785b      	ldrb	r3, [r3, #1]
 80071f8:	2b09      	cmp	r3, #9
 80071fa:	d83a      	bhi.n	8007272 <USBD_StdDevReq+0xb2>
 80071fc:	a201      	add	r2, pc, #4	; (adr r2, 8007204 <USBD_StdDevReq+0x44>)
 80071fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007202:	bf00      	nop
 8007204:	08007255 	.word	0x08007255
 8007208:	08007269 	.word	0x08007269
 800720c:	08007273 	.word	0x08007273
 8007210:	0800725f 	.word	0x0800725f
 8007214:	08007273 	.word	0x08007273
 8007218:	08007237 	.word	0x08007237
 800721c:	0800722d 	.word	0x0800722d
 8007220:	08007273 	.word	0x08007273
 8007224:	0800724b 	.word	0x0800724b
 8007228:	08007241 	.word	0x08007241
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800722c:	6839      	ldr	r1, [r7, #0]
 800722e:	6878      	ldr	r0, [r7, #4]
 8007230:	f000 f9d4 	bl	80075dc <USBD_GetDescriptor>
          break;
 8007234:	e022      	b.n	800727c <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8007236:	6839      	ldr	r1, [r7, #0]
 8007238:	6878      	ldr	r0, [r7, #4]
 800723a:	f000 fb37 	bl	80078ac <USBD_SetAddress>
          break;
 800723e:	e01d      	b.n	800727c <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8007240:	6839      	ldr	r1, [r7, #0]
 8007242:	6878      	ldr	r0, [r7, #4]
 8007244:	f000 fb74 	bl	8007930 <USBD_SetConfig>
          break;
 8007248:	e018      	b.n	800727c <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800724a:	6839      	ldr	r1, [r7, #0]
 800724c:	6878      	ldr	r0, [r7, #4]
 800724e:	f000 fbfd 	bl	8007a4c <USBD_GetConfig>
          break;
 8007252:	e013      	b.n	800727c <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8007254:	6839      	ldr	r1, [r7, #0]
 8007256:	6878      	ldr	r0, [r7, #4]
 8007258:	f000 fc2c 	bl	8007ab4 <USBD_GetStatus>
          break;
 800725c:	e00e      	b.n	800727c <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800725e:	6839      	ldr	r1, [r7, #0]
 8007260:	6878      	ldr	r0, [r7, #4]
 8007262:	f000 fc5a 	bl	8007b1a <USBD_SetFeature>
          break;
 8007266:	e009      	b.n	800727c <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8007268:	6839      	ldr	r1, [r7, #0]
 800726a:	6878      	ldr	r0, [r7, #4]
 800726c:	f000 fc69 	bl	8007b42 <USBD_ClrFeature>
          break;
 8007270:	e004      	b.n	800727c <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 8007272:	6839      	ldr	r1, [r7, #0]
 8007274:	6878      	ldr	r0, [r7, #4]
 8007276:	f000 fcc2 	bl	8007bfe <USBD_CtlError>
          break;
 800727a:	bf00      	nop
      }
      break;
 800727c:	e004      	b.n	8007288 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 800727e:	6839      	ldr	r1, [r7, #0]
 8007280:	6878      	ldr	r0, [r7, #4]
 8007282:	f000 fcbc 	bl	8007bfe <USBD_CtlError>
      break;
 8007286:	bf00      	nop
  }

  return ret;
 8007288:	7bfb      	ldrb	r3, [r7, #15]
}
 800728a:	4618      	mov	r0, r3
 800728c:	3710      	adds	r7, #16
 800728e:	46bd      	mov	sp, r7
 8007290:	bd80      	pop	{r7, pc}
 8007292:	bf00      	nop

08007294 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8007294:	b580      	push	{r7, lr}
 8007296:	b084      	sub	sp, #16
 8007298:	af00      	add	r7, sp, #0
 800729a:	6078      	str	r0, [r7, #4]
 800729c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800729e:	2300      	movs	r3, #0
 80072a0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80072a2:	683b      	ldr	r3, [r7, #0]
 80072a4:	781b      	ldrb	r3, [r3, #0]
 80072a6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80072aa:	2b20      	cmp	r3, #32
 80072ac:	d003      	beq.n	80072b6 <USBD_StdItfReq+0x22>
 80072ae:	2b40      	cmp	r3, #64	; 0x40
 80072b0:	d001      	beq.n	80072b6 <USBD_StdItfReq+0x22>
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	d12a      	bne.n	800730c <USBD_StdItfReq+0x78>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80072bc:	3b01      	subs	r3, #1
 80072be:	2b02      	cmp	r3, #2
 80072c0:	d81d      	bhi.n	80072fe <USBD_StdItfReq+0x6a>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80072c2:	683b      	ldr	r3, [r7, #0]
 80072c4:	889b      	ldrh	r3, [r3, #4]
 80072c6:	b2db      	uxtb	r3, r3
 80072c8:	2b01      	cmp	r3, #1
 80072ca:	d813      	bhi.n	80072f4 <USBD_StdItfReq+0x60>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80072d2:	689b      	ldr	r3, [r3, #8]
 80072d4:	6839      	ldr	r1, [r7, #0]
 80072d6:	6878      	ldr	r0, [r7, #4]
 80072d8:	4798      	blx	r3
 80072da:	4603      	mov	r3, r0
 80072dc:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80072de:	683b      	ldr	r3, [r7, #0]
 80072e0:	88db      	ldrh	r3, [r3, #6]
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	d110      	bne.n	8007308 <USBD_StdItfReq+0x74>
 80072e6:	7bfb      	ldrb	r3, [r7, #15]
 80072e8:	2b00      	cmp	r3, #0
 80072ea:	d10d      	bne.n	8007308 <USBD_StdItfReq+0x74>
            {
              USBD_CtlSendStatus(pdev);
 80072ec:	6878      	ldr	r0, [r7, #4]
 80072ee:	f000 fd4f 	bl	8007d90 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80072f2:	e009      	b.n	8007308 <USBD_StdItfReq+0x74>
            USBD_CtlError(pdev, req);
 80072f4:	6839      	ldr	r1, [r7, #0]
 80072f6:	6878      	ldr	r0, [r7, #4]
 80072f8:	f000 fc81 	bl	8007bfe <USBD_CtlError>
          break;
 80072fc:	e004      	b.n	8007308 <USBD_StdItfReq+0x74>

        default:
          USBD_CtlError(pdev, req);
 80072fe:	6839      	ldr	r1, [r7, #0]
 8007300:	6878      	ldr	r0, [r7, #4]
 8007302:	f000 fc7c 	bl	8007bfe <USBD_CtlError>
          break;
 8007306:	e000      	b.n	800730a <USBD_StdItfReq+0x76>
          break;
 8007308:	bf00      	nop
      }
      break;
 800730a:	e004      	b.n	8007316 <USBD_StdItfReq+0x82>

    default:
      USBD_CtlError(pdev, req);
 800730c:	6839      	ldr	r1, [r7, #0]
 800730e:	6878      	ldr	r0, [r7, #4]
 8007310:	f000 fc75 	bl	8007bfe <USBD_CtlError>
      break;
 8007314:	bf00      	nop
  }

  return USBD_OK;
 8007316:	2300      	movs	r3, #0
}
 8007318:	4618      	mov	r0, r3
 800731a:	3710      	adds	r7, #16
 800731c:	46bd      	mov	sp, r7
 800731e:	bd80      	pop	{r7, pc}

08007320 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8007320:	b580      	push	{r7, lr}
 8007322:	b084      	sub	sp, #16
 8007324:	af00      	add	r7, sp, #0
 8007326:	6078      	str	r0, [r7, #4]
 8007328:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800732a:	2300      	movs	r3, #0
 800732c:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 800732e:	683b      	ldr	r3, [r7, #0]
 8007330:	889b      	ldrh	r3, [r3, #4]
 8007332:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007334:	683b      	ldr	r3, [r7, #0]
 8007336:	781b      	ldrb	r3, [r3, #0]
 8007338:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800733c:	2b20      	cmp	r3, #32
 800733e:	d004      	beq.n	800734a <USBD_StdEPReq+0x2a>
 8007340:	2b40      	cmp	r3, #64	; 0x40
 8007342:	d002      	beq.n	800734a <USBD_StdEPReq+0x2a>
 8007344:	2b00      	cmp	r3, #0
 8007346:	d008      	beq.n	800735a <USBD_StdEPReq+0x3a>
 8007348:	e13d      	b.n	80075c6 <USBD_StdEPReq+0x2a6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007350:	689b      	ldr	r3, [r3, #8]
 8007352:	6839      	ldr	r1, [r7, #0]
 8007354:	6878      	ldr	r0, [r7, #4]
 8007356:	4798      	blx	r3
      break;
 8007358:	e13a      	b.n	80075d0 <USBD_StdEPReq+0x2b0>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 800735a:	683b      	ldr	r3, [r7, #0]
 800735c:	781b      	ldrb	r3, [r3, #0]
 800735e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007362:	2b20      	cmp	r3, #32
 8007364:	d10a      	bne.n	800737c <USBD_StdEPReq+0x5c>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800736c:	689b      	ldr	r3, [r3, #8]
 800736e:	6839      	ldr	r1, [r7, #0]
 8007370:	6878      	ldr	r0, [r7, #4]
 8007372:	4798      	blx	r3
 8007374:	4603      	mov	r3, r0
 8007376:	73fb      	strb	r3, [r7, #15]

        return ret;
 8007378:	7bfb      	ldrb	r3, [r7, #15]
 800737a:	e12a      	b.n	80075d2 <USBD_StdEPReq+0x2b2>
      }

      switch (req->bRequest)
 800737c:	683b      	ldr	r3, [r7, #0]
 800737e:	785b      	ldrb	r3, [r3, #1]
 8007380:	2b01      	cmp	r3, #1
 8007382:	d03e      	beq.n	8007402 <USBD_StdEPReq+0xe2>
 8007384:	2b03      	cmp	r3, #3
 8007386:	d002      	beq.n	800738e <USBD_StdEPReq+0x6e>
 8007388:	2b00      	cmp	r3, #0
 800738a:	d070      	beq.n	800746e <USBD_StdEPReq+0x14e>
 800738c:	e115      	b.n	80075ba <USBD_StdEPReq+0x29a>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007394:	2b02      	cmp	r3, #2
 8007396:	d002      	beq.n	800739e <USBD_StdEPReq+0x7e>
 8007398:	2b03      	cmp	r3, #3
 800739a:	d015      	beq.n	80073c8 <USBD_StdEPReq+0xa8>
 800739c:	e02b      	b.n	80073f6 <USBD_StdEPReq+0xd6>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800739e:	7bbb      	ldrb	r3, [r7, #14]
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	d00c      	beq.n	80073be <USBD_StdEPReq+0x9e>
 80073a4:	7bbb      	ldrb	r3, [r7, #14]
 80073a6:	2b80      	cmp	r3, #128	; 0x80
 80073a8:	d009      	beq.n	80073be <USBD_StdEPReq+0x9e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 80073aa:	7bbb      	ldrb	r3, [r7, #14]
 80073ac:	4619      	mov	r1, r3
 80073ae:	6878      	ldr	r0, [r7, #4]
 80073b0:	f001 f8a8 	bl	8008504 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 80073b4:	2180      	movs	r1, #128	; 0x80
 80073b6:	6878      	ldr	r0, [r7, #4]
 80073b8:	f001 f8a4 	bl	8008504 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80073bc:	e020      	b.n	8007400 <USBD_StdEPReq+0xe0>
                USBD_CtlError(pdev, req);
 80073be:	6839      	ldr	r1, [r7, #0]
 80073c0:	6878      	ldr	r0, [r7, #4]
 80073c2:	f000 fc1c 	bl	8007bfe <USBD_CtlError>
              break;
 80073c6:	e01b      	b.n	8007400 <USBD_StdEPReq+0xe0>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80073c8:	683b      	ldr	r3, [r7, #0]
 80073ca:	885b      	ldrh	r3, [r3, #2]
 80073cc:	2b00      	cmp	r3, #0
 80073ce:	d10e      	bne.n	80073ee <USBD_StdEPReq+0xce>
              {
                if ((ep_addr != 0x00U) &&
 80073d0:	7bbb      	ldrb	r3, [r7, #14]
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	d00b      	beq.n	80073ee <USBD_StdEPReq+0xce>
 80073d6:	7bbb      	ldrb	r3, [r7, #14]
 80073d8:	2b80      	cmp	r3, #128	; 0x80
 80073da:	d008      	beq.n	80073ee <USBD_StdEPReq+0xce>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80073dc:	683b      	ldr	r3, [r7, #0]
 80073de:	88db      	ldrh	r3, [r3, #6]
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	d104      	bne.n	80073ee <USBD_StdEPReq+0xce>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 80073e4:	7bbb      	ldrb	r3, [r7, #14]
 80073e6:	4619      	mov	r1, r3
 80073e8:	6878      	ldr	r0, [r7, #4]
 80073ea:	f001 f88b 	bl	8008504 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 80073ee:	6878      	ldr	r0, [r7, #4]
 80073f0:	f000 fcce 	bl	8007d90 <USBD_CtlSendStatus>

              break;
 80073f4:	e004      	b.n	8007400 <USBD_StdEPReq+0xe0>

            default:
              USBD_CtlError(pdev, req);
 80073f6:	6839      	ldr	r1, [r7, #0]
 80073f8:	6878      	ldr	r0, [r7, #4]
 80073fa:	f000 fc00 	bl	8007bfe <USBD_CtlError>
              break;
 80073fe:	bf00      	nop
          }
          break;
 8007400:	e0e0      	b.n	80075c4 <USBD_StdEPReq+0x2a4>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007408:	2b02      	cmp	r3, #2
 800740a:	d002      	beq.n	8007412 <USBD_StdEPReq+0xf2>
 800740c:	2b03      	cmp	r3, #3
 800740e:	d015      	beq.n	800743c <USBD_StdEPReq+0x11c>
 8007410:	e026      	b.n	8007460 <USBD_StdEPReq+0x140>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007412:	7bbb      	ldrb	r3, [r7, #14]
 8007414:	2b00      	cmp	r3, #0
 8007416:	d00c      	beq.n	8007432 <USBD_StdEPReq+0x112>
 8007418:	7bbb      	ldrb	r3, [r7, #14]
 800741a:	2b80      	cmp	r3, #128	; 0x80
 800741c:	d009      	beq.n	8007432 <USBD_StdEPReq+0x112>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800741e:	7bbb      	ldrb	r3, [r7, #14]
 8007420:	4619      	mov	r1, r3
 8007422:	6878      	ldr	r0, [r7, #4]
 8007424:	f001 f86e 	bl	8008504 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8007428:	2180      	movs	r1, #128	; 0x80
 800742a:	6878      	ldr	r0, [r7, #4]
 800742c:	f001 f86a 	bl	8008504 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007430:	e01c      	b.n	800746c <USBD_StdEPReq+0x14c>
                USBD_CtlError(pdev, req);
 8007432:	6839      	ldr	r1, [r7, #0]
 8007434:	6878      	ldr	r0, [r7, #4]
 8007436:	f000 fbe2 	bl	8007bfe <USBD_CtlError>
              break;
 800743a:	e017      	b.n	800746c <USBD_StdEPReq+0x14c>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800743c:	683b      	ldr	r3, [r7, #0]
 800743e:	885b      	ldrh	r3, [r3, #2]
 8007440:	2b00      	cmp	r3, #0
 8007442:	d112      	bne.n	800746a <USBD_StdEPReq+0x14a>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8007444:	7bbb      	ldrb	r3, [r7, #14]
 8007446:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800744a:	2b00      	cmp	r3, #0
 800744c:	d004      	beq.n	8007458 <USBD_StdEPReq+0x138>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 800744e:	7bbb      	ldrb	r3, [r7, #14]
 8007450:	4619      	mov	r1, r3
 8007452:	6878      	ldr	r0, [r7, #4]
 8007454:	f001 f875 	bl	8008542 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8007458:	6878      	ldr	r0, [r7, #4]
 800745a:	f000 fc99 	bl	8007d90 <USBD_CtlSendStatus>
              }
              break;
 800745e:	e004      	b.n	800746a <USBD_StdEPReq+0x14a>

            default:
              USBD_CtlError(pdev, req);
 8007460:	6839      	ldr	r1, [r7, #0]
 8007462:	6878      	ldr	r0, [r7, #4]
 8007464:	f000 fbcb 	bl	8007bfe <USBD_CtlError>
              break;
 8007468:	e000      	b.n	800746c <USBD_StdEPReq+0x14c>
              break;
 800746a:	bf00      	nop
          }
          break;
 800746c:	e0aa      	b.n	80075c4 <USBD_StdEPReq+0x2a4>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007474:	2b02      	cmp	r3, #2
 8007476:	d002      	beq.n	800747e <USBD_StdEPReq+0x15e>
 8007478:	2b03      	cmp	r3, #3
 800747a:	d032      	beq.n	80074e2 <USBD_StdEPReq+0x1c2>
 800747c:	e097      	b.n	80075ae <USBD_StdEPReq+0x28e>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800747e:	7bbb      	ldrb	r3, [r7, #14]
 8007480:	2b00      	cmp	r3, #0
 8007482:	d007      	beq.n	8007494 <USBD_StdEPReq+0x174>
 8007484:	7bbb      	ldrb	r3, [r7, #14]
 8007486:	2b80      	cmp	r3, #128	; 0x80
 8007488:	d004      	beq.n	8007494 <USBD_StdEPReq+0x174>
              {
                USBD_CtlError(pdev, req);
 800748a:	6839      	ldr	r1, [r7, #0]
 800748c:	6878      	ldr	r0, [r7, #4]
 800748e:	f000 fbb6 	bl	8007bfe <USBD_CtlError>
                break;
 8007492:	e091      	b.n	80075b8 <USBD_StdEPReq+0x298>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007494:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007498:	2b00      	cmp	r3, #0
 800749a:	da0b      	bge.n	80074b4 <USBD_StdEPReq+0x194>
 800749c:	7bbb      	ldrb	r3, [r7, #14]
 800749e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80074a2:	4613      	mov	r3, r2
 80074a4:	009b      	lsls	r3, r3, #2
 80074a6:	4413      	add	r3, r2
 80074a8:	009b      	lsls	r3, r3, #2
 80074aa:	3310      	adds	r3, #16
 80074ac:	687a      	ldr	r2, [r7, #4]
 80074ae:	4413      	add	r3, r2
 80074b0:	3304      	adds	r3, #4
 80074b2:	e00b      	b.n	80074cc <USBD_StdEPReq+0x1ac>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80074b4:	7bbb      	ldrb	r3, [r7, #14]
 80074b6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80074ba:	4613      	mov	r3, r2
 80074bc:	009b      	lsls	r3, r3, #2
 80074be:	4413      	add	r3, r2
 80074c0:	009b      	lsls	r3, r3, #2
 80074c2:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80074c6:	687a      	ldr	r2, [r7, #4]
 80074c8:	4413      	add	r3, r2
 80074ca:	3304      	adds	r3, #4
 80074cc:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80074ce:	68bb      	ldr	r3, [r7, #8]
 80074d0:	2200      	movs	r2, #0
 80074d2:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 80074d4:	68bb      	ldr	r3, [r7, #8]
 80074d6:	2202      	movs	r2, #2
 80074d8:	4619      	mov	r1, r3
 80074da:	6878      	ldr	r0, [r7, #4]
 80074dc:	f000 fbfa 	bl	8007cd4 <USBD_CtlSendData>
              break;
 80074e0:	e06a      	b.n	80075b8 <USBD_StdEPReq+0x298>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80074e2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	da11      	bge.n	800750e <USBD_StdEPReq+0x1ee>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80074ea:	7bbb      	ldrb	r3, [r7, #14]
 80074ec:	f003 020f 	and.w	r2, r3, #15
 80074f0:	6879      	ldr	r1, [r7, #4]
 80074f2:	4613      	mov	r3, r2
 80074f4:	009b      	lsls	r3, r3, #2
 80074f6:	4413      	add	r3, r2
 80074f8:	009b      	lsls	r3, r3, #2
 80074fa:	440b      	add	r3, r1
 80074fc:	3318      	adds	r3, #24
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	2b00      	cmp	r3, #0
 8007502:	d117      	bne.n	8007534 <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 8007504:	6839      	ldr	r1, [r7, #0]
 8007506:	6878      	ldr	r0, [r7, #4]
 8007508:	f000 fb79 	bl	8007bfe <USBD_CtlError>
                  break;
 800750c:	e054      	b.n	80075b8 <USBD_StdEPReq+0x298>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800750e:	7bbb      	ldrb	r3, [r7, #14]
 8007510:	f003 020f 	and.w	r2, r3, #15
 8007514:	6879      	ldr	r1, [r7, #4]
 8007516:	4613      	mov	r3, r2
 8007518:	009b      	lsls	r3, r3, #2
 800751a:	4413      	add	r3, r2
 800751c:	009b      	lsls	r3, r3, #2
 800751e:	440b      	add	r3, r1
 8007520:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	2b00      	cmp	r3, #0
 8007528:	d104      	bne.n	8007534 <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 800752a:	6839      	ldr	r1, [r7, #0]
 800752c:	6878      	ldr	r0, [r7, #4]
 800752e:	f000 fb66 	bl	8007bfe <USBD_CtlError>
                  break;
 8007532:	e041      	b.n	80075b8 <USBD_StdEPReq+0x298>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007534:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007538:	2b00      	cmp	r3, #0
 800753a:	da0b      	bge.n	8007554 <USBD_StdEPReq+0x234>
 800753c:	7bbb      	ldrb	r3, [r7, #14]
 800753e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007542:	4613      	mov	r3, r2
 8007544:	009b      	lsls	r3, r3, #2
 8007546:	4413      	add	r3, r2
 8007548:	009b      	lsls	r3, r3, #2
 800754a:	3310      	adds	r3, #16
 800754c:	687a      	ldr	r2, [r7, #4]
 800754e:	4413      	add	r3, r2
 8007550:	3304      	adds	r3, #4
 8007552:	e00b      	b.n	800756c <USBD_StdEPReq+0x24c>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007554:	7bbb      	ldrb	r3, [r7, #14]
 8007556:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800755a:	4613      	mov	r3, r2
 800755c:	009b      	lsls	r3, r3, #2
 800755e:	4413      	add	r3, r2
 8007560:	009b      	lsls	r3, r3, #2
 8007562:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007566:	687a      	ldr	r2, [r7, #4]
 8007568:	4413      	add	r3, r2
 800756a:	3304      	adds	r3, #4
 800756c:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800756e:	7bbb      	ldrb	r3, [r7, #14]
 8007570:	2b00      	cmp	r3, #0
 8007572:	d002      	beq.n	800757a <USBD_StdEPReq+0x25a>
 8007574:	7bbb      	ldrb	r3, [r7, #14]
 8007576:	2b80      	cmp	r3, #128	; 0x80
 8007578:	d103      	bne.n	8007582 <USBD_StdEPReq+0x262>
              {
                pep->status = 0x0000U;
 800757a:	68bb      	ldr	r3, [r7, #8]
 800757c:	2200      	movs	r2, #0
 800757e:	601a      	str	r2, [r3, #0]
 8007580:	e00e      	b.n	80075a0 <USBD_StdEPReq+0x280>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8007582:	7bbb      	ldrb	r3, [r7, #14]
 8007584:	4619      	mov	r1, r3
 8007586:	6878      	ldr	r0, [r7, #4]
 8007588:	f000 fffa 	bl	8008580 <USBD_LL_IsStallEP>
 800758c:	4603      	mov	r3, r0
 800758e:	2b00      	cmp	r3, #0
 8007590:	d003      	beq.n	800759a <USBD_StdEPReq+0x27a>
              {
                pep->status = 0x0001U;
 8007592:	68bb      	ldr	r3, [r7, #8]
 8007594:	2201      	movs	r2, #1
 8007596:	601a      	str	r2, [r3, #0]
 8007598:	e002      	b.n	80075a0 <USBD_StdEPReq+0x280>
              }
              else
              {
                pep->status = 0x0000U;
 800759a:	68bb      	ldr	r3, [r7, #8]
 800759c:	2200      	movs	r2, #0
 800759e:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 80075a0:	68bb      	ldr	r3, [r7, #8]
 80075a2:	2202      	movs	r2, #2
 80075a4:	4619      	mov	r1, r3
 80075a6:	6878      	ldr	r0, [r7, #4]
 80075a8:	f000 fb94 	bl	8007cd4 <USBD_CtlSendData>
              break;
 80075ac:	e004      	b.n	80075b8 <USBD_StdEPReq+0x298>

            default:
              USBD_CtlError(pdev, req);
 80075ae:	6839      	ldr	r1, [r7, #0]
 80075b0:	6878      	ldr	r0, [r7, #4]
 80075b2:	f000 fb24 	bl	8007bfe <USBD_CtlError>
              break;
 80075b6:	bf00      	nop
          }
          break;
 80075b8:	e004      	b.n	80075c4 <USBD_StdEPReq+0x2a4>

        default:
          USBD_CtlError(pdev, req);
 80075ba:	6839      	ldr	r1, [r7, #0]
 80075bc:	6878      	ldr	r0, [r7, #4]
 80075be:	f000 fb1e 	bl	8007bfe <USBD_CtlError>
          break;
 80075c2:	bf00      	nop
      }
      break;
 80075c4:	e004      	b.n	80075d0 <USBD_StdEPReq+0x2b0>

    default:
      USBD_CtlError(pdev, req);
 80075c6:	6839      	ldr	r1, [r7, #0]
 80075c8:	6878      	ldr	r0, [r7, #4]
 80075ca:	f000 fb18 	bl	8007bfe <USBD_CtlError>
      break;
 80075ce:	bf00      	nop
  }

  return ret;
 80075d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80075d2:	4618      	mov	r0, r3
 80075d4:	3710      	adds	r7, #16
 80075d6:	46bd      	mov	sp, r7
 80075d8:	bd80      	pop	{r7, pc}
	...

080075dc <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 80075dc:	b580      	push	{r7, lr}
 80075de:	b084      	sub	sp, #16
 80075e0:	af00      	add	r7, sp, #0
 80075e2:	6078      	str	r0, [r7, #4]
 80075e4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80075e6:	2300      	movs	r3, #0
 80075e8:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80075ea:	2300      	movs	r3, #0
 80075ec:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80075ee:	2300      	movs	r3, #0
 80075f0:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80075f2:	683b      	ldr	r3, [r7, #0]
 80075f4:	885b      	ldrh	r3, [r3, #2]
 80075f6:	0a1b      	lsrs	r3, r3, #8
 80075f8:	b29b      	uxth	r3, r3
 80075fa:	3b01      	subs	r3, #1
 80075fc:	2b06      	cmp	r3, #6
 80075fe:	f200 8128 	bhi.w	8007852 <USBD_GetDescriptor+0x276>
 8007602:	a201      	add	r2, pc, #4	; (adr r2, 8007608 <USBD_GetDescriptor+0x2c>)
 8007604:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007608:	08007625 	.word	0x08007625
 800760c:	0800763d 	.word	0x0800763d
 8007610:	0800767d 	.word	0x0800767d
 8007614:	08007853 	.word	0x08007853
 8007618:	08007853 	.word	0x08007853
 800761c:	080077f3 	.word	0x080077f3
 8007620:	0800781f 	.word	0x0800781f
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	687a      	ldr	r2, [r7, #4]
 800762e:	7c12      	ldrb	r2, [r2, #16]
 8007630:	f107 0108 	add.w	r1, r7, #8
 8007634:	4610      	mov	r0, r2
 8007636:	4798      	blx	r3
 8007638:	60f8      	str	r0, [r7, #12]
      break;
 800763a:	e112      	b.n	8007862 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	7c1b      	ldrb	r3, [r3, #16]
 8007640:	2b00      	cmp	r3, #0
 8007642:	d10d      	bne.n	8007660 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800764a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800764c:	f107 0208 	add.w	r2, r7, #8
 8007650:	4610      	mov	r0, r2
 8007652:	4798      	blx	r3
 8007654:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007656:	68fb      	ldr	r3, [r7, #12]
 8007658:	3301      	adds	r3, #1
 800765a:	2202      	movs	r2, #2
 800765c:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800765e:	e100      	b.n	8007862 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007666:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007668:	f107 0208 	add.w	r2, r7, #8
 800766c:	4610      	mov	r0, r2
 800766e:	4798      	blx	r3
 8007670:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007672:	68fb      	ldr	r3, [r7, #12]
 8007674:	3301      	adds	r3, #1
 8007676:	2202      	movs	r2, #2
 8007678:	701a      	strb	r2, [r3, #0]
      break;
 800767a:	e0f2      	b.n	8007862 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800767c:	683b      	ldr	r3, [r7, #0]
 800767e:	885b      	ldrh	r3, [r3, #2]
 8007680:	b2db      	uxtb	r3, r3
 8007682:	2b05      	cmp	r3, #5
 8007684:	f200 80ac 	bhi.w	80077e0 <USBD_GetDescriptor+0x204>
 8007688:	a201      	add	r2, pc, #4	; (adr r2, 8007690 <USBD_GetDescriptor+0xb4>)
 800768a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800768e:	bf00      	nop
 8007690:	080076a9 	.word	0x080076a9
 8007694:	080076dd 	.word	0x080076dd
 8007698:	08007711 	.word	0x08007711
 800769c:	08007745 	.word	0x08007745
 80076a0:	08007779 	.word	0x08007779
 80076a4:	080077ad 	.word	0x080077ad
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80076ae:	685b      	ldr	r3, [r3, #4]
 80076b0:	2b00      	cmp	r3, #0
 80076b2:	d00b      	beq.n	80076cc <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80076ba:	685b      	ldr	r3, [r3, #4]
 80076bc:	687a      	ldr	r2, [r7, #4]
 80076be:	7c12      	ldrb	r2, [r2, #16]
 80076c0:	f107 0108 	add.w	r1, r7, #8
 80076c4:	4610      	mov	r0, r2
 80076c6:	4798      	blx	r3
 80076c8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80076ca:	e091      	b.n	80077f0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80076cc:	6839      	ldr	r1, [r7, #0]
 80076ce:	6878      	ldr	r0, [r7, #4]
 80076d0:	f000 fa95 	bl	8007bfe <USBD_CtlError>
            err++;
 80076d4:	7afb      	ldrb	r3, [r7, #11]
 80076d6:	3301      	adds	r3, #1
 80076d8:	72fb      	strb	r3, [r7, #11]
          break;
 80076da:	e089      	b.n	80077f0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80076e2:	689b      	ldr	r3, [r3, #8]
 80076e4:	2b00      	cmp	r3, #0
 80076e6:	d00b      	beq.n	8007700 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80076ee:	689b      	ldr	r3, [r3, #8]
 80076f0:	687a      	ldr	r2, [r7, #4]
 80076f2:	7c12      	ldrb	r2, [r2, #16]
 80076f4:	f107 0108 	add.w	r1, r7, #8
 80076f8:	4610      	mov	r0, r2
 80076fa:	4798      	blx	r3
 80076fc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80076fe:	e077      	b.n	80077f0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007700:	6839      	ldr	r1, [r7, #0]
 8007702:	6878      	ldr	r0, [r7, #4]
 8007704:	f000 fa7b 	bl	8007bfe <USBD_CtlError>
            err++;
 8007708:	7afb      	ldrb	r3, [r7, #11]
 800770a:	3301      	adds	r3, #1
 800770c:	72fb      	strb	r3, [r7, #11]
          break;
 800770e:	e06f      	b.n	80077f0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007716:	68db      	ldr	r3, [r3, #12]
 8007718:	2b00      	cmp	r3, #0
 800771a:	d00b      	beq.n	8007734 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007722:	68db      	ldr	r3, [r3, #12]
 8007724:	687a      	ldr	r2, [r7, #4]
 8007726:	7c12      	ldrb	r2, [r2, #16]
 8007728:	f107 0108 	add.w	r1, r7, #8
 800772c:	4610      	mov	r0, r2
 800772e:	4798      	blx	r3
 8007730:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007732:	e05d      	b.n	80077f0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007734:	6839      	ldr	r1, [r7, #0]
 8007736:	6878      	ldr	r0, [r7, #4]
 8007738:	f000 fa61 	bl	8007bfe <USBD_CtlError>
            err++;
 800773c:	7afb      	ldrb	r3, [r7, #11]
 800773e:	3301      	adds	r3, #1
 8007740:	72fb      	strb	r3, [r7, #11]
          break;
 8007742:	e055      	b.n	80077f0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800774a:	691b      	ldr	r3, [r3, #16]
 800774c:	2b00      	cmp	r3, #0
 800774e:	d00b      	beq.n	8007768 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007756:	691b      	ldr	r3, [r3, #16]
 8007758:	687a      	ldr	r2, [r7, #4]
 800775a:	7c12      	ldrb	r2, [r2, #16]
 800775c:	f107 0108 	add.w	r1, r7, #8
 8007760:	4610      	mov	r0, r2
 8007762:	4798      	blx	r3
 8007764:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007766:	e043      	b.n	80077f0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007768:	6839      	ldr	r1, [r7, #0]
 800776a:	6878      	ldr	r0, [r7, #4]
 800776c:	f000 fa47 	bl	8007bfe <USBD_CtlError>
            err++;
 8007770:	7afb      	ldrb	r3, [r7, #11]
 8007772:	3301      	adds	r3, #1
 8007774:	72fb      	strb	r3, [r7, #11]
          break;
 8007776:	e03b      	b.n	80077f0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800777e:	695b      	ldr	r3, [r3, #20]
 8007780:	2b00      	cmp	r3, #0
 8007782:	d00b      	beq.n	800779c <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800778a:	695b      	ldr	r3, [r3, #20]
 800778c:	687a      	ldr	r2, [r7, #4]
 800778e:	7c12      	ldrb	r2, [r2, #16]
 8007790:	f107 0108 	add.w	r1, r7, #8
 8007794:	4610      	mov	r0, r2
 8007796:	4798      	blx	r3
 8007798:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800779a:	e029      	b.n	80077f0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800779c:	6839      	ldr	r1, [r7, #0]
 800779e:	6878      	ldr	r0, [r7, #4]
 80077a0:	f000 fa2d 	bl	8007bfe <USBD_CtlError>
            err++;
 80077a4:	7afb      	ldrb	r3, [r7, #11]
 80077a6:	3301      	adds	r3, #1
 80077a8:	72fb      	strb	r3, [r7, #11]
          break;
 80077aa:	e021      	b.n	80077f0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80077b2:	699b      	ldr	r3, [r3, #24]
 80077b4:	2b00      	cmp	r3, #0
 80077b6:	d00b      	beq.n	80077d0 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80077be:	699b      	ldr	r3, [r3, #24]
 80077c0:	687a      	ldr	r2, [r7, #4]
 80077c2:	7c12      	ldrb	r2, [r2, #16]
 80077c4:	f107 0108 	add.w	r1, r7, #8
 80077c8:	4610      	mov	r0, r2
 80077ca:	4798      	blx	r3
 80077cc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80077ce:	e00f      	b.n	80077f0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80077d0:	6839      	ldr	r1, [r7, #0]
 80077d2:	6878      	ldr	r0, [r7, #4]
 80077d4:	f000 fa13 	bl	8007bfe <USBD_CtlError>
            err++;
 80077d8:	7afb      	ldrb	r3, [r7, #11]
 80077da:	3301      	adds	r3, #1
 80077dc:	72fb      	strb	r3, [r7, #11]
          break;
 80077de:	e007      	b.n	80077f0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 80077e0:	6839      	ldr	r1, [r7, #0]
 80077e2:	6878      	ldr	r0, [r7, #4]
 80077e4:	f000 fa0b 	bl	8007bfe <USBD_CtlError>
          err++;
 80077e8:	7afb      	ldrb	r3, [r7, #11]
 80077ea:	3301      	adds	r3, #1
 80077ec:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 80077ee:	e038      	b.n	8007862 <USBD_GetDescriptor+0x286>
 80077f0:	e037      	b.n	8007862 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	7c1b      	ldrb	r3, [r3, #16]
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	d109      	bne.n	800780e <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007800:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007802:	f107 0208 	add.w	r2, r7, #8
 8007806:	4610      	mov	r0, r2
 8007808:	4798      	blx	r3
 800780a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800780c:	e029      	b.n	8007862 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800780e:	6839      	ldr	r1, [r7, #0]
 8007810:	6878      	ldr	r0, [r7, #4]
 8007812:	f000 f9f4 	bl	8007bfe <USBD_CtlError>
        err++;
 8007816:	7afb      	ldrb	r3, [r7, #11]
 8007818:	3301      	adds	r3, #1
 800781a:	72fb      	strb	r3, [r7, #11]
      break;
 800781c:	e021      	b.n	8007862 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	7c1b      	ldrb	r3, [r3, #16]
 8007822:	2b00      	cmp	r3, #0
 8007824:	d10d      	bne.n	8007842 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800782c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800782e:	f107 0208 	add.w	r2, r7, #8
 8007832:	4610      	mov	r0, r2
 8007834:	4798      	blx	r3
 8007836:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007838:	68fb      	ldr	r3, [r7, #12]
 800783a:	3301      	adds	r3, #1
 800783c:	2207      	movs	r2, #7
 800783e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007840:	e00f      	b.n	8007862 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007842:	6839      	ldr	r1, [r7, #0]
 8007844:	6878      	ldr	r0, [r7, #4]
 8007846:	f000 f9da 	bl	8007bfe <USBD_CtlError>
        err++;
 800784a:	7afb      	ldrb	r3, [r7, #11]
 800784c:	3301      	adds	r3, #1
 800784e:	72fb      	strb	r3, [r7, #11]
      break;
 8007850:	e007      	b.n	8007862 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8007852:	6839      	ldr	r1, [r7, #0]
 8007854:	6878      	ldr	r0, [r7, #4]
 8007856:	f000 f9d2 	bl	8007bfe <USBD_CtlError>
      err++;
 800785a:	7afb      	ldrb	r3, [r7, #11]
 800785c:	3301      	adds	r3, #1
 800785e:	72fb      	strb	r3, [r7, #11]
      break;
 8007860:	bf00      	nop
  }

  if (err != 0U)
 8007862:	7afb      	ldrb	r3, [r7, #11]
 8007864:	2b00      	cmp	r3, #0
 8007866:	d11c      	bne.n	80078a2 <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8007868:	893b      	ldrh	r3, [r7, #8]
 800786a:	2b00      	cmp	r3, #0
 800786c:	d011      	beq.n	8007892 <USBD_GetDescriptor+0x2b6>
 800786e:	683b      	ldr	r3, [r7, #0]
 8007870:	88db      	ldrh	r3, [r3, #6]
 8007872:	2b00      	cmp	r3, #0
 8007874:	d00d      	beq.n	8007892 <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 8007876:	683b      	ldr	r3, [r7, #0]
 8007878:	88da      	ldrh	r2, [r3, #6]
 800787a:	893b      	ldrh	r3, [r7, #8]
 800787c:	4293      	cmp	r3, r2
 800787e:	bf28      	it	cs
 8007880:	4613      	movcs	r3, r2
 8007882:	b29b      	uxth	r3, r3
 8007884:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8007886:	893b      	ldrh	r3, [r7, #8]
 8007888:	461a      	mov	r2, r3
 800788a:	68f9      	ldr	r1, [r7, #12]
 800788c:	6878      	ldr	r0, [r7, #4]
 800788e:	f000 fa21 	bl	8007cd4 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 8007892:	683b      	ldr	r3, [r7, #0]
 8007894:	88db      	ldrh	r3, [r3, #6]
 8007896:	2b00      	cmp	r3, #0
 8007898:	d104      	bne.n	80078a4 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 800789a:	6878      	ldr	r0, [r7, #4]
 800789c:	f000 fa78 	bl	8007d90 <USBD_CtlSendStatus>
 80078a0:	e000      	b.n	80078a4 <USBD_GetDescriptor+0x2c8>
    return;
 80078a2:	bf00      	nop
    }
  }
}
 80078a4:	3710      	adds	r7, #16
 80078a6:	46bd      	mov	sp, r7
 80078a8:	bd80      	pop	{r7, pc}
 80078aa:	bf00      	nop

080078ac <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80078ac:	b580      	push	{r7, lr}
 80078ae:	b084      	sub	sp, #16
 80078b0:	af00      	add	r7, sp, #0
 80078b2:	6078      	str	r0, [r7, #4]
 80078b4:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80078b6:	683b      	ldr	r3, [r7, #0]
 80078b8:	889b      	ldrh	r3, [r3, #4]
 80078ba:	2b00      	cmp	r3, #0
 80078bc:	d130      	bne.n	8007920 <USBD_SetAddress+0x74>
 80078be:	683b      	ldr	r3, [r7, #0]
 80078c0:	88db      	ldrh	r3, [r3, #6]
 80078c2:	2b00      	cmp	r3, #0
 80078c4:	d12c      	bne.n	8007920 <USBD_SetAddress+0x74>
 80078c6:	683b      	ldr	r3, [r7, #0]
 80078c8:	885b      	ldrh	r3, [r3, #2]
 80078ca:	2b7f      	cmp	r3, #127	; 0x7f
 80078cc:	d828      	bhi.n	8007920 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80078ce:	683b      	ldr	r3, [r7, #0]
 80078d0:	885b      	ldrh	r3, [r3, #2]
 80078d2:	b2db      	uxtb	r3, r3
 80078d4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80078d8:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80078e0:	2b03      	cmp	r3, #3
 80078e2:	d104      	bne.n	80078ee <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 80078e4:	6839      	ldr	r1, [r7, #0]
 80078e6:	6878      	ldr	r0, [r7, #4]
 80078e8:	f000 f989 	bl	8007bfe <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80078ec:	e01c      	b.n	8007928 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	7bfa      	ldrb	r2, [r7, #15]
 80078f2:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 80078f6:	7bfb      	ldrb	r3, [r7, #15]
 80078f8:	4619      	mov	r1, r3
 80078fa:	6878      	ldr	r0, [r7, #4]
 80078fc:	f000 fe6d 	bl	80085da <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8007900:	6878      	ldr	r0, [r7, #4]
 8007902:	f000 fa45 	bl	8007d90 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8007906:	7bfb      	ldrb	r3, [r7, #15]
 8007908:	2b00      	cmp	r3, #0
 800790a:	d004      	beq.n	8007916 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	2202      	movs	r2, #2
 8007910:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007914:	e008      	b.n	8007928 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	2201      	movs	r2, #1
 800791a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800791e:	e003      	b.n	8007928 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8007920:	6839      	ldr	r1, [r7, #0]
 8007922:	6878      	ldr	r0, [r7, #4]
 8007924:	f000 f96b 	bl	8007bfe <USBD_CtlError>
  }
}
 8007928:	bf00      	nop
 800792a:	3710      	adds	r7, #16
 800792c:	46bd      	mov	sp, r7
 800792e:	bd80      	pop	{r7, pc}

08007930 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007930:	b580      	push	{r7, lr}
 8007932:	b082      	sub	sp, #8
 8007934:	af00      	add	r7, sp, #0
 8007936:	6078      	str	r0, [r7, #4]
 8007938:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800793a:	683b      	ldr	r3, [r7, #0]
 800793c:	885b      	ldrh	r3, [r3, #2]
 800793e:	b2da      	uxtb	r2, r3
 8007940:	4b41      	ldr	r3, [pc, #260]	; (8007a48 <USBD_SetConfig+0x118>)
 8007942:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007944:	4b40      	ldr	r3, [pc, #256]	; (8007a48 <USBD_SetConfig+0x118>)
 8007946:	781b      	ldrb	r3, [r3, #0]
 8007948:	2b01      	cmp	r3, #1
 800794a:	d904      	bls.n	8007956 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 800794c:	6839      	ldr	r1, [r7, #0]
 800794e:	6878      	ldr	r0, [r7, #4]
 8007950:	f000 f955 	bl	8007bfe <USBD_CtlError>
 8007954:	e075      	b.n	8007a42 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800795c:	2b02      	cmp	r3, #2
 800795e:	d002      	beq.n	8007966 <USBD_SetConfig+0x36>
 8007960:	2b03      	cmp	r3, #3
 8007962:	d023      	beq.n	80079ac <USBD_SetConfig+0x7c>
 8007964:	e062      	b.n	8007a2c <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8007966:	4b38      	ldr	r3, [pc, #224]	; (8007a48 <USBD_SetConfig+0x118>)
 8007968:	781b      	ldrb	r3, [r3, #0]
 800796a:	2b00      	cmp	r3, #0
 800796c:	d01a      	beq.n	80079a4 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 800796e:	4b36      	ldr	r3, [pc, #216]	; (8007a48 <USBD_SetConfig+0x118>)
 8007970:	781b      	ldrb	r3, [r3, #0]
 8007972:	461a      	mov	r2, r3
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	2203      	movs	r2, #3
 800797c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8007980:	4b31      	ldr	r3, [pc, #196]	; (8007a48 <USBD_SetConfig+0x118>)
 8007982:	781b      	ldrb	r3, [r3, #0]
 8007984:	4619      	mov	r1, r3
 8007986:	6878      	ldr	r0, [r7, #4]
 8007988:	f7ff f9f0 	bl	8006d6c <USBD_SetClassConfig>
 800798c:	4603      	mov	r3, r0
 800798e:	2b02      	cmp	r3, #2
 8007990:	d104      	bne.n	800799c <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 8007992:	6839      	ldr	r1, [r7, #0]
 8007994:	6878      	ldr	r0, [r7, #4]
 8007996:	f000 f932 	bl	8007bfe <USBD_CtlError>
            return;
 800799a:	e052      	b.n	8007a42 <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 800799c:	6878      	ldr	r0, [r7, #4]
 800799e:	f000 f9f7 	bl	8007d90 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 80079a2:	e04e      	b.n	8007a42 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80079a4:	6878      	ldr	r0, [r7, #4]
 80079a6:	f000 f9f3 	bl	8007d90 <USBD_CtlSendStatus>
        break;
 80079aa:	e04a      	b.n	8007a42 <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 80079ac:	4b26      	ldr	r3, [pc, #152]	; (8007a48 <USBD_SetConfig+0x118>)
 80079ae:	781b      	ldrb	r3, [r3, #0]
 80079b0:	2b00      	cmp	r3, #0
 80079b2:	d112      	bne.n	80079da <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	2202      	movs	r2, #2
 80079b8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 80079bc:	4b22      	ldr	r3, [pc, #136]	; (8007a48 <USBD_SetConfig+0x118>)
 80079be:	781b      	ldrb	r3, [r3, #0]
 80079c0:	461a      	mov	r2, r3
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 80079c6:	4b20      	ldr	r3, [pc, #128]	; (8007a48 <USBD_SetConfig+0x118>)
 80079c8:	781b      	ldrb	r3, [r3, #0]
 80079ca:	4619      	mov	r1, r3
 80079cc:	6878      	ldr	r0, [r7, #4]
 80079ce:	f7ff f9ec 	bl	8006daa <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 80079d2:	6878      	ldr	r0, [r7, #4]
 80079d4:	f000 f9dc 	bl	8007d90 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 80079d8:	e033      	b.n	8007a42 <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 80079da:	4b1b      	ldr	r3, [pc, #108]	; (8007a48 <USBD_SetConfig+0x118>)
 80079dc:	781b      	ldrb	r3, [r3, #0]
 80079de:	461a      	mov	r2, r3
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	685b      	ldr	r3, [r3, #4]
 80079e4:	429a      	cmp	r2, r3
 80079e6:	d01d      	beq.n	8007a24 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	685b      	ldr	r3, [r3, #4]
 80079ec:	b2db      	uxtb	r3, r3
 80079ee:	4619      	mov	r1, r3
 80079f0:	6878      	ldr	r0, [r7, #4]
 80079f2:	f7ff f9da 	bl	8006daa <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 80079f6:	4b14      	ldr	r3, [pc, #80]	; (8007a48 <USBD_SetConfig+0x118>)
 80079f8:	781b      	ldrb	r3, [r3, #0]
 80079fa:	461a      	mov	r2, r3
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8007a00:	4b11      	ldr	r3, [pc, #68]	; (8007a48 <USBD_SetConfig+0x118>)
 8007a02:	781b      	ldrb	r3, [r3, #0]
 8007a04:	4619      	mov	r1, r3
 8007a06:	6878      	ldr	r0, [r7, #4]
 8007a08:	f7ff f9b0 	bl	8006d6c <USBD_SetClassConfig>
 8007a0c:	4603      	mov	r3, r0
 8007a0e:	2b02      	cmp	r3, #2
 8007a10:	d104      	bne.n	8007a1c <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 8007a12:	6839      	ldr	r1, [r7, #0]
 8007a14:	6878      	ldr	r0, [r7, #4]
 8007a16:	f000 f8f2 	bl	8007bfe <USBD_CtlError>
            return;
 8007a1a:	e012      	b.n	8007a42 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8007a1c:	6878      	ldr	r0, [r7, #4]
 8007a1e:	f000 f9b7 	bl	8007d90 <USBD_CtlSendStatus>
        break;
 8007a22:	e00e      	b.n	8007a42 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8007a24:	6878      	ldr	r0, [r7, #4]
 8007a26:	f000 f9b3 	bl	8007d90 <USBD_CtlSendStatus>
        break;
 8007a2a:	e00a      	b.n	8007a42 <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 8007a2c:	6839      	ldr	r1, [r7, #0]
 8007a2e:	6878      	ldr	r0, [r7, #4]
 8007a30:	f000 f8e5 	bl	8007bfe <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8007a34:	4b04      	ldr	r3, [pc, #16]	; (8007a48 <USBD_SetConfig+0x118>)
 8007a36:	781b      	ldrb	r3, [r3, #0]
 8007a38:	4619      	mov	r1, r3
 8007a3a:	6878      	ldr	r0, [r7, #4]
 8007a3c:	f7ff f9b5 	bl	8006daa <USBD_ClrClassConfig>
        break;
 8007a40:	bf00      	nop
    }
  }
}
 8007a42:	3708      	adds	r7, #8
 8007a44:	46bd      	mov	sp, r7
 8007a46:	bd80      	pop	{r7, pc}
 8007a48:	20000198 	.word	0x20000198

08007a4c <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007a4c:	b580      	push	{r7, lr}
 8007a4e:	b082      	sub	sp, #8
 8007a50:	af00      	add	r7, sp, #0
 8007a52:	6078      	str	r0, [r7, #4]
 8007a54:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8007a56:	683b      	ldr	r3, [r7, #0]
 8007a58:	88db      	ldrh	r3, [r3, #6]
 8007a5a:	2b01      	cmp	r3, #1
 8007a5c:	d004      	beq.n	8007a68 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8007a5e:	6839      	ldr	r1, [r7, #0]
 8007a60:	6878      	ldr	r0, [r7, #4]
 8007a62:	f000 f8cc 	bl	8007bfe <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8007a66:	e021      	b.n	8007aac <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007a6e:	2b01      	cmp	r3, #1
 8007a70:	db17      	blt.n	8007aa2 <USBD_GetConfig+0x56>
 8007a72:	2b02      	cmp	r3, #2
 8007a74:	dd02      	ble.n	8007a7c <USBD_GetConfig+0x30>
 8007a76:	2b03      	cmp	r3, #3
 8007a78:	d00b      	beq.n	8007a92 <USBD_GetConfig+0x46>
 8007a7a:	e012      	b.n	8007aa2 <USBD_GetConfig+0x56>
        pdev->dev_default_config = 0U;
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	2200      	movs	r2, #0
 8007a80:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	3308      	adds	r3, #8
 8007a86:	2201      	movs	r2, #1
 8007a88:	4619      	mov	r1, r3
 8007a8a:	6878      	ldr	r0, [r7, #4]
 8007a8c:	f000 f922 	bl	8007cd4 <USBD_CtlSendData>
        break;
 8007a90:	e00c      	b.n	8007aac <USBD_GetConfig+0x60>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	3304      	adds	r3, #4
 8007a96:	2201      	movs	r2, #1
 8007a98:	4619      	mov	r1, r3
 8007a9a:	6878      	ldr	r0, [r7, #4]
 8007a9c:	f000 f91a 	bl	8007cd4 <USBD_CtlSendData>
        break;
 8007aa0:	e004      	b.n	8007aac <USBD_GetConfig+0x60>
        USBD_CtlError(pdev, req);
 8007aa2:	6839      	ldr	r1, [r7, #0]
 8007aa4:	6878      	ldr	r0, [r7, #4]
 8007aa6:	f000 f8aa 	bl	8007bfe <USBD_CtlError>
        break;
 8007aaa:	bf00      	nop
}
 8007aac:	bf00      	nop
 8007aae:	3708      	adds	r7, #8
 8007ab0:	46bd      	mov	sp, r7
 8007ab2:	bd80      	pop	{r7, pc}

08007ab4 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007ab4:	b580      	push	{r7, lr}
 8007ab6:	b082      	sub	sp, #8
 8007ab8:	af00      	add	r7, sp, #0
 8007aba:	6078      	str	r0, [r7, #4]
 8007abc:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007ac4:	3b01      	subs	r3, #1
 8007ac6:	2b02      	cmp	r3, #2
 8007ac8:	d81e      	bhi.n	8007b08 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8007aca:	683b      	ldr	r3, [r7, #0]
 8007acc:	88db      	ldrh	r3, [r3, #6]
 8007ace:	2b02      	cmp	r3, #2
 8007ad0:	d004      	beq.n	8007adc <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 8007ad2:	6839      	ldr	r1, [r7, #0]
 8007ad4:	6878      	ldr	r0, [r7, #4]
 8007ad6:	f000 f892 	bl	8007bfe <USBD_CtlError>
        break;
 8007ada:	e01a      	b.n	8007b12 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	2201      	movs	r2, #1
 8007ae0:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8007ae8:	2b00      	cmp	r3, #0
 8007aea:	d005      	beq.n	8007af8 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	68db      	ldr	r3, [r3, #12]
 8007af0:	f043 0202 	orr.w	r2, r3, #2
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	330c      	adds	r3, #12
 8007afc:	2202      	movs	r2, #2
 8007afe:	4619      	mov	r1, r3
 8007b00:	6878      	ldr	r0, [r7, #4]
 8007b02:	f000 f8e7 	bl	8007cd4 <USBD_CtlSendData>
      break;
 8007b06:	e004      	b.n	8007b12 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 8007b08:	6839      	ldr	r1, [r7, #0]
 8007b0a:	6878      	ldr	r0, [r7, #4]
 8007b0c:	f000 f877 	bl	8007bfe <USBD_CtlError>
      break;
 8007b10:	bf00      	nop
  }
}
 8007b12:	bf00      	nop
 8007b14:	3708      	adds	r7, #8
 8007b16:	46bd      	mov	sp, r7
 8007b18:	bd80      	pop	{r7, pc}

08007b1a <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8007b1a:	b580      	push	{r7, lr}
 8007b1c:	b082      	sub	sp, #8
 8007b1e:	af00      	add	r7, sp, #0
 8007b20:	6078      	str	r0, [r7, #4]
 8007b22:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007b24:	683b      	ldr	r3, [r7, #0]
 8007b26:	885b      	ldrh	r3, [r3, #2]
 8007b28:	2b01      	cmp	r3, #1
 8007b2a:	d106      	bne.n	8007b3a <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	2201      	movs	r2, #1
 8007b30:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 8007b34:	6878      	ldr	r0, [r7, #4]
 8007b36:	f000 f92b 	bl	8007d90 <USBD_CtlSendStatus>
  }
}
 8007b3a:	bf00      	nop
 8007b3c:	3708      	adds	r7, #8
 8007b3e:	46bd      	mov	sp, r7
 8007b40:	bd80      	pop	{r7, pc}

08007b42 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8007b42:	b580      	push	{r7, lr}
 8007b44:	b082      	sub	sp, #8
 8007b46:	af00      	add	r7, sp, #0
 8007b48:	6078      	str	r0, [r7, #4]
 8007b4a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007b52:	3b01      	subs	r3, #1
 8007b54:	2b02      	cmp	r3, #2
 8007b56:	d80b      	bhi.n	8007b70 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007b58:	683b      	ldr	r3, [r7, #0]
 8007b5a:	885b      	ldrh	r3, [r3, #2]
 8007b5c:	2b01      	cmp	r3, #1
 8007b5e:	d10c      	bne.n	8007b7a <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	2200      	movs	r2, #0
 8007b64:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 8007b68:	6878      	ldr	r0, [r7, #4]
 8007b6a:	f000 f911 	bl	8007d90 <USBD_CtlSendStatus>
      }
      break;
 8007b6e:	e004      	b.n	8007b7a <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8007b70:	6839      	ldr	r1, [r7, #0]
 8007b72:	6878      	ldr	r0, [r7, #4]
 8007b74:	f000 f843 	bl	8007bfe <USBD_CtlError>
      break;
 8007b78:	e000      	b.n	8007b7c <USBD_ClrFeature+0x3a>
      break;
 8007b7a:	bf00      	nop
  }
}
 8007b7c:	bf00      	nop
 8007b7e:	3708      	adds	r7, #8
 8007b80:	46bd      	mov	sp, r7
 8007b82:	bd80      	pop	{r7, pc}

08007b84 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8007b84:	b480      	push	{r7}
 8007b86:	b083      	sub	sp, #12
 8007b88:	af00      	add	r7, sp, #0
 8007b8a:	6078      	str	r0, [r7, #4]
 8007b8c:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8007b8e:	683b      	ldr	r3, [r7, #0]
 8007b90:	781a      	ldrb	r2, [r3, #0]
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8007b96:	683b      	ldr	r3, [r7, #0]
 8007b98:	785a      	ldrb	r2, [r3, #1]
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8007b9e:	683b      	ldr	r3, [r7, #0]
 8007ba0:	3302      	adds	r3, #2
 8007ba2:	781b      	ldrb	r3, [r3, #0]
 8007ba4:	b29a      	uxth	r2, r3
 8007ba6:	683b      	ldr	r3, [r7, #0]
 8007ba8:	3303      	adds	r3, #3
 8007baa:	781b      	ldrb	r3, [r3, #0]
 8007bac:	b29b      	uxth	r3, r3
 8007bae:	021b      	lsls	r3, r3, #8
 8007bb0:	b29b      	uxth	r3, r3
 8007bb2:	4413      	add	r3, r2
 8007bb4:	b29a      	uxth	r2, r3
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8007bba:	683b      	ldr	r3, [r7, #0]
 8007bbc:	3304      	adds	r3, #4
 8007bbe:	781b      	ldrb	r3, [r3, #0]
 8007bc0:	b29a      	uxth	r2, r3
 8007bc2:	683b      	ldr	r3, [r7, #0]
 8007bc4:	3305      	adds	r3, #5
 8007bc6:	781b      	ldrb	r3, [r3, #0]
 8007bc8:	b29b      	uxth	r3, r3
 8007bca:	021b      	lsls	r3, r3, #8
 8007bcc:	b29b      	uxth	r3, r3
 8007bce:	4413      	add	r3, r2
 8007bd0:	b29a      	uxth	r2, r3
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8007bd6:	683b      	ldr	r3, [r7, #0]
 8007bd8:	3306      	adds	r3, #6
 8007bda:	781b      	ldrb	r3, [r3, #0]
 8007bdc:	b29a      	uxth	r2, r3
 8007bde:	683b      	ldr	r3, [r7, #0]
 8007be0:	3307      	adds	r3, #7
 8007be2:	781b      	ldrb	r3, [r3, #0]
 8007be4:	b29b      	uxth	r3, r3
 8007be6:	021b      	lsls	r3, r3, #8
 8007be8:	b29b      	uxth	r3, r3
 8007bea:	4413      	add	r3, r2
 8007bec:	b29a      	uxth	r2, r3
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	80da      	strh	r2, [r3, #6]

}
 8007bf2:	bf00      	nop
 8007bf4:	370c      	adds	r7, #12
 8007bf6:	46bd      	mov	sp, r7
 8007bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bfc:	4770      	bx	lr

08007bfe <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8007bfe:	b580      	push	{r7, lr}
 8007c00:	b082      	sub	sp, #8
 8007c02:	af00      	add	r7, sp, #0
 8007c04:	6078      	str	r0, [r7, #4]
 8007c06:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8007c08:	2180      	movs	r1, #128	; 0x80
 8007c0a:	6878      	ldr	r0, [r7, #4]
 8007c0c:	f000 fc7a 	bl	8008504 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8007c10:	2100      	movs	r1, #0
 8007c12:	6878      	ldr	r0, [r7, #4]
 8007c14:	f000 fc76 	bl	8008504 <USBD_LL_StallEP>
}
 8007c18:	bf00      	nop
 8007c1a:	3708      	adds	r7, #8
 8007c1c:	46bd      	mov	sp, r7
 8007c1e:	bd80      	pop	{r7, pc}

08007c20 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8007c20:	b580      	push	{r7, lr}
 8007c22:	b086      	sub	sp, #24
 8007c24:	af00      	add	r7, sp, #0
 8007c26:	60f8      	str	r0, [r7, #12]
 8007c28:	60b9      	str	r1, [r7, #8]
 8007c2a:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8007c2c:	2300      	movs	r3, #0
 8007c2e:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8007c30:	68fb      	ldr	r3, [r7, #12]
 8007c32:	2b00      	cmp	r3, #0
 8007c34:	d032      	beq.n	8007c9c <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8007c36:	68f8      	ldr	r0, [r7, #12]
 8007c38:	f000 f834 	bl	8007ca4 <USBD_GetLen>
 8007c3c:	4603      	mov	r3, r0
 8007c3e:	3301      	adds	r3, #1
 8007c40:	b29b      	uxth	r3, r3
 8007c42:	005b      	lsls	r3, r3, #1
 8007c44:	b29a      	uxth	r2, r3
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8007c4a:	7dfb      	ldrb	r3, [r7, #23]
 8007c4c:	1c5a      	adds	r2, r3, #1
 8007c4e:	75fa      	strb	r2, [r7, #23]
 8007c50:	461a      	mov	r2, r3
 8007c52:	68bb      	ldr	r3, [r7, #8]
 8007c54:	4413      	add	r3, r2
 8007c56:	687a      	ldr	r2, [r7, #4]
 8007c58:	7812      	ldrb	r2, [r2, #0]
 8007c5a:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8007c5c:	7dfb      	ldrb	r3, [r7, #23]
 8007c5e:	1c5a      	adds	r2, r3, #1
 8007c60:	75fa      	strb	r2, [r7, #23]
 8007c62:	461a      	mov	r2, r3
 8007c64:	68bb      	ldr	r3, [r7, #8]
 8007c66:	4413      	add	r3, r2
 8007c68:	2203      	movs	r2, #3
 8007c6a:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8007c6c:	e012      	b.n	8007c94 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8007c6e:	68fb      	ldr	r3, [r7, #12]
 8007c70:	1c5a      	adds	r2, r3, #1
 8007c72:	60fa      	str	r2, [r7, #12]
 8007c74:	7dfa      	ldrb	r2, [r7, #23]
 8007c76:	1c51      	adds	r1, r2, #1
 8007c78:	75f9      	strb	r1, [r7, #23]
 8007c7a:	4611      	mov	r1, r2
 8007c7c:	68ba      	ldr	r2, [r7, #8]
 8007c7e:	440a      	add	r2, r1
 8007c80:	781b      	ldrb	r3, [r3, #0]
 8007c82:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8007c84:	7dfb      	ldrb	r3, [r7, #23]
 8007c86:	1c5a      	adds	r2, r3, #1
 8007c88:	75fa      	strb	r2, [r7, #23]
 8007c8a:	461a      	mov	r2, r3
 8007c8c:	68bb      	ldr	r3, [r7, #8]
 8007c8e:	4413      	add	r3, r2
 8007c90:	2200      	movs	r2, #0
 8007c92:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8007c94:	68fb      	ldr	r3, [r7, #12]
 8007c96:	781b      	ldrb	r3, [r3, #0]
 8007c98:	2b00      	cmp	r3, #0
 8007c9a:	d1e8      	bne.n	8007c6e <USBD_GetString+0x4e>
    }
  }
}
 8007c9c:	bf00      	nop
 8007c9e:	3718      	adds	r7, #24
 8007ca0:	46bd      	mov	sp, r7
 8007ca2:	bd80      	pop	{r7, pc}

08007ca4 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8007ca4:	b480      	push	{r7}
 8007ca6:	b085      	sub	sp, #20
 8007ca8:	af00      	add	r7, sp, #0
 8007caa:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8007cac:	2300      	movs	r3, #0
 8007cae:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 8007cb0:	e005      	b.n	8007cbe <USBD_GetLen+0x1a>
  {
    len++;
 8007cb2:	7bfb      	ldrb	r3, [r7, #15]
 8007cb4:	3301      	adds	r3, #1
 8007cb6:	73fb      	strb	r3, [r7, #15]
    buf++;
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	3301      	adds	r3, #1
 8007cbc:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	781b      	ldrb	r3, [r3, #0]
 8007cc2:	2b00      	cmp	r3, #0
 8007cc4:	d1f5      	bne.n	8007cb2 <USBD_GetLen+0xe>
  }

  return len;
 8007cc6:	7bfb      	ldrb	r3, [r7, #15]
}
 8007cc8:	4618      	mov	r0, r3
 8007cca:	3714      	adds	r7, #20
 8007ccc:	46bd      	mov	sp, r7
 8007cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cd2:	4770      	bx	lr

08007cd4 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8007cd4:	b580      	push	{r7, lr}
 8007cd6:	b084      	sub	sp, #16
 8007cd8:	af00      	add	r7, sp, #0
 8007cda:	60f8      	str	r0, [r7, #12]
 8007cdc:	60b9      	str	r1, [r7, #8]
 8007cde:	4613      	mov	r3, r2
 8007ce0:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8007ce2:	68fb      	ldr	r3, [r7, #12]
 8007ce4:	2202      	movs	r2, #2
 8007ce6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8007cea:	88fa      	ldrh	r2, [r7, #6]
 8007cec:	68fb      	ldr	r3, [r7, #12]
 8007cee:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8007cf0:	88fa      	ldrh	r2, [r7, #6]
 8007cf2:	68fb      	ldr	r3, [r7, #12]
 8007cf4:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007cf6:	88fb      	ldrh	r3, [r7, #6]
 8007cf8:	68ba      	ldr	r2, [r7, #8]
 8007cfa:	2100      	movs	r1, #0
 8007cfc:	68f8      	ldr	r0, [r7, #12]
 8007cfe:	f000 fc8b 	bl	8008618 <USBD_LL_Transmit>

  return USBD_OK;
 8007d02:	2300      	movs	r3, #0
}
 8007d04:	4618      	mov	r0, r3
 8007d06:	3710      	adds	r7, #16
 8007d08:	46bd      	mov	sp, r7
 8007d0a:	bd80      	pop	{r7, pc}

08007d0c <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8007d0c:	b580      	push	{r7, lr}
 8007d0e:	b084      	sub	sp, #16
 8007d10:	af00      	add	r7, sp, #0
 8007d12:	60f8      	str	r0, [r7, #12]
 8007d14:	60b9      	str	r1, [r7, #8]
 8007d16:	4613      	mov	r3, r2
 8007d18:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007d1a:	88fb      	ldrh	r3, [r7, #6]
 8007d1c:	68ba      	ldr	r2, [r7, #8]
 8007d1e:	2100      	movs	r1, #0
 8007d20:	68f8      	ldr	r0, [r7, #12]
 8007d22:	f000 fc79 	bl	8008618 <USBD_LL_Transmit>

  return USBD_OK;
 8007d26:	2300      	movs	r3, #0
}
 8007d28:	4618      	mov	r0, r3
 8007d2a:	3710      	adds	r7, #16
 8007d2c:	46bd      	mov	sp, r7
 8007d2e:	bd80      	pop	{r7, pc}

08007d30 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 8007d30:	b580      	push	{r7, lr}
 8007d32:	b084      	sub	sp, #16
 8007d34:	af00      	add	r7, sp, #0
 8007d36:	60f8      	str	r0, [r7, #12]
 8007d38:	60b9      	str	r1, [r7, #8]
 8007d3a:	4613      	mov	r3, r2
 8007d3c:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8007d3e:	68fb      	ldr	r3, [r7, #12]
 8007d40:	2203      	movs	r2, #3
 8007d42:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8007d46:	88fa      	ldrh	r2, [r7, #6]
 8007d48:	68fb      	ldr	r3, [r7, #12]
 8007d4a:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 8007d4e:	88fa      	ldrh	r2, [r7, #6]
 8007d50:	68fb      	ldr	r3, [r7, #12]
 8007d52:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007d56:	88fb      	ldrh	r3, [r7, #6]
 8007d58:	68ba      	ldr	r2, [r7, #8]
 8007d5a:	2100      	movs	r1, #0
 8007d5c:	68f8      	ldr	r0, [r7, #12]
 8007d5e:	f000 fc7e 	bl	800865e <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007d62:	2300      	movs	r3, #0
}
 8007d64:	4618      	mov	r0, r3
 8007d66:	3710      	adds	r7, #16
 8007d68:	46bd      	mov	sp, r7
 8007d6a:	bd80      	pop	{r7, pc}

08007d6c <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8007d6c:	b580      	push	{r7, lr}
 8007d6e:	b084      	sub	sp, #16
 8007d70:	af00      	add	r7, sp, #0
 8007d72:	60f8      	str	r0, [r7, #12]
 8007d74:	60b9      	str	r1, [r7, #8]
 8007d76:	4613      	mov	r3, r2
 8007d78:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007d7a:	88fb      	ldrh	r3, [r7, #6]
 8007d7c:	68ba      	ldr	r2, [r7, #8]
 8007d7e:	2100      	movs	r1, #0
 8007d80:	68f8      	ldr	r0, [r7, #12]
 8007d82:	f000 fc6c 	bl	800865e <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007d86:	2300      	movs	r3, #0
}
 8007d88:	4618      	mov	r0, r3
 8007d8a:	3710      	adds	r7, #16
 8007d8c:	46bd      	mov	sp, r7
 8007d8e:	bd80      	pop	{r7, pc}

08007d90 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8007d90:	b580      	push	{r7, lr}
 8007d92:	b082      	sub	sp, #8
 8007d94:	af00      	add	r7, sp, #0
 8007d96:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	2204      	movs	r2, #4
 8007d9c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8007da0:	2300      	movs	r3, #0
 8007da2:	2200      	movs	r2, #0
 8007da4:	2100      	movs	r1, #0
 8007da6:	6878      	ldr	r0, [r7, #4]
 8007da8:	f000 fc36 	bl	8008618 <USBD_LL_Transmit>

  return USBD_OK;
 8007dac:	2300      	movs	r3, #0
}
 8007dae:	4618      	mov	r0, r3
 8007db0:	3708      	adds	r7, #8
 8007db2:	46bd      	mov	sp, r7
 8007db4:	bd80      	pop	{r7, pc}

08007db6 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8007db6:	b580      	push	{r7, lr}
 8007db8:	b082      	sub	sp, #8
 8007dba:	af00      	add	r7, sp, #0
 8007dbc:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	2205      	movs	r2, #5
 8007dc2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007dc6:	2300      	movs	r3, #0
 8007dc8:	2200      	movs	r2, #0
 8007dca:	2100      	movs	r1, #0
 8007dcc:	6878      	ldr	r0, [r7, #4]
 8007dce:	f000 fc46 	bl	800865e <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007dd2:	2300      	movs	r3, #0
}
 8007dd4:	4618      	mov	r0, r3
 8007dd6:	3708      	adds	r7, #8
 8007dd8:	46bd      	mov	sp, r7
 8007dda:	bd80      	pop	{r7, pc}

08007ddc <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8007ddc:	b580      	push	{r7, lr}
 8007dde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8007de0:	2200      	movs	r2, #0
 8007de2:	4912      	ldr	r1, [pc, #72]	; (8007e2c <MX_USB_DEVICE_Init+0x50>)
 8007de4:	4812      	ldr	r0, [pc, #72]	; (8007e30 <MX_USB_DEVICE_Init+0x54>)
 8007de6:	f7fe ff65 	bl	8006cb4 <USBD_Init>
 8007dea:	4603      	mov	r3, r0
 8007dec:	2b00      	cmp	r3, #0
 8007dee:	d001      	beq.n	8007df4 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8007df0:	f7f8 fbe6 	bl	80005c0 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8007df4:	490f      	ldr	r1, [pc, #60]	; (8007e34 <MX_USB_DEVICE_Init+0x58>)
 8007df6:	480e      	ldr	r0, [pc, #56]	; (8007e30 <MX_USB_DEVICE_Init+0x54>)
 8007df8:	f7fe ff87 	bl	8006d0a <USBD_RegisterClass>
 8007dfc:	4603      	mov	r3, r0
 8007dfe:	2b00      	cmp	r3, #0
 8007e00:	d001      	beq.n	8007e06 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8007e02:	f7f8 fbdd 	bl	80005c0 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8007e06:	490c      	ldr	r1, [pc, #48]	; (8007e38 <MX_USB_DEVICE_Init+0x5c>)
 8007e08:	4809      	ldr	r0, [pc, #36]	; (8007e30 <MX_USB_DEVICE_Init+0x54>)
 8007e0a:	f7fe feb5 	bl	8006b78 <USBD_CDC_RegisterInterface>
 8007e0e:	4603      	mov	r3, r0
 8007e10:	2b00      	cmp	r3, #0
 8007e12:	d001      	beq.n	8007e18 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8007e14:	f7f8 fbd4 	bl	80005c0 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8007e18:	4805      	ldr	r0, [pc, #20]	; (8007e30 <MX_USB_DEVICE_Init+0x54>)
 8007e1a:	f7fe ff90 	bl	8006d3e <USBD_Start>
 8007e1e:	4603      	mov	r3, r0
 8007e20:	2b00      	cmp	r3, #0
 8007e22:	d001      	beq.n	8007e28 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8007e24:	f7f8 fbcc 	bl	80005c0 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8007e28:	bf00      	nop
 8007e2a:	bd80      	pop	{r7, pc}
 8007e2c:	2000012c 	.word	0x2000012c
 8007e30:	20000470 	.word	0x20000470
 8007e34:	20000018 	.word	0x20000018
 8007e38:	2000011c 	.word	0x2000011c

08007e3c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8007e3c:	b580      	push	{r7, lr}
 8007e3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8007e40:	2200      	movs	r2, #0
 8007e42:	4905      	ldr	r1, [pc, #20]	; (8007e58 <CDC_Init_FS+0x1c>)
 8007e44:	4805      	ldr	r0, [pc, #20]	; (8007e5c <CDC_Init_FS+0x20>)
 8007e46:	f7fe feae 	bl	8006ba6 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8007e4a:	4905      	ldr	r1, [pc, #20]	; (8007e60 <CDC_Init_FS+0x24>)
 8007e4c:	4803      	ldr	r0, [pc, #12]	; (8007e5c <CDC_Init_FS+0x20>)
 8007e4e:	f7fe fec4 	bl	8006bda <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8007e52:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8007e54:	4618      	mov	r0, r3
 8007e56:	bd80      	pop	{r7, pc}
 8007e58:	20000b1c 	.word	0x20000b1c
 8007e5c:	20000470 	.word	0x20000470
 8007e60:	20000734 	.word	0x20000734

08007e64 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8007e64:	b480      	push	{r7}
 8007e66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8007e68:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8007e6a:	4618      	mov	r0, r3
 8007e6c:	46bd      	mov	sp, r7
 8007e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e72:	4770      	bx	lr

08007e74 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8007e74:	b480      	push	{r7}
 8007e76:	b083      	sub	sp, #12
 8007e78:	af00      	add	r7, sp, #0
 8007e7a:	4603      	mov	r3, r0
 8007e7c:	6039      	str	r1, [r7, #0]
 8007e7e:	71fb      	strb	r3, [r7, #7]
 8007e80:	4613      	mov	r3, r2
 8007e82:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8007e84:	79fb      	ldrb	r3, [r7, #7]
 8007e86:	2b23      	cmp	r3, #35	; 0x23
 8007e88:	d84a      	bhi.n	8007f20 <CDC_Control_FS+0xac>
 8007e8a:	a201      	add	r2, pc, #4	; (adr r2, 8007e90 <CDC_Control_FS+0x1c>)
 8007e8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e90:	08007f21 	.word	0x08007f21
 8007e94:	08007f21 	.word	0x08007f21
 8007e98:	08007f21 	.word	0x08007f21
 8007e9c:	08007f21 	.word	0x08007f21
 8007ea0:	08007f21 	.word	0x08007f21
 8007ea4:	08007f21 	.word	0x08007f21
 8007ea8:	08007f21 	.word	0x08007f21
 8007eac:	08007f21 	.word	0x08007f21
 8007eb0:	08007f21 	.word	0x08007f21
 8007eb4:	08007f21 	.word	0x08007f21
 8007eb8:	08007f21 	.word	0x08007f21
 8007ebc:	08007f21 	.word	0x08007f21
 8007ec0:	08007f21 	.word	0x08007f21
 8007ec4:	08007f21 	.word	0x08007f21
 8007ec8:	08007f21 	.word	0x08007f21
 8007ecc:	08007f21 	.word	0x08007f21
 8007ed0:	08007f21 	.word	0x08007f21
 8007ed4:	08007f21 	.word	0x08007f21
 8007ed8:	08007f21 	.word	0x08007f21
 8007edc:	08007f21 	.word	0x08007f21
 8007ee0:	08007f21 	.word	0x08007f21
 8007ee4:	08007f21 	.word	0x08007f21
 8007ee8:	08007f21 	.word	0x08007f21
 8007eec:	08007f21 	.word	0x08007f21
 8007ef0:	08007f21 	.word	0x08007f21
 8007ef4:	08007f21 	.word	0x08007f21
 8007ef8:	08007f21 	.word	0x08007f21
 8007efc:	08007f21 	.word	0x08007f21
 8007f00:	08007f21 	.word	0x08007f21
 8007f04:	08007f21 	.word	0x08007f21
 8007f08:	08007f21 	.word	0x08007f21
 8007f0c:	08007f21 	.word	0x08007f21
 8007f10:	08007f21 	.word	0x08007f21
 8007f14:	08007f21 	.word	0x08007f21
 8007f18:	08007f21 	.word	0x08007f21
 8007f1c:	08007f21 	.word	0x08007f21
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8007f20:	bf00      	nop
  }

  return (USBD_OK);
 8007f22:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8007f24:	4618      	mov	r0, r3
 8007f26:	370c      	adds	r7, #12
 8007f28:	46bd      	mov	sp, r7
 8007f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f2e:	4770      	bx	lr

08007f30 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8007f30:	b580      	push	{r7, lr}
 8007f32:	b082      	sub	sp, #8
 8007f34:	af00      	add	r7, sp, #0
 8007f36:	6078      	str	r0, [r7, #4]
 8007f38:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8007f3a:	6879      	ldr	r1, [r7, #4]
 8007f3c:	4805      	ldr	r0, [pc, #20]	; (8007f54 <CDC_Receive_FS+0x24>)
 8007f3e:	f7fe fe4c 	bl	8006bda <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8007f42:	4804      	ldr	r0, [pc, #16]	; (8007f54 <CDC_Receive_FS+0x24>)
 8007f44:	f7fe fe8c 	bl	8006c60 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8007f48:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8007f4a:	4618      	mov	r0, r3
 8007f4c:	3708      	adds	r7, #8
 8007f4e:	46bd      	mov	sp, r7
 8007f50:	bd80      	pop	{r7, pc}
 8007f52:	bf00      	nop
 8007f54:	20000470 	.word	0x20000470

08007f58 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8007f58:	b580      	push	{r7, lr}
 8007f5a:	b084      	sub	sp, #16
 8007f5c:	af00      	add	r7, sp, #0
 8007f5e:	6078      	str	r0, [r7, #4]
 8007f60:	460b      	mov	r3, r1
 8007f62:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8007f64:	2300      	movs	r3, #0
 8007f66:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8007f68:	4b0d      	ldr	r3, [pc, #52]	; (8007fa0 <CDC_Transmit_FS+0x48>)
 8007f6a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007f6e:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8007f70:	68bb      	ldr	r3, [r7, #8]
 8007f72:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007f76:	2b00      	cmp	r3, #0
 8007f78:	d001      	beq.n	8007f7e <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8007f7a:	2301      	movs	r3, #1
 8007f7c:	e00b      	b.n	8007f96 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8007f7e:	887b      	ldrh	r3, [r7, #2]
 8007f80:	461a      	mov	r2, r3
 8007f82:	6879      	ldr	r1, [r7, #4]
 8007f84:	4806      	ldr	r0, [pc, #24]	; (8007fa0 <CDC_Transmit_FS+0x48>)
 8007f86:	f7fe fe0e 	bl	8006ba6 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8007f8a:	4805      	ldr	r0, [pc, #20]	; (8007fa0 <CDC_Transmit_FS+0x48>)
 8007f8c:	f7fe fe39 	bl	8006c02 <USBD_CDC_TransmitPacket>
 8007f90:	4603      	mov	r3, r0
 8007f92:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8007f94:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f96:	4618      	mov	r0, r3
 8007f98:	3710      	adds	r7, #16
 8007f9a:	46bd      	mov	sp, r7
 8007f9c:	bd80      	pop	{r7, pc}
 8007f9e:	bf00      	nop
 8007fa0:	20000470 	.word	0x20000470

08007fa4 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007fa4:	b480      	push	{r7}
 8007fa6:	b083      	sub	sp, #12
 8007fa8:	af00      	add	r7, sp, #0
 8007faa:	4603      	mov	r3, r0
 8007fac:	6039      	str	r1, [r7, #0]
 8007fae:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8007fb0:	683b      	ldr	r3, [r7, #0]
 8007fb2:	2212      	movs	r2, #18
 8007fb4:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8007fb6:	4b03      	ldr	r3, [pc, #12]	; (8007fc4 <USBD_FS_DeviceDescriptor+0x20>)
}
 8007fb8:	4618      	mov	r0, r3
 8007fba:	370c      	adds	r7, #12
 8007fbc:	46bd      	mov	sp, r7
 8007fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fc2:	4770      	bx	lr
 8007fc4:	20000148 	.word	0x20000148

08007fc8 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007fc8:	b480      	push	{r7}
 8007fca:	b083      	sub	sp, #12
 8007fcc:	af00      	add	r7, sp, #0
 8007fce:	4603      	mov	r3, r0
 8007fd0:	6039      	str	r1, [r7, #0]
 8007fd2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8007fd4:	683b      	ldr	r3, [r7, #0]
 8007fd6:	2204      	movs	r2, #4
 8007fd8:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8007fda:	4b03      	ldr	r3, [pc, #12]	; (8007fe8 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8007fdc:	4618      	mov	r0, r3
 8007fde:	370c      	adds	r7, #12
 8007fe0:	46bd      	mov	sp, r7
 8007fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fe6:	4770      	bx	lr
 8007fe8:	2000015c 	.word	0x2000015c

08007fec <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007fec:	b580      	push	{r7, lr}
 8007fee:	b082      	sub	sp, #8
 8007ff0:	af00      	add	r7, sp, #0
 8007ff2:	4603      	mov	r3, r0
 8007ff4:	6039      	str	r1, [r7, #0]
 8007ff6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007ff8:	79fb      	ldrb	r3, [r7, #7]
 8007ffa:	2b00      	cmp	r3, #0
 8007ffc:	d105      	bne.n	800800a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007ffe:	683a      	ldr	r2, [r7, #0]
 8008000:	4907      	ldr	r1, [pc, #28]	; (8008020 <USBD_FS_ProductStrDescriptor+0x34>)
 8008002:	4808      	ldr	r0, [pc, #32]	; (8008024 <USBD_FS_ProductStrDescriptor+0x38>)
 8008004:	f7ff fe0c 	bl	8007c20 <USBD_GetString>
 8008008:	e004      	b.n	8008014 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800800a:	683a      	ldr	r2, [r7, #0]
 800800c:	4904      	ldr	r1, [pc, #16]	; (8008020 <USBD_FS_ProductStrDescriptor+0x34>)
 800800e:	4805      	ldr	r0, [pc, #20]	; (8008024 <USBD_FS_ProductStrDescriptor+0x38>)
 8008010:	f7ff fe06 	bl	8007c20 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008014:	4b02      	ldr	r3, [pc, #8]	; (8008020 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8008016:	4618      	mov	r0, r3
 8008018:	3708      	adds	r7, #8
 800801a:	46bd      	mov	sp, r7
 800801c:	bd80      	pop	{r7, pc}
 800801e:	bf00      	nop
 8008020:	20000f04 	.word	0x20000f04
 8008024:	080087dc 	.word	0x080087dc

08008028 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008028:	b580      	push	{r7, lr}
 800802a:	b082      	sub	sp, #8
 800802c:	af00      	add	r7, sp, #0
 800802e:	4603      	mov	r3, r0
 8008030:	6039      	str	r1, [r7, #0]
 8008032:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8008034:	683a      	ldr	r2, [r7, #0]
 8008036:	4904      	ldr	r1, [pc, #16]	; (8008048 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8008038:	4804      	ldr	r0, [pc, #16]	; (800804c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800803a:	f7ff fdf1 	bl	8007c20 <USBD_GetString>
  return USBD_StrDesc;
 800803e:	4b02      	ldr	r3, [pc, #8]	; (8008048 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8008040:	4618      	mov	r0, r3
 8008042:	3708      	adds	r7, #8
 8008044:	46bd      	mov	sp, r7
 8008046:	bd80      	pop	{r7, pc}
 8008048:	20000f04 	.word	0x20000f04
 800804c:	080087f4 	.word	0x080087f4

08008050 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008050:	b580      	push	{r7, lr}
 8008052:	b082      	sub	sp, #8
 8008054:	af00      	add	r7, sp, #0
 8008056:	4603      	mov	r3, r0
 8008058:	6039      	str	r1, [r7, #0]
 800805a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800805c:	683b      	ldr	r3, [r7, #0]
 800805e:	221a      	movs	r2, #26
 8008060:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8008062:	f000 f843 	bl	80080ec <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8008066:	4b02      	ldr	r3, [pc, #8]	; (8008070 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8008068:	4618      	mov	r0, r3
 800806a:	3708      	adds	r7, #8
 800806c:	46bd      	mov	sp, r7
 800806e:	bd80      	pop	{r7, pc}
 8008070:	20000160 	.word	0x20000160

08008074 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008074:	b580      	push	{r7, lr}
 8008076:	b082      	sub	sp, #8
 8008078:	af00      	add	r7, sp, #0
 800807a:	4603      	mov	r3, r0
 800807c:	6039      	str	r1, [r7, #0]
 800807e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8008080:	79fb      	ldrb	r3, [r7, #7]
 8008082:	2b00      	cmp	r3, #0
 8008084:	d105      	bne.n	8008092 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008086:	683a      	ldr	r2, [r7, #0]
 8008088:	4907      	ldr	r1, [pc, #28]	; (80080a8 <USBD_FS_ConfigStrDescriptor+0x34>)
 800808a:	4808      	ldr	r0, [pc, #32]	; (80080ac <USBD_FS_ConfigStrDescriptor+0x38>)
 800808c:	f7ff fdc8 	bl	8007c20 <USBD_GetString>
 8008090:	e004      	b.n	800809c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008092:	683a      	ldr	r2, [r7, #0]
 8008094:	4904      	ldr	r1, [pc, #16]	; (80080a8 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008096:	4805      	ldr	r0, [pc, #20]	; (80080ac <USBD_FS_ConfigStrDescriptor+0x38>)
 8008098:	f7ff fdc2 	bl	8007c20 <USBD_GetString>
  }
  return USBD_StrDesc;
 800809c:	4b02      	ldr	r3, [pc, #8]	; (80080a8 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800809e:	4618      	mov	r0, r3
 80080a0:	3708      	adds	r7, #8
 80080a2:	46bd      	mov	sp, r7
 80080a4:	bd80      	pop	{r7, pc}
 80080a6:	bf00      	nop
 80080a8:	20000f04 	.word	0x20000f04
 80080ac:	08008808 	.word	0x08008808

080080b0 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80080b0:	b580      	push	{r7, lr}
 80080b2:	b082      	sub	sp, #8
 80080b4:	af00      	add	r7, sp, #0
 80080b6:	4603      	mov	r3, r0
 80080b8:	6039      	str	r1, [r7, #0]
 80080ba:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80080bc:	79fb      	ldrb	r3, [r7, #7]
 80080be:	2b00      	cmp	r3, #0
 80080c0:	d105      	bne.n	80080ce <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80080c2:	683a      	ldr	r2, [r7, #0]
 80080c4:	4907      	ldr	r1, [pc, #28]	; (80080e4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80080c6:	4808      	ldr	r0, [pc, #32]	; (80080e8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80080c8:	f7ff fdaa 	bl	8007c20 <USBD_GetString>
 80080cc:	e004      	b.n	80080d8 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80080ce:	683a      	ldr	r2, [r7, #0]
 80080d0:	4904      	ldr	r1, [pc, #16]	; (80080e4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80080d2:	4805      	ldr	r0, [pc, #20]	; (80080e8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80080d4:	f7ff fda4 	bl	8007c20 <USBD_GetString>
  }
  return USBD_StrDesc;
 80080d8:	4b02      	ldr	r3, [pc, #8]	; (80080e4 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80080da:	4618      	mov	r0, r3
 80080dc:	3708      	adds	r7, #8
 80080de:	46bd      	mov	sp, r7
 80080e0:	bd80      	pop	{r7, pc}
 80080e2:	bf00      	nop
 80080e4:	20000f04 	.word	0x20000f04
 80080e8:	08008814 	.word	0x08008814

080080ec <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80080ec:	b580      	push	{r7, lr}
 80080ee:	b084      	sub	sp, #16
 80080f0:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80080f2:	4b0f      	ldr	r3, [pc, #60]	; (8008130 <Get_SerialNum+0x44>)
 80080f4:	681b      	ldr	r3, [r3, #0]
 80080f6:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80080f8:	4b0e      	ldr	r3, [pc, #56]	; (8008134 <Get_SerialNum+0x48>)
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80080fe:	4b0e      	ldr	r3, [pc, #56]	; (8008138 <Get_SerialNum+0x4c>)
 8008100:	681b      	ldr	r3, [r3, #0]
 8008102:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8008104:	68fa      	ldr	r2, [r7, #12]
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	4413      	add	r3, r2
 800810a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800810c:	68fb      	ldr	r3, [r7, #12]
 800810e:	2b00      	cmp	r3, #0
 8008110:	d009      	beq.n	8008126 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8008112:	2208      	movs	r2, #8
 8008114:	4909      	ldr	r1, [pc, #36]	; (800813c <Get_SerialNum+0x50>)
 8008116:	68f8      	ldr	r0, [r7, #12]
 8008118:	f000 f814 	bl	8008144 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800811c:	2204      	movs	r2, #4
 800811e:	4908      	ldr	r1, [pc, #32]	; (8008140 <Get_SerialNum+0x54>)
 8008120:	68b8      	ldr	r0, [r7, #8]
 8008122:	f000 f80f 	bl	8008144 <IntToUnicode>
  }
}
 8008126:	bf00      	nop
 8008128:	3710      	adds	r7, #16
 800812a:	46bd      	mov	sp, r7
 800812c:	bd80      	pop	{r7, pc}
 800812e:	bf00      	nop
 8008130:	1ffff7ac 	.word	0x1ffff7ac
 8008134:	1ffff7b0 	.word	0x1ffff7b0
 8008138:	1ffff7b4 	.word	0x1ffff7b4
 800813c:	20000162 	.word	0x20000162
 8008140:	20000172 	.word	0x20000172

08008144 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8008144:	b480      	push	{r7}
 8008146:	b087      	sub	sp, #28
 8008148:	af00      	add	r7, sp, #0
 800814a:	60f8      	str	r0, [r7, #12]
 800814c:	60b9      	str	r1, [r7, #8]
 800814e:	4613      	mov	r3, r2
 8008150:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8008152:	2300      	movs	r3, #0
 8008154:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8008156:	2300      	movs	r3, #0
 8008158:	75fb      	strb	r3, [r7, #23]
 800815a:	e027      	b.n	80081ac <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800815c:	68fb      	ldr	r3, [r7, #12]
 800815e:	0f1b      	lsrs	r3, r3, #28
 8008160:	2b09      	cmp	r3, #9
 8008162:	d80b      	bhi.n	800817c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8008164:	68fb      	ldr	r3, [r7, #12]
 8008166:	0f1b      	lsrs	r3, r3, #28
 8008168:	b2da      	uxtb	r2, r3
 800816a:	7dfb      	ldrb	r3, [r7, #23]
 800816c:	005b      	lsls	r3, r3, #1
 800816e:	4619      	mov	r1, r3
 8008170:	68bb      	ldr	r3, [r7, #8]
 8008172:	440b      	add	r3, r1
 8008174:	3230      	adds	r2, #48	; 0x30
 8008176:	b2d2      	uxtb	r2, r2
 8008178:	701a      	strb	r2, [r3, #0]
 800817a:	e00a      	b.n	8008192 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800817c:	68fb      	ldr	r3, [r7, #12]
 800817e:	0f1b      	lsrs	r3, r3, #28
 8008180:	b2da      	uxtb	r2, r3
 8008182:	7dfb      	ldrb	r3, [r7, #23]
 8008184:	005b      	lsls	r3, r3, #1
 8008186:	4619      	mov	r1, r3
 8008188:	68bb      	ldr	r3, [r7, #8]
 800818a:	440b      	add	r3, r1
 800818c:	3237      	adds	r2, #55	; 0x37
 800818e:	b2d2      	uxtb	r2, r2
 8008190:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8008192:	68fb      	ldr	r3, [r7, #12]
 8008194:	011b      	lsls	r3, r3, #4
 8008196:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8008198:	7dfb      	ldrb	r3, [r7, #23]
 800819a:	005b      	lsls	r3, r3, #1
 800819c:	3301      	adds	r3, #1
 800819e:	68ba      	ldr	r2, [r7, #8]
 80081a0:	4413      	add	r3, r2
 80081a2:	2200      	movs	r2, #0
 80081a4:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80081a6:	7dfb      	ldrb	r3, [r7, #23]
 80081a8:	3301      	adds	r3, #1
 80081aa:	75fb      	strb	r3, [r7, #23]
 80081ac:	7dfa      	ldrb	r2, [r7, #23]
 80081ae:	79fb      	ldrb	r3, [r7, #7]
 80081b0:	429a      	cmp	r2, r3
 80081b2:	d3d3      	bcc.n	800815c <IntToUnicode+0x18>
  }
}
 80081b4:	bf00      	nop
 80081b6:	371c      	adds	r7, #28
 80081b8:	46bd      	mov	sp, r7
 80081ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081be:	4770      	bx	lr

080081c0 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80081c0:	b580      	push	{r7, lr}
 80081c2:	b08a      	sub	sp, #40	; 0x28
 80081c4:	af00      	add	r7, sp, #0
 80081c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80081c8:	f107 0314 	add.w	r3, r7, #20
 80081cc:	2200      	movs	r2, #0
 80081ce:	601a      	str	r2, [r3, #0]
 80081d0:	605a      	str	r2, [r3, #4]
 80081d2:	609a      	str	r2, [r3, #8]
 80081d4:	60da      	str	r2, [r3, #12]
 80081d6:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB)
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	4a1c      	ldr	r2, [pc, #112]	; (8008250 <HAL_PCD_MspInit+0x90>)
 80081de:	4293      	cmp	r3, r2
 80081e0:	d131      	bne.n	8008246 <HAL_PCD_MspInit+0x86>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80081e2:	4b1c      	ldr	r3, [pc, #112]	; (8008254 <HAL_PCD_MspInit+0x94>)
 80081e4:	695b      	ldr	r3, [r3, #20]
 80081e6:	4a1b      	ldr	r2, [pc, #108]	; (8008254 <HAL_PCD_MspInit+0x94>)
 80081e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80081ec:	6153      	str	r3, [r2, #20]
 80081ee:	4b19      	ldr	r3, [pc, #100]	; (8008254 <HAL_PCD_MspInit+0x94>)
 80081f0:	695b      	ldr	r3, [r3, #20]
 80081f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80081f6:	613b      	str	r3, [r7, #16]
 80081f8:	693b      	ldr	r3, [r7, #16]
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = DM_Pin|DP_Pin;
 80081fa:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80081fe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008200:	2302      	movs	r3, #2
 8008202:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008204:	2300      	movs	r3, #0
 8008206:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8008208:	2303      	movs	r3, #3
 800820a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF14_USB;
 800820c:	230e      	movs	r3, #14
 800820e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008210:	f107 0314 	add.w	r3, r7, #20
 8008214:	4619      	mov	r1, r3
 8008216:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800821a:	f7f8 fc91 	bl	8000b40 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800821e:	4b0d      	ldr	r3, [pc, #52]	; (8008254 <HAL_PCD_MspInit+0x94>)
 8008220:	69db      	ldr	r3, [r3, #28]
 8008222:	4a0c      	ldr	r2, [pc, #48]	; (8008254 <HAL_PCD_MspInit+0x94>)
 8008224:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8008228:	61d3      	str	r3, [r2, #28]
 800822a:	4b0a      	ldr	r3, [pc, #40]	; (8008254 <HAL_PCD_MspInit+0x94>)
 800822c:	69db      	ldr	r3, [r3, #28]
 800822e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008232:	60fb      	str	r3, [r7, #12]
 8008234:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN_RX0_IRQn, 0, 0);
 8008236:	2200      	movs	r2, #0
 8008238:	2100      	movs	r1, #0
 800823a:	2014      	movs	r0, #20
 800823c:	f7f8 fc49 	bl	8000ad2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN_RX0_IRQn);
 8008240:	2014      	movs	r0, #20
 8008242:	f7f8 fc62 	bl	8000b0a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8008246:	bf00      	nop
 8008248:	3728      	adds	r7, #40	; 0x28
 800824a:	46bd      	mov	sp, r7
 800824c:	bd80      	pop	{r7, pc}
 800824e:	bf00      	nop
 8008250:	40005c00 	.word	0x40005c00
 8008254:	40021000 	.word	0x40021000

08008258 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008258:	b580      	push	{r7, lr}
 800825a:	b082      	sub	sp, #8
 800825c:	af00      	add	r7, sp, #0
 800825e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	f8d3 22e8 	ldr.w	r2, [r3, #744]	; 0x2e8
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 800826c:	4619      	mov	r1, r3
 800826e:	4610      	mov	r0, r2
 8008270:	f7fe fdae 	bl	8006dd0 <USBD_LL_SetupStage>
}
 8008274:	bf00      	nop
 8008276:	3708      	adds	r7, #8
 8008278:	46bd      	mov	sp, r7
 800827a:	bd80      	pop	{r7, pc}

0800827c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800827c:	b580      	push	{r7, lr}
 800827e:	b082      	sub	sp, #8
 8008280:	af00      	add	r7, sp, #0
 8008282:	6078      	str	r0, [r7, #4]
 8008284:	460b      	mov	r3, r1
 8008286:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 800828e:	78fa      	ldrb	r2, [r7, #3]
 8008290:	6879      	ldr	r1, [r7, #4]
 8008292:	4613      	mov	r3, r2
 8008294:	009b      	lsls	r3, r3, #2
 8008296:	4413      	add	r3, r2
 8008298:	00db      	lsls	r3, r3, #3
 800829a:	440b      	add	r3, r1
 800829c:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 80082a0:	681a      	ldr	r2, [r3, #0]
 80082a2:	78fb      	ldrb	r3, [r7, #3]
 80082a4:	4619      	mov	r1, r3
 80082a6:	f7fe fdde 	bl	8006e66 <USBD_LL_DataOutStage>
}
 80082aa:	bf00      	nop
 80082ac:	3708      	adds	r7, #8
 80082ae:	46bd      	mov	sp, r7
 80082b0:	bd80      	pop	{r7, pc}

080082b2 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80082b2:	b580      	push	{r7, lr}
 80082b4:	b082      	sub	sp, #8
 80082b6:	af00      	add	r7, sp, #0
 80082b8:	6078      	str	r0, [r7, #4]
 80082ba:	460b      	mov	r3, r1
 80082bc:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 80082c4:	78fa      	ldrb	r2, [r7, #3]
 80082c6:	6879      	ldr	r1, [r7, #4]
 80082c8:	4613      	mov	r3, r2
 80082ca:	009b      	lsls	r3, r3, #2
 80082cc:	4413      	add	r3, r2
 80082ce:	00db      	lsls	r3, r3, #3
 80082d0:	440b      	add	r3, r1
 80082d2:	333c      	adds	r3, #60	; 0x3c
 80082d4:	681a      	ldr	r2, [r3, #0]
 80082d6:	78fb      	ldrb	r3, [r7, #3]
 80082d8:	4619      	mov	r1, r3
 80082da:	f7fe fe35 	bl	8006f48 <USBD_LL_DataInStage>
}
 80082de:	bf00      	nop
 80082e0:	3708      	adds	r7, #8
 80082e2:	46bd      	mov	sp, r7
 80082e4:	bd80      	pop	{r7, pc}

080082e6 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80082e6:	b580      	push	{r7, lr}
 80082e8:	b082      	sub	sp, #8
 80082ea:	af00      	add	r7, sp, #0
 80082ec:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 80082f4:	4618      	mov	r0, r3
 80082f6:	f7fe ff48 	bl	800718a <USBD_LL_SOF>
}
 80082fa:	bf00      	nop
 80082fc:	3708      	adds	r7, #8
 80082fe:	46bd      	mov	sp, r7
 8008300:	bd80      	pop	{r7, pc}

08008302 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008302:	b580      	push	{r7, lr}
 8008304:	b084      	sub	sp, #16
 8008306:	af00      	add	r7, sp, #0
 8008308:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800830a:	2301      	movs	r3, #1
 800830c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	689b      	ldr	r3, [r3, #8]
 8008312:	2b02      	cmp	r3, #2
 8008314:	d001      	beq.n	800831a <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8008316:	f7f8 f953 	bl	80005c0 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8008320:	7bfa      	ldrb	r2, [r7, #15]
 8008322:	4611      	mov	r1, r2
 8008324:	4618      	mov	r0, r3
 8008326:	f7fe fef5 	bl	8007114 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8008330:	4618      	mov	r0, r3
 8008332:	f7fe feae 	bl	8007092 <USBD_LL_Reset>
}
 8008336:	bf00      	nop
 8008338:	3710      	adds	r7, #16
 800833a:	46bd      	mov	sp, r7
 800833c:	bd80      	pop	{r7, pc}
	...

08008340 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008340:	b580      	push	{r7, lr}
 8008342:	b082      	sub	sp, #8
 8008344:	af00      	add	r7, sp, #0
 8008346:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800834e:	4618      	mov	r0, r3
 8008350:	f7fe fef0 	bl	8007134 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	699b      	ldr	r3, [r3, #24]
 8008358:	2b00      	cmp	r3, #0
 800835a:	d005      	beq.n	8008368 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800835c:	4b04      	ldr	r3, [pc, #16]	; (8008370 <HAL_PCD_SuspendCallback+0x30>)
 800835e:	691b      	ldr	r3, [r3, #16]
 8008360:	4a03      	ldr	r2, [pc, #12]	; (8008370 <HAL_PCD_SuspendCallback+0x30>)
 8008362:	f043 0306 	orr.w	r3, r3, #6
 8008366:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8008368:	bf00      	nop
 800836a:	3708      	adds	r7, #8
 800836c:	46bd      	mov	sp, r7
 800836e:	bd80      	pop	{r7, pc}
 8008370:	e000ed00 	.word	0xe000ed00

08008374 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008374:	b580      	push	{r7, lr}
 8008376:	b082      	sub	sp, #8
 8008378:	af00      	add	r7, sp, #0
 800837a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8008382:	4618      	mov	r0, r3
 8008384:	f7fe feeb 	bl	800715e <USBD_LL_Resume>
}
 8008388:	bf00      	nop
 800838a:	3708      	adds	r7, #8
 800838c:	46bd      	mov	sp, r7
 800838e:	bd80      	pop	{r7, pc}

08008390 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8008390:	b580      	push	{r7, lr}
 8008392:	b082      	sub	sp, #8
 8008394:	af00      	add	r7, sp, #0
 8008396:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 8008398:	4a28      	ldr	r2, [pc, #160]	; (800843c <USBD_LL_Init+0xac>)
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	f8c2 32e8 	str.w	r3, [r2, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	4a26      	ldr	r2, [pc, #152]	; (800843c <USBD_LL_Init+0xac>)
 80083a4:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 80083a8:	4b24      	ldr	r3, [pc, #144]	; (800843c <USBD_LL_Init+0xac>)
 80083aa:	4a25      	ldr	r2, [pc, #148]	; (8008440 <USBD_LL_Init+0xb0>)
 80083ac:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 80083ae:	4b23      	ldr	r3, [pc, #140]	; (800843c <USBD_LL_Init+0xac>)
 80083b0:	2208      	movs	r2, #8
 80083b2:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 80083b4:	4b21      	ldr	r3, [pc, #132]	; (800843c <USBD_LL_Init+0xac>)
 80083b6:	2202      	movs	r2, #2
 80083b8:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80083ba:	4b20      	ldr	r3, [pc, #128]	; (800843c <USBD_LL_Init+0xac>)
 80083bc:	2202      	movs	r2, #2
 80083be:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 80083c0:	4b1e      	ldr	r3, [pc, #120]	; (800843c <USBD_LL_Init+0xac>)
 80083c2:	2200      	movs	r2, #0
 80083c4:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 80083c6:	4b1d      	ldr	r3, [pc, #116]	; (800843c <USBD_LL_Init+0xac>)
 80083c8:	2200      	movs	r2, #0
 80083ca:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 80083cc:	481b      	ldr	r0, [pc, #108]	; (800843c <USBD_LL_Init+0xac>)
 80083ce:	f7f9 fad4 	bl	800197a <HAL_PCD_Init>
 80083d2:	4603      	mov	r3, r0
 80083d4:	2b00      	cmp	r3, #0
 80083d6:	d001      	beq.n	80083dc <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 80083d8:	f7f8 f8f2 	bl	80005c0 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80083e2:	2318      	movs	r3, #24
 80083e4:	2200      	movs	r2, #0
 80083e6:	2100      	movs	r1, #0
 80083e8:	f7fa fd70 	bl	8002ecc <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80083f2:	2358      	movs	r3, #88	; 0x58
 80083f4:	2200      	movs	r2, #0
 80083f6:	2180      	movs	r1, #128	; 0x80
 80083f8:	f7fa fd68 	bl	8002ecc <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008402:	23c0      	movs	r3, #192	; 0xc0
 8008404:	2200      	movs	r2, #0
 8008406:	2181      	movs	r1, #129	; 0x81
 8008408:	f7fa fd60 	bl	8002ecc <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008412:	f44f 7388 	mov.w	r3, #272	; 0x110
 8008416:	2200      	movs	r2, #0
 8008418:	2101      	movs	r1, #1
 800841a:	f7fa fd57 	bl	8002ecc <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008424:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008428:	2200      	movs	r2, #0
 800842a:	2182      	movs	r1, #130	; 0x82
 800842c:	f7fa fd4e 	bl	8002ecc <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8008430:	2300      	movs	r3, #0
}
 8008432:	4618      	mov	r0, r3
 8008434:	3708      	adds	r7, #8
 8008436:	46bd      	mov	sp, r7
 8008438:	bd80      	pop	{r7, pc}
 800843a:	bf00      	nop
 800843c:	20001104 	.word	0x20001104
 8008440:	40005c00 	.word	0x40005c00

08008444 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8008444:	b580      	push	{r7, lr}
 8008446:	b084      	sub	sp, #16
 8008448:	af00      	add	r7, sp, #0
 800844a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800844c:	2300      	movs	r3, #0
 800844e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008450:	2300      	movs	r3, #0
 8008452:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800845a:	4618      	mov	r0, r3
 800845c:	f7f9 fb6b 	bl	8001b36 <HAL_PCD_Start>
 8008460:	4603      	mov	r3, r0
 8008462:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008464:	7bfb      	ldrb	r3, [r7, #15]
 8008466:	4618      	mov	r0, r3
 8008468:	f000 f954 	bl	8008714 <USBD_Get_USB_Status>
 800846c:	4603      	mov	r3, r0
 800846e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008470:	7bbb      	ldrb	r3, [r7, #14]
}
 8008472:	4618      	mov	r0, r3
 8008474:	3710      	adds	r7, #16
 8008476:	46bd      	mov	sp, r7
 8008478:	bd80      	pop	{r7, pc}

0800847a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800847a:	b580      	push	{r7, lr}
 800847c:	b084      	sub	sp, #16
 800847e:	af00      	add	r7, sp, #0
 8008480:	6078      	str	r0, [r7, #4]
 8008482:	4608      	mov	r0, r1
 8008484:	4611      	mov	r1, r2
 8008486:	461a      	mov	r2, r3
 8008488:	4603      	mov	r3, r0
 800848a:	70fb      	strb	r3, [r7, #3]
 800848c:	460b      	mov	r3, r1
 800848e:	70bb      	strb	r3, [r7, #2]
 8008490:	4613      	mov	r3, r2
 8008492:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008494:	2300      	movs	r3, #0
 8008496:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008498:	2300      	movs	r3, #0
 800849a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80084a2:	78bb      	ldrb	r3, [r7, #2]
 80084a4:	883a      	ldrh	r2, [r7, #0]
 80084a6:	78f9      	ldrb	r1, [r7, #3]
 80084a8:	f7f9 fc87 	bl	8001dba <HAL_PCD_EP_Open>
 80084ac:	4603      	mov	r3, r0
 80084ae:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80084b0:	7bfb      	ldrb	r3, [r7, #15]
 80084b2:	4618      	mov	r0, r3
 80084b4:	f000 f92e 	bl	8008714 <USBD_Get_USB_Status>
 80084b8:	4603      	mov	r3, r0
 80084ba:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80084bc:	7bbb      	ldrb	r3, [r7, #14]
}
 80084be:	4618      	mov	r0, r3
 80084c0:	3710      	adds	r7, #16
 80084c2:	46bd      	mov	sp, r7
 80084c4:	bd80      	pop	{r7, pc}

080084c6 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80084c6:	b580      	push	{r7, lr}
 80084c8:	b084      	sub	sp, #16
 80084ca:	af00      	add	r7, sp, #0
 80084cc:	6078      	str	r0, [r7, #4]
 80084ce:	460b      	mov	r3, r1
 80084d0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80084d2:	2300      	movs	r3, #0
 80084d4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80084d6:	2300      	movs	r3, #0
 80084d8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80084e0:	78fa      	ldrb	r2, [r7, #3]
 80084e2:	4611      	mov	r1, r2
 80084e4:	4618      	mov	r0, r3
 80084e6:	f7f9 fcce 	bl	8001e86 <HAL_PCD_EP_Close>
 80084ea:	4603      	mov	r3, r0
 80084ec:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80084ee:	7bfb      	ldrb	r3, [r7, #15]
 80084f0:	4618      	mov	r0, r3
 80084f2:	f000 f90f 	bl	8008714 <USBD_Get_USB_Status>
 80084f6:	4603      	mov	r3, r0
 80084f8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80084fa:	7bbb      	ldrb	r3, [r7, #14]
}
 80084fc:	4618      	mov	r0, r3
 80084fe:	3710      	adds	r7, #16
 8008500:	46bd      	mov	sp, r7
 8008502:	bd80      	pop	{r7, pc}

08008504 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008504:	b580      	push	{r7, lr}
 8008506:	b084      	sub	sp, #16
 8008508:	af00      	add	r7, sp, #0
 800850a:	6078      	str	r0, [r7, #4]
 800850c:	460b      	mov	r3, r1
 800850e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008510:	2300      	movs	r3, #0
 8008512:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008514:	2300      	movs	r3, #0
 8008516:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800851e:	78fa      	ldrb	r2, [r7, #3]
 8008520:	4611      	mov	r1, r2
 8008522:	4618      	mov	r0, r3
 8008524:	f7f9 fd8f 	bl	8002046 <HAL_PCD_EP_SetStall>
 8008528:	4603      	mov	r3, r0
 800852a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800852c:	7bfb      	ldrb	r3, [r7, #15]
 800852e:	4618      	mov	r0, r3
 8008530:	f000 f8f0 	bl	8008714 <USBD_Get_USB_Status>
 8008534:	4603      	mov	r3, r0
 8008536:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008538:	7bbb      	ldrb	r3, [r7, #14]
}
 800853a:	4618      	mov	r0, r3
 800853c:	3710      	adds	r7, #16
 800853e:	46bd      	mov	sp, r7
 8008540:	bd80      	pop	{r7, pc}

08008542 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008542:	b580      	push	{r7, lr}
 8008544:	b084      	sub	sp, #16
 8008546:	af00      	add	r7, sp, #0
 8008548:	6078      	str	r0, [r7, #4]
 800854a:	460b      	mov	r3, r1
 800854c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800854e:	2300      	movs	r3, #0
 8008550:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008552:	2300      	movs	r3, #0
 8008554:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800855c:	78fa      	ldrb	r2, [r7, #3]
 800855e:	4611      	mov	r1, r2
 8008560:	4618      	mov	r0, r3
 8008562:	f7f9 fdc2 	bl	80020ea <HAL_PCD_EP_ClrStall>
 8008566:	4603      	mov	r3, r0
 8008568:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800856a:	7bfb      	ldrb	r3, [r7, #15]
 800856c:	4618      	mov	r0, r3
 800856e:	f000 f8d1 	bl	8008714 <USBD_Get_USB_Status>
 8008572:	4603      	mov	r3, r0
 8008574:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008576:	7bbb      	ldrb	r3, [r7, #14]
}
 8008578:	4618      	mov	r0, r3
 800857a:	3710      	adds	r7, #16
 800857c:	46bd      	mov	sp, r7
 800857e:	bd80      	pop	{r7, pc}

08008580 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008580:	b480      	push	{r7}
 8008582:	b085      	sub	sp, #20
 8008584:	af00      	add	r7, sp, #0
 8008586:	6078      	str	r0, [r7, #4]
 8008588:	460b      	mov	r3, r1
 800858a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008592:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8008594:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008598:	2b00      	cmp	r3, #0
 800859a:	da0c      	bge.n	80085b6 <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800859c:	78fb      	ldrb	r3, [r7, #3]
 800859e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80085a2:	68f9      	ldr	r1, [r7, #12]
 80085a4:	1c5a      	adds	r2, r3, #1
 80085a6:	4613      	mov	r3, r2
 80085a8:	009b      	lsls	r3, r3, #2
 80085aa:	4413      	add	r3, r2
 80085ac:	00db      	lsls	r3, r3, #3
 80085ae:	440b      	add	r3, r1
 80085b0:	3302      	adds	r3, #2
 80085b2:	781b      	ldrb	r3, [r3, #0]
 80085b4:	e00b      	b.n	80085ce <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80085b6:	78fb      	ldrb	r3, [r7, #3]
 80085b8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80085bc:	68f9      	ldr	r1, [r7, #12]
 80085be:	4613      	mov	r3, r2
 80085c0:	009b      	lsls	r3, r3, #2
 80085c2:	4413      	add	r3, r2
 80085c4:	00db      	lsls	r3, r3, #3
 80085c6:	440b      	add	r3, r1
 80085c8:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 80085cc:	781b      	ldrb	r3, [r3, #0]
  }
}
 80085ce:	4618      	mov	r0, r3
 80085d0:	3714      	adds	r7, #20
 80085d2:	46bd      	mov	sp, r7
 80085d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085d8:	4770      	bx	lr

080085da <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80085da:	b580      	push	{r7, lr}
 80085dc:	b084      	sub	sp, #16
 80085de:	af00      	add	r7, sp, #0
 80085e0:	6078      	str	r0, [r7, #4]
 80085e2:	460b      	mov	r3, r1
 80085e4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80085e6:	2300      	movs	r3, #0
 80085e8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80085ea:	2300      	movs	r3, #0
 80085ec:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80085f4:	78fa      	ldrb	r2, [r7, #3]
 80085f6:	4611      	mov	r1, r2
 80085f8:	4618      	mov	r0, r3
 80085fa:	f7f9 fbb9 	bl	8001d70 <HAL_PCD_SetAddress>
 80085fe:	4603      	mov	r3, r0
 8008600:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008602:	7bfb      	ldrb	r3, [r7, #15]
 8008604:	4618      	mov	r0, r3
 8008606:	f000 f885 	bl	8008714 <USBD_Get_USB_Status>
 800860a:	4603      	mov	r3, r0
 800860c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800860e:	7bbb      	ldrb	r3, [r7, #14]
}
 8008610:	4618      	mov	r0, r3
 8008612:	3710      	adds	r7, #16
 8008614:	46bd      	mov	sp, r7
 8008616:	bd80      	pop	{r7, pc}

08008618 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8008618:	b580      	push	{r7, lr}
 800861a:	b086      	sub	sp, #24
 800861c:	af00      	add	r7, sp, #0
 800861e:	60f8      	str	r0, [r7, #12]
 8008620:	607a      	str	r2, [r7, #4]
 8008622:	461a      	mov	r2, r3
 8008624:	460b      	mov	r3, r1
 8008626:	72fb      	strb	r3, [r7, #11]
 8008628:	4613      	mov	r3, r2
 800862a:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800862c:	2300      	movs	r3, #0
 800862e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008630:	2300      	movs	r3, #0
 8008632:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8008634:	68fb      	ldr	r3, [r7, #12]
 8008636:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800863a:	893b      	ldrh	r3, [r7, #8]
 800863c:	7af9      	ldrb	r1, [r7, #11]
 800863e:	687a      	ldr	r2, [r7, #4]
 8008640:	f7f9 fcbe 	bl	8001fc0 <HAL_PCD_EP_Transmit>
 8008644:	4603      	mov	r3, r0
 8008646:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008648:	7dfb      	ldrb	r3, [r7, #23]
 800864a:	4618      	mov	r0, r3
 800864c:	f000 f862 	bl	8008714 <USBD_Get_USB_Status>
 8008650:	4603      	mov	r3, r0
 8008652:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008654:	7dbb      	ldrb	r3, [r7, #22]
}
 8008656:	4618      	mov	r0, r3
 8008658:	3718      	adds	r7, #24
 800865a:	46bd      	mov	sp, r7
 800865c:	bd80      	pop	{r7, pc}

0800865e <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800865e:	b580      	push	{r7, lr}
 8008660:	b086      	sub	sp, #24
 8008662:	af00      	add	r7, sp, #0
 8008664:	60f8      	str	r0, [r7, #12]
 8008666:	607a      	str	r2, [r7, #4]
 8008668:	461a      	mov	r2, r3
 800866a:	460b      	mov	r3, r1
 800866c:	72fb      	strb	r3, [r7, #11]
 800866e:	4613      	mov	r3, r2
 8008670:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008672:	2300      	movs	r3, #0
 8008674:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008676:	2300      	movs	r3, #0
 8008678:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800867a:	68fb      	ldr	r3, [r7, #12]
 800867c:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008680:	893b      	ldrh	r3, [r7, #8]
 8008682:	7af9      	ldrb	r1, [r7, #11]
 8008684:	687a      	ldr	r2, [r7, #4]
 8008686:	f7f9 fc46 	bl	8001f16 <HAL_PCD_EP_Receive>
 800868a:	4603      	mov	r3, r0
 800868c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800868e:	7dfb      	ldrb	r3, [r7, #23]
 8008690:	4618      	mov	r0, r3
 8008692:	f000 f83f 	bl	8008714 <USBD_Get_USB_Status>
 8008696:	4603      	mov	r3, r0
 8008698:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800869a:	7dbb      	ldrb	r3, [r7, #22]
}
 800869c:	4618      	mov	r0, r3
 800869e:	3718      	adds	r7, #24
 80086a0:	46bd      	mov	sp, r7
 80086a2:	bd80      	pop	{r7, pc}

080086a4 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80086a4:	b580      	push	{r7, lr}
 80086a6:	b082      	sub	sp, #8
 80086a8:	af00      	add	r7, sp, #0
 80086aa:	6078      	str	r0, [r7, #4]
 80086ac:	460b      	mov	r3, r1
 80086ae:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80086b6:	78fa      	ldrb	r2, [r7, #3]
 80086b8:	4611      	mov	r1, r2
 80086ba:	4618      	mov	r0, r3
 80086bc:	f7f9 fc68 	bl	8001f90 <HAL_PCD_EP_GetRxCount>
 80086c0:	4603      	mov	r3, r0
}
 80086c2:	4618      	mov	r0, r3
 80086c4:	3708      	adds	r7, #8
 80086c6:	46bd      	mov	sp, r7
 80086c8:	bd80      	pop	{r7, pc}
	...

080086cc <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80086cc:	b480      	push	{r7}
 80086ce:	b083      	sub	sp, #12
 80086d0:	af00      	add	r7, sp, #0
 80086d2:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80086d4:	4b03      	ldr	r3, [pc, #12]	; (80086e4 <USBD_static_malloc+0x18>)
}
 80086d6:	4618      	mov	r0, r3
 80086d8:	370c      	adds	r7, #12
 80086da:	46bd      	mov	sp, r7
 80086dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086e0:	4770      	bx	lr
 80086e2:	bf00      	nop
 80086e4:	2000019c 	.word	0x2000019c

080086e8 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80086e8:	b480      	push	{r7}
 80086ea:	b083      	sub	sp, #12
 80086ec:	af00      	add	r7, sp, #0
 80086ee:	6078      	str	r0, [r7, #4]

}
 80086f0:	bf00      	nop
 80086f2:	370c      	adds	r7, #12
 80086f4:	46bd      	mov	sp, r7
 80086f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086fa:	4770      	bx	lr

080086fc <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80086fc:	b480      	push	{r7}
 80086fe:	b083      	sub	sp, #12
 8008700:	af00      	add	r7, sp, #0
 8008702:	6078      	str	r0, [r7, #4]
 8008704:	460b      	mov	r3, r1
 8008706:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 8008708:	bf00      	nop
 800870a:	370c      	adds	r7, #12
 800870c:	46bd      	mov	sp, r7
 800870e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008712:	4770      	bx	lr

08008714 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008714:	b480      	push	{r7}
 8008716:	b085      	sub	sp, #20
 8008718:	af00      	add	r7, sp, #0
 800871a:	4603      	mov	r3, r0
 800871c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800871e:	2300      	movs	r3, #0
 8008720:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8008722:	79fb      	ldrb	r3, [r7, #7]
 8008724:	2b03      	cmp	r3, #3
 8008726:	d817      	bhi.n	8008758 <USBD_Get_USB_Status+0x44>
 8008728:	a201      	add	r2, pc, #4	; (adr r2, 8008730 <USBD_Get_USB_Status+0x1c>)
 800872a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800872e:	bf00      	nop
 8008730:	08008741 	.word	0x08008741
 8008734:	08008747 	.word	0x08008747
 8008738:	0800874d 	.word	0x0800874d
 800873c:	08008753 	.word	0x08008753
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8008740:	2300      	movs	r3, #0
 8008742:	73fb      	strb	r3, [r7, #15]
    break;
 8008744:	e00b      	b.n	800875e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008746:	2302      	movs	r3, #2
 8008748:	73fb      	strb	r3, [r7, #15]
    break;
 800874a:	e008      	b.n	800875e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800874c:	2301      	movs	r3, #1
 800874e:	73fb      	strb	r3, [r7, #15]
    break;
 8008750:	e005      	b.n	800875e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008752:	2302      	movs	r3, #2
 8008754:	73fb      	strb	r3, [r7, #15]
    break;
 8008756:	e002      	b.n	800875e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8008758:	2302      	movs	r3, #2
 800875a:	73fb      	strb	r3, [r7, #15]
    break;
 800875c:	bf00      	nop
  }
  return usb_status;
 800875e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008760:	4618      	mov	r0, r3
 8008762:	3714      	adds	r7, #20
 8008764:	46bd      	mov	sp, r7
 8008766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800876a:	4770      	bx	lr

0800876c <__libc_init_array>:
 800876c:	b570      	push	{r4, r5, r6, lr}
 800876e:	4e0d      	ldr	r6, [pc, #52]	; (80087a4 <__libc_init_array+0x38>)
 8008770:	4c0d      	ldr	r4, [pc, #52]	; (80087a8 <__libc_init_array+0x3c>)
 8008772:	1ba4      	subs	r4, r4, r6
 8008774:	10a4      	asrs	r4, r4, #2
 8008776:	2500      	movs	r5, #0
 8008778:	42a5      	cmp	r5, r4
 800877a:	d109      	bne.n	8008790 <__libc_init_array+0x24>
 800877c:	4e0b      	ldr	r6, [pc, #44]	; (80087ac <__libc_init_array+0x40>)
 800877e:	4c0c      	ldr	r4, [pc, #48]	; (80087b0 <__libc_init_array+0x44>)
 8008780:	f000 f820 	bl	80087c4 <_init>
 8008784:	1ba4      	subs	r4, r4, r6
 8008786:	10a4      	asrs	r4, r4, #2
 8008788:	2500      	movs	r5, #0
 800878a:	42a5      	cmp	r5, r4
 800878c:	d105      	bne.n	800879a <__libc_init_array+0x2e>
 800878e:	bd70      	pop	{r4, r5, r6, pc}
 8008790:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008794:	4798      	blx	r3
 8008796:	3501      	adds	r5, #1
 8008798:	e7ee      	b.n	8008778 <__libc_init_array+0xc>
 800879a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800879e:	4798      	blx	r3
 80087a0:	3501      	adds	r5, #1
 80087a2:	e7f2      	b.n	800878a <__libc_init_array+0x1e>
 80087a4:	08008854 	.word	0x08008854
 80087a8:	08008854 	.word	0x08008854
 80087ac:	08008854 	.word	0x08008854
 80087b0:	08008858 	.word	0x08008858

080087b4 <memset>:
 80087b4:	4402      	add	r2, r0
 80087b6:	4603      	mov	r3, r0
 80087b8:	4293      	cmp	r3, r2
 80087ba:	d100      	bne.n	80087be <memset+0xa>
 80087bc:	4770      	bx	lr
 80087be:	f803 1b01 	strb.w	r1, [r3], #1
 80087c2:	e7f9      	b.n	80087b8 <memset+0x4>

080087c4 <_init>:
 80087c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80087c6:	bf00      	nop
 80087c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80087ca:	bc08      	pop	{r3}
 80087cc:	469e      	mov	lr, r3
 80087ce:	4770      	bx	lr

080087d0 <_fini>:
 80087d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80087d2:	bf00      	nop
 80087d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80087d6:	bc08      	pop	{r3}
 80087d8:	469e      	mov	lr, r3
 80087da:	4770      	bx	lr
