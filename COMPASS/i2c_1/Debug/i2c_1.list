
i2c_1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bc8c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000320  0800be20  0800be20  0001be20  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c140  0800c140  0002034c  2**0
                  CONTENTS
  4 .ARM          00000000  0800c140  0800c140  0002034c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800c140  0800c140  0002034c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c140  0800c140  0001c140  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c144  0800c144  0001c144  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000034c  20000000  0800c148  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001284  2000034c  0800c494  0002034c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200015d0  0800c494  000215d0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002034c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017d9a  00000000  00000000  0002037c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000338a  00000000  00000000  00038116  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000f58  00000000  00000000  0003b4a0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000dd0  00000000  00000000  0003c3f8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00020625  00000000  00000000  0003d1c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00010b37  00000000  00000000  0005d7ed  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000b1203  00000000  00000000  0006e324  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0011f527  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000048cc  00000000  00000000  0011f5a4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000034c 	.word	0x2000034c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800be04 	.word	0x0800be04

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000350 	.word	0x20000350
 80001cc:	0800be04 	.word	0x0800be04

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003be:	f1a4 0401 	sub.w	r4, r4, #1
 80003c2:	d1e9      	bne.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <i2c1_pisiRegister>:
/* USER CODE BEGIN 0 */

/*** Using magnetometer calibration algorithm ***/

uint8_t i2c1_pisiRegister(uint8_t naprava, uint8_t reg, uint8_t podatek)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	b086      	sub	sp, #24
 8000c4c:	af04      	add	r7, sp, #16
 8000c4e:	4603      	mov	r3, r0
 8000c50:	71fb      	strb	r3, [r7, #7]
 8000c52:	460b      	mov	r3, r1
 8000c54:	71bb      	strb	r3, [r7, #6]
 8000c56:	4613      	mov	r3, r2
 8000c58:	717b      	strb	r3, [r7, #5]
  naprava <<= 1;
 8000c5a:	79fb      	ldrb	r3, [r7, #7]
 8000c5c:	005b      	lsls	r3, r3, #1
 8000c5e:	71fb      	strb	r3, [r7, #7]
  return HAL_I2C_Mem_Write(&hi2c1, naprava, reg, I2C_MEMADD_SIZE_8BIT, &podatek, 1, 10);
 8000c60:	79fb      	ldrb	r3, [r7, #7]
 8000c62:	b299      	uxth	r1, r3
 8000c64:	79bb      	ldrb	r3, [r7, #6]
 8000c66:	b29a      	uxth	r2, r3
 8000c68:	230a      	movs	r3, #10
 8000c6a:	9302      	str	r3, [sp, #8]
 8000c6c:	2301      	movs	r3, #1
 8000c6e:	9301      	str	r3, [sp, #4]
 8000c70:	1d7b      	adds	r3, r7, #5
 8000c72:	9300      	str	r3, [sp, #0]
 8000c74:	2301      	movs	r3, #1
 8000c76:	4804      	ldr	r0, [pc, #16]	; (8000c88 <i2c1_pisiRegister+0x40>)
 8000c78:	f001 f9d8 	bl	800202c <HAL_I2C_Mem_Write>
 8000c7c:	4603      	mov	r3, r0
}
 8000c7e:	4618      	mov	r0, r3
 8000c80:	3708      	adds	r7, #8
 8000c82:	46bd      	mov	sp, r7
 8000c84:	bd80      	pop	{r7, pc}
 8000c86:	bf00      	nop
 8000c88:	20000598 	.word	0x20000598

08000c8c <i2c1_beriRegistre>:

void i2c1_beriRegistre(uint8_t naprava, uint8_t reg, uint8_t* podatek, uint8_t dolzina)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	b086      	sub	sp, #24
 8000c90:	af04      	add	r7, sp, #16
 8000c92:	603a      	str	r2, [r7, #0]
 8000c94:	461a      	mov	r2, r3
 8000c96:	4603      	mov	r3, r0
 8000c98:	71fb      	strb	r3, [r7, #7]
 8000c9a:	460b      	mov	r3, r1
 8000c9c:	71bb      	strb	r3, [r7, #6]
 8000c9e:	4613      	mov	r3, r2
 8000ca0:	717b      	strb	r3, [r7, #5]
  if ((dolzina>1)&&(naprava==0x19))  // ce je naprava 0x19 moramo postaviti ta bit, ce zelimo brati vec zlogov
 8000ca2:	797b      	ldrb	r3, [r7, #5]
 8000ca4:	2b01      	cmp	r3, #1
 8000ca6:	d906      	bls.n	8000cb6 <i2c1_beriRegistre+0x2a>
 8000ca8:	79fb      	ldrb	r3, [r7, #7]
 8000caa:	2b19      	cmp	r3, #25
 8000cac:	d103      	bne.n	8000cb6 <i2c1_beriRegistre+0x2a>
    reg |= 0x80;
 8000cae:	79bb      	ldrb	r3, [r7, #6]
 8000cb0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000cb4:	71bb      	strb	r3, [r7, #6]
  naprava <<= 1;
 8000cb6:	79fb      	ldrb	r3, [r7, #7]
 8000cb8:	005b      	lsls	r3, r3, #1
 8000cba:	71fb      	strb	r3, [r7, #7]
  HAL_I2C_Mem_Read(&hi2c1, naprava, reg, I2C_MEMADD_SIZE_8BIT, podatek, dolzina, dolzina);
 8000cbc:	79fb      	ldrb	r3, [r7, #7]
 8000cbe:	b299      	uxth	r1, r3
 8000cc0:	79bb      	ldrb	r3, [r7, #6]
 8000cc2:	b298      	uxth	r0, r3
 8000cc4:	797b      	ldrb	r3, [r7, #5]
 8000cc6:	b29b      	uxth	r3, r3
 8000cc8:	797a      	ldrb	r2, [r7, #5]
 8000cca:	9202      	str	r2, [sp, #8]
 8000ccc:	9301      	str	r3, [sp, #4]
 8000cce:	683b      	ldr	r3, [r7, #0]
 8000cd0:	9300      	str	r3, [sp, #0]
 8000cd2:	2301      	movs	r3, #1
 8000cd4:	4602      	mov	r2, r0
 8000cd6:	4803      	ldr	r0, [pc, #12]	; (8000ce4 <i2c1_beriRegistre+0x58>)
 8000cd8:	f001 fabc 	bl	8002254 <HAL_I2C_Mem_Read>
}
 8000cdc:	bf00      	nop
 8000cde:	3708      	adds	r7, #8
 8000ce0:	46bd      	mov	sp, r7
 8000ce2:	bd80      	pop	{r7, pc}
 8000ce4:	20000598 	.word	0x20000598

08000ce8 <initLSM303DLHC>:

void initLSM303DLHC()
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	af00      	add	r7, sp, #0
  HAL_Delay(10);
 8000cec:	200a      	movs	r0, #10
 8000cee:	f000 fe47 	bl	8001980 <HAL_Delay>
  // Za potrebe testa, moramo testni napravi sporociti kateri senzor imamo
  #define OLD_SENSOR 0x73 // Odkomentiramo za LSM303DLHC / stari senzor
  //#define NEW_SENSOR 0x6E // Odkomentiramo za LSM303AGR / novi senzor

  #if defined(OLD_SENSOR) && !defined(NEW_SENSOR)
  i2c1_pisiRegister(0x1e, 0x4F, OLD_SENSOR); // Povemo testni napravi, da imamo stari senzor
 8000cf2:	2273      	movs	r2, #115	; 0x73
 8000cf4:	214f      	movs	r1, #79	; 0x4f
 8000cf6:	201e      	movs	r0, #30
 8000cf8:	f7ff ffa6 	bl	8000c48 <i2c1_pisiRegister>
  #elif !defined(OLD_SENSOR) && defined(NEW_SENSOR)
  i2c1_pisiRegister(0x1e, 0x4F, NEW_SENSOR); // Povemo testni napravi, da imamo novi senzor
  #else
  for(;;); // V primeru napake, pocakamo tukaj
  #endif
  HAL_Delay(100);
 8000cfc:	2064      	movs	r0, #100	; 0x64
 8000cfe:	f000 fe3f 	bl	8001980 <HAL_Delay>

  // inicializiraj mag
  i2c1_pisiRegister(0x1E, 0x00, 0xC);  // 7.5hz
 8000d02:	220c      	movs	r2, #12
 8000d04:	2100      	movs	r1, #0
 8000d06:	201e      	movs	r0, #30
 8000d08:	f7ff ff9e 	bl	8000c48 <i2c1_pisiRegister>
  i2c1_pisiRegister(0x1E, 0x01, 0x20);  // privzeto
 8000d0c:	2220      	movs	r2, #32
 8000d0e:	2101      	movs	r1, #1
 8000d10:	201e      	movs	r0, #30
 8000d12:	f7ff ff99 	bl	8000c48 <i2c1_pisiRegister>
  i2c1_pisiRegister(0x1E, 0x02, 0x00);
 8000d16:	2200      	movs	r2, #0
 8000d18:	2102      	movs	r1, #2
 8000d1a:	201e      	movs	r0, #30
 8000d1c:	f7ff ff94 	bl	8000c48 <i2c1_pisiRegister>
}
 8000d20:	bf00      	nop
 8000d22:	bd80      	pop	{r7, pc}

08000d24 <TurnOffPrevious>:


void TurnOffPrevious(int PIN){
 8000d24:	b580      	push	{r7, lr}
 8000d26:	b082      	sub	sp, #8
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	6078      	str	r0, [r7, #4]
	switch (PIN)
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	3b08      	subs	r3, #8
 8000d30:	2b07      	cmp	r3, #7
 8000d32:	d843      	bhi.n	8000dbc <TurnOffPrevious+0x98>
 8000d34:	a201      	add	r2, pc, #4	; (adr r2, 8000d3c <TurnOffPrevious+0x18>)
 8000d36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d3a:	bf00      	nop
 8000d3c:	08000d5d 	.word	0x08000d5d
 8000d40:	08000d69 	.word	0x08000d69
 8000d44:	08000d75 	.word	0x08000d75
 8000d48:	08000d81 	.word	0x08000d81
 8000d4c:	08000d8d 	.word	0x08000d8d
 8000d50:	08000d99 	.word	0x08000d99
 8000d54:	08000da5 	.word	0x08000da5
 8000d58:	08000db1 	.word	0x08000db1
	{
		case 8:
			HAL_GPIO_WritePin(GPIOE, GPIO_PIN_8, GPIO_PIN_RESET);
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000d62:	4818      	ldr	r0, [pc, #96]	; (8000dc4 <TurnOffPrevious+0xa0>)
 8000d64:	f001 f8ba 	bl	8001edc <HAL_GPIO_WritePin>
		case 9:
			HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9, GPIO_PIN_RESET);
 8000d68:	2200      	movs	r2, #0
 8000d6a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000d6e:	4815      	ldr	r0, [pc, #84]	; (8000dc4 <TurnOffPrevious+0xa0>)
 8000d70:	f001 f8b4 	bl	8001edc <HAL_GPIO_WritePin>
		case 10:
			HAL_GPIO_WritePin(GPIOE, GPIO_PIN_10, GPIO_PIN_RESET);
 8000d74:	2200      	movs	r2, #0
 8000d76:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000d7a:	4812      	ldr	r0, [pc, #72]	; (8000dc4 <TurnOffPrevious+0xa0>)
 8000d7c:	f001 f8ae 	bl	8001edc <HAL_GPIO_WritePin>
		case 11:
			HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11, GPIO_PIN_RESET);
 8000d80:	2200      	movs	r2, #0
 8000d82:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000d86:	480f      	ldr	r0, [pc, #60]	; (8000dc4 <TurnOffPrevious+0xa0>)
 8000d88:	f001 f8a8 	bl	8001edc <HAL_GPIO_WritePin>
		case 12:
			HAL_GPIO_WritePin(GPIOE, GPIO_PIN_12, GPIO_PIN_RESET);
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000d92:	480c      	ldr	r0, [pc, #48]	; (8000dc4 <TurnOffPrevious+0xa0>)
 8000d94:	f001 f8a2 	bl	8001edc <HAL_GPIO_WritePin>
		case 13:
			HAL_GPIO_WritePin(GPIOE, GPIO_PIN_13, GPIO_PIN_RESET);
 8000d98:	2200      	movs	r2, #0
 8000d9a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000d9e:	4809      	ldr	r0, [pc, #36]	; (8000dc4 <TurnOffPrevious+0xa0>)
 8000da0:	f001 f89c 	bl	8001edc <HAL_GPIO_WritePin>
		case 14:
			HAL_GPIO_WritePin(GPIOE, GPIO_PIN_14, GPIO_PIN_RESET);
 8000da4:	2200      	movs	r2, #0
 8000da6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000daa:	4806      	ldr	r0, [pc, #24]	; (8000dc4 <TurnOffPrevious+0xa0>)
 8000dac:	f001 f896 	bl	8001edc <HAL_GPIO_WritePin>
		case 15:
			HAL_GPIO_WritePin(GPIOE, GPIO_PIN_15, GPIO_PIN_RESET);
 8000db0:	2200      	movs	r2, #0
 8000db2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000db6:	4803      	ldr	r0, [pc, #12]	; (8000dc4 <TurnOffPrevious+0xa0>)
 8000db8:	f001 f890 	bl	8001edc <HAL_GPIO_WritePin>
	}
}
 8000dbc:	bf00      	nop
 8000dbe:	3708      	adds	r7, #8
 8000dc0:	46bd      	mov	sp, r7
 8000dc2:	bd80      	pop	{r7, pc}
 8000dc4:	48001000 	.word	0x48001000

08000dc8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000dc8:	b5b0      	push	{r4, r5, r7, lr}
 8000dca:	b0d2      	sub	sp, #328	; 0x148
 8000dcc:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000dce:	f000 fd71 	bl	80018b4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000dd2:	f000 fabb 	bl	800134c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000dd6:	f000 fb99 	bl	800150c <MX_GPIO_Init>
  MX_I2C1_Init();
 8000dda:	f000 fb19 	bl	8001410 <MX_I2C1_Init>
  MX_SPI1_Init();
 8000dde:	f000 fb57 	bl	8001490 <MX_SPI1_Init>
  MX_USB_DEVICE_Init();
 8000de2:	f008 f835 	bl	8008e50 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */

  __HAL_I2C_ENABLE(&hi2c1);
 8000de6:	4bdf      	ldr	r3, [pc, #892]	; (8001164 <main+0x39c>)
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	681a      	ldr	r2, [r3, #0]
 8000dec:	4bdd      	ldr	r3, [pc, #884]	; (8001164 <main+0x39c>)
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	f042 0201 	orr.w	r2, r2, #1
 8000df4:	601a      	str	r2, [r3, #0]

  int16_t meritev[5];
  meritev[0] = 0xaaab;// glava za zaznamek zacetek paketa
 8000df6:	f64a 23ab 	movw	r3, #43691	; 0xaaab
 8000dfa:	f8a7 3108 	strh.w	r3, [r7, #264]	; 0x108

  initLSM303DLHC();
 8000dfe:	f7ff ff73 	bl	8000ce8 <initLSM303DLHC>

  char toReturn[250] = {0};
 8000e02:	f107 030c 	add.w	r3, r7, #12
 8000e06:	4618      	mov	r0, r3
 8000e08:	23fa      	movs	r3, #250	; 0xfa
 8000e0a:	461a      	mov	r2, r3
 8000e0c:	2100      	movs	r1, #0
 8000e0e:	f008 fd19 	bl	8009844 <memset>
  int toggleCount = 0;
 8000e12:	2300      	movs	r3, #0
 8000e14:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  int16_t packetCount = 0; // stevec klikov
 8000e18:	2300      	movs	r3, #0
 8000e1a:	f8a7 313e 	strh.w	r3, [r7, #318]	; 0x13e
  _Bool isToggled = 0;
 8000e1e:	2300      	movs	r3, #0
 8000e20:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

  int prevLight = 0;
 8000e24:	2300      	movs	r3, #0
 8000e26:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_Delay(100);
 8000e2a:	2064      	movs	r0, #100	; 0x64
 8000e2c:	f000 fda8 	bl	8001980 <HAL_Delay>


	  meritev[1] = packetCount;
 8000e30:	f8b7 313e 	ldrh.w	r3, [r7, #318]	; 0x13e
 8000e34:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

	  uint8_t x1, x2, y1,y2, z1,z2;

	  // Preberi x y z vrednosti po 8 bitov , high low
	  // X
	  i2c1_beriRegistre(0x1E,  0x03,(uint8_t*)&x1, 1);
 8000e38:	f107 020b 	add.w	r2, r7, #11
 8000e3c:	2301      	movs	r3, #1
 8000e3e:	2103      	movs	r1, #3
 8000e40:	201e      	movs	r0, #30
 8000e42:	f7ff ff23 	bl	8000c8c <i2c1_beriRegistre>
	  i2c1_beriRegistre(0x1E,  0x04,(uint8_t*)&x2, 1);
 8000e46:	f107 020a 	add.w	r2, r7, #10
 8000e4a:	2301      	movs	r3, #1
 8000e4c:	2104      	movs	r1, #4
 8000e4e:	201e      	movs	r0, #30
 8000e50:	f7ff ff1c 	bl	8000c8c <i2c1_beriRegistre>
	  // Y
	  i2c1_beriRegistre(0x1E,  0x07,(uint8_t*)&y1, 1);
 8000e54:	f107 0209 	add.w	r2, r7, #9
 8000e58:	2301      	movs	r3, #1
 8000e5a:	2107      	movs	r1, #7
 8000e5c:	201e      	movs	r0, #30
 8000e5e:	f7ff ff15 	bl	8000c8c <i2c1_beriRegistre>
	  i2c1_beriRegistre(0x1E,  0x08,(uint8_t*)&y2, 1);
 8000e62:	f107 0208 	add.w	r2, r7, #8
 8000e66:	2301      	movs	r3, #1
 8000e68:	2108      	movs	r1, #8
 8000e6a:	201e      	movs	r0, #30
 8000e6c:	f7ff ff0e 	bl	8000c8c <i2c1_beriRegistre>
	  // Z
	  i2c1_beriRegistre(0x1E,  0x05,(uint8_t*)&z1, 1);
 8000e70:	1dfa      	adds	r2, r7, #7
 8000e72:	2301      	movs	r3, #1
 8000e74:	2105      	movs	r1, #5
 8000e76:	201e      	movs	r0, #30
 8000e78:	f7ff ff08 	bl	8000c8c <i2c1_beriRegistre>
	  i2c1_beriRegistre(0x1E,  0x06,(uint8_t*)&z2, 1);
 8000e7c:	1dba      	adds	r2, r7, #6
 8000e7e:	2301      	movs	r3, #1
 8000e80:	2106      	movs	r1, #6
 8000e82:	201e      	movs	r0, #30
 8000e84:	f7ff ff02 	bl	8000c8c <i2c1_beriRegistre>

	  uint16_t x,y,z;
	  // sestavi 16bitni int

	  meritev[2] = ((x1 << 8) | (x2 & 0xff));
 8000e88:	f107 030b 	add.w	r3, r7, #11
 8000e8c:	781b      	ldrb	r3, [r3, #0]
 8000e8e:	021b      	lsls	r3, r3, #8
 8000e90:	b21a      	sxth	r2, r3
 8000e92:	f107 030a 	add.w	r3, r7, #10
 8000e96:	781b      	ldrb	r3, [r3, #0]
 8000e98:	b21b      	sxth	r3, r3
 8000e9a:	4313      	orrs	r3, r2
 8000e9c:	b21b      	sxth	r3, r3
 8000e9e:	f8a7 310c 	strh.w	r3, [r7, #268]	; 0x10c
	  meritev[3] = ((y1 << 8) | (y2 & 0xff));
 8000ea2:	f107 0309 	add.w	r3, r7, #9
 8000ea6:	781b      	ldrb	r3, [r3, #0]
 8000ea8:	021b      	lsls	r3, r3, #8
 8000eaa:	b21a      	sxth	r2, r3
 8000eac:	f107 0308 	add.w	r3, r7, #8
 8000eb0:	781b      	ldrb	r3, [r3, #0]
 8000eb2:	b21b      	sxth	r3, r3
 8000eb4:	4313      	orrs	r3, r2
 8000eb6:	b21b      	sxth	r3, r3
 8000eb8:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
	  meritev[4] = ((z1 << 8) | (z2 & 0xff));
 8000ebc:	1dfb      	adds	r3, r7, #7
 8000ebe:	781b      	ldrb	r3, [r3, #0]
 8000ec0:	021b      	lsls	r3, r3, #8
 8000ec2:	b21a      	sxth	r2, r3
 8000ec4:	1dbb      	adds	r3, r7, #6
 8000ec6:	781b      	ldrb	r3, [r3, #0]
 8000ec8:	b21b      	sxth	r3, r3
 8000eca:	4313      	orrs	r3, r2
 8000ecc:	b21b      	sxth	r3, r3
 8000ece:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110

	  float xv, yv, zv;

	  xv = (float)meritev[2] / 1100.0f;
 8000ed2:	f9b7 310c 	ldrsh.w	r3, [r7, #268]	; 0x10c
 8000ed6:	ee07 3a90 	vmov	s15, r3
 8000eda:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000ede:	eddf 6aa2 	vldr	s13, [pc, #648]	; 8001168 <main+0x3a0>
 8000ee2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000ee6:	edc7 7a4a 	vstr	s15, [r7, #296]	; 0x128
	  yv = (float)meritev[3] / 1100.0f;
 8000eea:	f9b7 310e 	ldrsh.w	r3, [r7, #270]	; 0x10e
 8000eee:	ee07 3a90 	vmov	s15, r3
 8000ef2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000ef6:	eddf 6a9c 	vldr	s13, [pc, #624]	; 8001168 <main+0x3a0>
 8000efa:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000efe:	edc7 7a49 	vstr	s15, [r7, #292]	; 0x124
	  zv = (float)meritev[4] / 980.0f;
 8000f02:	f9b7 3110 	ldrsh.w	r3, [r7, #272]	; 0x110
 8000f06:	ee07 3a90 	vmov	s15, r3
 8000f0a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000f0e:	eddf 6a97 	vldr	s13, [pc, #604]	; 800116c <main+0x3a4>
 8000f12:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000f16:	edc7 7a48 	vstr	s15, [r7, #288]	; 0x120

	  xv=(xv+0.076575923160515f)/0.425442085836195f;
 8000f1a:	edd7 7a4a 	vldr	s15, [r7, #296]	; 0x128
 8000f1e:	ed9f 7a94 	vldr	s14, [pc, #592]	; 8001170 <main+0x3a8>
 8000f22:	ee37 7a87 	vadd.f32	s14, s15, s14
 8000f26:	eddf 6a93 	vldr	s13, [pc, #588]	; 8001174 <main+0x3ac>
 8000f2a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000f2e:	edc7 7a4a 	vstr	s15, [r7, #296]	; 0x128
	  yv=(yv+0.0278623169268702f)/0.45627238404055f;
 8000f32:	edd7 7a49 	vldr	s15, [r7, #292]	; 0x124
 8000f36:	ed9f 7a90 	vldr	s14, [pc, #576]	; 8001178 <main+0x3b0>
 8000f3a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8000f3e:	eddf 6a8f 	vldr	s13, [pc, #572]	; 800117c <main+0x3b4>
 8000f42:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000f46:	edc7 7a49 	vstr	s15, [r7, #292]	; 0x124
	  zv=(zv+0.00343904513673798f)/0.447764326965475f;
 8000f4a:	edd7 7a48 	vldr	s15, [r7, #288]	; 0x120
 8000f4e:	ed9f 7a8c 	vldr	s14, [pc, #560]	; 8001180 <main+0x3b8>
 8000f52:	ee37 7a87 	vadd.f32	s14, s15, s14
 8000f56:	eddf 6a8b 	vldr	s13, [pc, #556]	; 8001184 <main+0x3bc>
 8000f5a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000f5e:	edc7 7a48 	vstr	s15, [r7, #288]	; 0x120

	  // GENERATE BEARING
	  float Pi = 3.14159;
 8000f62:	4b89      	ldr	r3, [pc, #548]	; (8001188 <main+0x3c0>)
 8000f64:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c

	  // Calculate the angle of the vector y,x -> also GAUS to microteslas
	  float heading = (atan2((yv/100.0f), (xv/100.0f)) * 180) / Pi;
 8000f68:	edd7 7a49 	vldr	s15, [r7, #292]	; 0x124
 8000f6c:	ed9f 7a87 	vldr	s14, [pc, #540]	; 800118c <main+0x3c4>
 8000f70:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8000f74:	ee16 0a90 	vmov	r0, s13
 8000f78:	f7ff fae6 	bl	8000548 <__aeabi_f2d>
 8000f7c:	4604      	mov	r4, r0
 8000f7e:	460d      	mov	r5, r1
 8000f80:	edd7 7a4a 	vldr	s15, [r7, #296]	; 0x128
 8000f84:	ed9f 7a81 	vldr	s14, [pc, #516]	; 800118c <main+0x3c4>
 8000f88:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8000f8c:	ee16 0a90 	vmov	r0, s13
 8000f90:	f7ff fada 	bl	8000548 <__aeabi_f2d>
 8000f94:	4602      	mov	r2, r0
 8000f96:	460b      	mov	r3, r1
 8000f98:	ec43 2b11 	vmov	d1, r2, r3
 8000f9c:	ec45 4b10 	vmov	d0, r4, r5
 8000fa0:	f00a fca2 	bl	800b8e8 <atan2>
 8000fa4:	ec51 0b10 	vmov	r0, r1, d0
 8000fa8:	f04f 0200 	mov.w	r2, #0
 8000fac:	4b78      	ldr	r3, [pc, #480]	; (8001190 <main+0x3c8>)
 8000fae:	f7ff fb23 	bl	80005f8 <__aeabi_dmul>
 8000fb2:	4603      	mov	r3, r0
 8000fb4:	460c      	mov	r4, r1
 8000fb6:	4625      	mov	r5, r4
 8000fb8:	461c      	mov	r4, r3
 8000fba:	f8d7 011c 	ldr.w	r0, [r7, #284]	; 0x11c
 8000fbe:	f7ff fac3 	bl	8000548 <__aeabi_f2d>
 8000fc2:	4602      	mov	r2, r0
 8000fc4:	460b      	mov	r3, r1
 8000fc6:	4620      	mov	r0, r4
 8000fc8:	4629      	mov	r1, r5
 8000fca:	f7ff fc3f 	bl	800084c <__aeabi_ddiv>
 8000fce:	4603      	mov	r3, r0
 8000fd0:	460c      	mov	r4, r1
 8000fd2:	4618      	mov	r0, r3
 8000fd4:	4621      	mov	r1, r4
 8000fd6:	f7ff fde7 	bl	8000ba8 <__aeabi_d2f>
 8000fda:	4603      	mov	r3, r0
 8000fdc:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134

	  // Normalize to 0-360
	  if (heading < 0) {
 8000fe0:	edd7 7a4d 	vldr	s15, [r7, #308]	; 0x134
 8000fe4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000fe8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000fec:	d507      	bpl.n	8000ffe <main+0x236>
		heading = 360 + heading;
 8000fee:	edd7 7a4d 	vldr	s15, [r7, #308]	; 0x134
 8000ff2:	ed9f 7a68 	vldr	s14, [pc, #416]	; 8001194 <main+0x3cc>
 8000ff6:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000ffa:	edc7 7a4d 	vstr	s15, [r7, #308]	; 0x134
	  }

	  // S
	  if(heading <= 22.5f || heading >= 337.5f)
 8000ffe:	edd7 7a4d 	vldr	s15, [r7, #308]	; 0x134
 8001002:	ed9f 7a65 	vldr	s14, [pc, #404]	; 8001198 <main+0x3d0>
 8001006:	eef4 7ac7 	vcmpe.f32	s15, s14
 800100a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800100e:	d908      	bls.n	8001022 <main+0x25a>
 8001010:	edd7 7a4d 	vldr	s15, [r7, #308]	; 0x134
 8001014:	ed9f 7a61 	vldr	s14, [pc, #388]	; 800119c <main+0x3d4>
 8001018:	eef4 7ac7 	vcmpe.f32	s15, s14
 800101c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001020:	db10      	blt.n	8001044 <main+0x27c>
      {
		  if(prevLight == 0)
 8001022:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8001026:	2b00      	cmp	r3, #0
 8001028:	d103      	bne.n	8001032 <main+0x26a>
		  {
			  prevLight = 13;
 800102a:	230d      	movs	r3, #13
 800102c:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
 8001030:	e008      	b.n	8001044 <main+0x27c>
		  }

		  else
		  {
			  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_13, GPIO_PIN_SET);
 8001032:	2201      	movs	r2, #1
 8001034:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001038:	4859      	ldr	r0, [pc, #356]	; (80011a0 <main+0x3d8>)
 800103a:	f000 ff4f 	bl	8001edc <HAL_GPIO_WritePin>
			  prevLight = 13;
 800103e:	230d      	movs	r3, #13
 8001040:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
		  }
      }
	  // SV
	  if(heading <= 67.5f && heading >= 22.5f)
 8001044:	edd7 7a4d 	vldr	s15, [r7, #308]	; 0x134
 8001048:	ed9f 7a56 	vldr	s14, [pc, #344]	; 80011a4 <main+0x3dc>
 800104c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001050:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001054:	d81d      	bhi.n	8001092 <main+0x2ca>
 8001056:	edd7 7a4d 	vldr	s15, [r7, #308]	; 0x134
 800105a:	ed9f 7a4f 	vldr	s14, [pc, #316]	; 8001198 <main+0x3d0>
 800105e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001062:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001066:	db14      	blt.n	8001092 <main+0x2ca>
      {
		  if(prevLight == 0)
 8001068:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800106c:	2b00      	cmp	r3, #0
 800106e:	d103      	bne.n	8001078 <main+0x2b0>
		  {
			  prevLight = 14;
 8001070:	230e      	movs	r3, #14
 8001072:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
 8001076:	e00c      	b.n	8001092 <main+0x2ca>
		  }

		  else
		  {
			  TurnOffPrevious(prevLight);
 8001078:	f8d7 0138 	ldr.w	r0, [r7, #312]	; 0x138
 800107c:	f7ff fe52 	bl	8000d24 <TurnOffPrevious>
			  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_14, GPIO_PIN_SET);
 8001080:	2201      	movs	r2, #1
 8001082:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001086:	4846      	ldr	r0, [pc, #280]	; (80011a0 <main+0x3d8>)
 8001088:	f000 ff28 	bl	8001edc <HAL_GPIO_WritePin>
			  prevLight = 14;
 800108c:	230e      	movs	r3, #14
 800108e:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
		  }
      }

	  // V
	  if(heading >= 67.5f && heading <= 112.5f)
 8001092:	edd7 7a4d 	vldr	s15, [r7, #308]	; 0x134
 8001096:	ed9f 7a43 	vldr	s14, [pc, #268]	; 80011a4 <main+0x3dc>
 800109a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800109e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010a2:	db1d      	blt.n	80010e0 <main+0x318>
 80010a4:	edd7 7a4d 	vldr	s15, [r7, #308]	; 0x134
 80010a8:	ed9f 7a3f 	vldr	s14, [pc, #252]	; 80011a8 <main+0x3e0>
 80010ac:	eef4 7ac7 	vcmpe.f32	s15, s14
 80010b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010b4:	d814      	bhi.n	80010e0 <main+0x318>
      {
		  if(prevLight == 0)
 80010b6:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d103      	bne.n	80010c6 <main+0x2fe>
		  {
			  prevLight = 15;
 80010be:	230f      	movs	r3, #15
 80010c0:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
 80010c4:	e00c      	b.n	80010e0 <main+0x318>
		  }

		  else
		  {
			  TurnOffPrevious(prevLight);
 80010c6:	f8d7 0138 	ldr.w	r0, [r7, #312]	; 0x138
 80010ca:	f7ff fe2b 	bl	8000d24 <TurnOffPrevious>
			  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_15, GPIO_PIN_SET);
 80010ce:	2201      	movs	r2, #1
 80010d0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80010d4:	4832      	ldr	r0, [pc, #200]	; (80011a0 <main+0x3d8>)
 80010d6:	f000 ff01 	bl	8001edc <HAL_GPIO_WritePin>
			  prevLight = 15;
 80010da:	230f      	movs	r3, #15
 80010dc:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
		  }
      }

	  // JV
	  if(heading >= 112.5f && heading <= 157.5f)
 80010e0:	edd7 7a4d 	vldr	s15, [r7, #308]	; 0x134
 80010e4:	ed9f 7a30 	vldr	s14, [pc, #192]	; 80011a8 <main+0x3e0>
 80010e8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80010ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010f0:	db1d      	blt.n	800112e <main+0x366>
 80010f2:	edd7 7a4d 	vldr	s15, [r7, #308]	; 0x134
 80010f6:	ed9f 7a2d 	vldr	s14, [pc, #180]	; 80011ac <main+0x3e4>
 80010fa:	eef4 7ac7 	vcmpe.f32	s15, s14
 80010fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001102:	d814      	bhi.n	800112e <main+0x366>
      {
		  if(prevLight == 0)
 8001104:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8001108:	2b00      	cmp	r3, #0
 800110a:	d103      	bne.n	8001114 <main+0x34c>
		  {
			  prevLight = 8;
 800110c:	2308      	movs	r3, #8
 800110e:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
 8001112:	e00c      	b.n	800112e <main+0x366>
		  }

		  else
		  {
			  TurnOffPrevious(prevLight);
 8001114:	f8d7 0138 	ldr.w	r0, [r7, #312]	; 0x138
 8001118:	f7ff fe04 	bl	8000d24 <TurnOffPrevious>
			  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_8, GPIO_PIN_SET);
 800111c:	2201      	movs	r2, #1
 800111e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001122:	481f      	ldr	r0, [pc, #124]	; (80011a0 <main+0x3d8>)
 8001124:	f000 feda 	bl	8001edc <HAL_GPIO_WritePin>
			  prevLight = 8;
 8001128:	2308      	movs	r3, #8
 800112a:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
		  }
      }

	  // J
	  if(heading >= 157.5f && heading <= 202.5f)
 800112e:	edd7 7a4d 	vldr	s15, [r7, #308]	; 0x134
 8001132:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 80011ac <main+0x3e4>
 8001136:	eef4 7ac7 	vcmpe.f32	s15, s14
 800113a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800113e:	db46      	blt.n	80011ce <main+0x406>
 8001140:	edd7 7a4d 	vldr	s15, [r7, #308]	; 0x134
 8001144:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 80011b0 <main+0x3e8>
 8001148:	eef4 7ac7 	vcmpe.f32	s15, s14
 800114c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001150:	d83d      	bhi.n	80011ce <main+0x406>
      {
		  if(prevLight == 0)
 8001152:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8001156:	2b00      	cmp	r3, #0
 8001158:	d12c      	bne.n	80011b4 <main+0x3ec>
		  {
			  prevLight = 9;
 800115a:	2309      	movs	r3, #9
 800115c:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
 8001160:	e035      	b.n	80011ce <main+0x406>
 8001162:	bf00      	nop
 8001164:	20000598 	.word	0x20000598
 8001168:	44898000 	.word	0x44898000
 800116c:	44750000 	.word	0x44750000
 8001170:	3d9cd3d6 	.word	0x3d9cd3d6
 8001174:	3ed9d38c 	.word	0x3ed9d38c
 8001178:	3ce43f83 	.word	0x3ce43f83
 800117c:	3ee99c89 	.word	0x3ee99c89
 8001180:	3b61619a 	.word	0x3b61619a
 8001184:	3ee5415e 	.word	0x3ee5415e
 8001188:	40490fd0 	.word	0x40490fd0
 800118c:	42c80000 	.word	0x42c80000
 8001190:	40668000 	.word	0x40668000
 8001194:	43b40000 	.word	0x43b40000
 8001198:	41b40000 	.word	0x41b40000
 800119c:	43a8c000 	.word	0x43a8c000
 80011a0:	48001000 	.word	0x48001000
 80011a4:	42870000 	.word	0x42870000
 80011a8:	42e10000 	.word	0x42e10000
 80011ac:	431d8000 	.word	0x431d8000
 80011b0:	434a8000 	.word	0x434a8000
		  }

		  else
		  {
			  TurnOffPrevious(prevLight);
 80011b4:	f8d7 0138 	ldr.w	r0, [r7, #312]	; 0x138
 80011b8:	f7ff fdb4 	bl	8000d24 <TurnOffPrevious>
			  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9, GPIO_PIN_SET);
 80011bc:	2201      	movs	r2, #1
 80011be:	f44f 7100 	mov.w	r1, #512	; 0x200
 80011c2:	485c      	ldr	r0, [pc, #368]	; (8001334 <main+0x56c>)
 80011c4:	f000 fe8a 	bl	8001edc <HAL_GPIO_WritePin>
			  prevLight = 9;
 80011c8:	2309      	movs	r3, #9
 80011ca:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
		  }
      }

	  // JZ
	  if(heading >= 202.5f && heading <= 247.5f)
 80011ce:	edd7 7a4d 	vldr	s15, [r7, #308]	; 0x134
 80011d2:	ed9f 7a59 	vldr	s14, [pc, #356]	; 8001338 <main+0x570>
 80011d6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80011da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011de:	db1d      	blt.n	800121c <main+0x454>
 80011e0:	edd7 7a4d 	vldr	s15, [r7, #308]	; 0x134
 80011e4:	ed9f 7a55 	vldr	s14, [pc, #340]	; 800133c <main+0x574>
 80011e8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80011ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011f0:	d814      	bhi.n	800121c <main+0x454>
      {
		  if(prevLight == 0)
 80011f2:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d103      	bne.n	8001202 <main+0x43a>
		  {
			  prevLight = 10;
 80011fa:	230a      	movs	r3, #10
 80011fc:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
 8001200:	e00c      	b.n	800121c <main+0x454>
		  }

		  else
		  {
			  TurnOffPrevious(prevLight);
 8001202:	f8d7 0138 	ldr.w	r0, [r7, #312]	; 0x138
 8001206:	f7ff fd8d 	bl	8000d24 <TurnOffPrevious>
			  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_10, GPIO_PIN_SET);
 800120a:	2201      	movs	r2, #1
 800120c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001210:	4848      	ldr	r0, [pc, #288]	; (8001334 <main+0x56c>)
 8001212:	f000 fe63 	bl	8001edc <HAL_GPIO_WritePin>
			  prevLight = 10;
 8001216:	230a      	movs	r3, #10
 8001218:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
		  }
      }

	  // Z
	  if(heading >= 247.5f && heading <= 292.5f)
 800121c:	edd7 7a4d 	vldr	s15, [r7, #308]	; 0x134
 8001220:	ed9f 7a46 	vldr	s14, [pc, #280]	; 800133c <main+0x574>
 8001224:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001228:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800122c:	db1d      	blt.n	800126a <main+0x4a2>
 800122e:	edd7 7a4d 	vldr	s15, [r7, #308]	; 0x134
 8001232:	ed9f 7a43 	vldr	s14, [pc, #268]	; 8001340 <main+0x578>
 8001236:	eef4 7ac7 	vcmpe.f32	s15, s14
 800123a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800123e:	d814      	bhi.n	800126a <main+0x4a2>
      {
		  if(prevLight == 0)
 8001240:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8001244:	2b00      	cmp	r3, #0
 8001246:	d103      	bne.n	8001250 <main+0x488>
		  {
			  prevLight = 11;
 8001248:	230b      	movs	r3, #11
 800124a:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
 800124e:	e00c      	b.n	800126a <main+0x4a2>
		  }

		  else
		  {
			  TurnOffPrevious(prevLight);
 8001250:	f8d7 0138 	ldr.w	r0, [r7, #312]	; 0x138
 8001254:	f7ff fd66 	bl	8000d24 <TurnOffPrevious>
			  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11, GPIO_PIN_SET);
 8001258:	2201      	movs	r2, #1
 800125a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800125e:	4835      	ldr	r0, [pc, #212]	; (8001334 <main+0x56c>)
 8001260:	f000 fe3c 	bl	8001edc <HAL_GPIO_WritePin>
			  prevLight = 11;
 8001264:	230b      	movs	r3, #11
 8001266:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
		  }
      }

	  // SZ
	  if(heading >= 292.5f && heading <= 337.5f)
 800126a:	edd7 7a4d 	vldr	s15, [r7, #308]	; 0x134
 800126e:	ed9f 7a34 	vldr	s14, [pc, #208]	; 8001340 <main+0x578>
 8001272:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001276:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800127a:	db1d      	blt.n	80012b8 <main+0x4f0>
 800127c:	edd7 7a4d 	vldr	s15, [r7, #308]	; 0x134
 8001280:	ed9f 7a30 	vldr	s14, [pc, #192]	; 8001344 <main+0x57c>
 8001284:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001288:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800128c:	d814      	bhi.n	80012b8 <main+0x4f0>
      {
		  if(prevLight == 0)
 800128e:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8001292:	2b00      	cmp	r3, #0
 8001294:	d103      	bne.n	800129e <main+0x4d6>
		  {
			  prevLight = 12;
 8001296:	230c      	movs	r3, #12
 8001298:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
 800129c:	e00c      	b.n	80012b8 <main+0x4f0>
		  }

		  else
		  {
			  TurnOffPrevious(prevLight);
 800129e:	f8d7 0138 	ldr.w	r0, [r7, #312]	; 0x138
 80012a2:	f7ff fd3f 	bl	8000d24 <TurnOffPrevious>
			  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_12, GPIO_PIN_SET);
 80012a6:	2201      	movs	r2, #1
 80012a8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80012ac:	4821      	ldr	r0, [pc, #132]	; (8001334 <main+0x56c>)
 80012ae:	f000 fe15 	bl	8001edc <HAL_GPIO_WritePin>
			  prevLight = 12;
 80012b2:	230c      	movs	r3, #12
 80012b4:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
		  }
      }

	  int strlen = snprintf(NULL, 0 , "{Compass Heading: %.3f}\n\r",
 80012b8:	f8d7 0134 	ldr.w	r0, [r7, #308]	; 0x134
 80012bc:	f7ff f944 	bl	8000548 <__aeabi_f2d>
 80012c0:	4603      	mov	r3, r0
 80012c2:	460c      	mov	r4, r1
 80012c4:	e9cd 3400 	strd	r3, r4, [sp]
 80012c8:	4a1f      	ldr	r2, [pc, #124]	; (8001348 <main+0x580>)
 80012ca:	2100      	movs	r1, #0
 80012cc:	2000      	movs	r0, #0
 80012ce:	f008 ffd5 	bl	800a27c <sniprintf>
 80012d2:	f8c7 0118 	str.w	r0, [r7, #280]	; 0x118
			  (float)heading);
	  char* stringToSend = malloc (strlen);
 80012d6:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80012da:	4618      	mov	r0, r3
 80012dc:	f008 faaa 	bl	8009834 <malloc>
 80012e0:	4603      	mov	r3, r0
 80012e2:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
	  snprintf(stringToSend, strlen , "{Compass Heading: %.3f}\n\r",
 80012e6:	f8d7 5118 	ldr.w	r5, [r7, #280]	; 0x118
 80012ea:	f8d7 0134 	ldr.w	r0, [r7, #308]	; 0x134
 80012ee:	f7ff f92b 	bl	8000548 <__aeabi_f2d>
 80012f2:	4603      	mov	r3, r0
 80012f4:	460c      	mov	r4, r1
 80012f6:	e9cd 3400 	strd	r3, r4, [sp]
 80012fa:	4a13      	ldr	r2, [pc, #76]	; (8001348 <main+0x580>)
 80012fc:	4629      	mov	r1, r5
 80012fe:	f8d7 0114 	ldr.w	r0, [r7, #276]	; 0x114
 8001302:	f008 ffbb 	bl	800a27c <sniprintf>
			  (float)heading);

	  packetCount++;
 8001306:	f9b7 313e 	ldrsh.w	r3, [r7, #318]	; 0x13e
 800130a:	b29b      	uxth	r3, r3
 800130c:	3301      	adds	r3, #1
 800130e:	b29b      	uxth	r3, r3
 8001310:	f8a7 313e 	strh.w	r3, [r7, #318]	; 0x13e
	  CDC_Transmit_FS(stringToSend, strlen);
 8001314:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8001318:	b29b      	uxth	r3, r3
 800131a:	4619      	mov	r1, r3
 800131c:	f8d7 0114 	ldr.w	r0, [r7, #276]	; 0x114
 8001320:	f007 fe54 	bl	8008fcc <CDC_Transmit_FS>
	  memset(toReturn, 0, sizeof(toReturn));
 8001324:	f107 030c 	add.w	r3, r7, #12
 8001328:	22fa      	movs	r2, #250	; 0xfa
 800132a:	2100      	movs	r1, #0
 800132c:	4618      	mov	r0, r3
 800132e:	f008 fa89 	bl	8009844 <memset>
  {
 8001332:	e57a      	b.n	8000e2a <main+0x62>
 8001334:	48001000 	.word	0x48001000
 8001338:	434a8000 	.word	0x434a8000
 800133c:	43778000 	.word	0x43778000
 8001340:	43924000 	.word	0x43924000
 8001344:	43a8c000 	.word	0x43a8c000
 8001348:	0800be20 	.word	0x0800be20

0800134c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	b09e      	sub	sp, #120	; 0x78
 8001350:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001352:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001356:	2228      	movs	r2, #40	; 0x28
 8001358:	2100      	movs	r1, #0
 800135a:	4618      	mov	r0, r3
 800135c:	f008 fa72 	bl	8009844 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001360:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001364:	2200      	movs	r2, #0
 8001366:	601a      	str	r2, [r3, #0]
 8001368:	605a      	str	r2, [r3, #4]
 800136a:	609a      	str	r2, [r3, #8]
 800136c:	60da      	str	r2, [r3, #12]
 800136e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001370:	463b      	mov	r3, r7
 8001372:	223c      	movs	r2, #60	; 0x3c
 8001374:	2100      	movs	r1, #0
 8001376:	4618      	mov	r0, r3
 8001378:	f008 fa64 	bl	8009844 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 800137c:	2303      	movs	r3, #3
 800137e:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001380:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8001384:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001386:	2300      	movs	r3, #0
 8001388:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800138a:	2301      	movs	r3, #1
 800138c:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800138e:	2310      	movs	r3, #16
 8001390:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001392:	2302      	movs	r3, #2
 8001394:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001396:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800139a:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 800139c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80013a0:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80013a2:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80013a6:	4618      	mov	r0, r3
 80013a8:	f002 fe0e 	bl	8003fc8 <HAL_RCC_OscConfig>
 80013ac:	4603      	mov	r3, r0
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d001      	beq.n	80013b6 <SystemClock_Config+0x6a>
  {
    Error_Handler();
 80013b2:	f000 f92b 	bl	800160c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80013b6:	230f      	movs	r3, #15
 80013b8:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80013ba:	2302      	movs	r3, #2
 80013bc:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80013be:	2300      	movs	r3, #0
 80013c0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80013c2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80013c6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80013c8:	2300      	movs	r3, #0
 80013ca:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80013cc:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80013d0:	2101      	movs	r1, #1
 80013d2:	4618      	mov	r0, r3
 80013d4:	f003 fd00 	bl	8004dd8 <HAL_RCC_ClockConfig>
 80013d8:	4603      	mov	r3, r0
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d001      	beq.n	80013e2 <SystemClock_Config+0x96>
  {
    Error_Handler();
 80013de:	f000 f915 	bl	800160c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_I2C1;
 80013e2:	4b0a      	ldr	r3, [pc, #40]	; (800140c <SystemClock_Config+0xc0>)
 80013e4:	603b      	str	r3, [r7, #0]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 80013e6:	2300      	movs	r3, #0
 80013e8:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.USBClockSelection = RCC_USBCLKSOURCE_PLL;
 80013ea:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80013ee:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80013f0:	463b      	mov	r3, r7
 80013f2:	4618      	mov	r0, r3
 80013f4:	f003 fed6 	bl	80051a4 <HAL_RCCEx_PeriphCLKConfig>
 80013f8:	4603      	mov	r3, r0
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d001      	beq.n	8001402 <SystemClock_Config+0xb6>
  {
    Error_Handler();
 80013fe:	f000 f905 	bl	800160c <Error_Handler>
  }
}
 8001402:	bf00      	nop
 8001404:	3778      	adds	r7, #120	; 0x78
 8001406:	46bd      	mov	sp, r7
 8001408:	bd80      	pop	{r7, pc}
 800140a:	bf00      	nop
 800140c:	00020020 	.word	0x00020020

08001410 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001414:	4b1b      	ldr	r3, [pc, #108]	; (8001484 <MX_I2C1_Init+0x74>)
 8001416:	4a1c      	ldr	r2, [pc, #112]	; (8001488 <MX_I2C1_Init+0x78>)
 8001418:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 800141a:	4b1a      	ldr	r3, [pc, #104]	; (8001484 <MX_I2C1_Init+0x74>)
 800141c:	4a1b      	ldr	r2, [pc, #108]	; (800148c <MX_I2C1_Init+0x7c>)
 800141e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001420:	4b18      	ldr	r3, [pc, #96]	; (8001484 <MX_I2C1_Init+0x74>)
 8001422:	2200      	movs	r2, #0
 8001424:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001426:	4b17      	ldr	r3, [pc, #92]	; (8001484 <MX_I2C1_Init+0x74>)
 8001428:	2201      	movs	r2, #1
 800142a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800142c:	4b15      	ldr	r3, [pc, #84]	; (8001484 <MX_I2C1_Init+0x74>)
 800142e:	2200      	movs	r2, #0
 8001430:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001432:	4b14      	ldr	r3, [pc, #80]	; (8001484 <MX_I2C1_Init+0x74>)
 8001434:	2200      	movs	r2, #0
 8001436:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001438:	4b12      	ldr	r3, [pc, #72]	; (8001484 <MX_I2C1_Init+0x74>)
 800143a:	2200      	movs	r2, #0
 800143c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800143e:	4b11      	ldr	r3, [pc, #68]	; (8001484 <MX_I2C1_Init+0x74>)
 8001440:	2200      	movs	r2, #0
 8001442:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001444:	4b0f      	ldr	r3, [pc, #60]	; (8001484 <MX_I2C1_Init+0x74>)
 8001446:	2200      	movs	r2, #0
 8001448:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800144a:	480e      	ldr	r0, [pc, #56]	; (8001484 <MX_I2C1_Init+0x74>)
 800144c:	f000 fd5e 	bl	8001f0c <HAL_I2C_Init>
 8001450:	4603      	mov	r3, r0
 8001452:	2b00      	cmp	r3, #0
 8001454:	d001      	beq.n	800145a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001456:	f000 f8d9 	bl	800160c <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800145a:	2100      	movs	r1, #0
 800145c:	4809      	ldr	r0, [pc, #36]	; (8001484 <MX_I2C1_Init+0x74>)
 800145e:	f001 fa2f 	bl	80028c0 <HAL_I2CEx_ConfigAnalogFilter>
 8001462:	4603      	mov	r3, r0
 8001464:	2b00      	cmp	r3, #0
 8001466:	d001      	beq.n	800146c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001468:	f000 f8d0 	bl	800160c <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800146c:	2100      	movs	r1, #0
 800146e:	4805      	ldr	r0, [pc, #20]	; (8001484 <MX_I2C1_Init+0x74>)
 8001470:	f001 fa71 	bl	8002956 <HAL_I2CEx_ConfigDigitalFilter>
 8001474:	4603      	mov	r3, r0
 8001476:	2b00      	cmp	r3, #0
 8001478:	d001      	beq.n	800147e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800147a:	f000 f8c7 	bl	800160c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800147e:	bf00      	nop
 8001480:	bd80      	pop	{r7, pc}
 8001482:	bf00      	nop
 8001484:	20000598 	.word	0x20000598
 8001488:	40005400 	.word	0x40005400
 800148c:	2000090e 	.word	0x2000090e

08001490 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001494:	4b1b      	ldr	r3, [pc, #108]	; (8001504 <MX_SPI1_Init+0x74>)
 8001496:	4a1c      	ldr	r2, [pc, #112]	; (8001508 <MX_SPI1_Init+0x78>)
 8001498:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800149a:	4b1a      	ldr	r3, [pc, #104]	; (8001504 <MX_SPI1_Init+0x74>)
 800149c:	f44f 7282 	mov.w	r2, #260	; 0x104
 80014a0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80014a2:	4b18      	ldr	r3, [pc, #96]	; (8001504 <MX_SPI1_Init+0x74>)
 80014a4:	2200      	movs	r2, #0
 80014a6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 80014a8:	4b16      	ldr	r3, [pc, #88]	; (8001504 <MX_SPI1_Init+0x74>)
 80014aa:	f44f 7240 	mov.w	r2, #768	; 0x300
 80014ae:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80014b0:	4b14      	ldr	r3, [pc, #80]	; (8001504 <MX_SPI1_Init+0x74>)
 80014b2:	2200      	movs	r2, #0
 80014b4:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80014b6:	4b13      	ldr	r3, [pc, #76]	; (8001504 <MX_SPI1_Init+0x74>)
 80014b8:	2200      	movs	r2, #0
 80014ba:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80014bc:	4b11      	ldr	r3, [pc, #68]	; (8001504 <MX_SPI1_Init+0x74>)
 80014be:	f44f 7200 	mov.w	r2, #512	; 0x200
 80014c2:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80014c4:	4b0f      	ldr	r3, [pc, #60]	; (8001504 <MX_SPI1_Init+0x74>)
 80014c6:	2208      	movs	r2, #8
 80014c8:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80014ca:	4b0e      	ldr	r3, [pc, #56]	; (8001504 <MX_SPI1_Init+0x74>)
 80014cc:	2200      	movs	r2, #0
 80014ce:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80014d0:	4b0c      	ldr	r3, [pc, #48]	; (8001504 <MX_SPI1_Init+0x74>)
 80014d2:	2200      	movs	r2, #0
 80014d4:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80014d6:	4b0b      	ldr	r3, [pc, #44]	; (8001504 <MX_SPI1_Init+0x74>)
 80014d8:	2200      	movs	r2, #0
 80014da:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80014dc:	4b09      	ldr	r3, [pc, #36]	; (8001504 <MX_SPI1_Init+0x74>)
 80014de:	2207      	movs	r2, #7
 80014e0:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80014e2:	4b08      	ldr	r3, [pc, #32]	; (8001504 <MX_SPI1_Init+0x74>)
 80014e4:	2200      	movs	r2, #0
 80014e6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80014e8:	4b06      	ldr	r3, [pc, #24]	; (8001504 <MX_SPI1_Init+0x74>)
 80014ea:	2208      	movs	r2, #8
 80014ec:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80014ee:	4805      	ldr	r0, [pc, #20]	; (8001504 <MX_SPI1_Init+0x74>)
 80014f0:	f004 f808 	bl	8005504 <HAL_SPI_Init>
 80014f4:	4603      	mov	r3, r0
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d001      	beq.n	80014fe <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80014fa:	f000 f887 	bl	800160c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80014fe:	bf00      	nop
 8001500:	bd80      	pop	{r7, pc}
 8001502:	bf00      	nop
 8001504:	200005e4 	.word	0x200005e4
 8001508:	40013000 	.word	0x40013000

0800150c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	b08a      	sub	sp, #40	; 0x28
 8001510:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001512:	f107 0314 	add.w	r3, r7, #20
 8001516:	2200      	movs	r2, #0
 8001518:	601a      	str	r2, [r3, #0]
 800151a:	605a      	str	r2, [r3, #4]
 800151c:	609a      	str	r2, [r3, #8]
 800151e:	60da      	str	r2, [r3, #12]
 8001520:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001522:	4b37      	ldr	r3, [pc, #220]	; (8001600 <MX_GPIO_Init+0xf4>)
 8001524:	695b      	ldr	r3, [r3, #20]
 8001526:	4a36      	ldr	r2, [pc, #216]	; (8001600 <MX_GPIO_Init+0xf4>)
 8001528:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800152c:	6153      	str	r3, [r2, #20]
 800152e:	4b34      	ldr	r3, [pc, #208]	; (8001600 <MX_GPIO_Init+0xf4>)
 8001530:	695b      	ldr	r3, [r3, #20]
 8001532:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001536:	613b      	str	r3, [r7, #16]
 8001538:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800153a:	4b31      	ldr	r3, [pc, #196]	; (8001600 <MX_GPIO_Init+0xf4>)
 800153c:	695b      	ldr	r3, [r3, #20]
 800153e:	4a30      	ldr	r2, [pc, #192]	; (8001600 <MX_GPIO_Init+0xf4>)
 8001540:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001544:	6153      	str	r3, [r2, #20]
 8001546:	4b2e      	ldr	r3, [pc, #184]	; (8001600 <MX_GPIO_Init+0xf4>)
 8001548:	695b      	ldr	r3, [r3, #20]
 800154a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800154e:	60fb      	str	r3, [r7, #12]
 8001550:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001552:	4b2b      	ldr	r3, [pc, #172]	; (8001600 <MX_GPIO_Init+0xf4>)
 8001554:	695b      	ldr	r3, [r3, #20]
 8001556:	4a2a      	ldr	r2, [pc, #168]	; (8001600 <MX_GPIO_Init+0xf4>)
 8001558:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800155c:	6153      	str	r3, [r2, #20]
 800155e:	4b28      	ldr	r3, [pc, #160]	; (8001600 <MX_GPIO_Init+0xf4>)
 8001560:	695b      	ldr	r3, [r3, #20]
 8001562:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001566:	60bb      	str	r3, [r7, #8]
 8001568:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800156a:	4b25      	ldr	r3, [pc, #148]	; (8001600 <MX_GPIO_Init+0xf4>)
 800156c:	695b      	ldr	r3, [r3, #20]
 800156e:	4a24      	ldr	r2, [pc, #144]	; (8001600 <MX_GPIO_Init+0xf4>)
 8001570:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001574:	6153      	str	r3, [r2, #20]
 8001576:	4b22      	ldr	r3, [pc, #136]	; (8001600 <MX_GPIO_Init+0xf4>)
 8001578:	695b      	ldr	r3, [r3, #20]
 800157a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800157e:	607b      	str	r3, [r7, #4]
 8001580:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001582:	4b1f      	ldr	r3, [pc, #124]	; (8001600 <MX_GPIO_Init+0xf4>)
 8001584:	695b      	ldr	r3, [r3, #20]
 8001586:	4a1e      	ldr	r2, [pc, #120]	; (8001600 <MX_GPIO_Init+0xf4>)
 8001588:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800158c:	6153      	str	r3, [r2, #20]
 800158e:	4b1c      	ldr	r3, [pc, #112]	; (8001600 <MX_GPIO_Init+0xf4>)
 8001590:	695b      	ldr	r3, [r3, #20]
 8001592:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001596:	603b      	str	r3, [r7, #0]
 8001598:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 800159a:	2200      	movs	r2, #0
 800159c:	f64f 7108 	movw	r1, #65288	; 0xff08
 80015a0:	4818      	ldr	r0, [pc, #96]	; (8001604 <MX_GPIO_Init+0xf8>)
 80015a2:	f000 fc9b 	bl	8001edc <HAL_GPIO_WritePin>
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
                          |LD6_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : DRDY_Pin MEMS_INT3_Pin MEMS_INT4_Pin MEMS_INT1_Pin
                           MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = DRDY_Pin|MEMS_INT3_Pin|MEMS_INT4_Pin|MEMS_INT1_Pin
 80015a6:	2337      	movs	r3, #55	; 0x37
 80015a8:	617b      	str	r3, [r7, #20]
                          |MEMS_INT2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80015aa:	4b17      	ldr	r3, [pc, #92]	; (8001608 <MX_GPIO_Init+0xfc>)
 80015ac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ae:	2300      	movs	r3, #0
 80015b0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80015b2:	f107 0314 	add.w	r3, r7, #20
 80015b6:	4619      	mov	r1, r3
 80015b8:	4812      	ldr	r0, [pc, #72]	; (8001604 <MX_GPIO_Init+0xf8>)
 80015ba:	f000 fb15 	bl	8001be8 <HAL_GPIO_Init>

  /*Configure GPIO pins : CS_I2C_SPI_Pin LD4_Pin LD3_Pin LD5_Pin
                           LD7_Pin LD9_Pin LD10_Pin LD8_Pin
                           LD6_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 80015be:	f64f 7308 	movw	r3, #65288	; 0xff08
 80015c2:	617b      	str	r3, [r7, #20]
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
                          |LD6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015c4:	2301      	movs	r3, #1
 80015c6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015c8:	2300      	movs	r3, #0
 80015ca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015cc:	2300      	movs	r3, #0
 80015ce:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80015d0:	f107 0314 	add.w	r3, r7, #20
 80015d4:	4619      	mov	r1, r3
 80015d6:	480b      	ldr	r0, [pc, #44]	; (8001604 <MX_GPIO_Init+0xf8>)
 80015d8:	f000 fb06 	bl	8001be8 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80015dc:	2301      	movs	r3, #1
 80015de:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80015e0:	2300      	movs	r3, #0
 80015e2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015e4:	2300      	movs	r3, #0
 80015e6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80015e8:	f107 0314 	add.w	r3, r7, #20
 80015ec:	4619      	mov	r1, r3
 80015ee:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80015f2:	f000 faf9 	bl	8001be8 <HAL_GPIO_Init>

}
 80015f6:	bf00      	nop
 80015f8:	3728      	adds	r7, #40	; 0x28
 80015fa:	46bd      	mov	sp, r7
 80015fc:	bd80      	pop	{r7, pc}
 80015fe:	bf00      	nop
 8001600:	40021000 	.word	0x40021000
 8001604:	48001000 	.word	0x48001000
 8001608:	10120000 	.word	0x10120000

0800160c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800160c:	b480      	push	{r7}
 800160e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001610:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001612:	e7fe      	b.n	8001612 <Error_Handler+0x6>

08001614 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001614:	b580      	push	{r7, lr}
 8001616:	b082      	sub	sp, #8
 8001618:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800161a:	4b0f      	ldr	r3, [pc, #60]	; (8001658 <HAL_MspInit+0x44>)
 800161c:	699b      	ldr	r3, [r3, #24]
 800161e:	4a0e      	ldr	r2, [pc, #56]	; (8001658 <HAL_MspInit+0x44>)
 8001620:	f043 0301 	orr.w	r3, r3, #1
 8001624:	6193      	str	r3, [r2, #24]
 8001626:	4b0c      	ldr	r3, [pc, #48]	; (8001658 <HAL_MspInit+0x44>)
 8001628:	699b      	ldr	r3, [r3, #24]
 800162a:	f003 0301 	and.w	r3, r3, #1
 800162e:	607b      	str	r3, [r7, #4]
 8001630:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001632:	4b09      	ldr	r3, [pc, #36]	; (8001658 <HAL_MspInit+0x44>)
 8001634:	69db      	ldr	r3, [r3, #28]
 8001636:	4a08      	ldr	r2, [pc, #32]	; (8001658 <HAL_MspInit+0x44>)
 8001638:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800163c:	61d3      	str	r3, [r2, #28]
 800163e:	4b06      	ldr	r3, [pc, #24]	; (8001658 <HAL_MspInit+0x44>)
 8001640:	69db      	ldr	r3, [r3, #28]
 8001642:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001646:	603b      	str	r3, [r7, #0]
 8001648:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800164a:	2007      	movs	r0, #7
 800164c:	f000 fa8a 	bl	8001b64 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001650:	bf00      	nop
 8001652:	3708      	adds	r7, #8
 8001654:	46bd      	mov	sp, r7
 8001656:	bd80      	pop	{r7, pc}
 8001658:	40021000 	.word	0x40021000

0800165c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	b08a      	sub	sp, #40	; 0x28
 8001660:	af00      	add	r7, sp, #0
 8001662:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001664:	f107 0314 	add.w	r3, r7, #20
 8001668:	2200      	movs	r2, #0
 800166a:	601a      	str	r2, [r3, #0]
 800166c:	605a      	str	r2, [r3, #4]
 800166e:	609a      	str	r2, [r3, #8]
 8001670:	60da      	str	r2, [r3, #12]
 8001672:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	4a17      	ldr	r2, [pc, #92]	; (80016d8 <HAL_I2C_MspInit+0x7c>)
 800167a:	4293      	cmp	r3, r2
 800167c:	d127      	bne.n	80016ce <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800167e:	4b17      	ldr	r3, [pc, #92]	; (80016dc <HAL_I2C_MspInit+0x80>)
 8001680:	695b      	ldr	r3, [r3, #20]
 8001682:	4a16      	ldr	r2, [pc, #88]	; (80016dc <HAL_I2C_MspInit+0x80>)
 8001684:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001688:	6153      	str	r3, [r2, #20]
 800168a:	4b14      	ldr	r3, [pc, #80]	; (80016dc <HAL_I2C_MspInit+0x80>)
 800168c:	695b      	ldr	r3, [r3, #20]
 800168e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001692:	613b      	str	r3, [r7, #16]
 8001694:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C1_SCL_Pin|I2C1_SDA_Pin;
 8001696:	23c0      	movs	r3, #192	; 0xc0
 8001698:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800169a:	2312      	movs	r3, #18
 800169c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800169e:	2301      	movs	r3, #1
 80016a0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80016a2:	2303      	movs	r3, #3
 80016a4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80016a6:	2304      	movs	r3, #4
 80016a8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016aa:	f107 0314 	add.w	r3, r7, #20
 80016ae:	4619      	mov	r1, r3
 80016b0:	480b      	ldr	r0, [pc, #44]	; (80016e0 <HAL_I2C_MspInit+0x84>)
 80016b2:	f000 fa99 	bl	8001be8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80016b6:	4b09      	ldr	r3, [pc, #36]	; (80016dc <HAL_I2C_MspInit+0x80>)
 80016b8:	69db      	ldr	r3, [r3, #28]
 80016ba:	4a08      	ldr	r2, [pc, #32]	; (80016dc <HAL_I2C_MspInit+0x80>)
 80016bc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80016c0:	61d3      	str	r3, [r2, #28]
 80016c2:	4b06      	ldr	r3, [pc, #24]	; (80016dc <HAL_I2C_MspInit+0x80>)
 80016c4:	69db      	ldr	r3, [r3, #28]
 80016c6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80016ca:	60fb      	str	r3, [r7, #12]
 80016cc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80016ce:	bf00      	nop
 80016d0:	3728      	adds	r7, #40	; 0x28
 80016d2:	46bd      	mov	sp, r7
 80016d4:	bd80      	pop	{r7, pc}
 80016d6:	bf00      	nop
 80016d8:	40005400 	.word	0x40005400
 80016dc:	40021000 	.word	0x40021000
 80016e0:	48000400 	.word	0x48000400

080016e4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	b08a      	sub	sp, #40	; 0x28
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016ec:	f107 0314 	add.w	r3, r7, #20
 80016f0:	2200      	movs	r2, #0
 80016f2:	601a      	str	r2, [r3, #0]
 80016f4:	605a      	str	r2, [r3, #4]
 80016f6:	609a      	str	r2, [r3, #8]
 80016f8:	60da      	str	r2, [r3, #12]
 80016fa:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	4a17      	ldr	r2, [pc, #92]	; (8001760 <HAL_SPI_MspInit+0x7c>)
 8001702:	4293      	cmp	r3, r2
 8001704:	d128      	bne.n	8001758 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001706:	4b17      	ldr	r3, [pc, #92]	; (8001764 <HAL_SPI_MspInit+0x80>)
 8001708:	699b      	ldr	r3, [r3, #24]
 800170a:	4a16      	ldr	r2, [pc, #88]	; (8001764 <HAL_SPI_MspInit+0x80>)
 800170c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001710:	6193      	str	r3, [r2, #24]
 8001712:	4b14      	ldr	r3, [pc, #80]	; (8001764 <HAL_SPI_MspInit+0x80>)
 8001714:	699b      	ldr	r3, [r3, #24]
 8001716:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800171a:	613b      	str	r3, [r7, #16]
 800171c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800171e:	4b11      	ldr	r3, [pc, #68]	; (8001764 <HAL_SPI_MspInit+0x80>)
 8001720:	695b      	ldr	r3, [r3, #20]
 8001722:	4a10      	ldr	r2, [pc, #64]	; (8001764 <HAL_SPI_MspInit+0x80>)
 8001724:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001728:	6153      	str	r3, [r2, #20]
 800172a:	4b0e      	ldr	r3, [pc, #56]	; (8001764 <HAL_SPI_MspInit+0x80>)
 800172c:	695b      	ldr	r3, [r3, #20]
 800172e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001732:	60fb      	str	r3, [r7, #12]
 8001734:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MISOA7_Pin;
 8001736:	23e0      	movs	r3, #224	; 0xe0
 8001738:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800173a:	2302      	movs	r3, #2
 800173c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800173e:	2300      	movs	r3, #0
 8001740:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001742:	2303      	movs	r3, #3
 8001744:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001746:	2305      	movs	r3, #5
 8001748:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800174a:	f107 0314 	add.w	r3, r7, #20
 800174e:	4619      	mov	r1, r3
 8001750:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001754:	f000 fa48 	bl	8001be8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001758:	bf00      	nop
 800175a:	3728      	adds	r7, #40	; 0x28
 800175c:	46bd      	mov	sp, r7
 800175e:	bd80      	pop	{r7, pc}
 8001760:	40013000 	.word	0x40013000
 8001764:	40021000 	.word	0x40021000

08001768 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001768:	b480      	push	{r7}
 800176a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800176c:	e7fe      	b.n	800176c <NMI_Handler+0x4>

0800176e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800176e:	b480      	push	{r7}
 8001770:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001772:	e7fe      	b.n	8001772 <HardFault_Handler+0x4>

08001774 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001774:	b480      	push	{r7}
 8001776:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001778:	e7fe      	b.n	8001778 <MemManage_Handler+0x4>

0800177a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800177a:	b480      	push	{r7}
 800177c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800177e:	e7fe      	b.n	800177e <BusFault_Handler+0x4>

08001780 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001780:	b480      	push	{r7}
 8001782:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001784:	e7fe      	b.n	8001784 <UsageFault_Handler+0x4>

08001786 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001786:	b480      	push	{r7}
 8001788:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800178a:	bf00      	nop
 800178c:	46bd      	mov	sp, r7
 800178e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001792:	4770      	bx	lr

08001794 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001794:	b480      	push	{r7}
 8001796:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001798:	bf00      	nop
 800179a:	46bd      	mov	sp, r7
 800179c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a0:	4770      	bx	lr

080017a2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80017a2:	b480      	push	{r7}
 80017a4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80017a6:	bf00      	nop
 80017a8:	46bd      	mov	sp, r7
 80017aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ae:	4770      	bx	lr

080017b0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80017b0:	b580      	push	{r7, lr}
 80017b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80017b4:	f000 f8c4 	bl	8001940 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80017b8:	bf00      	nop
 80017ba:	bd80      	pop	{r7, pc}

080017bc <USB_LP_CAN_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN_RX0 interrupts.
  */
void USB_LP_CAN_RX0_IRQHandler(void)
{
 80017bc:	b580      	push	{r7, lr}
 80017be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80017c0:	4802      	ldr	r0, [pc, #8]	; (80017cc <USB_LP_CAN_RX0_IRQHandler+0x10>)
 80017c2:	f001 fa18 	bl	8002bf6 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN_RX0_IRQn 1 */
}
 80017c6:	bf00      	nop
 80017c8:	bd80      	pop	{r7, pc}
 80017ca:	bf00      	nop
 80017cc:	200012e0 	.word	0x200012e0

080017d0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	b086      	sub	sp, #24
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80017d8:	4a14      	ldr	r2, [pc, #80]	; (800182c <_sbrk+0x5c>)
 80017da:	4b15      	ldr	r3, [pc, #84]	; (8001830 <_sbrk+0x60>)
 80017dc:	1ad3      	subs	r3, r2, r3
 80017de:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80017e0:	697b      	ldr	r3, [r7, #20]
 80017e2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80017e4:	4b13      	ldr	r3, [pc, #76]	; (8001834 <_sbrk+0x64>)
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d102      	bne.n	80017f2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80017ec:	4b11      	ldr	r3, [pc, #68]	; (8001834 <_sbrk+0x64>)
 80017ee:	4a12      	ldr	r2, [pc, #72]	; (8001838 <_sbrk+0x68>)
 80017f0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80017f2:	4b10      	ldr	r3, [pc, #64]	; (8001834 <_sbrk+0x64>)
 80017f4:	681a      	ldr	r2, [r3, #0]
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	4413      	add	r3, r2
 80017fa:	693a      	ldr	r2, [r7, #16]
 80017fc:	429a      	cmp	r2, r3
 80017fe:	d207      	bcs.n	8001810 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001800:	f007 ffee 	bl	80097e0 <__errno>
 8001804:	4602      	mov	r2, r0
 8001806:	230c      	movs	r3, #12
 8001808:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 800180a:	f04f 33ff 	mov.w	r3, #4294967295
 800180e:	e009      	b.n	8001824 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001810:	4b08      	ldr	r3, [pc, #32]	; (8001834 <_sbrk+0x64>)
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001816:	4b07      	ldr	r3, [pc, #28]	; (8001834 <_sbrk+0x64>)
 8001818:	681a      	ldr	r2, [r3, #0]
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	4413      	add	r3, r2
 800181e:	4a05      	ldr	r2, [pc, #20]	; (8001834 <_sbrk+0x64>)
 8001820:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001822:	68fb      	ldr	r3, [r7, #12]
}
 8001824:	4618      	mov	r0, r3
 8001826:	3718      	adds	r7, #24
 8001828:	46bd      	mov	sp, r7
 800182a:	bd80      	pop	{r7, pc}
 800182c:	2000a000 	.word	0x2000a000
 8001830:	00000400 	.word	0x00000400
 8001834:	20000368 	.word	0x20000368
 8001838:	200015d0 	.word	0x200015d0

0800183c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800183c:	b480      	push	{r7}
 800183e:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001840:	4b06      	ldr	r3, [pc, #24]	; (800185c <SystemInit+0x20>)
 8001842:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001846:	4a05      	ldr	r2, [pc, #20]	; (800185c <SystemInit+0x20>)
 8001848:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800184c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001850:	bf00      	nop
 8001852:	46bd      	mov	sp, r7
 8001854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001858:	4770      	bx	lr
 800185a:	bf00      	nop
 800185c:	e000ed00 	.word	0xe000ed00

08001860 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001860:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001898 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001864:	480d      	ldr	r0, [pc, #52]	; (800189c <LoopForever+0x6>)
  ldr r1, =_edata
 8001866:	490e      	ldr	r1, [pc, #56]	; (80018a0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001868:	4a0e      	ldr	r2, [pc, #56]	; (80018a4 <LoopForever+0xe>)
  movs r3, #0
 800186a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800186c:	e002      	b.n	8001874 <LoopCopyDataInit>

0800186e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800186e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001870:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001872:	3304      	adds	r3, #4

08001874 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001874:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001876:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001878:	d3f9      	bcc.n	800186e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800187a:	4a0b      	ldr	r2, [pc, #44]	; (80018a8 <LoopForever+0x12>)
  ldr r4, =_ebss
 800187c:	4c0b      	ldr	r4, [pc, #44]	; (80018ac <LoopForever+0x16>)
  movs r3, #0
 800187e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001880:	e001      	b.n	8001886 <LoopFillZerobss>

08001882 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001882:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001884:	3204      	adds	r2, #4

08001886 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001886:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001888:	d3fb      	bcc.n	8001882 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800188a:	f7ff ffd7 	bl	800183c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800188e:	f007 ffad 	bl	80097ec <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001892:	f7ff fa99 	bl	8000dc8 <main>

08001896 <LoopForever>:

LoopForever:
    b LoopForever
 8001896:	e7fe      	b.n	8001896 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001898:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 800189c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80018a0:	2000034c 	.word	0x2000034c
  ldr r2, =_sidata
 80018a4:	0800c148 	.word	0x0800c148
  ldr r2, =_sbss
 80018a8:	2000034c 	.word	0x2000034c
  ldr r4, =_ebss
 80018ac:	200015d0 	.word	0x200015d0

080018b0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80018b0:	e7fe      	b.n	80018b0 <ADC1_2_IRQHandler>
	...

080018b4 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80018b8:	4b08      	ldr	r3, [pc, #32]	; (80018dc <HAL_Init+0x28>)
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	4a07      	ldr	r2, [pc, #28]	; (80018dc <HAL_Init+0x28>)
 80018be:	f043 0310 	orr.w	r3, r3, #16
 80018c2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80018c4:	2003      	movs	r0, #3
 80018c6:	f000 f94d 	bl	8001b64 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80018ca:	2000      	movs	r0, #0
 80018cc:	f000 f808 	bl	80018e0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80018d0:	f7ff fea0 	bl	8001614 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80018d4:	2300      	movs	r3, #0
}
 80018d6:	4618      	mov	r0, r3
 80018d8:	bd80      	pop	{r7, pc}
 80018da:	bf00      	nop
 80018dc:	40022000 	.word	0x40022000

080018e0 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80018e0:	b580      	push	{r7, lr}
 80018e2:	b082      	sub	sp, #8
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80018e8:	4b12      	ldr	r3, [pc, #72]	; (8001934 <HAL_InitTick+0x54>)
 80018ea:	681a      	ldr	r2, [r3, #0]
 80018ec:	4b12      	ldr	r3, [pc, #72]	; (8001938 <HAL_InitTick+0x58>)
 80018ee:	781b      	ldrb	r3, [r3, #0]
 80018f0:	4619      	mov	r1, r3
 80018f2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80018f6:	fbb3 f3f1 	udiv	r3, r3, r1
 80018fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80018fe:	4618      	mov	r0, r3
 8001900:	f000 f965 	bl	8001bce <HAL_SYSTICK_Config>
 8001904:	4603      	mov	r3, r0
 8001906:	2b00      	cmp	r3, #0
 8001908:	d001      	beq.n	800190e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800190a:	2301      	movs	r3, #1
 800190c:	e00e      	b.n	800192c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	2b0f      	cmp	r3, #15
 8001912:	d80a      	bhi.n	800192a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001914:	2200      	movs	r2, #0
 8001916:	6879      	ldr	r1, [r7, #4]
 8001918:	f04f 30ff 	mov.w	r0, #4294967295
 800191c:	f000 f92d 	bl	8001b7a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001920:	4a06      	ldr	r2, [pc, #24]	; (800193c <HAL_InitTick+0x5c>)
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8001926:	2300      	movs	r3, #0
 8001928:	e000      	b.n	800192c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800192a:	2301      	movs	r3, #1
}
 800192c:	4618      	mov	r0, r3
 800192e:	3708      	adds	r7, #8
 8001930:	46bd      	mov	sp, r7
 8001932:	bd80      	pop	{r7, pc}
 8001934:	20000000 	.word	0x20000000
 8001938:	20000008 	.word	0x20000008
 800193c:	20000004 	.word	0x20000004

08001940 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001940:	b480      	push	{r7}
 8001942:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001944:	4b06      	ldr	r3, [pc, #24]	; (8001960 <HAL_IncTick+0x20>)
 8001946:	781b      	ldrb	r3, [r3, #0]
 8001948:	461a      	mov	r2, r3
 800194a:	4b06      	ldr	r3, [pc, #24]	; (8001964 <HAL_IncTick+0x24>)
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	4413      	add	r3, r2
 8001950:	4a04      	ldr	r2, [pc, #16]	; (8001964 <HAL_IncTick+0x24>)
 8001952:	6013      	str	r3, [r2, #0]
}
 8001954:	bf00      	nop
 8001956:	46bd      	mov	sp, r7
 8001958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195c:	4770      	bx	lr
 800195e:	bf00      	nop
 8001960:	20000008 	.word	0x20000008
 8001964:	20000648 	.word	0x20000648

08001968 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001968:	b480      	push	{r7}
 800196a:	af00      	add	r7, sp, #0
  return uwTick;  
 800196c:	4b03      	ldr	r3, [pc, #12]	; (800197c <HAL_GetTick+0x14>)
 800196e:	681b      	ldr	r3, [r3, #0]
}
 8001970:	4618      	mov	r0, r3
 8001972:	46bd      	mov	sp, r7
 8001974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001978:	4770      	bx	lr
 800197a:	bf00      	nop
 800197c:	20000648 	.word	0x20000648

08001980 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	b084      	sub	sp, #16
 8001984:	af00      	add	r7, sp, #0
 8001986:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001988:	f7ff ffee 	bl	8001968 <HAL_GetTick>
 800198c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001992:	68fb      	ldr	r3, [r7, #12]
 8001994:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001998:	d005      	beq.n	80019a6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800199a:	4b09      	ldr	r3, [pc, #36]	; (80019c0 <HAL_Delay+0x40>)
 800199c:	781b      	ldrb	r3, [r3, #0]
 800199e:	461a      	mov	r2, r3
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	4413      	add	r3, r2
 80019a4:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80019a6:	bf00      	nop
 80019a8:	f7ff ffde 	bl	8001968 <HAL_GetTick>
 80019ac:	4602      	mov	r2, r0
 80019ae:	68bb      	ldr	r3, [r7, #8]
 80019b0:	1ad3      	subs	r3, r2, r3
 80019b2:	68fa      	ldr	r2, [r7, #12]
 80019b4:	429a      	cmp	r2, r3
 80019b6:	d8f7      	bhi.n	80019a8 <HAL_Delay+0x28>
  {
  }
}
 80019b8:	bf00      	nop
 80019ba:	3710      	adds	r7, #16
 80019bc:	46bd      	mov	sp, r7
 80019be:	bd80      	pop	{r7, pc}
 80019c0:	20000008 	.word	0x20000008

080019c4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019c4:	b480      	push	{r7}
 80019c6:	b085      	sub	sp, #20
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	f003 0307 	and.w	r3, r3, #7
 80019d2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80019d4:	4b0c      	ldr	r3, [pc, #48]	; (8001a08 <__NVIC_SetPriorityGrouping+0x44>)
 80019d6:	68db      	ldr	r3, [r3, #12]
 80019d8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80019da:	68ba      	ldr	r2, [r7, #8]
 80019dc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80019e0:	4013      	ands	r3, r2
 80019e2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80019e8:	68bb      	ldr	r3, [r7, #8]
 80019ea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80019ec:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80019f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80019f4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80019f6:	4a04      	ldr	r2, [pc, #16]	; (8001a08 <__NVIC_SetPriorityGrouping+0x44>)
 80019f8:	68bb      	ldr	r3, [r7, #8]
 80019fa:	60d3      	str	r3, [r2, #12]
}
 80019fc:	bf00      	nop
 80019fe:	3714      	adds	r7, #20
 8001a00:	46bd      	mov	sp, r7
 8001a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a06:	4770      	bx	lr
 8001a08:	e000ed00 	.word	0xe000ed00

08001a0c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001a0c:	b480      	push	{r7}
 8001a0e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a10:	4b04      	ldr	r3, [pc, #16]	; (8001a24 <__NVIC_GetPriorityGrouping+0x18>)
 8001a12:	68db      	ldr	r3, [r3, #12]
 8001a14:	0a1b      	lsrs	r3, r3, #8
 8001a16:	f003 0307 	and.w	r3, r3, #7
}
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	46bd      	mov	sp, r7
 8001a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a22:	4770      	bx	lr
 8001a24:	e000ed00 	.word	0xe000ed00

08001a28 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a28:	b480      	push	{r7}
 8001a2a:	b083      	sub	sp, #12
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	4603      	mov	r3, r0
 8001a30:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	db0b      	blt.n	8001a52 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001a3a:	79fb      	ldrb	r3, [r7, #7]
 8001a3c:	f003 021f 	and.w	r2, r3, #31
 8001a40:	4907      	ldr	r1, [pc, #28]	; (8001a60 <__NVIC_EnableIRQ+0x38>)
 8001a42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a46:	095b      	lsrs	r3, r3, #5
 8001a48:	2001      	movs	r0, #1
 8001a4a:	fa00 f202 	lsl.w	r2, r0, r2
 8001a4e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001a52:	bf00      	nop
 8001a54:	370c      	adds	r7, #12
 8001a56:	46bd      	mov	sp, r7
 8001a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5c:	4770      	bx	lr
 8001a5e:	bf00      	nop
 8001a60:	e000e100 	.word	0xe000e100

08001a64 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a64:	b480      	push	{r7}
 8001a66:	b083      	sub	sp, #12
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	4603      	mov	r3, r0
 8001a6c:	6039      	str	r1, [r7, #0]
 8001a6e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a70:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	db0a      	blt.n	8001a8e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a78:	683b      	ldr	r3, [r7, #0]
 8001a7a:	b2da      	uxtb	r2, r3
 8001a7c:	490c      	ldr	r1, [pc, #48]	; (8001ab0 <__NVIC_SetPriority+0x4c>)
 8001a7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a82:	0112      	lsls	r2, r2, #4
 8001a84:	b2d2      	uxtb	r2, r2
 8001a86:	440b      	add	r3, r1
 8001a88:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a8c:	e00a      	b.n	8001aa4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a8e:	683b      	ldr	r3, [r7, #0]
 8001a90:	b2da      	uxtb	r2, r3
 8001a92:	4908      	ldr	r1, [pc, #32]	; (8001ab4 <__NVIC_SetPriority+0x50>)
 8001a94:	79fb      	ldrb	r3, [r7, #7]
 8001a96:	f003 030f 	and.w	r3, r3, #15
 8001a9a:	3b04      	subs	r3, #4
 8001a9c:	0112      	lsls	r2, r2, #4
 8001a9e:	b2d2      	uxtb	r2, r2
 8001aa0:	440b      	add	r3, r1
 8001aa2:	761a      	strb	r2, [r3, #24]
}
 8001aa4:	bf00      	nop
 8001aa6:	370c      	adds	r7, #12
 8001aa8:	46bd      	mov	sp, r7
 8001aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aae:	4770      	bx	lr
 8001ab0:	e000e100 	.word	0xe000e100
 8001ab4:	e000ed00 	.word	0xe000ed00

08001ab8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ab8:	b480      	push	{r7}
 8001aba:	b089      	sub	sp, #36	; 0x24
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	60f8      	str	r0, [r7, #12]
 8001ac0:	60b9      	str	r1, [r7, #8]
 8001ac2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	f003 0307 	and.w	r3, r3, #7
 8001aca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001acc:	69fb      	ldr	r3, [r7, #28]
 8001ace:	f1c3 0307 	rsb	r3, r3, #7
 8001ad2:	2b04      	cmp	r3, #4
 8001ad4:	bf28      	it	cs
 8001ad6:	2304      	movcs	r3, #4
 8001ad8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001ada:	69fb      	ldr	r3, [r7, #28]
 8001adc:	3304      	adds	r3, #4
 8001ade:	2b06      	cmp	r3, #6
 8001ae0:	d902      	bls.n	8001ae8 <NVIC_EncodePriority+0x30>
 8001ae2:	69fb      	ldr	r3, [r7, #28]
 8001ae4:	3b03      	subs	r3, #3
 8001ae6:	e000      	b.n	8001aea <NVIC_EncodePriority+0x32>
 8001ae8:	2300      	movs	r3, #0
 8001aea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001aec:	f04f 32ff 	mov.w	r2, #4294967295
 8001af0:	69bb      	ldr	r3, [r7, #24]
 8001af2:	fa02 f303 	lsl.w	r3, r2, r3
 8001af6:	43da      	mvns	r2, r3
 8001af8:	68bb      	ldr	r3, [r7, #8]
 8001afa:	401a      	ands	r2, r3
 8001afc:	697b      	ldr	r3, [r7, #20]
 8001afe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b00:	f04f 31ff 	mov.w	r1, #4294967295
 8001b04:	697b      	ldr	r3, [r7, #20]
 8001b06:	fa01 f303 	lsl.w	r3, r1, r3
 8001b0a:	43d9      	mvns	r1, r3
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b10:	4313      	orrs	r3, r2
         );
}
 8001b12:	4618      	mov	r0, r3
 8001b14:	3724      	adds	r7, #36	; 0x24
 8001b16:	46bd      	mov	sp, r7
 8001b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1c:	4770      	bx	lr
	...

08001b20 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001b20:	b580      	push	{r7, lr}
 8001b22:	b082      	sub	sp, #8
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	3b01      	subs	r3, #1
 8001b2c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001b30:	d301      	bcc.n	8001b36 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001b32:	2301      	movs	r3, #1
 8001b34:	e00f      	b.n	8001b56 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001b36:	4a0a      	ldr	r2, [pc, #40]	; (8001b60 <SysTick_Config+0x40>)
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	3b01      	subs	r3, #1
 8001b3c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001b3e:	210f      	movs	r1, #15
 8001b40:	f04f 30ff 	mov.w	r0, #4294967295
 8001b44:	f7ff ff8e 	bl	8001a64 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001b48:	4b05      	ldr	r3, [pc, #20]	; (8001b60 <SysTick_Config+0x40>)
 8001b4a:	2200      	movs	r2, #0
 8001b4c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001b4e:	4b04      	ldr	r3, [pc, #16]	; (8001b60 <SysTick_Config+0x40>)
 8001b50:	2207      	movs	r2, #7
 8001b52:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001b54:	2300      	movs	r3, #0
}
 8001b56:	4618      	mov	r0, r3
 8001b58:	3708      	adds	r7, #8
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	bd80      	pop	{r7, pc}
 8001b5e:	bf00      	nop
 8001b60:	e000e010 	.word	0xe000e010

08001b64 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b64:	b580      	push	{r7, lr}
 8001b66:	b082      	sub	sp, #8
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b6c:	6878      	ldr	r0, [r7, #4]
 8001b6e:	f7ff ff29 	bl	80019c4 <__NVIC_SetPriorityGrouping>
}
 8001b72:	bf00      	nop
 8001b74:	3708      	adds	r7, #8
 8001b76:	46bd      	mov	sp, r7
 8001b78:	bd80      	pop	{r7, pc}

08001b7a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b7a:	b580      	push	{r7, lr}
 8001b7c:	b086      	sub	sp, #24
 8001b7e:	af00      	add	r7, sp, #0
 8001b80:	4603      	mov	r3, r0
 8001b82:	60b9      	str	r1, [r7, #8]
 8001b84:	607a      	str	r2, [r7, #4]
 8001b86:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001b88:	2300      	movs	r3, #0
 8001b8a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001b8c:	f7ff ff3e 	bl	8001a0c <__NVIC_GetPriorityGrouping>
 8001b90:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b92:	687a      	ldr	r2, [r7, #4]
 8001b94:	68b9      	ldr	r1, [r7, #8]
 8001b96:	6978      	ldr	r0, [r7, #20]
 8001b98:	f7ff ff8e 	bl	8001ab8 <NVIC_EncodePriority>
 8001b9c:	4602      	mov	r2, r0
 8001b9e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ba2:	4611      	mov	r1, r2
 8001ba4:	4618      	mov	r0, r3
 8001ba6:	f7ff ff5d 	bl	8001a64 <__NVIC_SetPriority>
}
 8001baa:	bf00      	nop
 8001bac:	3718      	adds	r7, #24
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	bd80      	pop	{r7, pc}

08001bb2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001bb2:	b580      	push	{r7, lr}
 8001bb4:	b082      	sub	sp, #8
 8001bb6:	af00      	add	r7, sp, #0
 8001bb8:	4603      	mov	r3, r0
 8001bba:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001bbc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bc0:	4618      	mov	r0, r3
 8001bc2:	f7ff ff31 	bl	8001a28 <__NVIC_EnableIRQ>
}
 8001bc6:	bf00      	nop
 8001bc8:	3708      	adds	r7, #8
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	bd80      	pop	{r7, pc}

08001bce <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001bce:	b580      	push	{r7, lr}
 8001bd0:	b082      	sub	sp, #8
 8001bd2:	af00      	add	r7, sp, #0
 8001bd4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001bd6:	6878      	ldr	r0, [r7, #4]
 8001bd8:	f7ff ffa2 	bl	8001b20 <SysTick_Config>
 8001bdc:	4603      	mov	r3, r0
}
 8001bde:	4618      	mov	r0, r3
 8001be0:	3708      	adds	r7, #8
 8001be2:	46bd      	mov	sp, r7
 8001be4:	bd80      	pop	{r7, pc}
	...

08001be8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001be8:	b480      	push	{r7}
 8001bea:	b087      	sub	sp, #28
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	6078      	str	r0, [r7, #4]
 8001bf0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001bf6:	e154      	b.n	8001ea2 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001bf8:	683b      	ldr	r3, [r7, #0]
 8001bfa:	681a      	ldr	r2, [r3, #0]
 8001bfc:	2101      	movs	r1, #1
 8001bfe:	697b      	ldr	r3, [r7, #20]
 8001c00:	fa01 f303 	lsl.w	r3, r1, r3
 8001c04:	4013      	ands	r3, r2
 8001c06:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	f000 8146 	beq.w	8001e9c <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001c10:	683b      	ldr	r3, [r7, #0]
 8001c12:	685b      	ldr	r3, [r3, #4]
 8001c14:	2b01      	cmp	r3, #1
 8001c16:	d00b      	beq.n	8001c30 <HAL_GPIO_Init+0x48>
 8001c18:	683b      	ldr	r3, [r7, #0]
 8001c1a:	685b      	ldr	r3, [r3, #4]
 8001c1c:	2b02      	cmp	r3, #2
 8001c1e:	d007      	beq.n	8001c30 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001c20:	683b      	ldr	r3, [r7, #0]
 8001c22:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001c24:	2b11      	cmp	r3, #17
 8001c26:	d003      	beq.n	8001c30 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001c28:	683b      	ldr	r3, [r7, #0]
 8001c2a:	685b      	ldr	r3, [r3, #4]
 8001c2c:	2b12      	cmp	r3, #18
 8001c2e:	d130      	bne.n	8001c92 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	689b      	ldr	r3, [r3, #8]
 8001c34:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001c36:	697b      	ldr	r3, [r7, #20]
 8001c38:	005b      	lsls	r3, r3, #1
 8001c3a:	2203      	movs	r2, #3
 8001c3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c40:	43db      	mvns	r3, r3
 8001c42:	693a      	ldr	r2, [r7, #16]
 8001c44:	4013      	ands	r3, r2
 8001c46:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001c48:	683b      	ldr	r3, [r7, #0]
 8001c4a:	68da      	ldr	r2, [r3, #12]
 8001c4c:	697b      	ldr	r3, [r7, #20]
 8001c4e:	005b      	lsls	r3, r3, #1
 8001c50:	fa02 f303 	lsl.w	r3, r2, r3
 8001c54:	693a      	ldr	r2, [r7, #16]
 8001c56:	4313      	orrs	r3, r2
 8001c58:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	693a      	ldr	r2, [r7, #16]
 8001c5e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	685b      	ldr	r3, [r3, #4]
 8001c64:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001c66:	2201      	movs	r2, #1
 8001c68:	697b      	ldr	r3, [r7, #20]
 8001c6a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c6e:	43db      	mvns	r3, r3
 8001c70:	693a      	ldr	r2, [r7, #16]
 8001c72:	4013      	ands	r3, r2
 8001c74:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8001c76:	683b      	ldr	r3, [r7, #0]
 8001c78:	685b      	ldr	r3, [r3, #4]
 8001c7a:	091b      	lsrs	r3, r3, #4
 8001c7c:	f003 0201 	and.w	r2, r3, #1
 8001c80:	697b      	ldr	r3, [r7, #20]
 8001c82:	fa02 f303 	lsl.w	r3, r2, r3
 8001c86:	693a      	ldr	r2, [r7, #16]
 8001c88:	4313      	orrs	r3, r2
 8001c8a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	693a      	ldr	r2, [r7, #16]
 8001c90:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	68db      	ldr	r3, [r3, #12]
 8001c96:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001c98:	697b      	ldr	r3, [r7, #20]
 8001c9a:	005b      	lsls	r3, r3, #1
 8001c9c:	2203      	movs	r2, #3
 8001c9e:	fa02 f303 	lsl.w	r3, r2, r3
 8001ca2:	43db      	mvns	r3, r3
 8001ca4:	693a      	ldr	r2, [r7, #16]
 8001ca6:	4013      	ands	r3, r2
 8001ca8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001caa:	683b      	ldr	r3, [r7, #0]
 8001cac:	689a      	ldr	r2, [r3, #8]
 8001cae:	697b      	ldr	r3, [r7, #20]
 8001cb0:	005b      	lsls	r3, r3, #1
 8001cb2:	fa02 f303 	lsl.w	r3, r2, r3
 8001cb6:	693a      	ldr	r2, [r7, #16]
 8001cb8:	4313      	orrs	r3, r2
 8001cba:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	693a      	ldr	r2, [r7, #16]
 8001cc0:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001cc2:	683b      	ldr	r3, [r7, #0]
 8001cc4:	685b      	ldr	r3, [r3, #4]
 8001cc6:	2b02      	cmp	r3, #2
 8001cc8:	d003      	beq.n	8001cd2 <HAL_GPIO_Init+0xea>
 8001cca:	683b      	ldr	r3, [r7, #0]
 8001ccc:	685b      	ldr	r3, [r3, #4]
 8001cce:	2b12      	cmp	r3, #18
 8001cd0:	d123      	bne.n	8001d1a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001cd2:	697b      	ldr	r3, [r7, #20]
 8001cd4:	08da      	lsrs	r2, r3, #3
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	3208      	adds	r2, #8
 8001cda:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001cde:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001ce0:	697b      	ldr	r3, [r7, #20]
 8001ce2:	f003 0307 	and.w	r3, r3, #7
 8001ce6:	009b      	lsls	r3, r3, #2
 8001ce8:	220f      	movs	r2, #15
 8001cea:	fa02 f303 	lsl.w	r3, r2, r3
 8001cee:	43db      	mvns	r3, r3
 8001cf0:	693a      	ldr	r2, [r7, #16]
 8001cf2:	4013      	ands	r3, r2
 8001cf4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001cf6:	683b      	ldr	r3, [r7, #0]
 8001cf8:	691a      	ldr	r2, [r3, #16]
 8001cfa:	697b      	ldr	r3, [r7, #20]
 8001cfc:	f003 0307 	and.w	r3, r3, #7
 8001d00:	009b      	lsls	r3, r3, #2
 8001d02:	fa02 f303 	lsl.w	r3, r2, r3
 8001d06:	693a      	ldr	r2, [r7, #16]
 8001d08:	4313      	orrs	r3, r2
 8001d0a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001d0c:	697b      	ldr	r3, [r7, #20]
 8001d0e:	08da      	lsrs	r2, r3, #3
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	3208      	adds	r2, #8
 8001d14:	6939      	ldr	r1, [r7, #16]
 8001d16:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001d20:	697b      	ldr	r3, [r7, #20]
 8001d22:	005b      	lsls	r3, r3, #1
 8001d24:	2203      	movs	r2, #3
 8001d26:	fa02 f303 	lsl.w	r3, r2, r3
 8001d2a:	43db      	mvns	r3, r3
 8001d2c:	693a      	ldr	r2, [r7, #16]
 8001d2e:	4013      	ands	r3, r2
 8001d30:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001d32:	683b      	ldr	r3, [r7, #0]
 8001d34:	685b      	ldr	r3, [r3, #4]
 8001d36:	f003 0203 	and.w	r2, r3, #3
 8001d3a:	697b      	ldr	r3, [r7, #20]
 8001d3c:	005b      	lsls	r3, r3, #1
 8001d3e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d42:	693a      	ldr	r2, [r7, #16]
 8001d44:	4313      	orrs	r3, r2
 8001d46:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	693a      	ldr	r2, [r7, #16]
 8001d4c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001d4e:	683b      	ldr	r3, [r7, #0]
 8001d50:	685b      	ldr	r3, [r3, #4]
 8001d52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	f000 80a0 	beq.w	8001e9c <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d5c:	4b58      	ldr	r3, [pc, #352]	; (8001ec0 <HAL_GPIO_Init+0x2d8>)
 8001d5e:	699b      	ldr	r3, [r3, #24]
 8001d60:	4a57      	ldr	r2, [pc, #348]	; (8001ec0 <HAL_GPIO_Init+0x2d8>)
 8001d62:	f043 0301 	orr.w	r3, r3, #1
 8001d66:	6193      	str	r3, [r2, #24]
 8001d68:	4b55      	ldr	r3, [pc, #340]	; (8001ec0 <HAL_GPIO_Init+0x2d8>)
 8001d6a:	699b      	ldr	r3, [r3, #24]
 8001d6c:	f003 0301 	and.w	r3, r3, #1
 8001d70:	60bb      	str	r3, [r7, #8]
 8001d72:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001d74:	4a53      	ldr	r2, [pc, #332]	; (8001ec4 <HAL_GPIO_Init+0x2dc>)
 8001d76:	697b      	ldr	r3, [r7, #20]
 8001d78:	089b      	lsrs	r3, r3, #2
 8001d7a:	3302      	adds	r3, #2
 8001d7c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d80:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001d82:	697b      	ldr	r3, [r7, #20]
 8001d84:	f003 0303 	and.w	r3, r3, #3
 8001d88:	009b      	lsls	r3, r3, #2
 8001d8a:	220f      	movs	r2, #15
 8001d8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d90:	43db      	mvns	r3, r3
 8001d92:	693a      	ldr	r2, [r7, #16]
 8001d94:	4013      	ands	r3, r2
 8001d96:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001d9e:	d019      	beq.n	8001dd4 <HAL_GPIO_Init+0x1ec>
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	4a49      	ldr	r2, [pc, #292]	; (8001ec8 <HAL_GPIO_Init+0x2e0>)
 8001da4:	4293      	cmp	r3, r2
 8001da6:	d013      	beq.n	8001dd0 <HAL_GPIO_Init+0x1e8>
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	4a48      	ldr	r2, [pc, #288]	; (8001ecc <HAL_GPIO_Init+0x2e4>)
 8001dac:	4293      	cmp	r3, r2
 8001dae:	d00d      	beq.n	8001dcc <HAL_GPIO_Init+0x1e4>
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	4a47      	ldr	r2, [pc, #284]	; (8001ed0 <HAL_GPIO_Init+0x2e8>)
 8001db4:	4293      	cmp	r3, r2
 8001db6:	d007      	beq.n	8001dc8 <HAL_GPIO_Init+0x1e0>
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	4a46      	ldr	r2, [pc, #280]	; (8001ed4 <HAL_GPIO_Init+0x2ec>)
 8001dbc:	4293      	cmp	r3, r2
 8001dbe:	d101      	bne.n	8001dc4 <HAL_GPIO_Init+0x1dc>
 8001dc0:	2304      	movs	r3, #4
 8001dc2:	e008      	b.n	8001dd6 <HAL_GPIO_Init+0x1ee>
 8001dc4:	2305      	movs	r3, #5
 8001dc6:	e006      	b.n	8001dd6 <HAL_GPIO_Init+0x1ee>
 8001dc8:	2303      	movs	r3, #3
 8001dca:	e004      	b.n	8001dd6 <HAL_GPIO_Init+0x1ee>
 8001dcc:	2302      	movs	r3, #2
 8001dce:	e002      	b.n	8001dd6 <HAL_GPIO_Init+0x1ee>
 8001dd0:	2301      	movs	r3, #1
 8001dd2:	e000      	b.n	8001dd6 <HAL_GPIO_Init+0x1ee>
 8001dd4:	2300      	movs	r3, #0
 8001dd6:	697a      	ldr	r2, [r7, #20]
 8001dd8:	f002 0203 	and.w	r2, r2, #3
 8001ddc:	0092      	lsls	r2, r2, #2
 8001dde:	4093      	lsls	r3, r2
 8001de0:	693a      	ldr	r2, [r7, #16]
 8001de2:	4313      	orrs	r3, r2
 8001de4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001de6:	4937      	ldr	r1, [pc, #220]	; (8001ec4 <HAL_GPIO_Init+0x2dc>)
 8001de8:	697b      	ldr	r3, [r7, #20]
 8001dea:	089b      	lsrs	r3, r3, #2
 8001dec:	3302      	adds	r3, #2
 8001dee:	693a      	ldr	r2, [r7, #16]
 8001df0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001df4:	4b38      	ldr	r3, [pc, #224]	; (8001ed8 <HAL_GPIO_Init+0x2f0>)
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	43db      	mvns	r3, r3
 8001dfe:	693a      	ldr	r2, [r7, #16]
 8001e00:	4013      	ands	r3, r2
 8001e02:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001e04:	683b      	ldr	r3, [r7, #0]
 8001e06:	685b      	ldr	r3, [r3, #4]
 8001e08:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d003      	beq.n	8001e18 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8001e10:	693a      	ldr	r2, [r7, #16]
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	4313      	orrs	r3, r2
 8001e16:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001e18:	4a2f      	ldr	r2, [pc, #188]	; (8001ed8 <HAL_GPIO_Init+0x2f0>)
 8001e1a:	693b      	ldr	r3, [r7, #16]
 8001e1c:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001e1e:	4b2e      	ldr	r3, [pc, #184]	; (8001ed8 <HAL_GPIO_Init+0x2f0>)
 8001e20:	685b      	ldr	r3, [r3, #4]
 8001e22:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	43db      	mvns	r3, r3
 8001e28:	693a      	ldr	r2, [r7, #16]
 8001e2a:	4013      	ands	r3, r2
 8001e2c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001e2e:	683b      	ldr	r3, [r7, #0]
 8001e30:	685b      	ldr	r3, [r3, #4]
 8001e32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d003      	beq.n	8001e42 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8001e3a:	693a      	ldr	r2, [r7, #16]
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	4313      	orrs	r3, r2
 8001e40:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001e42:	4a25      	ldr	r2, [pc, #148]	; (8001ed8 <HAL_GPIO_Init+0x2f0>)
 8001e44:	693b      	ldr	r3, [r7, #16]
 8001e46:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001e48:	4b23      	ldr	r3, [pc, #140]	; (8001ed8 <HAL_GPIO_Init+0x2f0>)
 8001e4a:	689b      	ldr	r3, [r3, #8]
 8001e4c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	43db      	mvns	r3, r3
 8001e52:	693a      	ldr	r2, [r7, #16]
 8001e54:	4013      	ands	r3, r2
 8001e56:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001e58:	683b      	ldr	r3, [r7, #0]
 8001e5a:	685b      	ldr	r3, [r3, #4]
 8001e5c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d003      	beq.n	8001e6c <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8001e64:	693a      	ldr	r2, [r7, #16]
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	4313      	orrs	r3, r2
 8001e6a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001e6c:	4a1a      	ldr	r2, [pc, #104]	; (8001ed8 <HAL_GPIO_Init+0x2f0>)
 8001e6e:	693b      	ldr	r3, [r7, #16]
 8001e70:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001e72:	4b19      	ldr	r3, [pc, #100]	; (8001ed8 <HAL_GPIO_Init+0x2f0>)
 8001e74:	68db      	ldr	r3, [r3, #12]
 8001e76:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	43db      	mvns	r3, r3
 8001e7c:	693a      	ldr	r2, [r7, #16]
 8001e7e:	4013      	ands	r3, r2
 8001e80:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001e82:	683b      	ldr	r3, [r7, #0]
 8001e84:	685b      	ldr	r3, [r3, #4]
 8001e86:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d003      	beq.n	8001e96 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8001e8e:	693a      	ldr	r2, [r7, #16]
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	4313      	orrs	r3, r2
 8001e94:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001e96:	4a10      	ldr	r2, [pc, #64]	; (8001ed8 <HAL_GPIO_Init+0x2f0>)
 8001e98:	693b      	ldr	r3, [r7, #16]
 8001e9a:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001e9c:	697b      	ldr	r3, [r7, #20]
 8001e9e:	3301      	adds	r3, #1
 8001ea0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001ea2:	683b      	ldr	r3, [r7, #0]
 8001ea4:	681a      	ldr	r2, [r3, #0]
 8001ea6:	697b      	ldr	r3, [r7, #20]
 8001ea8:	fa22 f303 	lsr.w	r3, r2, r3
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	f47f aea3 	bne.w	8001bf8 <HAL_GPIO_Init+0x10>
  }
}
 8001eb2:	bf00      	nop
 8001eb4:	371c      	adds	r7, #28
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ebc:	4770      	bx	lr
 8001ebe:	bf00      	nop
 8001ec0:	40021000 	.word	0x40021000
 8001ec4:	40010000 	.word	0x40010000
 8001ec8:	48000400 	.word	0x48000400
 8001ecc:	48000800 	.word	0x48000800
 8001ed0:	48000c00 	.word	0x48000c00
 8001ed4:	48001000 	.word	0x48001000
 8001ed8:	40010400 	.word	0x40010400

08001edc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001edc:	b480      	push	{r7}
 8001ede:	b083      	sub	sp, #12
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	6078      	str	r0, [r7, #4]
 8001ee4:	460b      	mov	r3, r1
 8001ee6:	807b      	strh	r3, [r7, #2]
 8001ee8:	4613      	mov	r3, r2
 8001eea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001eec:	787b      	ldrb	r3, [r7, #1]
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d003      	beq.n	8001efa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001ef2:	887a      	ldrh	r2, [r7, #2]
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001ef8:	e002      	b.n	8001f00 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001efa:	887a      	ldrh	r2, [r7, #2]
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001f00:	bf00      	nop
 8001f02:	370c      	adds	r7, #12
 8001f04:	46bd      	mov	sp, r7
 8001f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0a:	4770      	bx	lr

08001f0c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	b082      	sub	sp, #8
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d101      	bne.n	8001f1e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001f1a:	2301      	movs	r3, #1
 8001f1c:	e081      	b.n	8002022 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001f24:	b2db      	uxtb	r3, r3
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d106      	bne.n	8001f38 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	2200      	movs	r2, #0
 8001f2e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001f32:	6878      	ldr	r0, [r7, #4]
 8001f34:	f7ff fb92 	bl	800165c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	2224      	movs	r2, #36	; 0x24
 8001f3c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	681a      	ldr	r2, [r3, #0]
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	f022 0201 	bic.w	r2, r2, #1
 8001f4e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	685a      	ldr	r2, [r3, #4]
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001f5c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	689a      	ldr	r2, [r3, #8]
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001f6c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	68db      	ldr	r3, [r3, #12]
 8001f72:	2b01      	cmp	r3, #1
 8001f74:	d107      	bne.n	8001f86 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	689a      	ldr	r2, [r3, #8]
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001f82:	609a      	str	r2, [r3, #8]
 8001f84:	e006      	b.n	8001f94 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	689a      	ldr	r2, [r3, #8]
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8001f92:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	68db      	ldr	r3, [r3, #12]
 8001f98:	2b02      	cmp	r3, #2
 8001f9a:	d104      	bne.n	8001fa6 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001fa4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	685b      	ldr	r3, [r3, #4]
 8001fac:	687a      	ldr	r2, [r7, #4]
 8001fae:	6812      	ldr	r2, [r2, #0]
 8001fb0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001fb4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001fb8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	68da      	ldr	r2, [r3, #12]
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001fc8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	691a      	ldr	r2, [r3, #16]
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	695b      	ldr	r3, [r3, #20]
 8001fd2:	ea42 0103 	orr.w	r1, r2, r3
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	699b      	ldr	r3, [r3, #24]
 8001fda:	021a      	lsls	r2, r3, #8
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	430a      	orrs	r2, r1
 8001fe2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	69d9      	ldr	r1, [r3, #28]
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	6a1a      	ldr	r2, [r3, #32]
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	430a      	orrs	r2, r1
 8001ff2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	681a      	ldr	r2, [r3, #0]
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	f042 0201 	orr.w	r2, r2, #1
 8002002:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	2200      	movs	r2, #0
 8002008:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	2220      	movs	r2, #32
 800200e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	2200      	movs	r2, #0
 8002016:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	2200      	movs	r2, #0
 800201c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002020:	2300      	movs	r3, #0
}
 8002022:	4618      	mov	r0, r3
 8002024:	3708      	adds	r7, #8
 8002026:	46bd      	mov	sp, r7
 8002028:	bd80      	pop	{r7, pc}
	...

0800202c <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800202c:	b580      	push	{r7, lr}
 800202e:	b088      	sub	sp, #32
 8002030:	af02      	add	r7, sp, #8
 8002032:	60f8      	str	r0, [r7, #12]
 8002034:	4608      	mov	r0, r1
 8002036:	4611      	mov	r1, r2
 8002038:	461a      	mov	r2, r3
 800203a:	4603      	mov	r3, r0
 800203c:	817b      	strh	r3, [r7, #10]
 800203e:	460b      	mov	r3, r1
 8002040:	813b      	strh	r3, [r7, #8]
 8002042:	4613      	mov	r3, r2
 8002044:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800204c:	b2db      	uxtb	r3, r3
 800204e:	2b20      	cmp	r3, #32
 8002050:	f040 80f9 	bne.w	8002246 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002054:	6a3b      	ldr	r3, [r7, #32]
 8002056:	2b00      	cmp	r3, #0
 8002058:	d002      	beq.n	8002060 <HAL_I2C_Mem_Write+0x34>
 800205a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800205c:	2b00      	cmp	r3, #0
 800205e:	d105      	bne.n	800206c <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002066:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8002068:	2301      	movs	r3, #1
 800206a:	e0ed      	b.n	8002248 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002072:	2b01      	cmp	r3, #1
 8002074:	d101      	bne.n	800207a <HAL_I2C_Mem_Write+0x4e>
 8002076:	2302      	movs	r3, #2
 8002078:	e0e6      	b.n	8002248 <HAL_I2C_Mem_Write+0x21c>
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	2201      	movs	r2, #1
 800207e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002082:	f7ff fc71 	bl	8001968 <HAL_GetTick>
 8002086:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002088:	697b      	ldr	r3, [r7, #20]
 800208a:	9300      	str	r3, [sp, #0]
 800208c:	2319      	movs	r3, #25
 800208e:	2201      	movs	r2, #1
 8002090:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002094:	68f8      	ldr	r0, [r7, #12]
 8002096:	f000 fac3 	bl	8002620 <I2C_WaitOnFlagUntilTimeout>
 800209a:	4603      	mov	r3, r0
 800209c:	2b00      	cmp	r3, #0
 800209e:	d001      	beq.n	80020a4 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80020a0:	2301      	movs	r3, #1
 80020a2:	e0d1      	b.n	8002248 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	2221      	movs	r2, #33	; 0x21
 80020a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	2240      	movs	r2, #64	; 0x40
 80020b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	2200      	movs	r2, #0
 80020b8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	6a3a      	ldr	r2, [r7, #32]
 80020be:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80020c4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	2200      	movs	r2, #0
 80020ca:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80020cc:	88f8      	ldrh	r0, [r7, #6]
 80020ce:	893a      	ldrh	r2, [r7, #8]
 80020d0:	8979      	ldrh	r1, [r7, #10]
 80020d2:	697b      	ldr	r3, [r7, #20]
 80020d4:	9301      	str	r3, [sp, #4]
 80020d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020d8:	9300      	str	r3, [sp, #0]
 80020da:	4603      	mov	r3, r0
 80020dc:	68f8      	ldr	r0, [r7, #12]
 80020de:	f000 f9d3 	bl	8002488 <I2C_RequestMemoryWrite>
 80020e2:	4603      	mov	r3, r0
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d005      	beq.n	80020f4 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	2200      	movs	r2, #0
 80020ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80020f0:	2301      	movs	r3, #1
 80020f2:	e0a9      	b.n	8002248 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020f8:	b29b      	uxth	r3, r3
 80020fa:	2bff      	cmp	r3, #255	; 0xff
 80020fc:	d90e      	bls.n	800211c <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	22ff      	movs	r2, #255	; 0xff
 8002102:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002108:	b2da      	uxtb	r2, r3
 800210a:	8979      	ldrh	r1, [r7, #10]
 800210c:	2300      	movs	r3, #0
 800210e:	9300      	str	r3, [sp, #0]
 8002110:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002114:	68f8      	ldr	r0, [r7, #12]
 8002116:	f000 fba5 	bl	8002864 <I2C_TransferConfig>
 800211a:	e00f      	b.n	800213c <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002120:	b29a      	uxth	r2, r3
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800212a:	b2da      	uxtb	r2, r3
 800212c:	8979      	ldrh	r1, [r7, #10]
 800212e:	2300      	movs	r3, #0
 8002130:	9300      	str	r3, [sp, #0]
 8002132:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002136:	68f8      	ldr	r0, [r7, #12]
 8002138:	f000 fb94 	bl	8002864 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800213c:	697a      	ldr	r2, [r7, #20]
 800213e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002140:	68f8      	ldr	r0, [r7, #12]
 8002142:	f000 faad 	bl	80026a0 <I2C_WaitOnTXISFlagUntilTimeout>
 8002146:	4603      	mov	r3, r0
 8002148:	2b00      	cmp	r3, #0
 800214a:	d001      	beq.n	8002150 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 800214c:	2301      	movs	r3, #1
 800214e:	e07b      	b.n	8002248 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002154:	781a      	ldrb	r2, [r3, #0]
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002160:	1c5a      	adds	r2, r3, #1
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800216a:	b29b      	uxth	r3, r3
 800216c:	3b01      	subs	r3, #1
 800216e:	b29a      	uxth	r2, r3
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002178:	3b01      	subs	r3, #1
 800217a:	b29a      	uxth	r2, r3
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002184:	b29b      	uxth	r3, r3
 8002186:	2b00      	cmp	r3, #0
 8002188:	d034      	beq.n	80021f4 <HAL_I2C_Mem_Write+0x1c8>
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800218e:	2b00      	cmp	r3, #0
 8002190:	d130      	bne.n	80021f4 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002192:	697b      	ldr	r3, [r7, #20]
 8002194:	9300      	str	r3, [sp, #0]
 8002196:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002198:	2200      	movs	r2, #0
 800219a:	2180      	movs	r1, #128	; 0x80
 800219c:	68f8      	ldr	r0, [r7, #12]
 800219e:	f000 fa3f 	bl	8002620 <I2C_WaitOnFlagUntilTimeout>
 80021a2:	4603      	mov	r3, r0
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d001      	beq.n	80021ac <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80021a8:	2301      	movs	r3, #1
 80021aa:	e04d      	b.n	8002248 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021b0:	b29b      	uxth	r3, r3
 80021b2:	2bff      	cmp	r3, #255	; 0xff
 80021b4:	d90e      	bls.n	80021d4 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	22ff      	movs	r2, #255	; 0xff
 80021ba:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021c0:	b2da      	uxtb	r2, r3
 80021c2:	8979      	ldrh	r1, [r7, #10]
 80021c4:	2300      	movs	r3, #0
 80021c6:	9300      	str	r3, [sp, #0]
 80021c8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80021cc:	68f8      	ldr	r0, [r7, #12]
 80021ce:	f000 fb49 	bl	8002864 <I2C_TransferConfig>
 80021d2:	e00f      	b.n	80021f4 <HAL_I2C_Mem_Write+0x1c8>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021d8:	b29a      	uxth	r2, r3
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021e2:	b2da      	uxtb	r2, r3
 80021e4:	8979      	ldrh	r1, [r7, #10]
 80021e6:	2300      	movs	r3, #0
 80021e8:	9300      	str	r3, [sp, #0]
 80021ea:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80021ee:	68f8      	ldr	r0, [r7, #12]
 80021f0:	f000 fb38 	bl	8002864 <I2C_TransferConfig>
        }
      }

    } while (hi2c->XferCount > 0U);
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021f8:	b29b      	uxth	r3, r3
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d19e      	bne.n	800213c <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80021fe:	697a      	ldr	r2, [r7, #20]
 8002200:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002202:	68f8      	ldr	r0, [r7, #12]
 8002204:	f000 fa8c 	bl	8002720 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002208:	4603      	mov	r3, r0
 800220a:	2b00      	cmp	r3, #0
 800220c:	d001      	beq.n	8002212 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800220e:	2301      	movs	r3, #1
 8002210:	e01a      	b.n	8002248 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	2220      	movs	r2, #32
 8002218:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	6859      	ldr	r1, [r3, #4]
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	681a      	ldr	r2, [r3, #0]
 8002224:	4b0a      	ldr	r3, [pc, #40]	; (8002250 <HAL_I2C_Mem_Write+0x224>)
 8002226:	400b      	ands	r3, r1
 8002228:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	2220      	movs	r2, #32
 800222e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	2200      	movs	r2, #0
 8002236:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	2200      	movs	r2, #0
 800223e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002242:	2300      	movs	r3, #0
 8002244:	e000      	b.n	8002248 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8002246:	2302      	movs	r3, #2
  }
}
 8002248:	4618      	mov	r0, r3
 800224a:	3718      	adds	r7, #24
 800224c:	46bd      	mov	sp, r7
 800224e:	bd80      	pop	{r7, pc}
 8002250:	fe00e800 	.word	0xfe00e800

08002254 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002254:	b580      	push	{r7, lr}
 8002256:	b088      	sub	sp, #32
 8002258:	af02      	add	r7, sp, #8
 800225a:	60f8      	str	r0, [r7, #12]
 800225c:	4608      	mov	r0, r1
 800225e:	4611      	mov	r1, r2
 8002260:	461a      	mov	r2, r3
 8002262:	4603      	mov	r3, r0
 8002264:	817b      	strh	r3, [r7, #10]
 8002266:	460b      	mov	r3, r1
 8002268:	813b      	strh	r3, [r7, #8]
 800226a:	4613      	mov	r3, r2
 800226c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002274:	b2db      	uxtb	r3, r3
 8002276:	2b20      	cmp	r3, #32
 8002278:	f040 80fd 	bne.w	8002476 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 800227c:	6a3b      	ldr	r3, [r7, #32]
 800227e:	2b00      	cmp	r3, #0
 8002280:	d002      	beq.n	8002288 <HAL_I2C_Mem_Read+0x34>
 8002282:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002284:	2b00      	cmp	r3, #0
 8002286:	d105      	bne.n	8002294 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800228e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8002290:	2301      	movs	r3, #1
 8002292:	e0f1      	b.n	8002478 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800229a:	2b01      	cmp	r3, #1
 800229c:	d101      	bne.n	80022a2 <HAL_I2C_Mem_Read+0x4e>
 800229e:	2302      	movs	r3, #2
 80022a0:	e0ea      	b.n	8002478 <HAL_I2C_Mem_Read+0x224>
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	2201      	movs	r2, #1
 80022a6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80022aa:	f7ff fb5d 	bl	8001968 <HAL_GetTick>
 80022ae:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80022b0:	697b      	ldr	r3, [r7, #20]
 80022b2:	9300      	str	r3, [sp, #0]
 80022b4:	2319      	movs	r3, #25
 80022b6:	2201      	movs	r2, #1
 80022b8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80022bc:	68f8      	ldr	r0, [r7, #12]
 80022be:	f000 f9af 	bl	8002620 <I2C_WaitOnFlagUntilTimeout>
 80022c2:	4603      	mov	r3, r0
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d001      	beq.n	80022cc <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80022c8:	2301      	movs	r3, #1
 80022ca:	e0d5      	b.n	8002478 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	2222      	movs	r2, #34	; 0x22
 80022d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	2240      	movs	r2, #64	; 0x40
 80022d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	2200      	movs	r2, #0
 80022e0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	6a3a      	ldr	r2, [r7, #32]
 80022e6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80022ec:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	2200      	movs	r2, #0
 80022f2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80022f4:	88f8      	ldrh	r0, [r7, #6]
 80022f6:	893a      	ldrh	r2, [r7, #8]
 80022f8:	8979      	ldrh	r1, [r7, #10]
 80022fa:	697b      	ldr	r3, [r7, #20]
 80022fc:	9301      	str	r3, [sp, #4]
 80022fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002300:	9300      	str	r3, [sp, #0]
 8002302:	4603      	mov	r3, r0
 8002304:	68f8      	ldr	r0, [r7, #12]
 8002306:	f000 f913 	bl	8002530 <I2C_RequestMemoryRead>
 800230a:	4603      	mov	r3, r0
 800230c:	2b00      	cmp	r3, #0
 800230e:	d005      	beq.n	800231c <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	2200      	movs	r2, #0
 8002314:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8002318:	2301      	movs	r3, #1
 800231a:	e0ad      	b.n	8002478 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002320:	b29b      	uxth	r3, r3
 8002322:	2bff      	cmp	r3, #255	; 0xff
 8002324:	d90e      	bls.n	8002344 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	22ff      	movs	r2, #255	; 0xff
 800232a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002330:	b2da      	uxtb	r2, r3
 8002332:	8979      	ldrh	r1, [r7, #10]
 8002334:	4b52      	ldr	r3, [pc, #328]	; (8002480 <HAL_I2C_Mem_Read+0x22c>)
 8002336:	9300      	str	r3, [sp, #0]
 8002338:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800233c:	68f8      	ldr	r0, [r7, #12]
 800233e:	f000 fa91 	bl	8002864 <I2C_TransferConfig>
 8002342:	e00f      	b.n	8002364 <HAL_I2C_Mem_Read+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002348:	b29a      	uxth	r2, r3
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002352:	b2da      	uxtb	r2, r3
 8002354:	8979      	ldrh	r1, [r7, #10]
 8002356:	4b4a      	ldr	r3, [pc, #296]	; (8002480 <HAL_I2C_Mem_Read+0x22c>)
 8002358:	9300      	str	r3, [sp, #0]
 800235a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800235e:	68f8      	ldr	r0, [r7, #12]
 8002360:	f000 fa80 	bl	8002864 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8002364:	697b      	ldr	r3, [r7, #20]
 8002366:	9300      	str	r3, [sp, #0]
 8002368:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800236a:	2200      	movs	r2, #0
 800236c:	2104      	movs	r1, #4
 800236e:	68f8      	ldr	r0, [r7, #12]
 8002370:	f000 f956 	bl	8002620 <I2C_WaitOnFlagUntilTimeout>
 8002374:	4603      	mov	r3, r0
 8002376:	2b00      	cmp	r3, #0
 8002378:	d001      	beq.n	800237e <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800237a:	2301      	movs	r3, #1
 800237c:	e07c      	b.n	8002478 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002388:	b2d2      	uxtb	r2, r2
 800238a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002390:	1c5a      	adds	r2, r3, #1
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800239a:	3b01      	subs	r3, #1
 800239c:	b29a      	uxth	r2, r3
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023a6:	b29b      	uxth	r3, r3
 80023a8:	3b01      	subs	r3, #1
 80023aa:	b29a      	uxth	r2, r3
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023b4:	b29b      	uxth	r3, r3
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d034      	beq.n	8002424 <HAL_I2C_Mem_Read+0x1d0>
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d130      	bne.n	8002424 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80023c2:	697b      	ldr	r3, [r7, #20]
 80023c4:	9300      	str	r3, [sp, #0]
 80023c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023c8:	2200      	movs	r2, #0
 80023ca:	2180      	movs	r1, #128	; 0x80
 80023cc:	68f8      	ldr	r0, [r7, #12]
 80023ce:	f000 f927 	bl	8002620 <I2C_WaitOnFlagUntilTimeout>
 80023d2:	4603      	mov	r3, r0
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d001      	beq.n	80023dc <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 80023d8:	2301      	movs	r3, #1
 80023da:	e04d      	b.n	8002478 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023e0:	b29b      	uxth	r3, r3
 80023e2:	2bff      	cmp	r3, #255	; 0xff
 80023e4:	d90e      	bls.n	8002404 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	22ff      	movs	r2, #255	; 0xff
 80023ea:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023f0:	b2da      	uxtb	r2, r3
 80023f2:	8979      	ldrh	r1, [r7, #10]
 80023f4:	2300      	movs	r3, #0
 80023f6:	9300      	str	r3, [sp, #0]
 80023f8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80023fc:	68f8      	ldr	r0, [r7, #12]
 80023fe:	f000 fa31 	bl	8002864 <I2C_TransferConfig>
 8002402:	e00f      	b.n	8002424 <HAL_I2C_Mem_Read+0x1d0>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002408:	b29a      	uxth	r2, r3
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002412:	b2da      	uxtb	r2, r3
 8002414:	8979      	ldrh	r1, [r7, #10]
 8002416:	2300      	movs	r3, #0
 8002418:	9300      	str	r3, [sp, #0]
 800241a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800241e:	68f8      	ldr	r0, [r7, #12]
 8002420:	f000 fa20 	bl	8002864 <I2C_TransferConfig>
        }
      }
    } while (hi2c->XferCount > 0U);
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002428:	b29b      	uxth	r3, r3
 800242a:	2b00      	cmp	r3, #0
 800242c:	d19a      	bne.n	8002364 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800242e:	697a      	ldr	r2, [r7, #20]
 8002430:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002432:	68f8      	ldr	r0, [r7, #12]
 8002434:	f000 f974 	bl	8002720 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002438:	4603      	mov	r3, r0
 800243a:	2b00      	cmp	r3, #0
 800243c:	d001      	beq.n	8002442 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800243e:	2301      	movs	r3, #1
 8002440:	e01a      	b.n	8002478 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	2220      	movs	r2, #32
 8002448:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	6859      	ldr	r1, [r3, #4]
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	681a      	ldr	r2, [r3, #0]
 8002454:	4b0b      	ldr	r3, [pc, #44]	; (8002484 <HAL_I2C_Mem_Read+0x230>)
 8002456:	400b      	ands	r3, r1
 8002458:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	2220      	movs	r2, #32
 800245e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	2200      	movs	r2, #0
 8002466:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	2200      	movs	r2, #0
 800246e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002472:	2300      	movs	r3, #0
 8002474:	e000      	b.n	8002478 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8002476:	2302      	movs	r3, #2
  }
}
 8002478:	4618      	mov	r0, r3
 800247a:	3718      	adds	r7, #24
 800247c:	46bd      	mov	sp, r7
 800247e:	bd80      	pop	{r7, pc}
 8002480:	80002400 	.word	0x80002400
 8002484:	fe00e800 	.word	0xfe00e800

08002488 <I2C_RequestMemoryWrite>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                                uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002488:	b580      	push	{r7, lr}
 800248a:	b086      	sub	sp, #24
 800248c:	af02      	add	r7, sp, #8
 800248e:	60f8      	str	r0, [r7, #12]
 8002490:	4608      	mov	r0, r1
 8002492:	4611      	mov	r1, r2
 8002494:	461a      	mov	r2, r3
 8002496:	4603      	mov	r3, r0
 8002498:	817b      	strh	r3, [r7, #10]
 800249a:	460b      	mov	r3, r1
 800249c:	813b      	strh	r3, [r7, #8]
 800249e:	4613      	mov	r3, r2
 80024a0:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80024a2:	88fb      	ldrh	r3, [r7, #6]
 80024a4:	b2da      	uxtb	r2, r3
 80024a6:	8979      	ldrh	r1, [r7, #10]
 80024a8:	4b20      	ldr	r3, [pc, #128]	; (800252c <I2C_RequestMemoryWrite+0xa4>)
 80024aa:	9300      	str	r3, [sp, #0]
 80024ac:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80024b0:	68f8      	ldr	r0, [r7, #12]
 80024b2:	f000 f9d7 	bl	8002864 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80024b6:	69fa      	ldr	r2, [r7, #28]
 80024b8:	69b9      	ldr	r1, [r7, #24]
 80024ba:	68f8      	ldr	r0, [r7, #12]
 80024bc:	f000 f8f0 	bl	80026a0 <I2C_WaitOnTXISFlagUntilTimeout>
 80024c0:	4603      	mov	r3, r0
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d001      	beq.n	80024ca <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80024c6:	2301      	movs	r3, #1
 80024c8:	e02c      	b.n	8002524 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80024ca:	88fb      	ldrh	r3, [r7, #6]
 80024cc:	2b01      	cmp	r3, #1
 80024ce:	d105      	bne.n	80024dc <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80024d0:	893b      	ldrh	r3, [r7, #8]
 80024d2:	b2da      	uxtb	r2, r3
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	629a      	str	r2, [r3, #40]	; 0x28
 80024da:	e015      	b.n	8002508 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80024dc:	893b      	ldrh	r3, [r7, #8]
 80024de:	0a1b      	lsrs	r3, r3, #8
 80024e0:	b29b      	uxth	r3, r3
 80024e2:	b2da      	uxtb	r2, r3
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80024ea:	69fa      	ldr	r2, [r7, #28]
 80024ec:	69b9      	ldr	r1, [r7, #24]
 80024ee:	68f8      	ldr	r0, [r7, #12]
 80024f0:	f000 f8d6 	bl	80026a0 <I2C_WaitOnTXISFlagUntilTimeout>
 80024f4:	4603      	mov	r3, r0
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d001      	beq.n	80024fe <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80024fa:	2301      	movs	r3, #1
 80024fc:	e012      	b.n	8002524 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80024fe:	893b      	ldrh	r3, [r7, #8]
 8002500:	b2da      	uxtb	r2, r3
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8002508:	69fb      	ldr	r3, [r7, #28]
 800250a:	9300      	str	r3, [sp, #0]
 800250c:	69bb      	ldr	r3, [r7, #24]
 800250e:	2200      	movs	r2, #0
 8002510:	2180      	movs	r1, #128	; 0x80
 8002512:	68f8      	ldr	r0, [r7, #12]
 8002514:	f000 f884 	bl	8002620 <I2C_WaitOnFlagUntilTimeout>
 8002518:	4603      	mov	r3, r0
 800251a:	2b00      	cmp	r3, #0
 800251c:	d001      	beq.n	8002522 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800251e:	2301      	movs	r3, #1
 8002520:	e000      	b.n	8002524 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8002522:	2300      	movs	r3, #0
}
 8002524:	4618      	mov	r0, r3
 8002526:	3710      	adds	r7, #16
 8002528:	46bd      	mov	sp, r7
 800252a:	bd80      	pop	{r7, pc}
 800252c:	80002000 	.word	0x80002000

08002530 <I2C_RequestMemoryRead>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                               uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002530:	b580      	push	{r7, lr}
 8002532:	b086      	sub	sp, #24
 8002534:	af02      	add	r7, sp, #8
 8002536:	60f8      	str	r0, [r7, #12]
 8002538:	4608      	mov	r0, r1
 800253a:	4611      	mov	r1, r2
 800253c:	461a      	mov	r2, r3
 800253e:	4603      	mov	r3, r0
 8002540:	817b      	strh	r3, [r7, #10]
 8002542:	460b      	mov	r3, r1
 8002544:	813b      	strh	r3, [r7, #8]
 8002546:	4613      	mov	r3, r2
 8002548:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800254a:	88fb      	ldrh	r3, [r7, #6]
 800254c:	b2da      	uxtb	r2, r3
 800254e:	8979      	ldrh	r1, [r7, #10]
 8002550:	4b20      	ldr	r3, [pc, #128]	; (80025d4 <I2C_RequestMemoryRead+0xa4>)
 8002552:	9300      	str	r3, [sp, #0]
 8002554:	2300      	movs	r3, #0
 8002556:	68f8      	ldr	r0, [r7, #12]
 8002558:	f000 f984 	bl	8002864 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800255c:	69fa      	ldr	r2, [r7, #28]
 800255e:	69b9      	ldr	r1, [r7, #24]
 8002560:	68f8      	ldr	r0, [r7, #12]
 8002562:	f000 f89d 	bl	80026a0 <I2C_WaitOnTXISFlagUntilTimeout>
 8002566:	4603      	mov	r3, r0
 8002568:	2b00      	cmp	r3, #0
 800256a:	d001      	beq.n	8002570 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 800256c:	2301      	movs	r3, #1
 800256e:	e02c      	b.n	80025ca <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002570:	88fb      	ldrh	r3, [r7, #6]
 8002572:	2b01      	cmp	r3, #1
 8002574:	d105      	bne.n	8002582 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002576:	893b      	ldrh	r3, [r7, #8]
 8002578:	b2da      	uxtb	r2, r3
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	629a      	str	r2, [r3, #40]	; 0x28
 8002580:	e015      	b.n	80025ae <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002582:	893b      	ldrh	r3, [r7, #8]
 8002584:	0a1b      	lsrs	r3, r3, #8
 8002586:	b29b      	uxth	r3, r3
 8002588:	b2da      	uxtb	r2, r3
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002590:	69fa      	ldr	r2, [r7, #28]
 8002592:	69b9      	ldr	r1, [r7, #24]
 8002594:	68f8      	ldr	r0, [r7, #12]
 8002596:	f000 f883 	bl	80026a0 <I2C_WaitOnTXISFlagUntilTimeout>
 800259a:	4603      	mov	r3, r0
 800259c:	2b00      	cmp	r3, #0
 800259e:	d001      	beq.n	80025a4 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 80025a0:	2301      	movs	r3, #1
 80025a2:	e012      	b.n	80025ca <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80025a4:	893b      	ldrh	r3, [r7, #8]
 80025a6:	b2da      	uxtb	r2, r3
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80025ae:	69fb      	ldr	r3, [r7, #28]
 80025b0:	9300      	str	r3, [sp, #0]
 80025b2:	69bb      	ldr	r3, [r7, #24]
 80025b4:	2200      	movs	r2, #0
 80025b6:	2140      	movs	r1, #64	; 0x40
 80025b8:	68f8      	ldr	r0, [r7, #12]
 80025ba:	f000 f831 	bl	8002620 <I2C_WaitOnFlagUntilTimeout>
 80025be:	4603      	mov	r3, r0
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d001      	beq.n	80025c8 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 80025c4:	2301      	movs	r3, #1
 80025c6:	e000      	b.n	80025ca <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 80025c8:	2300      	movs	r3, #0
}
 80025ca:	4618      	mov	r0, r3
 80025cc:	3710      	adds	r7, #16
 80025ce:	46bd      	mov	sp, r7
 80025d0:	bd80      	pop	{r7, pc}
 80025d2:	bf00      	nop
 80025d4:	80002000 	.word	0x80002000

080025d8 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80025d8:	b480      	push	{r7}
 80025da:	b083      	sub	sp, #12
 80025dc:	af00      	add	r7, sp, #0
 80025de:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	699b      	ldr	r3, [r3, #24]
 80025e6:	f003 0302 	and.w	r3, r3, #2
 80025ea:	2b02      	cmp	r3, #2
 80025ec:	d103      	bne.n	80025f6 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	2200      	movs	r2, #0
 80025f4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	699b      	ldr	r3, [r3, #24]
 80025fc:	f003 0301 	and.w	r3, r3, #1
 8002600:	2b01      	cmp	r3, #1
 8002602:	d007      	beq.n	8002614 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	699a      	ldr	r2, [r3, #24]
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	f042 0201 	orr.w	r2, r2, #1
 8002612:	619a      	str	r2, [r3, #24]
  }
}
 8002614:	bf00      	nop
 8002616:	370c      	adds	r7, #12
 8002618:	46bd      	mov	sp, r7
 800261a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800261e:	4770      	bx	lr

08002620 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002620:	b580      	push	{r7, lr}
 8002622:	b084      	sub	sp, #16
 8002624:	af00      	add	r7, sp, #0
 8002626:	60f8      	str	r0, [r7, #12]
 8002628:	60b9      	str	r1, [r7, #8]
 800262a:	603b      	str	r3, [r7, #0]
 800262c:	4613      	mov	r3, r2
 800262e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002630:	e022      	b.n	8002678 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002632:	683b      	ldr	r3, [r7, #0]
 8002634:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002638:	d01e      	beq.n	8002678 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800263a:	f7ff f995 	bl	8001968 <HAL_GetTick>
 800263e:	4602      	mov	r2, r0
 8002640:	69bb      	ldr	r3, [r7, #24]
 8002642:	1ad3      	subs	r3, r2, r3
 8002644:	683a      	ldr	r2, [r7, #0]
 8002646:	429a      	cmp	r2, r3
 8002648:	d302      	bcc.n	8002650 <I2C_WaitOnFlagUntilTimeout+0x30>
 800264a:	683b      	ldr	r3, [r7, #0]
 800264c:	2b00      	cmp	r3, #0
 800264e:	d113      	bne.n	8002678 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002654:	f043 0220 	orr.w	r2, r3, #32
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	2220      	movs	r2, #32
 8002660:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	2200      	movs	r2, #0
 8002668:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	2200      	movs	r2, #0
 8002670:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8002674:	2301      	movs	r3, #1
 8002676:	e00f      	b.n	8002698 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	699a      	ldr	r2, [r3, #24]
 800267e:	68bb      	ldr	r3, [r7, #8]
 8002680:	4013      	ands	r3, r2
 8002682:	68ba      	ldr	r2, [r7, #8]
 8002684:	429a      	cmp	r2, r3
 8002686:	bf0c      	ite	eq
 8002688:	2301      	moveq	r3, #1
 800268a:	2300      	movne	r3, #0
 800268c:	b2db      	uxtb	r3, r3
 800268e:	461a      	mov	r2, r3
 8002690:	79fb      	ldrb	r3, [r7, #7]
 8002692:	429a      	cmp	r2, r3
 8002694:	d0cd      	beq.n	8002632 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002696:	2300      	movs	r3, #0
}
 8002698:	4618      	mov	r0, r3
 800269a:	3710      	adds	r7, #16
 800269c:	46bd      	mov	sp, r7
 800269e:	bd80      	pop	{r7, pc}

080026a0 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80026a0:	b580      	push	{r7, lr}
 80026a2:	b084      	sub	sp, #16
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	60f8      	str	r0, [r7, #12]
 80026a8:	60b9      	str	r1, [r7, #8]
 80026aa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80026ac:	e02c      	b.n	8002708 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80026ae:	687a      	ldr	r2, [r7, #4]
 80026b0:	68b9      	ldr	r1, [r7, #8]
 80026b2:	68f8      	ldr	r0, [r7, #12]
 80026b4:	f000 f870 	bl	8002798 <I2C_IsAcknowledgeFailed>
 80026b8:	4603      	mov	r3, r0
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d001      	beq.n	80026c2 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80026be:	2301      	movs	r3, #1
 80026c0:	e02a      	b.n	8002718 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80026c2:	68bb      	ldr	r3, [r7, #8]
 80026c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026c8:	d01e      	beq.n	8002708 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80026ca:	f7ff f94d 	bl	8001968 <HAL_GetTick>
 80026ce:	4602      	mov	r2, r0
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	1ad3      	subs	r3, r2, r3
 80026d4:	68ba      	ldr	r2, [r7, #8]
 80026d6:	429a      	cmp	r2, r3
 80026d8:	d302      	bcc.n	80026e0 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80026da:	68bb      	ldr	r3, [r7, #8]
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d113      	bne.n	8002708 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026e4:	f043 0220 	orr.w	r2, r3, #32
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	2220      	movs	r2, #32
 80026f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	2200      	movs	r2, #0
 80026f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	2200      	movs	r2, #0
 8002700:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8002704:	2301      	movs	r3, #1
 8002706:	e007      	b.n	8002718 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	699b      	ldr	r3, [r3, #24]
 800270e:	f003 0302 	and.w	r3, r3, #2
 8002712:	2b02      	cmp	r3, #2
 8002714:	d1cb      	bne.n	80026ae <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002716:	2300      	movs	r3, #0
}
 8002718:	4618      	mov	r0, r3
 800271a:	3710      	adds	r7, #16
 800271c:	46bd      	mov	sp, r7
 800271e:	bd80      	pop	{r7, pc}

08002720 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002720:	b580      	push	{r7, lr}
 8002722:	b084      	sub	sp, #16
 8002724:	af00      	add	r7, sp, #0
 8002726:	60f8      	str	r0, [r7, #12]
 8002728:	60b9      	str	r1, [r7, #8]
 800272a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800272c:	e028      	b.n	8002780 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800272e:	687a      	ldr	r2, [r7, #4]
 8002730:	68b9      	ldr	r1, [r7, #8]
 8002732:	68f8      	ldr	r0, [r7, #12]
 8002734:	f000 f830 	bl	8002798 <I2C_IsAcknowledgeFailed>
 8002738:	4603      	mov	r3, r0
 800273a:	2b00      	cmp	r3, #0
 800273c:	d001      	beq.n	8002742 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800273e:	2301      	movs	r3, #1
 8002740:	e026      	b.n	8002790 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002742:	f7ff f911 	bl	8001968 <HAL_GetTick>
 8002746:	4602      	mov	r2, r0
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	1ad3      	subs	r3, r2, r3
 800274c:	68ba      	ldr	r2, [r7, #8]
 800274e:	429a      	cmp	r2, r3
 8002750:	d302      	bcc.n	8002758 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002752:	68bb      	ldr	r3, [r7, #8]
 8002754:	2b00      	cmp	r3, #0
 8002756:	d113      	bne.n	8002780 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800275c:	f043 0220 	orr.w	r2, r3, #32
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	2220      	movs	r2, #32
 8002768:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	2200      	movs	r2, #0
 8002770:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	2200      	movs	r2, #0
 8002778:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800277c:	2301      	movs	r3, #1
 800277e:	e007      	b.n	8002790 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	699b      	ldr	r3, [r3, #24]
 8002786:	f003 0320 	and.w	r3, r3, #32
 800278a:	2b20      	cmp	r3, #32
 800278c:	d1cf      	bne.n	800272e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800278e:	2300      	movs	r3, #0
}
 8002790:	4618      	mov	r0, r3
 8002792:	3710      	adds	r7, #16
 8002794:	46bd      	mov	sp, r7
 8002796:	bd80      	pop	{r7, pc}

08002798 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002798:	b580      	push	{r7, lr}
 800279a:	b084      	sub	sp, #16
 800279c:	af00      	add	r7, sp, #0
 800279e:	60f8      	str	r0, [r7, #12]
 80027a0:	60b9      	str	r1, [r7, #8]
 80027a2:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	699b      	ldr	r3, [r3, #24]
 80027aa:	f003 0310 	and.w	r3, r3, #16
 80027ae:	2b10      	cmp	r3, #16
 80027b0:	d151      	bne.n	8002856 <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80027b2:	e022      	b.n	80027fa <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80027b4:	68bb      	ldr	r3, [r7, #8]
 80027b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027ba:	d01e      	beq.n	80027fa <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80027bc:	f7ff f8d4 	bl	8001968 <HAL_GetTick>
 80027c0:	4602      	mov	r2, r0
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	1ad3      	subs	r3, r2, r3
 80027c6:	68ba      	ldr	r2, [r7, #8]
 80027c8:	429a      	cmp	r2, r3
 80027ca:	d302      	bcc.n	80027d2 <I2C_IsAcknowledgeFailed+0x3a>
 80027cc:	68bb      	ldr	r3, [r7, #8]
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d113      	bne.n	80027fa <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027d6:	f043 0220 	orr.w	r2, r3, #32
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	2220      	movs	r2, #32
 80027e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	2200      	movs	r2, #0
 80027ea:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	2200      	movs	r2, #0
 80027f2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 80027f6:	2301      	movs	r3, #1
 80027f8:	e02e      	b.n	8002858 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	699b      	ldr	r3, [r3, #24]
 8002800:	f003 0320 	and.w	r3, r3, #32
 8002804:	2b20      	cmp	r3, #32
 8002806:	d1d5      	bne.n	80027b4 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	2210      	movs	r2, #16
 800280e:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	2220      	movs	r2, #32
 8002816:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002818:	68f8      	ldr	r0, [r7, #12]
 800281a:	f7ff fedd 	bl	80025d8 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	6859      	ldr	r1, [r3, #4]
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	681a      	ldr	r2, [r3, #0]
 8002828:	4b0d      	ldr	r3, [pc, #52]	; (8002860 <I2C_IsAcknowledgeFailed+0xc8>)
 800282a:	400b      	ands	r3, r1
 800282c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002832:	f043 0204 	orr.w	r2, r3, #4
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	2220      	movs	r2, #32
 800283e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	2200      	movs	r2, #0
 8002846:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	2200      	movs	r2, #0
 800284e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8002852:	2301      	movs	r3, #1
 8002854:	e000      	b.n	8002858 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8002856:	2300      	movs	r3, #0
}
 8002858:	4618      	mov	r0, r3
 800285a:	3710      	adds	r7, #16
 800285c:	46bd      	mov	sp, r7
 800285e:	bd80      	pop	{r7, pc}
 8002860:	fe00e800 	.word	0xfe00e800

08002864 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002864:	b480      	push	{r7}
 8002866:	b085      	sub	sp, #20
 8002868:	af00      	add	r7, sp, #0
 800286a:	60f8      	str	r0, [r7, #12]
 800286c:	607b      	str	r3, [r7, #4]
 800286e:	460b      	mov	r3, r1
 8002870:	817b      	strh	r3, [r7, #10]
 8002872:	4613      	mov	r3, r2
 8002874:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	685a      	ldr	r2, [r3, #4]
 800287c:	69bb      	ldr	r3, [r7, #24]
 800287e:	0d5b      	lsrs	r3, r3, #21
 8002880:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8002884:	4b0d      	ldr	r3, [pc, #52]	; (80028bc <I2C_TransferConfig+0x58>)
 8002886:	430b      	orrs	r3, r1
 8002888:	43db      	mvns	r3, r3
 800288a:	ea02 0103 	and.w	r1, r2, r3
 800288e:	897b      	ldrh	r3, [r7, #10]
 8002890:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002894:	7a7b      	ldrb	r3, [r7, #9]
 8002896:	041b      	lsls	r3, r3, #16
 8002898:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800289c:	431a      	orrs	r2, r3
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	431a      	orrs	r2, r3
 80028a2:	69bb      	ldr	r3, [r7, #24]
 80028a4:	431a      	orrs	r2, r3
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	430a      	orrs	r2, r1
 80028ac:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 80028ae:	bf00      	nop
 80028b0:	3714      	adds	r7, #20
 80028b2:	46bd      	mov	sp, r7
 80028b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b8:	4770      	bx	lr
 80028ba:	bf00      	nop
 80028bc:	03ff63ff 	.word	0x03ff63ff

080028c0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80028c0:	b480      	push	{r7}
 80028c2:	b083      	sub	sp, #12
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	6078      	str	r0, [r7, #4]
 80028c8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80028d0:	b2db      	uxtb	r3, r3
 80028d2:	2b20      	cmp	r3, #32
 80028d4:	d138      	bne.n	8002948 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80028dc:	2b01      	cmp	r3, #1
 80028de:	d101      	bne.n	80028e4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80028e0:	2302      	movs	r3, #2
 80028e2:	e032      	b.n	800294a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	2201      	movs	r2, #1
 80028e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	2224      	movs	r2, #36	; 0x24
 80028f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	681a      	ldr	r2, [r3, #0]
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	f022 0201 	bic.w	r2, r2, #1
 8002902:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	681a      	ldr	r2, [r3, #0]
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002912:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	6819      	ldr	r1, [r3, #0]
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	683a      	ldr	r2, [r7, #0]
 8002920:	430a      	orrs	r2, r1
 8002922:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	681a      	ldr	r2, [r3, #0]
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	f042 0201 	orr.w	r2, r2, #1
 8002932:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	2220      	movs	r2, #32
 8002938:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	2200      	movs	r2, #0
 8002940:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002944:	2300      	movs	r3, #0
 8002946:	e000      	b.n	800294a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002948:	2302      	movs	r3, #2
  }
}
 800294a:	4618      	mov	r0, r3
 800294c:	370c      	adds	r7, #12
 800294e:	46bd      	mov	sp, r7
 8002950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002954:	4770      	bx	lr

08002956 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002956:	b480      	push	{r7}
 8002958:	b085      	sub	sp, #20
 800295a:	af00      	add	r7, sp, #0
 800295c:	6078      	str	r0, [r7, #4]
 800295e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002966:	b2db      	uxtb	r3, r3
 8002968:	2b20      	cmp	r3, #32
 800296a:	d139      	bne.n	80029e0 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002972:	2b01      	cmp	r3, #1
 8002974:	d101      	bne.n	800297a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002976:	2302      	movs	r3, #2
 8002978:	e033      	b.n	80029e2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	2201      	movs	r2, #1
 800297e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	2224      	movs	r2, #36	; 0x24
 8002986:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	681a      	ldr	r2, [r3, #0]
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	f022 0201 	bic.w	r2, r2, #1
 8002998:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80029a8:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80029aa:	683b      	ldr	r3, [r7, #0]
 80029ac:	021b      	lsls	r3, r3, #8
 80029ae:	68fa      	ldr	r2, [r7, #12]
 80029b0:	4313      	orrs	r3, r2
 80029b2:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	68fa      	ldr	r2, [r7, #12]
 80029ba:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	681a      	ldr	r2, [r3, #0]
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	f042 0201 	orr.w	r2, r2, #1
 80029ca:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	2220      	movs	r2, #32
 80029d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	2200      	movs	r2, #0
 80029d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80029dc:	2300      	movs	r3, #0
 80029de:	e000      	b.n	80029e2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80029e0:	2302      	movs	r3, #2
  }
}
 80029e2:	4618      	mov	r0, r3
 80029e4:	3714      	adds	r7, #20
 80029e6:	46bd      	mov	sp, r7
 80029e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ec:	4770      	bx	lr

080029ee <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80029ee:	b5f0      	push	{r4, r5, r6, r7, lr}
 80029f0:	b08b      	sub	sp, #44	; 0x2c
 80029f2:	af06      	add	r7, sp, #24
 80029f4:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d101      	bne.n	8002a00 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80029fc:	2301      	movs	r3, #1
 80029fe:	e0d0      	b.n	8002ba2 <HAL_PCD_Init+0x1b4>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8002a06:	b2db      	uxtb	r3, r3
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d106      	bne.n	8002a1a <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	2200      	movs	r2, #0
 8002a10:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002a14:	6878      	ldr	r0, [r7, #4]
 8002a16:	f006 fc0d 	bl	8009234 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	2203      	movs	r2, #3
 8002a1e:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	4618      	mov	r0, r3
 8002a28:	f002 fe2e 	bl	8005688 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002a2c:	2300      	movs	r3, #0
 8002a2e:	73fb      	strb	r3, [r7, #15]
 8002a30:	e04c      	b.n	8002acc <HAL_PCD_Init+0xde>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002a32:	7bfb      	ldrb	r3, [r7, #15]
 8002a34:	6879      	ldr	r1, [r7, #4]
 8002a36:	1c5a      	adds	r2, r3, #1
 8002a38:	4613      	mov	r3, r2
 8002a3a:	009b      	lsls	r3, r3, #2
 8002a3c:	4413      	add	r3, r2
 8002a3e:	00db      	lsls	r3, r3, #3
 8002a40:	440b      	add	r3, r1
 8002a42:	3301      	adds	r3, #1
 8002a44:	2201      	movs	r2, #1
 8002a46:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002a48:	7bfb      	ldrb	r3, [r7, #15]
 8002a4a:	6879      	ldr	r1, [r7, #4]
 8002a4c:	1c5a      	adds	r2, r3, #1
 8002a4e:	4613      	mov	r3, r2
 8002a50:	009b      	lsls	r3, r3, #2
 8002a52:	4413      	add	r3, r2
 8002a54:	00db      	lsls	r3, r3, #3
 8002a56:	440b      	add	r3, r1
 8002a58:	7bfa      	ldrb	r2, [r7, #15]
 8002a5a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002a5c:	7bfa      	ldrb	r2, [r7, #15]
 8002a5e:	7bfb      	ldrb	r3, [r7, #15]
 8002a60:	b298      	uxth	r0, r3
 8002a62:	6879      	ldr	r1, [r7, #4]
 8002a64:	4613      	mov	r3, r2
 8002a66:	009b      	lsls	r3, r3, #2
 8002a68:	4413      	add	r3, r2
 8002a6a:	00db      	lsls	r3, r3, #3
 8002a6c:	440b      	add	r3, r1
 8002a6e:	3336      	adds	r3, #54	; 0x36
 8002a70:	4602      	mov	r2, r0
 8002a72:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002a74:	7bfb      	ldrb	r3, [r7, #15]
 8002a76:	6879      	ldr	r1, [r7, #4]
 8002a78:	1c5a      	adds	r2, r3, #1
 8002a7a:	4613      	mov	r3, r2
 8002a7c:	009b      	lsls	r3, r3, #2
 8002a7e:	4413      	add	r3, r2
 8002a80:	00db      	lsls	r3, r3, #3
 8002a82:	440b      	add	r3, r1
 8002a84:	3303      	adds	r3, #3
 8002a86:	2200      	movs	r2, #0
 8002a88:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002a8a:	7bfa      	ldrb	r2, [r7, #15]
 8002a8c:	6879      	ldr	r1, [r7, #4]
 8002a8e:	4613      	mov	r3, r2
 8002a90:	009b      	lsls	r3, r3, #2
 8002a92:	4413      	add	r3, r2
 8002a94:	00db      	lsls	r3, r3, #3
 8002a96:	440b      	add	r3, r1
 8002a98:	3338      	adds	r3, #56	; 0x38
 8002a9a:	2200      	movs	r2, #0
 8002a9c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002a9e:	7bfa      	ldrb	r2, [r7, #15]
 8002aa0:	6879      	ldr	r1, [r7, #4]
 8002aa2:	4613      	mov	r3, r2
 8002aa4:	009b      	lsls	r3, r3, #2
 8002aa6:	4413      	add	r3, r2
 8002aa8:	00db      	lsls	r3, r3, #3
 8002aaa:	440b      	add	r3, r1
 8002aac:	333c      	adds	r3, #60	; 0x3c
 8002aae:	2200      	movs	r2, #0
 8002ab0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002ab2:	7bfa      	ldrb	r2, [r7, #15]
 8002ab4:	6879      	ldr	r1, [r7, #4]
 8002ab6:	4613      	mov	r3, r2
 8002ab8:	009b      	lsls	r3, r3, #2
 8002aba:	4413      	add	r3, r2
 8002abc:	00db      	lsls	r3, r3, #3
 8002abe:	440b      	add	r3, r1
 8002ac0:	3340      	adds	r3, #64	; 0x40
 8002ac2:	2200      	movs	r2, #0
 8002ac4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002ac6:	7bfb      	ldrb	r3, [r7, #15]
 8002ac8:	3301      	adds	r3, #1
 8002aca:	73fb      	strb	r3, [r7, #15]
 8002acc:	7bfa      	ldrb	r2, [r7, #15]
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	685b      	ldr	r3, [r3, #4]
 8002ad2:	429a      	cmp	r2, r3
 8002ad4:	d3ad      	bcc.n	8002a32 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002ad6:	2300      	movs	r3, #0
 8002ad8:	73fb      	strb	r3, [r7, #15]
 8002ada:	e044      	b.n	8002b66 <HAL_PCD_Init+0x178>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002adc:	7bfa      	ldrb	r2, [r7, #15]
 8002ade:	6879      	ldr	r1, [r7, #4]
 8002ae0:	4613      	mov	r3, r2
 8002ae2:	009b      	lsls	r3, r3, #2
 8002ae4:	4413      	add	r3, r2
 8002ae6:	00db      	lsls	r3, r3, #3
 8002ae8:	440b      	add	r3, r1
 8002aea:	f203 1369 	addw	r3, r3, #361	; 0x169
 8002aee:	2200      	movs	r2, #0
 8002af0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002af2:	7bfa      	ldrb	r2, [r7, #15]
 8002af4:	6879      	ldr	r1, [r7, #4]
 8002af6:	4613      	mov	r3, r2
 8002af8:	009b      	lsls	r3, r3, #2
 8002afa:	4413      	add	r3, r2
 8002afc:	00db      	lsls	r3, r3, #3
 8002afe:	440b      	add	r3, r1
 8002b00:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002b04:	7bfa      	ldrb	r2, [r7, #15]
 8002b06:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002b08:	7bfa      	ldrb	r2, [r7, #15]
 8002b0a:	6879      	ldr	r1, [r7, #4]
 8002b0c:	4613      	mov	r3, r2
 8002b0e:	009b      	lsls	r3, r3, #2
 8002b10:	4413      	add	r3, r2
 8002b12:	00db      	lsls	r3, r3, #3
 8002b14:	440b      	add	r3, r1
 8002b16:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8002b1a:	2200      	movs	r2, #0
 8002b1c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002b1e:	7bfa      	ldrb	r2, [r7, #15]
 8002b20:	6879      	ldr	r1, [r7, #4]
 8002b22:	4613      	mov	r3, r2
 8002b24:	009b      	lsls	r3, r3, #2
 8002b26:	4413      	add	r3, r2
 8002b28:	00db      	lsls	r3, r3, #3
 8002b2a:	440b      	add	r3, r1
 8002b2c:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8002b30:	2200      	movs	r2, #0
 8002b32:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002b34:	7bfa      	ldrb	r2, [r7, #15]
 8002b36:	6879      	ldr	r1, [r7, #4]
 8002b38:	4613      	mov	r3, r2
 8002b3a:	009b      	lsls	r3, r3, #2
 8002b3c:	4413      	add	r3, r2
 8002b3e:	00db      	lsls	r3, r3, #3
 8002b40:	440b      	add	r3, r1
 8002b42:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8002b46:	2200      	movs	r2, #0
 8002b48:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002b4a:	7bfa      	ldrb	r2, [r7, #15]
 8002b4c:	6879      	ldr	r1, [r7, #4]
 8002b4e:	4613      	mov	r3, r2
 8002b50:	009b      	lsls	r3, r3, #2
 8002b52:	4413      	add	r3, r2
 8002b54:	00db      	lsls	r3, r3, #3
 8002b56:	440b      	add	r3, r1
 8002b58:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8002b5c:	2200      	movs	r2, #0
 8002b5e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002b60:	7bfb      	ldrb	r3, [r7, #15]
 8002b62:	3301      	adds	r3, #1
 8002b64:	73fb      	strb	r3, [r7, #15]
 8002b66:	7bfa      	ldrb	r2, [r7, #15]
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	685b      	ldr	r3, [r3, #4]
 8002b6c:	429a      	cmp	r2, r3
 8002b6e:	d3b5      	bcc.n	8002adc <HAL_PCD_Init+0xee>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	603b      	str	r3, [r7, #0]
 8002b76:	687e      	ldr	r6, [r7, #4]
 8002b78:	466d      	mov	r5, sp
 8002b7a:	f106 0410 	add.w	r4, r6, #16
 8002b7e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002b80:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002b82:	6823      	ldr	r3, [r4, #0]
 8002b84:	602b      	str	r3, [r5, #0]
 8002b86:	1d33      	adds	r3, r6, #4
 8002b88:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002b8a:	6838      	ldr	r0, [r7, #0]
 8002b8c:	f002 fd97 	bl	80056be <USB_DevInit>

  hpcd->USB_Address = 0U;
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	2200      	movs	r2, #0
 8002b94:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	2201      	movs	r2, #1
 8002b9c:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  return HAL_OK;
 8002ba0:	2300      	movs	r3, #0
}
 8002ba2:	4618      	mov	r0, r3
 8002ba4:	3714      	adds	r7, #20
 8002ba6:	46bd      	mov	sp, r7
 8002ba8:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002baa <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002baa:	b580      	push	{r7, lr}
 8002bac:	b082      	sub	sp, #8
 8002bae:	af00      	add	r7, sp, #0
 8002bb0:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002bb8:	2b01      	cmp	r3, #1
 8002bba:	d101      	bne.n	8002bc0 <HAL_PCD_Start+0x16>
 8002bbc:	2302      	movs	r3, #2
 8002bbe:	e016      	b.n	8002bee <HAL_PCD_Start+0x44>
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	2201      	movs	r2, #1
 8002bc4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	4618      	mov	r0, r3
 8002bce:	f002 fd44 	bl	800565a <USB_EnableGlobalInt>

  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8002bd2:	2101      	movs	r1, #1
 8002bd4:	6878      	ldr	r0, [r7, #4]
 8002bd6:	f006 fdcb 	bl	8009770 <HAL_PCDEx_SetConnectionState>

  (void)USB_DevConnect(hpcd->Instance);
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	4618      	mov	r0, r3
 8002be0:	f004 fd1c 	bl	800761c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	2200      	movs	r2, #0
 8002be8:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8002bec:	2300      	movs	r3, #0
}
 8002bee:	4618      	mov	r0, r3
 8002bf0:	3708      	adds	r7, #8
 8002bf2:	46bd      	mov	sp, r7
 8002bf4:	bd80      	pop	{r7, pc}

08002bf6 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002bf6:	b580      	push	{r7, lr}
 8002bf8:	b082      	sub	sp, #8
 8002bfa:	af00      	add	r7, sp, #0
 8002bfc:	6078      	str	r0, [r7, #4]
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	4618      	mov	r0, r3
 8002c04:	f004 fd15 	bl	8007632 <USB_ReadInterrupts>
 8002c08:	4603      	mov	r3, r0
 8002c0a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002c0e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002c12:	d102      	bne.n	8002c1a <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8002c14:	6878      	ldr	r0, [r7, #4]
 8002c16:	f000 faf6 	bl	8003206 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	4618      	mov	r0, r3
 8002c20:	f004 fd07 	bl	8007632 <USB_ReadInterrupts>
 8002c24:	4603      	mov	r3, r0
 8002c26:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c2a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c2e:	d112      	bne.n	8002c56 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002c38:	b29a      	uxth	r2, r3
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002c42:	b292      	uxth	r2, r2
 8002c44:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8002c48:	6878      	ldr	r0, [r7, #4]
 8002c4a:	f006 fb94 	bl	8009376 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8002c4e:	2100      	movs	r1, #0
 8002c50:	6878      	ldr	r0, [r7, #4]
 8002c52:	f000 f8c7 	bl	8002de4 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	4618      	mov	r0, r3
 8002c5c:	f004 fce9 	bl	8007632 <USB_ReadInterrupts>
 8002c60:	4603      	mov	r3, r0
 8002c62:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002c66:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002c6a:	d10b      	bne.n	8002c84 <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002c74:	b29a      	uxth	r2, r3
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002c7e:	b292      	uxth	r2, r2
 8002c80:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	4618      	mov	r0, r3
 8002c8a:	f004 fcd2 	bl	8007632 <USB_ReadInterrupts>
 8002c8e:	4603      	mov	r3, r0
 8002c90:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002c94:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002c98:	d10b      	bne.n	8002cb2 <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002ca2:	b29a      	uxth	r2, r3
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002cac:	b292      	uxth	r2, r2
 8002cae:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	4618      	mov	r0, r3
 8002cb8:	f004 fcbb 	bl	8007632 <USB_ReadInterrupts>
 8002cbc:	4603      	mov	r3, r0
 8002cbe:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002cc2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002cc6:	d126      	bne.n	8002d16 <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002cd0:	b29a      	uxth	r2, r3
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f022 0204 	bic.w	r2, r2, #4
 8002cda:	b292      	uxth	r2, r2
 8002cdc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002ce8:	b29a      	uxth	r2, r3
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	f022 0208 	bic.w	r2, r2, #8
 8002cf2:	b292      	uxth	r2, r2
 8002cf4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8002cf8:	6878      	ldr	r0, [r7, #4]
 8002cfa:	f006 fb75 	bl	80093e8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002d06:	b29a      	uxth	r2, r3
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002d10:	b292      	uxth	r2, r2
 8002d12:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	4618      	mov	r0, r3
 8002d1c:	f004 fc89 	bl	8007632 <USB_ReadInterrupts>
 8002d20:	4603      	mov	r3, r0
 8002d22:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002d26:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002d2a:	d126      	bne.n	8002d7a <HAL_PCD_IRQHandler+0x184>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002d34:	b29a      	uxth	r2, r3
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	f042 0208 	orr.w	r2, r2, #8
 8002d3e:	b292      	uxth	r2, r2
 8002d40:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002d4c:	b29a      	uxth	r2, r3
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002d56:	b292      	uxth	r2, r2
 8002d58:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002d64:	b29a      	uxth	r2, r3
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	f042 0204 	orr.w	r2, r2, #4
 8002d6e:	b292      	uxth	r2, r2
 8002d70:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8002d74:	6878      	ldr	r0, [r7, #4]
 8002d76:	f006 fb1d 	bl	80093b4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	4618      	mov	r0, r3
 8002d80:	f004 fc57 	bl	8007632 <USB_ReadInterrupts>
 8002d84:	4603      	mov	r3, r0
 8002d86:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002d8a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002d8e:	d10e      	bne.n	8002dae <HAL_PCD_IRQHandler+0x1b8>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002d98:	b29a      	uxth	r2, r3
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002da2:	b292      	uxth	r2, r2
 8002da4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8002da8:	6878      	ldr	r0, [r7, #4]
 8002daa:	f006 fad6 	bl	800935a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	4618      	mov	r0, r3
 8002db4:	f004 fc3d 	bl	8007632 <USB_ReadInterrupts>
 8002db8:	4603      	mov	r3, r0
 8002dba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002dbe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002dc2:	d10b      	bne.n	8002ddc <HAL_PCD_IRQHandler+0x1e6>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002dcc:	b29a      	uxth	r2, r3
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002dd6:	b292      	uxth	r2, r2
 8002dd8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 8002ddc:	bf00      	nop
 8002dde:	3708      	adds	r7, #8
 8002de0:	46bd      	mov	sp, r7
 8002de2:	bd80      	pop	{r7, pc}

08002de4 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002de4:	b580      	push	{r7, lr}
 8002de6:	b082      	sub	sp, #8
 8002de8:	af00      	add	r7, sp, #0
 8002dea:	6078      	str	r0, [r7, #4]
 8002dec:	460b      	mov	r3, r1
 8002dee:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002df6:	2b01      	cmp	r3, #1
 8002df8:	d101      	bne.n	8002dfe <HAL_PCD_SetAddress+0x1a>
 8002dfa:	2302      	movs	r3, #2
 8002dfc:	e013      	b.n	8002e26 <HAL_PCD_SetAddress+0x42>
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	2201      	movs	r2, #1
 8002e02:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	78fa      	ldrb	r2, [r7, #3]
 8002e0a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	78fa      	ldrb	r2, [r7, #3]
 8002e14:	4611      	mov	r1, r2
 8002e16:	4618      	mov	r0, r3
 8002e18:	f004 fbec 	bl	80075f4 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	2200      	movs	r2, #0
 8002e20:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8002e24:	2300      	movs	r3, #0
}
 8002e26:	4618      	mov	r0, r3
 8002e28:	3708      	adds	r7, #8
 8002e2a:	46bd      	mov	sp, r7
 8002e2c:	bd80      	pop	{r7, pc}

08002e2e <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 8002e2e:	b580      	push	{r7, lr}
 8002e30:	b084      	sub	sp, #16
 8002e32:	af00      	add	r7, sp, #0
 8002e34:	6078      	str	r0, [r7, #4]
 8002e36:	4608      	mov	r0, r1
 8002e38:	4611      	mov	r1, r2
 8002e3a:	461a      	mov	r2, r3
 8002e3c:	4603      	mov	r3, r0
 8002e3e:	70fb      	strb	r3, [r7, #3]
 8002e40:	460b      	mov	r3, r1
 8002e42:	803b      	strh	r3, [r7, #0]
 8002e44:	4613      	mov	r3, r2
 8002e46:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002e48:	2300      	movs	r3, #0
 8002e4a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002e4c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	da0e      	bge.n	8002e72 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002e54:	78fb      	ldrb	r3, [r7, #3]
 8002e56:	f003 0307 	and.w	r3, r3, #7
 8002e5a:	1c5a      	adds	r2, r3, #1
 8002e5c:	4613      	mov	r3, r2
 8002e5e:	009b      	lsls	r3, r3, #2
 8002e60:	4413      	add	r3, r2
 8002e62:	00db      	lsls	r3, r3, #3
 8002e64:	687a      	ldr	r2, [r7, #4]
 8002e66:	4413      	add	r3, r2
 8002e68:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	2201      	movs	r2, #1
 8002e6e:	705a      	strb	r2, [r3, #1]
 8002e70:	e00e      	b.n	8002e90 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002e72:	78fb      	ldrb	r3, [r7, #3]
 8002e74:	f003 0207 	and.w	r2, r3, #7
 8002e78:	4613      	mov	r3, r2
 8002e7a:	009b      	lsls	r3, r3, #2
 8002e7c:	4413      	add	r3, r2
 8002e7e:	00db      	lsls	r3, r3, #3
 8002e80:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002e84:	687a      	ldr	r2, [r7, #4]
 8002e86:	4413      	add	r3, r2
 8002e88:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	2200      	movs	r2, #0
 8002e8e:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002e90:	78fb      	ldrb	r3, [r7, #3]
 8002e92:	f003 0307 	and.w	r3, r3, #7
 8002e96:	b2da      	uxtb	r2, r3
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002e9c:	883a      	ldrh	r2, [r7, #0]
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	78ba      	ldrb	r2, [r7, #2]
 8002ea6:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	785b      	ldrb	r3, [r3, #1]
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d004      	beq.n	8002eba <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	781b      	ldrb	r3, [r3, #0]
 8002eb4:	b29a      	uxth	r2, r3
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002eba:	78bb      	ldrb	r3, [r7, #2]
 8002ebc:	2b02      	cmp	r3, #2
 8002ebe:	d102      	bne.n	8002ec6 <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	2200      	movs	r2, #0
 8002ec4:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002ecc:	2b01      	cmp	r3, #1
 8002ece:	d101      	bne.n	8002ed4 <HAL_PCD_EP_Open+0xa6>
 8002ed0:	2302      	movs	r3, #2
 8002ed2:	e00e      	b.n	8002ef2 <HAL_PCD_EP_Open+0xc4>
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	2201      	movs	r2, #1
 8002ed8:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	68f9      	ldr	r1, [r7, #12]
 8002ee2:	4618      	mov	r0, r3
 8002ee4:	f002 fc0c 	bl	8005700 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	2200      	movs	r2, #0
 8002eec:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8002ef0:	7afb      	ldrb	r3, [r7, #11]
}
 8002ef2:	4618      	mov	r0, r3
 8002ef4:	3710      	adds	r7, #16
 8002ef6:	46bd      	mov	sp, r7
 8002ef8:	bd80      	pop	{r7, pc}

08002efa <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002efa:	b580      	push	{r7, lr}
 8002efc:	b084      	sub	sp, #16
 8002efe:	af00      	add	r7, sp, #0
 8002f00:	6078      	str	r0, [r7, #4]
 8002f02:	460b      	mov	r3, r1
 8002f04:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002f06:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	da0e      	bge.n	8002f2c <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002f0e:	78fb      	ldrb	r3, [r7, #3]
 8002f10:	f003 0307 	and.w	r3, r3, #7
 8002f14:	1c5a      	adds	r2, r3, #1
 8002f16:	4613      	mov	r3, r2
 8002f18:	009b      	lsls	r3, r3, #2
 8002f1a:	4413      	add	r3, r2
 8002f1c:	00db      	lsls	r3, r3, #3
 8002f1e:	687a      	ldr	r2, [r7, #4]
 8002f20:	4413      	add	r3, r2
 8002f22:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	2201      	movs	r2, #1
 8002f28:	705a      	strb	r2, [r3, #1]
 8002f2a:	e00e      	b.n	8002f4a <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002f2c:	78fb      	ldrb	r3, [r7, #3]
 8002f2e:	f003 0207 	and.w	r2, r3, #7
 8002f32:	4613      	mov	r3, r2
 8002f34:	009b      	lsls	r3, r3, #2
 8002f36:	4413      	add	r3, r2
 8002f38:	00db      	lsls	r3, r3, #3
 8002f3a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002f3e:	687a      	ldr	r2, [r7, #4]
 8002f40:	4413      	add	r3, r2
 8002f42:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	2200      	movs	r2, #0
 8002f48:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8002f4a:	78fb      	ldrb	r3, [r7, #3]
 8002f4c:	f003 0307 	and.w	r3, r3, #7
 8002f50:	b2da      	uxtb	r2, r3
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002f5c:	2b01      	cmp	r3, #1
 8002f5e:	d101      	bne.n	8002f64 <HAL_PCD_EP_Close+0x6a>
 8002f60:	2302      	movs	r3, #2
 8002f62:	e00e      	b.n	8002f82 <HAL_PCD_EP_Close+0x88>
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	2201      	movs	r2, #1
 8002f68:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	68f9      	ldr	r1, [r7, #12]
 8002f72:	4618      	mov	r0, r3
 8002f74:	f002 ff32 	bl	8005ddc <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	2200      	movs	r2, #0
 8002f7c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 8002f80:	2300      	movs	r3, #0
}
 8002f82:	4618      	mov	r0, r3
 8002f84:	3710      	adds	r7, #16
 8002f86:	46bd      	mov	sp, r7
 8002f88:	bd80      	pop	{r7, pc}

08002f8a <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002f8a:	b580      	push	{r7, lr}
 8002f8c:	b086      	sub	sp, #24
 8002f8e:	af00      	add	r7, sp, #0
 8002f90:	60f8      	str	r0, [r7, #12]
 8002f92:	607a      	str	r2, [r7, #4]
 8002f94:	603b      	str	r3, [r7, #0]
 8002f96:	460b      	mov	r3, r1
 8002f98:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002f9a:	7afb      	ldrb	r3, [r7, #11]
 8002f9c:	f003 0207 	and.w	r2, r3, #7
 8002fa0:	4613      	mov	r3, r2
 8002fa2:	009b      	lsls	r3, r3, #2
 8002fa4:	4413      	add	r3, r2
 8002fa6:	00db      	lsls	r3, r3, #3
 8002fa8:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002fac:	68fa      	ldr	r2, [r7, #12]
 8002fae:	4413      	add	r3, r2
 8002fb0:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002fb2:	697b      	ldr	r3, [r7, #20]
 8002fb4:	687a      	ldr	r2, [r7, #4]
 8002fb6:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8002fb8:	697b      	ldr	r3, [r7, #20]
 8002fba:	683a      	ldr	r2, [r7, #0]
 8002fbc:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002fbe:	697b      	ldr	r3, [r7, #20]
 8002fc0:	2200      	movs	r2, #0
 8002fc2:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8002fc4:	697b      	ldr	r3, [r7, #20]
 8002fc6:	2200      	movs	r2, #0
 8002fc8:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002fca:	7afb      	ldrb	r3, [r7, #11]
 8002fcc:	f003 0307 	and.w	r3, r3, #7
 8002fd0:	b2da      	uxtb	r2, r3
 8002fd2:	697b      	ldr	r3, [r7, #20]
 8002fd4:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002fd6:	7afb      	ldrb	r3, [r7, #11]
 8002fd8:	f003 0307 	and.w	r3, r3, #7
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d106      	bne.n	8002fee <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	6979      	ldr	r1, [r7, #20]
 8002fe6:	4618      	mov	r0, r3
 8002fe8:	f003 f8e5 	bl	80061b6 <USB_EPStartXfer>
 8002fec:	e005      	b.n	8002ffa <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	6979      	ldr	r1, [r7, #20]
 8002ff4:	4618      	mov	r0, r3
 8002ff6:	f003 f8de 	bl	80061b6 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002ffa:	2300      	movs	r3, #0
}
 8002ffc:	4618      	mov	r0, r3
 8002ffe:	3718      	adds	r7, #24
 8003000:	46bd      	mov	sp, r7
 8003002:	bd80      	pop	{r7, pc}

08003004 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003004:	b480      	push	{r7}
 8003006:	b083      	sub	sp, #12
 8003008:	af00      	add	r7, sp, #0
 800300a:	6078      	str	r0, [r7, #4]
 800300c:	460b      	mov	r3, r1
 800300e:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003010:	78fb      	ldrb	r3, [r7, #3]
 8003012:	f003 0207 	and.w	r2, r3, #7
 8003016:	6879      	ldr	r1, [r7, #4]
 8003018:	4613      	mov	r3, r2
 800301a:	009b      	lsls	r3, r3, #2
 800301c:	4413      	add	r3, r2
 800301e:	00db      	lsls	r3, r3, #3
 8003020:	440b      	add	r3, r1
 8003022:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8003026:	681b      	ldr	r3, [r3, #0]
}
 8003028:	4618      	mov	r0, r3
 800302a:	370c      	adds	r7, #12
 800302c:	46bd      	mov	sp, r7
 800302e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003032:	4770      	bx	lr

08003034 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003034:	b580      	push	{r7, lr}
 8003036:	b086      	sub	sp, #24
 8003038:	af00      	add	r7, sp, #0
 800303a:	60f8      	str	r0, [r7, #12]
 800303c:	607a      	str	r2, [r7, #4]
 800303e:	603b      	str	r3, [r7, #0]
 8003040:	460b      	mov	r3, r1
 8003042:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003044:	7afb      	ldrb	r3, [r7, #11]
 8003046:	f003 0307 	and.w	r3, r3, #7
 800304a:	1c5a      	adds	r2, r3, #1
 800304c:	4613      	mov	r3, r2
 800304e:	009b      	lsls	r3, r3, #2
 8003050:	4413      	add	r3, r2
 8003052:	00db      	lsls	r3, r3, #3
 8003054:	68fa      	ldr	r2, [r7, #12]
 8003056:	4413      	add	r3, r2
 8003058:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800305a:	697b      	ldr	r3, [r7, #20]
 800305c:	687a      	ldr	r2, [r7, #4]
 800305e:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8003060:	697b      	ldr	r3, [r7, #20]
 8003062:	683a      	ldr	r2, [r7, #0]
 8003064:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 8003066:	697b      	ldr	r3, [r7, #20]
 8003068:	2201      	movs	r2, #1
 800306a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 800306e:	697b      	ldr	r3, [r7, #20]
 8003070:	683a      	ldr	r2, [r7, #0]
 8003072:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 8003074:	697b      	ldr	r3, [r7, #20]
 8003076:	2200      	movs	r2, #0
 8003078:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 800307a:	697b      	ldr	r3, [r7, #20]
 800307c:	2201      	movs	r2, #1
 800307e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003080:	7afb      	ldrb	r3, [r7, #11]
 8003082:	f003 0307 	and.w	r3, r3, #7
 8003086:	b2da      	uxtb	r2, r3
 8003088:	697b      	ldr	r3, [r7, #20]
 800308a:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800308c:	7afb      	ldrb	r3, [r7, #11]
 800308e:	f003 0307 	and.w	r3, r3, #7
 8003092:	2b00      	cmp	r3, #0
 8003094:	d106      	bne.n	80030a4 <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	6979      	ldr	r1, [r7, #20]
 800309c:	4618      	mov	r0, r3
 800309e:	f003 f88a 	bl	80061b6 <USB_EPStartXfer>
 80030a2:	e005      	b.n	80030b0 <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	6979      	ldr	r1, [r7, #20]
 80030aa:	4618      	mov	r0, r3
 80030ac:	f003 f883 	bl	80061b6 <USB_EPStartXfer>
  }

  return HAL_OK;
 80030b0:	2300      	movs	r3, #0
}
 80030b2:	4618      	mov	r0, r3
 80030b4:	3718      	adds	r7, #24
 80030b6:	46bd      	mov	sp, r7
 80030b8:	bd80      	pop	{r7, pc}

080030ba <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80030ba:	b580      	push	{r7, lr}
 80030bc:	b084      	sub	sp, #16
 80030be:	af00      	add	r7, sp, #0
 80030c0:	6078      	str	r0, [r7, #4]
 80030c2:	460b      	mov	r3, r1
 80030c4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80030c6:	78fb      	ldrb	r3, [r7, #3]
 80030c8:	f003 0207 	and.w	r2, r3, #7
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	685b      	ldr	r3, [r3, #4]
 80030d0:	429a      	cmp	r2, r3
 80030d2:	d901      	bls.n	80030d8 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80030d4:	2301      	movs	r3, #1
 80030d6:	e03e      	b.n	8003156 <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80030d8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80030dc:	2b00      	cmp	r3, #0
 80030de:	da0e      	bge.n	80030fe <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80030e0:	78fb      	ldrb	r3, [r7, #3]
 80030e2:	f003 0307 	and.w	r3, r3, #7
 80030e6:	1c5a      	adds	r2, r3, #1
 80030e8:	4613      	mov	r3, r2
 80030ea:	009b      	lsls	r3, r3, #2
 80030ec:	4413      	add	r3, r2
 80030ee:	00db      	lsls	r3, r3, #3
 80030f0:	687a      	ldr	r2, [r7, #4]
 80030f2:	4413      	add	r3, r2
 80030f4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	2201      	movs	r2, #1
 80030fa:	705a      	strb	r2, [r3, #1]
 80030fc:	e00c      	b.n	8003118 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80030fe:	78fa      	ldrb	r2, [r7, #3]
 8003100:	4613      	mov	r3, r2
 8003102:	009b      	lsls	r3, r3, #2
 8003104:	4413      	add	r3, r2
 8003106:	00db      	lsls	r3, r3, #3
 8003108:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800310c:	687a      	ldr	r2, [r7, #4]
 800310e:	4413      	add	r3, r2
 8003110:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	2200      	movs	r2, #0
 8003116:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	2201      	movs	r2, #1
 800311c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800311e:	78fb      	ldrb	r3, [r7, #3]
 8003120:	f003 0307 	and.w	r3, r3, #7
 8003124:	b2da      	uxtb	r2, r3
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8003130:	2b01      	cmp	r3, #1
 8003132:	d101      	bne.n	8003138 <HAL_PCD_EP_SetStall+0x7e>
 8003134:	2302      	movs	r3, #2
 8003136:	e00e      	b.n	8003156 <HAL_PCD_EP_SetStall+0x9c>
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	2201      	movs	r2, #1
 800313c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	68f9      	ldr	r1, [r7, #12]
 8003146:	4618      	mov	r0, r3
 8003148:	f004 f955 	bl	80073f6 <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	2200      	movs	r2, #0
 8003150:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8003154:	2300      	movs	r3, #0
}
 8003156:	4618      	mov	r0, r3
 8003158:	3710      	adds	r7, #16
 800315a:	46bd      	mov	sp, r7
 800315c:	bd80      	pop	{r7, pc}

0800315e <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800315e:	b580      	push	{r7, lr}
 8003160:	b084      	sub	sp, #16
 8003162:	af00      	add	r7, sp, #0
 8003164:	6078      	str	r0, [r7, #4]
 8003166:	460b      	mov	r3, r1
 8003168:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800316a:	78fb      	ldrb	r3, [r7, #3]
 800316c:	f003 020f 	and.w	r2, r3, #15
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	685b      	ldr	r3, [r3, #4]
 8003174:	429a      	cmp	r2, r3
 8003176:	d901      	bls.n	800317c <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003178:	2301      	movs	r3, #1
 800317a:	e040      	b.n	80031fe <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800317c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003180:	2b00      	cmp	r3, #0
 8003182:	da0e      	bge.n	80031a2 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003184:	78fb      	ldrb	r3, [r7, #3]
 8003186:	f003 0307 	and.w	r3, r3, #7
 800318a:	1c5a      	adds	r2, r3, #1
 800318c:	4613      	mov	r3, r2
 800318e:	009b      	lsls	r3, r3, #2
 8003190:	4413      	add	r3, r2
 8003192:	00db      	lsls	r3, r3, #3
 8003194:	687a      	ldr	r2, [r7, #4]
 8003196:	4413      	add	r3, r2
 8003198:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	2201      	movs	r2, #1
 800319e:	705a      	strb	r2, [r3, #1]
 80031a0:	e00e      	b.n	80031c0 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80031a2:	78fb      	ldrb	r3, [r7, #3]
 80031a4:	f003 0207 	and.w	r2, r3, #7
 80031a8:	4613      	mov	r3, r2
 80031aa:	009b      	lsls	r3, r3, #2
 80031ac:	4413      	add	r3, r2
 80031ae:	00db      	lsls	r3, r3, #3
 80031b0:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80031b4:	687a      	ldr	r2, [r7, #4]
 80031b6:	4413      	add	r3, r2
 80031b8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	2200      	movs	r2, #0
 80031be:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	2200      	movs	r2, #0
 80031c4:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80031c6:	78fb      	ldrb	r3, [r7, #3]
 80031c8:	f003 0307 	and.w	r3, r3, #7
 80031cc:	b2da      	uxtb	r2, r3
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80031d8:	2b01      	cmp	r3, #1
 80031da:	d101      	bne.n	80031e0 <HAL_PCD_EP_ClrStall+0x82>
 80031dc:	2302      	movs	r3, #2
 80031de:	e00e      	b.n	80031fe <HAL_PCD_EP_ClrStall+0xa0>
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	2201      	movs	r2, #1
 80031e4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	68f9      	ldr	r1, [r7, #12]
 80031ee:	4618      	mov	r0, r3
 80031f0:	f004 f952 	bl	8007498 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	2200      	movs	r2, #0
 80031f8:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80031fc:	2300      	movs	r3, #0
}
 80031fe:	4618      	mov	r0, r3
 8003200:	3710      	adds	r7, #16
 8003202:	46bd      	mov	sp, r7
 8003204:	bd80      	pop	{r7, pc}

08003206 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8003206:	b580      	push	{r7, lr}
 8003208:	b08e      	sub	sp, #56	; 0x38
 800320a:	af00      	add	r7, sp, #0
 800320c:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800320e:	e2df      	b.n	80037d0 <PCD_EP_ISR_Handler+0x5ca>
  {
    wIstr = hpcd->Instance->ISTR;
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003218:	85fb      	strh	r3, [r7, #46]	; 0x2e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 800321a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800321c:	b2db      	uxtb	r3, r3
 800321e:	f003 030f 	and.w	r3, r3, #15
 8003222:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 8003226:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800322a:	2b00      	cmp	r3, #0
 800322c:	f040 8158 	bne.w	80034e0 <PCD_EP_ISR_Handler+0x2da>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8003230:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8003232:	f003 0310 	and.w	r3, r3, #16
 8003236:	2b00      	cmp	r3, #0
 8003238:	d152      	bne.n	80032e0 <PCD_EP_ISR_Handler+0xda>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	881b      	ldrh	r3, [r3, #0]
 8003240:	b29b      	uxth	r3, r3
 8003242:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8003246:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800324a:	81fb      	strh	r3, [r7, #14]
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681a      	ldr	r2, [r3, #0]
 8003250:	89fb      	ldrh	r3, [r7, #14]
 8003252:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003256:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800325a:	b29b      	uxth	r3, r3
 800325c:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	3328      	adds	r3, #40	; 0x28
 8003262:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800326c:	b29b      	uxth	r3, r3
 800326e:	461a      	mov	r2, r3
 8003270:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003272:	781b      	ldrb	r3, [r3, #0]
 8003274:	00db      	lsls	r3, r3, #3
 8003276:	4413      	add	r3, r2
 8003278:	3302      	adds	r3, #2
 800327a:	005b      	lsls	r3, r3, #1
 800327c:	687a      	ldr	r2, [r7, #4]
 800327e:	6812      	ldr	r2, [r2, #0]
 8003280:	4413      	add	r3, r2
 8003282:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003286:	881b      	ldrh	r3, [r3, #0]
 8003288:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800328c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800328e:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8003290:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003292:	695a      	ldr	r2, [r3, #20]
 8003294:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003296:	69db      	ldr	r3, [r3, #28]
 8003298:	441a      	add	r2, r3
 800329a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800329c:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 800329e:	2100      	movs	r1, #0
 80032a0:	6878      	ldr	r0, [r7, #4]
 80032a2:	f006 f840 	bl	8009326 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80032ac:	b2db      	uxtb	r3, r3
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	f000 828e 	beq.w	80037d0 <PCD_EP_ISR_Handler+0x5ca>
 80032b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032b6:	699b      	ldr	r3, [r3, #24]
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	f040 8289 	bne.w	80037d0 <PCD_EP_ISR_Handler+0x5ca>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80032c4:	b2db      	uxtb	r3, r3
 80032c6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80032ca:	b2da      	uxtb	r2, r3
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	b292      	uxth	r2, r2
 80032d2:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	2200      	movs	r2, #0
 80032da:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80032de:	e277      	b.n	80037d0 <PCD_EP_ISR_Handler+0x5ca>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80032e6:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	881b      	ldrh	r3, [r3, #0]
 80032ee:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 80032f0:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80032f2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d034      	beq.n	8003364 <PCD_EP_ISR_Handler+0x15e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003302:	b29b      	uxth	r3, r3
 8003304:	461a      	mov	r2, r3
 8003306:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003308:	781b      	ldrb	r3, [r3, #0]
 800330a:	00db      	lsls	r3, r3, #3
 800330c:	4413      	add	r3, r2
 800330e:	3306      	adds	r3, #6
 8003310:	005b      	lsls	r3, r3, #1
 8003312:	687a      	ldr	r2, [r7, #4]
 8003314:	6812      	ldr	r2, [r2, #0]
 8003316:	4413      	add	r3, r2
 8003318:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800331c:	881b      	ldrh	r3, [r3, #0]
 800331e:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003322:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003324:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	6818      	ldr	r0, [r3, #0]
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 8003330:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003332:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8003334:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003336:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8003338:	b29b      	uxth	r3, r3
 800333a:	f004 f9cf 	bl	80076dc <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	881b      	ldrh	r3, [r3, #0]
 8003344:	b29a      	uxth	r2, r3
 8003346:	f640 738f 	movw	r3, #3983	; 0xf8f
 800334a:	4013      	ands	r3, r2
 800334c:	823b      	strh	r3, [r7, #16]
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	8a3a      	ldrh	r2, [r7, #16]
 8003354:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003358:	b292      	uxth	r2, r2
 800335a:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 800335c:	6878      	ldr	r0, [r7, #4]
 800335e:	f005 ffb5 	bl	80092cc <HAL_PCD_SetupStageCallback>
 8003362:	e235      	b.n	80037d0 <PCD_EP_ISR_Handler+0x5ca>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8003364:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8003368:	2b00      	cmp	r3, #0
 800336a:	f280 8231 	bge.w	80037d0 <PCD_EP_ISR_Handler+0x5ca>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	881b      	ldrh	r3, [r3, #0]
 8003374:	b29a      	uxth	r2, r3
 8003376:	f640 738f 	movw	r3, #3983	; 0xf8f
 800337a:	4013      	ands	r3, r2
 800337c:	83bb      	strh	r3, [r7, #28]
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	8bba      	ldrh	r2, [r7, #28]
 8003384:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003388:	b292      	uxth	r2, r2
 800338a:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003394:	b29b      	uxth	r3, r3
 8003396:	461a      	mov	r2, r3
 8003398:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800339a:	781b      	ldrb	r3, [r3, #0]
 800339c:	00db      	lsls	r3, r3, #3
 800339e:	4413      	add	r3, r2
 80033a0:	3306      	adds	r3, #6
 80033a2:	005b      	lsls	r3, r3, #1
 80033a4:	687a      	ldr	r2, [r7, #4]
 80033a6:	6812      	ldr	r2, [r2, #0]
 80033a8:	4413      	add	r3, r2
 80033aa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80033ae:	881b      	ldrh	r3, [r3, #0]
 80033b0:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80033b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033b6:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 80033b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033ba:	69db      	ldr	r3, [r3, #28]
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d019      	beq.n	80033f4 <PCD_EP_ISR_Handler+0x1ee>
 80033c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033c2:	695b      	ldr	r3, [r3, #20]
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d015      	beq.n	80033f4 <PCD_EP_ISR_Handler+0x1ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	6818      	ldr	r0, [r3, #0]
 80033cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033ce:	6959      	ldr	r1, [r3, #20]
 80033d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033d2:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 80033d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033d6:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80033d8:	b29b      	uxth	r3, r3
 80033da:	f004 f97f 	bl	80076dc <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 80033de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033e0:	695a      	ldr	r2, [r3, #20]
 80033e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033e4:	69db      	ldr	r3, [r3, #28]
 80033e6:	441a      	add	r2, r3
 80033e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033ea:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 80033ec:	2100      	movs	r1, #0
 80033ee:	6878      	ldr	r0, [r7, #4]
 80033f0:	f005 ff7e 	bl	80092f0 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	61bb      	str	r3, [r7, #24]
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003402:	b29b      	uxth	r3, r3
 8003404:	461a      	mov	r2, r3
 8003406:	69bb      	ldr	r3, [r7, #24]
 8003408:	4413      	add	r3, r2
 800340a:	61bb      	str	r3, [r7, #24]
 800340c:	69bb      	ldr	r3, [r7, #24]
 800340e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003412:	617b      	str	r3, [r7, #20]
 8003414:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003416:	691b      	ldr	r3, [r3, #16]
 8003418:	2b00      	cmp	r3, #0
 800341a:	d112      	bne.n	8003442 <PCD_EP_ISR_Handler+0x23c>
 800341c:	697b      	ldr	r3, [r7, #20]
 800341e:	881b      	ldrh	r3, [r3, #0]
 8003420:	b29b      	uxth	r3, r3
 8003422:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003426:	b29a      	uxth	r2, r3
 8003428:	697b      	ldr	r3, [r7, #20]
 800342a:	801a      	strh	r2, [r3, #0]
 800342c:	697b      	ldr	r3, [r7, #20]
 800342e:	881b      	ldrh	r3, [r3, #0]
 8003430:	b29b      	uxth	r3, r3
 8003432:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003436:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800343a:	b29a      	uxth	r2, r3
 800343c:	697b      	ldr	r3, [r7, #20]
 800343e:	801a      	strh	r2, [r3, #0]
 8003440:	e02f      	b.n	80034a2 <PCD_EP_ISR_Handler+0x29c>
 8003442:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003444:	691b      	ldr	r3, [r3, #16]
 8003446:	2b3e      	cmp	r3, #62	; 0x3e
 8003448:	d813      	bhi.n	8003472 <PCD_EP_ISR_Handler+0x26c>
 800344a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800344c:	691b      	ldr	r3, [r3, #16]
 800344e:	085b      	lsrs	r3, r3, #1
 8003450:	633b      	str	r3, [r7, #48]	; 0x30
 8003452:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003454:	691b      	ldr	r3, [r3, #16]
 8003456:	f003 0301 	and.w	r3, r3, #1
 800345a:	2b00      	cmp	r3, #0
 800345c:	d002      	beq.n	8003464 <PCD_EP_ISR_Handler+0x25e>
 800345e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003460:	3301      	adds	r3, #1
 8003462:	633b      	str	r3, [r7, #48]	; 0x30
 8003464:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003466:	b29b      	uxth	r3, r3
 8003468:	029b      	lsls	r3, r3, #10
 800346a:	b29a      	uxth	r2, r3
 800346c:	697b      	ldr	r3, [r7, #20]
 800346e:	801a      	strh	r2, [r3, #0]
 8003470:	e017      	b.n	80034a2 <PCD_EP_ISR_Handler+0x29c>
 8003472:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003474:	691b      	ldr	r3, [r3, #16]
 8003476:	095b      	lsrs	r3, r3, #5
 8003478:	633b      	str	r3, [r7, #48]	; 0x30
 800347a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800347c:	691b      	ldr	r3, [r3, #16]
 800347e:	f003 031f 	and.w	r3, r3, #31
 8003482:	2b00      	cmp	r3, #0
 8003484:	d102      	bne.n	800348c <PCD_EP_ISR_Handler+0x286>
 8003486:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003488:	3b01      	subs	r3, #1
 800348a:	633b      	str	r3, [r7, #48]	; 0x30
 800348c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800348e:	b29b      	uxth	r3, r3
 8003490:	029b      	lsls	r3, r3, #10
 8003492:	b29b      	uxth	r3, r3
 8003494:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003498:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800349c:	b29a      	uxth	r2, r3
 800349e:	697b      	ldr	r3, [r7, #20]
 80034a0:	801a      	strh	r2, [r3, #0]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	881b      	ldrh	r3, [r3, #0]
 80034a8:	b29b      	uxth	r3, r3
 80034aa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80034ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80034b2:	827b      	strh	r3, [r7, #18]
 80034b4:	8a7b      	ldrh	r3, [r7, #18]
 80034b6:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80034ba:	827b      	strh	r3, [r7, #18]
 80034bc:	8a7b      	ldrh	r3, [r7, #18]
 80034be:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80034c2:	827b      	strh	r3, [r7, #18]
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681a      	ldr	r2, [r3, #0]
 80034c8:	8a7b      	ldrh	r3, [r7, #18]
 80034ca:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80034ce:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80034d2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80034d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80034da:	b29b      	uxth	r3, r3
 80034dc:	8013      	strh	r3, [r2, #0]
 80034de:	e177      	b.n	80037d0 <PCD_EP_ISR_Handler+0x5ca>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	461a      	mov	r2, r3
 80034e6:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80034ea:	009b      	lsls	r3, r3, #2
 80034ec:	4413      	add	r3, r2
 80034ee:	881b      	ldrh	r3, [r3, #0]
 80034f0:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80034f2:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	f280 80ea 	bge.w	80036d0 <PCD_EP_ISR_Handler+0x4ca>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	461a      	mov	r2, r3
 8003502:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8003506:	009b      	lsls	r3, r3, #2
 8003508:	4413      	add	r3, r2
 800350a:	881b      	ldrh	r3, [r3, #0]
 800350c:	b29a      	uxth	r2, r3
 800350e:	f640 738f 	movw	r3, #3983	; 0xf8f
 8003512:	4013      	ands	r3, r2
 8003514:	853b      	strh	r3, [r7, #40]	; 0x28
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	461a      	mov	r2, r3
 800351c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8003520:	009b      	lsls	r3, r3, #2
 8003522:	4413      	add	r3, r2
 8003524:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8003526:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800352a:	b292      	uxth	r2, r2
 800352c:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 800352e:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8003532:	4613      	mov	r3, r2
 8003534:	009b      	lsls	r3, r3, #2
 8003536:	4413      	add	r3, r2
 8003538:	00db      	lsls	r3, r3, #3
 800353a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800353e:	687a      	ldr	r2, [r7, #4]
 8003540:	4413      	add	r3, r2
 8003542:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8003544:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003546:	7b1b      	ldrb	r3, [r3, #12]
 8003548:	2b00      	cmp	r3, #0
 800354a:	d122      	bne.n	8003592 <PCD_EP_ISR_Handler+0x38c>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003554:	b29b      	uxth	r3, r3
 8003556:	461a      	mov	r2, r3
 8003558:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800355a:	781b      	ldrb	r3, [r3, #0]
 800355c:	00db      	lsls	r3, r3, #3
 800355e:	4413      	add	r3, r2
 8003560:	3306      	adds	r3, #6
 8003562:	005b      	lsls	r3, r3, #1
 8003564:	687a      	ldr	r2, [r7, #4]
 8003566:	6812      	ldr	r2, [r2, #0]
 8003568:	4413      	add	r3, r2
 800356a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800356e:	881b      	ldrh	r3, [r3, #0]
 8003570:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003574:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 8003576:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003578:	2b00      	cmp	r3, #0
 800357a:	f000 8087 	beq.w	800368c <PCD_EP_ISR_Handler+0x486>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	6818      	ldr	r0, [r3, #0]
 8003582:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003584:	6959      	ldr	r1, [r3, #20]
 8003586:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003588:	88da      	ldrh	r2, [r3, #6]
 800358a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800358c:	f004 f8a6 	bl	80076dc <USB_ReadPMA>
 8003590:	e07c      	b.n	800368c <PCD_EP_ISR_Handler+0x486>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8003592:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003594:	78db      	ldrb	r3, [r3, #3]
 8003596:	2b02      	cmp	r3, #2
 8003598:	d108      	bne.n	80035ac <PCD_EP_ISR_Handler+0x3a6>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 800359a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800359c:	461a      	mov	r2, r3
 800359e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80035a0:	6878      	ldr	r0, [r7, #4]
 80035a2:	f000 f923 	bl	80037ec <HAL_PCD_EP_DB_Receive>
 80035a6:	4603      	mov	r3, r0
 80035a8:	86fb      	strh	r3, [r7, #54]	; 0x36
 80035aa:	e06f      	b.n	800368c <PCD_EP_ISR_Handler+0x486>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	461a      	mov	r2, r3
 80035b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035b4:	781b      	ldrb	r3, [r3, #0]
 80035b6:	009b      	lsls	r3, r3, #2
 80035b8:	4413      	add	r3, r2
 80035ba:	881b      	ldrh	r3, [r3, #0]
 80035bc:	b29b      	uxth	r3, r3
 80035be:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80035c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80035c6:	847b      	strh	r3, [r7, #34]	; 0x22
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	461a      	mov	r2, r3
 80035ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035d0:	781b      	ldrb	r3, [r3, #0]
 80035d2:	009b      	lsls	r3, r3, #2
 80035d4:	441a      	add	r2, r3
 80035d6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80035d8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80035dc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80035e0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80035e4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80035e8:	b29b      	uxth	r3, r3
 80035ea:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	461a      	mov	r2, r3
 80035f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035f4:	781b      	ldrb	r3, [r3, #0]
 80035f6:	009b      	lsls	r3, r3, #2
 80035f8:	4413      	add	r3, r2
 80035fa:	881b      	ldrh	r3, [r3, #0]
 80035fc:	b29b      	uxth	r3, r3
 80035fe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003602:	2b00      	cmp	r3, #0
 8003604:	d021      	beq.n	800364a <PCD_EP_ISR_Handler+0x444>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800360e:	b29b      	uxth	r3, r3
 8003610:	461a      	mov	r2, r3
 8003612:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003614:	781b      	ldrb	r3, [r3, #0]
 8003616:	00db      	lsls	r3, r3, #3
 8003618:	4413      	add	r3, r2
 800361a:	3302      	adds	r3, #2
 800361c:	005b      	lsls	r3, r3, #1
 800361e:	687a      	ldr	r2, [r7, #4]
 8003620:	6812      	ldr	r2, [r2, #0]
 8003622:	4413      	add	r3, r2
 8003624:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003628:	881b      	ldrh	r3, [r3, #0]
 800362a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800362e:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8003630:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003632:	2b00      	cmp	r3, #0
 8003634:	d02a      	beq.n	800368c <PCD_EP_ISR_Handler+0x486>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	6818      	ldr	r0, [r3, #0]
 800363a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800363c:	6959      	ldr	r1, [r3, #20]
 800363e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003640:	891a      	ldrh	r2, [r3, #8]
 8003642:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003644:	f004 f84a 	bl	80076dc <USB_ReadPMA>
 8003648:	e020      	b.n	800368c <PCD_EP_ISR_Handler+0x486>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003652:	b29b      	uxth	r3, r3
 8003654:	461a      	mov	r2, r3
 8003656:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003658:	781b      	ldrb	r3, [r3, #0]
 800365a:	00db      	lsls	r3, r3, #3
 800365c:	4413      	add	r3, r2
 800365e:	3306      	adds	r3, #6
 8003660:	005b      	lsls	r3, r3, #1
 8003662:	687a      	ldr	r2, [r7, #4]
 8003664:	6812      	ldr	r2, [r2, #0]
 8003666:	4413      	add	r3, r2
 8003668:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800366c:	881b      	ldrh	r3, [r3, #0]
 800366e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003672:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8003674:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003676:	2b00      	cmp	r3, #0
 8003678:	d008      	beq.n	800368c <PCD_EP_ISR_Handler+0x486>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	6818      	ldr	r0, [r3, #0]
 800367e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003680:	6959      	ldr	r1, [r3, #20]
 8003682:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003684:	895a      	ldrh	r2, [r3, #10]
 8003686:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003688:	f004 f828 	bl	80076dc <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 800368c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800368e:	69da      	ldr	r2, [r3, #28]
 8003690:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003692:	441a      	add	r2, r3
 8003694:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003696:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8003698:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800369a:	695a      	ldr	r2, [r3, #20]
 800369c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800369e:	441a      	add	r2, r3
 80036a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036a2:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 80036a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036a6:	699b      	ldr	r3, [r3, #24]
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d004      	beq.n	80036b6 <PCD_EP_ISR_Handler+0x4b0>
 80036ac:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80036ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036b0:	691b      	ldr	r3, [r3, #16]
 80036b2:	429a      	cmp	r2, r3
 80036b4:	d206      	bcs.n	80036c4 <PCD_EP_ISR_Handler+0x4be>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 80036b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036b8:	781b      	ldrb	r3, [r3, #0]
 80036ba:	4619      	mov	r1, r3
 80036bc:	6878      	ldr	r0, [r7, #4]
 80036be:	f005 fe17 	bl	80092f0 <HAL_PCD_DataOutStageCallback>
 80036c2:	e005      	b.n	80036d0 <PCD_EP_ISR_Handler+0x4ca>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80036ca:	4618      	mov	r0, r3
 80036cc:	f002 fd73 	bl	80061b6 <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 80036d0:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80036d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d07a      	beq.n	80037d0 <PCD_EP_ISR_Handler+0x5ca>
      {
        ep = &hpcd->IN_ep[epindex];
 80036da:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80036de:	1c5a      	adds	r2, r3, #1
 80036e0:	4613      	mov	r3, r2
 80036e2:	009b      	lsls	r3, r3, #2
 80036e4:	4413      	add	r3, r2
 80036e6:	00db      	lsls	r3, r3, #3
 80036e8:	687a      	ldr	r2, [r7, #4]
 80036ea:	4413      	add	r3, r2
 80036ec:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	461a      	mov	r2, r3
 80036f4:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80036f8:	009b      	lsls	r3, r3, #2
 80036fa:	4413      	add	r3, r2
 80036fc:	881b      	ldrh	r3, [r3, #0]
 80036fe:	b29b      	uxth	r3, r3
 8003700:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8003704:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003708:	843b      	strh	r3, [r7, #32]
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	461a      	mov	r2, r3
 8003710:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8003714:	009b      	lsls	r3, r3, #2
 8003716:	441a      	add	r2, r3
 8003718:	8c3b      	ldrh	r3, [r7, #32]
 800371a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800371e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003722:	b29b      	uxth	r3, r3
 8003724:	8013      	strh	r3, [r2, #0]

        /* Manage all non bulk transaction or Bulk Single Buffer Transaction */
        if ((ep->type != EP_TYPE_BULK) ||
 8003726:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003728:	78db      	ldrb	r3, [r3, #3]
 800372a:	2b02      	cmp	r3, #2
 800372c:	d108      	bne.n	8003740 <PCD_EP_ISR_Handler+0x53a>
            ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 800372e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003730:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type != EP_TYPE_BULK) ||
 8003732:	2b02      	cmp	r3, #2
 8003734:	d146      	bne.n	80037c4 <PCD_EP_ISR_Handler+0x5be>
            ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8003736:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8003738:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800373c:	2b00      	cmp	r3, #0
 800373e:	d141      	bne.n	80037c4 <PCD_EP_ISR_Handler+0x5be>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003748:	b29b      	uxth	r3, r3
 800374a:	461a      	mov	r2, r3
 800374c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800374e:	781b      	ldrb	r3, [r3, #0]
 8003750:	00db      	lsls	r3, r3, #3
 8003752:	4413      	add	r3, r2
 8003754:	3302      	adds	r3, #2
 8003756:	005b      	lsls	r3, r3, #1
 8003758:	687a      	ldr	r2, [r7, #4]
 800375a:	6812      	ldr	r2, [r2, #0]
 800375c:	4413      	add	r3, r2
 800375e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003762:	881b      	ldrh	r3, [r3, #0]
 8003764:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003768:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 800376a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800376c:	699a      	ldr	r2, [r3, #24]
 800376e:	8bfb      	ldrh	r3, [r7, #30]
 8003770:	429a      	cmp	r2, r3
 8003772:	d906      	bls.n	8003782 <PCD_EP_ISR_Handler+0x57c>
          {
            ep->xfer_len -= TxByteNbre;
 8003774:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003776:	699a      	ldr	r2, [r3, #24]
 8003778:	8bfb      	ldrh	r3, [r7, #30]
 800377a:	1ad2      	subs	r2, r2, r3
 800377c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800377e:	619a      	str	r2, [r3, #24]
 8003780:	e002      	b.n	8003788 <PCD_EP_ISR_Handler+0x582>
          }
          else
          {
            ep->xfer_len = 0U;
 8003782:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003784:	2200      	movs	r2, #0
 8003786:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 8003788:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800378a:	699b      	ldr	r3, [r3, #24]
 800378c:	2b00      	cmp	r3, #0
 800378e:	d106      	bne.n	800379e <PCD_EP_ISR_Handler+0x598>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003790:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003792:	781b      	ldrb	r3, [r3, #0]
 8003794:	4619      	mov	r1, r3
 8003796:	6878      	ldr	r0, [r7, #4]
 8003798:	f005 fdc5 	bl	8009326 <HAL_PCD_DataInStageCallback>
 800379c:	e018      	b.n	80037d0 <PCD_EP_ISR_Handler+0x5ca>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 800379e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037a0:	695a      	ldr	r2, [r3, #20]
 80037a2:	8bfb      	ldrh	r3, [r7, #30]
 80037a4:	441a      	add	r2, r3
 80037a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037a8:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 80037aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037ac:	69da      	ldr	r2, [r3, #28]
 80037ae:	8bfb      	ldrh	r3, [r7, #30]
 80037b0:	441a      	add	r2, r3
 80037b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037b4:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80037bc:	4618      	mov	r0, r3
 80037be:	f002 fcfa 	bl	80061b6 <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 80037c2:	e005      	b.n	80037d0 <PCD_EP_ISR_Handler+0x5ca>
          }
        }
        /* bulk in double buffer enable in case of transferLen> Ep_Mps */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 80037c4:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80037c6:	461a      	mov	r2, r3
 80037c8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80037ca:	6878      	ldr	r0, [r7, #4]
 80037cc:	f000 f91b 	bl	8003a06 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80037d8:	b29b      	uxth	r3, r3
 80037da:	b21b      	sxth	r3, r3
 80037dc:	2b00      	cmp	r3, #0
 80037de:	f6ff ad17 	blt.w	8003210 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 80037e2:	2300      	movs	r3, #0
}
 80037e4:	4618      	mov	r0, r3
 80037e6:	3738      	adds	r7, #56	; 0x38
 80037e8:	46bd      	mov	sp, r7
 80037ea:	bd80      	pop	{r7, pc}

080037ec <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80037ec:	b580      	push	{r7, lr}
 80037ee:	b088      	sub	sp, #32
 80037f0:	af00      	add	r7, sp, #0
 80037f2:	60f8      	str	r0, [r7, #12]
 80037f4:	60b9      	str	r1, [r7, #8]
 80037f6:	4613      	mov	r3, r2
 80037f8:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80037fa:	88fb      	ldrh	r3, [r7, #6]
 80037fc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003800:	2b00      	cmp	r3, #0
 8003802:	d07e      	beq.n	8003902 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800380c:	b29b      	uxth	r3, r3
 800380e:	461a      	mov	r2, r3
 8003810:	68bb      	ldr	r3, [r7, #8]
 8003812:	781b      	ldrb	r3, [r3, #0]
 8003814:	00db      	lsls	r3, r3, #3
 8003816:	4413      	add	r3, r2
 8003818:	3302      	adds	r3, #2
 800381a:	005b      	lsls	r3, r3, #1
 800381c:	68fa      	ldr	r2, [r7, #12]
 800381e:	6812      	ldr	r2, [r2, #0]
 8003820:	4413      	add	r3, r2
 8003822:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003826:	881b      	ldrh	r3, [r3, #0]
 8003828:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800382c:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 800382e:	68bb      	ldr	r3, [r7, #8]
 8003830:	699a      	ldr	r2, [r3, #24]
 8003832:	8b7b      	ldrh	r3, [r7, #26]
 8003834:	429a      	cmp	r2, r3
 8003836:	d306      	bcc.n	8003846 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8003838:	68bb      	ldr	r3, [r7, #8]
 800383a:	699a      	ldr	r2, [r3, #24]
 800383c:	8b7b      	ldrh	r3, [r7, #26]
 800383e:	1ad2      	subs	r2, r2, r3
 8003840:	68bb      	ldr	r3, [r7, #8]
 8003842:	619a      	str	r2, [r3, #24]
 8003844:	e002      	b.n	800384c <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8003846:	68bb      	ldr	r3, [r7, #8]
 8003848:	2200      	movs	r2, #0
 800384a:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800384c:	68bb      	ldr	r3, [r7, #8]
 800384e:	699b      	ldr	r3, [r3, #24]
 8003850:	2b00      	cmp	r3, #0
 8003852:	d123      	bne.n	800389c <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	461a      	mov	r2, r3
 800385a:	68bb      	ldr	r3, [r7, #8]
 800385c:	781b      	ldrb	r3, [r3, #0]
 800385e:	009b      	lsls	r3, r3, #2
 8003860:	4413      	add	r3, r2
 8003862:	881b      	ldrh	r3, [r3, #0]
 8003864:	b29b      	uxth	r3, r3
 8003866:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800386a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800386e:	833b      	strh	r3, [r7, #24]
 8003870:	8b3b      	ldrh	r3, [r7, #24]
 8003872:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8003876:	833b      	strh	r3, [r7, #24]
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	461a      	mov	r2, r3
 800387e:	68bb      	ldr	r3, [r7, #8]
 8003880:	781b      	ldrb	r3, [r3, #0]
 8003882:	009b      	lsls	r3, r3, #2
 8003884:	441a      	add	r2, r3
 8003886:	8b3b      	ldrh	r3, [r7, #24]
 8003888:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800388c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003890:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003894:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003898:	b29b      	uxth	r3, r3
 800389a:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800389c:	88fb      	ldrh	r3, [r7, #6]
 800389e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d01f      	beq.n	80038e6 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	461a      	mov	r2, r3
 80038ac:	68bb      	ldr	r3, [r7, #8]
 80038ae:	781b      	ldrb	r3, [r3, #0]
 80038b0:	009b      	lsls	r3, r3, #2
 80038b2:	4413      	add	r3, r2
 80038b4:	881b      	ldrh	r3, [r3, #0]
 80038b6:	b29b      	uxth	r3, r3
 80038b8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80038bc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80038c0:	82fb      	strh	r3, [r7, #22]
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	461a      	mov	r2, r3
 80038c8:	68bb      	ldr	r3, [r7, #8]
 80038ca:	781b      	ldrb	r3, [r3, #0]
 80038cc:	009b      	lsls	r3, r3, #2
 80038ce:	441a      	add	r2, r3
 80038d0:	8afb      	ldrh	r3, [r7, #22]
 80038d2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80038d6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80038da:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80038de:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80038e2:	b29b      	uxth	r3, r3
 80038e4:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80038e6:	8b7b      	ldrh	r3, [r7, #26]
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	f000 8087 	beq.w	80039fc <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	6818      	ldr	r0, [r3, #0]
 80038f2:	68bb      	ldr	r3, [r7, #8]
 80038f4:	6959      	ldr	r1, [r3, #20]
 80038f6:	68bb      	ldr	r3, [r7, #8]
 80038f8:	891a      	ldrh	r2, [r3, #8]
 80038fa:	8b7b      	ldrh	r3, [r7, #26]
 80038fc:	f003 feee 	bl	80076dc <USB_ReadPMA>
 8003900:	e07c      	b.n	80039fc <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800390a:	b29b      	uxth	r3, r3
 800390c:	461a      	mov	r2, r3
 800390e:	68bb      	ldr	r3, [r7, #8]
 8003910:	781b      	ldrb	r3, [r3, #0]
 8003912:	00db      	lsls	r3, r3, #3
 8003914:	4413      	add	r3, r2
 8003916:	3306      	adds	r3, #6
 8003918:	005b      	lsls	r3, r3, #1
 800391a:	68fa      	ldr	r2, [r7, #12]
 800391c:	6812      	ldr	r2, [r2, #0]
 800391e:	4413      	add	r3, r2
 8003920:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003924:	881b      	ldrh	r3, [r3, #0]
 8003926:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800392a:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 800392c:	68bb      	ldr	r3, [r7, #8]
 800392e:	699a      	ldr	r2, [r3, #24]
 8003930:	8b7b      	ldrh	r3, [r7, #26]
 8003932:	429a      	cmp	r2, r3
 8003934:	d306      	bcc.n	8003944 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8003936:	68bb      	ldr	r3, [r7, #8]
 8003938:	699a      	ldr	r2, [r3, #24]
 800393a:	8b7b      	ldrh	r3, [r7, #26]
 800393c:	1ad2      	subs	r2, r2, r3
 800393e:	68bb      	ldr	r3, [r7, #8]
 8003940:	619a      	str	r2, [r3, #24]
 8003942:	e002      	b.n	800394a <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8003944:	68bb      	ldr	r3, [r7, #8]
 8003946:	2200      	movs	r2, #0
 8003948:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800394a:	68bb      	ldr	r3, [r7, #8]
 800394c:	699b      	ldr	r3, [r3, #24]
 800394e:	2b00      	cmp	r3, #0
 8003950:	d123      	bne.n	800399a <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	461a      	mov	r2, r3
 8003958:	68bb      	ldr	r3, [r7, #8]
 800395a:	781b      	ldrb	r3, [r3, #0]
 800395c:	009b      	lsls	r3, r3, #2
 800395e:	4413      	add	r3, r2
 8003960:	881b      	ldrh	r3, [r3, #0]
 8003962:	b29b      	uxth	r3, r3
 8003964:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003968:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800396c:	83fb      	strh	r3, [r7, #30]
 800396e:	8bfb      	ldrh	r3, [r7, #30]
 8003970:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8003974:	83fb      	strh	r3, [r7, #30]
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	461a      	mov	r2, r3
 800397c:	68bb      	ldr	r3, [r7, #8]
 800397e:	781b      	ldrb	r3, [r3, #0]
 8003980:	009b      	lsls	r3, r3, #2
 8003982:	441a      	add	r2, r3
 8003984:	8bfb      	ldrh	r3, [r7, #30]
 8003986:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800398a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800398e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003992:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003996:	b29b      	uxth	r3, r3
 8003998:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 800399a:	88fb      	ldrh	r3, [r7, #6]
 800399c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d11f      	bne.n	80039e4 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	461a      	mov	r2, r3
 80039aa:	68bb      	ldr	r3, [r7, #8]
 80039ac:	781b      	ldrb	r3, [r3, #0]
 80039ae:	009b      	lsls	r3, r3, #2
 80039b0:	4413      	add	r3, r2
 80039b2:	881b      	ldrh	r3, [r3, #0]
 80039b4:	b29b      	uxth	r3, r3
 80039b6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80039ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80039be:	83bb      	strh	r3, [r7, #28]
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	461a      	mov	r2, r3
 80039c6:	68bb      	ldr	r3, [r7, #8]
 80039c8:	781b      	ldrb	r3, [r3, #0]
 80039ca:	009b      	lsls	r3, r3, #2
 80039cc:	441a      	add	r2, r3
 80039ce:	8bbb      	ldrh	r3, [r7, #28]
 80039d0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80039d4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80039d8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80039dc:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80039e0:	b29b      	uxth	r3, r3
 80039e2:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80039e4:	8b7b      	ldrh	r3, [r7, #26]
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d008      	beq.n	80039fc <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	6818      	ldr	r0, [r3, #0]
 80039ee:	68bb      	ldr	r3, [r7, #8]
 80039f0:	6959      	ldr	r1, [r3, #20]
 80039f2:	68bb      	ldr	r3, [r7, #8]
 80039f4:	895a      	ldrh	r2, [r3, #10]
 80039f6:	8b7b      	ldrh	r3, [r7, #26]
 80039f8:	f003 fe70 	bl	80076dc <USB_ReadPMA>
    }
  }

  return count;
 80039fc:	8b7b      	ldrh	r3, [r7, #26]
}
 80039fe:	4618      	mov	r0, r3
 8003a00:	3720      	adds	r7, #32
 8003a02:	46bd      	mov	sp, r7
 8003a04:	bd80      	pop	{r7, pc}

08003a06 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8003a06:	b580      	push	{r7, lr}
 8003a08:	b092      	sub	sp, #72	; 0x48
 8003a0a:	af00      	add	r7, sp, #0
 8003a0c:	60f8      	str	r0, [r7, #12]
 8003a0e:	60b9      	str	r1, [r7, #8]
 8003a10:	4613      	mov	r3, r2
 8003a12:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003a14:	88fb      	ldrh	r3, [r7, #6]
 8003a16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	f000 8132 	beq.w	8003c84 <HAL_PCD_EP_DB_Transmit+0x27e>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003a28:	b29b      	uxth	r3, r3
 8003a2a:	461a      	mov	r2, r3
 8003a2c:	68bb      	ldr	r3, [r7, #8]
 8003a2e:	781b      	ldrb	r3, [r3, #0]
 8003a30:	00db      	lsls	r3, r3, #3
 8003a32:	4413      	add	r3, r2
 8003a34:	3302      	adds	r3, #2
 8003a36:	005b      	lsls	r3, r3, #1
 8003a38:	68fa      	ldr	r2, [r7, #12]
 8003a3a:	6812      	ldr	r2, [r2, #0]
 8003a3c:	4413      	add	r3, r2
 8003a3e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003a42:	881b      	ldrh	r3, [r3, #0]
 8003a44:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003a48:	85fb      	strh	r3, [r7, #46]	; 0x2e

    if (ep->xfer_len > TxByteNbre)
 8003a4a:	68bb      	ldr	r3, [r7, #8]
 8003a4c:	699a      	ldr	r2, [r3, #24]
 8003a4e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8003a50:	429a      	cmp	r2, r3
 8003a52:	d906      	bls.n	8003a62 <HAL_PCD_EP_DB_Transmit+0x5c>
    {
      ep->xfer_len -= TxByteNbre;
 8003a54:	68bb      	ldr	r3, [r7, #8]
 8003a56:	699a      	ldr	r2, [r3, #24]
 8003a58:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8003a5a:	1ad2      	subs	r2, r2, r3
 8003a5c:	68bb      	ldr	r3, [r7, #8]
 8003a5e:	619a      	str	r2, [r3, #24]
 8003a60:	e002      	b.n	8003a68 <HAL_PCD_EP_DB_Transmit+0x62>
    }
    else
    {
      ep->xfer_len = 0U;
 8003a62:	68bb      	ldr	r3, [r7, #8]
 8003a64:	2200      	movs	r2, #0
 8003a66:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8003a68:	68bb      	ldr	r3, [r7, #8]
 8003a6a:	699b      	ldr	r3, [r3, #24]
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d12c      	bne.n	8003aca <HAL_PCD_EP_DB_Transmit+0xc4>
    {
      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003a70:	68bb      	ldr	r3, [r7, #8]
 8003a72:	781b      	ldrb	r3, [r3, #0]
 8003a74:	4619      	mov	r1, r3
 8003a76:	68f8      	ldr	r0, [r7, #12]
 8003a78:	f005 fc55 	bl	8009326 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003a7c:	88fb      	ldrh	r3, [r7, #6]
 8003a7e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	f000 822f 	beq.w	8003ee6 <HAL_PCD_EP_DB_Transmit+0x4e0>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	461a      	mov	r2, r3
 8003a8e:	68bb      	ldr	r3, [r7, #8]
 8003a90:	781b      	ldrb	r3, [r3, #0]
 8003a92:	009b      	lsls	r3, r3, #2
 8003a94:	4413      	add	r3, r2
 8003a96:	881b      	ldrh	r3, [r3, #0]
 8003a98:	b29b      	uxth	r3, r3
 8003a9a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003a9e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003aa2:	827b      	strh	r3, [r7, #18]
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	461a      	mov	r2, r3
 8003aaa:	68bb      	ldr	r3, [r7, #8]
 8003aac:	781b      	ldrb	r3, [r3, #0]
 8003aae:	009b      	lsls	r3, r3, #2
 8003ab0:	441a      	add	r2, r3
 8003ab2:	8a7b      	ldrh	r3, [r7, #18]
 8003ab4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003ab8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003abc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003ac0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003ac4:	b29b      	uxth	r3, r3
 8003ac6:	8013      	strh	r3, [r2, #0]
 8003ac8:	e20d      	b.n	8003ee6 <HAL_PCD_EP_DB_Transmit+0x4e0>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003aca:	88fb      	ldrh	r3, [r7, #6]
 8003acc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d01f      	beq.n	8003b14 <HAL_PCD_EP_DB_Transmit+0x10e>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	461a      	mov	r2, r3
 8003ada:	68bb      	ldr	r3, [r7, #8]
 8003adc:	781b      	ldrb	r3, [r3, #0]
 8003ade:	009b      	lsls	r3, r3, #2
 8003ae0:	4413      	add	r3, r2
 8003ae2:	881b      	ldrh	r3, [r3, #0]
 8003ae4:	b29b      	uxth	r3, r3
 8003ae6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003aea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003aee:	84bb      	strh	r3, [r7, #36]	; 0x24
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	461a      	mov	r2, r3
 8003af6:	68bb      	ldr	r3, [r7, #8]
 8003af8:	781b      	ldrb	r3, [r3, #0]
 8003afa:	009b      	lsls	r3, r3, #2
 8003afc:	441a      	add	r2, r3
 8003afe:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003b00:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003b04:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003b08:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003b0c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003b10:	b29b      	uxth	r3, r3
 8003b12:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8003b14:	68bb      	ldr	r3, [r7, #8]
 8003b16:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003b1a:	2b01      	cmp	r3, #1
 8003b1c:	f040 81e3 	bne.w	8003ee6 <HAL_PCD_EP_DB_Transmit+0x4e0>
      {
        ep->xfer_buff += TxByteNbre;
 8003b20:	68bb      	ldr	r3, [r7, #8]
 8003b22:	695a      	ldr	r2, [r3, #20]
 8003b24:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8003b26:	441a      	add	r2, r3
 8003b28:	68bb      	ldr	r3, [r7, #8]
 8003b2a:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8003b2c:	68bb      	ldr	r3, [r7, #8]
 8003b2e:	69da      	ldr	r2, [r3, #28]
 8003b30:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8003b32:	441a      	add	r2, r3
 8003b34:	68bb      	ldr	r3, [r7, #8]
 8003b36:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8003b38:	68bb      	ldr	r3, [r7, #8]
 8003b3a:	6a1a      	ldr	r2, [r3, #32]
 8003b3c:	68bb      	ldr	r3, [r7, #8]
 8003b3e:	691b      	ldr	r3, [r3, #16]
 8003b40:	429a      	cmp	r2, r3
 8003b42:	d309      	bcc.n	8003b58 <HAL_PCD_EP_DB_Transmit+0x152>
        {
          len = ep->maxpacket;
 8003b44:	68bb      	ldr	r3, [r7, #8]
 8003b46:	691b      	ldr	r3, [r3, #16]
 8003b48:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db -= len;
 8003b4a:	68bb      	ldr	r3, [r7, #8]
 8003b4c:	6a1a      	ldr	r2, [r3, #32]
 8003b4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b50:	1ad2      	subs	r2, r2, r3
 8003b52:	68bb      	ldr	r3, [r7, #8]
 8003b54:	621a      	str	r2, [r3, #32]
 8003b56:	e014      	b.n	8003b82 <HAL_PCD_EP_DB_Transmit+0x17c>
        }
        else if (ep->xfer_len_db == 0U)
 8003b58:	68bb      	ldr	r3, [r7, #8]
 8003b5a:	6a1b      	ldr	r3, [r3, #32]
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d106      	bne.n	8003b6e <HAL_PCD_EP_DB_Transmit+0x168>
        {
          len = TxByteNbre;
 8003b60:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8003b62:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_fill_db = 0U;
 8003b64:	68bb      	ldr	r3, [r7, #8]
 8003b66:	2200      	movs	r2, #0
 8003b68:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8003b6c:	e009      	b.n	8003b82 <HAL_PCD_EP_DB_Transmit+0x17c>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8003b6e:	68bb      	ldr	r3, [r7, #8]
 8003b70:	2200      	movs	r2, #0
 8003b72:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8003b76:	68bb      	ldr	r3, [r7, #8]
 8003b78:	6a1b      	ldr	r3, [r3, #32]
 8003b7a:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db = 0U;
 8003b7c:	68bb      	ldr	r3, [r7, #8]
 8003b7e:	2200      	movs	r2, #0
 8003b80:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8003b82:	68bb      	ldr	r3, [r7, #8]
 8003b84:	785b      	ldrb	r3, [r3, #1]
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d155      	bne.n	8003c36 <HAL_PCD_EP_DB_Transmit+0x230>
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	61bb      	str	r3, [r7, #24]
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003b98:	b29b      	uxth	r3, r3
 8003b9a:	461a      	mov	r2, r3
 8003b9c:	69bb      	ldr	r3, [r7, #24]
 8003b9e:	4413      	add	r3, r2
 8003ba0:	61bb      	str	r3, [r7, #24]
 8003ba2:	68bb      	ldr	r3, [r7, #8]
 8003ba4:	781b      	ldrb	r3, [r3, #0]
 8003ba6:	011a      	lsls	r2, r3, #4
 8003ba8:	69bb      	ldr	r3, [r7, #24]
 8003baa:	4413      	add	r3, r2
 8003bac:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003bb0:	617b      	str	r3, [r7, #20]
 8003bb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d112      	bne.n	8003bde <HAL_PCD_EP_DB_Transmit+0x1d8>
 8003bb8:	697b      	ldr	r3, [r7, #20]
 8003bba:	881b      	ldrh	r3, [r3, #0]
 8003bbc:	b29b      	uxth	r3, r3
 8003bbe:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003bc2:	b29a      	uxth	r2, r3
 8003bc4:	697b      	ldr	r3, [r7, #20]
 8003bc6:	801a      	strh	r2, [r3, #0]
 8003bc8:	697b      	ldr	r3, [r7, #20]
 8003bca:	881b      	ldrh	r3, [r3, #0]
 8003bcc:	b29b      	uxth	r3, r3
 8003bce:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003bd2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003bd6:	b29a      	uxth	r2, r3
 8003bd8:	697b      	ldr	r3, [r7, #20]
 8003bda:	801a      	strh	r2, [r3, #0]
 8003bdc:	e047      	b.n	8003c6e <HAL_PCD_EP_DB_Transmit+0x268>
 8003bde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003be0:	2b3e      	cmp	r3, #62	; 0x3e
 8003be2:	d811      	bhi.n	8003c08 <HAL_PCD_EP_DB_Transmit+0x202>
 8003be4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003be6:	085b      	lsrs	r3, r3, #1
 8003be8:	62bb      	str	r3, [r7, #40]	; 0x28
 8003bea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003bec:	f003 0301 	and.w	r3, r3, #1
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d002      	beq.n	8003bfa <HAL_PCD_EP_DB_Transmit+0x1f4>
 8003bf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bf6:	3301      	adds	r3, #1
 8003bf8:	62bb      	str	r3, [r7, #40]	; 0x28
 8003bfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bfc:	b29b      	uxth	r3, r3
 8003bfe:	029b      	lsls	r3, r3, #10
 8003c00:	b29a      	uxth	r2, r3
 8003c02:	697b      	ldr	r3, [r7, #20]
 8003c04:	801a      	strh	r2, [r3, #0]
 8003c06:	e032      	b.n	8003c6e <HAL_PCD_EP_DB_Transmit+0x268>
 8003c08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c0a:	095b      	lsrs	r3, r3, #5
 8003c0c:	62bb      	str	r3, [r7, #40]	; 0x28
 8003c0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c10:	f003 031f 	and.w	r3, r3, #31
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d102      	bne.n	8003c1e <HAL_PCD_EP_DB_Transmit+0x218>
 8003c18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c1a:	3b01      	subs	r3, #1
 8003c1c:	62bb      	str	r3, [r7, #40]	; 0x28
 8003c1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c20:	b29b      	uxth	r3, r3
 8003c22:	029b      	lsls	r3, r3, #10
 8003c24:	b29b      	uxth	r3, r3
 8003c26:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003c2a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003c2e:	b29a      	uxth	r2, r3
 8003c30:	697b      	ldr	r3, [r7, #20]
 8003c32:	801a      	strh	r2, [r3, #0]
 8003c34:	e01b      	b.n	8003c6e <HAL_PCD_EP_DB_Transmit+0x268>
 8003c36:	68bb      	ldr	r3, [r7, #8]
 8003c38:	785b      	ldrb	r3, [r3, #1]
 8003c3a:	2b01      	cmp	r3, #1
 8003c3c:	d117      	bne.n	8003c6e <HAL_PCD_EP_DB_Transmit+0x268>
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	623b      	str	r3, [r7, #32]
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003c4c:	b29b      	uxth	r3, r3
 8003c4e:	461a      	mov	r2, r3
 8003c50:	6a3b      	ldr	r3, [r7, #32]
 8003c52:	4413      	add	r3, r2
 8003c54:	623b      	str	r3, [r7, #32]
 8003c56:	68bb      	ldr	r3, [r7, #8]
 8003c58:	781b      	ldrb	r3, [r3, #0]
 8003c5a:	011a      	lsls	r2, r3, #4
 8003c5c:	6a3b      	ldr	r3, [r7, #32]
 8003c5e:	4413      	add	r3, r2
 8003c60:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003c64:	61fb      	str	r3, [r7, #28]
 8003c66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c68:	b29a      	uxth	r2, r3
 8003c6a:	69fb      	ldr	r3, [r7, #28]
 8003c6c:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	6818      	ldr	r0, [r3, #0]
 8003c72:	68bb      	ldr	r3, [r7, #8]
 8003c74:	6959      	ldr	r1, [r3, #20]
 8003c76:	68bb      	ldr	r3, [r7, #8]
 8003c78:	891a      	ldrh	r2, [r3, #8]
 8003c7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c7c:	b29b      	uxth	r3, r3
 8003c7e:	f003 fce8 	bl	8007652 <USB_WritePMA>
 8003c82:	e130      	b.n	8003ee6 <HAL_PCD_EP_DB_Transmit+0x4e0>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003c8c:	b29b      	uxth	r3, r3
 8003c8e:	461a      	mov	r2, r3
 8003c90:	68bb      	ldr	r3, [r7, #8]
 8003c92:	781b      	ldrb	r3, [r3, #0]
 8003c94:	00db      	lsls	r3, r3, #3
 8003c96:	4413      	add	r3, r2
 8003c98:	3306      	adds	r3, #6
 8003c9a:	005b      	lsls	r3, r3, #1
 8003c9c:	68fa      	ldr	r2, [r7, #12]
 8003c9e:	6812      	ldr	r2, [r2, #0]
 8003ca0:	4413      	add	r3, r2
 8003ca2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003ca6:	881b      	ldrh	r3, [r3, #0]
 8003ca8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003cac:	85fb      	strh	r3, [r7, #46]	; 0x2e

    if (ep->xfer_len >= TxByteNbre)
 8003cae:	68bb      	ldr	r3, [r7, #8]
 8003cb0:	699a      	ldr	r2, [r3, #24]
 8003cb2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8003cb4:	429a      	cmp	r2, r3
 8003cb6:	d306      	bcc.n	8003cc6 <HAL_PCD_EP_DB_Transmit+0x2c0>
    {
      ep->xfer_len -= TxByteNbre;
 8003cb8:	68bb      	ldr	r3, [r7, #8]
 8003cba:	699a      	ldr	r2, [r3, #24]
 8003cbc:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8003cbe:	1ad2      	subs	r2, r2, r3
 8003cc0:	68bb      	ldr	r3, [r7, #8]
 8003cc2:	619a      	str	r2, [r3, #24]
 8003cc4:	e002      	b.n	8003ccc <HAL_PCD_EP_DB_Transmit+0x2c6>
    }
    else
    {
      ep->xfer_len = 0U;
 8003cc6:	68bb      	ldr	r3, [r7, #8]
 8003cc8:	2200      	movs	r2, #0
 8003cca:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8003ccc:	68bb      	ldr	r3, [r7, #8]
 8003cce:	699b      	ldr	r3, [r3, #24]
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d12c      	bne.n	8003d2e <HAL_PCD_EP_DB_Transmit+0x328>
    {
      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003cd4:	68bb      	ldr	r3, [r7, #8]
 8003cd6:	781b      	ldrb	r3, [r3, #0]
 8003cd8:	4619      	mov	r1, r3
 8003cda:	68f8      	ldr	r0, [r7, #12]
 8003cdc:	f005 fb23 	bl	8009326 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /*need to Free USB Buff*/
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8003ce0:	88fb      	ldrh	r3, [r7, #6]
 8003ce2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	f040 80fd 	bne.w	8003ee6 <HAL_PCD_EP_DB_Transmit+0x4e0>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	461a      	mov	r2, r3
 8003cf2:	68bb      	ldr	r3, [r7, #8]
 8003cf4:	781b      	ldrb	r3, [r3, #0]
 8003cf6:	009b      	lsls	r3, r3, #2
 8003cf8:	4413      	add	r3, r2
 8003cfa:	881b      	ldrh	r3, [r3, #0]
 8003cfc:	b29b      	uxth	r3, r3
 8003cfe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003d02:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d06:	84fb      	strh	r3, [r7, #38]	; 0x26
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	461a      	mov	r2, r3
 8003d0e:	68bb      	ldr	r3, [r7, #8]
 8003d10:	781b      	ldrb	r3, [r3, #0]
 8003d12:	009b      	lsls	r3, r3, #2
 8003d14:	441a      	add	r2, r3
 8003d16:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8003d18:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003d1c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003d20:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003d24:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003d28:	b29b      	uxth	r3, r3
 8003d2a:	8013      	strh	r3, [r2, #0]
 8003d2c:	e0db      	b.n	8003ee6 <HAL_PCD_EP_DB_Transmit+0x4e0>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8003d2e:	88fb      	ldrh	r3, [r7, #6]
 8003d30:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d11f      	bne.n	8003d78 <HAL_PCD_EP_DB_Transmit+0x372>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	461a      	mov	r2, r3
 8003d3e:	68bb      	ldr	r3, [r7, #8]
 8003d40:	781b      	ldrb	r3, [r3, #0]
 8003d42:	009b      	lsls	r3, r3, #2
 8003d44:	4413      	add	r3, r2
 8003d46:	881b      	ldrh	r3, [r3, #0]
 8003d48:	b29b      	uxth	r3, r3
 8003d4a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003d4e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d52:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	461a      	mov	r2, r3
 8003d5a:	68bb      	ldr	r3, [r7, #8]
 8003d5c:	781b      	ldrb	r3, [r3, #0]
 8003d5e:	009b      	lsls	r3, r3, #2
 8003d60:	441a      	add	r2, r3
 8003d62:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8003d64:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003d68:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003d6c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003d70:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003d74:	b29b      	uxth	r3, r3
 8003d76:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8003d78:	68bb      	ldr	r3, [r7, #8]
 8003d7a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003d7e:	2b01      	cmp	r3, #1
 8003d80:	f040 80b1 	bne.w	8003ee6 <HAL_PCD_EP_DB_Transmit+0x4e0>
      {
        ep->xfer_buff += TxByteNbre;
 8003d84:	68bb      	ldr	r3, [r7, #8]
 8003d86:	695a      	ldr	r2, [r3, #20]
 8003d88:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8003d8a:	441a      	add	r2, r3
 8003d8c:	68bb      	ldr	r3, [r7, #8]
 8003d8e:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8003d90:	68bb      	ldr	r3, [r7, #8]
 8003d92:	69da      	ldr	r2, [r3, #28]
 8003d94:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8003d96:	441a      	add	r2, r3
 8003d98:	68bb      	ldr	r3, [r7, #8]
 8003d9a:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8003d9c:	68bb      	ldr	r3, [r7, #8]
 8003d9e:	6a1a      	ldr	r2, [r3, #32]
 8003da0:	68bb      	ldr	r3, [r7, #8]
 8003da2:	691b      	ldr	r3, [r3, #16]
 8003da4:	429a      	cmp	r2, r3
 8003da6:	d309      	bcc.n	8003dbc <HAL_PCD_EP_DB_Transmit+0x3b6>
        {
          len = ep->maxpacket;
 8003da8:	68bb      	ldr	r3, [r7, #8]
 8003daa:	691b      	ldr	r3, [r3, #16]
 8003dac:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db -= len;
 8003dae:	68bb      	ldr	r3, [r7, #8]
 8003db0:	6a1a      	ldr	r2, [r3, #32]
 8003db2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003db4:	1ad2      	subs	r2, r2, r3
 8003db6:	68bb      	ldr	r3, [r7, #8]
 8003db8:	621a      	str	r2, [r3, #32]
 8003dba:	e014      	b.n	8003de6 <HAL_PCD_EP_DB_Transmit+0x3e0>
        }
        else if (ep->xfer_len_db == 0U)
 8003dbc:	68bb      	ldr	r3, [r7, #8]
 8003dbe:	6a1b      	ldr	r3, [r3, #32]
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d106      	bne.n	8003dd2 <HAL_PCD_EP_DB_Transmit+0x3cc>
        {
          len = TxByteNbre;
 8003dc4:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8003dc6:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_fill_db = 0U;
 8003dc8:	68bb      	ldr	r3, [r7, #8]
 8003dca:	2200      	movs	r2, #0
 8003dcc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8003dd0:	e009      	b.n	8003de6 <HAL_PCD_EP_DB_Transmit+0x3e0>
        }
        else
        {
          len = ep->xfer_len_db;
 8003dd2:	68bb      	ldr	r3, [r7, #8]
 8003dd4:	6a1b      	ldr	r3, [r3, #32]
 8003dd6:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db = 0U;
 8003dd8:	68bb      	ldr	r3, [r7, #8]
 8003dda:	2200      	movs	r2, #0
 8003ddc:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8003dde:	68bb      	ldr	r3, [r7, #8]
 8003de0:	2200      	movs	r2, #0
 8003de2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	637b      	str	r3, [r7, #52]	; 0x34
 8003dec:	68bb      	ldr	r3, [r7, #8]
 8003dee:	785b      	ldrb	r3, [r3, #1]
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d155      	bne.n	8003ea0 <HAL_PCD_EP_DB_Transmit+0x49a>
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	647b      	str	r3, [r7, #68]	; 0x44
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003e02:	b29b      	uxth	r3, r3
 8003e04:	461a      	mov	r2, r3
 8003e06:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003e08:	4413      	add	r3, r2
 8003e0a:	647b      	str	r3, [r7, #68]	; 0x44
 8003e0c:	68bb      	ldr	r3, [r7, #8]
 8003e0e:	781b      	ldrb	r3, [r3, #0]
 8003e10:	011a      	lsls	r2, r3, #4
 8003e12:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003e14:	4413      	add	r3, r2
 8003e16:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003e1a:	643b      	str	r3, [r7, #64]	; 0x40
 8003e1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d112      	bne.n	8003e48 <HAL_PCD_EP_DB_Transmit+0x442>
 8003e22:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003e24:	881b      	ldrh	r3, [r3, #0]
 8003e26:	b29b      	uxth	r3, r3
 8003e28:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003e2c:	b29a      	uxth	r2, r3
 8003e2e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003e30:	801a      	strh	r2, [r3, #0]
 8003e32:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003e34:	881b      	ldrh	r3, [r3, #0]
 8003e36:	b29b      	uxth	r3, r3
 8003e38:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003e3c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003e40:	b29a      	uxth	r2, r3
 8003e42:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003e44:	801a      	strh	r2, [r3, #0]
 8003e46:	e044      	b.n	8003ed2 <HAL_PCD_EP_DB_Transmit+0x4cc>
 8003e48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e4a:	2b3e      	cmp	r3, #62	; 0x3e
 8003e4c:	d811      	bhi.n	8003e72 <HAL_PCD_EP_DB_Transmit+0x46c>
 8003e4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e50:	085b      	lsrs	r3, r3, #1
 8003e52:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003e54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e56:	f003 0301 	and.w	r3, r3, #1
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d002      	beq.n	8003e64 <HAL_PCD_EP_DB_Transmit+0x45e>
 8003e5e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003e60:	3301      	adds	r3, #1
 8003e62:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003e64:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003e66:	b29b      	uxth	r3, r3
 8003e68:	029b      	lsls	r3, r3, #10
 8003e6a:	b29a      	uxth	r2, r3
 8003e6c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003e6e:	801a      	strh	r2, [r3, #0]
 8003e70:	e02f      	b.n	8003ed2 <HAL_PCD_EP_DB_Transmit+0x4cc>
 8003e72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e74:	095b      	lsrs	r3, r3, #5
 8003e76:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003e78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e7a:	f003 031f 	and.w	r3, r3, #31
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d102      	bne.n	8003e88 <HAL_PCD_EP_DB_Transmit+0x482>
 8003e82:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003e84:	3b01      	subs	r3, #1
 8003e86:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003e88:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003e8a:	b29b      	uxth	r3, r3
 8003e8c:	029b      	lsls	r3, r3, #10
 8003e8e:	b29b      	uxth	r3, r3
 8003e90:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003e94:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003e98:	b29a      	uxth	r2, r3
 8003e9a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003e9c:	801a      	strh	r2, [r3, #0]
 8003e9e:	e018      	b.n	8003ed2 <HAL_PCD_EP_DB_Transmit+0x4cc>
 8003ea0:	68bb      	ldr	r3, [r7, #8]
 8003ea2:	785b      	ldrb	r3, [r3, #1]
 8003ea4:	2b01      	cmp	r3, #1
 8003ea6:	d114      	bne.n	8003ed2 <HAL_PCD_EP_DB_Transmit+0x4cc>
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003eb0:	b29b      	uxth	r3, r3
 8003eb2:	461a      	mov	r2, r3
 8003eb4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003eb6:	4413      	add	r3, r2
 8003eb8:	637b      	str	r3, [r7, #52]	; 0x34
 8003eba:	68bb      	ldr	r3, [r7, #8]
 8003ebc:	781b      	ldrb	r3, [r3, #0]
 8003ebe:	011a      	lsls	r2, r3, #4
 8003ec0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ec2:	4413      	add	r3, r2
 8003ec4:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003ec8:	633b      	str	r3, [r7, #48]	; 0x30
 8003eca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ecc:	b29a      	uxth	r2, r3
 8003ece:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ed0:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	6818      	ldr	r0, [r3, #0]
 8003ed6:	68bb      	ldr	r3, [r7, #8]
 8003ed8:	6959      	ldr	r1, [r3, #20]
 8003eda:	68bb      	ldr	r3, [r7, #8]
 8003edc:	895a      	ldrh	r2, [r3, #10]
 8003ede:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ee0:	b29b      	uxth	r3, r3
 8003ee2:	f003 fbb6 	bl	8007652 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	461a      	mov	r2, r3
 8003eec:	68bb      	ldr	r3, [r7, #8]
 8003eee:	781b      	ldrb	r3, [r3, #0]
 8003ef0:	009b      	lsls	r3, r3, #2
 8003ef2:	4413      	add	r3, r2
 8003ef4:	881b      	ldrh	r3, [r3, #0]
 8003ef6:	b29b      	uxth	r3, r3
 8003ef8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003efc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003f00:	823b      	strh	r3, [r7, #16]
 8003f02:	8a3b      	ldrh	r3, [r7, #16]
 8003f04:	f083 0310 	eor.w	r3, r3, #16
 8003f08:	823b      	strh	r3, [r7, #16]
 8003f0a:	8a3b      	ldrh	r3, [r7, #16]
 8003f0c:	f083 0320 	eor.w	r3, r3, #32
 8003f10:	823b      	strh	r3, [r7, #16]
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	461a      	mov	r2, r3
 8003f18:	68bb      	ldr	r3, [r7, #8]
 8003f1a:	781b      	ldrb	r3, [r3, #0]
 8003f1c:	009b      	lsls	r3, r3, #2
 8003f1e:	441a      	add	r2, r3
 8003f20:	8a3b      	ldrh	r3, [r7, #16]
 8003f22:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003f26:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003f2a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003f2e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003f32:	b29b      	uxth	r3, r3
 8003f34:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8003f36:	2300      	movs	r3, #0
}
 8003f38:	4618      	mov	r0, r3
 8003f3a:	3748      	adds	r7, #72	; 0x48
 8003f3c:	46bd      	mov	sp, r7
 8003f3e:	bd80      	pop	{r7, pc}

08003f40 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8003f40:	b480      	push	{r7}
 8003f42:	b087      	sub	sp, #28
 8003f44:	af00      	add	r7, sp, #0
 8003f46:	60f8      	str	r0, [r7, #12]
 8003f48:	607b      	str	r3, [r7, #4]
 8003f4a:	460b      	mov	r3, r1
 8003f4c:	817b      	strh	r3, [r7, #10]
 8003f4e:	4613      	mov	r3, r2
 8003f50:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8003f52:	897b      	ldrh	r3, [r7, #10]
 8003f54:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f58:	b29b      	uxth	r3, r3
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d00b      	beq.n	8003f76 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003f5e:	897b      	ldrh	r3, [r7, #10]
 8003f60:	f003 0307 	and.w	r3, r3, #7
 8003f64:	1c5a      	adds	r2, r3, #1
 8003f66:	4613      	mov	r3, r2
 8003f68:	009b      	lsls	r3, r3, #2
 8003f6a:	4413      	add	r3, r2
 8003f6c:	00db      	lsls	r3, r3, #3
 8003f6e:	68fa      	ldr	r2, [r7, #12]
 8003f70:	4413      	add	r3, r2
 8003f72:	617b      	str	r3, [r7, #20]
 8003f74:	e009      	b.n	8003f8a <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003f76:	897a      	ldrh	r2, [r7, #10]
 8003f78:	4613      	mov	r3, r2
 8003f7a:	009b      	lsls	r3, r3, #2
 8003f7c:	4413      	add	r3, r2
 8003f7e:	00db      	lsls	r3, r3, #3
 8003f80:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003f84:	68fa      	ldr	r2, [r7, #12]
 8003f86:	4413      	add	r3, r2
 8003f88:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8003f8a:	893b      	ldrh	r3, [r7, #8]
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d107      	bne.n	8003fa0 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8003f90:	697b      	ldr	r3, [r7, #20]
 8003f92:	2200      	movs	r2, #0
 8003f94:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	b29a      	uxth	r2, r3
 8003f9a:	697b      	ldr	r3, [r7, #20]
 8003f9c:	80da      	strh	r2, [r3, #6]
 8003f9e:	e00b      	b.n	8003fb8 <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8003fa0:	697b      	ldr	r3, [r7, #20]
 8003fa2:	2201      	movs	r2, #1
 8003fa4:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	b29a      	uxth	r2, r3
 8003faa:	697b      	ldr	r3, [r7, #20]
 8003fac:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	0c1b      	lsrs	r3, r3, #16
 8003fb2:	b29a      	uxth	r2, r3
 8003fb4:	697b      	ldr	r3, [r7, #20]
 8003fb6:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 8003fb8:	2300      	movs	r3, #0
}
 8003fba:	4618      	mov	r0, r3
 8003fbc:	371c      	adds	r7, #28
 8003fbe:	46bd      	mov	sp, r7
 8003fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc4:	4770      	bx	lr
	...

08003fc8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003fc8:	b580      	push	{r7, lr}
 8003fca:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8003fce:	af00      	add	r7, sp, #0
 8003fd0:	1d3b      	adds	r3, r7, #4
 8003fd2:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003fd4:	1d3b      	adds	r3, r7, #4
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d102      	bne.n	8003fe2 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8003fdc:	2301      	movs	r3, #1
 8003fde:	f000 bef4 	b.w	8004dca <HAL_RCC_OscConfig+0xe02>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003fe2:	1d3b      	adds	r3, r7, #4
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	f003 0301 	and.w	r3, r3, #1
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	f000 816a 	beq.w	80042c6 <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8003ff2:	4bb3      	ldr	r3, [pc, #716]	; (80042c0 <HAL_RCC_OscConfig+0x2f8>)
 8003ff4:	685b      	ldr	r3, [r3, #4]
 8003ff6:	f003 030c 	and.w	r3, r3, #12
 8003ffa:	2b04      	cmp	r3, #4
 8003ffc:	d00c      	beq.n	8004018 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003ffe:	4bb0      	ldr	r3, [pc, #704]	; (80042c0 <HAL_RCC_OscConfig+0x2f8>)
 8004000:	685b      	ldr	r3, [r3, #4]
 8004002:	f003 030c 	and.w	r3, r3, #12
 8004006:	2b08      	cmp	r3, #8
 8004008:	d159      	bne.n	80040be <HAL_RCC_OscConfig+0xf6>
 800400a:	4bad      	ldr	r3, [pc, #692]	; (80042c0 <HAL_RCC_OscConfig+0x2f8>)
 800400c:	685b      	ldr	r3, [r3, #4]
 800400e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004012:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004016:	d152      	bne.n	80040be <HAL_RCC_OscConfig+0xf6>
 8004018:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800401c:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004020:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8004024:	fa93 f3a3 	rbit	r3, r3
 8004028:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800402c:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004030:	fab3 f383 	clz	r3, r3
 8004034:	b2db      	uxtb	r3, r3
 8004036:	095b      	lsrs	r3, r3, #5
 8004038:	b2db      	uxtb	r3, r3
 800403a:	f043 0301 	orr.w	r3, r3, #1
 800403e:	b2db      	uxtb	r3, r3
 8004040:	2b01      	cmp	r3, #1
 8004042:	d102      	bne.n	800404a <HAL_RCC_OscConfig+0x82>
 8004044:	4b9e      	ldr	r3, [pc, #632]	; (80042c0 <HAL_RCC_OscConfig+0x2f8>)
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	e015      	b.n	8004076 <HAL_RCC_OscConfig+0xae>
 800404a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800404e:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004052:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8004056:	fa93 f3a3 	rbit	r3, r3
 800405a:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 800405e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004062:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8004066:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 800406a:	fa93 f3a3 	rbit	r3, r3
 800406e:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8004072:	4b93      	ldr	r3, [pc, #588]	; (80042c0 <HAL_RCC_OscConfig+0x2f8>)
 8004074:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004076:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800407a:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 800407e:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8004082:	fa92 f2a2 	rbit	r2, r2
 8004086:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 800408a:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 800408e:	fab2 f282 	clz	r2, r2
 8004092:	b2d2      	uxtb	r2, r2
 8004094:	f042 0220 	orr.w	r2, r2, #32
 8004098:	b2d2      	uxtb	r2, r2
 800409a:	f002 021f 	and.w	r2, r2, #31
 800409e:	2101      	movs	r1, #1
 80040a0:	fa01 f202 	lsl.w	r2, r1, r2
 80040a4:	4013      	ands	r3, r2
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	f000 810c 	beq.w	80042c4 <HAL_RCC_OscConfig+0x2fc>
 80040ac:	1d3b      	adds	r3, r7, #4
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	685b      	ldr	r3, [r3, #4]
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	f040 8106 	bne.w	80042c4 <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 80040b8:	2301      	movs	r3, #1
 80040ba:	f000 be86 	b.w	8004dca <HAL_RCC_OscConfig+0xe02>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80040be:	1d3b      	adds	r3, r7, #4
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	685b      	ldr	r3, [r3, #4]
 80040c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80040c8:	d106      	bne.n	80040d8 <HAL_RCC_OscConfig+0x110>
 80040ca:	4b7d      	ldr	r3, [pc, #500]	; (80042c0 <HAL_RCC_OscConfig+0x2f8>)
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	4a7c      	ldr	r2, [pc, #496]	; (80042c0 <HAL_RCC_OscConfig+0x2f8>)
 80040d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80040d4:	6013      	str	r3, [r2, #0]
 80040d6:	e030      	b.n	800413a <HAL_RCC_OscConfig+0x172>
 80040d8:	1d3b      	adds	r3, r7, #4
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	685b      	ldr	r3, [r3, #4]
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d10c      	bne.n	80040fc <HAL_RCC_OscConfig+0x134>
 80040e2:	4b77      	ldr	r3, [pc, #476]	; (80042c0 <HAL_RCC_OscConfig+0x2f8>)
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	4a76      	ldr	r2, [pc, #472]	; (80042c0 <HAL_RCC_OscConfig+0x2f8>)
 80040e8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80040ec:	6013      	str	r3, [r2, #0]
 80040ee:	4b74      	ldr	r3, [pc, #464]	; (80042c0 <HAL_RCC_OscConfig+0x2f8>)
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	4a73      	ldr	r2, [pc, #460]	; (80042c0 <HAL_RCC_OscConfig+0x2f8>)
 80040f4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80040f8:	6013      	str	r3, [r2, #0]
 80040fa:	e01e      	b.n	800413a <HAL_RCC_OscConfig+0x172>
 80040fc:	1d3b      	adds	r3, r7, #4
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	685b      	ldr	r3, [r3, #4]
 8004102:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004106:	d10c      	bne.n	8004122 <HAL_RCC_OscConfig+0x15a>
 8004108:	4b6d      	ldr	r3, [pc, #436]	; (80042c0 <HAL_RCC_OscConfig+0x2f8>)
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	4a6c      	ldr	r2, [pc, #432]	; (80042c0 <HAL_RCC_OscConfig+0x2f8>)
 800410e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004112:	6013      	str	r3, [r2, #0]
 8004114:	4b6a      	ldr	r3, [pc, #424]	; (80042c0 <HAL_RCC_OscConfig+0x2f8>)
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	4a69      	ldr	r2, [pc, #420]	; (80042c0 <HAL_RCC_OscConfig+0x2f8>)
 800411a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800411e:	6013      	str	r3, [r2, #0]
 8004120:	e00b      	b.n	800413a <HAL_RCC_OscConfig+0x172>
 8004122:	4b67      	ldr	r3, [pc, #412]	; (80042c0 <HAL_RCC_OscConfig+0x2f8>)
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	4a66      	ldr	r2, [pc, #408]	; (80042c0 <HAL_RCC_OscConfig+0x2f8>)
 8004128:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800412c:	6013      	str	r3, [r2, #0]
 800412e:	4b64      	ldr	r3, [pc, #400]	; (80042c0 <HAL_RCC_OscConfig+0x2f8>)
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	4a63      	ldr	r2, [pc, #396]	; (80042c0 <HAL_RCC_OscConfig+0x2f8>)
 8004134:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004138:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800413a:	4b61      	ldr	r3, [pc, #388]	; (80042c0 <HAL_RCC_OscConfig+0x2f8>)
 800413c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800413e:	f023 020f 	bic.w	r2, r3, #15
 8004142:	1d3b      	adds	r3, r7, #4
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	689b      	ldr	r3, [r3, #8]
 8004148:	495d      	ldr	r1, [pc, #372]	; (80042c0 <HAL_RCC_OscConfig+0x2f8>)
 800414a:	4313      	orrs	r3, r2
 800414c:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800414e:	1d3b      	adds	r3, r7, #4
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	685b      	ldr	r3, [r3, #4]
 8004154:	2b00      	cmp	r3, #0
 8004156:	d059      	beq.n	800420c <HAL_RCC_OscConfig+0x244>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004158:	f7fd fc06 	bl	8001968 <HAL_GetTick>
 800415c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004160:	e00a      	b.n	8004178 <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004162:	f7fd fc01 	bl	8001968 <HAL_GetTick>
 8004166:	4602      	mov	r2, r0
 8004168:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800416c:	1ad3      	subs	r3, r2, r3
 800416e:	2b64      	cmp	r3, #100	; 0x64
 8004170:	d902      	bls.n	8004178 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 8004172:	2303      	movs	r3, #3
 8004174:	f000 be29 	b.w	8004dca <HAL_RCC_OscConfig+0xe02>
 8004178:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800417c:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004180:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8004184:	fa93 f3a3 	rbit	r3, r3
 8004188:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 800418c:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004190:	fab3 f383 	clz	r3, r3
 8004194:	b2db      	uxtb	r3, r3
 8004196:	095b      	lsrs	r3, r3, #5
 8004198:	b2db      	uxtb	r3, r3
 800419a:	f043 0301 	orr.w	r3, r3, #1
 800419e:	b2db      	uxtb	r3, r3
 80041a0:	2b01      	cmp	r3, #1
 80041a2:	d102      	bne.n	80041aa <HAL_RCC_OscConfig+0x1e2>
 80041a4:	4b46      	ldr	r3, [pc, #280]	; (80042c0 <HAL_RCC_OscConfig+0x2f8>)
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	e015      	b.n	80041d6 <HAL_RCC_OscConfig+0x20e>
 80041aa:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80041ae:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041b2:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 80041b6:	fa93 f3a3 	rbit	r3, r3
 80041ba:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 80041be:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80041c2:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 80041c6:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 80041ca:	fa93 f3a3 	rbit	r3, r3
 80041ce:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 80041d2:	4b3b      	ldr	r3, [pc, #236]	; (80042c0 <HAL_RCC_OscConfig+0x2f8>)
 80041d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041d6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80041da:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 80041de:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 80041e2:	fa92 f2a2 	rbit	r2, r2
 80041e6:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 80041ea:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 80041ee:	fab2 f282 	clz	r2, r2
 80041f2:	b2d2      	uxtb	r2, r2
 80041f4:	f042 0220 	orr.w	r2, r2, #32
 80041f8:	b2d2      	uxtb	r2, r2
 80041fa:	f002 021f 	and.w	r2, r2, #31
 80041fe:	2101      	movs	r1, #1
 8004200:	fa01 f202 	lsl.w	r2, r1, r2
 8004204:	4013      	ands	r3, r2
 8004206:	2b00      	cmp	r3, #0
 8004208:	d0ab      	beq.n	8004162 <HAL_RCC_OscConfig+0x19a>
 800420a:	e05c      	b.n	80042c6 <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800420c:	f7fd fbac 	bl	8001968 <HAL_GetTick>
 8004210:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004214:	e00a      	b.n	800422c <HAL_RCC_OscConfig+0x264>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004216:	f7fd fba7 	bl	8001968 <HAL_GetTick>
 800421a:	4602      	mov	r2, r0
 800421c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004220:	1ad3      	subs	r3, r2, r3
 8004222:	2b64      	cmp	r3, #100	; 0x64
 8004224:	d902      	bls.n	800422c <HAL_RCC_OscConfig+0x264>
          {
            return HAL_TIMEOUT;
 8004226:	2303      	movs	r3, #3
 8004228:	f000 bdcf 	b.w	8004dca <HAL_RCC_OscConfig+0xe02>
 800422c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004230:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004234:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8004238:	fa93 f3a3 	rbit	r3, r3
 800423c:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8004240:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004244:	fab3 f383 	clz	r3, r3
 8004248:	b2db      	uxtb	r3, r3
 800424a:	095b      	lsrs	r3, r3, #5
 800424c:	b2db      	uxtb	r3, r3
 800424e:	f043 0301 	orr.w	r3, r3, #1
 8004252:	b2db      	uxtb	r3, r3
 8004254:	2b01      	cmp	r3, #1
 8004256:	d102      	bne.n	800425e <HAL_RCC_OscConfig+0x296>
 8004258:	4b19      	ldr	r3, [pc, #100]	; (80042c0 <HAL_RCC_OscConfig+0x2f8>)
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	e015      	b.n	800428a <HAL_RCC_OscConfig+0x2c2>
 800425e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004262:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004266:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 800426a:	fa93 f3a3 	rbit	r3, r3
 800426e:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8004272:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004276:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 800427a:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 800427e:	fa93 f3a3 	rbit	r3, r3
 8004282:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8004286:	4b0e      	ldr	r3, [pc, #56]	; (80042c0 <HAL_RCC_OscConfig+0x2f8>)
 8004288:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800428a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800428e:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8004292:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8004296:	fa92 f2a2 	rbit	r2, r2
 800429a:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 800429e:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 80042a2:	fab2 f282 	clz	r2, r2
 80042a6:	b2d2      	uxtb	r2, r2
 80042a8:	f042 0220 	orr.w	r2, r2, #32
 80042ac:	b2d2      	uxtb	r2, r2
 80042ae:	f002 021f 	and.w	r2, r2, #31
 80042b2:	2101      	movs	r1, #1
 80042b4:	fa01 f202 	lsl.w	r2, r1, r2
 80042b8:	4013      	ands	r3, r2
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d1ab      	bne.n	8004216 <HAL_RCC_OscConfig+0x24e>
 80042be:	e002      	b.n	80042c6 <HAL_RCC_OscConfig+0x2fe>
 80042c0:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80042c4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80042c6:	1d3b      	adds	r3, r7, #4
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	f003 0302 	and.w	r3, r3, #2
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	f000 816f 	beq.w	80045b4 <HAL_RCC_OscConfig+0x5ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80042d6:	4bd0      	ldr	r3, [pc, #832]	; (8004618 <HAL_RCC_OscConfig+0x650>)
 80042d8:	685b      	ldr	r3, [r3, #4]
 80042da:	f003 030c 	and.w	r3, r3, #12
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d00b      	beq.n	80042fa <HAL_RCC_OscConfig+0x332>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80042e2:	4bcd      	ldr	r3, [pc, #820]	; (8004618 <HAL_RCC_OscConfig+0x650>)
 80042e4:	685b      	ldr	r3, [r3, #4]
 80042e6:	f003 030c 	and.w	r3, r3, #12
 80042ea:	2b08      	cmp	r3, #8
 80042ec:	d16c      	bne.n	80043c8 <HAL_RCC_OscConfig+0x400>
 80042ee:	4bca      	ldr	r3, [pc, #808]	; (8004618 <HAL_RCC_OscConfig+0x650>)
 80042f0:	685b      	ldr	r3, [r3, #4]
 80042f2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d166      	bne.n	80043c8 <HAL_RCC_OscConfig+0x400>
 80042fa:	2302      	movs	r3, #2
 80042fc:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004300:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8004304:	fa93 f3a3 	rbit	r3, r3
 8004308:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 800430c:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004310:	fab3 f383 	clz	r3, r3
 8004314:	b2db      	uxtb	r3, r3
 8004316:	095b      	lsrs	r3, r3, #5
 8004318:	b2db      	uxtb	r3, r3
 800431a:	f043 0301 	orr.w	r3, r3, #1
 800431e:	b2db      	uxtb	r3, r3
 8004320:	2b01      	cmp	r3, #1
 8004322:	d102      	bne.n	800432a <HAL_RCC_OscConfig+0x362>
 8004324:	4bbc      	ldr	r3, [pc, #752]	; (8004618 <HAL_RCC_OscConfig+0x650>)
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	e013      	b.n	8004352 <HAL_RCC_OscConfig+0x38a>
 800432a:	2302      	movs	r3, #2
 800432c:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004330:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8004334:	fa93 f3a3 	rbit	r3, r3
 8004338:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 800433c:	2302      	movs	r3, #2
 800433e:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8004342:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8004346:	fa93 f3a3 	rbit	r3, r3
 800434a:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 800434e:	4bb2      	ldr	r3, [pc, #712]	; (8004618 <HAL_RCC_OscConfig+0x650>)
 8004350:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004352:	2202      	movs	r2, #2
 8004354:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8004358:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 800435c:	fa92 f2a2 	rbit	r2, r2
 8004360:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8004364:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8004368:	fab2 f282 	clz	r2, r2
 800436c:	b2d2      	uxtb	r2, r2
 800436e:	f042 0220 	orr.w	r2, r2, #32
 8004372:	b2d2      	uxtb	r2, r2
 8004374:	f002 021f 	and.w	r2, r2, #31
 8004378:	2101      	movs	r1, #1
 800437a:	fa01 f202 	lsl.w	r2, r1, r2
 800437e:	4013      	ands	r3, r2
 8004380:	2b00      	cmp	r3, #0
 8004382:	d007      	beq.n	8004394 <HAL_RCC_OscConfig+0x3cc>
 8004384:	1d3b      	adds	r3, r7, #4
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	691b      	ldr	r3, [r3, #16]
 800438a:	2b01      	cmp	r3, #1
 800438c:	d002      	beq.n	8004394 <HAL_RCC_OscConfig+0x3cc>
      {
        return HAL_ERROR;
 800438e:	2301      	movs	r3, #1
 8004390:	f000 bd1b 	b.w	8004dca <HAL_RCC_OscConfig+0xe02>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004394:	4ba0      	ldr	r3, [pc, #640]	; (8004618 <HAL_RCC_OscConfig+0x650>)
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800439c:	1d3b      	adds	r3, r7, #4
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	695b      	ldr	r3, [r3, #20]
 80043a2:	21f8      	movs	r1, #248	; 0xf8
 80043a4:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043a8:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 80043ac:	fa91 f1a1 	rbit	r1, r1
 80043b0:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 80043b4:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 80043b8:	fab1 f181 	clz	r1, r1
 80043bc:	b2c9      	uxtb	r1, r1
 80043be:	408b      	lsls	r3, r1
 80043c0:	4995      	ldr	r1, [pc, #596]	; (8004618 <HAL_RCC_OscConfig+0x650>)
 80043c2:	4313      	orrs	r3, r2
 80043c4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80043c6:	e0f5      	b.n	80045b4 <HAL_RCC_OscConfig+0x5ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80043c8:	1d3b      	adds	r3, r7, #4
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	691b      	ldr	r3, [r3, #16]
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	f000 8085 	beq.w	80044de <HAL_RCC_OscConfig+0x516>
 80043d4:	2301      	movs	r3, #1
 80043d6:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043da:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 80043de:	fa93 f3a3 	rbit	r3, r3
 80043e2:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 80043e6:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80043ea:	fab3 f383 	clz	r3, r3
 80043ee:	b2db      	uxtb	r3, r3
 80043f0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80043f4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80043f8:	009b      	lsls	r3, r3, #2
 80043fa:	461a      	mov	r2, r3
 80043fc:	2301      	movs	r3, #1
 80043fe:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004400:	f7fd fab2 	bl	8001968 <HAL_GetTick>
 8004404:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004408:	e00a      	b.n	8004420 <HAL_RCC_OscConfig+0x458>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800440a:	f7fd faad 	bl	8001968 <HAL_GetTick>
 800440e:	4602      	mov	r2, r0
 8004410:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004414:	1ad3      	subs	r3, r2, r3
 8004416:	2b02      	cmp	r3, #2
 8004418:	d902      	bls.n	8004420 <HAL_RCC_OscConfig+0x458>
          {
            return HAL_TIMEOUT;
 800441a:	2303      	movs	r3, #3
 800441c:	f000 bcd5 	b.w	8004dca <HAL_RCC_OscConfig+0xe02>
 8004420:	2302      	movs	r3, #2
 8004422:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004426:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 800442a:	fa93 f3a3 	rbit	r3, r3
 800442e:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8004432:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004436:	fab3 f383 	clz	r3, r3
 800443a:	b2db      	uxtb	r3, r3
 800443c:	095b      	lsrs	r3, r3, #5
 800443e:	b2db      	uxtb	r3, r3
 8004440:	f043 0301 	orr.w	r3, r3, #1
 8004444:	b2db      	uxtb	r3, r3
 8004446:	2b01      	cmp	r3, #1
 8004448:	d102      	bne.n	8004450 <HAL_RCC_OscConfig+0x488>
 800444a:	4b73      	ldr	r3, [pc, #460]	; (8004618 <HAL_RCC_OscConfig+0x650>)
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	e013      	b.n	8004478 <HAL_RCC_OscConfig+0x4b0>
 8004450:	2302      	movs	r3, #2
 8004452:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004456:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800445a:	fa93 f3a3 	rbit	r3, r3
 800445e:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8004462:	2302      	movs	r3, #2
 8004464:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8004468:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 800446c:	fa93 f3a3 	rbit	r3, r3
 8004470:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8004474:	4b68      	ldr	r3, [pc, #416]	; (8004618 <HAL_RCC_OscConfig+0x650>)
 8004476:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004478:	2202      	movs	r2, #2
 800447a:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 800447e:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8004482:	fa92 f2a2 	rbit	r2, r2
 8004486:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 800448a:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 800448e:	fab2 f282 	clz	r2, r2
 8004492:	b2d2      	uxtb	r2, r2
 8004494:	f042 0220 	orr.w	r2, r2, #32
 8004498:	b2d2      	uxtb	r2, r2
 800449a:	f002 021f 	and.w	r2, r2, #31
 800449e:	2101      	movs	r1, #1
 80044a0:	fa01 f202 	lsl.w	r2, r1, r2
 80044a4:	4013      	ands	r3, r2
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d0af      	beq.n	800440a <HAL_RCC_OscConfig+0x442>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80044aa:	4b5b      	ldr	r3, [pc, #364]	; (8004618 <HAL_RCC_OscConfig+0x650>)
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80044b2:	1d3b      	adds	r3, r7, #4
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	695b      	ldr	r3, [r3, #20]
 80044b8:	21f8      	movs	r1, #248	; 0xf8
 80044ba:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044be:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 80044c2:	fa91 f1a1 	rbit	r1, r1
 80044c6:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 80044ca:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 80044ce:	fab1 f181 	clz	r1, r1
 80044d2:	b2c9      	uxtb	r1, r1
 80044d4:	408b      	lsls	r3, r1
 80044d6:	4950      	ldr	r1, [pc, #320]	; (8004618 <HAL_RCC_OscConfig+0x650>)
 80044d8:	4313      	orrs	r3, r2
 80044da:	600b      	str	r3, [r1, #0]
 80044dc:	e06a      	b.n	80045b4 <HAL_RCC_OscConfig+0x5ec>
 80044de:	2301      	movs	r3, #1
 80044e0:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044e4:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80044e8:	fa93 f3a3 	rbit	r3, r3
 80044ec:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 80044f0:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80044f4:	fab3 f383 	clz	r3, r3
 80044f8:	b2db      	uxtb	r3, r3
 80044fa:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80044fe:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004502:	009b      	lsls	r3, r3, #2
 8004504:	461a      	mov	r2, r3
 8004506:	2300      	movs	r3, #0
 8004508:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800450a:	f7fd fa2d 	bl	8001968 <HAL_GetTick>
 800450e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004512:	e00a      	b.n	800452a <HAL_RCC_OscConfig+0x562>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004514:	f7fd fa28 	bl	8001968 <HAL_GetTick>
 8004518:	4602      	mov	r2, r0
 800451a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800451e:	1ad3      	subs	r3, r2, r3
 8004520:	2b02      	cmp	r3, #2
 8004522:	d902      	bls.n	800452a <HAL_RCC_OscConfig+0x562>
          {
            return HAL_TIMEOUT;
 8004524:	2303      	movs	r3, #3
 8004526:	f000 bc50 	b.w	8004dca <HAL_RCC_OscConfig+0xe02>
 800452a:	2302      	movs	r3, #2
 800452c:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004530:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8004534:	fa93 f3a3 	rbit	r3, r3
 8004538:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 800453c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004540:	fab3 f383 	clz	r3, r3
 8004544:	b2db      	uxtb	r3, r3
 8004546:	095b      	lsrs	r3, r3, #5
 8004548:	b2db      	uxtb	r3, r3
 800454a:	f043 0301 	orr.w	r3, r3, #1
 800454e:	b2db      	uxtb	r3, r3
 8004550:	2b01      	cmp	r3, #1
 8004552:	d102      	bne.n	800455a <HAL_RCC_OscConfig+0x592>
 8004554:	4b30      	ldr	r3, [pc, #192]	; (8004618 <HAL_RCC_OscConfig+0x650>)
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	e013      	b.n	8004582 <HAL_RCC_OscConfig+0x5ba>
 800455a:	2302      	movs	r3, #2
 800455c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004560:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004564:	fa93 f3a3 	rbit	r3, r3
 8004568:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800456c:	2302      	movs	r3, #2
 800456e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8004572:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8004576:	fa93 f3a3 	rbit	r3, r3
 800457a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800457e:	4b26      	ldr	r3, [pc, #152]	; (8004618 <HAL_RCC_OscConfig+0x650>)
 8004580:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004582:	2202      	movs	r2, #2
 8004584:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8004588:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 800458c:	fa92 f2a2 	rbit	r2, r2
 8004590:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8004594:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8004598:	fab2 f282 	clz	r2, r2
 800459c:	b2d2      	uxtb	r2, r2
 800459e:	f042 0220 	orr.w	r2, r2, #32
 80045a2:	b2d2      	uxtb	r2, r2
 80045a4:	f002 021f 	and.w	r2, r2, #31
 80045a8:	2101      	movs	r1, #1
 80045aa:	fa01 f202 	lsl.w	r2, r1, r2
 80045ae:	4013      	ands	r3, r2
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d1af      	bne.n	8004514 <HAL_RCC_OscConfig+0x54c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80045b4:	1d3b      	adds	r3, r7, #4
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	f003 0308 	and.w	r3, r3, #8
 80045be:	2b00      	cmp	r3, #0
 80045c0:	f000 80da 	beq.w	8004778 <HAL_RCC_OscConfig+0x7b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80045c4:	1d3b      	adds	r3, r7, #4
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	699b      	ldr	r3, [r3, #24]
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d069      	beq.n	80046a2 <HAL_RCC_OscConfig+0x6da>
 80045ce:	2301      	movs	r3, #1
 80045d0:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045d4:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80045d8:	fa93 f3a3 	rbit	r3, r3
 80045dc:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 80045e0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80045e4:	fab3 f383 	clz	r3, r3
 80045e8:	b2db      	uxtb	r3, r3
 80045ea:	461a      	mov	r2, r3
 80045ec:	4b0b      	ldr	r3, [pc, #44]	; (800461c <HAL_RCC_OscConfig+0x654>)
 80045ee:	4413      	add	r3, r2
 80045f0:	009b      	lsls	r3, r3, #2
 80045f2:	461a      	mov	r2, r3
 80045f4:	2301      	movs	r3, #1
 80045f6:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80045f8:	f7fd f9b6 	bl	8001968 <HAL_GetTick>
 80045fc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004600:	e00e      	b.n	8004620 <HAL_RCC_OscConfig+0x658>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004602:	f7fd f9b1 	bl	8001968 <HAL_GetTick>
 8004606:	4602      	mov	r2, r0
 8004608:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800460c:	1ad3      	subs	r3, r2, r3
 800460e:	2b02      	cmp	r3, #2
 8004610:	d906      	bls.n	8004620 <HAL_RCC_OscConfig+0x658>
        {
          return HAL_TIMEOUT;
 8004612:	2303      	movs	r3, #3
 8004614:	e3d9      	b.n	8004dca <HAL_RCC_OscConfig+0xe02>
 8004616:	bf00      	nop
 8004618:	40021000 	.word	0x40021000
 800461c:	10908120 	.word	0x10908120
 8004620:	2302      	movs	r3, #2
 8004622:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004626:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800462a:	fa93 f3a3 	rbit	r3, r3
 800462e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8004632:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8004636:	2202      	movs	r2, #2
 8004638:	601a      	str	r2, [r3, #0]
 800463a:	f507 7380 	add.w	r3, r7, #256	; 0x100
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	fa93 f2a3 	rbit	r2, r3
 8004644:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8004648:	601a      	str	r2, [r3, #0]
 800464a:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 800464e:	2202      	movs	r2, #2
 8004650:	601a      	str	r2, [r3, #0]
 8004652:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	fa93 f2a3 	rbit	r2, r3
 800465c:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8004660:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004662:	4ba5      	ldr	r3, [pc, #660]	; (80048f8 <HAL_RCC_OscConfig+0x930>)
 8004664:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004666:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 800466a:	2102      	movs	r1, #2
 800466c:	6019      	str	r1, [r3, #0]
 800466e:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	fa93 f1a3 	rbit	r1, r3
 8004678:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 800467c:	6019      	str	r1, [r3, #0]
  return result;
 800467e:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	fab3 f383 	clz	r3, r3
 8004688:	b2db      	uxtb	r3, r3
 800468a:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800468e:	b2db      	uxtb	r3, r3
 8004690:	f003 031f 	and.w	r3, r3, #31
 8004694:	2101      	movs	r1, #1
 8004696:	fa01 f303 	lsl.w	r3, r1, r3
 800469a:	4013      	ands	r3, r2
 800469c:	2b00      	cmp	r3, #0
 800469e:	d0b0      	beq.n	8004602 <HAL_RCC_OscConfig+0x63a>
 80046a0:	e06a      	b.n	8004778 <HAL_RCC_OscConfig+0x7b0>
 80046a2:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 80046a6:	2201      	movs	r2, #1
 80046a8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046aa:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	fa93 f2a3 	rbit	r2, r3
 80046b4:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80046b8:	601a      	str	r2, [r3, #0]
  return result;
 80046ba:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80046be:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80046c0:	fab3 f383 	clz	r3, r3
 80046c4:	b2db      	uxtb	r3, r3
 80046c6:	461a      	mov	r2, r3
 80046c8:	4b8c      	ldr	r3, [pc, #560]	; (80048fc <HAL_RCC_OscConfig+0x934>)
 80046ca:	4413      	add	r3, r2
 80046cc:	009b      	lsls	r3, r3, #2
 80046ce:	461a      	mov	r2, r3
 80046d0:	2300      	movs	r3, #0
 80046d2:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80046d4:	f7fd f948 	bl	8001968 <HAL_GetTick>
 80046d8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80046dc:	e009      	b.n	80046f2 <HAL_RCC_OscConfig+0x72a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80046de:	f7fd f943 	bl	8001968 <HAL_GetTick>
 80046e2:	4602      	mov	r2, r0
 80046e4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80046e8:	1ad3      	subs	r3, r2, r3
 80046ea:	2b02      	cmp	r3, #2
 80046ec:	d901      	bls.n	80046f2 <HAL_RCC_OscConfig+0x72a>
        {
          return HAL_TIMEOUT;
 80046ee:	2303      	movs	r3, #3
 80046f0:	e36b      	b.n	8004dca <HAL_RCC_OscConfig+0xe02>
 80046f2:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 80046f6:	2202      	movs	r2, #2
 80046f8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046fa:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	fa93 f2a3 	rbit	r2, r3
 8004704:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8004708:	601a      	str	r2, [r3, #0]
 800470a:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 800470e:	2202      	movs	r2, #2
 8004710:	601a      	str	r2, [r3, #0]
 8004712:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	fa93 f2a3 	rbit	r2, r3
 800471c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8004720:	601a      	str	r2, [r3, #0]
 8004722:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8004726:	2202      	movs	r2, #2
 8004728:	601a      	str	r2, [r3, #0]
 800472a:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	fa93 f2a3 	rbit	r2, r3
 8004734:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8004738:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800473a:	4b6f      	ldr	r3, [pc, #444]	; (80048f8 <HAL_RCC_OscConfig+0x930>)
 800473c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800473e:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8004742:	2102      	movs	r1, #2
 8004744:	6019      	str	r1, [r3, #0]
 8004746:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	fa93 f1a3 	rbit	r1, r3
 8004750:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8004754:	6019      	str	r1, [r3, #0]
  return result;
 8004756:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	fab3 f383 	clz	r3, r3
 8004760:	b2db      	uxtb	r3, r3
 8004762:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8004766:	b2db      	uxtb	r3, r3
 8004768:	f003 031f 	and.w	r3, r3, #31
 800476c:	2101      	movs	r1, #1
 800476e:	fa01 f303 	lsl.w	r3, r1, r3
 8004772:	4013      	ands	r3, r2
 8004774:	2b00      	cmp	r3, #0
 8004776:	d1b2      	bne.n	80046de <HAL_RCC_OscConfig+0x716>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004778:	1d3b      	adds	r3, r7, #4
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	f003 0304 	and.w	r3, r3, #4
 8004782:	2b00      	cmp	r3, #0
 8004784:	f000 8158 	beq.w	8004a38 <HAL_RCC_OscConfig+0xa70>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004788:	2300      	movs	r3, #0
 800478a:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800478e:	4b5a      	ldr	r3, [pc, #360]	; (80048f8 <HAL_RCC_OscConfig+0x930>)
 8004790:	69db      	ldr	r3, [r3, #28]
 8004792:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004796:	2b00      	cmp	r3, #0
 8004798:	d112      	bne.n	80047c0 <HAL_RCC_OscConfig+0x7f8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800479a:	4b57      	ldr	r3, [pc, #348]	; (80048f8 <HAL_RCC_OscConfig+0x930>)
 800479c:	69db      	ldr	r3, [r3, #28]
 800479e:	4a56      	ldr	r2, [pc, #344]	; (80048f8 <HAL_RCC_OscConfig+0x930>)
 80047a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80047a4:	61d3      	str	r3, [r2, #28]
 80047a6:	4b54      	ldr	r3, [pc, #336]	; (80048f8 <HAL_RCC_OscConfig+0x930>)
 80047a8:	69db      	ldr	r3, [r3, #28]
 80047aa:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 80047ae:	f107 0308 	add.w	r3, r7, #8
 80047b2:	601a      	str	r2, [r3, #0]
 80047b4:	f107 0308 	add.w	r3, r7, #8
 80047b8:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80047ba:	2301      	movs	r3, #1
 80047bc:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80047c0:	4b4f      	ldr	r3, [pc, #316]	; (8004900 <HAL_RCC_OscConfig+0x938>)
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d11a      	bne.n	8004802 <HAL_RCC_OscConfig+0x83a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80047cc:	4b4c      	ldr	r3, [pc, #304]	; (8004900 <HAL_RCC_OscConfig+0x938>)
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	4a4b      	ldr	r2, [pc, #300]	; (8004900 <HAL_RCC_OscConfig+0x938>)
 80047d2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80047d6:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80047d8:	f7fd f8c6 	bl	8001968 <HAL_GetTick>
 80047dc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80047e0:	e009      	b.n	80047f6 <HAL_RCC_OscConfig+0x82e>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80047e2:	f7fd f8c1 	bl	8001968 <HAL_GetTick>
 80047e6:	4602      	mov	r2, r0
 80047e8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80047ec:	1ad3      	subs	r3, r2, r3
 80047ee:	2b64      	cmp	r3, #100	; 0x64
 80047f0:	d901      	bls.n	80047f6 <HAL_RCC_OscConfig+0x82e>
        {
          return HAL_TIMEOUT;
 80047f2:	2303      	movs	r3, #3
 80047f4:	e2e9      	b.n	8004dca <HAL_RCC_OscConfig+0xe02>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80047f6:	4b42      	ldr	r3, [pc, #264]	; (8004900 <HAL_RCC_OscConfig+0x938>)
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d0ef      	beq.n	80047e2 <HAL_RCC_OscConfig+0x81a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004802:	1d3b      	adds	r3, r7, #4
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	68db      	ldr	r3, [r3, #12]
 8004808:	2b01      	cmp	r3, #1
 800480a:	d106      	bne.n	800481a <HAL_RCC_OscConfig+0x852>
 800480c:	4b3a      	ldr	r3, [pc, #232]	; (80048f8 <HAL_RCC_OscConfig+0x930>)
 800480e:	6a1b      	ldr	r3, [r3, #32]
 8004810:	4a39      	ldr	r2, [pc, #228]	; (80048f8 <HAL_RCC_OscConfig+0x930>)
 8004812:	f043 0301 	orr.w	r3, r3, #1
 8004816:	6213      	str	r3, [r2, #32]
 8004818:	e02f      	b.n	800487a <HAL_RCC_OscConfig+0x8b2>
 800481a:	1d3b      	adds	r3, r7, #4
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	68db      	ldr	r3, [r3, #12]
 8004820:	2b00      	cmp	r3, #0
 8004822:	d10c      	bne.n	800483e <HAL_RCC_OscConfig+0x876>
 8004824:	4b34      	ldr	r3, [pc, #208]	; (80048f8 <HAL_RCC_OscConfig+0x930>)
 8004826:	6a1b      	ldr	r3, [r3, #32]
 8004828:	4a33      	ldr	r2, [pc, #204]	; (80048f8 <HAL_RCC_OscConfig+0x930>)
 800482a:	f023 0301 	bic.w	r3, r3, #1
 800482e:	6213      	str	r3, [r2, #32]
 8004830:	4b31      	ldr	r3, [pc, #196]	; (80048f8 <HAL_RCC_OscConfig+0x930>)
 8004832:	6a1b      	ldr	r3, [r3, #32]
 8004834:	4a30      	ldr	r2, [pc, #192]	; (80048f8 <HAL_RCC_OscConfig+0x930>)
 8004836:	f023 0304 	bic.w	r3, r3, #4
 800483a:	6213      	str	r3, [r2, #32]
 800483c:	e01d      	b.n	800487a <HAL_RCC_OscConfig+0x8b2>
 800483e:	1d3b      	adds	r3, r7, #4
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	68db      	ldr	r3, [r3, #12]
 8004844:	2b05      	cmp	r3, #5
 8004846:	d10c      	bne.n	8004862 <HAL_RCC_OscConfig+0x89a>
 8004848:	4b2b      	ldr	r3, [pc, #172]	; (80048f8 <HAL_RCC_OscConfig+0x930>)
 800484a:	6a1b      	ldr	r3, [r3, #32]
 800484c:	4a2a      	ldr	r2, [pc, #168]	; (80048f8 <HAL_RCC_OscConfig+0x930>)
 800484e:	f043 0304 	orr.w	r3, r3, #4
 8004852:	6213      	str	r3, [r2, #32]
 8004854:	4b28      	ldr	r3, [pc, #160]	; (80048f8 <HAL_RCC_OscConfig+0x930>)
 8004856:	6a1b      	ldr	r3, [r3, #32]
 8004858:	4a27      	ldr	r2, [pc, #156]	; (80048f8 <HAL_RCC_OscConfig+0x930>)
 800485a:	f043 0301 	orr.w	r3, r3, #1
 800485e:	6213      	str	r3, [r2, #32]
 8004860:	e00b      	b.n	800487a <HAL_RCC_OscConfig+0x8b2>
 8004862:	4b25      	ldr	r3, [pc, #148]	; (80048f8 <HAL_RCC_OscConfig+0x930>)
 8004864:	6a1b      	ldr	r3, [r3, #32]
 8004866:	4a24      	ldr	r2, [pc, #144]	; (80048f8 <HAL_RCC_OscConfig+0x930>)
 8004868:	f023 0301 	bic.w	r3, r3, #1
 800486c:	6213      	str	r3, [r2, #32]
 800486e:	4b22      	ldr	r3, [pc, #136]	; (80048f8 <HAL_RCC_OscConfig+0x930>)
 8004870:	6a1b      	ldr	r3, [r3, #32]
 8004872:	4a21      	ldr	r2, [pc, #132]	; (80048f8 <HAL_RCC_OscConfig+0x930>)
 8004874:	f023 0304 	bic.w	r3, r3, #4
 8004878:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800487a:	1d3b      	adds	r3, r7, #4
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	68db      	ldr	r3, [r3, #12]
 8004880:	2b00      	cmp	r3, #0
 8004882:	d06b      	beq.n	800495c <HAL_RCC_OscConfig+0x994>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004884:	f7fd f870 	bl	8001968 <HAL_GetTick>
 8004888:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800488c:	e00b      	b.n	80048a6 <HAL_RCC_OscConfig+0x8de>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800488e:	f7fd f86b 	bl	8001968 <HAL_GetTick>
 8004892:	4602      	mov	r2, r0
 8004894:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004898:	1ad3      	subs	r3, r2, r3
 800489a:	f241 3288 	movw	r2, #5000	; 0x1388
 800489e:	4293      	cmp	r3, r2
 80048a0:	d901      	bls.n	80048a6 <HAL_RCC_OscConfig+0x8de>
        {
          return HAL_TIMEOUT;
 80048a2:	2303      	movs	r3, #3
 80048a4:	e291      	b.n	8004dca <HAL_RCC_OscConfig+0xe02>
 80048a6:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80048aa:	2202      	movs	r2, #2
 80048ac:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048ae:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	fa93 f2a3 	rbit	r2, r3
 80048b8:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80048bc:	601a      	str	r2, [r3, #0]
 80048be:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80048c2:	2202      	movs	r2, #2
 80048c4:	601a      	str	r2, [r3, #0]
 80048c6:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	fa93 f2a3 	rbit	r2, r3
 80048d0:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80048d4:	601a      	str	r2, [r3, #0]
  return result;
 80048d6:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80048da:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80048dc:	fab3 f383 	clz	r3, r3
 80048e0:	b2db      	uxtb	r3, r3
 80048e2:	095b      	lsrs	r3, r3, #5
 80048e4:	b2db      	uxtb	r3, r3
 80048e6:	f043 0302 	orr.w	r3, r3, #2
 80048ea:	b2db      	uxtb	r3, r3
 80048ec:	2b02      	cmp	r3, #2
 80048ee:	d109      	bne.n	8004904 <HAL_RCC_OscConfig+0x93c>
 80048f0:	4b01      	ldr	r3, [pc, #4]	; (80048f8 <HAL_RCC_OscConfig+0x930>)
 80048f2:	6a1b      	ldr	r3, [r3, #32]
 80048f4:	e014      	b.n	8004920 <HAL_RCC_OscConfig+0x958>
 80048f6:	bf00      	nop
 80048f8:	40021000 	.word	0x40021000
 80048fc:	10908120 	.word	0x10908120
 8004900:	40007000 	.word	0x40007000
 8004904:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8004908:	2202      	movs	r2, #2
 800490a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800490c:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	fa93 f2a3 	rbit	r2, r3
 8004916:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800491a:	601a      	str	r2, [r3, #0]
 800491c:	4bbb      	ldr	r3, [pc, #748]	; (8004c0c <HAL_RCC_OscConfig+0xc44>)
 800491e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004920:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8004924:	2102      	movs	r1, #2
 8004926:	6011      	str	r1, [r2, #0]
 8004928:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 800492c:	6812      	ldr	r2, [r2, #0]
 800492e:	fa92 f1a2 	rbit	r1, r2
 8004932:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8004936:	6011      	str	r1, [r2, #0]
  return result;
 8004938:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 800493c:	6812      	ldr	r2, [r2, #0]
 800493e:	fab2 f282 	clz	r2, r2
 8004942:	b2d2      	uxtb	r2, r2
 8004944:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004948:	b2d2      	uxtb	r2, r2
 800494a:	f002 021f 	and.w	r2, r2, #31
 800494e:	2101      	movs	r1, #1
 8004950:	fa01 f202 	lsl.w	r2, r1, r2
 8004954:	4013      	ands	r3, r2
 8004956:	2b00      	cmp	r3, #0
 8004958:	d099      	beq.n	800488e <HAL_RCC_OscConfig+0x8c6>
 800495a:	e063      	b.n	8004a24 <HAL_RCC_OscConfig+0xa5c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800495c:	f7fd f804 	bl	8001968 <HAL_GetTick>
 8004960:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004964:	e00b      	b.n	800497e <HAL_RCC_OscConfig+0x9b6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004966:	f7fc ffff 	bl	8001968 <HAL_GetTick>
 800496a:	4602      	mov	r2, r0
 800496c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004970:	1ad3      	subs	r3, r2, r3
 8004972:	f241 3288 	movw	r2, #5000	; 0x1388
 8004976:	4293      	cmp	r3, r2
 8004978:	d901      	bls.n	800497e <HAL_RCC_OscConfig+0x9b6>
        {
          return HAL_TIMEOUT;
 800497a:	2303      	movs	r3, #3
 800497c:	e225      	b.n	8004dca <HAL_RCC_OscConfig+0xe02>
 800497e:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8004982:	2202      	movs	r2, #2
 8004984:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004986:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	fa93 f2a3 	rbit	r2, r3
 8004990:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8004994:	601a      	str	r2, [r3, #0]
 8004996:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800499a:	2202      	movs	r2, #2
 800499c:	601a      	str	r2, [r3, #0]
 800499e:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	fa93 f2a3 	rbit	r2, r3
 80049a8:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80049ac:	601a      	str	r2, [r3, #0]
  return result;
 80049ae:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80049b2:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80049b4:	fab3 f383 	clz	r3, r3
 80049b8:	b2db      	uxtb	r3, r3
 80049ba:	095b      	lsrs	r3, r3, #5
 80049bc:	b2db      	uxtb	r3, r3
 80049be:	f043 0302 	orr.w	r3, r3, #2
 80049c2:	b2db      	uxtb	r3, r3
 80049c4:	2b02      	cmp	r3, #2
 80049c6:	d102      	bne.n	80049ce <HAL_RCC_OscConfig+0xa06>
 80049c8:	4b90      	ldr	r3, [pc, #576]	; (8004c0c <HAL_RCC_OscConfig+0xc44>)
 80049ca:	6a1b      	ldr	r3, [r3, #32]
 80049cc:	e00d      	b.n	80049ea <HAL_RCC_OscConfig+0xa22>
 80049ce:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80049d2:	2202      	movs	r2, #2
 80049d4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80049d6:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	fa93 f2a3 	rbit	r2, r3
 80049e0:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80049e4:	601a      	str	r2, [r3, #0]
 80049e6:	4b89      	ldr	r3, [pc, #548]	; (8004c0c <HAL_RCC_OscConfig+0xc44>)
 80049e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049ea:	f107 0288 	add.w	r2, r7, #136	; 0x88
 80049ee:	2102      	movs	r1, #2
 80049f0:	6011      	str	r1, [r2, #0]
 80049f2:	f107 0288 	add.w	r2, r7, #136	; 0x88
 80049f6:	6812      	ldr	r2, [r2, #0]
 80049f8:	fa92 f1a2 	rbit	r1, r2
 80049fc:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8004a00:	6011      	str	r1, [r2, #0]
  return result;
 8004a02:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8004a06:	6812      	ldr	r2, [r2, #0]
 8004a08:	fab2 f282 	clz	r2, r2
 8004a0c:	b2d2      	uxtb	r2, r2
 8004a0e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004a12:	b2d2      	uxtb	r2, r2
 8004a14:	f002 021f 	and.w	r2, r2, #31
 8004a18:	2101      	movs	r1, #1
 8004a1a:	fa01 f202 	lsl.w	r2, r1, r2
 8004a1e:	4013      	ands	r3, r2
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d1a0      	bne.n	8004966 <HAL_RCC_OscConfig+0x99e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004a24:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8004a28:	2b01      	cmp	r3, #1
 8004a2a:	d105      	bne.n	8004a38 <HAL_RCC_OscConfig+0xa70>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004a2c:	4b77      	ldr	r3, [pc, #476]	; (8004c0c <HAL_RCC_OscConfig+0xc44>)
 8004a2e:	69db      	ldr	r3, [r3, #28]
 8004a30:	4a76      	ldr	r2, [pc, #472]	; (8004c0c <HAL_RCC_OscConfig+0xc44>)
 8004a32:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004a36:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004a38:	1d3b      	adds	r3, r7, #4
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	69db      	ldr	r3, [r3, #28]
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	f000 81c2 	beq.w	8004dc8 <HAL_RCC_OscConfig+0xe00>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004a44:	4b71      	ldr	r3, [pc, #452]	; (8004c0c <HAL_RCC_OscConfig+0xc44>)
 8004a46:	685b      	ldr	r3, [r3, #4]
 8004a48:	f003 030c 	and.w	r3, r3, #12
 8004a4c:	2b08      	cmp	r3, #8
 8004a4e:	f000 819c 	beq.w	8004d8a <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004a52:	1d3b      	adds	r3, r7, #4
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	69db      	ldr	r3, [r3, #28]
 8004a58:	2b02      	cmp	r3, #2
 8004a5a:	f040 8114 	bne.w	8004c86 <HAL_RCC_OscConfig+0xcbe>
 8004a5e:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8004a62:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004a66:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a68:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	fa93 f2a3 	rbit	r2, r3
 8004a72:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8004a76:	601a      	str	r2, [r3, #0]
  return result;
 8004a78:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8004a7c:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004a7e:	fab3 f383 	clz	r3, r3
 8004a82:	b2db      	uxtb	r3, r3
 8004a84:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004a88:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004a8c:	009b      	lsls	r3, r3, #2
 8004a8e:	461a      	mov	r2, r3
 8004a90:	2300      	movs	r3, #0
 8004a92:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a94:	f7fc ff68 	bl	8001968 <HAL_GetTick>
 8004a98:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004a9c:	e009      	b.n	8004ab2 <HAL_RCC_OscConfig+0xaea>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004a9e:	f7fc ff63 	bl	8001968 <HAL_GetTick>
 8004aa2:	4602      	mov	r2, r0
 8004aa4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004aa8:	1ad3      	subs	r3, r2, r3
 8004aaa:	2b02      	cmp	r3, #2
 8004aac:	d901      	bls.n	8004ab2 <HAL_RCC_OscConfig+0xaea>
          {
            return HAL_TIMEOUT;
 8004aae:	2303      	movs	r3, #3
 8004ab0:	e18b      	b.n	8004dca <HAL_RCC_OscConfig+0xe02>
 8004ab2:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8004ab6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004aba:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004abc:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	fa93 f2a3 	rbit	r2, r3
 8004ac6:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8004aca:	601a      	str	r2, [r3, #0]
  return result;
 8004acc:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8004ad0:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004ad2:	fab3 f383 	clz	r3, r3
 8004ad6:	b2db      	uxtb	r3, r3
 8004ad8:	095b      	lsrs	r3, r3, #5
 8004ada:	b2db      	uxtb	r3, r3
 8004adc:	f043 0301 	orr.w	r3, r3, #1
 8004ae0:	b2db      	uxtb	r3, r3
 8004ae2:	2b01      	cmp	r3, #1
 8004ae4:	d102      	bne.n	8004aec <HAL_RCC_OscConfig+0xb24>
 8004ae6:	4b49      	ldr	r3, [pc, #292]	; (8004c0c <HAL_RCC_OscConfig+0xc44>)
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	e01b      	b.n	8004b24 <HAL_RCC_OscConfig+0xb5c>
 8004aec:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8004af0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004af4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004af6:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	fa93 f2a3 	rbit	r2, r3
 8004b00:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8004b04:	601a      	str	r2, [r3, #0]
 8004b06:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8004b0a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004b0e:	601a      	str	r2, [r3, #0]
 8004b10:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	fa93 f2a3 	rbit	r2, r3
 8004b1a:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8004b1e:	601a      	str	r2, [r3, #0]
 8004b20:	4b3a      	ldr	r3, [pc, #232]	; (8004c0c <HAL_RCC_OscConfig+0xc44>)
 8004b22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b24:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8004b28:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8004b2c:	6011      	str	r1, [r2, #0]
 8004b2e:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8004b32:	6812      	ldr	r2, [r2, #0]
 8004b34:	fa92 f1a2 	rbit	r1, r2
 8004b38:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8004b3c:	6011      	str	r1, [r2, #0]
  return result;
 8004b3e:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8004b42:	6812      	ldr	r2, [r2, #0]
 8004b44:	fab2 f282 	clz	r2, r2
 8004b48:	b2d2      	uxtb	r2, r2
 8004b4a:	f042 0220 	orr.w	r2, r2, #32
 8004b4e:	b2d2      	uxtb	r2, r2
 8004b50:	f002 021f 	and.w	r2, r2, #31
 8004b54:	2101      	movs	r1, #1
 8004b56:	fa01 f202 	lsl.w	r2, r1, r2
 8004b5a:	4013      	ands	r3, r2
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d19e      	bne.n	8004a9e <HAL_RCC_OscConfig+0xad6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004b60:	4b2a      	ldr	r3, [pc, #168]	; (8004c0c <HAL_RCC_OscConfig+0xc44>)
 8004b62:	685b      	ldr	r3, [r3, #4]
 8004b64:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8004b68:	1d3b      	adds	r3, r7, #4
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8004b6e:	1d3b      	adds	r3, r7, #4
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	6a1b      	ldr	r3, [r3, #32]
 8004b74:	430b      	orrs	r3, r1
 8004b76:	4925      	ldr	r1, [pc, #148]	; (8004c0c <HAL_RCC_OscConfig+0xc44>)
 8004b78:	4313      	orrs	r3, r2
 8004b7a:	604b      	str	r3, [r1, #4]
 8004b7c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8004b80:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004b84:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b86:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	fa93 f2a3 	rbit	r2, r3
 8004b90:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8004b94:	601a      	str	r2, [r3, #0]
  return result;
 8004b96:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8004b9a:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004b9c:	fab3 f383 	clz	r3, r3
 8004ba0:	b2db      	uxtb	r3, r3
 8004ba2:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004ba6:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004baa:	009b      	lsls	r3, r3, #2
 8004bac:	461a      	mov	r2, r3
 8004bae:	2301      	movs	r3, #1
 8004bb0:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004bb2:	f7fc fed9 	bl	8001968 <HAL_GetTick>
 8004bb6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004bba:	e009      	b.n	8004bd0 <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004bbc:	f7fc fed4 	bl	8001968 <HAL_GetTick>
 8004bc0:	4602      	mov	r2, r0
 8004bc2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004bc6:	1ad3      	subs	r3, r2, r3
 8004bc8:	2b02      	cmp	r3, #2
 8004bca:	d901      	bls.n	8004bd0 <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 8004bcc:	2303      	movs	r3, #3
 8004bce:	e0fc      	b.n	8004dca <HAL_RCC_OscConfig+0xe02>
 8004bd0:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8004bd4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004bd8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004bda:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	fa93 f2a3 	rbit	r2, r3
 8004be4:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8004be8:	601a      	str	r2, [r3, #0]
  return result;
 8004bea:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8004bee:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004bf0:	fab3 f383 	clz	r3, r3
 8004bf4:	b2db      	uxtb	r3, r3
 8004bf6:	095b      	lsrs	r3, r3, #5
 8004bf8:	b2db      	uxtb	r3, r3
 8004bfa:	f043 0301 	orr.w	r3, r3, #1
 8004bfe:	b2db      	uxtb	r3, r3
 8004c00:	2b01      	cmp	r3, #1
 8004c02:	d105      	bne.n	8004c10 <HAL_RCC_OscConfig+0xc48>
 8004c04:	4b01      	ldr	r3, [pc, #4]	; (8004c0c <HAL_RCC_OscConfig+0xc44>)
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	e01e      	b.n	8004c48 <HAL_RCC_OscConfig+0xc80>
 8004c0a:	bf00      	nop
 8004c0c:	40021000 	.word	0x40021000
 8004c10:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8004c14:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004c18:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c1a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	fa93 f2a3 	rbit	r2, r3
 8004c24:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8004c28:	601a      	str	r2, [r3, #0]
 8004c2a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8004c2e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004c32:	601a      	str	r2, [r3, #0]
 8004c34:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	fa93 f2a3 	rbit	r2, r3
 8004c3e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8004c42:	601a      	str	r2, [r3, #0]
 8004c44:	4b63      	ldr	r3, [pc, #396]	; (8004dd4 <HAL_RCC_OscConfig+0xe0c>)
 8004c46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c48:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8004c4c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8004c50:	6011      	str	r1, [r2, #0]
 8004c52:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8004c56:	6812      	ldr	r2, [r2, #0]
 8004c58:	fa92 f1a2 	rbit	r1, r2
 8004c5c:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8004c60:	6011      	str	r1, [r2, #0]
  return result;
 8004c62:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8004c66:	6812      	ldr	r2, [r2, #0]
 8004c68:	fab2 f282 	clz	r2, r2
 8004c6c:	b2d2      	uxtb	r2, r2
 8004c6e:	f042 0220 	orr.w	r2, r2, #32
 8004c72:	b2d2      	uxtb	r2, r2
 8004c74:	f002 021f 	and.w	r2, r2, #31
 8004c78:	2101      	movs	r1, #1
 8004c7a:	fa01 f202 	lsl.w	r2, r1, r2
 8004c7e:	4013      	ands	r3, r2
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d09b      	beq.n	8004bbc <HAL_RCC_OscConfig+0xbf4>
 8004c84:	e0a0      	b.n	8004dc8 <HAL_RCC_OscConfig+0xe00>
 8004c86:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004c8a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004c8e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c90:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	fa93 f2a3 	rbit	r2, r3
 8004c9a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004c9e:	601a      	str	r2, [r3, #0]
  return result;
 8004ca0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004ca4:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004ca6:	fab3 f383 	clz	r3, r3
 8004caa:	b2db      	uxtb	r3, r3
 8004cac:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004cb0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004cb4:	009b      	lsls	r3, r3, #2
 8004cb6:	461a      	mov	r2, r3
 8004cb8:	2300      	movs	r3, #0
 8004cba:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004cbc:	f7fc fe54 	bl	8001968 <HAL_GetTick>
 8004cc0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004cc4:	e009      	b.n	8004cda <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004cc6:	f7fc fe4f 	bl	8001968 <HAL_GetTick>
 8004cca:	4602      	mov	r2, r0
 8004ccc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004cd0:	1ad3      	subs	r3, r2, r3
 8004cd2:	2b02      	cmp	r3, #2
 8004cd4:	d901      	bls.n	8004cda <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 8004cd6:	2303      	movs	r3, #3
 8004cd8:	e077      	b.n	8004dca <HAL_RCC_OscConfig+0xe02>
 8004cda:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004cde:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004ce2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ce4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	fa93 f2a3 	rbit	r2, r3
 8004cee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004cf2:	601a      	str	r2, [r3, #0]
  return result;
 8004cf4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004cf8:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004cfa:	fab3 f383 	clz	r3, r3
 8004cfe:	b2db      	uxtb	r3, r3
 8004d00:	095b      	lsrs	r3, r3, #5
 8004d02:	b2db      	uxtb	r3, r3
 8004d04:	f043 0301 	orr.w	r3, r3, #1
 8004d08:	b2db      	uxtb	r3, r3
 8004d0a:	2b01      	cmp	r3, #1
 8004d0c:	d102      	bne.n	8004d14 <HAL_RCC_OscConfig+0xd4c>
 8004d0e:	4b31      	ldr	r3, [pc, #196]	; (8004dd4 <HAL_RCC_OscConfig+0xe0c>)
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	e01b      	b.n	8004d4c <HAL_RCC_OscConfig+0xd84>
 8004d14:	f107 0320 	add.w	r3, r7, #32
 8004d18:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004d1c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d1e:	f107 0320 	add.w	r3, r7, #32
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	fa93 f2a3 	rbit	r2, r3
 8004d28:	f107 031c 	add.w	r3, r7, #28
 8004d2c:	601a      	str	r2, [r3, #0]
 8004d2e:	f107 0318 	add.w	r3, r7, #24
 8004d32:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004d36:	601a      	str	r2, [r3, #0]
 8004d38:	f107 0318 	add.w	r3, r7, #24
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	fa93 f2a3 	rbit	r2, r3
 8004d42:	f107 0314 	add.w	r3, r7, #20
 8004d46:	601a      	str	r2, [r3, #0]
 8004d48:	4b22      	ldr	r3, [pc, #136]	; (8004dd4 <HAL_RCC_OscConfig+0xe0c>)
 8004d4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d4c:	f107 0210 	add.w	r2, r7, #16
 8004d50:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8004d54:	6011      	str	r1, [r2, #0]
 8004d56:	f107 0210 	add.w	r2, r7, #16
 8004d5a:	6812      	ldr	r2, [r2, #0]
 8004d5c:	fa92 f1a2 	rbit	r1, r2
 8004d60:	f107 020c 	add.w	r2, r7, #12
 8004d64:	6011      	str	r1, [r2, #0]
  return result;
 8004d66:	f107 020c 	add.w	r2, r7, #12
 8004d6a:	6812      	ldr	r2, [r2, #0]
 8004d6c:	fab2 f282 	clz	r2, r2
 8004d70:	b2d2      	uxtb	r2, r2
 8004d72:	f042 0220 	orr.w	r2, r2, #32
 8004d76:	b2d2      	uxtb	r2, r2
 8004d78:	f002 021f 	and.w	r2, r2, #31
 8004d7c:	2101      	movs	r1, #1
 8004d7e:	fa01 f202 	lsl.w	r2, r1, r2
 8004d82:	4013      	ands	r3, r2
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d19e      	bne.n	8004cc6 <HAL_RCC_OscConfig+0xcfe>
 8004d88:	e01e      	b.n	8004dc8 <HAL_RCC_OscConfig+0xe00>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004d8a:	1d3b      	adds	r3, r7, #4
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	69db      	ldr	r3, [r3, #28]
 8004d90:	2b01      	cmp	r3, #1
 8004d92:	d101      	bne.n	8004d98 <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 8004d94:	2301      	movs	r3, #1
 8004d96:	e018      	b.n	8004dca <HAL_RCC_OscConfig+0xe02>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004d98:	4b0e      	ldr	r3, [pc, #56]	; (8004dd4 <HAL_RCC_OscConfig+0xe0c>)
 8004d9a:	685b      	ldr	r3, [r3, #4]
 8004d9c:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8004da0:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8004da4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004da8:	1d3b      	adds	r3, r7, #4
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	6a1b      	ldr	r3, [r3, #32]
 8004dae:	429a      	cmp	r2, r3
 8004db0:	d108      	bne.n	8004dc4 <HAL_RCC_OscConfig+0xdfc>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8004db2:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8004db6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8004dba:	1d3b      	adds	r3, r7, #4
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8004dc0:	429a      	cmp	r2, r3
 8004dc2:	d001      	beq.n	8004dc8 <HAL_RCC_OscConfig+0xe00>
#endif
        {
          return HAL_ERROR;
 8004dc4:	2301      	movs	r3, #1
 8004dc6:	e000      	b.n	8004dca <HAL_RCC_OscConfig+0xe02>
        }
      }
    }
  }

  return HAL_OK;
 8004dc8:	2300      	movs	r3, #0
}
 8004dca:	4618      	mov	r0, r3
 8004dcc:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8004dd0:	46bd      	mov	sp, r7
 8004dd2:	bd80      	pop	{r7, pc}
 8004dd4:	40021000 	.word	0x40021000

08004dd8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004dd8:	b580      	push	{r7, lr}
 8004dda:	b09e      	sub	sp, #120	; 0x78
 8004ddc:	af00      	add	r7, sp, #0
 8004dde:	6078      	str	r0, [r7, #4]
 8004de0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8004de2:	2300      	movs	r3, #0
 8004de4:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d101      	bne.n	8004df0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004dec:	2301      	movs	r3, #1
 8004dee:	e162      	b.n	80050b6 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004df0:	4b90      	ldr	r3, [pc, #576]	; (8005034 <HAL_RCC_ClockConfig+0x25c>)
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	f003 0307 	and.w	r3, r3, #7
 8004df8:	683a      	ldr	r2, [r7, #0]
 8004dfa:	429a      	cmp	r2, r3
 8004dfc:	d910      	bls.n	8004e20 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004dfe:	4b8d      	ldr	r3, [pc, #564]	; (8005034 <HAL_RCC_ClockConfig+0x25c>)
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	f023 0207 	bic.w	r2, r3, #7
 8004e06:	498b      	ldr	r1, [pc, #556]	; (8005034 <HAL_RCC_ClockConfig+0x25c>)
 8004e08:	683b      	ldr	r3, [r7, #0]
 8004e0a:	4313      	orrs	r3, r2
 8004e0c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004e0e:	4b89      	ldr	r3, [pc, #548]	; (8005034 <HAL_RCC_ClockConfig+0x25c>)
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	f003 0307 	and.w	r3, r3, #7
 8004e16:	683a      	ldr	r2, [r7, #0]
 8004e18:	429a      	cmp	r2, r3
 8004e1a:	d001      	beq.n	8004e20 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004e1c:	2301      	movs	r3, #1
 8004e1e:	e14a      	b.n	80050b6 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	f003 0302 	and.w	r3, r3, #2
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d008      	beq.n	8004e3e <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004e2c:	4b82      	ldr	r3, [pc, #520]	; (8005038 <HAL_RCC_ClockConfig+0x260>)
 8004e2e:	685b      	ldr	r3, [r3, #4]
 8004e30:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	689b      	ldr	r3, [r3, #8]
 8004e38:	497f      	ldr	r1, [pc, #508]	; (8005038 <HAL_RCC_ClockConfig+0x260>)
 8004e3a:	4313      	orrs	r3, r2
 8004e3c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	f003 0301 	and.w	r3, r3, #1
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	f000 80dc 	beq.w	8005004 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	685b      	ldr	r3, [r3, #4]
 8004e50:	2b01      	cmp	r3, #1
 8004e52:	d13c      	bne.n	8004ece <HAL_RCC_ClockConfig+0xf6>
 8004e54:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004e58:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e5a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004e5c:	fa93 f3a3 	rbit	r3, r3
 8004e60:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8004e62:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004e64:	fab3 f383 	clz	r3, r3
 8004e68:	b2db      	uxtb	r3, r3
 8004e6a:	095b      	lsrs	r3, r3, #5
 8004e6c:	b2db      	uxtb	r3, r3
 8004e6e:	f043 0301 	orr.w	r3, r3, #1
 8004e72:	b2db      	uxtb	r3, r3
 8004e74:	2b01      	cmp	r3, #1
 8004e76:	d102      	bne.n	8004e7e <HAL_RCC_ClockConfig+0xa6>
 8004e78:	4b6f      	ldr	r3, [pc, #444]	; (8005038 <HAL_RCC_ClockConfig+0x260>)
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	e00f      	b.n	8004e9e <HAL_RCC_ClockConfig+0xc6>
 8004e7e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004e82:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e84:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004e86:	fa93 f3a3 	rbit	r3, r3
 8004e8a:	667b      	str	r3, [r7, #100]	; 0x64
 8004e8c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004e90:	663b      	str	r3, [r7, #96]	; 0x60
 8004e92:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004e94:	fa93 f3a3 	rbit	r3, r3
 8004e98:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004e9a:	4b67      	ldr	r3, [pc, #412]	; (8005038 <HAL_RCC_ClockConfig+0x260>)
 8004e9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e9e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004ea2:	65ba      	str	r2, [r7, #88]	; 0x58
 8004ea4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004ea6:	fa92 f2a2 	rbit	r2, r2
 8004eaa:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8004eac:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004eae:	fab2 f282 	clz	r2, r2
 8004eb2:	b2d2      	uxtb	r2, r2
 8004eb4:	f042 0220 	orr.w	r2, r2, #32
 8004eb8:	b2d2      	uxtb	r2, r2
 8004eba:	f002 021f 	and.w	r2, r2, #31
 8004ebe:	2101      	movs	r1, #1
 8004ec0:	fa01 f202 	lsl.w	r2, r1, r2
 8004ec4:	4013      	ands	r3, r2
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d17b      	bne.n	8004fc2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8004eca:	2301      	movs	r3, #1
 8004ecc:	e0f3      	b.n	80050b6 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	685b      	ldr	r3, [r3, #4]
 8004ed2:	2b02      	cmp	r3, #2
 8004ed4:	d13c      	bne.n	8004f50 <HAL_RCC_ClockConfig+0x178>
 8004ed6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004eda:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004edc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004ede:	fa93 f3a3 	rbit	r3, r3
 8004ee2:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8004ee4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004ee6:	fab3 f383 	clz	r3, r3
 8004eea:	b2db      	uxtb	r3, r3
 8004eec:	095b      	lsrs	r3, r3, #5
 8004eee:	b2db      	uxtb	r3, r3
 8004ef0:	f043 0301 	orr.w	r3, r3, #1
 8004ef4:	b2db      	uxtb	r3, r3
 8004ef6:	2b01      	cmp	r3, #1
 8004ef8:	d102      	bne.n	8004f00 <HAL_RCC_ClockConfig+0x128>
 8004efa:	4b4f      	ldr	r3, [pc, #316]	; (8005038 <HAL_RCC_ClockConfig+0x260>)
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	e00f      	b.n	8004f20 <HAL_RCC_ClockConfig+0x148>
 8004f00:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004f04:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f06:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004f08:	fa93 f3a3 	rbit	r3, r3
 8004f0c:	647b      	str	r3, [r7, #68]	; 0x44
 8004f0e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004f12:	643b      	str	r3, [r7, #64]	; 0x40
 8004f14:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004f16:	fa93 f3a3 	rbit	r3, r3
 8004f1a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004f1c:	4b46      	ldr	r3, [pc, #280]	; (8005038 <HAL_RCC_ClockConfig+0x260>)
 8004f1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f20:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004f24:	63ba      	str	r2, [r7, #56]	; 0x38
 8004f26:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004f28:	fa92 f2a2 	rbit	r2, r2
 8004f2c:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8004f2e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004f30:	fab2 f282 	clz	r2, r2
 8004f34:	b2d2      	uxtb	r2, r2
 8004f36:	f042 0220 	orr.w	r2, r2, #32
 8004f3a:	b2d2      	uxtb	r2, r2
 8004f3c:	f002 021f 	and.w	r2, r2, #31
 8004f40:	2101      	movs	r1, #1
 8004f42:	fa01 f202 	lsl.w	r2, r1, r2
 8004f46:	4013      	ands	r3, r2
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d13a      	bne.n	8004fc2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8004f4c:	2301      	movs	r3, #1
 8004f4e:	e0b2      	b.n	80050b6 <HAL_RCC_ClockConfig+0x2de>
 8004f50:	2302      	movs	r3, #2
 8004f52:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f56:	fa93 f3a3 	rbit	r3, r3
 8004f5a:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8004f5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004f5e:	fab3 f383 	clz	r3, r3
 8004f62:	b2db      	uxtb	r3, r3
 8004f64:	095b      	lsrs	r3, r3, #5
 8004f66:	b2db      	uxtb	r3, r3
 8004f68:	f043 0301 	orr.w	r3, r3, #1
 8004f6c:	b2db      	uxtb	r3, r3
 8004f6e:	2b01      	cmp	r3, #1
 8004f70:	d102      	bne.n	8004f78 <HAL_RCC_ClockConfig+0x1a0>
 8004f72:	4b31      	ldr	r3, [pc, #196]	; (8005038 <HAL_RCC_ClockConfig+0x260>)
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	e00d      	b.n	8004f94 <HAL_RCC_ClockConfig+0x1bc>
 8004f78:	2302      	movs	r3, #2
 8004f7a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f7e:	fa93 f3a3 	rbit	r3, r3
 8004f82:	627b      	str	r3, [r7, #36]	; 0x24
 8004f84:	2302      	movs	r3, #2
 8004f86:	623b      	str	r3, [r7, #32]
 8004f88:	6a3b      	ldr	r3, [r7, #32]
 8004f8a:	fa93 f3a3 	rbit	r3, r3
 8004f8e:	61fb      	str	r3, [r7, #28]
 8004f90:	4b29      	ldr	r3, [pc, #164]	; (8005038 <HAL_RCC_ClockConfig+0x260>)
 8004f92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f94:	2202      	movs	r2, #2
 8004f96:	61ba      	str	r2, [r7, #24]
 8004f98:	69ba      	ldr	r2, [r7, #24]
 8004f9a:	fa92 f2a2 	rbit	r2, r2
 8004f9e:	617a      	str	r2, [r7, #20]
  return result;
 8004fa0:	697a      	ldr	r2, [r7, #20]
 8004fa2:	fab2 f282 	clz	r2, r2
 8004fa6:	b2d2      	uxtb	r2, r2
 8004fa8:	f042 0220 	orr.w	r2, r2, #32
 8004fac:	b2d2      	uxtb	r2, r2
 8004fae:	f002 021f 	and.w	r2, r2, #31
 8004fb2:	2101      	movs	r1, #1
 8004fb4:	fa01 f202 	lsl.w	r2, r1, r2
 8004fb8:	4013      	ands	r3, r2
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d101      	bne.n	8004fc2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8004fbe:	2301      	movs	r3, #1
 8004fc0:	e079      	b.n	80050b6 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004fc2:	4b1d      	ldr	r3, [pc, #116]	; (8005038 <HAL_RCC_ClockConfig+0x260>)
 8004fc4:	685b      	ldr	r3, [r3, #4]
 8004fc6:	f023 0203 	bic.w	r2, r3, #3
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	685b      	ldr	r3, [r3, #4]
 8004fce:	491a      	ldr	r1, [pc, #104]	; (8005038 <HAL_RCC_ClockConfig+0x260>)
 8004fd0:	4313      	orrs	r3, r2
 8004fd2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004fd4:	f7fc fcc8 	bl	8001968 <HAL_GetTick>
 8004fd8:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004fda:	e00a      	b.n	8004ff2 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004fdc:	f7fc fcc4 	bl	8001968 <HAL_GetTick>
 8004fe0:	4602      	mov	r2, r0
 8004fe2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004fe4:	1ad3      	subs	r3, r2, r3
 8004fe6:	f241 3288 	movw	r2, #5000	; 0x1388
 8004fea:	4293      	cmp	r3, r2
 8004fec:	d901      	bls.n	8004ff2 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8004fee:	2303      	movs	r3, #3
 8004ff0:	e061      	b.n	80050b6 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004ff2:	4b11      	ldr	r3, [pc, #68]	; (8005038 <HAL_RCC_ClockConfig+0x260>)
 8004ff4:	685b      	ldr	r3, [r3, #4]
 8004ff6:	f003 020c 	and.w	r2, r3, #12
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	685b      	ldr	r3, [r3, #4]
 8004ffe:	009b      	lsls	r3, r3, #2
 8005000:	429a      	cmp	r2, r3
 8005002:	d1eb      	bne.n	8004fdc <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005004:	4b0b      	ldr	r3, [pc, #44]	; (8005034 <HAL_RCC_ClockConfig+0x25c>)
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	f003 0307 	and.w	r3, r3, #7
 800500c:	683a      	ldr	r2, [r7, #0]
 800500e:	429a      	cmp	r2, r3
 8005010:	d214      	bcs.n	800503c <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005012:	4b08      	ldr	r3, [pc, #32]	; (8005034 <HAL_RCC_ClockConfig+0x25c>)
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	f023 0207 	bic.w	r2, r3, #7
 800501a:	4906      	ldr	r1, [pc, #24]	; (8005034 <HAL_RCC_ClockConfig+0x25c>)
 800501c:	683b      	ldr	r3, [r7, #0]
 800501e:	4313      	orrs	r3, r2
 8005020:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005022:	4b04      	ldr	r3, [pc, #16]	; (8005034 <HAL_RCC_ClockConfig+0x25c>)
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	f003 0307 	and.w	r3, r3, #7
 800502a:	683a      	ldr	r2, [r7, #0]
 800502c:	429a      	cmp	r2, r3
 800502e:	d005      	beq.n	800503c <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8005030:	2301      	movs	r3, #1
 8005032:	e040      	b.n	80050b6 <HAL_RCC_ClockConfig+0x2de>
 8005034:	40022000 	.word	0x40022000
 8005038:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	f003 0304 	and.w	r3, r3, #4
 8005044:	2b00      	cmp	r3, #0
 8005046:	d008      	beq.n	800505a <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005048:	4b1d      	ldr	r3, [pc, #116]	; (80050c0 <HAL_RCC_ClockConfig+0x2e8>)
 800504a:	685b      	ldr	r3, [r3, #4]
 800504c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	68db      	ldr	r3, [r3, #12]
 8005054:	491a      	ldr	r1, [pc, #104]	; (80050c0 <HAL_RCC_ClockConfig+0x2e8>)
 8005056:	4313      	orrs	r3, r2
 8005058:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	f003 0308 	and.w	r3, r3, #8
 8005062:	2b00      	cmp	r3, #0
 8005064:	d009      	beq.n	800507a <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005066:	4b16      	ldr	r3, [pc, #88]	; (80050c0 <HAL_RCC_ClockConfig+0x2e8>)
 8005068:	685b      	ldr	r3, [r3, #4]
 800506a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	691b      	ldr	r3, [r3, #16]
 8005072:	00db      	lsls	r3, r3, #3
 8005074:	4912      	ldr	r1, [pc, #72]	; (80050c0 <HAL_RCC_ClockConfig+0x2e8>)
 8005076:	4313      	orrs	r3, r2
 8005078:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800507a:	f000 f829 	bl	80050d0 <HAL_RCC_GetSysClockFreq>
 800507e:	4601      	mov	r1, r0
 8005080:	4b0f      	ldr	r3, [pc, #60]	; (80050c0 <HAL_RCC_ClockConfig+0x2e8>)
 8005082:	685b      	ldr	r3, [r3, #4]
 8005084:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005088:	22f0      	movs	r2, #240	; 0xf0
 800508a:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800508c:	693a      	ldr	r2, [r7, #16]
 800508e:	fa92 f2a2 	rbit	r2, r2
 8005092:	60fa      	str	r2, [r7, #12]
  return result;
 8005094:	68fa      	ldr	r2, [r7, #12]
 8005096:	fab2 f282 	clz	r2, r2
 800509a:	b2d2      	uxtb	r2, r2
 800509c:	40d3      	lsrs	r3, r2
 800509e:	4a09      	ldr	r2, [pc, #36]	; (80050c4 <HAL_RCC_ClockConfig+0x2ec>)
 80050a0:	5cd3      	ldrb	r3, [r2, r3]
 80050a2:	fa21 f303 	lsr.w	r3, r1, r3
 80050a6:	4a08      	ldr	r2, [pc, #32]	; (80050c8 <HAL_RCC_ClockConfig+0x2f0>)
 80050a8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 80050aa:	4b08      	ldr	r3, [pc, #32]	; (80050cc <HAL_RCC_ClockConfig+0x2f4>)
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	4618      	mov	r0, r3
 80050b0:	f7fc fc16 	bl	80018e0 <HAL_InitTick>
  
  return HAL_OK;
 80050b4:	2300      	movs	r3, #0
}
 80050b6:	4618      	mov	r0, r3
 80050b8:	3778      	adds	r7, #120	; 0x78
 80050ba:	46bd      	mov	sp, r7
 80050bc:	bd80      	pop	{r7, pc}
 80050be:	bf00      	nop
 80050c0:	40021000 	.word	0x40021000
 80050c4:	0800be74 	.word	0x0800be74
 80050c8:	20000000 	.word	0x20000000
 80050cc:	20000004 	.word	0x20000004

080050d0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80050d0:	b480      	push	{r7}
 80050d2:	b08b      	sub	sp, #44	; 0x2c
 80050d4:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80050d6:	2300      	movs	r3, #0
 80050d8:	61fb      	str	r3, [r7, #28]
 80050da:	2300      	movs	r3, #0
 80050dc:	61bb      	str	r3, [r7, #24]
 80050de:	2300      	movs	r3, #0
 80050e0:	627b      	str	r3, [r7, #36]	; 0x24
 80050e2:	2300      	movs	r3, #0
 80050e4:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80050e6:	2300      	movs	r3, #0
 80050e8:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 80050ea:	4b29      	ldr	r3, [pc, #164]	; (8005190 <HAL_RCC_GetSysClockFreq+0xc0>)
 80050ec:	685b      	ldr	r3, [r3, #4]
 80050ee:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80050f0:	69fb      	ldr	r3, [r7, #28]
 80050f2:	f003 030c 	and.w	r3, r3, #12
 80050f6:	2b04      	cmp	r3, #4
 80050f8:	d002      	beq.n	8005100 <HAL_RCC_GetSysClockFreq+0x30>
 80050fa:	2b08      	cmp	r3, #8
 80050fc:	d003      	beq.n	8005106 <HAL_RCC_GetSysClockFreq+0x36>
 80050fe:	e03c      	b.n	800517a <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005100:	4b24      	ldr	r3, [pc, #144]	; (8005194 <HAL_RCC_GetSysClockFreq+0xc4>)
 8005102:	623b      	str	r3, [r7, #32]
      break;
 8005104:	e03c      	b.n	8005180 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8005106:	69fb      	ldr	r3, [r7, #28]
 8005108:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 800510c:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8005110:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005112:	68ba      	ldr	r2, [r7, #8]
 8005114:	fa92 f2a2 	rbit	r2, r2
 8005118:	607a      	str	r2, [r7, #4]
  return result;
 800511a:	687a      	ldr	r2, [r7, #4]
 800511c:	fab2 f282 	clz	r2, r2
 8005120:	b2d2      	uxtb	r2, r2
 8005122:	40d3      	lsrs	r3, r2
 8005124:	4a1c      	ldr	r2, [pc, #112]	; (8005198 <HAL_RCC_GetSysClockFreq+0xc8>)
 8005126:	5cd3      	ldrb	r3, [r2, r3]
 8005128:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 800512a:	4b19      	ldr	r3, [pc, #100]	; (8005190 <HAL_RCC_GetSysClockFreq+0xc0>)
 800512c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800512e:	f003 030f 	and.w	r3, r3, #15
 8005132:	220f      	movs	r2, #15
 8005134:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005136:	693a      	ldr	r2, [r7, #16]
 8005138:	fa92 f2a2 	rbit	r2, r2
 800513c:	60fa      	str	r2, [r7, #12]
  return result;
 800513e:	68fa      	ldr	r2, [r7, #12]
 8005140:	fab2 f282 	clz	r2, r2
 8005144:	b2d2      	uxtb	r2, r2
 8005146:	40d3      	lsrs	r3, r2
 8005148:	4a14      	ldr	r2, [pc, #80]	; (800519c <HAL_RCC_GetSysClockFreq+0xcc>)
 800514a:	5cd3      	ldrb	r3, [r2, r3]
 800514c:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 800514e:	69fb      	ldr	r3, [r7, #28]
 8005150:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005154:	2b00      	cmp	r3, #0
 8005156:	d008      	beq.n	800516a <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8005158:	4a0e      	ldr	r2, [pc, #56]	; (8005194 <HAL_RCC_GetSysClockFreq+0xc4>)
 800515a:	69bb      	ldr	r3, [r7, #24]
 800515c:	fbb2 f2f3 	udiv	r2, r2, r3
 8005160:	697b      	ldr	r3, [r7, #20]
 8005162:	fb02 f303 	mul.w	r3, r2, r3
 8005166:	627b      	str	r3, [r7, #36]	; 0x24
 8005168:	e004      	b.n	8005174 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 800516a:	697b      	ldr	r3, [r7, #20]
 800516c:	4a0c      	ldr	r2, [pc, #48]	; (80051a0 <HAL_RCC_GetSysClockFreq+0xd0>)
 800516e:	fb02 f303 	mul.w	r3, r2, r3
 8005172:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8005174:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005176:	623b      	str	r3, [r7, #32]
      break;
 8005178:	e002      	b.n	8005180 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800517a:	4b06      	ldr	r3, [pc, #24]	; (8005194 <HAL_RCC_GetSysClockFreq+0xc4>)
 800517c:	623b      	str	r3, [r7, #32]
      break;
 800517e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005180:	6a3b      	ldr	r3, [r7, #32]
}
 8005182:	4618      	mov	r0, r3
 8005184:	372c      	adds	r7, #44	; 0x2c
 8005186:	46bd      	mov	sp, r7
 8005188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800518c:	4770      	bx	lr
 800518e:	bf00      	nop
 8005190:	40021000 	.word	0x40021000
 8005194:	007a1200 	.word	0x007a1200
 8005198:	0800be84 	.word	0x0800be84
 800519c:	0800be94 	.word	0x0800be94
 80051a0:	003d0900 	.word	0x003d0900

080051a4 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80051a4:	b580      	push	{r7, lr}
 80051a6:	b092      	sub	sp, #72	; 0x48
 80051a8:	af00      	add	r7, sp, #0
 80051aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80051ac:	2300      	movs	r3, #0
 80051ae:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 80051b0:	2300      	movs	r3, #0
 80051b2:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 80051b4:	2300      	movs	r3, #0
 80051b6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	f000 80d4 	beq.w	8005370 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80051c8:	4b4e      	ldr	r3, [pc, #312]	; (8005304 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80051ca:	69db      	ldr	r3, [r3, #28]
 80051cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d10e      	bne.n	80051f2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80051d4:	4b4b      	ldr	r3, [pc, #300]	; (8005304 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80051d6:	69db      	ldr	r3, [r3, #28]
 80051d8:	4a4a      	ldr	r2, [pc, #296]	; (8005304 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80051da:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80051de:	61d3      	str	r3, [r2, #28]
 80051e0:	4b48      	ldr	r3, [pc, #288]	; (8005304 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80051e2:	69db      	ldr	r3, [r3, #28]
 80051e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80051e8:	60bb      	str	r3, [r7, #8]
 80051ea:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80051ec:	2301      	movs	r3, #1
 80051ee:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80051f2:	4b45      	ldr	r3, [pc, #276]	; (8005308 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d118      	bne.n	8005230 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80051fe:	4b42      	ldr	r3, [pc, #264]	; (8005308 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	4a41      	ldr	r2, [pc, #260]	; (8005308 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005204:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005208:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800520a:	f7fc fbad 	bl	8001968 <HAL_GetTick>
 800520e:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005210:	e008      	b.n	8005224 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005212:	f7fc fba9 	bl	8001968 <HAL_GetTick>
 8005216:	4602      	mov	r2, r0
 8005218:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800521a:	1ad3      	subs	r3, r2, r3
 800521c:	2b64      	cmp	r3, #100	; 0x64
 800521e:	d901      	bls.n	8005224 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8005220:	2303      	movs	r3, #3
 8005222:	e169      	b.n	80054f8 <HAL_RCCEx_PeriphCLKConfig+0x354>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005224:	4b38      	ldr	r3, [pc, #224]	; (8005308 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800522c:	2b00      	cmp	r3, #0
 800522e:	d0f0      	beq.n	8005212 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005230:	4b34      	ldr	r3, [pc, #208]	; (8005304 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005232:	6a1b      	ldr	r3, [r3, #32]
 8005234:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005238:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800523a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800523c:	2b00      	cmp	r3, #0
 800523e:	f000 8084 	beq.w	800534a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	685b      	ldr	r3, [r3, #4]
 8005246:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800524a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800524c:	429a      	cmp	r2, r3
 800524e:	d07c      	beq.n	800534a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005250:	4b2c      	ldr	r3, [pc, #176]	; (8005304 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005252:	6a1b      	ldr	r3, [r3, #32]
 8005254:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005258:	63fb      	str	r3, [r7, #60]	; 0x3c
 800525a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800525e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005260:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005262:	fa93 f3a3 	rbit	r3, r3
 8005266:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8005268:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800526a:	fab3 f383 	clz	r3, r3
 800526e:	b2db      	uxtb	r3, r3
 8005270:	461a      	mov	r2, r3
 8005272:	4b26      	ldr	r3, [pc, #152]	; (800530c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005274:	4413      	add	r3, r2
 8005276:	009b      	lsls	r3, r3, #2
 8005278:	461a      	mov	r2, r3
 800527a:	2301      	movs	r3, #1
 800527c:	6013      	str	r3, [r2, #0]
 800527e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005282:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005284:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005286:	fa93 f3a3 	rbit	r3, r3
 800528a:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 800528c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 800528e:	fab3 f383 	clz	r3, r3
 8005292:	b2db      	uxtb	r3, r3
 8005294:	461a      	mov	r2, r3
 8005296:	4b1d      	ldr	r3, [pc, #116]	; (800530c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005298:	4413      	add	r3, r2
 800529a:	009b      	lsls	r3, r3, #2
 800529c:	461a      	mov	r2, r3
 800529e:	2300      	movs	r3, #0
 80052a0:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80052a2:	4a18      	ldr	r2, [pc, #96]	; (8005304 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80052a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80052a6:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80052a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80052aa:	f003 0301 	and.w	r3, r3, #1
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d04b      	beq.n	800534a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80052b2:	f7fc fb59 	bl	8001968 <HAL_GetTick>
 80052b6:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80052b8:	e00a      	b.n	80052d0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80052ba:	f7fc fb55 	bl	8001968 <HAL_GetTick>
 80052be:	4602      	mov	r2, r0
 80052c0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80052c2:	1ad3      	subs	r3, r2, r3
 80052c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80052c8:	4293      	cmp	r3, r2
 80052ca:	d901      	bls.n	80052d0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 80052cc:	2303      	movs	r3, #3
 80052ce:	e113      	b.n	80054f8 <HAL_RCCEx_PeriphCLKConfig+0x354>
 80052d0:	2302      	movs	r3, #2
 80052d2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80052d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052d6:	fa93 f3a3 	rbit	r3, r3
 80052da:	627b      	str	r3, [r7, #36]	; 0x24
 80052dc:	2302      	movs	r3, #2
 80052de:	623b      	str	r3, [r7, #32]
 80052e0:	6a3b      	ldr	r3, [r7, #32]
 80052e2:	fa93 f3a3 	rbit	r3, r3
 80052e6:	61fb      	str	r3, [r7, #28]
  return result;
 80052e8:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80052ea:	fab3 f383 	clz	r3, r3
 80052ee:	b2db      	uxtb	r3, r3
 80052f0:	095b      	lsrs	r3, r3, #5
 80052f2:	b2db      	uxtb	r3, r3
 80052f4:	f043 0302 	orr.w	r3, r3, #2
 80052f8:	b2db      	uxtb	r3, r3
 80052fa:	2b02      	cmp	r3, #2
 80052fc:	d108      	bne.n	8005310 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 80052fe:	4b01      	ldr	r3, [pc, #4]	; (8005304 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005300:	6a1b      	ldr	r3, [r3, #32]
 8005302:	e00d      	b.n	8005320 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8005304:	40021000 	.word	0x40021000
 8005308:	40007000 	.word	0x40007000
 800530c:	10908100 	.word	0x10908100
 8005310:	2302      	movs	r3, #2
 8005312:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005314:	69bb      	ldr	r3, [r7, #24]
 8005316:	fa93 f3a3 	rbit	r3, r3
 800531a:	617b      	str	r3, [r7, #20]
 800531c:	4b78      	ldr	r3, [pc, #480]	; (8005500 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800531e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005320:	2202      	movs	r2, #2
 8005322:	613a      	str	r2, [r7, #16]
 8005324:	693a      	ldr	r2, [r7, #16]
 8005326:	fa92 f2a2 	rbit	r2, r2
 800532a:	60fa      	str	r2, [r7, #12]
  return result;
 800532c:	68fa      	ldr	r2, [r7, #12]
 800532e:	fab2 f282 	clz	r2, r2
 8005332:	b2d2      	uxtb	r2, r2
 8005334:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005338:	b2d2      	uxtb	r2, r2
 800533a:	f002 021f 	and.w	r2, r2, #31
 800533e:	2101      	movs	r1, #1
 8005340:	fa01 f202 	lsl.w	r2, r1, r2
 8005344:	4013      	ands	r3, r2
 8005346:	2b00      	cmp	r3, #0
 8005348:	d0b7      	beq.n	80052ba <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 800534a:	4b6d      	ldr	r3, [pc, #436]	; (8005500 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800534c:	6a1b      	ldr	r3, [r3, #32]
 800534e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	685b      	ldr	r3, [r3, #4]
 8005356:	496a      	ldr	r1, [pc, #424]	; (8005500 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005358:	4313      	orrs	r3, r2
 800535a:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800535c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8005360:	2b01      	cmp	r3, #1
 8005362:	d105      	bne.n	8005370 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005364:	4b66      	ldr	r3, [pc, #408]	; (8005500 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005366:	69db      	ldr	r3, [r3, #28]
 8005368:	4a65      	ldr	r2, [pc, #404]	; (8005500 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800536a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800536e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	f003 0301 	and.w	r3, r3, #1
 8005378:	2b00      	cmp	r3, #0
 800537a:	d008      	beq.n	800538e <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800537c:	4b60      	ldr	r3, [pc, #384]	; (8005500 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800537e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005380:	f023 0203 	bic.w	r2, r3, #3
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	689b      	ldr	r3, [r3, #8]
 8005388:	495d      	ldr	r1, [pc, #372]	; (8005500 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800538a:	4313      	orrs	r3, r2
 800538c:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	f003 0302 	and.w	r3, r3, #2
 8005396:	2b00      	cmp	r3, #0
 8005398:	d008      	beq.n	80053ac <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800539a:	4b59      	ldr	r3, [pc, #356]	; (8005500 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800539c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800539e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	68db      	ldr	r3, [r3, #12]
 80053a6:	4956      	ldr	r1, [pc, #344]	; (8005500 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80053a8:	4313      	orrs	r3, r2
 80053aa:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	f003 0304 	and.w	r3, r3, #4
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d008      	beq.n	80053ca <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80053b8:	4b51      	ldr	r3, [pc, #324]	; (8005500 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80053ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053bc:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	691b      	ldr	r3, [r3, #16]
 80053c4:	494e      	ldr	r1, [pc, #312]	; (8005500 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80053c6:	4313      	orrs	r3, r2
 80053c8:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	f003 0320 	and.w	r3, r3, #32
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d008      	beq.n	80053e8 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80053d6:	4b4a      	ldr	r3, [pc, #296]	; (8005500 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80053d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053da:	f023 0210 	bic.w	r2, r3, #16
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	69db      	ldr	r3, [r3, #28]
 80053e2:	4947      	ldr	r1, [pc, #284]	; (8005500 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80053e4:	4313      	orrs	r3, r2
 80053e6:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d008      	beq.n	8005406 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 80053f4:	4b42      	ldr	r3, [pc, #264]	; (8005500 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80053f6:	685b      	ldr	r3, [r3, #4]
 80053f8:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005400:	493f      	ldr	r1, [pc, #252]	; (8005500 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005402:	4313      	orrs	r3, r2
 8005404:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800540e:	2b00      	cmp	r3, #0
 8005410:	d008      	beq.n	8005424 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005412:	4b3b      	ldr	r3, [pc, #236]	; (8005500 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005414:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005416:	f023 0220 	bic.w	r2, r3, #32
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	6a1b      	ldr	r3, [r3, #32]
 800541e:	4938      	ldr	r1, [pc, #224]	; (8005500 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005420:	4313      	orrs	r3, r2
 8005422:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	f003 0308 	and.w	r3, r3, #8
 800542c:	2b00      	cmp	r3, #0
 800542e:	d008      	beq.n	8005442 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005430:	4b33      	ldr	r3, [pc, #204]	; (8005500 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005432:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005434:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	695b      	ldr	r3, [r3, #20]
 800543c:	4930      	ldr	r1, [pc, #192]	; (8005500 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800543e:	4313      	orrs	r3, r2
 8005440:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	f003 0310 	and.w	r3, r3, #16
 800544a:	2b00      	cmp	r3, #0
 800544c:	d008      	beq.n	8005460 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800544e:	4b2c      	ldr	r3, [pc, #176]	; (8005500 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005450:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005452:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	699b      	ldr	r3, [r3, #24]
 800545a:	4929      	ldr	r1, [pc, #164]	; (8005500 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800545c:	4313      	orrs	r3, r2
 800545e:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005468:	2b00      	cmp	r3, #0
 800546a:	d008      	beq.n	800547e <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800546c:	4b24      	ldr	r3, [pc, #144]	; (8005500 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800546e:	685b      	ldr	r3, [r3, #4]
 8005470:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005478:	4921      	ldr	r1, [pc, #132]	; (8005500 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800547a:	4313      	orrs	r3, r2
 800547c:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005486:	2b00      	cmp	r3, #0
 8005488:	d008      	beq.n	800549c <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800548a:	4b1d      	ldr	r3, [pc, #116]	; (8005500 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800548c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800548e:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005496:	491a      	ldr	r1, [pc, #104]	; (8005500 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005498:	4313      	orrs	r3, r2
 800549a:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d008      	beq.n	80054ba <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 80054a8:	4b15      	ldr	r3, [pc, #84]	; (8005500 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80054aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054ac:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054b4:	4912      	ldr	r1, [pc, #72]	; (8005500 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80054b6:	4313      	orrs	r3, r2
 80054b8:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d008      	beq.n	80054d8 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80054c6:	4b0e      	ldr	r3, [pc, #56]	; (8005500 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80054c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054ca:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054d2:	490b      	ldr	r1, [pc, #44]	; (8005500 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80054d4:	4313      	orrs	r3, r2
 80054d6:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d008      	beq.n	80054f6 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 80054e4:	4b06      	ldr	r3, [pc, #24]	; (8005500 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80054e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054e8:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80054f0:	4903      	ldr	r1, [pc, #12]	; (8005500 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80054f2:	4313      	orrs	r3, r2
 80054f4:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 80054f6:	2300      	movs	r3, #0
}
 80054f8:	4618      	mov	r0, r3
 80054fa:	3748      	adds	r7, #72	; 0x48
 80054fc:	46bd      	mov	sp, r7
 80054fe:	bd80      	pop	{r7, pc}
 8005500:	40021000 	.word	0x40021000

08005504 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005504:	b580      	push	{r7, lr}
 8005506:	b084      	sub	sp, #16
 8005508:	af00      	add	r7, sp, #0
 800550a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	2b00      	cmp	r3, #0
 8005510:	d101      	bne.n	8005516 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005512:	2301      	movs	r3, #1
 8005514:	e09d      	b.n	8005652 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800551a:	2b00      	cmp	r3, #0
 800551c:	d108      	bne.n	8005530 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	685b      	ldr	r3, [r3, #4]
 8005522:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005526:	d009      	beq.n	800553c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	2200      	movs	r2, #0
 800552c:	61da      	str	r2, [r3, #28]
 800552e:	e005      	b.n	800553c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	2200      	movs	r2, #0
 8005534:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	2200      	movs	r2, #0
 800553a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	2200      	movs	r2, #0
 8005540:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005548:	b2db      	uxtb	r3, r3
 800554a:	2b00      	cmp	r3, #0
 800554c:	d106      	bne.n	800555c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	2200      	movs	r2, #0
 8005552:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005556:	6878      	ldr	r0, [r7, #4]
 8005558:	f7fc f8c4 	bl	80016e4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	2202      	movs	r2, #2
 8005560:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	681a      	ldr	r2, [r3, #0]
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005572:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	68db      	ldr	r3, [r3, #12]
 8005578:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800557c:	d902      	bls.n	8005584 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800557e:	2300      	movs	r3, #0
 8005580:	60fb      	str	r3, [r7, #12]
 8005582:	e002      	b.n	800558a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8005584:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005588:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	68db      	ldr	r3, [r3, #12]
 800558e:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8005592:	d007      	beq.n	80055a4 <HAL_SPI_Init+0xa0>
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	68db      	ldr	r3, [r3, #12]
 8005598:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800559c:	d002      	beq.n	80055a4 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	2200      	movs	r2, #0
 80055a2:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	685b      	ldr	r3, [r3, #4]
 80055a8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	689b      	ldr	r3, [r3, #8]
 80055b0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80055b4:	431a      	orrs	r2, r3
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	691b      	ldr	r3, [r3, #16]
 80055ba:	f003 0302 	and.w	r3, r3, #2
 80055be:	431a      	orrs	r2, r3
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	695b      	ldr	r3, [r3, #20]
 80055c4:	f003 0301 	and.w	r3, r3, #1
 80055c8:	431a      	orrs	r2, r3
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	699b      	ldr	r3, [r3, #24]
 80055ce:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80055d2:	431a      	orrs	r2, r3
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	69db      	ldr	r3, [r3, #28]
 80055d8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80055dc:	431a      	orrs	r2, r3
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	6a1b      	ldr	r3, [r3, #32]
 80055e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80055e6:	ea42 0103 	orr.w	r1, r2, r3
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055ee:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	430a      	orrs	r2, r1
 80055f8:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	699b      	ldr	r3, [r3, #24]
 80055fe:	0c1b      	lsrs	r3, r3, #16
 8005600:	f003 0204 	and.w	r2, r3, #4
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005608:	f003 0310 	and.w	r3, r3, #16
 800560c:	431a      	orrs	r2, r3
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005612:	f003 0308 	and.w	r3, r3, #8
 8005616:	431a      	orrs	r2, r3
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	68db      	ldr	r3, [r3, #12]
 800561c:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8005620:	ea42 0103 	orr.w	r1, r2, r3
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	430a      	orrs	r2, r1
 8005630:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	69da      	ldr	r2, [r3, #28]
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005640:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	2200      	movs	r2, #0
 8005646:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	2201      	movs	r2, #1
 800564c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8005650:	2300      	movs	r3, #0
}
 8005652:	4618      	mov	r0, r3
 8005654:	3710      	adds	r7, #16
 8005656:	46bd      	mov	sp, r7
 8005658:	bd80      	pop	{r7, pc}

0800565a <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 800565a:	b480      	push	{r7}
 800565c:	b085      	sub	sp, #20
 800565e:	af00      	add	r7, sp, #0
 8005660:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	2200      	movs	r2, #0
 8005666:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800566a:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 800566e:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	b29a      	uxth	r2, r3
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800567a:	2300      	movs	r3, #0
}
 800567c:	4618      	mov	r0, r3
 800567e:	3714      	adds	r7, #20
 8005680:	46bd      	mov	sp, r7
 8005682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005686:	4770      	bx	lr

08005688 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8005688:	b480      	push	{r7}
 800568a:	b085      	sub	sp, #20
 800568c:	af00      	add	r7, sp, #0
 800568e:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8005690:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8005694:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800569c:	b29a      	uxth	r2, r3
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	b29b      	uxth	r3, r3
 80056a2:	43db      	mvns	r3, r3
 80056a4:	b29b      	uxth	r3, r3
 80056a6:	4013      	ands	r3, r2
 80056a8:	b29a      	uxth	r2, r3
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80056b0:	2300      	movs	r3, #0
}
 80056b2:	4618      	mov	r0, r3
 80056b4:	3714      	adds	r7, #20
 80056b6:	46bd      	mov	sp, r7
 80056b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056bc:	4770      	bx	lr

080056be <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80056be:	b084      	sub	sp, #16
 80056c0:	b480      	push	{r7}
 80056c2:	b083      	sub	sp, #12
 80056c4:	af00      	add	r7, sp, #0
 80056c6:	6078      	str	r0, [r7, #4]
 80056c8:	f107 0014 	add.w	r0, r7, #20
 80056cc:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	2201      	movs	r2, #1
 80056d4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	2200      	movs	r2, #0
 80056dc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	2200      	movs	r2, #0
 80056e4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	2200      	movs	r2, #0
 80056ec:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 80056f0:	2300      	movs	r3, #0
}
 80056f2:	4618      	mov	r0, r3
 80056f4:	370c      	adds	r7, #12
 80056f6:	46bd      	mov	sp, r7
 80056f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056fc:	b004      	add	sp, #16
 80056fe:	4770      	bx	lr

08005700 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005700:	b480      	push	{r7}
 8005702:	b09b      	sub	sp, #108	; 0x6c
 8005704:	af00      	add	r7, sp, #0
 8005706:	6078      	str	r0, [r7, #4]
 8005708:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800570a:	2300      	movs	r3, #0
 800570c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8005710:	687a      	ldr	r2, [r7, #4]
 8005712:	683b      	ldr	r3, [r7, #0]
 8005714:	781b      	ldrb	r3, [r3, #0]
 8005716:	009b      	lsls	r3, r3, #2
 8005718:	4413      	add	r3, r2
 800571a:	881b      	ldrh	r3, [r3, #0]
 800571c:	b29b      	uxth	r3, r3
 800571e:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8005722:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005726:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 800572a:	683b      	ldr	r3, [r7, #0]
 800572c:	78db      	ldrb	r3, [r3, #3]
 800572e:	2b03      	cmp	r3, #3
 8005730:	d81f      	bhi.n	8005772 <USB_ActivateEndpoint+0x72>
 8005732:	a201      	add	r2, pc, #4	; (adr r2, 8005738 <USB_ActivateEndpoint+0x38>)
 8005734:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005738:	08005749 	.word	0x08005749
 800573c:	08005765 	.word	0x08005765
 8005740:	0800577b 	.word	0x0800577b
 8005744:	08005757 	.word	0x08005757
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8005748:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800574c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005750:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8005754:	e012      	b.n	800577c <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8005756:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800575a:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 800575e:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8005762:	e00b      	b.n	800577c <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8005764:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8005768:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800576c:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8005770:	e004      	b.n	800577c <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8005772:	2301      	movs	r3, #1
 8005774:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 8005778:	e000      	b.n	800577c <USB_ActivateEndpoint+0x7c>
      break;
 800577a:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 800577c:	687a      	ldr	r2, [r7, #4]
 800577e:	683b      	ldr	r3, [r7, #0]
 8005780:	781b      	ldrb	r3, [r3, #0]
 8005782:	009b      	lsls	r3, r3, #2
 8005784:	441a      	add	r2, r3
 8005786:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800578a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800578e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005792:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005796:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800579a:	b29b      	uxth	r3, r3
 800579c:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800579e:	687a      	ldr	r2, [r7, #4]
 80057a0:	683b      	ldr	r3, [r7, #0]
 80057a2:	781b      	ldrb	r3, [r3, #0]
 80057a4:	009b      	lsls	r3, r3, #2
 80057a6:	4413      	add	r3, r2
 80057a8:	881b      	ldrh	r3, [r3, #0]
 80057aa:	b29b      	uxth	r3, r3
 80057ac:	b21b      	sxth	r3, r3
 80057ae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80057b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80057b6:	b21a      	sxth	r2, r3
 80057b8:	683b      	ldr	r3, [r7, #0]
 80057ba:	781b      	ldrb	r3, [r3, #0]
 80057bc:	b21b      	sxth	r3, r3
 80057be:	4313      	orrs	r3, r2
 80057c0:	b21b      	sxth	r3, r3
 80057c2:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 80057c6:	687a      	ldr	r2, [r7, #4]
 80057c8:	683b      	ldr	r3, [r7, #0]
 80057ca:	781b      	ldrb	r3, [r3, #0]
 80057cc:	009b      	lsls	r3, r3, #2
 80057ce:	441a      	add	r2, r3
 80057d0:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 80057d4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80057d8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80057dc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80057e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80057e4:	b29b      	uxth	r3, r3
 80057e6:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 80057e8:	683b      	ldr	r3, [r7, #0]
 80057ea:	7b1b      	ldrb	r3, [r3, #12]
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	f040 8149 	bne.w	8005a84 <USB_ActivateEndpoint+0x384>
  {
    if (ep->is_in != 0U)
 80057f2:	683b      	ldr	r3, [r7, #0]
 80057f4:	785b      	ldrb	r3, [r3, #1]
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	f000 8084 	beq.w	8005904 <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	617b      	str	r3, [r7, #20]
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005806:	b29b      	uxth	r3, r3
 8005808:	461a      	mov	r2, r3
 800580a:	697b      	ldr	r3, [r7, #20]
 800580c:	4413      	add	r3, r2
 800580e:	617b      	str	r3, [r7, #20]
 8005810:	683b      	ldr	r3, [r7, #0]
 8005812:	781b      	ldrb	r3, [r3, #0]
 8005814:	011a      	lsls	r2, r3, #4
 8005816:	697b      	ldr	r3, [r7, #20]
 8005818:	4413      	add	r3, r2
 800581a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800581e:	613b      	str	r3, [r7, #16]
 8005820:	683b      	ldr	r3, [r7, #0]
 8005822:	88db      	ldrh	r3, [r3, #6]
 8005824:	085b      	lsrs	r3, r3, #1
 8005826:	b29b      	uxth	r3, r3
 8005828:	005b      	lsls	r3, r3, #1
 800582a:	b29a      	uxth	r2, r3
 800582c:	693b      	ldr	r3, [r7, #16]
 800582e:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005830:	687a      	ldr	r2, [r7, #4]
 8005832:	683b      	ldr	r3, [r7, #0]
 8005834:	781b      	ldrb	r3, [r3, #0]
 8005836:	009b      	lsls	r3, r3, #2
 8005838:	4413      	add	r3, r2
 800583a:	881b      	ldrh	r3, [r3, #0]
 800583c:	81fb      	strh	r3, [r7, #14]
 800583e:	89fb      	ldrh	r3, [r7, #14]
 8005840:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005844:	2b00      	cmp	r3, #0
 8005846:	d01b      	beq.n	8005880 <USB_ActivateEndpoint+0x180>
 8005848:	687a      	ldr	r2, [r7, #4]
 800584a:	683b      	ldr	r3, [r7, #0]
 800584c:	781b      	ldrb	r3, [r3, #0]
 800584e:	009b      	lsls	r3, r3, #2
 8005850:	4413      	add	r3, r2
 8005852:	881b      	ldrh	r3, [r3, #0]
 8005854:	b29b      	uxth	r3, r3
 8005856:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800585a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800585e:	81bb      	strh	r3, [r7, #12]
 8005860:	687a      	ldr	r2, [r7, #4]
 8005862:	683b      	ldr	r3, [r7, #0]
 8005864:	781b      	ldrb	r3, [r3, #0]
 8005866:	009b      	lsls	r3, r3, #2
 8005868:	441a      	add	r2, r3
 800586a:	89bb      	ldrh	r3, [r7, #12]
 800586c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005870:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005874:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005878:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800587c:	b29b      	uxth	r3, r3
 800587e:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005880:	683b      	ldr	r3, [r7, #0]
 8005882:	78db      	ldrb	r3, [r3, #3]
 8005884:	2b01      	cmp	r3, #1
 8005886:	d020      	beq.n	80058ca <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8005888:	687a      	ldr	r2, [r7, #4]
 800588a:	683b      	ldr	r3, [r7, #0]
 800588c:	781b      	ldrb	r3, [r3, #0]
 800588e:	009b      	lsls	r3, r3, #2
 8005890:	4413      	add	r3, r2
 8005892:	881b      	ldrh	r3, [r3, #0]
 8005894:	b29b      	uxth	r3, r3
 8005896:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800589a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800589e:	813b      	strh	r3, [r7, #8]
 80058a0:	893b      	ldrh	r3, [r7, #8]
 80058a2:	f083 0320 	eor.w	r3, r3, #32
 80058a6:	813b      	strh	r3, [r7, #8]
 80058a8:	687a      	ldr	r2, [r7, #4]
 80058aa:	683b      	ldr	r3, [r7, #0]
 80058ac:	781b      	ldrb	r3, [r3, #0]
 80058ae:	009b      	lsls	r3, r3, #2
 80058b0:	441a      	add	r2, r3
 80058b2:	893b      	ldrh	r3, [r7, #8]
 80058b4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80058b8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80058bc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80058c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80058c4:	b29b      	uxth	r3, r3
 80058c6:	8013      	strh	r3, [r2, #0]
 80058c8:	e27f      	b.n	8005dca <USB_ActivateEndpoint+0x6ca>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80058ca:	687a      	ldr	r2, [r7, #4]
 80058cc:	683b      	ldr	r3, [r7, #0]
 80058ce:	781b      	ldrb	r3, [r3, #0]
 80058d0:	009b      	lsls	r3, r3, #2
 80058d2:	4413      	add	r3, r2
 80058d4:	881b      	ldrh	r3, [r3, #0]
 80058d6:	b29b      	uxth	r3, r3
 80058d8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80058dc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80058e0:	817b      	strh	r3, [r7, #10]
 80058e2:	687a      	ldr	r2, [r7, #4]
 80058e4:	683b      	ldr	r3, [r7, #0]
 80058e6:	781b      	ldrb	r3, [r3, #0]
 80058e8:	009b      	lsls	r3, r3, #2
 80058ea:	441a      	add	r2, r3
 80058ec:	897b      	ldrh	r3, [r7, #10]
 80058ee:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80058f2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80058f6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80058fa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80058fe:	b29b      	uxth	r3, r3
 8005900:	8013      	strh	r3, [r2, #0]
 8005902:	e262      	b.n	8005dca <USB_ActivateEndpoint+0x6ca>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800590e:	b29b      	uxth	r3, r3
 8005910:	461a      	mov	r2, r3
 8005912:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005914:	4413      	add	r3, r2
 8005916:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005918:	683b      	ldr	r3, [r7, #0]
 800591a:	781b      	ldrb	r3, [r3, #0]
 800591c:	011a      	lsls	r2, r3, #4
 800591e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005920:	4413      	add	r3, r2
 8005922:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8005926:	62bb      	str	r3, [r7, #40]	; 0x28
 8005928:	683b      	ldr	r3, [r7, #0]
 800592a:	88db      	ldrh	r3, [r3, #6]
 800592c:	085b      	lsrs	r3, r3, #1
 800592e:	b29b      	uxth	r3, r3
 8005930:	005b      	lsls	r3, r3, #1
 8005932:	b29a      	uxth	r2, r3
 8005934:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005936:	801a      	strh	r2, [r3, #0]

      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	627b      	str	r3, [r7, #36]	; 0x24
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005942:	b29b      	uxth	r3, r3
 8005944:	461a      	mov	r2, r3
 8005946:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005948:	4413      	add	r3, r2
 800594a:	627b      	str	r3, [r7, #36]	; 0x24
 800594c:	683b      	ldr	r3, [r7, #0]
 800594e:	781b      	ldrb	r3, [r3, #0]
 8005950:	011a      	lsls	r2, r3, #4
 8005952:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005954:	4413      	add	r3, r2
 8005956:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800595a:	623b      	str	r3, [r7, #32]
 800595c:	683b      	ldr	r3, [r7, #0]
 800595e:	691b      	ldr	r3, [r3, #16]
 8005960:	2b00      	cmp	r3, #0
 8005962:	d112      	bne.n	800598a <USB_ActivateEndpoint+0x28a>
 8005964:	6a3b      	ldr	r3, [r7, #32]
 8005966:	881b      	ldrh	r3, [r3, #0]
 8005968:	b29b      	uxth	r3, r3
 800596a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800596e:	b29a      	uxth	r2, r3
 8005970:	6a3b      	ldr	r3, [r7, #32]
 8005972:	801a      	strh	r2, [r3, #0]
 8005974:	6a3b      	ldr	r3, [r7, #32]
 8005976:	881b      	ldrh	r3, [r3, #0]
 8005978:	b29b      	uxth	r3, r3
 800597a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800597e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005982:	b29a      	uxth	r2, r3
 8005984:	6a3b      	ldr	r3, [r7, #32]
 8005986:	801a      	strh	r2, [r3, #0]
 8005988:	e02f      	b.n	80059ea <USB_ActivateEndpoint+0x2ea>
 800598a:	683b      	ldr	r3, [r7, #0]
 800598c:	691b      	ldr	r3, [r3, #16]
 800598e:	2b3e      	cmp	r3, #62	; 0x3e
 8005990:	d813      	bhi.n	80059ba <USB_ActivateEndpoint+0x2ba>
 8005992:	683b      	ldr	r3, [r7, #0]
 8005994:	691b      	ldr	r3, [r3, #16]
 8005996:	085b      	lsrs	r3, r3, #1
 8005998:	663b      	str	r3, [r7, #96]	; 0x60
 800599a:	683b      	ldr	r3, [r7, #0]
 800599c:	691b      	ldr	r3, [r3, #16]
 800599e:	f003 0301 	and.w	r3, r3, #1
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d002      	beq.n	80059ac <USB_ActivateEndpoint+0x2ac>
 80059a6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80059a8:	3301      	adds	r3, #1
 80059aa:	663b      	str	r3, [r7, #96]	; 0x60
 80059ac:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80059ae:	b29b      	uxth	r3, r3
 80059b0:	029b      	lsls	r3, r3, #10
 80059b2:	b29a      	uxth	r2, r3
 80059b4:	6a3b      	ldr	r3, [r7, #32]
 80059b6:	801a      	strh	r2, [r3, #0]
 80059b8:	e017      	b.n	80059ea <USB_ActivateEndpoint+0x2ea>
 80059ba:	683b      	ldr	r3, [r7, #0]
 80059bc:	691b      	ldr	r3, [r3, #16]
 80059be:	095b      	lsrs	r3, r3, #5
 80059c0:	663b      	str	r3, [r7, #96]	; 0x60
 80059c2:	683b      	ldr	r3, [r7, #0]
 80059c4:	691b      	ldr	r3, [r3, #16]
 80059c6:	f003 031f 	and.w	r3, r3, #31
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d102      	bne.n	80059d4 <USB_ActivateEndpoint+0x2d4>
 80059ce:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80059d0:	3b01      	subs	r3, #1
 80059d2:	663b      	str	r3, [r7, #96]	; 0x60
 80059d4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80059d6:	b29b      	uxth	r3, r3
 80059d8:	029b      	lsls	r3, r3, #10
 80059da:	b29b      	uxth	r3, r3
 80059dc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80059e0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80059e4:	b29a      	uxth	r2, r3
 80059e6:	6a3b      	ldr	r3, [r7, #32]
 80059e8:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80059ea:	687a      	ldr	r2, [r7, #4]
 80059ec:	683b      	ldr	r3, [r7, #0]
 80059ee:	781b      	ldrb	r3, [r3, #0]
 80059f0:	009b      	lsls	r3, r3, #2
 80059f2:	4413      	add	r3, r2
 80059f4:	881b      	ldrh	r3, [r3, #0]
 80059f6:	83fb      	strh	r3, [r7, #30]
 80059f8:	8bfb      	ldrh	r3, [r7, #30]
 80059fa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d01b      	beq.n	8005a3a <USB_ActivateEndpoint+0x33a>
 8005a02:	687a      	ldr	r2, [r7, #4]
 8005a04:	683b      	ldr	r3, [r7, #0]
 8005a06:	781b      	ldrb	r3, [r3, #0]
 8005a08:	009b      	lsls	r3, r3, #2
 8005a0a:	4413      	add	r3, r2
 8005a0c:	881b      	ldrh	r3, [r3, #0]
 8005a0e:	b29b      	uxth	r3, r3
 8005a10:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005a14:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a18:	83bb      	strh	r3, [r7, #28]
 8005a1a:	687a      	ldr	r2, [r7, #4]
 8005a1c:	683b      	ldr	r3, [r7, #0]
 8005a1e:	781b      	ldrb	r3, [r3, #0]
 8005a20:	009b      	lsls	r3, r3, #2
 8005a22:	441a      	add	r2, r3
 8005a24:	8bbb      	ldrh	r3, [r7, #28]
 8005a26:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005a2a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005a2e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005a32:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005a36:	b29b      	uxth	r3, r3
 8005a38:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005a3a:	687a      	ldr	r2, [r7, #4]
 8005a3c:	683b      	ldr	r3, [r7, #0]
 8005a3e:	781b      	ldrb	r3, [r3, #0]
 8005a40:	009b      	lsls	r3, r3, #2
 8005a42:	4413      	add	r3, r2
 8005a44:	881b      	ldrh	r3, [r3, #0]
 8005a46:	b29b      	uxth	r3, r3
 8005a48:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005a4c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a50:	837b      	strh	r3, [r7, #26]
 8005a52:	8b7b      	ldrh	r3, [r7, #26]
 8005a54:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005a58:	837b      	strh	r3, [r7, #26]
 8005a5a:	8b7b      	ldrh	r3, [r7, #26]
 8005a5c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005a60:	837b      	strh	r3, [r7, #26]
 8005a62:	687a      	ldr	r2, [r7, #4]
 8005a64:	683b      	ldr	r3, [r7, #0]
 8005a66:	781b      	ldrb	r3, [r3, #0]
 8005a68:	009b      	lsls	r3, r3, #2
 8005a6a:	441a      	add	r2, r3
 8005a6c:	8b7b      	ldrh	r3, [r7, #26]
 8005a6e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005a72:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005a76:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005a7a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005a7e:	b29b      	uxth	r3, r3
 8005a80:	8013      	strh	r3, [r2, #0]
 8005a82:	e1a2      	b.n	8005dca <USB_ActivateEndpoint+0x6ca>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 8005a84:	687a      	ldr	r2, [r7, #4]
 8005a86:	683b      	ldr	r3, [r7, #0]
 8005a88:	781b      	ldrb	r3, [r3, #0]
 8005a8a:	009b      	lsls	r3, r3, #2
 8005a8c:	4413      	add	r3, r2
 8005a8e:	881b      	ldrh	r3, [r3, #0]
 8005a90:	b29b      	uxth	r3, r3
 8005a92:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005a96:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a9a:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 8005a9e:	687a      	ldr	r2, [r7, #4]
 8005aa0:	683b      	ldr	r3, [r7, #0]
 8005aa2:	781b      	ldrb	r3, [r3, #0]
 8005aa4:	009b      	lsls	r3, r3, #2
 8005aa6:	441a      	add	r2, r3
 8005aa8:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8005aac:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005ab0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005ab4:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8005ab8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005abc:	b29b      	uxth	r3, r3
 8005abe:	8013      	strh	r3, [r2, #0]

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	65bb      	str	r3, [r7, #88]	; 0x58
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005aca:	b29b      	uxth	r3, r3
 8005acc:	461a      	mov	r2, r3
 8005ace:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005ad0:	4413      	add	r3, r2
 8005ad2:	65bb      	str	r3, [r7, #88]	; 0x58
 8005ad4:	683b      	ldr	r3, [r7, #0]
 8005ad6:	781b      	ldrb	r3, [r3, #0]
 8005ad8:	011a      	lsls	r2, r3, #4
 8005ada:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005adc:	4413      	add	r3, r2
 8005ade:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005ae2:	657b      	str	r3, [r7, #84]	; 0x54
 8005ae4:	683b      	ldr	r3, [r7, #0]
 8005ae6:	891b      	ldrh	r3, [r3, #8]
 8005ae8:	085b      	lsrs	r3, r3, #1
 8005aea:	b29b      	uxth	r3, r3
 8005aec:	005b      	lsls	r3, r3, #1
 8005aee:	b29a      	uxth	r2, r3
 8005af0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005af2:	801a      	strh	r2, [r3, #0]
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	653b      	str	r3, [r7, #80]	; 0x50
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005afe:	b29b      	uxth	r3, r3
 8005b00:	461a      	mov	r2, r3
 8005b02:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005b04:	4413      	add	r3, r2
 8005b06:	653b      	str	r3, [r7, #80]	; 0x50
 8005b08:	683b      	ldr	r3, [r7, #0]
 8005b0a:	781b      	ldrb	r3, [r3, #0]
 8005b0c:	011a      	lsls	r2, r3, #4
 8005b0e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005b10:	4413      	add	r3, r2
 8005b12:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8005b16:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005b18:	683b      	ldr	r3, [r7, #0]
 8005b1a:	895b      	ldrh	r3, [r3, #10]
 8005b1c:	085b      	lsrs	r3, r3, #1
 8005b1e:	b29b      	uxth	r3, r3
 8005b20:	005b      	lsls	r3, r3, #1
 8005b22:	b29a      	uxth	r2, r3
 8005b24:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005b26:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8005b28:	683b      	ldr	r3, [r7, #0]
 8005b2a:	785b      	ldrb	r3, [r3, #1]
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	f040 8091 	bne.w	8005c54 <USB_ActivateEndpoint+0x554>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005b32:	687a      	ldr	r2, [r7, #4]
 8005b34:	683b      	ldr	r3, [r7, #0]
 8005b36:	781b      	ldrb	r3, [r3, #0]
 8005b38:	009b      	lsls	r3, r3, #2
 8005b3a:	4413      	add	r3, r2
 8005b3c:	881b      	ldrh	r3, [r3, #0]
 8005b3e:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8005b40:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8005b42:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d01b      	beq.n	8005b82 <USB_ActivateEndpoint+0x482>
 8005b4a:	687a      	ldr	r2, [r7, #4]
 8005b4c:	683b      	ldr	r3, [r7, #0]
 8005b4e:	781b      	ldrb	r3, [r3, #0]
 8005b50:	009b      	lsls	r3, r3, #2
 8005b52:	4413      	add	r3, r2
 8005b54:	881b      	ldrh	r3, [r3, #0]
 8005b56:	b29b      	uxth	r3, r3
 8005b58:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005b5c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b60:	877b      	strh	r3, [r7, #58]	; 0x3a
 8005b62:	687a      	ldr	r2, [r7, #4]
 8005b64:	683b      	ldr	r3, [r7, #0]
 8005b66:	781b      	ldrb	r3, [r3, #0]
 8005b68:	009b      	lsls	r3, r3, #2
 8005b6a:	441a      	add	r2, r3
 8005b6c:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8005b6e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005b72:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005b76:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005b7a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005b7e:	b29b      	uxth	r3, r3
 8005b80:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005b82:	687a      	ldr	r2, [r7, #4]
 8005b84:	683b      	ldr	r3, [r7, #0]
 8005b86:	781b      	ldrb	r3, [r3, #0]
 8005b88:	009b      	lsls	r3, r3, #2
 8005b8a:	4413      	add	r3, r2
 8005b8c:	881b      	ldrh	r3, [r3, #0]
 8005b8e:	873b      	strh	r3, [r7, #56]	; 0x38
 8005b90:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8005b92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d01b      	beq.n	8005bd2 <USB_ActivateEndpoint+0x4d2>
 8005b9a:	687a      	ldr	r2, [r7, #4]
 8005b9c:	683b      	ldr	r3, [r7, #0]
 8005b9e:	781b      	ldrb	r3, [r3, #0]
 8005ba0:	009b      	lsls	r3, r3, #2
 8005ba2:	4413      	add	r3, r2
 8005ba4:	881b      	ldrh	r3, [r3, #0]
 8005ba6:	b29b      	uxth	r3, r3
 8005ba8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005bac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005bb0:	86fb      	strh	r3, [r7, #54]	; 0x36
 8005bb2:	687a      	ldr	r2, [r7, #4]
 8005bb4:	683b      	ldr	r3, [r7, #0]
 8005bb6:	781b      	ldrb	r3, [r3, #0]
 8005bb8:	009b      	lsls	r3, r3, #2
 8005bba:	441a      	add	r2, r3
 8005bbc:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005bbe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005bc2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005bc6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005bca:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005bce:	b29b      	uxth	r3, r3
 8005bd0:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005bd2:	687a      	ldr	r2, [r7, #4]
 8005bd4:	683b      	ldr	r3, [r7, #0]
 8005bd6:	781b      	ldrb	r3, [r3, #0]
 8005bd8:	009b      	lsls	r3, r3, #2
 8005bda:	4413      	add	r3, r2
 8005bdc:	881b      	ldrh	r3, [r3, #0]
 8005bde:	b29b      	uxth	r3, r3
 8005be0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005be4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005be8:	86bb      	strh	r3, [r7, #52]	; 0x34
 8005bea:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8005bec:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005bf0:	86bb      	strh	r3, [r7, #52]	; 0x34
 8005bf2:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8005bf4:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005bf8:	86bb      	strh	r3, [r7, #52]	; 0x34
 8005bfa:	687a      	ldr	r2, [r7, #4]
 8005bfc:	683b      	ldr	r3, [r7, #0]
 8005bfe:	781b      	ldrb	r3, [r3, #0]
 8005c00:	009b      	lsls	r3, r3, #2
 8005c02:	441a      	add	r2, r3
 8005c04:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8005c06:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005c0a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005c0e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005c12:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005c16:	b29b      	uxth	r3, r3
 8005c18:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005c1a:	687a      	ldr	r2, [r7, #4]
 8005c1c:	683b      	ldr	r3, [r7, #0]
 8005c1e:	781b      	ldrb	r3, [r3, #0]
 8005c20:	009b      	lsls	r3, r3, #2
 8005c22:	4413      	add	r3, r2
 8005c24:	881b      	ldrh	r3, [r3, #0]
 8005c26:	b29b      	uxth	r3, r3
 8005c28:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005c2c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005c30:	867b      	strh	r3, [r7, #50]	; 0x32
 8005c32:	687a      	ldr	r2, [r7, #4]
 8005c34:	683b      	ldr	r3, [r7, #0]
 8005c36:	781b      	ldrb	r3, [r3, #0]
 8005c38:	009b      	lsls	r3, r3, #2
 8005c3a:	441a      	add	r2, r3
 8005c3c:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8005c3e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005c42:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005c46:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005c4a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005c4e:	b29b      	uxth	r3, r3
 8005c50:	8013      	strh	r3, [r2, #0]
 8005c52:	e0ba      	b.n	8005dca <USB_ActivateEndpoint+0x6ca>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005c54:	687a      	ldr	r2, [r7, #4]
 8005c56:	683b      	ldr	r3, [r7, #0]
 8005c58:	781b      	ldrb	r3, [r3, #0]
 8005c5a:	009b      	lsls	r3, r3, #2
 8005c5c:	4413      	add	r3, r2
 8005c5e:	881b      	ldrh	r3, [r3, #0]
 8005c60:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8005c64:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8005c68:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d01d      	beq.n	8005cac <USB_ActivateEndpoint+0x5ac>
 8005c70:	687a      	ldr	r2, [r7, #4]
 8005c72:	683b      	ldr	r3, [r7, #0]
 8005c74:	781b      	ldrb	r3, [r3, #0]
 8005c76:	009b      	lsls	r3, r3, #2
 8005c78:	4413      	add	r3, r2
 8005c7a:	881b      	ldrh	r3, [r3, #0]
 8005c7c:	b29b      	uxth	r3, r3
 8005c7e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005c82:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c86:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8005c8a:	687a      	ldr	r2, [r7, #4]
 8005c8c:	683b      	ldr	r3, [r7, #0]
 8005c8e:	781b      	ldrb	r3, [r3, #0]
 8005c90:	009b      	lsls	r3, r3, #2
 8005c92:	441a      	add	r2, r3
 8005c94:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8005c98:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005c9c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005ca0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005ca4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005ca8:	b29b      	uxth	r3, r3
 8005caa:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005cac:	687a      	ldr	r2, [r7, #4]
 8005cae:	683b      	ldr	r3, [r7, #0]
 8005cb0:	781b      	ldrb	r3, [r3, #0]
 8005cb2:	009b      	lsls	r3, r3, #2
 8005cb4:	4413      	add	r3, r2
 8005cb6:	881b      	ldrh	r3, [r3, #0]
 8005cb8:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8005cbc:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8005cc0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d01d      	beq.n	8005d04 <USB_ActivateEndpoint+0x604>
 8005cc8:	687a      	ldr	r2, [r7, #4]
 8005cca:	683b      	ldr	r3, [r7, #0]
 8005ccc:	781b      	ldrb	r3, [r3, #0]
 8005cce:	009b      	lsls	r3, r3, #2
 8005cd0:	4413      	add	r3, r2
 8005cd2:	881b      	ldrh	r3, [r3, #0]
 8005cd4:	b29b      	uxth	r3, r3
 8005cd6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005cda:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005cde:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8005ce2:	687a      	ldr	r2, [r7, #4]
 8005ce4:	683b      	ldr	r3, [r7, #0]
 8005ce6:	781b      	ldrb	r3, [r3, #0]
 8005ce8:	009b      	lsls	r3, r3, #2
 8005cea:	441a      	add	r2, r3
 8005cec:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8005cf0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005cf4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005cf8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005cfc:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005d00:	b29b      	uxth	r3, r3
 8005d02:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005d04:	683b      	ldr	r3, [r7, #0]
 8005d06:	78db      	ldrb	r3, [r3, #3]
 8005d08:	2b01      	cmp	r3, #1
 8005d0a:	d024      	beq.n	8005d56 <USB_ActivateEndpoint+0x656>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8005d0c:	687a      	ldr	r2, [r7, #4]
 8005d0e:	683b      	ldr	r3, [r7, #0]
 8005d10:	781b      	ldrb	r3, [r3, #0]
 8005d12:	009b      	lsls	r3, r3, #2
 8005d14:	4413      	add	r3, r2
 8005d16:	881b      	ldrh	r3, [r3, #0]
 8005d18:	b29b      	uxth	r3, r3
 8005d1a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005d1e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005d22:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8005d26:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8005d2a:	f083 0320 	eor.w	r3, r3, #32
 8005d2e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8005d32:	687a      	ldr	r2, [r7, #4]
 8005d34:	683b      	ldr	r3, [r7, #0]
 8005d36:	781b      	ldrb	r3, [r3, #0]
 8005d38:	009b      	lsls	r3, r3, #2
 8005d3a:	441a      	add	r2, r3
 8005d3c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8005d40:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005d44:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005d48:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005d4c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005d50:	b29b      	uxth	r3, r3
 8005d52:	8013      	strh	r3, [r2, #0]
 8005d54:	e01d      	b.n	8005d92 <USB_ActivateEndpoint+0x692>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005d56:	687a      	ldr	r2, [r7, #4]
 8005d58:	683b      	ldr	r3, [r7, #0]
 8005d5a:	781b      	ldrb	r3, [r3, #0]
 8005d5c:	009b      	lsls	r3, r3, #2
 8005d5e:	4413      	add	r3, r2
 8005d60:	881b      	ldrh	r3, [r3, #0]
 8005d62:	b29b      	uxth	r3, r3
 8005d64:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005d68:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005d6c:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8005d70:	687a      	ldr	r2, [r7, #4]
 8005d72:	683b      	ldr	r3, [r7, #0]
 8005d74:	781b      	ldrb	r3, [r3, #0]
 8005d76:	009b      	lsls	r3, r3, #2
 8005d78:	441a      	add	r2, r3
 8005d7a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8005d7e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005d82:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005d86:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005d8a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005d8e:	b29b      	uxth	r3, r3
 8005d90:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005d92:	687a      	ldr	r2, [r7, #4]
 8005d94:	683b      	ldr	r3, [r7, #0]
 8005d96:	781b      	ldrb	r3, [r3, #0]
 8005d98:	009b      	lsls	r3, r3, #2
 8005d9a:	4413      	add	r3, r2
 8005d9c:	881b      	ldrh	r3, [r3, #0]
 8005d9e:	b29b      	uxth	r3, r3
 8005da0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005da4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005da8:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8005daa:	687a      	ldr	r2, [r7, #4]
 8005dac:	683b      	ldr	r3, [r7, #0]
 8005dae:	781b      	ldrb	r3, [r3, #0]
 8005db0:	009b      	lsls	r3, r3, #2
 8005db2:	441a      	add	r2, r3
 8005db4:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8005db6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005dba:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005dbe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005dc2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005dc6:	b29b      	uxth	r3, r3
 8005dc8:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 8005dca:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8005dce:	4618      	mov	r0, r3
 8005dd0:	376c      	adds	r7, #108	; 0x6c
 8005dd2:	46bd      	mov	sp, r7
 8005dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dd8:	4770      	bx	lr
 8005dda:	bf00      	nop

08005ddc <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005ddc:	b480      	push	{r7}
 8005dde:	b08d      	sub	sp, #52	; 0x34
 8005de0:	af00      	add	r7, sp, #0
 8005de2:	6078      	str	r0, [r7, #4]
 8005de4:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8005de6:	683b      	ldr	r3, [r7, #0]
 8005de8:	7b1b      	ldrb	r3, [r3, #12]
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	f040 808e 	bne.w	8005f0c <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8005df0:	683b      	ldr	r3, [r7, #0]
 8005df2:	785b      	ldrb	r3, [r3, #1]
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d044      	beq.n	8005e82 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005df8:	687a      	ldr	r2, [r7, #4]
 8005dfa:	683b      	ldr	r3, [r7, #0]
 8005dfc:	781b      	ldrb	r3, [r3, #0]
 8005dfe:	009b      	lsls	r3, r3, #2
 8005e00:	4413      	add	r3, r2
 8005e02:	881b      	ldrh	r3, [r3, #0]
 8005e04:	81bb      	strh	r3, [r7, #12]
 8005e06:	89bb      	ldrh	r3, [r7, #12]
 8005e08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d01b      	beq.n	8005e48 <USB_DeactivateEndpoint+0x6c>
 8005e10:	687a      	ldr	r2, [r7, #4]
 8005e12:	683b      	ldr	r3, [r7, #0]
 8005e14:	781b      	ldrb	r3, [r3, #0]
 8005e16:	009b      	lsls	r3, r3, #2
 8005e18:	4413      	add	r3, r2
 8005e1a:	881b      	ldrh	r3, [r3, #0]
 8005e1c:	b29b      	uxth	r3, r3
 8005e1e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005e22:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e26:	817b      	strh	r3, [r7, #10]
 8005e28:	687a      	ldr	r2, [r7, #4]
 8005e2a:	683b      	ldr	r3, [r7, #0]
 8005e2c:	781b      	ldrb	r3, [r3, #0]
 8005e2e:	009b      	lsls	r3, r3, #2
 8005e30:	441a      	add	r2, r3
 8005e32:	897b      	ldrh	r3, [r7, #10]
 8005e34:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005e38:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005e3c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005e40:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005e44:	b29b      	uxth	r3, r3
 8005e46:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005e48:	687a      	ldr	r2, [r7, #4]
 8005e4a:	683b      	ldr	r3, [r7, #0]
 8005e4c:	781b      	ldrb	r3, [r3, #0]
 8005e4e:	009b      	lsls	r3, r3, #2
 8005e50:	4413      	add	r3, r2
 8005e52:	881b      	ldrh	r3, [r3, #0]
 8005e54:	b29b      	uxth	r3, r3
 8005e56:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005e5a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005e5e:	813b      	strh	r3, [r7, #8]
 8005e60:	687a      	ldr	r2, [r7, #4]
 8005e62:	683b      	ldr	r3, [r7, #0]
 8005e64:	781b      	ldrb	r3, [r3, #0]
 8005e66:	009b      	lsls	r3, r3, #2
 8005e68:	441a      	add	r2, r3
 8005e6a:	893b      	ldrh	r3, [r7, #8]
 8005e6c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005e70:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005e74:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005e78:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005e7c:	b29b      	uxth	r3, r3
 8005e7e:	8013      	strh	r3, [r2, #0]
 8005e80:	e192      	b.n	80061a8 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005e82:	687a      	ldr	r2, [r7, #4]
 8005e84:	683b      	ldr	r3, [r7, #0]
 8005e86:	781b      	ldrb	r3, [r3, #0]
 8005e88:	009b      	lsls	r3, r3, #2
 8005e8a:	4413      	add	r3, r2
 8005e8c:	881b      	ldrh	r3, [r3, #0]
 8005e8e:	827b      	strh	r3, [r7, #18]
 8005e90:	8a7b      	ldrh	r3, [r7, #18]
 8005e92:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d01b      	beq.n	8005ed2 <USB_DeactivateEndpoint+0xf6>
 8005e9a:	687a      	ldr	r2, [r7, #4]
 8005e9c:	683b      	ldr	r3, [r7, #0]
 8005e9e:	781b      	ldrb	r3, [r3, #0]
 8005ea0:	009b      	lsls	r3, r3, #2
 8005ea2:	4413      	add	r3, r2
 8005ea4:	881b      	ldrh	r3, [r3, #0]
 8005ea6:	b29b      	uxth	r3, r3
 8005ea8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005eac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005eb0:	823b      	strh	r3, [r7, #16]
 8005eb2:	687a      	ldr	r2, [r7, #4]
 8005eb4:	683b      	ldr	r3, [r7, #0]
 8005eb6:	781b      	ldrb	r3, [r3, #0]
 8005eb8:	009b      	lsls	r3, r3, #2
 8005eba:	441a      	add	r2, r3
 8005ebc:	8a3b      	ldrh	r3, [r7, #16]
 8005ebe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005ec2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005ec6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005eca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005ece:	b29b      	uxth	r3, r3
 8005ed0:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005ed2:	687a      	ldr	r2, [r7, #4]
 8005ed4:	683b      	ldr	r3, [r7, #0]
 8005ed6:	781b      	ldrb	r3, [r3, #0]
 8005ed8:	009b      	lsls	r3, r3, #2
 8005eda:	4413      	add	r3, r2
 8005edc:	881b      	ldrh	r3, [r3, #0]
 8005ede:	b29b      	uxth	r3, r3
 8005ee0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005ee4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ee8:	81fb      	strh	r3, [r7, #14]
 8005eea:	687a      	ldr	r2, [r7, #4]
 8005eec:	683b      	ldr	r3, [r7, #0]
 8005eee:	781b      	ldrb	r3, [r3, #0]
 8005ef0:	009b      	lsls	r3, r3, #2
 8005ef2:	441a      	add	r2, r3
 8005ef4:	89fb      	ldrh	r3, [r7, #14]
 8005ef6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005efa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005efe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005f02:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005f06:	b29b      	uxth	r3, r3
 8005f08:	8013      	strh	r3, [r2, #0]
 8005f0a:	e14d      	b.n	80061a8 <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 8005f0c:	683b      	ldr	r3, [r7, #0]
 8005f0e:	785b      	ldrb	r3, [r3, #1]
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	f040 80a5 	bne.w	8006060 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005f16:	687a      	ldr	r2, [r7, #4]
 8005f18:	683b      	ldr	r3, [r7, #0]
 8005f1a:	781b      	ldrb	r3, [r3, #0]
 8005f1c:	009b      	lsls	r3, r3, #2
 8005f1e:	4413      	add	r3, r2
 8005f20:	881b      	ldrh	r3, [r3, #0]
 8005f22:	843b      	strh	r3, [r7, #32]
 8005f24:	8c3b      	ldrh	r3, [r7, #32]
 8005f26:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d01b      	beq.n	8005f66 <USB_DeactivateEndpoint+0x18a>
 8005f2e:	687a      	ldr	r2, [r7, #4]
 8005f30:	683b      	ldr	r3, [r7, #0]
 8005f32:	781b      	ldrb	r3, [r3, #0]
 8005f34:	009b      	lsls	r3, r3, #2
 8005f36:	4413      	add	r3, r2
 8005f38:	881b      	ldrh	r3, [r3, #0]
 8005f3a:	b29b      	uxth	r3, r3
 8005f3c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005f40:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f44:	83fb      	strh	r3, [r7, #30]
 8005f46:	687a      	ldr	r2, [r7, #4]
 8005f48:	683b      	ldr	r3, [r7, #0]
 8005f4a:	781b      	ldrb	r3, [r3, #0]
 8005f4c:	009b      	lsls	r3, r3, #2
 8005f4e:	441a      	add	r2, r3
 8005f50:	8bfb      	ldrh	r3, [r7, #30]
 8005f52:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005f56:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005f5a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005f5e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005f62:	b29b      	uxth	r3, r3
 8005f64:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005f66:	687a      	ldr	r2, [r7, #4]
 8005f68:	683b      	ldr	r3, [r7, #0]
 8005f6a:	781b      	ldrb	r3, [r3, #0]
 8005f6c:	009b      	lsls	r3, r3, #2
 8005f6e:	4413      	add	r3, r2
 8005f70:	881b      	ldrh	r3, [r3, #0]
 8005f72:	83bb      	strh	r3, [r7, #28]
 8005f74:	8bbb      	ldrh	r3, [r7, #28]
 8005f76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d01b      	beq.n	8005fb6 <USB_DeactivateEndpoint+0x1da>
 8005f7e:	687a      	ldr	r2, [r7, #4]
 8005f80:	683b      	ldr	r3, [r7, #0]
 8005f82:	781b      	ldrb	r3, [r3, #0]
 8005f84:	009b      	lsls	r3, r3, #2
 8005f86:	4413      	add	r3, r2
 8005f88:	881b      	ldrh	r3, [r3, #0]
 8005f8a:	b29b      	uxth	r3, r3
 8005f8c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005f90:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f94:	837b      	strh	r3, [r7, #26]
 8005f96:	687a      	ldr	r2, [r7, #4]
 8005f98:	683b      	ldr	r3, [r7, #0]
 8005f9a:	781b      	ldrb	r3, [r3, #0]
 8005f9c:	009b      	lsls	r3, r3, #2
 8005f9e:	441a      	add	r2, r3
 8005fa0:	8b7b      	ldrh	r3, [r7, #26]
 8005fa2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005fa6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005faa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005fae:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005fb2:	b29b      	uxth	r3, r3
 8005fb4:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8005fb6:	687a      	ldr	r2, [r7, #4]
 8005fb8:	683b      	ldr	r3, [r7, #0]
 8005fba:	781b      	ldrb	r3, [r3, #0]
 8005fbc:	009b      	lsls	r3, r3, #2
 8005fbe:	4413      	add	r3, r2
 8005fc0:	881b      	ldrh	r3, [r3, #0]
 8005fc2:	b29b      	uxth	r3, r3
 8005fc4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005fc8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005fcc:	833b      	strh	r3, [r7, #24]
 8005fce:	687a      	ldr	r2, [r7, #4]
 8005fd0:	683b      	ldr	r3, [r7, #0]
 8005fd2:	781b      	ldrb	r3, [r3, #0]
 8005fd4:	009b      	lsls	r3, r3, #2
 8005fd6:	441a      	add	r2, r3
 8005fd8:	8b3b      	ldrh	r3, [r7, #24]
 8005fda:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005fde:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005fe2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005fe6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005fea:	b29b      	uxth	r3, r3
 8005fec:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005fee:	687a      	ldr	r2, [r7, #4]
 8005ff0:	683b      	ldr	r3, [r7, #0]
 8005ff2:	781b      	ldrb	r3, [r3, #0]
 8005ff4:	009b      	lsls	r3, r3, #2
 8005ff6:	4413      	add	r3, r2
 8005ff8:	881b      	ldrh	r3, [r3, #0]
 8005ffa:	b29b      	uxth	r3, r3
 8005ffc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006000:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006004:	82fb      	strh	r3, [r7, #22]
 8006006:	687a      	ldr	r2, [r7, #4]
 8006008:	683b      	ldr	r3, [r7, #0]
 800600a:	781b      	ldrb	r3, [r3, #0]
 800600c:	009b      	lsls	r3, r3, #2
 800600e:	441a      	add	r2, r3
 8006010:	8afb      	ldrh	r3, [r7, #22]
 8006012:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006016:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800601a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800601e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006022:	b29b      	uxth	r3, r3
 8006024:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006026:	687a      	ldr	r2, [r7, #4]
 8006028:	683b      	ldr	r3, [r7, #0]
 800602a:	781b      	ldrb	r3, [r3, #0]
 800602c:	009b      	lsls	r3, r3, #2
 800602e:	4413      	add	r3, r2
 8006030:	881b      	ldrh	r3, [r3, #0]
 8006032:	b29b      	uxth	r3, r3
 8006034:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006038:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800603c:	82bb      	strh	r3, [r7, #20]
 800603e:	687a      	ldr	r2, [r7, #4]
 8006040:	683b      	ldr	r3, [r7, #0]
 8006042:	781b      	ldrb	r3, [r3, #0]
 8006044:	009b      	lsls	r3, r3, #2
 8006046:	441a      	add	r2, r3
 8006048:	8abb      	ldrh	r3, [r7, #20]
 800604a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800604e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006052:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006056:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800605a:	b29b      	uxth	r3, r3
 800605c:	8013      	strh	r3, [r2, #0]
 800605e:	e0a3      	b.n	80061a8 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006060:	687a      	ldr	r2, [r7, #4]
 8006062:	683b      	ldr	r3, [r7, #0]
 8006064:	781b      	ldrb	r3, [r3, #0]
 8006066:	009b      	lsls	r3, r3, #2
 8006068:	4413      	add	r3, r2
 800606a:	881b      	ldrh	r3, [r3, #0]
 800606c:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800606e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8006070:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006074:	2b00      	cmp	r3, #0
 8006076:	d01b      	beq.n	80060b0 <USB_DeactivateEndpoint+0x2d4>
 8006078:	687a      	ldr	r2, [r7, #4]
 800607a:	683b      	ldr	r3, [r7, #0]
 800607c:	781b      	ldrb	r3, [r3, #0]
 800607e:	009b      	lsls	r3, r3, #2
 8006080:	4413      	add	r3, r2
 8006082:	881b      	ldrh	r3, [r3, #0]
 8006084:	b29b      	uxth	r3, r3
 8006086:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800608a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800608e:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8006090:	687a      	ldr	r2, [r7, #4]
 8006092:	683b      	ldr	r3, [r7, #0]
 8006094:	781b      	ldrb	r3, [r3, #0]
 8006096:	009b      	lsls	r3, r3, #2
 8006098:	441a      	add	r2, r3
 800609a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800609c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80060a0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80060a4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80060a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80060ac:	b29b      	uxth	r3, r3
 80060ae:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80060b0:	687a      	ldr	r2, [r7, #4]
 80060b2:	683b      	ldr	r3, [r7, #0]
 80060b4:	781b      	ldrb	r3, [r3, #0]
 80060b6:	009b      	lsls	r3, r3, #2
 80060b8:	4413      	add	r3, r2
 80060ba:	881b      	ldrh	r3, [r3, #0]
 80060bc:	857b      	strh	r3, [r7, #42]	; 0x2a
 80060be:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80060c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d01b      	beq.n	8006100 <USB_DeactivateEndpoint+0x324>
 80060c8:	687a      	ldr	r2, [r7, #4]
 80060ca:	683b      	ldr	r3, [r7, #0]
 80060cc:	781b      	ldrb	r3, [r3, #0]
 80060ce:	009b      	lsls	r3, r3, #2
 80060d0:	4413      	add	r3, r2
 80060d2:	881b      	ldrh	r3, [r3, #0]
 80060d4:	b29b      	uxth	r3, r3
 80060d6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80060da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80060de:	853b      	strh	r3, [r7, #40]	; 0x28
 80060e0:	687a      	ldr	r2, [r7, #4]
 80060e2:	683b      	ldr	r3, [r7, #0]
 80060e4:	781b      	ldrb	r3, [r3, #0]
 80060e6:	009b      	lsls	r3, r3, #2
 80060e8:	441a      	add	r2, r3
 80060ea:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80060ec:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80060f0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80060f4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80060f8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80060fc:	b29b      	uxth	r3, r3
 80060fe:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8006100:	687a      	ldr	r2, [r7, #4]
 8006102:	683b      	ldr	r3, [r7, #0]
 8006104:	781b      	ldrb	r3, [r3, #0]
 8006106:	009b      	lsls	r3, r3, #2
 8006108:	4413      	add	r3, r2
 800610a:	881b      	ldrh	r3, [r3, #0]
 800610c:	b29b      	uxth	r3, r3
 800610e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006112:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006116:	84fb      	strh	r3, [r7, #38]	; 0x26
 8006118:	687a      	ldr	r2, [r7, #4]
 800611a:	683b      	ldr	r3, [r7, #0]
 800611c:	781b      	ldrb	r3, [r3, #0]
 800611e:	009b      	lsls	r3, r3, #2
 8006120:	441a      	add	r2, r3
 8006122:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006124:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006128:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800612c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006130:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006134:	b29b      	uxth	r3, r3
 8006136:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006138:	687a      	ldr	r2, [r7, #4]
 800613a:	683b      	ldr	r3, [r7, #0]
 800613c:	781b      	ldrb	r3, [r3, #0]
 800613e:	009b      	lsls	r3, r3, #2
 8006140:	4413      	add	r3, r2
 8006142:	881b      	ldrh	r3, [r3, #0]
 8006144:	b29b      	uxth	r3, r3
 8006146:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800614a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800614e:	84bb      	strh	r3, [r7, #36]	; 0x24
 8006150:	687a      	ldr	r2, [r7, #4]
 8006152:	683b      	ldr	r3, [r7, #0]
 8006154:	781b      	ldrb	r3, [r3, #0]
 8006156:	009b      	lsls	r3, r3, #2
 8006158:	441a      	add	r2, r3
 800615a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800615c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006160:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006164:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006168:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800616c:	b29b      	uxth	r3, r3
 800616e:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006170:	687a      	ldr	r2, [r7, #4]
 8006172:	683b      	ldr	r3, [r7, #0]
 8006174:	781b      	ldrb	r3, [r3, #0]
 8006176:	009b      	lsls	r3, r3, #2
 8006178:	4413      	add	r3, r2
 800617a:	881b      	ldrh	r3, [r3, #0]
 800617c:	b29b      	uxth	r3, r3
 800617e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006182:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006186:	847b      	strh	r3, [r7, #34]	; 0x22
 8006188:	687a      	ldr	r2, [r7, #4]
 800618a:	683b      	ldr	r3, [r7, #0]
 800618c:	781b      	ldrb	r3, [r3, #0]
 800618e:	009b      	lsls	r3, r3, #2
 8006190:	441a      	add	r2, r3
 8006192:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006194:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006198:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800619c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80061a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80061a4:	b29b      	uxth	r3, r3
 80061a6:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 80061a8:	2300      	movs	r3, #0
}
 80061aa:	4618      	mov	r0, r3
 80061ac:	3734      	adds	r7, #52	; 0x34
 80061ae:	46bd      	mov	sp, r7
 80061b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061b4:	4770      	bx	lr

080061b6 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80061b6:	b580      	push	{r7, lr}
 80061b8:	b0c4      	sub	sp, #272	; 0x110
 80061ba:	af00      	add	r7, sp, #0
 80061bc:	1d3b      	adds	r3, r7, #4
 80061be:	6018      	str	r0, [r3, #0]
 80061c0:	463b      	mov	r3, r7
 80061c2:	6019      	str	r1, [r3, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80061c4:	463b      	mov	r3, r7
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	785b      	ldrb	r3, [r3, #1]
 80061ca:	2b01      	cmp	r3, #1
 80061cc:	f040 8557 	bne.w	8006c7e <USB_EPStartXfer+0xac8>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 80061d0:	463b      	mov	r3, r7
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	699a      	ldr	r2, [r3, #24]
 80061d6:	463b      	mov	r3, r7
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	691b      	ldr	r3, [r3, #16]
 80061dc:	429a      	cmp	r2, r3
 80061de:	d905      	bls.n	80061ec <USB_EPStartXfer+0x36>
    {
      len = ep->maxpacket;
 80061e0:	463b      	mov	r3, r7
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	691b      	ldr	r3, [r3, #16]
 80061e6:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80061ea:	e004      	b.n	80061f6 <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 80061ec:	463b      	mov	r3, r7
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	699b      	ldr	r3, [r3, #24]
 80061f2:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 80061f6:	463b      	mov	r3, r7
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	7b1b      	ldrb	r3, [r3, #12]
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d12c      	bne.n	800625a <USB_EPStartXfer+0xa4>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8006200:	463b      	mov	r3, r7
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	6959      	ldr	r1, [r3, #20]
 8006206:	463b      	mov	r3, r7
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	88da      	ldrh	r2, [r3, #6]
 800620c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006210:	b29b      	uxth	r3, r3
 8006212:	1d38      	adds	r0, r7, #4
 8006214:	6800      	ldr	r0, [r0, #0]
 8006216:	f001 fa1c 	bl	8007652 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800621a:	1d3b      	adds	r3, r7, #4
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	617b      	str	r3, [r7, #20]
 8006220:	1d3b      	adds	r3, r7, #4
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006228:	b29b      	uxth	r3, r3
 800622a:	461a      	mov	r2, r3
 800622c:	697b      	ldr	r3, [r7, #20]
 800622e:	4413      	add	r3, r2
 8006230:	617b      	str	r3, [r7, #20]
 8006232:	463b      	mov	r3, r7
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	781b      	ldrb	r3, [r3, #0]
 8006238:	011a      	lsls	r2, r3, #4
 800623a:	697b      	ldr	r3, [r7, #20]
 800623c:	4413      	add	r3, r2
 800623e:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8006242:	f107 0310 	add.w	r3, r7, #16
 8006246:	601a      	str	r2, [r3, #0]
 8006248:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800624c:	b29a      	uxth	r2, r3
 800624e:	f107 0310 	add.w	r3, r7, #16
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	801a      	strh	r2, [r3, #0]
 8006256:	f000 bcdd 	b.w	8006c14 <USB_EPStartXfer+0xa5e>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 800625a:	463b      	mov	r3, r7
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	78db      	ldrb	r3, [r3, #3]
 8006260:	2b02      	cmp	r3, #2
 8006262:	f040 8347 	bne.w	80068f4 <USB_EPStartXfer+0x73e>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8006266:	463b      	mov	r3, r7
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	6a1a      	ldr	r2, [r3, #32]
 800626c:	463b      	mov	r3, r7
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	691b      	ldr	r3, [r3, #16]
 8006272:	429a      	cmp	r2, r3
 8006274:	f240 82eb 	bls.w	800684e <USB_EPStartXfer+0x698>
        {
          /* enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 8006278:	1d3b      	adds	r3, r7, #4
 800627a:	681a      	ldr	r2, [r3, #0]
 800627c:	463b      	mov	r3, r7
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	781b      	ldrb	r3, [r3, #0]
 8006282:	009b      	lsls	r3, r3, #2
 8006284:	4413      	add	r3, r2
 8006286:	881b      	ldrh	r3, [r3, #0]
 8006288:	b29b      	uxth	r3, r3
 800628a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800628e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006292:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
 8006296:	1d3b      	adds	r3, r7, #4
 8006298:	681a      	ldr	r2, [r3, #0]
 800629a:	463b      	mov	r3, r7
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	781b      	ldrb	r3, [r3, #0]
 80062a0:	009b      	lsls	r3, r3, #2
 80062a2:	441a      	add	r2, r3
 80062a4:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 80062a8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80062ac:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80062b0:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80062b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80062b8:	b29b      	uxth	r3, r3
 80062ba:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 80062bc:	463b      	mov	r3, r7
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	6a1a      	ldr	r2, [r3, #32]
 80062c2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80062c6:	1ad2      	subs	r2, r2, r3
 80062c8:	463b      	mov	r3, r7
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80062ce:	1d3b      	adds	r3, r7, #4
 80062d0:	681a      	ldr	r2, [r3, #0]
 80062d2:	463b      	mov	r3, r7
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	781b      	ldrb	r3, [r3, #0]
 80062d8:	009b      	lsls	r3, r3, #2
 80062da:	4413      	add	r3, r2
 80062dc:	881b      	ldrh	r3, [r3, #0]
 80062de:	b29b      	uxth	r3, r3
 80062e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	f000 8159 	beq.w	800659c <USB_EPStartXfer+0x3e6>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80062ea:	1d3b      	adds	r3, r7, #4
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	637b      	str	r3, [r7, #52]	; 0x34
 80062f0:	463b      	mov	r3, r7
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	785b      	ldrb	r3, [r3, #1]
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d164      	bne.n	80063c4 <USB_EPStartXfer+0x20e>
 80062fa:	1d3b      	adds	r3, r7, #4
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006300:	1d3b      	adds	r3, r7, #4
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006308:	b29b      	uxth	r3, r3
 800630a:	461a      	mov	r2, r3
 800630c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800630e:	4413      	add	r3, r2
 8006310:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006312:	463b      	mov	r3, r7
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	781b      	ldrb	r3, [r3, #0]
 8006318:	011a      	lsls	r2, r3, #4
 800631a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800631c:	4413      	add	r3, r2
 800631e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006322:	62bb      	str	r3, [r7, #40]	; 0x28
 8006324:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006328:	2b00      	cmp	r3, #0
 800632a:	d112      	bne.n	8006352 <USB_EPStartXfer+0x19c>
 800632c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800632e:	881b      	ldrh	r3, [r3, #0]
 8006330:	b29b      	uxth	r3, r3
 8006332:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006336:	b29a      	uxth	r2, r3
 8006338:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800633a:	801a      	strh	r2, [r3, #0]
 800633c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800633e:	881b      	ldrh	r3, [r3, #0]
 8006340:	b29b      	uxth	r3, r3
 8006342:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006346:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800634a:	b29a      	uxth	r2, r3
 800634c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800634e:	801a      	strh	r2, [r3, #0]
 8006350:	e054      	b.n	80063fc <USB_EPStartXfer+0x246>
 8006352:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006356:	2b3e      	cmp	r3, #62	; 0x3e
 8006358:	d817      	bhi.n	800638a <USB_EPStartXfer+0x1d4>
 800635a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800635e:	085b      	lsrs	r3, r3, #1
 8006360:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8006364:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006368:	f003 0301 	and.w	r3, r3, #1
 800636c:	2b00      	cmp	r3, #0
 800636e:	d004      	beq.n	800637a <USB_EPStartXfer+0x1c4>
 8006370:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006374:	3301      	adds	r3, #1
 8006376:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800637a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800637e:	b29b      	uxth	r3, r3
 8006380:	029b      	lsls	r3, r3, #10
 8006382:	b29a      	uxth	r2, r3
 8006384:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006386:	801a      	strh	r2, [r3, #0]
 8006388:	e038      	b.n	80063fc <USB_EPStartXfer+0x246>
 800638a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800638e:	095b      	lsrs	r3, r3, #5
 8006390:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8006394:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006398:	f003 031f 	and.w	r3, r3, #31
 800639c:	2b00      	cmp	r3, #0
 800639e:	d104      	bne.n	80063aa <USB_EPStartXfer+0x1f4>
 80063a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80063a4:	3b01      	subs	r3, #1
 80063a6:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80063aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80063ae:	b29b      	uxth	r3, r3
 80063b0:	029b      	lsls	r3, r3, #10
 80063b2:	b29b      	uxth	r3, r3
 80063b4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80063b8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80063bc:	b29a      	uxth	r2, r3
 80063be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063c0:	801a      	strh	r2, [r3, #0]
 80063c2:	e01b      	b.n	80063fc <USB_EPStartXfer+0x246>
 80063c4:	463b      	mov	r3, r7
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	785b      	ldrb	r3, [r3, #1]
 80063ca:	2b01      	cmp	r3, #1
 80063cc:	d116      	bne.n	80063fc <USB_EPStartXfer+0x246>
 80063ce:	1d3b      	adds	r3, r7, #4
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80063d6:	b29b      	uxth	r3, r3
 80063d8:	461a      	mov	r2, r3
 80063da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80063dc:	4413      	add	r3, r2
 80063de:	637b      	str	r3, [r7, #52]	; 0x34
 80063e0:	463b      	mov	r3, r7
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	781b      	ldrb	r3, [r3, #0]
 80063e6:	011a      	lsls	r2, r3, #4
 80063e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80063ea:	4413      	add	r3, r2
 80063ec:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80063f0:	633b      	str	r3, [r7, #48]	; 0x30
 80063f2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80063f6:	b29a      	uxth	r2, r3
 80063f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063fa:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80063fc:	463b      	mov	r3, r7
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	895b      	ldrh	r3, [r3, #10]
 8006402:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006406:	463b      	mov	r3, r7
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	6959      	ldr	r1, [r3, #20]
 800640c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006410:	b29b      	uxth	r3, r3
 8006412:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8006416:	1d38      	adds	r0, r7, #4
 8006418:	6800      	ldr	r0, [r0, #0]
 800641a:	f001 f91a 	bl	8007652 <USB_WritePMA>
            ep->xfer_buff += len;
 800641e:	463b      	mov	r3, r7
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	695a      	ldr	r2, [r3, #20]
 8006424:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006428:	441a      	add	r2, r3
 800642a:	463b      	mov	r3, r7
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8006430:	463b      	mov	r3, r7
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	6a1a      	ldr	r2, [r3, #32]
 8006436:	463b      	mov	r3, r7
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	691b      	ldr	r3, [r3, #16]
 800643c:	429a      	cmp	r2, r3
 800643e:	d909      	bls.n	8006454 <USB_EPStartXfer+0x29e>
            {
              ep->xfer_len_db -= len;
 8006440:	463b      	mov	r3, r7
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	6a1a      	ldr	r2, [r3, #32]
 8006446:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800644a:	1ad2      	subs	r2, r2, r3
 800644c:	463b      	mov	r3, r7
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	621a      	str	r2, [r3, #32]
 8006452:	e008      	b.n	8006466 <USB_EPStartXfer+0x2b0>
            }
            else
            {
              len = ep->xfer_len_db;
 8006454:	463b      	mov	r3, r7
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	6a1b      	ldr	r3, [r3, #32]
 800645a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
              ep->xfer_len_db = 0U;
 800645e:	463b      	mov	r3, r7
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	2200      	movs	r2, #0
 8006464:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006466:	463b      	mov	r3, r7
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	785b      	ldrb	r3, [r3, #1]
 800646c:	2b00      	cmp	r3, #0
 800646e:	d164      	bne.n	800653a <USB_EPStartXfer+0x384>
 8006470:	1d3b      	adds	r3, r7, #4
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	61fb      	str	r3, [r7, #28]
 8006476:	1d3b      	adds	r3, r7, #4
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800647e:	b29b      	uxth	r3, r3
 8006480:	461a      	mov	r2, r3
 8006482:	69fb      	ldr	r3, [r7, #28]
 8006484:	4413      	add	r3, r2
 8006486:	61fb      	str	r3, [r7, #28]
 8006488:	463b      	mov	r3, r7
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	781b      	ldrb	r3, [r3, #0]
 800648e:	011a      	lsls	r2, r3, #4
 8006490:	69fb      	ldr	r3, [r7, #28]
 8006492:	4413      	add	r3, r2
 8006494:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006498:	61bb      	str	r3, [r7, #24]
 800649a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d112      	bne.n	80064c8 <USB_EPStartXfer+0x312>
 80064a2:	69bb      	ldr	r3, [r7, #24]
 80064a4:	881b      	ldrh	r3, [r3, #0]
 80064a6:	b29b      	uxth	r3, r3
 80064a8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80064ac:	b29a      	uxth	r2, r3
 80064ae:	69bb      	ldr	r3, [r7, #24]
 80064b0:	801a      	strh	r2, [r3, #0]
 80064b2:	69bb      	ldr	r3, [r7, #24]
 80064b4:	881b      	ldrh	r3, [r3, #0]
 80064b6:	b29b      	uxth	r3, r3
 80064b8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80064bc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80064c0:	b29a      	uxth	r2, r3
 80064c2:	69bb      	ldr	r3, [r7, #24]
 80064c4:	801a      	strh	r2, [r3, #0]
 80064c6:	e057      	b.n	8006578 <USB_EPStartXfer+0x3c2>
 80064c8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80064cc:	2b3e      	cmp	r3, #62	; 0x3e
 80064ce:	d817      	bhi.n	8006500 <USB_EPStartXfer+0x34a>
 80064d0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80064d4:	085b      	lsrs	r3, r3, #1
 80064d6:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80064da:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80064de:	f003 0301 	and.w	r3, r3, #1
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d004      	beq.n	80064f0 <USB_EPStartXfer+0x33a>
 80064e6:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80064ea:	3301      	adds	r3, #1
 80064ec:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80064f0:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80064f4:	b29b      	uxth	r3, r3
 80064f6:	029b      	lsls	r3, r3, #10
 80064f8:	b29a      	uxth	r2, r3
 80064fa:	69bb      	ldr	r3, [r7, #24]
 80064fc:	801a      	strh	r2, [r3, #0]
 80064fe:	e03b      	b.n	8006578 <USB_EPStartXfer+0x3c2>
 8006500:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006504:	095b      	lsrs	r3, r3, #5
 8006506:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800650a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800650e:	f003 031f 	and.w	r3, r3, #31
 8006512:	2b00      	cmp	r3, #0
 8006514:	d104      	bne.n	8006520 <USB_EPStartXfer+0x36a>
 8006516:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800651a:	3b01      	subs	r3, #1
 800651c:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006520:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006524:	b29b      	uxth	r3, r3
 8006526:	029b      	lsls	r3, r3, #10
 8006528:	b29b      	uxth	r3, r3
 800652a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800652e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006532:	b29a      	uxth	r2, r3
 8006534:	69bb      	ldr	r3, [r7, #24]
 8006536:	801a      	strh	r2, [r3, #0]
 8006538:	e01e      	b.n	8006578 <USB_EPStartXfer+0x3c2>
 800653a:	463b      	mov	r3, r7
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	785b      	ldrb	r3, [r3, #1]
 8006540:	2b01      	cmp	r3, #1
 8006542:	d119      	bne.n	8006578 <USB_EPStartXfer+0x3c2>
 8006544:	1d3b      	adds	r3, r7, #4
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	627b      	str	r3, [r7, #36]	; 0x24
 800654a:	1d3b      	adds	r3, r7, #4
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006552:	b29b      	uxth	r3, r3
 8006554:	461a      	mov	r2, r3
 8006556:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006558:	4413      	add	r3, r2
 800655a:	627b      	str	r3, [r7, #36]	; 0x24
 800655c:	463b      	mov	r3, r7
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	781b      	ldrb	r3, [r3, #0]
 8006562:	011a      	lsls	r2, r3, #4
 8006564:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006566:	4413      	add	r3, r2
 8006568:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800656c:	623b      	str	r3, [r7, #32]
 800656e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006572:	b29a      	uxth	r2, r3
 8006574:	6a3b      	ldr	r3, [r7, #32]
 8006576:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8006578:	463b      	mov	r3, r7
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	891b      	ldrh	r3, [r3, #8]
 800657e:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006582:	463b      	mov	r3, r7
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	6959      	ldr	r1, [r3, #20]
 8006588:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800658c:	b29b      	uxth	r3, r3
 800658e:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8006592:	1d38      	adds	r0, r7, #4
 8006594:	6800      	ldr	r0, [r0, #0]
 8006596:	f001 f85c 	bl	8007652 <USB_WritePMA>
 800659a:	e33b      	b.n	8006c14 <USB_EPStartXfer+0xa5e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800659c:	463b      	mov	r3, r7
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	785b      	ldrb	r3, [r3, #1]
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d164      	bne.n	8006670 <USB_EPStartXfer+0x4ba>
 80065a6:	1d3b      	adds	r3, r7, #4
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80065ac:	1d3b      	adds	r3, r7, #4
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80065b4:	b29b      	uxth	r3, r3
 80065b6:	461a      	mov	r2, r3
 80065b8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80065ba:	4413      	add	r3, r2
 80065bc:	64fb      	str	r3, [r7, #76]	; 0x4c
 80065be:	463b      	mov	r3, r7
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	781b      	ldrb	r3, [r3, #0]
 80065c4:	011a      	lsls	r2, r3, #4
 80065c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80065c8:	4413      	add	r3, r2
 80065ca:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80065ce:	64bb      	str	r3, [r7, #72]	; 0x48
 80065d0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d112      	bne.n	80065fe <USB_EPStartXfer+0x448>
 80065d8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80065da:	881b      	ldrh	r3, [r3, #0]
 80065dc:	b29b      	uxth	r3, r3
 80065de:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80065e2:	b29a      	uxth	r2, r3
 80065e4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80065e6:	801a      	strh	r2, [r3, #0]
 80065e8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80065ea:	881b      	ldrh	r3, [r3, #0]
 80065ec:	b29b      	uxth	r3, r3
 80065ee:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80065f2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80065f6:	b29a      	uxth	r2, r3
 80065f8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80065fa:	801a      	strh	r2, [r3, #0]
 80065fc:	e057      	b.n	80066ae <USB_EPStartXfer+0x4f8>
 80065fe:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006602:	2b3e      	cmp	r3, #62	; 0x3e
 8006604:	d817      	bhi.n	8006636 <USB_EPStartXfer+0x480>
 8006606:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800660a:	085b      	lsrs	r3, r3, #1
 800660c:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8006610:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006614:	f003 0301 	and.w	r3, r3, #1
 8006618:	2b00      	cmp	r3, #0
 800661a:	d004      	beq.n	8006626 <USB_EPStartXfer+0x470>
 800661c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006620:	3301      	adds	r3, #1
 8006622:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8006626:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800662a:	b29b      	uxth	r3, r3
 800662c:	029b      	lsls	r3, r3, #10
 800662e:	b29a      	uxth	r2, r3
 8006630:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006632:	801a      	strh	r2, [r3, #0]
 8006634:	e03b      	b.n	80066ae <USB_EPStartXfer+0x4f8>
 8006636:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800663a:	095b      	lsrs	r3, r3, #5
 800663c:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8006640:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006644:	f003 031f 	and.w	r3, r3, #31
 8006648:	2b00      	cmp	r3, #0
 800664a:	d104      	bne.n	8006656 <USB_EPStartXfer+0x4a0>
 800664c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006650:	3b01      	subs	r3, #1
 8006652:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8006656:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800665a:	b29b      	uxth	r3, r3
 800665c:	029b      	lsls	r3, r3, #10
 800665e:	b29b      	uxth	r3, r3
 8006660:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006664:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006668:	b29a      	uxth	r2, r3
 800666a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800666c:	801a      	strh	r2, [r3, #0]
 800666e:	e01e      	b.n	80066ae <USB_EPStartXfer+0x4f8>
 8006670:	463b      	mov	r3, r7
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	785b      	ldrb	r3, [r3, #1]
 8006676:	2b01      	cmp	r3, #1
 8006678:	d119      	bne.n	80066ae <USB_EPStartXfer+0x4f8>
 800667a:	1d3b      	adds	r3, r7, #4
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	657b      	str	r3, [r7, #84]	; 0x54
 8006680:	1d3b      	adds	r3, r7, #4
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006688:	b29b      	uxth	r3, r3
 800668a:	461a      	mov	r2, r3
 800668c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800668e:	4413      	add	r3, r2
 8006690:	657b      	str	r3, [r7, #84]	; 0x54
 8006692:	463b      	mov	r3, r7
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	781b      	ldrb	r3, [r3, #0]
 8006698:	011a      	lsls	r2, r3, #4
 800669a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800669c:	4413      	add	r3, r2
 800669e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80066a2:	653b      	str	r3, [r7, #80]	; 0x50
 80066a4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80066a8:	b29a      	uxth	r2, r3
 80066aa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80066ac:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80066ae:	463b      	mov	r3, r7
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	891b      	ldrh	r3, [r3, #8]
 80066b4:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80066b8:	463b      	mov	r3, r7
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	6959      	ldr	r1, [r3, #20]
 80066be:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80066c2:	b29b      	uxth	r3, r3
 80066c4:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 80066c8:	1d38      	adds	r0, r7, #4
 80066ca:	6800      	ldr	r0, [r0, #0]
 80066cc:	f000 ffc1 	bl	8007652 <USB_WritePMA>
            ep->xfer_buff += len;
 80066d0:	463b      	mov	r3, r7
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	695a      	ldr	r2, [r3, #20]
 80066d6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80066da:	441a      	add	r2, r3
 80066dc:	463b      	mov	r3, r7
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80066e2:	463b      	mov	r3, r7
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	6a1a      	ldr	r2, [r3, #32]
 80066e8:	463b      	mov	r3, r7
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	691b      	ldr	r3, [r3, #16]
 80066ee:	429a      	cmp	r2, r3
 80066f0:	d909      	bls.n	8006706 <USB_EPStartXfer+0x550>
            {
              ep->xfer_len_db -= len;
 80066f2:	463b      	mov	r3, r7
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	6a1a      	ldr	r2, [r3, #32]
 80066f8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80066fc:	1ad2      	subs	r2, r2, r3
 80066fe:	463b      	mov	r3, r7
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	621a      	str	r2, [r3, #32]
 8006704:	e008      	b.n	8006718 <USB_EPStartXfer+0x562>
            }
            else
            {
              len = ep->xfer_len_db;
 8006706:	463b      	mov	r3, r7
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	6a1b      	ldr	r3, [r3, #32]
 800670c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
              ep->xfer_len_db = 0U;
 8006710:	463b      	mov	r3, r7
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	2200      	movs	r2, #0
 8006716:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006718:	1d3b      	adds	r3, r7, #4
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	647b      	str	r3, [r7, #68]	; 0x44
 800671e:	463b      	mov	r3, r7
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	785b      	ldrb	r3, [r3, #1]
 8006724:	2b00      	cmp	r3, #0
 8006726:	d164      	bne.n	80067f2 <USB_EPStartXfer+0x63c>
 8006728:	1d3b      	adds	r3, r7, #4
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800672e:	1d3b      	adds	r3, r7, #4
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006736:	b29b      	uxth	r3, r3
 8006738:	461a      	mov	r2, r3
 800673a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800673c:	4413      	add	r3, r2
 800673e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006740:	463b      	mov	r3, r7
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	781b      	ldrb	r3, [r3, #0]
 8006746:	011a      	lsls	r2, r3, #4
 8006748:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800674a:	4413      	add	r3, r2
 800674c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006750:	63bb      	str	r3, [r7, #56]	; 0x38
 8006752:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006756:	2b00      	cmp	r3, #0
 8006758:	d112      	bne.n	8006780 <USB_EPStartXfer+0x5ca>
 800675a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800675c:	881b      	ldrh	r3, [r3, #0]
 800675e:	b29b      	uxth	r3, r3
 8006760:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006764:	b29a      	uxth	r2, r3
 8006766:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006768:	801a      	strh	r2, [r3, #0]
 800676a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800676c:	881b      	ldrh	r3, [r3, #0]
 800676e:	b29b      	uxth	r3, r3
 8006770:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006774:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006778:	b29a      	uxth	r2, r3
 800677a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800677c:	801a      	strh	r2, [r3, #0]
 800677e:	e054      	b.n	800682a <USB_EPStartXfer+0x674>
 8006780:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006784:	2b3e      	cmp	r3, #62	; 0x3e
 8006786:	d817      	bhi.n	80067b8 <USB_EPStartXfer+0x602>
 8006788:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800678c:	085b      	lsrs	r3, r3, #1
 800678e:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006792:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006796:	f003 0301 	and.w	r3, r3, #1
 800679a:	2b00      	cmp	r3, #0
 800679c:	d004      	beq.n	80067a8 <USB_EPStartXfer+0x5f2>
 800679e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80067a2:	3301      	adds	r3, #1
 80067a4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80067a8:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80067ac:	b29b      	uxth	r3, r3
 80067ae:	029b      	lsls	r3, r3, #10
 80067b0:	b29a      	uxth	r2, r3
 80067b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067b4:	801a      	strh	r2, [r3, #0]
 80067b6:	e038      	b.n	800682a <USB_EPStartXfer+0x674>
 80067b8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80067bc:	095b      	lsrs	r3, r3, #5
 80067be:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80067c2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80067c6:	f003 031f 	and.w	r3, r3, #31
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d104      	bne.n	80067d8 <USB_EPStartXfer+0x622>
 80067ce:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80067d2:	3b01      	subs	r3, #1
 80067d4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80067d8:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80067dc:	b29b      	uxth	r3, r3
 80067de:	029b      	lsls	r3, r3, #10
 80067e0:	b29b      	uxth	r3, r3
 80067e2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80067e6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80067ea:	b29a      	uxth	r2, r3
 80067ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067ee:	801a      	strh	r2, [r3, #0]
 80067f0:	e01b      	b.n	800682a <USB_EPStartXfer+0x674>
 80067f2:	463b      	mov	r3, r7
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	785b      	ldrb	r3, [r3, #1]
 80067f8:	2b01      	cmp	r3, #1
 80067fa:	d116      	bne.n	800682a <USB_EPStartXfer+0x674>
 80067fc:	1d3b      	adds	r3, r7, #4
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006804:	b29b      	uxth	r3, r3
 8006806:	461a      	mov	r2, r3
 8006808:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800680a:	4413      	add	r3, r2
 800680c:	647b      	str	r3, [r7, #68]	; 0x44
 800680e:	463b      	mov	r3, r7
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	781b      	ldrb	r3, [r3, #0]
 8006814:	011a      	lsls	r2, r3, #4
 8006816:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006818:	4413      	add	r3, r2
 800681a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800681e:	643b      	str	r3, [r7, #64]	; 0x40
 8006820:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006824:	b29a      	uxth	r2, r3
 8006826:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006828:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800682a:	463b      	mov	r3, r7
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	895b      	ldrh	r3, [r3, #10]
 8006830:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006834:	463b      	mov	r3, r7
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	6959      	ldr	r1, [r3, #20]
 800683a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800683e:	b29b      	uxth	r3, r3
 8006840:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8006844:	1d38      	adds	r0, r7, #4
 8006846:	6800      	ldr	r0, [r0, #0]
 8006848:	f000 ff03 	bl	8007652 <USB_WritePMA>
 800684c:	e1e2      	b.n	8006c14 <USB_EPStartXfer+0xa5e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 800684e:	463b      	mov	r3, r7
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	6a1b      	ldr	r3, [r3, #32]
 8006854:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c

          /* disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 8006858:	1d3b      	adds	r3, r7, #4
 800685a:	681a      	ldr	r2, [r3, #0]
 800685c:	463b      	mov	r3, r7
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	781b      	ldrb	r3, [r3, #0]
 8006862:	009b      	lsls	r3, r3, #2
 8006864:	4413      	add	r3, r2
 8006866:	881b      	ldrh	r3, [r3, #0]
 8006868:	b29b      	uxth	r3, r3
 800686a:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 800686e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006872:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 8006876:	1d3b      	adds	r3, r7, #4
 8006878:	681a      	ldr	r2, [r3, #0]
 800687a:	463b      	mov	r3, r7
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	781b      	ldrb	r3, [r3, #0]
 8006880:	009b      	lsls	r3, r3, #2
 8006882:	441a      	add	r2, r3
 8006884:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8006888:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800688c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006890:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006894:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006898:	b29b      	uxth	r3, r3
 800689a:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800689c:	1d3b      	adds	r3, r7, #4
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	663b      	str	r3, [r7, #96]	; 0x60
 80068a2:	1d3b      	adds	r3, r7, #4
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80068aa:	b29b      	uxth	r3, r3
 80068ac:	461a      	mov	r2, r3
 80068ae:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80068b0:	4413      	add	r3, r2
 80068b2:	663b      	str	r3, [r7, #96]	; 0x60
 80068b4:	463b      	mov	r3, r7
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	781b      	ldrb	r3, [r3, #0]
 80068ba:	011a      	lsls	r2, r3, #4
 80068bc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80068be:	4413      	add	r3, r2
 80068c0:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80068c4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80068c6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80068ca:	b29a      	uxth	r2, r3
 80068cc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80068ce:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80068d0:	463b      	mov	r3, r7
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	891b      	ldrh	r3, [r3, #8]
 80068d6:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80068da:	463b      	mov	r3, r7
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	6959      	ldr	r1, [r3, #20]
 80068e0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80068e4:	b29b      	uxth	r3, r3
 80068e6:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 80068ea:	1d38      	adds	r0, r7, #4
 80068ec:	6800      	ldr	r0, [r0, #0]
 80068ee:	f000 feb0 	bl	8007652 <USB_WritePMA>
 80068f2:	e18f      	b.n	8006c14 <USB_EPStartXfer+0xa5e>

      /* manage isochronous double buffer IN mode */
      else
      {
        /* Write the data to the USB endpoint */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80068f4:	1d3b      	adds	r3, r7, #4
 80068f6:	681a      	ldr	r2, [r3, #0]
 80068f8:	463b      	mov	r3, r7
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	781b      	ldrb	r3, [r3, #0]
 80068fe:	009b      	lsls	r3, r3, #2
 8006900:	4413      	add	r3, r2
 8006902:	881b      	ldrh	r3, [r3, #0]
 8006904:	b29b      	uxth	r3, r3
 8006906:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800690a:	2b00      	cmp	r3, #0
 800690c:	f000 808f 	beq.w	8006a2e <USB_EPStartXfer+0x878>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006910:	1d3b      	adds	r3, r7, #4
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	67bb      	str	r3, [r7, #120]	; 0x78
 8006916:	463b      	mov	r3, r7
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	785b      	ldrb	r3, [r3, #1]
 800691c:	2b00      	cmp	r3, #0
 800691e:	d164      	bne.n	80069ea <USB_EPStartXfer+0x834>
 8006920:	1d3b      	adds	r3, r7, #4
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	673b      	str	r3, [r7, #112]	; 0x70
 8006926:	1d3b      	adds	r3, r7, #4
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800692e:	b29b      	uxth	r3, r3
 8006930:	461a      	mov	r2, r3
 8006932:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006934:	4413      	add	r3, r2
 8006936:	673b      	str	r3, [r7, #112]	; 0x70
 8006938:	463b      	mov	r3, r7
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	781b      	ldrb	r3, [r3, #0]
 800693e:	011a      	lsls	r2, r3, #4
 8006940:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006942:	4413      	add	r3, r2
 8006944:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006948:	66fb      	str	r3, [r7, #108]	; 0x6c
 800694a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800694e:	2b00      	cmp	r3, #0
 8006950:	d112      	bne.n	8006978 <USB_EPStartXfer+0x7c2>
 8006952:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006954:	881b      	ldrh	r3, [r3, #0]
 8006956:	b29b      	uxth	r3, r3
 8006958:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800695c:	b29a      	uxth	r2, r3
 800695e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006960:	801a      	strh	r2, [r3, #0]
 8006962:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006964:	881b      	ldrh	r3, [r3, #0]
 8006966:	b29b      	uxth	r3, r3
 8006968:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800696c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006970:	b29a      	uxth	r2, r3
 8006972:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006974:	801a      	strh	r2, [r3, #0]
 8006976:	e054      	b.n	8006a22 <USB_EPStartXfer+0x86c>
 8006978:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800697c:	2b3e      	cmp	r3, #62	; 0x3e
 800697e:	d817      	bhi.n	80069b0 <USB_EPStartXfer+0x7fa>
 8006980:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006984:	085b      	lsrs	r3, r3, #1
 8006986:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800698a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800698e:	f003 0301 	and.w	r3, r3, #1
 8006992:	2b00      	cmp	r3, #0
 8006994:	d004      	beq.n	80069a0 <USB_EPStartXfer+0x7ea>
 8006996:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800699a:	3301      	adds	r3, #1
 800699c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80069a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80069a4:	b29b      	uxth	r3, r3
 80069a6:	029b      	lsls	r3, r3, #10
 80069a8:	b29a      	uxth	r2, r3
 80069aa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80069ac:	801a      	strh	r2, [r3, #0]
 80069ae:	e038      	b.n	8006a22 <USB_EPStartXfer+0x86c>
 80069b0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80069b4:	095b      	lsrs	r3, r3, #5
 80069b6:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80069ba:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80069be:	f003 031f 	and.w	r3, r3, #31
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	d104      	bne.n	80069d0 <USB_EPStartXfer+0x81a>
 80069c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80069ca:	3b01      	subs	r3, #1
 80069cc:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80069d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80069d4:	b29b      	uxth	r3, r3
 80069d6:	029b      	lsls	r3, r3, #10
 80069d8:	b29b      	uxth	r3, r3
 80069da:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80069de:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80069e2:	b29a      	uxth	r2, r3
 80069e4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80069e6:	801a      	strh	r2, [r3, #0]
 80069e8:	e01b      	b.n	8006a22 <USB_EPStartXfer+0x86c>
 80069ea:	463b      	mov	r3, r7
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	785b      	ldrb	r3, [r3, #1]
 80069f0:	2b01      	cmp	r3, #1
 80069f2:	d116      	bne.n	8006a22 <USB_EPStartXfer+0x86c>
 80069f4:	1d3b      	adds	r3, r7, #4
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80069fc:	b29b      	uxth	r3, r3
 80069fe:	461a      	mov	r2, r3
 8006a00:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006a02:	4413      	add	r3, r2
 8006a04:	67bb      	str	r3, [r7, #120]	; 0x78
 8006a06:	463b      	mov	r3, r7
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	781b      	ldrb	r3, [r3, #0]
 8006a0c:	011a      	lsls	r2, r3, #4
 8006a0e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006a10:	4413      	add	r3, r2
 8006a12:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006a16:	677b      	str	r3, [r7, #116]	; 0x74
 8006a18:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006a1c:	b29a      	uxth	r2, r3
 8006a1e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006a20:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8006a22:	463b      	mov	r3, r7
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	895b      	ldrh	r3, [r3, #10]
 8006a28:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a
 8006a2c:	e097      	b.n	8006b5e <USB_EPStartXfer+0x9a8>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006a2e:	463b      	mov	r3, r7
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	785b      	ldrb	r3, [r3, #1]
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	d168      	bne.n	8006b0a <USB_EPStartXfer+0x954>
 8006a38:	1d3b      	adds	r3, r7, #4
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006a40:	1d3b      	adds	r3, r7, #4
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006a48:	b29b      	uxth	r3, r3
 8006a4a:	461a      	mov	r2, r3
 8006a4c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006a50:	4413      	add	r3, r2
 8006a52:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006a56:	463b      	mov	r3, r7
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	781b      	ldrb	r3, [r3, #0]
 8006a5c:	011a      	lsls	r2, r3, #4
 8006a5e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006a62:	4413      	add	r3, r2
 8006a64:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006a68:	67fb      	str	r3, [r7, #124]	; 0x7c
 8006a6a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d112      	bne.n	8006a98 <USB_EPStartXfer+0x8e2>
 8006a72:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006a74:	881b      	ldrh	r3, [r3, #0]
 8006a76:	b29b      	uxth	r3, r3
 8006a78:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006a7c:	b29a      	uxth	r2, r3
 8006a7e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006a80:	801a      	strh	r2, [r3, #0]
 8006a82:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006a84:	881b      	ldrh	r3, [r3, #0]
 8006a86:	b29b      	uxth	r3, r3
 8006a88:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006a8c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006a90:	b29a      	uxth	r2, r3
 8006a92:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006a94:	801a      	strh	r2, [r3, #0]
 8006a96:	e05d      	b.n	8006b54 <USB_EPStartXfer+0x99e>
 8006a98:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006a9c:	2b3e      	cmp	r3, #62	; 0x3e
 8006a9e:	d817      	bhi.n	8006ad0 <USB_EPStartXfer+0x91a>
 8006aa0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006aa4:	085b      	lsrs	r3, r3, #1
 8006aa6:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8006aaa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006aae:	f003 0301 	and.w	r3, r3, #1
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	d004      	beq.n	8006ac0 <USB_EPStartXfer+0x90a>
 8006ab6:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8006aba:	3301      	adds	r3, #1
 8006abc:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8006ac0:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8006ac4:	b29b      	uxth	r3, r3
 8006ac6:	029b      	lsls	r3, r3, #10
 8006ac8:	b29a      	uxth	r2, r3
 8006aca:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006acc:	801a      	strh	r2, [r3, #0]
 8006ace:	e041      	b.n	8006b54 <USB_EPStartXfer+0x99e>
 8006ad0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006ad4:	095b      	lsrs	r3, r3, #5
 8006ad6:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8006ada:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006ade:	f003 031f 	and.w	r3, r3, #31
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	d104      	bne.n	8006af0 <USB_EPStartXfer+0x93a>
 8006ae6:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8006aea:	3b01      	subs	r3, #1
 8006aec:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8006af0:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8006af4:	b29b      	uxth	r3, r3
 8006af6:	029b      	lsls	r3, r3, #10
 8006af8:	b29b      	uxth	r3, r3
 8006afa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006afe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006b02:	b29a      	uxth	r2, r3
 8006b04:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006b06:	801a      	strh	r2, [r3, #0]
 8006b08:	e024      	b.n	8006b54 <USB_EPStartXfer+0x99e>
 8006b0a:	463b      	mov	r3, r7
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	785b      	ldrb	r3, [r3, #1]
 8006b10:	2b01      	cmp	r3, #1
 8006b12:	d11f      	bne.n	8006b54 <USB_EPStartXfer+0x99e>
 8006b14:	1d3b      	adds	r3, r7, #4
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006b1c:	1d3b      	adds	r3, r7, #4
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006b24:	b29b      	uxth	r3, r3
 8006b26:	461a      	mov	r2, r3
 8006b28:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006b2c:	4413      	add	r3, r2
 8006b2e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006b32:	463b      	mov	r3, r7
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	781b      	ldrb	r3, [r3, #0]
 8006b38:	011a      	lsls	r2, r3, #4
 8006b3a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006b3e:	4413      	add	r3, r2
 8006b40:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006b44:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006b48:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006b4c:	b29a      	uxth	r2, r3
 8006b4e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006b52:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8006b54:	463b      	mov	r3, r7
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	891b      	ldrh	r3, [r3, #8]
 8006b5a:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a
        }

        USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006b5e:	463b      	mov	r3, r7
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	6959      	ldr	r1, [r3, #20]
 8006b64:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006b68:	b29b      	uxth	r3, r3
 8006b6a:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8006b6e:	1d38      	adds	r0, r7, #4
 8006b70:	6800      	ldr	r0, [r0, #0]
 8006b72:	f000 fd6e 	bl	8007652 <USB_WritePMA>
        PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 8006b76:	463b      	mov	r3, r7
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	785b      	ldrb	r3, [r3, #1]
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	d122      	bne.n	8006bc6 <USB_EPStartXfer+0xa10>
 8006b80:	1d3b      	adds	r3, r7, #4
 8006b82:	681a      	ldr	r2, [r3, #0]
 8006b84:	463b      	mov	r3, r7
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	781b      	ldrb	r3, [r3, #0]
 8006b8a:	009b      	lsls	r3, r3, #2
 8006b8c:	4413      	add	r3, r2
 8006b8e:	881b      	ldrh	r3, [r3, #0]
 8006b90:	b29b      	uxth	r3, r3
 8006b92:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006b96:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b9a:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
 8006b9e:	1d3b      	adds	r3, r7, #4
 8006ba0:	681a      	ldr	r2, [r3, #0]
 8006ba2:	463b      	mov	r3, r7
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	781b      	ldrb	r3, [r3, #0]
 8006ba8:	009b      	lsls	r3, r3, #2
 8006baa:	441a      	add	r2, r3
 8006bac:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 8006bb0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006bb4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006bb8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006bbc:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006bc0:	b29b      	uxth	r3, r3
 8006bc2:	8013      	strh	r3, [r2, #0]
 8006bc4:	e026      	b.n	8006c14 <USB_EPStartXfer+0xa5e>
 8006bc6:	463b      	mov	r3, r7
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	785b      	ldrb	r3, [r3, #1]
 8006bcc:	2b01      	cmp	r3, #1
 8006bce:	d121      	bne.n	8006c14 <USB_EPStartXfer+0xa5e>
 8006bd0:	1d3b      	adds	r3, r7, #4
 8006bd2:	681a      	ldr	r2, [r3, #0]
 8006bd4:	463b      	mov	r3, r7
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	781b      	ldrb	r3, [r3, #0]
 8006bda:	009b      	lsls	r3, r3, #2
 8006bdc:	4413      	add	r3, r2
 8006bde:	881b      	ldrh	r3, [r3, #0]
 8006be0:	b29b      	uxth	r3, r3
 8006be2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006be6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006bea:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
 8006bee:	1d3b      	adds	r3, r7, #4
 8006bf0:	681a      	ldr	r2, [r3, #0]
 8006bf2:	463b      	mov	r3, r7
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	781b      	ldrb	r3, [r3, #0]
 8006bf8:	009b      	lsls	r3, r3, #2
 8006bfa:	441a      	add	r2, r3
 8006bfc:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
 8006c00:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006c04:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006c08:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006c0c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006c10:	b29b      	uxth	r3, r3
 8006c12:	8013      	strh	r3, [r2, #0]
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8006c14:	1d3b      	adds	r3, r7, #4
 8006c16:	681a      	ldr	r2, [r3, #0]
 8006c18:	463b      	mov	r3, r7
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	781b      	ldrb	r3, [r3, #0]
 8006c1e:	009b      	lsls	r3, r3, #2
 8006c20:	4413      	add	r3, r2
 8006c22:	881b      	ldrh	r3, [r3, #0]
 8006c24:	b29b      	uxth	r3, r3
 8006c26:	f107 020e 	add.w	r2, r7, #14
 8006c2a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006c2e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006c32:	8013      	strh	r3, [r2, #0]
 8006c34:	f107 030e 	add.w	r3, r7, #14
 8006c38:	f107 020e 	add.w	r2, r7, #14
 8006c3c:	8812      	ldrh	r2, [r2, #0]
 8006c3e:	f082 0210 	eor.w	r2, r2, #16
 8006c42:	801a      	strh	r2, [r3, #0]
 8006c44:	f107 030e 	add.w	r3, r7, #14
 8006c48:	f107 020e 	add.w	r2, r7, #14
 8006c4c:	8812      	ldrh	r2, [r2, #0]
 8006c4e:	f082 0220 	eor.w	r2, r2, #32
 8006c52:	801a      	strh	r2, [r3, #0]
 8006c54:	1d3b      	adds	r3, r7, #4
 8006c56:	681a      	ldr	r2, [r3, #0]
 8006c58:	463b      	mov	r3, r7
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	781b      	ldrb	r3, [r3, #0]
 8006c5e:	009b      	lsls	r3, r3, #2
 8006c60:	441a      	add	r2, r3
 8006c62:	f107 030e 	add.w	r3, r7, #14
 8006c66:	881b      	ldrh	r3, [r3, #0]
 8006c68:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006c6c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006c70:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006c74:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006c78:	b29b      	uxth	r3, r3
 8006c7a:	8013      	strh	r3, [r2, #0]
 8006c7c:	e3b5      	b.n	80073ea <USB_EPStartXfer+0x1234>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8006c7e:	463b      	mov	r3, r7
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	7b1b      	ldrb	r3, [r3, #12]
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	f040 8090 	bne.w	8006daa <USB_EPStartXfer+0xbf4>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8006c8a:	463b      	mov	r3, r7
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	699a      	ldr	r2, [r3, #24]
 8006c90:	463b      	mov	r3, r7
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	691b      	ldr	r3, [r3, #16]
 8006c96:	429a      	cmp	r2, r3
 8006c98:	d90e      	bls.n	8006cb8 <USB_EPStartXfer+0xb02>
      {
        len = ep->maxpacket;
 8006c9a:	463b      	mov	r3, r7
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	691b      	ldr	r3, [r3, #16]
 8006ca0:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        ep->xfer_len -= len;
 8006ca4:	463b      	mov	r3, r7
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	699a      	ldr	r2, [r3, #24]
 8006caa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006cae:	1ad2      	subs	r2, r2, r3
 8006cb0:	463b      	mov	r3, r7
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	619a      	str	r2, [r3, #24]
 8006cb6:	e008      	b.n	8006cca <USB_EPStartXfer+0xb14>
      }
      else
      {
        len = ep->xfer_len;
 8006cb8:	463b      	mov	r3, r7
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	699b      	ldr	r3, [r3, #24]
 8006cbe:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        ep->xfer_len = 0U;
 8006cc2:	463b      	mov	r3, r7
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	2200      	movs	r2, #0
 8006cc8:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8006cca:	1d3b      	adds	r3, r7, #4
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8006cd2:	1d3b      	adds	r3, r7, #4
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006cda:	b29b      	uxth	r3, r3
 8006cdc:	461a      	mov	r2, r3
 8006cde:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8006ce2:	4413      	add	r3, r2
 8006ce4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8006ce8:	463b      	mov	r3, r7
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	781b      	ldrb	r3, [r3, #0]
 8006cee:	011a      	lsls	r2, r3, #4
 8006cf0:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8006cf4:	4413      	add	r3, r2
 8006cf6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006cfa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006cfe:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	d116      	bne.n	8006d34 <USB_EPStartXfer+0xb7e>
 8006d06:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006d0a:	881b      	ldrh	r3, [r3, #0]
 8006d0c:	b29b      	uxth	r3, r3
 8006d0e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006d12:	b29a      	uxth	r2, r3
 8006d14:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006d18:	801a      	strh	r2, [r3, #0]
 8006d1a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006d1e:	881b      	ldrh	r3, [r3, #0]
 8006d20:	b29b      	uxth	r3, r3
 8006d22:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006d26:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006d2a:	b29a      	uxth	r2, r3
 8006d2c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006d30:	801a      	strh	r2, [r3, #0]
 8006d32:	e32c      	b.n	800738e <USB_EPStartXfer+0x11d8>
 8006d34:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006d38:	2b3e      	cmp	r3, #62	; 0x3e
 8006d3a:	d818      	bhi.n	8006d6e <USB_EPStartXfer+0xbb8>
 8006d3c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006d40:	085b      	lsrs	r3, r3, #1
 8006d42:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8006d46:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006d4a:	f003 0301 	and.w	r3, r3, #1
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	d004      	beq.n	8006d5c <USB_EPStartXfer+0xba6>
 8006d52:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8006d56:	3301      	adds	r3, #1
 8006d58:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8006d5c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8006d60:	b29b      	uxth	r3, r3
 8006d62:	029b      	lsls	r3, r3, #10
 8006d64:	b29a      	uxth	r2, r3
 8006d66:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006d6a:	801a      	strh	r2, [r3, #0]
 8006d6c:	e30f      	b.n	800738e <USB_EPStartXfer+0x11d8>
 8006d6e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006d72:	095b      	lsrs	r3, r3, #5
 8006d74:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8006d78:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006d7c:	f003 031f 	and.w	r3, r3, #31
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	d104      	bne.n	8006d8e <USB_EPStartXfer+0xbd8>
 8006d84:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8006d88:	3b01      	subs	r3, #1
 8006d8a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8006d8e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8006d92:	b29b      	uxth	r3, r3
 8006d94:	029b      	lsls	r3, r3, #10
 8006d96:	b29b      	uxth	r3, r3
 8006d98:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006d9c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006da0:	b29a      	uxth	r2, r3
 8006da2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006da6:	801a      	strh	r2, [r3, #0]
 8006da8:	e2f1      	b.n	800738e <USB_EPStartXfer+0x11d8>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8006daa:	463b      	mov	r3, r7
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	78db      	ldrb	r3, [r3, #3]
 8006db0:	2b02      	cmp	r3, #2
 8006db2:	f040 818f 	bne.w	80070d4 <USB_EPStartXfer+0xf1e>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8006db6:	463b      	mov	r3, r7
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	785b      	ldrb	r3, [r3, #1]
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	d175      	bne.n	8006eac <USB_EPStartXfer+0xcf6>
 8006dc0:	1d3b      	adds	r3, r7, #4
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006dc8:	1d3b      	adds	r3, r7, #4
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006dd0:	b29b      	uxth	r3, r3
 8006dd2:	461a      	mov	r2, r3
 8006dd4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8006dd8:	4413      	add	r3, r2
 8006dda:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006dde:	463b      	mov	r3, r7
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	781b      	ldrb	r3, [r3, #0]
 8006de4:	011a      	lsls	r2, r3, #4
 8006de6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8006dea:	4413      	add	r3, r2
 8006dec:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006df0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006df4:	463b      	mov	r3, r7
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	691b      	ldr	r3, [r3, #16]
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	d116      	bne.n	8006e2c <USB_EPStartXfer+0xc76>
 8006dfe:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006e02:	881b      	ldrh	r3, [r3, #0]
 8006e04:	b29b      	uxth	r3, r3
 8006e06:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006e0a:	b29a      	uxth	r2, r3
 8006e0c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006e10:	801a      	strh	r2, [r3, #0]
 8006e12:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006e16:	881b      	ldrh	r3, [r3, #0]
 8006e18:	b29b      	uxth	r3, r3
 8006e1a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006e1e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006e22:	b29a      	uxth	r2, r3
 8006e24:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006e28:	801a      	strh	r2, [r3, #0]
 8006e2a:	e065      	b.n	8006ef8 <USB_EPStartXfer+0xd42>
 8006e2c:	463b      	mov	r3, r7
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	691b      	ldr	r3, [r3, #16]
 8006e32:	2b3e      	cmp	r3, #62	; 0x3e
 8006e34:	d81a      	bhi.n	8006e6c <USB_EPStartXfer+0xcb6>
 8006e36:	463b      	mov	r3, r7
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	691b      	ldr	r3, [r3, #16]
 8006e3c:	085b      	lsrs	r3, r3, #1
 8006e3e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006e42:	463b      	mov	r3, r7
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	691b      	ldr	r3, [r3, #16]
 8006e48:	f003 0301 	and.w	r3, r3, #1
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	d004      	beq.n	8006e5a <USB_EPStartXfer+0xca4>
 8006e50:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006e54:	3301      	adds	r3, #1
 8006e56:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006e5a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006e5e:	b29b      	uxth	r3, r3
 8006e60:	029b      	lsls	r3, r3, #10
 8006e62:	b29a      	uxth	r2, r3
 8006e64:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006e68:	801a      	strh	r2, [r3, #0]
 8006e6a:	e045      	b.n	8006ef8 <USB_EPStartXfer+0xd42>
 8006e6c:	463b      	mov	r3, r7
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	691b      	ldr	r3, [r3, #16]
 8006e72:	095b      	lsrs	r3, r3, #5
 8006e74:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006e78:	463b      	mov	r3, r7
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	691b      	ldr	r3, [r3, #16]
 8006e7e:	f003 031f 	and.w	r3, r3, #31
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	d104      	bne.n	8006e90 <USB_EPStartXfer+0xcda>
 8006e86:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006e8a:	3b01      	subs	r3, #1
 8006e8c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006e90:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006e94:	b29b      	uxth	r3, r3
 8006e96:	029b      	lsls	r3, r3, #10
 8006e98:	b29b      	uxth	r3, r3
 8006e9a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006e9e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006ea2:	b29a      	uxth	r2, r3
 8006ea4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006ea8:	801a      	strh	r2, [r3, #0]
 8006eaa:	e025      	b.n	8006ef8 <USB_EPStartXfer+0xd42>
 8006eac:	463b      	mov	r3, r7
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	785b      	ldrb	r3, [r3, #1]
 8006eb2:	2b01      	cmp	r3, #1
 8006eb4:	d120      	bne.n	8006ef8 <USB_EPStartXfer+0xd42>
 8006eb6:	1d3b      	adds	r3, r7, #4
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006ebe:	1d3b      	adds	r3, r7, #4
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006ec6:	b29b      	uxth	r3, r3
 8006ec8:	461a      	mov	r2, r3
 8006eca:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006ece:	4413      	add	r3, r2
 8006ed0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006ed4:	463b      	mov	r3, r7
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	781b      	ldrb	r3, [r3, #0]
 8006eda:	011a      	lsls	r2, r3, #4
 8006edc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006ee0:	4413      	add	r3, r2
 8006ee2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006ee6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006eea:	463b      	mov	r3, r7
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	691b      	ldr	r3, [r3, #16]
 8006ef0:	b29a      	uxth	r2, r3
 8006ef2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8006ef6:	801a      	strh	r2, [r3, #0]
 8006ef8:	1d3b      	adds	r3, r7, #4
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006f00:	463b      	mov	r3, r7
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	785b      	ldrb	r3, [r3, #1]
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	d175      	bne.n	8006ff6 <USB_EPStartXfer+0xe40>
 8006f0a:	1d3b      	adds	r3, r7, #4
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8006f12:	1d3b      	adds	r3, r7, #4
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006f1a:	b29b      	uxth	r3, r3
 8006f1c:	461a      	mov	r2, r3
 8006f1e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006f22:	4413      	add	r3, r2
 8006f24:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8006f28:	463b      	mov	r3, r7
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	781b      	ldrb	r3, [r3, #0]
 8006f2e:	011a      	lsls	r2, r3, #4
 8006f30:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006f34:	4413      	add	r3, r2
 8006f36:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006f3a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006f3e:	463b      	mov	r3, r7
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	691b      	ldr	r3, [r3, #16]
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	d116      	bne.n	8006f76 <USB_EPStartXfer+0xdc0>
 8006f48:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006f4c:	881b      	ldrh	r3, [r3, #0]
 8006f4e:	b29b      	uxth	r3, r3
 8006f50:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006f54:	b29a      	uxth	r2, r3
 8006f56:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006f5a:	801a      	strh	r2, [r3, #0]
 8006f5c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006f60:	881b      	ldrh	r3, [r3, #0]
 8006f62:	b29b      	uxth	r3, r3
 8006f64:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006f68:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006f6c:	b29a      	uxth	r2, r3
 8006f6e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006f72:	801a      	strh	r2, [r3, #0]
 8006f74:	e061      	b.n	800703a <USB_EPStartXfer+0xe84>
 8006f76:	463b      	mov	r3, r7
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	691b      	ldr	r3, [r3, #16]
 8006f7c:	2b3e      	cmp	r3, #62	; 0x3e
 8006f7e:	d81a      	bhi.n	8006fb6 <USB_EPStartXfer+0xe00>
 8006f80:	463b      	mov	r3, r7
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	691b      	ldr	r3, [r3, #16]
 8006f86:	085b      	lsrs	r3, r3, #1
 8006f88:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006f8c:	463b      	mov	r3, r7
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	691b      	ldr	r3, [r3, #16]
 8006f92:	f003 0301 	and.w	r3, r3, #1
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	d004      	beq.n	8006fa4 <USB_EPStartXfer+0xdee>
 8006f9a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006f9e:	3301      	adds	r3, #1
 8006fa0:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006fa4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006fa8:	b29b      	uxth	r3, r3
 8006faa:	029b      	lsls	r3, r3, #10
 8006fac:	b29a      	uxth	r2, r3
 8006fae:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006fb2:	801a      	strh	r2, [r3, #0]
 8006fb4:	e041      	b.n	800703a <USB_EPStartXfer+0xe84>
 8006fb6:	463b      	mov	r3, r7
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	691b      	ldr	r3, [r3, #16]
 8006fbc:	095b      	lsrs	r3, r3, #5
 8006fbe:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006fc2:	463b      	mov	r3, r7
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	691b      	ldr	r3, [r3, #16]
 8006fc8:	f003 031f 	and.w	r3, r3, #31
 8006fcc:	2b00      	cmp	r3, #0
 8006fce:	d104      	bne.n	8006fda <USB_EPStartXfer+0xe24>
 8006fd0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006fd4:	3b01      	subs	r3, #1
 8006fd6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006fda:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006fde:	b29b      	uxth	r3, r3
 8006fe0:	029b      	lsls	r3, r3, #10
 8006fe2:	b29b      	uxth	r3, r3
 8006fe4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006fe8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006fec:	b29a      	uxth	r2, r3
 8006fee:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006ff2:	801a      	strh	r2, [r3, #0]
 8006ff4:	e021      	b.n	800703a <USB_EPStartXfer+0xe84>
 8006ff6:	463b      	mov	r3, r7
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	785b      	ldrb	r3, [r3, #1]
 8006ffc:	2b01      	cmp	r3, #1
 8006ffe:	d11c      	bne.n	800703a <USB_EPStartXfer+0xe84>
 8007000:	1d3b      	adds	r3, r7, #4
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007008:	b29b      	uxth	r3, r3
 800700a:	461a      	mov	r2, r3
 800700c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007010:	4413      	add	r3, r2
 8007012:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8007016:	463b      	mov	r3, r7
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	781b      	ldrb	r3, [r3, #0]
 800701c:	011a      	lsls	r2, r3, #4
 800701e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007022:	4413      	add	r3, r2
 8007024:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007028:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800702c:	463b      	mov	r3, r7
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	691b      	ldr	r3, [r3, #16]
 8007032:	b29a      	uxth	r2, r3
 8007034:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8007038:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 800703a:	463b      	mov	r3, r7
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	69db      	ldr	r3, [r3, #28]
 8007040:	2b00      	cmp	r3, #0
 8007042:	f000 81a4 	beq.w	800738e <USB_EPStartXfer+0x11d8>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8007046:	1d3b      	adds	r3, r7, #4
 8007048:	681a      	ldr	r2, [r3, #0]
 800704a:	463b      	mov	r3, r7
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	781b      	ldrb	r3, [r3, #0]
 8007050:	009b      	lsls	r3, r3, #2
 8007052:	4413      	add	r3, r2
 8007054:	881b      	ldrh	r3, [r3, #0]
 8007056:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800705a:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 800705e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007062:	2b00      	cmp	r3, #0
 8007064:	d005      	beq.n	8007072 <USB_EPStartXfer+0xebc>
 8007066:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 800706a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800706e:	2b00      	cmp	r3, #0
 8007070:	d10d      	bne.n	800708e <USB_EPStartXfer+0xed8>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8007072:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8007076:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800707a:	2b00      	cmp	r3, #0
 800707c:	f040 8187 	bne.w	800738e <USB_EPStartXfer+0x11d8>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8007080:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8007084:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007088:	2b00      	cmp	r3, #0
 800708a:	f040 8180 	bne.w	800738e <USB_EPStartXfer+0x11d8>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 800708e:	1d3b      	adds	r3, r7, #4
 8007090:	681a      	ldr	r2, [r3, #0]
 8007092:	463b      	mov	r3, r7
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	781b      	ldrb	r3, [r3, #0]
 8007098:	009b      	lsls	r3, r3, #2
 800709a:	4413      	add	r3, r2
 800709c:	881b      	ldrh	r3, [r3, #0]
 800709e:	b29b      	uxth	r3, r3
 80070a0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80070a4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80070a8:	f8a7 3098 	strh.w	r3, [r7, #152]	; 0x98
 80070ac:	1d3b      	adds	r3, r7, #4
 80070ae:	681a      	ldr	r2, [r3, #0]
 80070b0:	463b      	mov	r3, r7
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	781b      	ldrb	r3, [r3, #0]
 80070b6:	009b      	lsls	r3, r3, #2
 80070b8:	441a      	add	r2, r3
 80070ba:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 80070be:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80070c2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80070c6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80070ca:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80070ce:	b29b      	uxth	r3, r3
 80070d0:	8013      	strh	r3, [r2, #0]
 80070d2:	e15c      	b.n	800738e <USB_EPStartXfer+0x11d8>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 80070d4:	463b      	mov	r3, r7
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	78db      	ldrb	r3, [r3, #3]
 80070da:	2b01      	cmp	r3, #1
 80070dc:	f040 8155 	bne.w	800738a <USB_EPStartXfer+0x11d4>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 80070e0:	463b      	mov	r3, r7
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	699a      	ldr	r2, [r3, #24]
 80070e6:	463b      	mov	r3, r7
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	691b      	ldr	r3, [r3, #16]
 80070ec:	429a      	cmp	r2, r3
 80070ee:	d90e      	bls.n	800710e <USB_EPStartXfer+0xf58>
        {
          len = ep->maxpacket;
 80070f0:	463b      	mov	r3, r7
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	691b      	ldr	r3, [r3, #16]
 80070f6:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
          ep->xfer_len -= len;
 80070fa:	463b      	mov	r3, r7
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	699a      	ldr	r2, [r3, #24]
 8007100:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007104:	1ad2      	subs	r2, r2, r3
 8007106:	463b      	mov	r3, r7
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	619a      	str	r2, [r3, #24]
 800710c:	e008      	b.n	8007120 <USB_EPStartXfer+0xf6a>
        }
        else
        {
          len = ep->xfer_len;
 800710e:	463b      	mov	r3, r7
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	699b      	ldr	r3, [r3, #24]
 8007114:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
          ep->xfer_len = 0U;
 8007118:	463b      	mov	r3, r7
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	2200      	movs	r2, #0
 800711e:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8007120:	463b      	mov	r3, r7
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	785b      	ldrb	r3, [r3, #1]
 8007126:	2b00      	cmp	r3, #0
 8007128:	d16f      	bne.n	800720a <USB_EPStartXfer+0x1054>
 800712a:	1d3b      	adds	r3, r7, #4
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007132:	1d3b      	adds	r3, r7, #4
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800713a:	b29b      	uxth	r3, r3
 800713c:	461a      	mov	r2, r3
 800713e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8007142:	4413      	add	r3, r2
 8007144:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007148:	463b      	mov	r3, r7
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	781b      	ldrb	r3, [r3, #0]
 800714e:	011a      	lsls	r2, r3, #4
 8007150:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8007154:	4413      	add	r3, r2
 8007156:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800715a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800715e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007162:	2b00      	cmp	r3, #0
 8007164:	d116      	bne.n	8007194 <USB_EPStartXfer+0xfde>
 8007166:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800716a:	881b      	ldrh	r3, [r3, #0]
 800716c:	b29b      	uxth	r3, r3
 800716e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007172:	b29a      	uxth	r2, r3
 8007174:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8007178:	801a      	strh	r2, [r3, #0]
 800717a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800717e:	881b      	ldrh	r3, [r3, #0]
 8007180:	b29b      	uxth	r3, r3
 8007182:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007186:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800718a:	b29a      	uxth	r2, r3
 800718c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8007190:	801a      	strh	r2, [r3, #0]
 8007192:	e05f      	b.n	8007254 <USB_EPStartXfer+0x109e>
 8007194:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007198:	2b3e      	cmp	r3, #62	; 0x3e
 800719a:	d818      	bhi.n	80071ce <USB_EPStartXfer+0x1018>
 800719c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80071a0:	085b      	lsrs	r3, r3, #1
 80071a2:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80071a6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80071aa:	f003 0301 	and.w	r3, r3, #1
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	d004      	beq.n	80071bc <USB_EPStartXfer+0x1006>
 80071b2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80071b6:	3301      	adds	r3, #1
 80071b8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80071bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80071c0:	b29b      	uxth	r3, r3
 80071c2:	029b      	lsls	r3, r3, #10
 80071c4:	b29a      	uxth	r2, r3
 80071c6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80071ca:	801a      	strh	r2, [r3, #0]
 80071cc:	e042      	b.n	8007254 <USB_EPStartXfer+0x109e>
 80071ce:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80071d2:	095b      	lsrs	r3, r3, #5
 80071d4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80071d8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80071dc:	f003 031f 	and.w	r3, r3, #31
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	d104      	bne.n	80071ee <USB_EPStartXfer+0x1038>
 80071e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80071e8:	3b01      	subs	r3, #1
 80071ea:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80071ee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80071f2:	b29b      	uxth	r3, r3
 80071f4:	029b      	lsls	r3, r3, #10
 80071f6:	b29b      	uxth	r3, r3
 80071f8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80071fc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007200:	b29a      	uxth	r2, r3
 8007202:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8007206:	801a      	strh	r2, [r3, #0]
 8007208:	e024      	b.n	8007254 <USB_EPStartXfer+0x109e>
 800720a:	463b      	mov	r3, r7
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	785b      	ldrb	r3, [r3, #1]
 8007210:	2b01      	cmp	r3, #1
 8007212:	d11f      	bne.n	8007254 <USB_EPStartXfer+0x109e>
 8007214:	1d3b      	adds	r3, r7, #4
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800721c:	1d3b      	adds	r3, r7, #4
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007224:	b29b      	uxth	r3, r3
 8007226:	461a      	mov	r2, r3
 8007228:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800722c:	4413      	add	r3, r2
 800722e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007232:	463b      	mov	r3, r7
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	781b      	ldrb	r3, [r3, #0]
 8007238:	011a      	lsls	r2, r3, #4
 800723a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800723e:	4413      	add	r3, r2
 8007240:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007244:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8007248:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800724c:	b29a      	uxth	r2, r3
 800724e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007252:	801a      	strh	r2, [r3, #0]
 8007254:	1d3b      	adds	r3, r7, #4
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800725c:	463b      	mov	r3, r7
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	785b      	ldrb	r3, [r3, #1]
 8007262:	2b00      	cmp	r3, #0
 8007264:	d16f      	bne.n	8007346 <USB_EPStartXfer+0x1190>
 8007266:	1d3b      	adds	r3, r7, #4
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800726e:	1d3b      	adds	r3, r7, #4
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007276:	b29b      	uxth	r3, r3
 8007278:	461a      	mov	r2, r3
 800727a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800727e:	4413      	add	r3, r2
 8007280:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007284:	463b      	mov	r3, r7
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	781b      	ldrb	r3, [r3, #0]
 800728a:	011a      	lsls	r2, r3, #4
 800728c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8007290:	4413      	add	r3, r2
 8007292:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007296:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800729a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800729e:	2b00      	cmp	r3, #0
 80072a0:	d116      	bne.n	80072d0 <USB_EPStartXfer+0x111a>
 80072a2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80072a6:	881b      	ldrh	r3, [r3, #0]
 80072a8:	b29b      	uxth	r3, r3
 80072aa:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80072ae:	b29a      	uxth	r2, r3
 80072b0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80072b4:	801a      	strh	r2, [r3, #0]
 80072b6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80072ba:	881b      	ldrh	r3, [r3, #0]
 80072bc:	b29b      	uxth	r3, r3
 80072be:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80072c2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80072c6:	b29a      	uxth	r2, r3
 80072c8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80072cc:	801a      	strh	r2, [r3, #0]
 80072ce:	e05e      	b.n	800738e <USB_EPStartXfer+0x11d8>
 80072d0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80072d4:	2b3e      	cmp	r3, #62	; 0x3e
 80072d6:	d818      	bhi.n	800730a <USB_EPStartXfer+0x1154>
 80072d8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80072dc:	085b      	lsrs	r3, r3, #1
 80072de:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80072e2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80072e6:	f003 0301 	and.w	r3, r3, #1
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	d004      	beq.n	80072f8 <USB_EPStartXfer+0x1142>
 80072ee:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80072f2:	3301      	adds	r3, #1
 80072f4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80072f8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80072fc:	b29b      	uxth	r3, r3
 80072fe:	029b      	lsls	r3, r3, #10
 8007300:	b29a      	uxth	r2, r3
 8007302:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8007306:	801a      	strh	r2, [r3, #0]
 8007308:	e041      	b.n	800738e <USB_EPStartXfer+0x11d8>
 800730a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800730e:	095b      	lsrs	r3, r3, #5
 8007310:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8007314:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007318:	f003 031f 	and.w	r3, r3, #31
 800731c:	2b00      	cmp	r3, #0
 800731e:	d104      	bne.n	800732a <USB_EPStartXfer+0x1174>
 8007320:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007324:	3b01      	subs	r3, #1
 8007326:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800732a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800732e:	b29b      	uxth	r3, r3
 8007330:	029b      	lsls	r3, r3, #10
 8007332:	b29b      	uxth	r3, r3
 8007334:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007338:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800733c:	b29a      	uxth	r2, r3
 800733e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8007342:	801a      	strh	r2, [r3, #0]
 8007344:	e023      	b.n	800738e <USB_EPStartXfer+0x11d8>
 8007346:	463b      	mov	r3, r7
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	785b      	ldrb	r3, [r3, #1]
 800734c:	2b01      	cmp	r3, #1
 800734e:	d11e      	bne.n	800738e <USB_EPStartXfer+0x11d8>
 8007350:	1d3b      	adds	r3, r7, #4
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007358:	b29b      	uxth	r3, r3
 800735a:	461a      	mov	r2, r3
 800735c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007360:	4413      	add	r3, r2
 8007362:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007366:	463b      	mov	r3, r7
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	781b      	ldrb	r3, [r3, #0]
 800736c:	011a      	lsls	r2, r3, #4
 800736e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007372:	4413      	add	r3, r2
 8007374:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007378:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800737c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007380:	b29a      	uxth	r2, r3
 8007382:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8007386:	801a      	strh	r2, [r3, #0]
 8007388:	e001      	b.n	800738e <USB_EPStartXfer+0x11d8>
      }
      else
      {
        return HAL_ERROR;
 800738a:	2301      	movs	r3, #1
 800738c:	e02e      	b.n	80073ec <USB_EPStartXfer+0x1236>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800738e:	1d3b      	adds	r3, r7, #4
 8007390:	681a      	ldr	r2, [r3, #0]
 8007392:	463b      	mov	r3, r7
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	781b      	ldrb	r3, [r3, #0]
 8007398:	009b      	lsls	r3, r3, #2
 800739a:	4413      	add	r3, r2
 800739c:	881b      	ldrh	r3, [r3, #0]
 800739e:	b29b      	uxth	r3, r3
 80073a0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80073a4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80073a8:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 80073ac:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 80073b0:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80073b4:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 80073b8:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 80073bc:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80073c0:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 80073c4:	1d3b      	adds	r3, r7, #4
 80073c6:	681a      	ldr	r2, [r3, #0]
 80073c8:	463b      	mov	r3, r7
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	781b      	ldrb	r3, [r3, #0]
 80073ce:	009b      	lsls	r3, r3, #2
 80073d0:	441a      	add	r2, r3
 80073d2:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 80073d6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80073da:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80073de:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80073e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80073e6:	b29b      	uxth	r3, r3
 80073e8:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80073ea:	2300      	movs	r3, #0
}
 80073ec:	4618      	mov	r0, r3
 80073ee:	f507 7788 	add.w	r7, r7, #272	; 0x110
 80073f2:	46bd      	mov	sp, r7
 80073f4:	bd80      	pop	{r7, pc}

080073f6 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80073f6:	b480      	push	{r7}
 80073f8:	b085      	sub	sp, #20
 80073fa:	af00      	add	r7, sp, #0
 80073fc:	6078      	str	r0, [r7, #4]
 80073fe:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8007400:	683b      	ldr	r3, [r7, #0]
 8007402:	785b      	ldrb	r3, [r3, #1]
 8007404:	2b00      	cmp	r3, #0
 8007406:	d020      	beq.n	800744a <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8007408:	687a      	ldr	r2, [r7, #4]
 800740a:	683b      	ldr	r3, [r7, #0]
 800740c:	781b      	ldrb	r3, [r3, #0]
 800740e:	009b      	lsls	r3, r3, #2
 8007410:	4413      	add	r3, r2
 8007412:	881b      	ldrh	r3, [r3, #0]
 8007414:	b29b      	uxth	r3, r3
 8007416:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800741a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800741e:	81bb      	strh	r3, [r7, #12]
 8007420:	89bb      	ldrh	r3, [r7, #12]
 8007422:	f083 0310 	eor.w	r3, r3, #16
 8007426:	81bb      	strh	r3, [r7, #12]
 8007428:	687a      	ldr	r2, [r7, #4]
 800742a:	683b      	ldr	r3, [r7, #0]
 800742c:	781b      	ldrb	r3, [r3, #0]
 800742e:	009b      	lsls	r3, r3, #2
 8007430:	441a      	add	r2, r3
 8007432:	89bb      	ldrh	r3, [r7, #12]
 8007434:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007438:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800743c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007440:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007444:	b29b      	uxth	r3, r3
 8007446:	8013      	strh	r3, [r2, #0]
 8007448:	e01f      	b.n	800748a <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800744a:	687a      	ldr	r2, [r7, #4]
 800744c:	683b      	ldr	r3, [r7, #0]
 800744e:	781b      	ldrb	r3, [r3, #0]
 8007450:	009b      	lsls	r3, r3, #2
 8007452:	4413      	add	r3, r2
 8007454:	881b      	ldrh	r3, [r3, #0]
 8007456:	b29b      	uxth	r3, r3
 8007458:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800745c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007460:	81fb      	strh	r3, [r7, #14]
 8007462:	89fb      	ldrh	r3, [r7, #14]
 8007464:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8007468:	81fb      	strh	r3, [r7, #14]
 800746a:	687a      	ldr	r2, [r7, #4]
 800746c:	683b      	ldr	r3, [r7, #0]
 800746e:	781b      	ldrb	r3, [r3, #0]
 8007470:	009b      	lsls	r3, r3, #2
 8007472:	441a      	add	r2, r3
 8007474:	89fb      	ldrh	r3, [r7, #14]
 8007476:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800747a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800747e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007482:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007486:	b29b      	uxth	r3, r3
 8007488:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800748a:	2300      	movs	r3, #0
}
 800748c:	4618      	mov	r0, r3
 800748e:	3714      	adds	r7, #20
 8007490:	46bd      	mov	sp, r7
 8007492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007496:	4770      	bx	lr

08007498 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007498:	b480      	push	{r7}
 800749a:	b087      	sub	sp, #28
 800749c:	af00      	add	r7, sp, #0
 800749e:	6078      	str	r0, [r7, #4]
 80074a0:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80074a2:	683b      	ldr	r3, [r7, #0]
 80074a4:	7b1b      	ldrb	r3, [r3, #12]
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	f040 809d 	bne.w	80075e6 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 80074ac:	683b      	ldr	r3, [r7, #0]
 80074ae:	785b      	ldrb	r3, [r3, #1]
 80074b0:	2b00      	cmp	r3, #0
 80074b2:	d04c      	beq.n	800754e <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80074b4:	687a      	ldr	r2, [r7, #4]
 80074b6:	683b      	ldr	r3, [r7, #0]
 80074b8:	781b      	ldrb	r3, [r3, #0]
 80074ba:	009b      	lsls	r3, r3, #2
 80074bc:	4413      	add	r3, r2
 80074be:	881b      	ldrh	r3, [r3, #0]
 80074c0:	823b      	strh	r3, [r7, #16]
 80074c2:	8a3b      	ldrh	r3, [r7, #16]
 80074c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80074c8:	2b00      	cmp	r3, #0
 80074ca:	d01b      	beq.n	8007504 <USB_EPClearStall+0x6c>
 80074cc:	687a      	ldr	r2, [r7, #4]
 80074ce:	683b      	ldr	r3, [r7, #0]
 80074d0:	781b      	ldrb	r3, [r3, #0]
 80074d2:	009b      	lsls	r3, r3, #2
 80074d4:	4413      	add	r3, r2
 80074d6:	881b      	ldrh	r3, [r3, #0]
 80074d8:	b29b      	uxth	r3, r3
 80074da:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80074de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80074e2:	81fb      	strh	r3, [r7, #14]
 80074e4:	687a      	ldr	r2, [r7, #4]
 80074e6:	683b      	ldr	r3, [r7, #0]
 80074e8:	781b      	ldrb	r3, [r3, #0]
 80074ea:	009b      	lsls	r3, r3, #2
 80074ec:	441a      	add	r2, r3
 80074ee:	89fb      	ldrh	r3, [r7, #14]
 80074f0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80074f4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80074f8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80074fc:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007500:	b29b      	uxth	r3, r3
 8007502:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007504:	683b      	ldr	r3, [r7, #0]
 8007506:	78db      	ldrb	r3, [r3, #3]
 8007508:	2b01      	cmp	r3, #1
 800750a:	d06c      	beq.n	80075e6 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800750c:	687a      	ldr	r2, [r7, #4]
 800750e:	683b      	ldr	r3, [r7, #0]
 8007510:	781b      	ldrb	r3, [r3, #0]
 8007512:	009b      	lsls	r3, r3, #2
 8007514:	4413      	add	r3, r2
 8007516:	881b      	ldrh	r3, [r3, #0]
 8007518:	b29b      	uxth	r3, r3
 800751a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800751e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007522:	81bb      	strh	r3, [r7, #12]
 8007524:	89bb      	ldrh	r3, [r7, #12]
 8007526:	f083 0320 	eor.w	r3, r3, #32
 800752a:	81bb      	strh	r3, [r7, #12]
 800752c:	687a      	ldr	r2, [r7, #4]
 800752e:	683b      	ldr	r3, [r7, #0]
 8007530:	781b      	ldrb	r3, [r3, #0]
 8007532:	009b      	lsls	r3, r3, #2
 8007534:	441a      	add	r2, r3
 8007536:	89bb      	ldrh	r3, [r7, #12]
 8007538:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800753c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007540:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007544:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007548:	b29b      	uxth	r3, r3
 800754a:	8013      	strh	r3, [r2, #0]
 800754c:	e04b      	b.n	80075e6 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800754e:	687a      	ldr	r2, [r7, #4]
 8007550:	683b      	ldr	r3, [r7, #0]
 8007552:	781b      	ldrb	r3, [r3, #0]
 8007554:	009b      	lsls	r3, r3, #2
 8007556:	4413      	add	r3, r2
 8007558:	881b      	ldrh	r3, [r3, #0]
 800755a:	82fb      	strh	r3, [r7, #22]
 800755c:	8afb      	ldrh	r3, [r7, #22]
 800755e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007562:	2b00      	cmp	r3, #0
 8007564:	d01b      	beq.n	800759e <USB_EPClearStall+0x106>
 8007566:	687a      	ldr	r2, [r7, #4]
 8007568:	683b      	ldr	r3, [r7, #0]
 800756a:	781b      	ldrb	r3, [r3, #0]
 800756c:	009b      	lsls	r3, r3, #2
 800756e:	4413      	add	r3, r2
 8007570:	881b      	ldrh	r3, [r3, #0]
 8007572:	b29b      	uxth	r3, r3
 8007574:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007578:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800757c:	82bb      	strh	r3, [r7, #20]
 800757e:	687a      	ldr	r2, [r7, #4]
 8007580:	683b      	ldr	r3, [r7, #0]
 8007582:	781b      	ldrb	r3, [r3, #0]
 8007584:	009b      	lsls	r3, r3, #2
 8007586:	441a      	add	r2, r3
 8007588:	8abb      	ldrh	r3, [r7, #20]
 800758a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800758e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007592:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007596:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800759a:	b29b      	uxth	r3, r3
 800759c:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800759e:	687a      	ldr	r2, [r7, #4]
 80075a0:	683b      	ldr	r3, [r7, #0]
 80075a2:	781b      	ldrb	r3, [r3, #0]
 80075a4:	009b      	lsls	r3, r3, #2
 80075a6:	4413      	add	r3, r2
 80075a8:	881b      	ldrh	r3, [r3, #0]
 80075aa:	b29b      	uxth	r3, r3
 80075ac:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80075b0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80075b4:	827b      	strh	r3, [r7, #18]
 80075b6:	8a7b      	ldrh	r3, [r7, #18]
 80075b8:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80075bc:	827b      	strh	r3, [r7, #18]
 80075be:	8a7b      	ldrh	r3, [r7, #18]
 80075c0:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80075c4:	827b      	strh	r3, [r7, #18]
 80075c6:	687a      	ldr	r2, [r7, #4]
 80075c8:	683b      	ldr	r3, [r7, #0]
 80075ca:	781b      	ldrb	r3, [r3, #0]
 80075cc:	009b      	lsls	r3, r3, #2
 80075ce:	441a      	add	r2, r3
 80075d0:	8a7b      	ldrh	r3, [r7, #18]
 80075d2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80075d6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80075da:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80075de:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80075e2:	b29b      	uxth	r3, r3
 80075e4:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 80075e6:	2300      	movs	r3, #0
}
 80075e8:	4618      	mov	r0, r3
 80075ea:	371c      	adds	r7, #28
 80075ec:	46bd      	mov	sp, r7
 80075ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075f2:	4770      	bx	lr

080075f4 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 80075f4:	b480      	push	{r7}
 80075f6:	b083      	sub	sp, #12
 80075f8:	af00      	add	r7, sp, #0
 80075fa:	6078      	str	r0, [r7, #4]
 80075fc:	460b      	mov	r3, r1
 80075fe:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8007600:	78fb      	ldrb	r3, [r7, #3]
 8007602:	2b00      	cmp	r3, #0
 8007604:	d103      	bne.n	800760e <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	2280      	movs	r2, #128	; 0x80
 800760a:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 800760e:	2300      	movs	r3, #0
}
 8007610:	4618      	mov	r0, r3
 8007612:	370c      	adds	r7, #12
 8007614:	46bd      	mov	sp, r7
 8007616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800761a:	4770      	bx	lr

0800761c <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 800761c:	b480      	push	{r7}
 800761e:	b083      	sub	sp, #12
 8007620:	af00      	add	r7, sp, #0
 8007622:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8007624:	2300      	movs	r3, #0
}
 8007626:	4618      	mov	r0, r3
 8007628:	370c      	adds	r7, #12
 800762a:	46bd      	mov	sp, r7
 800762c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007630:	4770      	bx	lr

08007632 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8007632:	b480      	push	{r7}
 8007634:	b085      	sub	sp, #20
 8007636:	af00      	add	r7, sp, #0
 8007638:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8007640:	b29b      	uxth	r3, r3
 8007642:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8007644:	68fb      	ldr	r3, [r7, #12]
}
 8007646:	4618      	mov	r0, r3
 8007648:	3714      	adds	r7, #20
 800764a:	46bd      	mov	sp, r7
 800764c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007650:	4770      	bx	lr

08007652 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8007652:	b480      	push	{r7}
 8007654:	b08d      	sub	sp, #52	; 0x34
 8007656:	af00      	add	r7, sp, #0
 8007658:	60f8      	str	r0, [r7, #12]
 800765a:	60b9      	str	r1, [r7, #8]
 800765c:	4611      	mov	r1, r2
 800765e:	461a      	mov	r2, r3
 8007660:	460b      	mov	r3, r1
 8007662:	80fb      	strh	r3, [r7, #6]
 8007664:	4613      	mov	r3, r2
 8007666:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8007668:	88bb      	ldrh	r3, [r7, #4]
 800766a:	3301      	adds	r3, #1
 800766c:	085b      	lsrs	r3, r3, #1
 800766e:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 8007670:	68fb      	ldr	r3, [r7, #12]
 8007672:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8007674:	68bb      	ldr	r3, [r7, #8]
 8007676:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8007678:	88fb      	ldrh	r3, [r7, #6]
 800767a:	005a      	lsls	r2, r3, #1
 800767c:	69fb      	ldr	r3, [r7, #28]
 800767e:	4413      	add	r3, r2
 8007680:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007684:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 8007686:	6a3b      	ldr	r3, [r7, #32]
 8007688:	62fb      	str	r3, [r7, #44]	; 0x2c
 800768a:	e01e      	b.n	80076ca <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 800768c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800768e:	781b      	ldrb	r3, [r3, #0]
 8007690:	61bb      	str	r3, [r7, #24]
    pBuf++;
 8007692:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007694:	3301      	adds	r3, #1
 8007696:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 8007698:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800769a:	781b      	ldrb	r3, [r3, #0]
 800769c:	b29b      	uxth	r3, r3
 800769e:	021b      	lsls	r3, r3, #8
 80076a0:	b29b      	uxth	r3, r3
 80076a2:	461a      	mov	r2, r3
 80076a4:	69bb      	ldr	r3, [r7, #24]
 80076a6:	4313      	orrs	r3, r2
 80076a8:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 80076aa:	697b      	ldr	r3, [r7, #20]
 80076ac:	b29a      	uxth	r2, r3
 80076ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076b0:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 80076b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076b4:	3302      	adds	r3, #2
 80076b6:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 80076b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076ba:	3302      	adds	r3, #2
 80076bc:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 80076be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076c0:	3301      	adds	r3, #1
 80076c2:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 80076c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80076c6:	3b01      	subs	r3, #1
 80076c8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80076ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	d1dd      	bne.n	800768c <USB_WritePMA+0x3a>
  }
}
 80076d0:	bf00      	nop
 80076d2:	3734      	adds	r7, #52	; 0x34
 80076d4:	46bd      	mov	sp, r7
 80076d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076da:	4770      	bx	lr

080076dc <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80076dc:	b480      	push	{r7}
 80076de:	b08b      	sub	sp, #44	; 0x2c
 80076e0:	af00      	add	r7, sp, #0
 80076e2:	60f8      	str	r0, [r7, #12]
 80076e4:	60b9      	str	r1, [r7, #8]
 80076e6:	4611      	mov	r1, r2
 80076e8:	461a      	mov	r2, r3
 80076ea:	460b      	mov	r3, r1
 80076ec:	80fb      	strh	r3, [r7, #6]
 80076ee:	4613      	mov	r3, r2
 80076f0:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 80076f2:	88bb      	ldrh	r3, [r7, #4]
 80076f4:	085b      	lsrs	r3, r3, #1
 80076f6:	b29b      	uxth	r3, r3
 80076f8:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 80076fa:	68fb      	ldr	r3, [r7, #12]
 80076fc:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80076fe:	68bb      	ldr	r3, [r7, #8]
 8007700:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8007702:	88fb      	ldrh	r3, [r7, #6]
 8007704:	005a      	lsls	r2, r3, #1
 8007706:	697b      	ldr	r3, [r7, #20]
 8007708:	4413      	add	r3, r2
 800770a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800770e:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 8007710:	69bb      	ldr	r3, [r7, #24]
 8007712:	627b      	str	r3, [r7, #36]	; 0x24
 8007714:	e01b      	b.n	800774e <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 8007716:	6a3b      	ldr	r3, [r7, #32]
 8007718:	881b      	ldrh	r3, [r3, #0]
 800771a:	b29b      	uxth	r3, r3
 800771c:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800771e:	6a3b      	ldr	r3, [r7, #32]
 8007720:	3302      	adds	r3, #2
 8007722:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8007724:	693b      	ldr	r3, [r7, #16]
 8007726:	b2da      	uxtb	r2, r3
 8007728:	69fb      	ldr	r3, [r7, #28]
 800772a:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800772c:	69fb      	ldr	r3, [r7, #28]
 800772e:	3301      	adds	r3, #1
 8007730:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8007732:	693b      	ldr	r3, [r7, #16]
 8007734:	0a1b      	lsrs	r3, r3, #8
 8007736:	b2da      	uxtb	r2, r3
 8007738:	69fb      	ldr	r3, [r7, #28]
 800773a:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800773c:	69fb      	ldr	r3, [r7, #28]
 800773e:	3301      	adds	r3, #1
 8007740:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 8007742:	6a3b      	ldr	r3, [r7, #32]
 8007744:	3302      	adds	r3, #2
 8007746:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 8007748:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800774a:	3b01      	subs	r3, #1
 800774c:	627b      	str	r3, [r7, #36]	; 0x24
 800774e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007750:	2b00      	cmp	r3, #0
 8007752:	d1e0      	bne.n	8007716 <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 8007754:	88bb      	ldrh	r3, [r7, #4]
 8007756:	f003 0301 	and.w	r3, r3, #1
 800775a:	b29b      	uxth	r3, r3
 800775c:	2b00      	cmp	r3, #0
 800775e:	d007      	beq.n	8007770 <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 8007760:	6a3b      	ldr	r3, [r7, #32]
 8007762:	881b      	ldrh	r3, [r3, #0]
 8007764:	b29b      	uxth	r3, r3
 8007766:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8007768:	693b      	ldr	r3, [r7, #16]
 800776a:	b2da      	uxtb	r2, r3
 800776c:	69fb      	ldr	r3, [r7, #28]
 800776e:	701a      	strb	r2, [r3, #0]
  }
}
 8007770:	bf00      	nop
 8007772:	372c      	adds	r7, #44	; 0x2c
 8007774:	46bd      	mov	sp, r7
 8007776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800777a:	4770      	bx	lr

0800777c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800777c:	b580      	push	{r7, lr}
 800777e:	b084      	sub	sp, #16
 8007780:	af00      	add	r7, sp, #0
 8007782:	6078      	str	r0, [r7, #4]
 8007784:	460b      	mov	r3, r1
 8007786:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8007788:	2300      	movs	r3, #0
 800778a:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	7c1b      	ldrb	r3, [r3, #16]
 8007790:	2b00      	cmp	r3, #0
 8007792:	d115      	bne.n	80077c0 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8007794:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007798:	2202      	movs	r2, #2
 800779a:	2181      	movs	r1, #129	; 0x81
 800779c:	6878      	ldr	r0, [r7, #4]
 800779e:	f001 fea6 	bl	80094ee <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	2201      	movs	r2, #1
 80077a6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80077a8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80077ac:	2202      	movs	r2, #2
 80077ae:	2101      	movs	r1, #1
 80077b0:	6878      	ldr	r0, [r7, #4]
 80077b2:	f001 fe9c 	bl	80094ee <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	2201      	movs	r2, #1
 80077ba:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 80077be:	e012      	b.n	80077e6 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80077c0:	2340      	movs	r3, #64	; 0x40
 80077c2:	2202      	movs	r2, #2
 80077c4:	2181      	movs	r1, #129	; 0x81
 80077c6:	6878      	ldr	r0, [r7, #4]
 80077c8:	f001 fe91 	bl	80094ee <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	2201      	movs	r2, #1
 80077d0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80077d2:	2340      	movs	r3, #64	; 0x40
 80077d4:	2202      	movs	r2, #2
 80077d6:	2101      	movs	r1, #1
 80077d8:	6878      	ldr	r0, [r7, #4]
 80077da:	f001 fe88 	bl	80094ee <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	2201      	movs	r2, #1
 80077e2:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80077e6:	2308      	movs	r3, #8
 80077e8:	2203      	movs	r2, #3
 80077ea:	2182      	movs	r1, #130	; 0x82
 80077ec:	6878      	ldr	r0, [r7, #4]
 80077ee:	f001 fe7e 	bl	80094ee <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	2201      	movs	r2, #1
 80077f6:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80077f8:	f44f 7007 	mov.w	r0, #540	; 0x21c
 80077fc:	f001 ffa0 	bl	8009740 <USBD_static_malloc>
 8007800:	4602      	mov	r2, r0
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800780e:	2b00      	cmp	r3, #0
 8007810:	d102      	bne.n	8007818 <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 8007812:	2301      	movs	r3, #1
 8007814:	73fb      	strb	r3, [r7, #15]
 8007816:	e026      	b.n	8007866 <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800781e:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 800782a:	68bb      	ldr	r3, [r7, #8]
 800782c:	2200      	movs	r2, #0
 800782e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 8007832:	68bb      	ldr	r3, [r7, #8]
 8007834:	2200      	movs	r2, #0
 8007836:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	7c1b      	ldrb	r3, [r3, #16]
 800783e:	2b00      	cmp	r3, #0
 8007840:	d109      	bne.n	8007856 <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007842:	68bb      	ldr	r3, [r7, #8]
 8007844:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007848:	f44f 7300 	mov.w	r3, #512	; 0x200
 800784c:	2101      	movs	r1, #1
 800784e:	6878      	ldr	r0, [r7, #4]
 8007850:	f001 ff3f 	bl	80096d2 <USBD_LL_PrepareReceive>
 8007854:	e007      	b.n	8007866 <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007856:	68bb      	ldr	r3, [r7, #8]
 8007858:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800785c:	2340      	movs	r3, #64	; 0x40
 800785e:	2101      	movs	r1, #1
 8007860:	6878      	ldr	r0, [r7, #4]
 8007862:	f001 ff36 	bl	80096d2 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8007866:	7bfb      	ldrb	r3, [r7, #15]
}
 8007868:	4618      	mov	r0, r3
 800786a:	3710      	adds	r7, #16
 800786c:	46bd      	mov	sp, r7
 800786e:	bd80      	pop	{r7, pc}

08007870 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007870:	b580      	push	{r7, lr}
 8007872:	b084      	sub	sp, #16
 8007874:	af00      	add	r7, sp, #0
 8007876:	6078      	str	r0, [r7, #4]
 8007878:	460b      	mov	r3, r1
 800787a:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800787c:	2300      	movs	r3, #0
 800787e:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8007880:	2181      	movs	r1, #129	; 0x81
 8007882:	6878      	ldr	r0, [r7, #4]
 8007884:	f001 fe59 	bl	800953a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	2200      	movs	r2, #0
 800788c:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800788e:	2101      	movs	r1, #1
 8007890:	6878      	ldr	r0, [r7, #4]
 8007892:	f001 fe52 	bl	800953a <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	2200      	movs	r2, #0
 800789a:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800789e:	2182      	movs	r1, #130	; 0x82
 80078a0:	6878      	ldr	r0, [r7, #4]
 80078a2:	f001 fe4a 	bl	800953a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	2200      	movs	r2, #0
 80078aa:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80078b2:	2b00      	cmp	r3, #0
 80078b4:	d00e      	beq.n	80078d4 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80078bc:	685b      	ldr	r3, [r3, #4]
 80078be:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80078c6:	4618      	mov	r0, r3
 80078c8:	f001 ff48 	bl	800975c <USBD_static_free>
    pdev->pClassData = NULL;
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	2200      	movs	r2, #0
 80078d0:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 80078d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80078d6:	4618      	mov	r0, r3
 80078d8:	3710      	adds	r7, #16
 80078da:	46bd      	mov	sp, r7
 80078dc:	bd80      	pop	{r7, pc}

080078de <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 80078de:	b580      	push	{r7, lr}
 80078e0:	b086      	sub	sp, #24
 80078e2:	af00      	add	r7, sp, #0
 80078e4:	6078      	str	r0, [r7, #4]
 80078e6:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80078ee:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 80078f0:	2300      	movs	r3, #0
 80078f2:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 80078f4:	2300      	movs	r3, #0
 80078f6:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 80078f8:	2300      	movs	r3, #0
 80078fa:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80078fc:	683b      	ldr	r3, [r7, #0]
 80078fe:	781b      	ldrb	r3, [r3, #0]
 8007900:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007904:	2b00      	cmp	r3, #0
 8007906:	d039      	beq.n	800797c <USBD_CDC_Setup+0x9e>
 8007908:	2b20      	cmp	r3, #32
 800790a:	d17c      	bne.n	8007a06 <USBD_CDC_Setup+0x128>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 800790c:	683b      	ldr	r3, [r7, #0]
 800790e:	88db      	ldrh	r3, [r3, #6]
 8007910:	2b00      	cmp	r3, #0
 8007912:	d029      	beq.n	8007968 <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 8007914:	683b      	ldr	r3, [r7, #0]
 8007916:	781b      	ldrb	r3, [r3, #0]
 8007918:	b25b      	sxtb	r3, r3
 800791a:	2b00      	cmp	r3, #0
 800791c:	da11      	bge.n	8007942 <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007924:	689b      	ldr	r3, [r3, #8]
 8007926:	683a      	ldr	r2, [r7, #0]
 8007928:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 800792a:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800792c:	683a      	ldr	r2, [r7, #0]
 800792e:	88d2      	ldrh	r2, [r2, #6]
 8007930:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8007932:	6939      	ldr	r1, [r7, #16]
 8007934:	683b      	ldr	r3, [r7, #0]
 8007936:	88db      	ldrh	r3, [r3, #6]
 8007938:	461a      	mov	r2, r3
 800793a:	6878      	ldr	r0, [r7, #4]
 800793c:	f001 fa04 	bl	8008d48 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 8007940:	e068      	b.n	8007a14 <USBD_CDC_Setup+0x136>
          hcdc->CmdOpCode = req->bRequest;
 8007942:	683b      	ldr	r3, [r7, #0]
 8007944:	785a      	ldrb	r2, [r3, #1]
 8007946:	693b      	ldr	r3, [r7, #16]
 8007948:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800794c:	683b      	ldr	r3, [r7, #0]
 800794e:	88db      	ldrh	r3, [r3, #6]
 8007950:	b2da      	uxtb	r2, r3
 8007952:	693b      	ldr	r3, [r7, #16]
 8007954:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8007958:	6939      	ldr	r1, [r7, #16]
 800795a:	683b      	ldr	r3, [r7, #0]
 800795c:	88db      	ldrh	r3, [r3, #6]
 800795e:	461a      	mov	r2, r3
 8007960:	6878      	ldr	r0, [r7, #4]
 8007962:	f001 fa1f 	bl	8008da4 <USBD_CtlPrepareRx>
      break;
 8007966:	e055      	b.n	8007a14 <USBD_CDC_Setup+0x136>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800796e:	689b      	ldr	r3, [r3, #8]
 8007970:	683a      	ldr	r2, [r7, #0]
 8007972:	7850      	ldrb	r0, [r2, #1]
 8007974:	2200      	movs	r2, #0
 8007976:	6839      	ldr	r1, [r7, #0]
 8007978:	4798      	blx	r3
      break;
 800797a:	e04b      	b.n	8007a14 <USBD_CDC_Setup+0x136>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800797c:	683b      	ldr	r3, [r7, #0]
 800797e:	785b      	ldrb	r3, [r3, #1]
 8007980:	2b0a      	cmp	r3, #10
 8007982:	d017      	beq.n	80079b4 <USBD_CDC_Setup+0xd6>
 8007984:	2b0b      	cmp	r3, #11
 8007986:	d029      	beq.n	80079dc <USBD_CDC_Setup+0xfe>
 8007988:	2b00      	cmp	r3, #0
 800798a:	d133      	bne.n	80079f4 <USBD_CDC_Setup+0x116>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007992:	2b03      	cmp	r3, #3
 8007994:	d107      	bne.n	80079a6 <USBD_CDC_Setup+0xc8>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8007996:	f107 030c 	add.w	r3, r7, #12
 800799a:	2202      	movs	r2, #2
 800799c:	4619      	mov	r1, r3
 800799e:	6878      	ldr	r0, [r7, #4]
 80079a0:	f001 f9d2 	bl	8008d48 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80079a4:	e02e      	b.n	8007a04 <USBD_CDC_Setup+0x126>
            USBD_CtlError(pdev, req);
 80079a6:	6839      	ldr	r1, [r7, #0]
 80079a8:	6878      	ldr	r0, [r7, #4]
 80079aa:	f001 f962 	bl	8008c72 <USBD_CtlError>
            ret = USBD_FAIL;
 80079ae:	2302      	movs	r3, #2
 80079b0:	75fb      	strb	r3, [r7, #23]
          break;
 80079b2:	e027      	b.n	8007a04 <USBD_CDC_Setup+0x126>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80079ba:	2b03      	cmp	r3, #3
 80079bc:	d107      	bne.n	80079ce <USBD_CDC_Setup+0xf0>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 80079be:	f107 030f 	add.w	r3, r7, #15
 80079c2:	2201      	movs	r2, #1
 80079c4:	4619      	mov	r1, r3
 80079c6:	6878      	ldr	r0, [r7, #4]
 80079c8:	f001 f9be 	bl	8008d48 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80079cc:	e01a      	b.n	8007a04 <USBD_CDC_Setup+0x126>
            USBD_CtlError(pdev, req);
 80079ce:	6839      	ldr	r1, [r7, #0]
 80079d0:	6878      	ldr	r0, [r7, #4]
 80079d2:	f001 f94e 	bl	8008c72 <USBD_CtlError>
            ret = USBD_FAIL;
 80079d6:	2302      	movs	r3, #2
 80079d8:	75fb      	strb	r3, [r7, #23]
          break;
 80079da:	e013      	b.n	8007a04 <USBD_CDC_Setup+0x126>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80079e2:	2b03      	cmp	r3, #3
 80079e4:	d00d      	beq.n	8007a02 <USBD_CDC_Setup+0x124>
          {
            USBD_CtlError(pdev, req);
 80079e6:	6839      	ldr	r1, [r7, #0]
 80079e8:	6878      	ldr	r0, [r7, #4]
 80079ea:	f001 f942 	bl	8008c72 <USBD_CtlError>
            ret = USBD_FAIL;
 80079ee:	2302      	movs	r3, #2
 80079f0:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80079f2:	e006      	b.n	8007a02 <USBD_CDC_Setup+0x124>

        default:
          USBD_CtlError(pdev, req);
 80079f4:	6839      	ldr	r1, [r7, #0]
 80079f6:	6878      	ldr	r0, [r7, #4]
 80079f8:	f001 f93b 	bl	8008c72 <USBD_CtlError>
          ret = USBD_FAIL;
 80079fc:	2302      	movs	r3, #2
 80079fe:	75fb      	strb	r3, [r7, #23]
          break;
 8007a00:	e000      	b.n	8007a04 <USBD_CDC_Setup+0x126>
          break;
 8007a02:	bf00      	nop
      }
      break;
 8007a04:	e006      	b.n	8007a14 <USBD_CDC_Setup+0x136>

    default:
      USBD_CtlError(pdev, req);
 8007a06:	6839      	ldr	r1, [r7, #0]
 8007a08:	6878      	ldr	r0, [r7, #4]
 8007a0a:	f001 f932 	bl	8008c72 <USBD_CtlError>
      ret = USBD_FAIL;
 8007a0e:	2302      	movs	r3, #2
 8007a10:	75fb      	strb	r3, [r7, #23]
      break;
 8007a12:	bf00      	nop
  }

  return ret;
 8007a14:	7dfb      	ldrb	r3, [r7, #23]
}
 8007a16:	4618      	mov	r0, r3
 8007a18:	3718      	adds	r7, #24
 8007a1a:	46bd      	mov	sp, r7
 8007a1c:	bd80      	pop	{r7, pc}

08007a1e <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007a1e:	b580      	push	{r7, lr}
 8007a20:	b084      	sub	sp, #16
 8007a22:	af00      	add	r7, sp, #0
 8007a24:	6078      	str	r0, [r7, #4]
 8007a26:	460b      	mov	r3, r1
 8007a28:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007a30:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007a38:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007a40:	2b00      	cmp	r3, #0
 8007a42:	d03a      	beq.n	8007aba <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8007a44:	78fa      	ldrb	r2, [r7, #3]
 8007a46:	6879      	ldr	r1, [r7, #4]
 8007a48:	4613      	mov	r3, r2
 8007a4a:	009b      	lsls	r3, r3, #2
 8007a4c:	4413      	add	r3, r2
 8007a4e:	009b      	lsls	r3, r3, #2
 8007a50:	440b      	add	r3, r1
 8007a52:	331c      	adds	r3, #28
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	2b00      	cmp	r3, #0
 8007a58:	d029      	beq.n	8007aae <USBD_CDC_DataIn+0x90>
 8007a5a:	78fa      	ldrb	r2, [r7, #3]
 8007a5c:	6879      	ldr	r1, [r7, #4]
 8007a5e:	4613      	mov	r3, r2
 8007a60:	009b      	lsls	r3, r3, #2
 8007a62:	4413      	add	r3, r2
 8007a64:	009b      	lsls	r3, r3, #2
 8007a66:	440b      	add	r3, r1
 8007a68:	331c      	adds	r3, #28
 8007a6a:	681a      	ldr	r2, [r3, #0]
 8007a6c:	78f9      	ldrb	r1, [r7, #3]
 8007a6e:	68b8      	ldr	r0, [r7, #8]
 8007a70:	460b      	mov	r3, r1
 8007a72:	009b      	lsls	r3, r3, #2
 8007a74:	440b      	add	r3, r1
 8007a76:	00db      	lsls	r3, r3, #3
 8007a78:	4403      	add	r3, r0
 8007a7a:	3338      	adds	r3, #56	; 0x38
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	fbb2 f1f3 	udiv	r1, r2, r3
 8007a82:	fb03 f301 	mul.w	r3, r3, r1
 8007a86:	1ad3      	subs	r3, r2, r3
 8007a88:	2b00      	cmp	r3, #0
 8007a8a:	d110      	bne.n	8007aae <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8007a8c:	78fa      	ldrb	r2, [r7, #3]
 8007a8e:	6879      	ldr	r1, [r7, #4]
 8007a90:	4613      	mov	r3, r2
 8007a92:	009b      	lsls	r3, r3, #2
 8007a94:	4413      	add	r3, r2
 8007a96:	009b      	lsls	r3, r3, #2
 8007a98:	440b      	add	r3, r1
 8007a9a:	331c      	adds	r3, #28
 8007a9c:	2200      	movs	r2, #0
 8007a9e:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8007aa0:	78f9      	ldrb	r1, [r7, #3]
 8007aa2:	2300      	movs	r3, #0
 8007aa4:	2200      	movs	r2, #0
 8007aa6:	6878      	ldr	r0, [r7, #4]
 8007aa8:	f001 fdf0 	bl	800968c <USBD_LL_Transmit>
 8007aac:	e003      	b.n	8007ab6 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 8007aae:	68fb      	ldr	r3, [r7, #12]
 8007ab0:	2200      	movs	r2, #0
 8007ab2:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 8007ab6:	2300      	movs	r3, #0
 8007ab8:	e000      	b.n	8007abc <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 8007aba:	2302      	movs	r3, #2
  }
}
 8007abc:	4618      	mov	r0, r3
 8007abe:	3710      	adds	r7, #16
 8007ac0:	46bd      	mov	sp, r7
 8007ac2:	bd80      	pop	{r7, pc}

08007ac4 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007ac4:	b580      	push	{r7, lr}
 8007ac6:	b084      	sub	sp, #16
 8007ac8:	af00      	add	r7, sp, #0
 8007aca:	6078      	str	r0, [r7, #4]
 8007acc:	460b      	mov	r3, r1
 8007ace:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007ad6:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8007ad8:	78fb      	ldrb	r3, [r7, #3]
 8007ada:	4619      	mov	r1, r3
 8007adc:	6878      	ldr	r0, [r7, #4]
 8007ade:	f001 fe1b 	bl	8009718 <USBD_LL_GetRxDataSize>
 8007ae2:	4602      	mov	r2, r0
 8007ae4:	68fb      	ldr	r3, [r7, #12]
 8007ae6:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007af0:	2b00      	cmp	r3, #0
 8007af2:	d00d      	beq.n	8007b10 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007afa:	68db      	ldr	r3, [r3, #12]
 8007afc:	68fa      	ldr	r2, [r7, #12]
 8007afe:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8007b02:	68fa      	ldr	r2, [r7, #12]
 8007b04:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8007b08:	4611      	mov	r1, r2
 8007b0a:	4798      	blx	r3

    return USBD_OK;
 8007b0c:	2300      	movs	r3, #0
 8007b0e:	e000      	b.n	8007b12 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 8007b10:	2302      	movs	r3, #2
  }
}
 8007b12:	4618      	mov	r0, r3
 8007b14:	3710      	adds	r7, #16
 8007b16:	46bd      	mov	sp, r7
 8007b18:	bd80      	pop	{r7, pc}

08007b1a <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8007b1a:	b580      	push	{r7, lr}
 8007b1c:	b084      	sub	sp, #16
 8007b1e:	af00      	add	r7, sp, #0
 8007b20:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007b28:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007b30:	2b00      	cmp	r3, #0
 8007b32:	d015      	beq.n	8007b60 <USBD_CDC_EP0_RxReady+0x46>
 8007b34:	68fb      	ldr	r3, [r7, #12]
 8007b36:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8007b3a:	2bff      	cmp	r3, #255	; 0xff
 8007b3c:	d010      	beq.n	8007b60 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007b44:	689b      	ldr	r3, [r3, #8]
 8007b46:	68fa      	ldr	r2, [r7, #12]
 8007b48:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 8007b4c:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8007b4e:	68fa      	ldr	r2, [r7, #12]
 8007b50:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8007b54:	b292      	uxth	r2, r2
 8007b56:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8007b58:	68fb      	ldr	r3, [r7, #12]
 8007b5a:	22ff      	movs	r2, #255	; 0xff
 8007b5c:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 8007b60:	2300      	movs	r3, #0
}
 8007b62:	4618      	mov	r0, r3
 8007b64:	3710      	adds	r7, #16
 8007b66:	46bd      	mov	sp, r7
 8007b68:	bd80      	pop	{r7, pc}
	...

08007b6c <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8007b6c:	b480      	push	{r7}
 8007b6e:	b083      	sub	sp, #12
 8007b70:	af00      	add	r7, sp, #0
 8007b72:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	2243      	movs	r2, #67	; 0x43
 8007b78:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 8007b7a:	4b03      	ldr	r3, [pc, #12]	; (8007b88 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8007b7c:	4618      	mov	r0, r3
 8007b7e:	370c      	adds	r7, #12
 8007b80:	46bd      	mov	sp, r7
 8007b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b86:	4770      	bx	lr
 8007b88:	20000094 	.word	0x20000094

08007b8c <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8007b8c:	b480      	push	{r7}
 8007b8e:	b083      	sub	sp, #12
 8007b90:	af00      	add	r7, sp, #0
 8007b92:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	2243      	movs	r2, #67	; 0x43
 8007b98:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 8007b9a:	4b03      	ldr	r3, [pc, #12]	; (8007ba8 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8007b9c:	4618      	mov	r0, r3
 8007b9e:	370c      	adds	r7, #12
 8007ba0:	46bd      	mov	sp, r7
 8007ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ba6:	4770      	bx	lr
 8007ba8:	20000050 	.word	0x20000050

08007bac <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8007bac:	b480      	push	{r7}
 8007bae:	b083      	sub	sp, #12
 8007bb0:	af00      	add	r7, sp, #0
 8007bb2:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	2243      	movs	r2, #67	; 0x43
 8007bb8:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 8007bba:	4b03      	ldr	r3, [pc, #12]	; (8007bc8 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8007bbc:	4618      	mov	r0, r3
 8007bbe:	370c      	adds	r7, #12
 8007bc0:	46bd      	mov	sp, r7
 8007bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bc6:	4770      	bx	lr
 8007bc8:	200000d8 	.word	0x200000d8

08007bcc <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8007bcc:	b480      	push	{r7}
 8007bce:	b083      	sub	sp, #12
 8007bd0:	af00      	add	r7, sp, #0
 8007bd2:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	220a      	movs	r2, #10
 8007bd8:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 8007bda:	4b03      	ldr	r3, [pc, #12]	; (8007be8 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8007bdc:	4618      	mov	r0, r3
 8007bde:	370c      	adds	r7, #12
 8007be0:	46bd      	mov	sp, r7
 8007be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007be6:	4770      	bx	lr
 8007be8:	2000000c 	.word	0x2000000c

08007bec <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 8007bec:	b480      	push	{r7}
 8007bee:	b085      	sub	sp, #20
 8007bf0:	af00      	add	r7, sp, #0
 8007bf2:	6078      	str	r0, [r7, #4]
 8007bf4:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8007bf6:	2302      	movs	r3, #2
 8007bf8:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 8007bfa:	683b      	ldr	r3, [r7, #0]
 8007bfc:	2b00      	cmp	r3, #0
 8007bfe:	d005      	beq.n	8007c0c <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	683a      	ldr	r2, [r7, #0]
 8007c04:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 8007c08:	2300      	movs	r3, #0
 8007c0a:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8007c0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c0e:	4618      	mov	r0, r3
 8007c10:	3714      	adds	r7, #20
 8007c12:	46bd      	mov	sp, r7
 8007c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c18:	4770      	bx	lr

08007c1a <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 8007c1a:	b480      	push	{r7}
 8007c1c:	b087      	sub	sp, #28
 8007c1e:	af00      	add	r7, sp, #0
 8007c20:	60f8      	str	r0, [r7, #12]
 8007c22:	60b9      	str	r1, [r7, #8]
 8007c24:	4613      	mov	r3, r2
 8007c26:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007c28:	68fb      	ldr	r3, [r7, #12]
 8007c2a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007c2e:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8007c30:	697b      	ldr	r3, [r7, #20]
 8007c32:	68ba      	ldr	r2, [r7, #8]
 8007c34:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8007c38:	88fa      	ldrh	r2, [r7, #6]
 8007c3a:	697b      	ldr	r3, [r7, #20]
 8007c3c:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 8007c40:	2300      	movs	r3, #0
}
 8007c42:	4618      	mov	r0, r3
 8007c44:	371c      	adds	r7, #28
 8007c46:	46bd      	mov	sp, r7
 8007c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c4c:	4770      	bx	lr

08007c4e <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 8007c4e:	b480      	push	{r7}
 8007c50:	b085      	sub	sp, #20
 8007c52:	af00      	add	r7, sp, #0
 8007c54:	6078      	str	r0, [r7, #4]
 8007c56:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007c5e:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8007c60:	68fb      	ldr	r3, [r7, #12]
 8007c62:	683a      	ldr	r2, [r7, #0]
 8007c64:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 8007c68:	2300      	movs	r3, #0
}
 8007c6a:	4618      	mov	r0, r3
 8007c6c:	3714      	adds	r7, #20
 8007c6e:	46bd      	mov	sp, r7
 8007c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c74:	4770      	bx	lr

08007c76 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8007c76:	b580      	push	{r7, lr}
 8007c78:	b084      	sub	sp, #16
 8007c7a:	af00      	add	r7, sp, #0
 8007c7c:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007c84:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007c8c:	2b00      	cmp	r3, #0
 8007c8e:	d01c      	beq.n	8007cca <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 8007c90:	68fb      	ldr	r3, [r7, #12]
 8007c92:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007c96:	2b00      	cmp	r3, #0
 8007c98:	d115      	bne.n	8007cc6 <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 8007c9a:	68fb      	ldr	r3, [r7, #12]
 8007c9c:	2201      	movs	r2, #1
 8007c9e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8007ca2:	68fb      	ldr	r3, [r7, #12]
 8007ca4:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8007cac:	68fb      	ldr	r3, [r7, #12]
 8007cae:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 8007cb2:	68fb      	ldr	r3, [r7, #12]
 8007cb4:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8007cb8:	b29b      	uxth	r3, r3
 8007cba:	2181      	movs	r1, #129	; 0x81
 8007cbc:	6878      	ldr	r0, [r7, #4]
 8007cbe:	f001 fce5 	bl	800968c <USBD_LL_Transmit>

      return USBD_OK;
 8007cc2:	2300      	movs	r3, #0
 8007cc4:	e002      	b.n	8007ccc <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 8007cc6:	2301      	movs	r3, #1
 8007cc8:	e000      	b.n	8007ccc <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 8007cca:	2302      	movs	r3, #2
  }
}
 8007ccc:	4618      	mov	r0, r3
 8007cce:	3710      	adds	r7, #16
 8007cd0:	46bd      	mov	sp, r7
 8007cd2:	bd80      	pop	{r7, pc}

08007cd4 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8007cd4:	b580      	push	{r7, lr}
 8007cd6:	b084      	sub	sp, #16
 8007cd8:	af00      	add	r7, sp, #0
 8007cda:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007ce2:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007cea:	2b00      	cmp	r3, #0
 8007cec:	d017      	beq.n	8007d1e <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	7c1b      	ldrb	r3, [r3, #16]
 8007cf2:	2b00      	cmp	r3, #0
 8007cf4:	d109      	bne.n	8007d0a <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8007cf6:	68fb      	ldr	r3, [r7, #12]
 8007cf8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007cfc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007d00:	2101      	movs	r1, #1
 8007d02:	6878      	ldr	r0, [r7, #4]
 8007d04:	f001 fce5 	bl	80096d2 <USBD_LL_PrepareReceive>
 8007d08:	e007      	b.n	8007d1a <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8007d0a:	68fb      	ldr	r3, [r7, #12]
 8007d0c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007d10:	2340      	movs	r3, #64	; 0x40
 8007d12:	2101      	movs	r1, #1
 8007d14:	6878      	ldr	r0, [r7, #4]
 8007d16:	f001 fcdc 	bl	80096d2 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8007d1a:	2300      	movs	r3, #0
 8007d1c:	e000      	b.n	8007d20 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 8007d1e:	2302      	movs	r3, #2
  }
}
 8007d20:	4618      	mov	r0, r3
 8007d22:	3710      	adds	r7, #16
 8007d24:	46bd      	mov	sp, r7
 8007d26:	bd80      	pop	{r7, pc}

08007d28 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8007d28:	b580      	push	{r7, lr}
 8007d2a:	b084      	sub	sp, #16
 8007d2c:	af00      	add	r7, sp, #0
 8007d2e:	60f8      	str	r0, [r7, #12]
 8007d30:	60b9      	str	r1, [r7, #8]
 8007d32:	4613      	mov	r3, r2
 8007d34:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8007d36:	68fb      	ldr	r3, [r7, #12]
 8007d38:	2b00      	cmp	r3, #0
 8007d3a:	d101      	bne.n	8007d40 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8007d3c:	2302      	movs	r3, #2
 8007d3e:	e01a      	b.n	8007d76 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8007d40:	68fb      	ldr	r3, [r7, #12]
 8007d42:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007d46:	2b00      	cmp	r3, #0
 8007d48:	d003      	beq.n	8007d52 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8007d4a:	68fb      	ldr	r3, [r7, #12]
 8007d4c:	2200      	movs	r2, #0
 8007d4e:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8007d52:	68bb      	ldr	r3, [r7, #8]
 8007d54:	2b00      	cmp	r3, #0
 8007d56:	d003      	beq.n	8007d60 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8007d58:	68fb      	ldr	r3, [r7, #12]
 8007d5a:	68ba      	ldr	r2, [r7, #8]
 8007d5c:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007d60:	68fb      	ldr	r3, [r7, #12]
 8007d62:	2201      	movs	r2, #1
 8007d64:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8007d68:	68fb      	ldr	r3, [r7, #12]
 8007d6a:	79fa      	ldrb	r2, [r7, #7]
 8007d6c:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8007d6e:	68f8      	ldr	r0, [r7, #12]
 8007d70:	f001 fb48 	bl	8009404 <USBD_LL_Init>

  return USBD_OK;
 8007d74:	2300      	movs	r3, #0
}
 8007d76:	4618      	mov	r0, r3
 8007d78:	3710      	adds	r7, #16
 8007d7a:	46bd      	mov	sp, r7
 8007d7c:	bd80      	pop	{r7, pc}

08007d7e <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8007d7e:	b480      	push	{r7}
 8007d80:	b085      	sub	sp, #20
 8007d82:	af00      	add	r7, sp, #0
 8007d84:	6078      	str	r0, [r7, #4]
 8007d86:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8007d88:	2300      	movs	r3, #0
 8007d8a:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 8007d8c:	683b      	ldr	r3, [r7, #0]
 8007d8e:	2b00      	cmp	r3, #0
 8007d90:	d006      	beq.n	8007da0 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	683a      	ldr	r2, [r7, #0]
 8007d96:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 8007d9a:	2300      	movs	r3, #0
 8007d9c:	73fb      	strb	r3, [r7, #15]
 8007d9e:	e001      	b.n	8007da4 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8007da0:	2302      	movs	r3, #2
 8007da2:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007da4:	7bfb      	ldrb	r3, [r7, #15]
}
 8007da6:	4618      	mov	r0, r3
 8007da8:	3714      	adds	r7, #20
 8007daa:	46bd      	mov	sp, r7
 8007dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007db0:	4770      	bx	lr

08007db2 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8007db2:	b580      	push	{r7, lr}
 8007db4:	b082      	sub	sp, #8
 8007db6:	af00      	add	r7, sp, #0
 8007db8:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8007dba:	6878      	ldr	r0, [r7, #4]
 8007dbc:	f001 fb7c 	bl	80094b8 <USBD_LL_Start>

  return USBD_OK;
 8007dc0:	2300      	movs	r3, #0
}
 8007dc2:	4618      	mov	r0, r3
 8007dc4:	3708      	adds	r7, #8
 8007dc6:	46bd      	mov	sp, r7
 8007dc8:	bd80      	pop	{r7, pc}

08007dca <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8007dca:	b480      	push	{r7}
 8007dcc:	b083      	sub	sp, #12
 8007dce:	af00      	add	r7, sp, #0
 8007dd0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007dd2:	2300      	movs	r3, #0
}
 8007dd4:	4618      	mov	r0, r3
 8007dd6:	370c      	adds	r7, #12
 8007dd8:	46bd      	mov	sp, r7
 8007dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dde:	4770      	bx	lr

08007de0 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8007de0:	b580      	push	{r7, lr}
 8007de2:	b084      	sub	sp, #16
 8007de4:	af00      	add	r7, sp, #0
 8007de6:	6078      	str	r0, [r7, #4]
 8007de8:	460b      	mov	r3, r1
 8007dea:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8007dec:	2302      	movs	r3, #2
 8007dee:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007df6:	2b00      	cmp	r3, #0
 8007df8:	d00c      	beq.n	8007e14 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007e00:	681b      	ldr	r3, [r3, #0]
 8007e02:	78fa      	ldrb	r2, [r7, #3]
 8007e04:	4611      	mov	r1, r2
 8007e06:	6878      	ldr	r0, [r7, #4]
 8007e08:	4798      	blx	r3
 8007e0a:	4603      	mov	r3, r0
 8007e0c:	2b00      	cmp	r3, #0
 8007e0e:	d101      	bne.n	8007e14 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8007e10:	2300      	movs	r3, #0
 8007e12:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8007e14:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e16:	4618      	mov	r0, r3
 8007e18:	3710      	adds	r7, #16
 8007e1a:	46bd      	mov	sp, r7
 8007e1c:	bd80      	pop	{r7, pc}

08007e1e <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8007e1e:	b580      	push	{r7, lr}
 8007e20:	b082      	sub	sp, #8
 8007e22:	af00      	add	r7, sp, #0
 8007e24:	6078      	str	r0, [r7, #4]
 8007e26:	460b      	mov	r3, r1
 8007e28:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007e30:	685b      	ldr	r3, [r3, #4]
 8007e32:	78fa      	ldrb	r2, [r7, #3]
 8007e34:	4611      	mov	r1, r2
 8007e36:	6878      	ldr	r0, [r7, #4]
 8007e38:	4798      	blx	r3

  return USBD_OK;
 8007e3a:	2300      	movs	r3, #0
}
 8007e3c:	4618      	mov	r0, r3
 8007e3e:	3708      	adds	r7, #8
 8007e40:	46bd      	mov	sp, r7
 8007e42:	bd80      	pop	{r7, pc}

08007e44 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8007e44:	b580      	push	{r7, lr}
 8007e46:	b082      	sub	sp, #8
 8007e48:	af00      	add	r7, sp, #0
 8007e4a:	6078      	str	r0, [r7, #4]
 8007e4c:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8007e54:	6839      	ldr	r1, [r7, #0]
 8007e56:	4618      	mov	r0, r3
 8007e58:	f000 fece 	bl	8008bf8 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	2201      	movs	r2, #1
 8007e60:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8007e6a:	461a      	mov	r2, r3
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8007e78:	f003 031f 	and.w	r3, r3, #31
 8007e7c:	2b01      	cmp	r3, #1
 8007e7e:	d00c      	beq.n	8007e9a <USBD_LL_SetupStage+0x56>
 8007e80:	2b01      	cmp	r3, #1
 8007e82:	d302      	bcc.n	8007e8a <USBD_LL_SetupStage+0x46>
 8007e84:	2b02      	cmp	r3, #2
 8007e86:	d010      	beq.n	8007eaa <USBD_LL_SetupStage+0x66>
 8007e88:	e017      	b.n	8007eba <USBD_LL_SetupStage+0x76>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8007e90:	4619      	mov	r1, r3
 8007e92:	6878      	ldr	r0, [r7, #4]
 8007e94:	f000 f9ce 	bl	8008234 <USBD_StdDevReq>
      break;
 8007e98:	e01a      	b.n	8007ed0 <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8007ea0:	4619      	mov	r1, r3
 8007ea2:	6878      	ldr	r0, [r7, #4]
 8007ea4:	f000 fa30 	bl	8008308 <USBD_StdItfReq>
      break;
 8007ea8:	e012      	b.n	8007ed0 <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8007eb0:	4619      	mov	r1, r3
 8007eb2:	6878      	ldr	r0, [r7, #4]
 8007eb4:	f000 fa6e 	bl	8008394 <USBD_StdEPReq>
      break;
 8007eb8:	e00a      	b.n	8007ed0 <USBD_LL_SetupStage+0x8c>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8007ec0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007ec4:	b2db      	uxtb	r3, r3
 8007ec6:	4619      	mov	r1, r3
 8007ec8:	6878      	ldr	r0, [r7, #4]
 8007eca:	f001 fb55 	bl	8009578 <USBD_LL_StallEP>
      break;
 8007ece:	bf00      	nop
  }

  return USBD_OK;
 8007ed0:	2300      	movs	r3, #0
}
 8007ed2:	4618      	mov	r0, r3
 8007ed4:	3708      	adds	r7, #8
 8007ed6:	46bd      	mov	sp, r7
 8007ed8:	bd80      	pop	{r7, pc}

08007eda <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8007eda:	b580      	push	{r7, lr}
 8007edc:	b086      	sub	sp, #24
 8007ede:	af00      	add	r7, sp, #0
 8007ee0:	60f8      	str	r0, [r7, #12]
 8007ee2:	460b      	mov	r3, r1
 8007ee4:	607a      	str	r2, [r7, #4]
 8007ee6:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8007ee8:	7afb      	ldrb	r3, [r7, #11]
 8007eea:	2b00      	cmp	r3, #0
 8007eec:	d14b      	bne.n	8007f86 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8007eee:	68fb      	ldr	r3, [r7, #12]
 8007ef0:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8007ef4:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8007ef6:	68fb      	ldr	r3, [r7, #12]
 8007ef8:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007efc:	2b03      	cmp	r3, #3
 8007efe:	d134      	bne.n	8007f6a <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8007f00:	697b      	ldr	r3, [r7, #20]
 8007f02:	68da      	ldr	r2, [r3, #12]
 8007f04:	697b      	ldr	r3, [r7, #20]
 8007f06:	691b      	ldr	r3, [r3, #16]
 8007f08:	429a      	cmp	r2, r3
 8007f0a:	d919      	bls.n	8007f40 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8007f0c:	697b      	ldr	r3, [r7, #20]
 8007f0e:	68da      	ldr	r2, [r3, #12]
 8007f10:	697b      	ldr	r3, [r7, #20]
 8007f12:	691b      	ldr	r3, [r3, #16]
 8007f14:	1ad2      	subs	r2, r2, r3
 8007f16:	697b      	ldr	r3, [r7, #20]
 8007f18:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8007f1a:	697b      	ldr	r3, [r7, #20]
 8007f1c:	68da      	ldr	r2, [r3, #12]
 8007f1e:	697b      	ldr	r3, [r7, #20]
 8007f20:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8007f22:	429a      	cmp	r2, r3
 8007f24:	d203      	bcs.n	8007f2e <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8007f26:	697b      	ldr	r3, [r7, #20]
 8007f28:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8007f2a:	b29b      	uxth	r3, r3
 8007f2c:	e002      	b.n	8007f34 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8007f2e:	697b      	ldr	r3, [r7, #20]
 8007f30:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8007f32:	b29b      	uxth	r3, r3
 8007f34:	461a      	mov	r2, r3
 8007f36:	6879      	ldr	r1, [r7, #4]
 8007f38:	68f8      	ldr	r0, [r7, #12]
 8007f3a:	f000 ff51 	bl	8008de0 <USBD_CtlContinueRx>
 8007f3e:	e038      	b.n	8007fb2 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8007f40:	68fb      	ldr	r3, [r7, #12]
 8007f42:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007f46:	691b      	ldr	r3, [r3, #16]
 8007f48:	2b00      	cmp	r3, #0
 8007f4a:	d00a      	beq.n	8007f62 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007f4c:	68fb      	ldr	r3, [r7, #12]
 8007f4e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8007f52:	2b03      	cmp	r3, #3
 8007f54:	d105      	bne.n	8007f62 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8007f56:	68fb      	ldr	r3, [r7, #12]
 8007f58:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007f5c:	691b      	ldr	r3, [r3, #16]
 8007f5e:	68f8      	ldr	r0, [r7, #12]
 8007f60:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8007f62:	68f8      	ldr	r0, [r7, #12]
 8007f64:	f000 ff4e 	bl	8008e04 <USBD_CtlSendStatus>
 8007f68:	e023      	b.n	8007fb2 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8007f6a:	68fb      	ldr	r3, [r7, #12]
 8007f6c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007f70:	2b05      	cmp	r3, #5
 8007f72:	d11e      	bne.n	8007fb2 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8007f74:	68fb      	ldr	r3, [r7, #12]
 8007f76:	2200      	movs	r2, #0
 8007f78:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 8007f7c:	2100      	movs	r1, #0
 8007f7e:	68f8      	ldr	r0, [r7, #12]
 8007f80:	f001 fafa 	bl	8009578 <USBD_LL_StallEP>
 8007f84:	e015      	b.n	8007fb2 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8007f86:	68fb      	ldr	r3, [r7, #12]
 8007f88:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007f8c:	699b      	ldr	r3, [r3, #24]
 8007f8e:	2b00      	cmp	r3, #0
 8007f90:	d00d      	beq.n	8007fae <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007f92:	68fb      	ldr	r3, [r7, #12]
 8007f94:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8007f98:	2b03      	cmp	r3, #3
 8007f9a:	d108      	bne.n	8007fae <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8007f9c:	68fb      	ldr	r3, [r7, #12]
 8007f9e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007fa2:	699b      	ldr	r3, [r3, #24]
 8007fa4:	7afa      	ldrb	r2, [r7, #11]
 8007fa6:	4611      	mov	r1, r2
 8007fa8:	68f8      	ldr	r0, [r7, #12]
 8007faa:	4798      	blx	r3
 8007fac:	e001      	b.n	8007fb2 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8007fae:	2302      	movs	r3, #2
 8007fb0:	e000      	b.n	8007fb4 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8007fb2:	2300      	movs	r3, #0
}
 8007fb4:	4618      	mov	r0, r3
 8007fb6:	3718      	adds	r7, #24
 8007fb8:	46bd      	mov	sp, r7
 8007fba:	bd80      	pop	{r7, pc}

08007fbc <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8007fbc:	b580      	push	{r7, lr}
 8007fbe:	b086      	sub	sp, #24
 8007fc0:	af00      	add	r7, sp, #0
 8007fc2:	60f8      	str	r0, [r7, #12]
 8007fc4:	460b      	mov	r3, r1
 8007fc6:	607a      	str	r2, [r7, #4]
 8007fc8:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8007fca:	7afb      	ldrb	r3, [r7, #11]
 8007fcc:	2b00      	cmp	r3, #0
 8007fce:	d17f      	bne.n	80080d0 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8007fd0:	68fb      	ldr	r3, [r7, #12]
 8007fd2:	3314      	adds	r3, #20
 8007fd4:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8007fd6:	68fb      	ldr	r3, [r7, #12]
 8007fd8:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007fdc:	2b02      	cmp	r3, #2
 8007fde:	d15c      	bne.n	800809a <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8007fe0:	697b      	ldr	r3, [r7, #20]
 8007fe2:	68da      	ldr	r2, [r3, #12]
 8007fe4:	697b      	ldr	r3, [r7, #20]
 8007fe6:	691b      	ldr	r3, [r3, #16]
 8007fe8:	429a      	cmp	r2, r3
 8007fea:	d915      	bls.n	8008018 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8007fec:	697b      	ldr	r3, [r7, #20]
 8007fee:	68da      	ldr	r2, [r3, #12]
 8007ff0:	697b      	ldr	r3, [r7, #20]
 8007ff2:	691b      	ldr	r3, [r3, #16]
 8007ff4:	1ad2      	subs	r2, r2, r3
 8007ff6:	697b      	ldr	r3, [r7, #20]
 8007ff8:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8007ffa:	697b      	ldr	r3, [r7, #20]
 8007ffc:	68db      	ldr	r3, [r3, #12]
 8007ffe:	b29b      	uxth	r3, r3
 8008000:	461a      	mov	r2, r3
 8008002:	6879      	ldr	r1, [r7, #4]
 8008004:	68f8      	ldr	r0, [r7, #12]
 8008006:	f000 febb 	bl	8008d80 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800800a:	2300      	movs	r3, #0
 800800c:	2200      	movs	r2, #0
 800800e:	2100      	movs	r1, #0
 8008010:	68f8      	ldr	r0, [r7, #12]
 8008012:	f001 fb5e 	bl	80096d2 <USBD_LL_PrepareReceive>
 8008016:	e04e      	b.n	80080b6 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8008018:	697b      	ldr	r3, [r7, #20]
 800801a:	689b      	ldr	r3, [r3, #8]
 800801c:	697a      	ldr	r2, [r7, #20]
 800801e:	6912      	ldr	r2, [r2, #16]
 8008020:	fbb3 f1f2 	udiv	r1, r3, r2
 8008024:	fb02 f201 	mul.w	r2, r2, r1
 8008028:	1a9b      	subs	r3, r3, r2
 800802a:	2b00      	cmp	r3, #0
 800802c:	d11c      	bne.n	8008068 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 800802e:	697b      	ldr	r3, [r7, #20]
 8008030:	689a      	ldr	r2, [r3, #8]
 8008032:	697b      	ldr	r3, [r7, #20]
 8008034:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8008036:	429a      	cmp	r2, r3
 8008038:	d316      	bcc.n	8008068 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 800803a:	697b      	ldr	r3, [r7, #20]
 800803c:	689a      	ldr	r2, [r3, #8]
 800803e:	68fb      	ldr	r3, [r7, #12]
 8008040:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8008044:	429a      	cmp	r2, r3
 8008046:	d20f      	bcs.n	8008068 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8008048:	2200      	movs	r2, #0
 800804a:	2100      	movs	r1, #0
 800804c:	68f8      	ldr	r0, [r7, #12]
 800804e:	f000 fe97 	bl	8008d80 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8008052:	68fb      	ldr	r3, [r7, #12]
 8008054:	2200      	movs	r2, #0
 8008056:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800805a:	2300      	movs	r3, #0
 800805c:	2200      	movs	r2, #0
 800805e:	2100      	movs	r1, #0
 8008060:	68f8      	ldr	r0, [r7, #12]
 8008062:	f001 fb36 	bl	80096d2 <USBD_LL_PrepareReceive>
 8008066:	e026      	b.n	80080b6 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8008068:	68fb      	ldr	r3, [r7, #12]
 800806a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800806e:	68db      	ldr	r3, [r3, #12]
 8008070:	2b00      	cmp	r3, #0
 8008072:	d00a      	beq.n	800808a <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008074:	68fb      	ldr	r3, [r7, #12]
 8008076:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800807a:	2b03      	cmp	r3, #3
 800807c:	d105      	bne.n	800808a <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800807e:	68fb      	ldr	r3, [r7, #12]
 8008080:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008084:	68db      	ldr	r3, [r3, #12]
 8008086:	68f8      	ldr	r0, [r7, #12]
 8008088:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 800808a:	2180      	movs	r1, #128	; 0x80
 800808c:	68f8      	ldr	r0, [r7, #12]
 800808e:	f001 fa73 	bl	8009578 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8008092:	68f8      	ldr	r0, [r7, #12]
 8008094:	f000 fec9 	bl	8008e2a <USBD_CtlReceiveStatus>
 8008098:	e00d      	b.n	80080b6 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800809a:	68fb      	ldr	r3, [r7, #12]
 800809c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80080a0:	2b04      	cmp	r3, #4
 80080a2:	d004      	beq.n	80080ae <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 80080a4:	68fb      	ldr	r3, [r7, #12]
 80080a6:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80080aa:	2b00      	cmp	r3, #0
 80080ac:	d103      	bne.n	80080b6 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 80080ae:	2180      	movs	r1, #128	; 0x80
 80080b0:	68f8      	ldr	r0, [r7, #12]
 80080b2:	f001 fa61 	bl	8009578 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 80080b6:	68fb      	ldr	r3, [r7, #12]
 80080b8:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80080bc:	2b01      	cmp	r3, #1
 80080be:	d11d      	bne.n	80080fc <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 80080c0:	68f8      	ldr	r0, [r7, #12]
 80080c2:	f7ff fe82 	bl	8007dca <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80080c6:	68fb      	ldr	r3, [r7, #12]
 80080c8:	2200      	movs	r2, #0
 80080ca:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80080ce:	e015      	b.n	80080fc <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 80080d0:	68fb      	ldr	r3, [r7, #12]
 80080d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80080d6:	695b      	ldr	r3, [r3, #20]
 80080d8:	2b00      	cmp	r3, #0
 80080da:	d00d      	beq.n	80080f8 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80080dc:	68fb      	ldr	r3, [r7, #12]
 80080de:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 80080e2:	2b03      	cmp	r3, #3
 80080e4:	d108      	bne.n	80080f8 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 80080e6:	68fb      	ldr	r3, [r7, #12]
 80080e8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80080ec:	695b      	ldr	r3, [r3, #20]
 80080ee:	7afa      	ldrb	r2, [r7, #11]
 80080f0:	4611      	mov	r1, r2
 80080f2:	68f8      	ldr	r0, [r7, #12]
 80080f4:	4798      	blx	r3
 80080f6:	e001      	b.n	80080fc <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80080f8:	2302      	movs	r3, #2
 80080fa:	e000      	b.n	80080fe <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 80080fc:	2300      	movs	r3, #0
}
 80080fe:	4618      	mov	r0, r3
 8008100:	3718      	adds	r7, #24
 8008102:	46bd      	mov	sp, r7
 8008104:	bd80      	pop	{r7, pc}

08008106 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8008106:	b580      	push	{r7, lr}
 8008108:	b082      	sub	sp, #8
 800810a:	af00      	add	r7, sp, #0
 800810c:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800810e:	2340      	movs	r3, #64	; 0x40
 8008110:	2200      	movs	r2, #0
 8008112:	2100      	movs	r1, #0
 8008114:	6878      	ldr	r0, [r7, #4]
 8008116:	f001 f9ea 	bl	80094ee <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	2201      	movs	r2, #1
 800811e:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	2240      	movs	r2, #64	; 0x40
 8008126:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800812a:	2340      	movs	r3, #64	; 0x40
 800812c:	2200      	movs	r2, #0
 800812e:	2180      	movs	r1, #128	; 0x80
 8008130:	6878      	ldr	r0, [r7, #4]
 8008132:	f001 f9dc 	bl	80094ee <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	2201      	movs	r2, #1
 800813a:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	2240      	movs	r2, #64	; 0x40
 8008140:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	2201      	movs	r2, #1
 8008146:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	2200      	movs	r2, #0
 800814e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	2200      	movs	r2, #0
 8008156:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	2200      	movs	r2, #0
 800815c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008166:	2b00      	cmp	r3, #0
 8008168:	d009      	beq.n	800817e <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008170:	685b      	ldr	r3, [r3, #4]
 8008172:	687a      	ldr	r2, [r7, #4]
 8008174:	6852      	ldr	r2, [r2, #4]
 8008176:	b2d2      	uxtb	r2, r2
 8008178:	4611      	mov	r1, r2
 800817a:	6878      	ldr	r0, [r7, #4]
 800817c:	4798      	blx	r3
  }

  return USBD_OK;
 800817e:	2300      	movs	r3, #0
}
 8008180:	4618      	mov	r0, r3
 8008182:	3708      	adds	r7, #8
 8008184:	46bd      	mov	sp, r7
 8008186:	bd80      	pop	{r7, pc}

08008188 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8008188:	b480      	push	{r7}
 800818a:	b083      	sub	sp, #12
 800818c:	af00      	add	r7, sp, #0
 800818e:	6078      	str	r0, [r7, #4]
 8008190:	460b      	mov	r3, r1
 8008192:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	78fa      	ldrb	r2, [r7, #3]
 8008198:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800819a:	2300      	movs	r3, #0
}
 800819c:	4618      	mov	r0, r3
 800819e:	370c      	adds	r7, #12
 80081a0:	46bd      	mov	sp, r7
 80081a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081a6:	4770      	bx	lr

080081a8 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80081a8:	b480      	push	{r7}
 80081aa:	b083      	sub	sp, #12
 80081ac:	af00      	add	r7, sp, #0
 80081ae:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	2204      	movs	r2, #4
 80081c0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80081c4:	2300      	movs	r3, #0
}
 80081c6:	4618      	mov	r0, r3
 80081c8:	370c      	adds	r7, #12
 80081ca:	46bd      	mov	sp, r7
 80081cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081d0:	4770      	bx	lr

080081d2 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80081d2:	b480      	push	{r7}
 80081d4:	b083      	sub	sp, #12
 80081d6:	af00      	add	r7, sp, #0
 80081d8:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80081e0:	2b04      	cmp	r3, #4
 80081e2:	d105      	bne.n	80081f0 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80081f0:	2300      	movs	r3, #0
}
 80081f2:	4618      	mov	r0, r3
 80081f4:	370c      	adds	r7, #12
 80081f6:	46bd      	mov	sp, r7
 80081f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081fc:	4770      	bx	lr

080081fe <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80081fe:	b580      	push	{r7, lr}
 8008200:	b082      	sub	sp, #8
 8008202:	af00      	add	r7, sp, #0
 8008204:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800820c:	2b03      	cmp	r3, #3
 800820e:	d10b      	bne.n	8008228 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008216:	69db      	ldr	r3, [r3, #28]
 8008218:	2b00      	cmp	r3, #0
 800821a:	d005      	beq.n	8008228 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008222:	69db      	ldr	r3, [r3, #28]
 8008224:	6878      	ldr	r0, [r7, #4]
 8008226:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008228:	2300      	movs	r3, #0
}
 800822a:	4618      	mov	r0, r3
 800822c:	3708      	adds	r7, #8
 800822e:	46bd      	mov	sp, r7
 8008230:	bd80      	pop	{r7, pc}
	...

08008234 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8008234:	b580      	push	{r7, lr}
 8008236:	b084      	sub	sp, #16
 8008238:	af00      	add	r7, sp, #0
 800823a:	6078      	str	r0, [r7, #4]
 800823c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800823e:	2300      	movs	r3, #0
 8008240:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008242:	683b      	ldr	r3, [r7, #0]
 8008244:	781b      	ldrb	r3, [r3, #0]
 8008246:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800824a:	2b20      	cmp	r3, #32
 800824c:	d004      	beq.n	8008258 <USBD_StdDevReq+0x24>
 800824e:	2b40      	cmp	r3, #64	; 0x40
 8008250:	d002      	beq.n	8008258 <USBD_StdDevReq+0x24>
 8008252:	2b00      	cmp	r3, #0
 8008254:	d008      	beq.n	8008268 <USBD_StdDevReq+0x34>
 8008256:	e04c      	b.n	80082f2 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800825e:	689b      	ldr	r3, [r3, #8]
 8008260:	6839      	ldr	r1, [r7, #0]
 8008262:	6878      	ldr	r0, [r7, #4]
 8008264:	4798      	blx	r3
      break;
 8008266:	e049      	b.n	80082fc <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008268:	683b      	ldr	r3, [r7, #0]
 800826a:	785b      	ldrb	r3, [r3, #1]
 800826c:	2b09      	cmp	r3, #9
 800826e:	d83a      	bhi.n	80082e6 <USBD_StdDevReq+0xb2>
 8008270:	a201      	add	r2, pc, #4	; (adr r2, 8008278 <USBD_StdDevReq+0x44>)
 8008272:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008276:	bf00      	nop
 8008278:	080082c9 	.word	0x080082c9
 800827c:	080082dd 	.word	0x080082dd
 8008280:	080082e7 	.word	0x080082e7
 8008284:	080082d3 	.word	0x080082d3
 8008288:	080082e7 	.word	0x080082e7
 800828c:	080082ab 	.word	0x080082ab
 8008290:	080082a1 	.word	0x080082a1
 8008294:	080082e7 	.word	0x080082e7
 8008298:	080082bf 	.word	0x080082bf
 800829c:	080082b5 	.word	0x080082b5
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80082a0:	6839      	ldr	r1, [r7, #0]
 80082a2:	6878      	ldr	r0, [r7, #4]
 80082a4:	f000 f9d4 	bl	8008650 <USBD_GetDescriptor>
          break;
 80082a8:	e022      	b.n	80082f0 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80082aa:	6839      	ldr	r1, [r7, #0]
 80082ac:	6878      	ldr	r0, [r7, #4]
 80082ae:	f000 fb37 	bl	8008920 <USBD_SetAddress>
          break;
 80082b2:	e01d      	b.n	80082f0 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 80082b4:	6839      	ldr	r1, [r7, #0]
 80082b6:	6878      	ldr	r0, [r7, #4]
 80082b8:	f000 fb74 	bl	80089a4 <USBD_SetConfig>
          break;
 80082bc:	e018      	b.n	80082f0 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80082be:	6839      	ldr	r1, [r7, #0]
 80082c0:	6878      	ldr	r0, [r7, #4]
 80082c2:	f000 fbfd 	bl	8008ac0 <USBD_GetConfig>
          break;
 80082c6:	e013      	b.n	80082f0 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80082c8:	6839      	ldr	r1, [r7, #0]
 80082ca:	6878      	ldr	r0, [r7, #4]
 80082cc:	f000 fc2c 	bl	8008b28 <USBD_GetStatus>
          break;
 80082d0:	e00e      	b.n	80082f0 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80082d2:	6839      	ldr	r1, [r7, #0]
 80082d4:	6878      	ldr	r0, [r7, #4]
 80082d6:	f000 fc5a 	bl	8008b8e <USBD_SetFeature>
          break;
 80082da:	e009      	b.n	80082f0 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80082dc:	6839      	ldr	r1, [r7, #0]
 80082de:	6878      	ldr	r0, [r7, #4]
 80082e0:	f000 fc69 	bl	8008bb6 <USBD_ClrFeature>
          break;
 80082e4:	e004      	b.n	80082f0 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 80082e6:	6839      	ldr	r1, [r7, #0]
 80082e8:	6878      	ldr	r0, [r7, #4]
 80082ea:	f000 fcc2 	bl	8008c72 <USBD_CtlError>
          break;
 80082ee:	bf00      	nop
      }
      break;
 80082f0:	e004      	b.n	80082fc <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 80082f2:	6839      	ldr	r1, [r7, #0]
 80082f4:	6878      	ldr	r0, [r7, #4]
 80082f6:	f000 fcbc 	bl	8008c72 <USBD_CtlError>
      break;
 80082fa:	bf00      	nop
  }

  return ret;
 80082fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80082fe:	4618      	mov	r0, r3
 8008300:	3710      	adds	r7, #16
 8008302:	46bd      	mov	sp, r7
 8008304:	bd80      	pop	{r7, pc}
 8008306:	bf00      	nop

08008308 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8008308:	b580      	push	{r7, lr}
 800830a:	b084      	sub	sp, #16
 800830c:	af00      	add	r7, sp, #0
 800830e:	6078      	str	r0, [r7, #4]
 8008310:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008312:	2300      	movs	r3, #0
 8008314:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008316:	683b      	ldr	r3, [r7, #0]
 8008318:	781b      	ldrb	r3, [r3, #0]
 800831a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800831e:	2b20      	cmp	r3, #32
 8008320:	d003      	beq.n	800832a <USBD_StdItfReq+0x22>
 8008322:	2b40      	cmp	r3, #64	; 0x40
 8008324:	d001      	beq.n	800832a <USBD_StdItfReq+0x22>
 8008326:	2b00      	cmp	r3, #0
 8008328:	d12a      	bne.n	8008380 <USBD_StdItfReq+0x78>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008330:	3b01      	subs	r3, #1
 8008332:	2b02      	cmp	r3, #2
 8008334:	d81d      	bhi.n	8008372 <USBD_StdItfReq+0x6a>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8008336:	683b      	ldr	r3, [r7, #0]
 8008338:	889b      	ldrh	r3, [r3, #4]
 800833a:	b2db      	uxtb	r3, r3
 800833c:	2b01      	cmp	r3, #1
 800833e:	d813      	bhi.n	8008368 <USBD_StdItfReq+0x60>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008346:	689b      	ldr	r3, [r3, #8]
 8008348:	6839      	ldr	r1, [r7, #0]
 800834a:	6878      	ldr	r0, [r7, #4]
 800834c:	4798      	blx	r3
 800834e:	4603      	mov	r3, r0
 8008350:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8008352:	683b      	ldr	r3, [r7, #0]
 8008354:	88db      	ldrh	r3, [r3, #6]
 8008356:	2b00      	cmp	r3, #0
 8008358:	d110      	bne.n	800837c <USBD_StdItfReq+0x74>
 800835a:	7bfb      	ldrb	r3, [r7, #15]
 800835c:	2b00      	cmp	r3, #0
 800835e:	d10d      	bne.n	800837c <USBD_StdItfReq+0x74>
            {
              USBD_CtlSendStatus(pdev);
 8008360:	6878      	ldr	r0, [r7, #4]
 8008362:	f000 fd4f 	bl	8008e04 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8008366:	e009      	b.n	800837c <USBD_StdItfReq+0x74>
            USBD_CtlError(pdev, req);
 8008368:	6839      	ldr	r1, [r7, #0]
 800836a:	6878      	ldr	r0, [r7, #4]
 800836c:	f000 fc81 	bl	8008c72 <USBD_CtlError>
          break;
 8008370:	e004      	b.n	800837c <USBD_StdItfReq+0x74>

        default:
          USBD_CtlError(pdev, req);
 8008372:	6839      	ldr	r1, [r7, #0]
 8008374:	6878      	ldr	r0, [r7, #4]
 8008376:	f000 fc7c 	bl	8008c72 <USBD_CtlError>
          break;
 800837a:	e000      	b.n	800837e <USBD_StdItfReq+0x76>
          break;
 800837c:	bf00      	nop
      }
      break;
 800837e:	e004      	b.n	800838a <USBD_StdItfReq+0x82>

    default:
      USBD_CtlError(pdev, req);
 8008380:	6839      	ldr	r1, [r7, #0]
 8008382:	6878      	ldr	r0, [r7, #4]
 8008384:	f000 fc75 	bl	8008c72 <USBD_CtlError>
      break;
 8008388:	bf00      	nop
  }

  return USBD_OK;
 800838a:	2300      	movs	r3, #0
}
 800838c:	4618      	mov	r0, r3
 800838e:	3710      	adds	r7, #16
 8008390:	46bd      	mov	sp, r7
 8008392:	bd80      	pop	{r7, pc}

08008394 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8008394:	b580      	push	{r7, lr}
 8008396:	b084      	sub	sp, #16
 8008398:	af00      	add	r7, sp, #0
 800839a:	6078      	str	r0, [r7, #4]
 800839c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800839e:	2300      	movs	r3, #0
 80083a0:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 80083a2:	683b      	ldr	r3, [r7, #0]
 80083a4:	889b      	ldrh	r3, [r3, #4]
 80083a6:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80083a8:	683b      	ldr	r3, [r7, #0]
 80083aa:	781b      	ldrb	r3, [r3, #0]
 80083ac:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80083b0:	2b20      	cmp	r3, #32
 80083b2:	d004      	beq.n	80083be <USBD_StdEPReq+0x2a>
 80083b4:	2b40      	cmp	r3, #64	; 0x40
 80083b6:	d002      	beq.n	80083be <USBD_StdEPReq+0x2a>
 80083b8:	2b00      	cmp	r3, #0
 80083ba:	d008      	beq.n	80083ce <USBD_StdEPReq+0x3a>
 80083bc:	e13d      	b.n	800863a <USBD_StdEPReq+0x2a6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80083c4:	689b      	ldr	r3, [r3, #8]
 80083c6:	6839      	ldr	r1, [r7, #0]
 80083c8:	6878      	ldr	r0, [r7, #4]
 80083ca:	4798      	blx	r3
      break;
 80083cc:	e13a      	b.n	8008644 <USBD_StdEPReq+0x2b0>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 80083ce:	683b      	ldr	r3, [r7, #0]
 80083d0:	781b      	ldrb	r3, [r3, #0]
 80083d2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80083d6:	2b20      	cmp	r3, #32
 80083d8:	d10a      	bne.n	80083f0 <USBD_StdEPReq+0x5c>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80083e0:	689b      	ldr	r3, [r3, #8]
 80083e2:	6839      	ldr	r1, [r7, #0]
 80083e4:	6878      	ldr	r0, [r7, #4]
 80083e6:	4798      	blx	r3
 80083e8:	4603      	mov	r3, r0
 80083ea:	73fb      	strb	r3, [r7, #15]

        return ret;
 80083ec:	7bfb      	ldrb	r3, [r7, #15]
 80083ee:	e12a      	b.n	8008646 <USBD_StdEPReq+0x2b2>
      }

      switch (req->bRequest)
 80083f0:	683b      	ldr	r3, [r7, #0]
 80083f2:	785b      	ldrb	r3, [r3, #1]
 80083f4:	2b01      	cmp	r3, #1
 80083f6:	d03e      	beq.n	8008476 <USBD_StdEPReq+0xe2>
 80083f8:	2b03      	cmp	r3, #3
 80083fa:	d002      	beq.n	8008402 <USBD_StdEPReq+0x6e>
 80083fc:	2b00      	cmp	r3, #0
 80083fe:	d070      	beq.n	80084e2 <USBD_StdEPReq+0x14e>
 8008400:	e115      	b.n	800862e <USBD_StdEPReq+0x29a>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008408:	2b02      	cmp	r3, #2
 800840a:	d002      	beq.n	8008412 <USBD_StdEPReq+0x7e>
 800840c:	2b03      	cmp	r3, #3
 800840e:	d015      	beq.n	800843c <USBD_StdEPReq+0xa8>
 8008410:	e02b      	b.n	800846a <USBD_StdEPReq+0xd6>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008412:	7bbb      	ldrb	r3, [r7, #14]
 8008414:	2b00      	cmp	r3, #0
 8008416:	d00c      	beq.n	8008432 <USBD_StdEPReq+0x9e>
 8008418:	7bbb      	ldrb	r3, [r7, #14]
 800841a:	2b80      	cmp	r3, #128	; 0x80
 800841c:	d009      	beq.n	8008432 <USBD_StdEPReq+0x9e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800841e:	7bbb      	ldrb	r3, [r7, #14]
 8008420:	4619      	mov	r1, r3
 8008422:	6878      	ldr	r0, [r7, #4]
 8008424:	f001 f8a8 	bl	8009578 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8008428:	2180      	movs	r1, #128	; 0x80
 800842a:	6878      	ldr	r0, [r7, #4]
 800842c:	f001 f8a4 	bl	8009578 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008430:	e020      	b.n	8008474 <USBD_StdEPReq+0xe0>
                USBD_CtlError(pdev, req);
 8008432:	6839      	ldr	r1, [r7, #0]
 8008434:	6878      	ldr	r0, [r7, #4]
 8008436:	f000 fc1c 	bl	8008c72 <USBD_CtlError>
              break;
 800843a:	e01b      	b.n	8008474 <USBD_StdEPReq+0xe0>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800843c:	683b      	ldr	r3, [r7, #0]
 800843e:	885b      	ldrh	r3, [r3, #2]
 8008440:	2b00      	cmp	r3, #0
 8008442:	d10e      	bne.n	8008462 <USBD_StdEPReq+0xce>
              {
                if ((ep_addr != 0x00U) &&
 8008444:	7bbb      	ldrb	r3, [r7, #14]
 8008446:	2b00      	cmp	r3, #0
 8008448:	d00b      	beq.n	8008462 <USBD_StdEPReq+0xce>
 800844a:	7bbb      	ldrb	r3, [r7, #14]
 800844c:	2b80      	cmp	r3, #128	; 0x80
 800844e:	d008      	beq.n	8008462 <USBD_StdEPReq+0xce>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8008450:	683b      	ldr	r3, [r7, #0]
 8008452:	88db      	ldrh	r3, [r3, #6]
 8008454:	2b00      	cmp	r3, #0
 8008456:	d104      	bne.n	8008462 <USBD_StdEPReq+0xce>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8008458:	7bbb      	ldrb	r3, [r7, #14]
 800845a:	4619      	mov	r1, r3
 800845c:	6878      	ldr	r0, [r7, #4]
 800845e:	f001 f88b 	bl	8009578 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 8008462:	6878      	ldr	r0, [r7, #4]
 8008464:	f000 fcce 	bl	8008e04 <USBD_CtlSendStatus>

              break;
 8008468:	e004      	b.n	8008474 <USBD_StdEPReq+0xe0>

            default:
              USBD_CtlError(pdev, req);
 800846a:	6839      	ldr	r1, [r7, #0]
 800846c:	6878      	ldr	r0, [r7, #4]
 800846e:	f000 fc00 	bl	8008c72 <USBD_CtlError>
              break;
 8008472:	bf00      	nop
          }
          break;
 8008474:	e0e0      	b.n	8008638 <USBD_StdEPReq+0x2a4>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800847c:	2b02      	cmp	r3, #2
 800847e:	d002      	beq.n	8008486 <USBD_StdEPReq+0xf2>
 8008480:	2b03      	cmp	r3, #3
 8008482:	d015      	beq.n	80084b0 <USBD_StdEPReq+0x11c>
 8008484:	e026      	b.n	80084d4 <USBD_StdEPReq+0x140>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008486:	7bbb      	ldrb	r3, [r7, #14]
 8008488:	2b00      	cmp	r3, #0
 800848a:	d00c      	beq.n	80084a6 <USBD_StdEPReq+0x112>
 800848c:	7bbb      	ldrb	r3, [r7, #14]
 800848e:	2b80      	cmp	r3, #128	; 0x80
 8008490:	d009      	beq.n	80084a6 <USBD_StdEPReq+0x112>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8008492:	7bbb      	ldrb	r3, [r7, #14]
 8008494:	4619      	mov	r1, r3
 8008496:	6878      	ldr	r0, [r7, #4]
 8008498:	f001 f86e 	bl	8009578 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800849c:	2180      	movs	r1, #128	; 0x80
 800849e:	6878      	ldr	r0, [r7, #4]
 80084a0:	f001 f86a 	bl	8009578 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80084a4:	e01c      	b.n	80084e0 <USBD_StdEPReq+0x14c>
                USBD_CtlError(pdev, req);
 80084a6:	6839      	ldr	r1, [r7, #0]
 80084a8:	6878      	ldr	r0, [r7, #4]
 80084aa:	f000 fbe2 	bl	8008c72 <USBD_CtlError>
              break;
 80084ae:	e017      	b.n	80084e0 <USBD_StdEPReq+0x14c>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80084b0:	683b      	ldr	r3, [r7, #0]
 80084b2:	885b      	ldrh	r3, [r3, #2]
 80084b4:	2b00      	cmp	r3, #0
 80084b6:	d112      	bne.n	80084de <USBD_StdEPReq+0x14a>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80084b8:	7bbb      	ldrb	r3, [r7, #14]
 80084ba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80084be:	2b00      	cmp	r3, #0
 80084c0:	d004      	beq.n	80084cc <USBD_StdEPReq+0x138>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 80084c2:	7bbb      	ldrb	r3, [r7, #14]
 80084c4:	4619      	mov	r1, r3
 80084c6:	6878      	ldr	r0, [r7, #4]
 80084c8:	f001 f875 	bl	80095b6 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 80084cc:	6878      	ldr	r0, [r7, #4]
 80084ce:	f000 fc99 	bl	8008e04 <USBD_CtlSendStatus>
              }
              break;
 80084d2:	e004      	b.n	80084de <USBD_StdEPReq+0x14a>

            default:
              USBD_CtlError(pdev, req);
 80084d4:	6839      	ldr	r1, [r7, #0]
 80084d6:	6878      	ldr	r0, [r7, #4]
 80084d8:	f000 fbcb 	bl	8008c72 <USBD_CtlError>
              break;
 80084dc:	e000      	b.n	80084e0 <USBD_StdEPReq+0x14c>
              break;
 80084de:	bf00      	nop
          }
          break;
 80084e0:	e0aa      	b.n	8008638 <USBD_StdEPReq+0x2a4>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80084e8:	2b02      	cmp	r3, #2
 80084ea:	d002      	beq.n	80084f2 <USBD_StdEPReq+0x15e>
 80084ec:	2b03      	cmp	r3, #3
 80084ee:	d032      	beq.n	8008556 <USBD_StdEPReq+0x1c2>
 80084f0:	e097      	b.n	8008622 <USBD_StdEPReq+0x28e>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80084f2:	7bbb      	ldrb	r3, [r7, #14]
 80084f4:	2b00      	cmp	r3, #0
 80084f6:	d007      	beq.n	8008508 <USBD_StdEPReq+0x174>
 80084f8:	7bbb      	ldrb	r3, [r7, #14]
 80084fa:	2b80      	cmp	r3, #128	; 0x80
 80084fc:	d004      	beq.n	8008508 <USBD_StdEPReq+0x174>
              {
                USBD_CtlError(pdev, req);
 80084fe:	6839      	ldr	r1, [r7, #0]
 8008500:	6878      	ldr	r0, [r7, #4]
 8008502:	f000 fbb6 	bl	8008c72 <USBD_CtlError>
                break;
 8008506:	e091      	b.n	800862c <USBD_StdEPReq+0x298>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008508:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800850c:	2b00      	cmp	r3, #0
 800850e:	da0b      	bge.n	8008528 <USBD_StdEPReq+0x194>
 8008510:	7bbb      	ldrb	r3, [r7, #14]
 8008512:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008516:	4613      	mov	r3, r2
 8008518:	009b      	lsls	r3, r3, #2
 800851a:	4413      	add	r3, r2
 800851c:	009b      	lsls	r3, r3, #2
 800851e:	3310      	adds	r3, #16
 8008520:	687a      	ldr	r2, [r7, #4]
 8008522:	4413      	add	r3, r2
 8008524:	3304      	adds	r3, #4
 8008526:	e00b      	b.n	8008540 <USBD_StdEPReq+0x1ac>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008528:	7bbb      	ldrb	r3, [r7, #14]
 800852a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800852e:	4613      	mov	r3, r2
 8008530:	009b      	lsls	r3, r3, #2
 8008532:	4413      	add	r3, r2
 8008534:	009b      	lsls	r3, r3, #2
 8008536:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800853a:	687a      	ldr	r2, [r7, #4]
 800853c:	4413      	add	r3, r2
 800853e:	3304      	adds	r3, #4
 8008540:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8008542:	68bb      	ldr	r3, [r7, #8]
 8008544:	2200      	movs	r2, #0
 8008546:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8008548:	68bb      	ldr	r3, [r7, #8]
 800854a:	2202      	movs	r2, #2
 800854c:	4619      	mov	r1, r3
 800854e:	6878      	ldr	r0, [r7, #4]
 8008550:	f000 fbfa 	bl	8008d48 <USBD_CtlSendData>
              break;
 8008554:	e06a      	b.n	800862c <USBD_StdEPReq+0x298>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8008556:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800855a:	2b00      	cmp	r3, #0
 800855c:	da11      	bge.n	8008582 <USBD_StdEPReq+0x1ee>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800855e:	7bbb      	ldrb	r3, [r7, #14]
 8008560:	f003 020f 	and.w	r2, r3, #15
 8008564:	6879      	ldr	r1, [r7, #4]
 8008566:	4613      	mov	r3, r2
 8008568:	009b      	lsls	r3, r3, #2
 800856a:	4413      	add	r3, r2
 800856c:	009b      	lsls	r3, r3, #2
 800856e:	440b      	add	r3, r1
 8008570:	3318      	adds	r3, #24
 8008572:	681b      	ldr	r3, [r3, #0]
 8008574:	2b00      	cmp	r3, #0
 8008576:	d117      	bne.n	80085a8 <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 8008578:	6839      	ldr	r1, [r7, #0]
 800857a:	6878      	ldr	r0, [r7, #4]
 800857c:	f000 fb79 	bl	8008c72 <USBD_CtlError>
                  break;
 8008580:	e054      	b.n	800862c <USBD_StdEPReq+0x298>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8008582:	7bbb      	ldrb	r3, [r7, #14]
 8008584:	f003 020f 	and.w	r2, r3, #15
 8008588:	6879      	ldr	r1, [r7, #4]
 800858a:	4613      	mov	r3, r2
 800858c:	009b      	lsls	r3, r3, #2
 800858e:	4413      	add	r3, r2
 8008590:	009b      	lsls	r3, r3, #2
 8008592:	440b      	add	r3, r1
 8008594:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8008598:	681b      	ldr	r3, [r3, #0]
 800859a:	2b00      	cmp	r3, #0
 800859c:	d104      	bne.n	80085a8 <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 800859e:	6839      	ldr	r1, [r7, #0]
 80085a0:	6878      	ldr	r0, [r7, #4]
 80085a2:	f000 fb66 	bl	8008c72 <USBD_CtlError>
                  break;
 80085a6:	e041      	b.n	800862c <USBD_StdEPReq+0x298>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80085a8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80085ac:	2b00      	cmp	r3, #0
 80085ae:	da0b      	bge.n	80085c8 <USBD_StdEPReq+0x234>
 80085b0:	7bbb      	ldrb	r3, [r7, #14]
 80085b2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80085b6:	4613      	mov	r3, r2
 80085b8:	009b      	lsls	r3, r3, #2
 80085ba:	4413      	add	r3, r2
 80085bc:	009b      	lsls	r3, r3, #2
 80085be:	3310      	adds	r3, #16
 80085c0:	687a      	ldr	r2, [r7, #4]
 80085c2:	4413      	add	r3, r2
 80085c4:	3304      	adds	r3, #4
 80085c6:	e00b      	b.n	80085e0 <USBD_StdEPReq+0x24c>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80085c8:	7bbb      	ldrb	r3, [r7, #14]
 80085ca:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80085ce:	4613      	mov	r3, r2
 80085d0:	009b      	lsls	r3, r3, #2
 80085d2:	4413      	add	r3, r2
 80085d4:	009b      	lsls	r3, r3, #2
 80085d6:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80085da:	687a      	ldr	r2, [r7, #4]
 80085dc:	4413      	add	r3, r2
 80085de:	3304      	adds	r3, #4
 80085e0:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80085e2:	7bbb      	ldrb	r3, [r7, #14]
 80085e4:	2b00      	cmp	r3, #0
 80085e6:	d002      	beq.n	80085ee <USBD_StdEPReq+0x25a>
 80085e8:	7bbb      	ldrb	r3, [r7, #14]
 80085ea:	2b80      	cmp	r3, #128	; 0x80
 80085ec:	d103      	bne.n	80085f6 <USBD_StdEPReq+0x262>
              {
                pep->status = 0x0000U;
 80085ee:	68bb      	ldr	r3, [r7, #8]
 80085f0:	2200      	movs	r2, #0
 80085f2:	601a      	str	r2, [r3, #0]
 80085f4:	e00e      	b.n	8008614 <USBD_StdEPReq+0x280>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 80085f6:	7bbb      	ldrb	r3, [r7, #14]
 80085f8:	4619      	mov	r1, r3
 80085fa:	6878      	ldr	r0, [r7, #4]
 80085fc:	f000 fffa 	bl	80095f4 <USBD_LL_IsStallEP>
 8008600:	4603      	mov	r3, r0
 8008602:	2b00      	cmp	r3, #0
 8008604:	d003      	beq.n	800860e <USBD_StdEPReq+0x27a>
              {
                pep->status = 0x0001U;
 8008606:	68bb      	ldr	r3, [r7, #8]
 8008608:	2201      	movs	r2, #1
 800860a:	601a      	str	r2, [r3, #0]
 800860c:	e002      	b.n	8008614 <USBD_StdEPReq+0x280>
              }
              else
              {
                pep->status = 0x0000U;
 800860e:	68bb      	ldr	r3, [r7, #8]
 8008610:	2200      	movs	r2, #0
 8008612:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8008614:	68bb      	ldr	r3, [r7, #8]
 8008616:	2202      	movs	r2, #2
 8008618:	4619      	mov	r1, r3
 800861a:	6878      	ldr	r0, [r7, #4]
 800861c:	f000 fb94 	bl	8008d48 <USBD_CtlSendData>
              break;
 8008620:	e004      	b.n	800862c <USBD_StdEPReq+0x298>

            default:
              USBD_CtlError(pdev, req);
 8008622:	6839      	ldr	r1, [r7, #0]
 8008624:	6878      	ldr	r0, [r7, #4]
 8008626:	f000 fb24 	bl	8008c72 <USBD_CtlError>
              break;
 800862a:	bf00      	nop
          }
          break;
 800862c:	e004      	b.n	8008638 <USBD_StdEPReq+0x2a4>

        default:
          USBD_CtlError(pdev, req);
 800862e:	6839      	ldr	r1, [r7, #0]
 8008630:	6878      	ldr	r0, [r7, #4]
 8008632:	f000 fb1e 	bl	8008c72 <USBD_CtlError>
          break;
 8008636:	bf00      	nop
      }
      break;
 8008638:	e004      	b.n	8008644 <USBD_StdEPReq+0x2b0>

    default:
      USBD_CtlError(pdev, req);
 800863a:	6839      	ldr	r1, [r7, #0]
 800863c:	6878      	ldr	r0, [r7, #4]
 800863e:	f000 fb18 	bl	8008c72 <USBD_CtlError>
      break;
 8008642:	bf00      	nop
  }

  return ret;
 8008644:	7bfb      	ldrb	r3, [r7, #15]
}
 8008646:	4618      	mov	r0, r3
 8008648:	3710      	adds	r7, #16
 800864a:	46bd      	mov	sp, r7
 800864c:	bd80      	pop	{r7, pc}
	...

08008650 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8008650:	b580      	push	{r7, lr}
 8008652:	b084      	sub	sp, #16
 8008654:	af00      	add	r7, sp, #0
 8008656:	6078      	str	r0, [r7, #4]
 8008658:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800865a:	2300      	movs	r3, #0
 800865c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800865e:	2300      	movs	r3, #0
 8008660:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8008662:	2300      	movs	r3, #0
 8008664:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8008666:	683b      	ldr	r3, [r7, #0]
 8008668:	885b      	ldrh	r3, [r3, #2]
 800866a:	0a1b      	lsrs	r3, r3, #8
 800866c:	b29b      	uxth	r3, r3
 800866e:	3b01      	subs	r3, #1
 8008670:	2b06      	cmp	r3, #6
 8008672:	f200 8128 	bhi.w	80088c6 <USBD_GetDescriptor+0x276>
 8008676:	a201      	add	r2, pc, #4	; (adr r2, 800867c <USBD_GetDescriptor+0x2c>)
 8008678:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800867c:	08008699 	.word	0x08008699
 8008680:	080086b1 	.word	0x080086b1
 8008684:	080086f1 	.word	0x080086f1
 8008688:	080088c7 	.word	0x080088c7
 800868c:	080088c7 	.word	0x080088c7
 8008690:	08008867 	.word	0x08008867
 8008694:	08008893 	.word	0x08008893
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800869e:	681b      	ldr	r3, [r3, #0]
 80086a0:	687a      	ldr	r2, [r7, #4]
 80086a2:	7c12      	ldrb	r2, [r2, #16]
 80086a4:	f107 0108 	add.w	r1, r7, #8
 80086a8:	4610      	mov	r0, r2
 80086aa:	4798      	blx	r3
 80086ac:	60f8      	str	r0, [r7, #12]
      break;
 80086ae:	e112      	b.n	80088d6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	7c1b      	ldrb	r3, [r3, #16]
 80086b4:	2b00      	cmp	r3, #0
 80086b6:	d10d      	bne.n	80086d4 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80086be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80086c0:	f107 0208 	add.w	r2, r7, #8
 80086c4:	4610      	mov	r0, r2
 80086c6:	4798      	blx	r3
 80086c8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80086ca:	68fb      	ldr	r3, [r7, #12]
 80086cc:	3301      	adds	r3, #1
 80086ce:	2202      	movs	r2, #2
 80086d0:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80086d2:	e100      	b.n	80088d6 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80086da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086dc:	f107 0208 	add.w	r2, r7, #8
 80086e0:	4610      	mov	r0, r2
 80086e2:	4798      	blx	r3
 80086e4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80086e6:	68fb      	ldr	r3, [r7, #12]
 80086e8:	3301      	adds	r3, #1
 80086ea:	2202      	movs	r2, #2
 80086ec:	701a      	strb	r2, [r3, #0]
      break;
 80086ee:	e0f2      	b.n	80088d6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80086f0:	683b      	ldr	r3, [r7, #0]
 80086f2:	885b      	ldrh	r3, [r3, #2]
 80086f4:	b2db      	uxtb	r3, r3
 80086f6:	2b05      	cmp	r3, #5
 80086f8:	f200 80ac 	bhi.w	8008854 <USBD_GetDescriptor+0x204>
 80086fc:	a201      	add	r2, pc, #4	; (adr r2, 8008704 <USBD_GetDescriptor+0xb4>)
 80086fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008702:	bf00      	nop
 8008704:	0800871d 	.word	0x0800871d
 8008708:	08008751 	.word	0x08008751
 800870c:	08008785 	.word	0x08008785
 8008710:	080087b9 	.word	0x080087b9
 8008714:	080087ed 	.word	0x080087ed
 8008718:	08008821 	.word	0x08008821
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008722:	685b      	ldr	r3, [r3, #4]
 8008724:	2b00      	cmp	r3, #0
 8008726:	d00b      	beq.n	8008740 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800872e:	685b      	ldr	r3, [r3, #4]
 8008730:	687a      	ldr	r2, [r7, #4]
 8008732:	7c12      	ldrb	r2, [r2, #16]
 8008734:	f107 0108 	add.w	r1, r7, #8
 8008738:	4610      	mov	r0, r2
 800873a:	4798      	blx	r3
 800873c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800873e:	e091      	b.n	8008864 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008740:	6839      	ldr	r1, [r7, #0]
 8008742:	6878      	ldr	r0, [r7, #4]
 8008744:	f000 fa95 	bl	8008c72 <USBD_CtlError>
            err++;
 8008748:	7afb      	ldrb	r3, [r7, #11]
 800874a:	3301      	adds	r3, #1
 800874c:	72fb      	strb	r3, [r7, #11]
          break;
 800874e:	e089      	b.n	8008864 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008756:	689b      	ldr	r3, [r3, #8]
 8008758:	2b00      	cmp	r3, #0
 800875a:	d00b      	beq.n	8008774 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008762:	689b      	ldr	r3, [r3, #8]
 8008764:	687a      	ldr	r2, [r7, #4]
 8008766:	7c12      	ldrb	r2, [r2, #16]
 8008768:	f107 0108 	add.w	r1, r7, #8
 800876c:	4610      	mov	r0, r2
 800876e:	4798      	blx	r3
 8008770:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008772:	e077      	b.n	8008864 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008774:	6839      	ldr	r1, [r7, #0]
 8008776:	6878      	ldr	r0, [r7, #4]
 8008778:	f000 fa7b 	bl	8008c72 <USBD_CtlError>
            err++;
 800877c:	7afb      	ldrb	r3, [r7, #11]
 800877e:	3301      	adds	r3, #1
 8008780:	72fb      	strb	r3, [r7, #11]
          break;
 8008782:	e06f      	b.n	8008864 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800878a:	68db      	ldr	r3, [r3, #12]
 800878c:	2b00      	cmp	r3, #0
 800878e:	d00b      	beq.n	80087a8 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008796:	68db      	ldr	r3, [r3, #12]
 8008798:	687a      	ldr	r2, [r7, #4]
 800879a:	7c12      	ldrb	r2, [r2, #16]
 800879c:	f107 0108 	add.w	r1, r7, #8
 80087a0:	4610      	mov	r0, r2
 80087a2:	4798      	blx	r3
 80087a4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80087a6:	e05d      	b.n	8008864 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80087a8:	6839      	ldr	r1, [r7, #0]
 80087aa:	6878      	ldr	r0, [r7, #4]
 80087ac:	f000 fa61 	bl	8008c72 <USBD_CtlError>
            err++;
 80087b0:	7afb      	ldrb	r3, [r7, #11]
 80087b2:	3301      	adds	r3, #1
 80087b4:	72fb      	strb	r3, [r7, #11]
          break;
 80087b6:	e055      	b.n	8008864 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80087be:	691b      	ldr	r3, [r3, #16]
 80087c0:	2b00      	cmp	r3, #0
 80087c2:	d00b      	beq.n	80087dc <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80087ca:	691b      	ldr	r3, [r3, #16]
 80087cc:	687a      	ldr	r2, [r7, #4]
 80087ce:	7c12      	ldrb	r2, [r2, #16]
 80087d0:	f107 0108 	add.w	r1, r7, #8
 80087d4:	4610      	mov	r0, r2
 80087d6:	4798      	blx	r3
 80087d8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80087da:	e043      	b.n	8008864 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80087dc:	6839      	ldr	r1, [r7, #0]
 80087de:	6878      	ldr	r0, [r7, #4]
 80087e0:	f000 fa47 	bl	8008c72 <USBD_CtlError>
            err++;
 80087e4:	7afb      	ldrb	r3, [r7, #11]
 80087e6:	3301      	adds	r3, #1
 80087e8:	72fb      	strb	r3, [r7, #11]
          break;
 80087ea:	e03b      	b.n	8008864 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80087f2:	695b      	ldr	r3, [r3, #20]
 80087f4:	2b00      	cmp	r3, #0
 80087f6:	d00b      	beq.n	8008810 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80087fe:	695b      	ldr	r3, [r3, #20]
 8008800:	687a      	ldr	r2, [r7, #4]
 8008802:	7c12      	ldrb	r2, [r2, #16]
 8008804:	f107 0108 	add.w	r1, r7, #8
 8008808:	4610      	mov	r0, r2
 800880a:	4798      	blx	r3
 800880c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800880e:	e029      	b.n	8008864 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008810:	6839      	ldr	r1, [r7, #0]
 8008812:	6878      	ldr	r0, [r7, #4]
 8008814:	f000 fa2d 	bl	8008c72 <USBD_CtlError>
            err++;
 8008818:	7afb      	ldrb	r3, [r7, #11]
 800881a:	3301      	adds	r3, #1
 800881c:	72fb      	strb	r3, [r7, #11]
          break;
 800881e:	e021      	b.n	8008864 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008826:	699b      	ldr	r3, [r3, #24]
 8008828:	2b00      	cmp	r3, #0
 800882a:	d00b      	beq.n	8008844 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008832:	699b      	ldr	r3, [r3, #24]
 8008834:	687a      	ldr	r2, [r7, #4]
 8008836:	7c12      	ldrb	r2, [r2, #16]
 8008838:	f107 0108 	add.w	r1, r7, #8
 800883c:	4610      	mov	r0, r2
 800883e:	4798      	blx	r3
 8008840:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008842:	e00f      	b.n	8008864 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008844:	6839      	ldr	r1, [r7, #0]
 8008846:	6878      	ldr	r0, [r7, #4]
 8008848:	f000 fa13 	bl	8008c72 <USBD_CtlError>
            err++;
 800884c:	7afb      	ldrb	r3, [r7, #11]
 800884e:	3301      	adds	r3, #1
 8008850:	72fb      	strb	r3, [r7, #11]
          break;
 8008852:	e007      	b.n	8008864 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8008854:	6839      	ldr	r1, [r7, #0]
 8008856:	6878      	ldr	r0, [r7, #4]
 8008858:	f000 fa0b 	bl	8008c72 <USBD_CtlError>
          err++;
 800885c:	7afb      	ldrb	r3, [r7, #11]
 800885e:	3301      	adds	r3, #1
 8008860:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 8008862:	e038      	b.n	80088d6 <USBD_GetDescriptor+0x286>
 8008864:	e037      	b.n	80088d6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	7c1b      	ldrb	r3, [r3, #16]
 800886a:	2b00      	cmp	r3, #0
 800886c:	d109      	bne.n	8008882 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008874:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008876:	f107 0208 	add.w	r2, r7, #8
 800887a:	4610      	mov	r0, r2
 800887c:	4798      	blx	r3
 800887e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008880:	e029      	b.n	80088d6 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8008882:	6839      	ldr	r1, [r7, #0]
 8008884:	6878      	ldr	r0, [r7, #4]
 8008886:	f000 f9f4 	bl	8008c72 <USBD_CtlError>
        err++;
 800888a:	7afb      	ldrb	r3, [r7, #11]
 800888c:	3301      	adds	r3, #1
 800888e:	72fb      	strb	r3, [r7, #11]
      break;
 8008890:	e021      	b.n	80088d6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	7c1b      	ldrb	r3, [r3, #16]
 8008896:	2b00      	cmp	r3, #0
 8008898:	d10d      	bne.n	80088b6 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80088a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80088a2:	f107 0208 	add.w	r2, r7, #8
 80088a6:	4610      	mov	r0, r2
 80088a8:	4798      	blx	r3
 80088aa:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80088ac:	68fb      	ldr	r3, [r7, #12]
 80088ae:	3301      	adds	r3, #1
 80088b0:	2207      	movs	r2, #7
 80088b2:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80088b4:	e00f      	b.n	80088d6 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80088b6:	6839      	ldr	r1, [r7, #0]
 80088b8:	6878      	ldr	r0, [r7, #4]
 80088ba:	f000 f9da 	bl	8008c72 <USBD_CtlError>
        err++;
 80088be:	7afb      	ldrb	r3, [r7, #11]
 80088c0:	3301      	adds	r3, #1
 80088c2:	72fb      	strb	r3, [r7, #11]
      break;
 80088c4:	e007      	b.n	80088d6 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 80088c6:	6839      	ldr	r1, [r7, #0]
 80088c8:	6878      	ldr	r0, [r7, #4]
 80088ca:	f000 f9d2 	bl	8008c72 <USBD_CtlError>
      err++;
 80088ce:	7afb      	ldrb	r3, [r7, #11]
 80088d0:	3301      	adds	r3, #1
 80088d2:	72fb      	strb	r3, [r7, #11]
      break;
 80088d4:	bf00      	nop
  }

  if (err != 0U)
 80088d6:	7afb      	ldrb	r3, [r7, #11]
 80088d8:	2b00      	cmp	r3, #0
 80088da:	d11c      	bne.n	8008916 <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 80088dc:	893b      	ldrh	r3, [r7, #8]
 80088de:	2b00      	cmp	r3, #0
 80088e0:	d011      	beq.n	8008906 <USBD_GetDescriptor+0x2b6>
 80088e2:	683b      	ldr	r3, [r7, #0]
 80088e4:	88db      	ldrh	r3, [r3, #6]
 80088e6:	2b00      	cmp	r3, #0
 80088e8:	d00d      	beq.n	8008906 <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 80088ea:	683b      	ldr	r3, [r7, #0]
 80088ec:	88da      	ldrh	r2, [r3, #6]
 80088ee:	893b      	ldrh	r3, [r7, #8]
 80088f0:	4293      	cmp	r3, r2
 80088f2:	bf28      	it	cs
 80088f4:	4613      	movcs	r3, r2
 80088f6:	b29b      	uxth	r3, r3
 80088f8:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80088fa:	893b      	ldrh	r3, [r7, #8]
 80088fc:	461a      	mov	r2, r3
 80088fe:	68f9      	ldr	r1, [r7, #12]
 8008900:	6878      	ldr	r0, [r7, #4]
 8008902:	f000 fa21 	bl	8008d48 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 8008906:	683b      	ldr	r3, [r7, #0]
 8008908:	88db      	ldrh	r3, [r3, #6]
 800890a:	2b00      	cmp	r3, #0
 800890c:	d104      	bne.n	8008918 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 800890e:	6878      	ldr	r0, [r7, #4]
 8008910:	f000 fa78 	bl	8008e04 <USBD_CtlSendStatus>
 8008914:	e000      	b.n	8008918 <USBD_GetDescriptor+0x2c8>
    return;
 8008916:	bf00      	nop
    }
  }
}
 8008918:	3710      	adds	r7, #16
 800891a:	46bd      	mov	sp, r7
 800891c:	bd80      	pop	{r7, pc}
 800891e:	bf00      	nop

08008920 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8008920:	b580      	push	{r7, lr}
 8008922:	b084      	sub	sp, #16
 8008924:	af00      	add	r7, sp, #0
 8008926:	6078      	str	r0, [r7, #4]
 8008928:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800892a:	683b      	ldr	r3, [r7, #0]
 800892c:	889b      	ldrh	r3, [r3, #4]
 800892e:	2b00      	cmp	r3, #0
 8008930:	d130      	bne.n	8008994 <USBD_SetAddress+0x74>
 8008932:	683b      	ldr	r3, [r7, #0]
 8008934:	88db      	ldrh	r3, [r3, #6]
 8008936:	2b00      	cmp	r3, #0
 8008938:	d12c      	bne.n	8008994 <USBD_SetAddress+0x74>
 800893a:	683b      	ldr	r3, [r7, #0]
 800893c:	885b      	ldrh	r3, [r3, #2]
 800893e:	2b7f      	cmp	r3, #127	; 0x7f
 8008940:	d828      	bhi.n	8008994 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8008942:	683b      	ldr	r3, [r7, #0]
 8008944:	885b      	ldrh	r3, [r3, #2]
 8008946:	b2db      	uxtb	r3, r3
 8008948:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800894c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008954:	2b03      	cmp	r3, #3
 8008956:	d104      	bne.n	8008962 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8008958:	6839      	ldr	r1, [r7, #0]
 800895a:	6878      	ldr	r0, [r7, #4]
 800895c:	f000 f989 	bl	8008c72 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008960:	e01c      	b.n	800899c <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	7bfa      	ldrb	r2, [r7, #15]
 8008966:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800896a:	7bfb      	ldrb	r3, [r7, #15]
 800896c:	4619      	mov	r1, r3
 800896e:	6878      	ldr	r0, [r7, #4]
 8008970:	f000 fe6d 	bl	800964e <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8008974:	6878      	ldr	r0, [r7, #4]
 8008976:	f000 fa45 	bl	8008e04 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800897a:	7bfb      	ldrb	r3, [r7, #15]
 800897c:	2b00      	cmp	r3, #0
 800897e:	d004      	beq.n	800898a <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	2202      	movs	r2, #2
 8008984:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008988:	e008      	b.n	800899c <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	2201      	movs	r2, #1
 800898e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008992:	e003      	b.n	800899c <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8008994:	6839      	ldr	r1, [r7, #0]
 8008996:	6878      	ldr	r0, [r7, #4]
 8008998:	f000 f96b 	bl	8008c72 <USBD_CtlError>
  }
}
 800899c:	bf00      	nop
 800899e:	3710      	adds	r7, #16
 80089a0:	46bd      	mov	sp, r7
 80089a2:	bd80      	pop	{r7, pc}

080089a4 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80089a4:	b580      	push	{r7, lr}
 80089a6:	b082      	sub	sp, #8
 80089a8:	af00      	add	r7, sp, #0
 80089aa:	6078      	str	r0, [r7, #4]
 80089ac:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80089ae:	683b      	ldr	r3, [r7, #0]
 80089b0:	885b      	ldrh	r3, [r3, #2]
 80089b2:	b2da      	uxtb	r2, r3
 80089b4:	4b41      	ldr	r3, [pc, #260]	; (8008abc <USBD_SetConfig+0x118>)
 80089b6:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80089b8:	4b40      	ldr	r3, [pc, #256]	; (8008abc <USBD_SetConfig+0x118>)
 80089ba:	781b      	ldrb	r3, [r3, #0]
 80089bc:	2b01      	cmp	r3, #1
 80089be:	d904      	bls.n	80089ca <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 80089c0:	6839      	ldr	r1, [r7, #0]
 80089c2:	6878      	ldr	r0, [r7, #4]
 80089c4:	f000 f955 	bl	8008c72 <USBD_CtlError>
 80089c8:	e075      	b.n	8008ab6 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80089d0:	2b02      	cmp	r3, #2
 80089d2:	d002      	beq.n	80089da <USBD_SetConfig+0x36>
 80089d4:	2b03      	cmp	r3, #3
 80089d6:	d023      	beq.n	8008a20 <USBD_SetConfig+0x7c>
 80089d8:	e062      	b.n	8008aa0 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 80089da:	4b38      	ldr	r3, [pc, #224]	; (8008abc <USBD_SetConfig+0x118>)
 80089dc:	781b      	ldrb	r3, [r3, #0]
 80089de:	2b00      	cmp	r3, #0
 80089e0:	d01a      	beq.n	8008a18 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 80089e2:	4b36      	ldr	r3, [pc, #216]	; (8008abc <USBD_SetConfig+0x118>)
 80089e4:	781b      	ldrb	r3, [r3, #0]
 80089e6:	461a      	mov	r2, r3
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	2203      	movs	r2, #3
 80089f0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 80089f4:	4b31      	ldr	r3, [pc, #196]	; (8008abc <USBD_SetConfig+0x118>)
 80089f6:	781b      	ldrb	r3, [r3, #0]
 80089f8:	4619      	mov	r1, r3
 80089fa:	6878      	ldr	r0, [r7, #4]
 80089fc:	f7ff f9f0 	bl	8007de0 <USBD_SetClassConfig>
 8008a00:	4603      	mov	r3, r0
 8008a02:	2b02      	cmp	r3, #2
 8008a04:	d104      	bne.n	8008a10 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 8008a06:	6839      	ldr	r1, [r7, #0]
 8008a08:	6878      	ldr	r0, [r7, #4]
 8008a0a:	f000 f932 	bl	8008c72 <USBD_CtlError>
            return;
 8008a0e:	e052      	b.n	8008ab6 <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8008a10:	6878      	ldr	r0, [r7, #4]
 8008a12:	f000 f9f7 	bl	8008e04 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8008a16:	e04e      	b.n	8008ab6 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8008a18:	6878      	ldr	r0, [r7, #4]
 8008a1a:	f000 f9f3 	bl	8008e04 <USBD_CtlSendStatus>
        break;
 8008a1e:	e04a      	b.n	8008ab6 <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8008a20:	4b26      	ldr	r3, [pc, #152]	; (8008abc <USBD_SetConfig+0x118>)
 8008a22:	781b      	ldrb	r3, [r3, #0]
 8008a24:	2b00      	cmp	r3, #0
 8008a26:	d112      	bne.n	8008a4e <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	2202      	movs	r2, #2
 8008a2c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 8008a30:	4b22      	ldr	r3, [pc, #136]	; (8008abc <USBD_SetConfig+0x118>)
 8008a32:	781b      	ldrb	r3, [r3, #0]
 8008a34:	461a      	mov	r2, r3
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8008a3a:	4b20      	ldr	r3, [pc, #128]	; (8008abc <USBD_SetConfig+0x118>)
 8008a3c:	781b      	ldrb	r3, [r3, #0]
 8008a3e:	4619      	mov	r1, r3
 8008a40:	6878      	ldr	r0, [r7, #4]
 8008a42:	f7ff f9ec 	bl	8007e1e <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8008a46:	6878      	ldr	r0, [r7, #4]
 8008a48:	f000 f9dc 	bl	8008e04 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8008a4c:	e033      	b.n	8008ab6 <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 8008a4e:	4b1b      	ldr	r3, [pc, #108]	; (8008abc <USBD_SetConfig+0x118>)
 8008a50:	781b      	ldrb	r3, [r3, #0]
 8008a52:	461a      	mov	r2, r3
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	685b      	ldr	r3, [r3, #4]
 8008a58:	429a      	cmp	r2, r3
 8008a5a:	d01d      	beq.n	8008a98 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	685b      	ldr	r3, [r3, #4]
 8008a60:	b2db      	uxtb	r3, r3
 8008a62:	4619      	mov	r1, r3
 8008a64:	6878      	ldr	r0, [r7, #4]
 8008a66:	f7ff f9da 	bl	8007e1e <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8008a6a:	4b14      	ldr	r3, [pc, #80]	; (8008abc <USBD_SetConfig+0x118>)
 8008a6c:	781b      	ldrb	r3, [r3, #0]
 8008a6e:	461a      	mov	r2, r3
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8008a74:	4b11      	ldr	r3, [pc, #68]	; (8008abc <USBD_SetConfig+0x118>)
 8008a76:	781b      	ldrb	r3, [r3, #0]
 8008a78:	4619      	mov	r1, r3
 8008a7a:	6878      	ldr	r0, [r7, #4]
 8008a7c:	f7ff f9b0 	bl	8007de0 <USBD_SetClassConfig>
 8008a80:	4603      	mov	r3, r0
 8008a82:	2b02      	cmp	r3, #2
 8008a84:	d104      	bne.n	8008a90 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 8008a86:	6839      	ldr	r1, [r7, #0]
 8008a88:	6878      	ldr	r0, [r7, #4]
 8008a8a:	f000 f8f2 	bl	8008c72 <USBD_CtlError>
            return;
 8008a8e:	e012      	b.n	8008ab6 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8008a90:	6878      	ldr	r0, [r7, #4]
 8008a92:	f000 f9b7 	bl	8008e04 <USBD_CtlSendStatus>
        break;
 8008a96:	e00e      	b.n	8008ab6 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8008a98:	6878      	ldr	r0, [r7, #4]
 8008a9a:	f000 f9b3 	bl	8008e04 <USBD_CtlSendStatus>
        break;
 8008a9e:	e00a      	b.n	8008ab6 <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 8008aa0:	6839      	ldr	r1, [r7, #0]
 8008aa2:	6878      	ldr	r0, [r7, #4]
 8008aa4:	f000 f8e5 	bl	8008c72 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8008aa8:	4b04      	ldr	r3, [pc, #16]	; (8008abc <USBD_SetConfig+0x118>)
 8008aaa:	781b      	ldrb	r3, [r3, #0]
 8008aac:	4619      	mov	r1, r3
 8008aae:	6878      	ldr	r0, [r7, #4]
 8008ab0:	f7ff f9b5 	bl	8007e1e <USBD_ClrClassConfig>
        break;
 8008ab4:	bf00      	nop
    }
  }
}
 8008ab6:	3708      	adds	r7, #8
 8008ab8:	46bd      	mov	sp, r7
 8008aba:	bd80      	pop	{r7, pc}
 8008abc:	2000036c 	.word	0x2000036c

08008ac0 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008ac0:	b580      	push	{r7, lr}
 8008ac2:	b082      	sub	sp, #8
 8008ac4:	af00      	add	r7, sp, #0
 8008ac6:	6078      	str	r0, [r7, #4]
 8008ac8:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8008aca:	683b      	ldr	r3, [r7, #0]
 8008acc:	88db      	ldrh	r3, [r3, #6]
 8008ace:	2b01      	cmp	r3, #1
 8008ad0:	d004      	beq.n	8008adc <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8008ad2:	6839      	ldr	r1, [r7, #0]
 8008ad4:	6878      	ldr	r0, [r7, #4]
 8008ad6:	f000 f8cc 	bl	8008c72 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8008ada:	e021      	b.n	8008b20 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008ae2:	2b01      	cmp	r3, #1
 8008ae4:	db17      	blt.n	8008b16 <USBD_GetConfig+0x56>
 8008ae6:	2b02      	cmp	r3, #2
 8008ae8:	dd02      	ble.n	8008af0 <USBD_GetConfig+0x30>
 8008aea:	2b03      	cmp	r3, #3
 8008aec:	d00b      	beq.n	8008b06 <USBD_GetConfig+0x46>
 8008aee:	e012      	b.n	8008b16 <USBD_GetConfig+0x56>
        pdev->dev_default_config = 0U;
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	2200      	movs	r2, #0
 8008af4:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	3308      	adds	r3, #8
 8008afa:	2201      	movs	r2, #1
 8008afc:	4619      	mov	r1, r3
 8008afe:	6878      	ldr	r0, [r7, #4]
 8008b00:	f000 f922 	bl	8008d48 <USBD_CtlSendData>
        break;
 8008b04:	e00c      	b.n	8008b20 <USBD_GetConfig+0x60>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	3304      	adds	r3, #4
 8008b0a:	2201      	movs	r2, #1
 8008b0c:	4619      	mov	r1, r3
 8008b0e:	6878      	ldr	r0, [r7, #4]
 8008b10:	f000 f91a 	bl	8008d48 <USBD_CtlSendData>
        break;
 8008b14:	e004      	b.n	8008b20 <USBD_GetConfig+0x60>
        USBD_CtlError(pdev, req);
 8008b16:	6839      	ldr	r1, [r7, #0]
 8008b18:	6878      	ldr	r0, [r7, #4]
 8008b1a:	f000 f8aa 	bl	8008c72 <USBD_CtlError>
        break;
 8008b1e:	bf00      	nop
}
 8008b20:	bf00      	nop
 8008b22:	3708      	adds	r7, #8
 8008b24:	46bd      	mov	sp, r7
 8008b26:	bd80      	pop	{r7, pc}

08008b28 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008b28:	b580      	push	{r7, lr}
 8008b2a:	b082      	sub	sp, #8
 8008b2c:	af00      	add	r7, sp, #0
 8008b2e:	6078      	str	r0, [r7, #4]
 8008b30:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008b38:	3b01      	subs	r3, #1
 8008b3a:	2b02      	cmp	r3, #2
 8008b3c:	d81e      	bhi.n	8008b7c <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8008b3e:	683b      	ldr	r3, [r7, #0]
 8008b40:	88db      	ldrh	r3, [r3, #6]
 8008b42:	2b02      	cmp	r3, #2
 8008b44:	d004      	beq.n	8008b50 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 8008b46:	6839      	ldr	r1, [r7, #0]
 8008b48:	6878      	ldr	r0, [r7, #4]
 8008b4a:	f000 f892 	bl	8008c72 <USBD_CtlError>
        break;
 8008b4e:	e01a      	b.n	8008b86 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	2201      	movs	r2, #1
 8008b54:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8008b5c:	2b00      	cmp	r3, #0
 8008b5e:	d005      	beq.n	8008b6c <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	68db      	ldr	r3, [r3, #12]
 8008b64:	f043 0202 	orr.w	r2, r3, #2
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	330c      	adds	r3, #12
 8008b70:	2202      	movs	r2, #2
 8008b72:	4619      	mov	r1, r3
 8008b74:	6878      	ldr	r0, [r7, #4]
 8008b76:	f000 f8e7 	bl	8008d48 <USBD_CtlSendData>
      break;
 8008b7a:	e004      	b.n	8008b86 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 8008b7c:	6839      	ldr	r1, [r7, #0]
 8008b7e:	6878      	ldr	r0, [r7, #4]
 8008b80:	f000 f877 	bl	8008c72 <USBD_CtlError>
      break;
 8008b84:	bf00      	nop
  }
}
 8008b86:	bf00      	nop
 8008b88:	3708      	adds	r7, #8
 8008b8a:	46bd      	mov	sp, r7
 8008b8c:	bd80      	pop	{r7, pc}

08008b8e <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8008b8e:	b580      	push	{r7, lr}
 8008b90:	b082      	sub	sp, #8
 8008b92:	af00      	add	r7, sp, #0
 8008b94:	6078      	str	r0, [r7, #4]
 8008b96:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008b98:	683b      	ldr	r3, [r7, #0]
 8008b9a:	885b      	ldrh	r3, [r3, #2]
 8008b9c:	2b01      	cmp	r3, #1
 8008b9e:	d106      	bne.n	8008bae <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	2201      	movs	r2, #1
 8008ba4:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 8008ba8:	6878      	ldr	r0, [r7, #4]
 8008baa:	f000 f92b 	bl	8008e04 <USBD_CtlSendStatus>
  }
}
 8008bae:	bf00      	nop
 8008bb0:	3708      	adds	r7, #8
 8008bb2:	46bd      	mov	sp, r7
 8008bb4:	bd80      	pop	{r7, pc}

08008bb6 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8008bb6:	b580      	push	{r7, lr}
 8008bb8:	b082      	sub	sp, #8
 8008bba:	af00      	add	r7, sp, #0
 8008bbc:	6078      	str	r0, [r7, #4]
 8008bbe:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008bc6:	3b01      	subs	r3, #1
 8008bc8:	2b02      	cmp	r3, #2
 8008bca:	d80b      	bhi.n	8008be4 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008bcc:	683b      	ldr	r3, [r7, #0]
 8008bce:	885b      	ldrh	r3, [r3, #2]
 8008bd0:	2b01      	cmp	r3, #1
 8008bd2:	d10c      	bne.n	8008bee <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	2200      	movs	r2, #0
 8008bd8:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 8008bdc:	6878      	ldr	r0, [r7, #4]
 8008bde:	f000 f911 	bl	8008e04 <USBD_CtlSendStatus>
      }
      break;
 8008be2:	e004      	b.n	8008bee <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8008be4:	6839      	ldr	r1, [r7, #0]
 8008be6:	6878      	ldr	r0, [r7, #4]
 8008be8:	f000 f843 	bl	8008c72 <USBD_CtlError>
      break;
 8008bec:	e000      	b.n	8008bf0 <USBD_ClrFeature+0x3a>
      break;
 8008bee:	bf00      	nop
  }
}
 8008bf0:	bf00      	nop
 8008bf2:	3708      	adds	r7, #8
 8008bf4:	46bd      	mov	sp, r7
 8008bf6:	bd80      	pop	{r7, pc}

08008bf8 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8008bf8:	b480      	push	{r7}
 8008bfa:	b083      	sub	sp, #12
 8008bfc:	af00      	add	r7, sp, #0
 8008bfe:	6078      	str	r0, [r7, #4]
 8008c00:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8008c02:	683b      	ldr	r3, [r7, #0]
 8008c04:	781a      	ldrb	r2, [r3, #0]
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8008c0a:	683b      	ldr	r3, [r7, #0]
 8008c0c:	785a      	ldrb	r2, [r3, #1]
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8008c12:	683b      	ldr	r3, [r7, #0]
 8008c14:	3302      	adds	r3, #2
 8008c16:	781b      	ldrb	r3, [r3, #0]
 8008c18:	b29a      	uxth	r2, r3
 8008c1a:	683b      	ldr	r3, [r7, #0]
 8008c1c:	3303      	adds	r3, #3
 8008c1e:	781b      	ldrb	r3, [r3, #0]
 8008c20:	b29b      	uxth	r3, r3
 8008c22:	021b      	lsls	r3, r3, #8
 8008c24:	b29b      	uxth	r3, r3
 8008c26:	4413      	add	r3, r2
 8008c28:	b29a      	uxth	r2, r3
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8008c2e:	683b      	ldr	r3, [r7, #0]
 8008c30:	3304      	adds	r3, #4
 8008c32:	781b      	ldrb	r3, [r3, #0]
 8008c34:	b29a      	uxth	r2, r3
 8008c36:	683b      	ldr	r3, [r7, #0]
 8008c38:	3305      	adds	r3, #5
 8008c3a:	781b      	ldrb	r3, [r3, #0]
 8008c3c:	b29b      	uxth	r3, r3
 8008c3e:	021b      	lsls	r3, r3, #8
 8008c40:	b29b      	uxth	r3, r3
 8008c42:	4413      	add	r3, r2
 8008c44:	b29a      	uxth	r2, r3
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8008c4a:	683b      	ldr	r3, [r7, #0]
 8008c4c:	3306      	adds	r3, #6
 8008c4e:	781b      	ldrb	r3, [r3, #0]
 8008c50:	b29a      	uxth	r2, r3
 8008c52:	683b      	ldr	r3, [r7, #0]
 8008c54:	3307      	adds	r3, #7
 8008c56:	781b      	ldrb	r3, [r3, #0]
 8008c58:	b29b      	uxth	r3, r3
 8008c5a:	021b      	lsls	r3, r3, #8
 8008c5c:	b29b      	uxth	r3, r3
 8008c5e:	4413      	add	r3, r2
 8008c60:	b29a      	uxth	r2, r3
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	80da      	strh	r2, [r3, #6]

}
 8008c66:	bf00      	nop
 8008c68:	370c      	adds	r7, #12
 8008c6a:	46bd      	mov	sp, r7
 8008c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c70:	4770      	bx	lr

08008c72 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8008c72:	b580      	push	{r7, lr}
 8008c74:	b082      	sub	sp, #8
 8008c76:	af00      	add	r7, sp, #0
 8008c78:	6078      	str	r0, [r7, #4]
 8008c7a:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8008c7c:	2180      	movs	r1, #128	; 0x80
 8008c7e:	6878      	ldr	r0, [r7, #4]
 8008c80:	f000 fc7a 	bl	8009578 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8008c84:	2100      	movs	r1, #0
 8008c86:	6878      	ldr	r0, [r7, #4]
 8008c88:	f000 fc76 	bl	8009578 <USBD_LL_StallEP>
}
 8008c8c:	bf00      	nop
 8008c8e:	3708      	adds	r7, #8
 8008c90:	46bd      	mov	sp, r7
 8008c92:	bd80      	pop	{r7, pc}

08008c94 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8008c94:	b580      	push	{r7, lr}
 8008c96:	b086      	sub	sp, #24
 8008c98:	af00      	add	r7, sp, #0
 8008c9a:	60f8      	str	r0, [r7, #12]
 8008c9c:	60b9      	str	r1, [r7, #8]
 8008c9e:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8008ca0:	2300      	movs	r3, #0
 8008ca2:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8008ca4:	68fb      	ldr	r3, [r7, #12]
 8008ca6:	2b00      	cmp	r3, #0
 8008ca8:	d032      	beq.n	8008d10 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8008caa:	68f8      	ldr	r0, [r7, #12]
 8008cac:	f000 f834 	bl	8008d18 <USBD_GetLen>
 8008cb0:	4603      	mov	r3, r0
 8008cb2:	3301      	adds	r3, #1
 8008cb4:	b29b      	uxth	r3, r3
 8008cb6:	005b      	lsls	r3, r3, #1
 8008cb8:	b29a      	uxth	r2, r3
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8008cbe:	7dfb      	ldrb	r3, [r7, #23]
 8008cc0:	1c5a      	adds	r2, r3, #1
 8008cc2:	75fa      	strb	r2, [r7, #23]
 8008cc4:	461a      	mov	r2, r3
 8008cc6:	68bb      	ldr	r3, [r7, #8]
 8008cc8:	4413      	add	r3, r2
 8008cca:	687a      	ldr	r2, [r7, #4]
 8008ccc:	7812      	ldrb	r2, [r2, #0]
 8008cce:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8008cd0:	7dfb      	ldrb	r3, [r7, #23]
 8008cd2:	1c5a      	adds	r2, r3, #1
 8008cd4:	75fa      	strb	r2, [r7, #23]
 8008cd6:	461a      	mov	r2, r3
 8008cd8:	68bb      	ldr	r3, [r7, #8]
 8008cda:	4413      	add	r3, r2
 8008cdc:	2203      	movs	r2, #3
 8008cde:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8008ce0:	e012      	b.n	8008d08 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8008ce2:	68fb      	ldr	r3, [r7, #12]
 8008ce4:	1c5a      	adds	r2, r3, #1
 8008ce6:	60fa      	str	r2, [r7, #12]
 8008ce8:	7dfa      	ldrb	r2, [r7, #23]
 8008cea:	1c51      	adds	r1, r2, #1
 8008cec:	75f9      	strb	r1, [r7, #23]
 8008cee:	4611      	mov	r1, r2
 8008cf0:	68ba      	ldr	r2, [r7, #8]
 8008cf2:	440a      	add	r2, r1
 8008cf4:	781b      	ldrb	r3, [r3, #0]
 8008cf6:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8008cf8:	7dfb      	ldrb	r3, [r7, #23]
 8008cfa:	1c5a      	adds	r2, r3, #1
 8008cfc:	75fa      	strb	r2, [r7, #23]
 8008cfe:	461a      	mov	r2, r3
 8008d00:	68bb      	ldr	r3, [r7, #8]
 8008d02:	4413      	add	r3, r2
 8008d04:	2200      	movs	r2, #0
 8008d06:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8008d08:	68fb      	ldr	r3, [r7, #12]
 8008d0a:	781b      	ldrb	r3, [r3, #0]
 8008d0c:	2b00      	cmp	r3, #0
 8008d0e:	d1e8      	bne.n	8008ce2 <USBD_GetString+0x4e>
    }
  }
}
 8008d10:	bf00      	nop
 8008d12:	3718      	adds	r7, #24
 8008d14:	46bd      	mov	sp, r7
 8008d16:	bd80      	pop	{r7, pc}

08008d18 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8008d18:	b480      	push	{r7}
 8008d1a:	b085      	sub	sp, #20
 8008d1c:	af00      	add	r7, sp, #0
 8008d1e:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8008d20:	2300      	movs	r3, #0
 8008d22:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 8008d24:	e005      	b.n	8008d32 <USBD_GetLen+0x1a>
  {
    len++;
 8008d26:	7bfb      	ldrb	r3, [r7, #15]
 8008d28:	3301      	adds	r3, #1
 8008d2a:	73fb      	strb	r3, [r7, #15]
    buf++;
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	3301      	adds	r3, #1
 8008d30:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	781b      	ldrb	r3, [r3, #0]
 8008d36:	2b00      	cmp	r3, #0
 8008d38:	d1f5      	bne.n	8008d26 <USBD_GetLen+0xe>
  }

  return len;
 8008d3a:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d3c:	4618      	mov	r0, r3
 8008d3e:	3714      	adds	r7, #20
 8008d40:	46bd      	mov	sp, r7
 8008d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d46:	4770      	bx	lr

08008d48 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8008d48:	b580      	push	{r7, lr}
 8008d4a:	b084      	sub	sp, #16
 8008d4c:	af00      	add	r7, sp, #0
 8008d4e:	60f8      	str	r0, [r7, #12]
 8008d50:	60b9      	str	r1, [r7, #8]
 8008d52:	4613      	mov	r3, r2
 8008d54:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8008d56:	68fb      	ldr	r3, [r7, #12]
 8008d58:	2202      	movs	r2, #2
 8008d5a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8008d5e:	88fa      	ldrh	r2, [r7, #6]
 8008d60:	68fb      	ldr	r3, [r7, #12]
 8008d62:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8008d64:	88fa      	ldrh	r2, [r7, #6]
 8008d66:	68fb      	ldr	r3, [r7, #12]
 8008d68:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008d6a:	88fb      	ldrh	r3, [r7, #6]
 8008d6c:	68ba      	ldr	r2, [r7, #8]
 8008d6e:	2100      	movs	r1, #0
 8008d70:	68f8      	ldr	r0, [r7, #12]
 8008d72:	f000 fc8b 	bl	800968c <USBD_LL_Transmit>

  return USBD_OK;
 8008d76:	2300      	movs	r3, #0
}
 8008d78:	4618      	mov	r0, r3
 8008d7a:	3710      	adds	r7, #16
 8008d7c:	46bd      	mov	sp, r7
 8008d7e:	bd80      	pop	{r7, pc}

08008d80 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8008d80:	b580      	push	{r7, lr}
 8008d82:	b084      	sub	sp, #16
 8008d84:	af00      	add	r7, sp, #0
 8008d86:	60f8      	str	r0, [r7, #12]
 8008d88:	60b9      	str	r1, [r7, #8]
 8008d8a:	4613      	mov	r3, r2
 8008d8c:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008d8e:	88fb      	ldrh	r3, [r7, #6]
 8008d90:	68ba      	ldr	r2, [r7, #8]
 8008d92:	2100      	movs	r1, #0
 8008d94:	68f8      	ldr	r0, [r7, #12]
 8008d96:	f000 fc79 	bl	800968c <USBD_LL_Transmit>

  return USBD_OK;
 8008d9a:	2300      	movs	r3, #0
}
 8008d9c:	4618      	mov	r0, r3
 8008d9e:	3710      	adds	r7, #16
 8008da0:	46bd      	mov	sp, r7
 8008da2:	bd80      	pop	{r7, pc}

08008da4 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 8008da4:	b580      	push	{r7, lr}
 8008da6:	b084      	sub	sp, #16
 8008da8:	af00      	add	r7, sp, #0
 8008daa:	60f8      	str	r0, [r7, #12]
 8008dac:	60b9      	str	r1, [r7, #8]
 8008dae:	4613      	mov	r3, r2
 8008db0:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8008db2:	68fb      	ldr	r3, [r7, #12]
 8008db4:	2203      	movs	r2, #3
 8008db6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8008dba:	88fa      	ldrh	r2, [r7, #6]
 8008dbc:	68fb      	ldr	r3, [r7, #12]
 8008dbe:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 8008dc2:	88fa      	ldrh	r2, [r7, #6]
 8008dc4:	68fb      	ldr	r3, [r7, #12]
 8008dc6:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008dca:	88fb      	ldrh	r3, [r7, #6]
 8008dcc:	68ba      	ldr	r2, [r7, #8]
 8008dce:	2100      	movs	r1, #0
 8008dd0:	68f8      	ldr	r0, [r7, #12]
 8008dd2:	f000 fc7e 	bl	80096d2 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008dd6:	2300      	movs	r3, #0
}
 8008dd8:	4618      	mov	r0, r3
 8008dda:	3710      	adds	r7, #16
 8008ddc:	46bd      	mov	sp, r7
 8008dde:	bd80      	pop	{r7, pc}

08008de0 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8008de0:	b580      	push	{r7, lr}
 8008de2:	b084      	sub	sp, #16
 8008de4:	af00      	add	r7, sp, #0
 8008de6:	60f8      	str	r0, [r7, #12]
 8008de8:	60b9      	str	r1, [r7, #8]
 8008dea:	4613      	mov	r3, r2
 8008dec:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008dee:	88fb      	ldrh	r3, [r7, #6]
 8008df0:	68ba      	ldr	r2, [r7, #8]
 8008df2:	2100      	movs	r1, #0
 8008df4:	68f8      	ldr	r0, [r7, #12]
 8008df6:	f000 fc6c 	bl	80096d2 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008dfa:	2300      	movs	r3, #0
}
 8008dfc:	4618      	mov	r0, r3
 8008dfe:	3710      	adds	r7, #16
 8008e00:	46bd      	mov	sp, r7
 8008e02:	bd80      	pop	{r7, pc}

08008e04 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8008e04:	b580      	push	{r7, lr}
 8008e06:	b082      	sub	sp, #8
 8008e08:	af00      	add	r7, sp, #0
 8008e0a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	2204      	movs	r2, #4
 8008e10:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8008e14:	2300      	movs	r3, #0
 8008e16:	2200      	movs	r2, #0
 8008e18:	2100      	movs	r1, #0
 8008e1a:	6878      	ldr	r0, [r7, #4]
 8008e1c:	f000 fc36 	bl	800968c <USBD_LL_Transmit>

  return USBD_OK;
 8008e20:	2300      	movs	r3, #0
}
 8008e22:	4618      	mov	r0, r3
 8008e24:	3708      	adds	r7, #8
 8008e26:	46bd      	mov	sp, r7
 8008e28:	bd80      	pop	{r7, pc}

08008e2a <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8008e2a:	b580      	push	{r7, lr}
 8008e2c:	b082      	sub	sp, #8
 8008e2e:	af00      	add	r7, sp, #0
 8008e30:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	2205      	movs	r2, #5
 8008e36:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008e3a:	2300      	movs	r3, #0
 8008e3c:	2200      	movs	r2, #0
 8008e3e:	2100      	movs	r1, #0
 8008e40:	6878      	ldr	r0, [r7, #4]
 8008e42:	f000 fc46 	bl	80096d2 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008e46:	2300      	movs	r3, #0
}
 8008e48:	4618      	mov	r0, r3
 8008e4a:	3708      	adds	r7, #8
 8008e4c:	46bd      	mov	sp, r7
 8008e4e:	bd80      	pop	{r7, pc}

08008e50 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8008e50:	b580      	push	{r7, lr}
 8008e52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8008e54:	2200      	movs	r2, #0
 8008e56:	4912      	ldr	r1, [pc, #72]	; (8008ea0 <MX_USB_DEVICE_Init+0x50>)
 8008e58:	4812      	ldr	r0, [pc, #72]	; (8008ea4 <MX_USB_DEVICE_Init+0x54>)
 8008e5a:	f7fe ff65 	bl	8007d28 <USBD_Init>
 8008e5e:	4603      	mov	r3, r0
 8008e60:	2b00      	cmp	r3, #0
 8008e62:	d001      	beq.n	8008e68 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8008e64:	f7f8 fbd2 	bl	800160c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8008e68:	490f      	ldr	r1, [pc, #60]	; (8008ea8 <MX_USB_DEVICE_Init+0x58>)
 8008e6a:	480e      	ldr	r0, [pc, #56]	; (8008ea4 <MX_USB_DEVICE_Init+0x54>)
 8008e6c:	f7fe ff87 	bl	8007d7e <USBD_RegisterClass>
 8008e70:	4603      	mov	r3, r0
 8008e72:	2b00      	cmp	r3, #0
 8008e74:	d001      	beq.n	8008e7a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8008e76:	f7f8 fbc9 	bl	800160c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8008e7a:	490c      	ldr	r1, [pc, #48]	; (8008eac <MX_USB_DEVICE_Init+0x5c>)
 8008e7c:	4809      	ldr	r0, [pc, #36]	; (8008ea4 <MX_USB_DEVICE_Init+0x54>)
 8008e7e:	f7fe feb5 	bl	8007bec <USBD_CDC_RegisterInterface>
 8008e82:	4603      	mov	r3, r0
 8008e84:	2b00      	cmp	r3, #0
 8008e86:	d001      	beq.n	8008e8c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8008e88:	f7f8 fbc0 	bl	800160c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8008e8c:	4805      	ldr	r0, [pc, #20]	; (8008ea4 <MX_USB_DEVICE_Init+0x54>)
 8008e8e:	f7fe ff90 	bl	8007db2 <USBD_Start>
 8008e92:	4603      	mov	r3, r0
 8008e94:	2b00      	cmp	r3, #0
 8008e96:	d001      	beq.n	8008e9c <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8008e98:	f7f8 fbb8 	bl	800160c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8008e9c:	bf00      	nop
 8008e9e:	bd80      	pop	{r7, pc}
 8008ea0:	2000012c 	.word	0x2000012c
 8008ea4:	2000064c 	.word	0x2000064c
 8008ea8:	20000018 	.word	0x20000018
 8008eac:	2000011c 	.word	0x2000011c

08008eb0 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8008eb0:	b580      	push	{r7, lr}
 8008eb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8008eb4:	2200      	movs	r2, #0
 8008eb6:	4905      	ldr	r1, [pc, #20]	; (8008ecc <CDC_Init_FS+0x1c>)
 8008eb8:	4805      	ldr	r0, [pc, #20]	; (8008ed0 <CDC_Init_FS+0x20>)
 8008eba:	f7fe feae 	bl	8007c1a <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8008ebe:	4905      	ldr	r1, [pc, #20]	; (8008ed4 <CDC_Init_FS+0x24>)
 8008ec0:	4803      	ldr	r0, [pc, #12]	; (8008ed0 <CDC_Init_FS+0x20>)
 8008ec2:	f7fe fec4 	bl	8007c4e <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8008ec6:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8008ec8:	4618      	mov	r0, r3
 8008eca:	bd80      	pop	{r7, pc}
 8008ecc:	20000cf8 	.word	0x20000cf8
 8008ed0:	2000064c 	.word	0x2000064c
 8008ed4:	20000910 	.word	0x20000910

08008ed8 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8008ed8:	b480      	push	{r7}
 8008eda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8008edc:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8008ede:	4618      	mov	r0, r3
 8008ee0:	46bd      	mov	sp, r7
 8008ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ee6:	4770      	bx	lr

08008ee8 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8008ee8:	b480      	push	{r7}
 8008eea:	b083      	sub	sp, #12
 8008eec:	af00      	add	r7, sp, #0
 8008eee:	4603      	mov	r3, r0
 8008ef0:	6039      	str	r1, [r7, #0]
 8008ef2:	71fb      	strb	r3, [r7, #7]
 8008ef4:	4613      	mov	r3, r2
 8008ef6:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8008ef8:	79fb      	ldrb	r3, [r7, #7]
 8008efa:	2b23      	cmp	r3, #35	; 0x23
 8008efc:	d84a      	bhi.n	8008f94 <CDC_Control_FS+0xac>
 8008efe:	a201      	add	r2, pc, #4	; (adr r2, 8008f04 <CDC_Control_FS+0x1c>)
 8008f00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f04:	08008f95 	.word	0x08008f95
 8008f08:	08008f95 	.word	0x08008f95
 8008f0c:	08008f95 	.word	0x08008f95
 8008f10:	08008f95 	.word	0x08008f95
 8008f14:	08008f95 	.word	0x08008f95
 8008f18:	08008f95 	.word	0x08008f95
 8008f1c:	08008f95 	.word	0x08008f95
 8008f20:	08008f95 	.word	0x08008f95
 8008f24:	08008f95 	.word	0x08008f95
 8008f28:	08008f95 	.word	0x08008f95
 8008f2c:	08008f95 	.word	0x08008f95
 8008f30:	08008f95 	.word	0x08008f95
 8008f34:	08008f95 	.word	0x08008f95
 8008f38:	08008f95 	.word	0x08008f95
 8008f3c:	08008f95 	.word	0x08008f95
 8008f40:	08008f95 	.word	0x08008f95
 8008f44:	08008f95 	.word	0x08008f95
 8008f48:	08008f95 	.word	0x08008f95
 8008f4c:	08008f95 	.word	0x08008f95
 8008f50:	08008f95 	.word	0x08008f95
 8008f54:	08008f95 	.word	0x08008f95
 8008f58:	08008f95 	.word	0x08008f95
 8008f5c:	08008f95 	.word	0x08008f95
 8008f60:	08008f95 	.word	0x08008f95
 8008f64:	08008f95 	.word	0x08008f95
 8008f68:	08008f95 	.word	0x08008f95
 8008f6c:	08008f95 	.word	0x08008f95
 8008f70:	08008f95 	.word	0x08008f95
 8008f74:	08008f95 	.word	0x08008f95
 8008f78:	08008f95 	.word	0x08008f95
 8008f7c:	08008f95 	.word	0x08008f95
 8008f80:	08008f95 	.word	0x08008f95
 8008f84:	08008f95 	.word	0x08008f95
 8008f88:	08008f95 	.word	0x08008f95
 8008f8c:	08008f95 	.word	0x08008f95
 8008f90:	08008f95 	.word	0x08008f95
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8008f94:	bf00      	nop
  }

  return (USBD_OK);
 8008f96:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8008f98:	4618      	mov	r0, r3
 8008f9a:	370c      	adds	r7, #12
 8008f9c:	46bd      	mov	sp, r7
 8008f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fa2:	4770      	bx	lr

08008fa4 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8008fa4:	b580      	push	{r7, lr}
 8008fa6:	b082      	sub	sp, #8
 8008fa8:	af00      	add	r7, sp, #0
 8008faa:	6078      	str	r0, [r7, #4]
 8008fac:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8008fae:	6879      	ldr	r1, [r7, #4]
 8008fb0:	4805      	ldr	r0, [pc, #20]	; (8008fc8 <CDC_Receive_FS+0x24>)
 8008fb2:	f7fe fe4c 	bl	8007c4e <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8008fb6:	4804      	ldr	r0, [pc, #16]	; (8008fc8 <CDC_Receive_FS+0x24>)
 8008fb8:	f7fe fe8c 	bl	8007cd4 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8008fbc:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8008fbe:	4618      	mov	r0, r3
 8008fc0:	3708      	adds	r7, #8
 8008fc2:	46bd      	mov	sp, r7
 8008fc4:	bd80      	pop	{r7, pc}
 8008fc6:	bf00      	nop
 8008fc8:	2000064c 	.word	0x2000064c

08008fcc <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8008fcc:	b580      	push	{r7, lr}
 8008fce:	b084      	sub	sp, #16
 8008fd0:	af00      	add	r7, sp, #0
 8008fd2:	6078      	str	r0, [r7, #4]
 8008fd4:	460b      	mov	r3, r1
 8008fd6:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8008fd8:	2300      	movs	r3, #0
 8008fda:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8008fdc:	4b0d      	ldr	r3, [pc, #52]	; (8009014 <CDC_Transmit_FS+0x48>)
 8008fde:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008fe2:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8008fe4:	68bb      	ldr	r3, [r7, #8]
 8008fe6:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8008fea:	2b00      	cmp	r3, #0
 8008fec:	d001      	beq.n	8008ff2 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8008fee:	2301      	movs	r3, #1
 8008ff0:	e00b      	b.n	800900a <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8008ff2:	887b      	ldrh	r3, [r7, #2]
 8008ff4:	461a      	mov	r2, r3
 8008ff6:	6879      	ldr	r1, [r7, #4]
 8008ff8:	4806      	ldr	r0, [pc, #24]	; (8009014 <CDC_Transmit_FS+0x48>)
 8008ffa:	f7fe fe0e 	bl	8007c1a <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8008ffe:	4805      	ldr	r0, [pc, #20]	; (8009014 <CDC_Transmit_FS+0x48>)
 8009000:	f7fe fe39 	bl	8007c76 <USBD_CDC_TransmitPacket>
 8009004:	4603      	mov	r3, r0
 8009006:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8009008:	7bfb      	ldrb	r3, [r7, #15]
}
 800900a:	4618      	mov	r0, r3
 800900c:	3710      	adds	r7, #16
 800900e:	46bd      	mov	sp, r7
 8009010:	bd80      	pop	{r7, pc}
 8009012:	bf00      	nop
 8009014:	2000064c 	.word	0x2000064c

08009018 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009018:	b480      	push	{r7}
 800901a:	b083      	sub	sp, #12
 800901c:	af00      	add	r7, sp, #0
 800901e:	4603      	mov	r3, r0
 8009020:	6039      	str	r1, [r7, #0]
 8009022:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8009024:	683b      	ldr	r3, [r7, #0]
 8009026:	2212      	movs	r2, #18
 8009028:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800902a:	4b03      	ldr	r3, [pc, #12]	; (8009038 <USBD_FS_DeviceDescriptor+0x20>)
}
 800902c:	4618      	mov	r0, r3
 800902e:	370c      	adds	r7, #12
 8009030:	46bd      	mov	sp, r7
 8009032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009036:	4770      	bx	lr
 8009038:	20000148 	.word	0x20000148

0800903c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800903c:	b480      	push	{r7}
 800903e:	b083      	sub	sp, #12
 8009040:	af00      	add	r7, sp, #0
 8009042:	4603      	mov	r3, r0
 8009044:	6039      	str	r1, [r7, #0]
 8009046:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8009048:	683b      	ldr	r3, [r7, #0]
 800904a:	2204      	movs	r2, #4
 800904c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800904e:	4b03      	ldr	r3, [pc, #12]	; (800905c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8009050:	4618      	mov	r0, r3
 8009052:	370c      	adds	r7, #12
 8009054:	46bd      	mov	sp, r7
 8009056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800905a:	4770      	bx	lr
 800905c:	2000015c 	.word	0x2000015c

08009060 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009060:	b580      	push	{r7, lr}
 8009062:	b082      	sub	sp, #8
 8009064:	af00      	add	r7, sp, #0
 8009066:	4603      	mov	r3, r0
 8009068:	6039      	str	r1, [r7, #0]
 800906a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800906c:	79fb      	ldrb	r3, [r7, #7]
 800906e:	2b00      	cmp	r3, #0
 8009070:	d105      	bne.n	800907e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8009072:	683a      	ldr	r2, [r7, #0]
 8009074:	4907      	ldr	r1, [pc, #28]	; (8009094 <USBD_FS_ProductStrDescriptor+0x34>)
 8009076:	4808      	ldr	r0, [pc, #32]	; (8009098 <USBD_FS_ProductStrDescriptor+0x38>)
 8009078:	f7ff fe0c 	bl	8008c94 <USBD_GetString>
 800907c:	e004      	b.n	8009088 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800907e:	683a      	ldr	r2, [r7, #0]
 8009080:	4904      	ldr	r1, [pc, #16]	; (8009094 <USBD_FS_ProductStrDescriptor+0x34>)
 8009082:	4805      	ldr	r0, [pc, #20]	; (8009098 <USBD_FS_ProductStrDescriptor+0x38>)
 8009084:	f7ff fe06 	bl	8008c94 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009088:	4b02      	ldr	r3, [pc, #8]	; (8009094 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800908a:	4618      	mov	r0, r3
 800908c:	3708      	adds	r7, #8
 800908e:	46bd      	mov	sp, r7
 8009090:	bd80      	pop	{r7, pc}
 8009092:	bf00      	nop
 8009094:	200010e0 	.word	0x200010e0
 8009098:	0800be3c 	.word	0x0800be3c

0800909c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800909c:	b580      	push	{r7, lr}
 800909e:	b082      	sub	sp, #8
 80090a0:	af00      	add	r7, sp, #0
 80090a2:	4603      	mov	r3, r0
 80090a4:	6039      	str	r1, [r7, #0]
 80090a6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80090a8:	683a      	ldr	r2, [r7, #0]
 80090aa:	4904      	ldr	r1, [pc, #16]	; (80090bc <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80090ac:	4804      	ldr	r0, [pc, #16]	; (80090c0 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80090ae:	f7ff fdf1 	bl	8008c94 <USBD_GetString>
  return USBD_StrDesc;
 80090b2:	4b02      	ldr	r3, [pc, #8]	; (80090bc <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80090b4:	4618      	mov	r0, r3
 80090b6:	3708      	adds	r7, #8
 80090b8:	46bd      	mov	sp, r7
 80090ba:	bd80      	pop	{r7, pc}
 80090bc:	200010e0 	.word	0x200010e0
 80090c0:	0800be44 	.word	0x0800be44

080090c4 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80090c4:	b580      	push	{r7, lr}
 80090c6:	b082      	sub	sp, #8
 80090c8:	af00      	add	r7, sp, #0
 80090ca:	4603      	mov	r3, r0
 80090cc:	6039      	str	r1, [r7, #0]
 80090ce:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80090d0:	683b      	ldr	r3, [r7, #0]
 80090d2:	221a      	movs	r2, #26
 80090d4:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80090d6:	f000 f843 	bl	8009160 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80090da:	4b02      	ldr	r3, [pc, #8]	; (80090e4 <USBD_FS_SerialStrDescriptor+0x20>)
}
 80090dc:	4618      	mov	r0, r3
 80090de:	3708      	adds	r7, #8
 80090e0:	46bd      	mov	sp, r7
 80090e2:	bd80      	pop	{r7, pc}
 80090e4:	20000160 	.word	0x20000160

080090e8 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80090e8:	b580      	push	{r7, lr}
 80090ea:	b082      	sub	sp, #8
 80090ec:	af00      	add	r7, sp, #0
 80090ee:	4603      	mov	r3, r0
 80090f0:	6039      	str	r1, [r7, #0]
 80090f2:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80090f4:	79fb      	ldrb	r3, [r7, #7]
 80090f6:	2b00      	cmp	r3, #0
 80090f8:	d105      	bne.n	8009106 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80090fa:	683a      	ldr	r2, [r7, #0]
 80090fc:	4907      	ldr	r1, [pc, #28]	; (800911c <USBD_FS_ConfigStrDescriptor+0x34>)
 80090fe:	4808      	ldr	r0, [pc, #32]	; (8009120 <USBD_FS_ConfigStrDescriptor+0x38>)
 8009100:	f7ff fdc8 	bl	8008c94 <USBD_GetString>
 8009104:	e004      	b.n	8009110 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009106:	683a      	ldr	r2, [r7, #0]
 8009108:	4904      	ldr	r1, [pc, #16]	; (800911c <USBD_FS_ConfigStrDescriptor+0x34>)
 800910a:	4805      	ldr	r0, [pc, #20]	; (8009120 <USBD_FS_ConfigStrDescriptor+0x38>)
 800910c:	f7ff fdc2 	bl	8008c94 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009110:	4b02      	ldr	r3, [pc, #8]	; (800911c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8009112:	4618      	mov	r0, r3
 8009114:	3708      	adds	r7, #8
 8009116:	46bd      	mov	sp, r7
 8009118:	bd80      	pop	{r7, pc}
 800911a:	bf00      	nop
 800911c:	200010e0 	.word	0x200010e0
 8009120:	0800be58 	.word	0x0800be58

08009124 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009124:	b580      	push	{r7, lr}
 8009126:	b082      	sub	sp, #8
 8009128:	af00      	add	r7, sp, #0
 800912a:	4603      	mov	r3, r0
 800912c:	6039      	str	r1, [r7, #0]
 800912e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009130:	79fb      	ldrb	r3, [r7, #7]
 8009132:	2b00      	cmp	r3, #0
 8009134:	d105      	bne.n	8009142 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009136:	683a      	ldr	r2, [r7, #0]
 8009138:	4907      	ldr	r1, [pc, #28]	; (8009158 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800913a:	4808      	ldr	r0, [pc, #32]	; (800915c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800913c:	f7ff fdaa 	bl	8008c94 <USBD_GetString>
 8009140:	e004      	b.n	800914c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009142:	683a      	ldr	r2, [r7, #0]
 8009144:	4904      	ldr	r1, [pc, #16]	; (8009158 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8009146:	4805      	ldr	r0, [pc, #20]	; (800915c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009148:	f7ff fda4 	bl	8008c94 <USBD_GetString>
  }
  return USBD_StrDesc;
 800914c:	4b02      	ldr	r3, [pc, #8]	; (8009158 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800914e:	4618      	mov	r0, r3
 8009150:	3708      	adds	r7, #8
 8009152:	46bd      	mov	sp, r7
 8009154:	bd80      	pop	{r7, pc}
 8009156:	bf00      	nop
 8009158:	200010e0 	.word	0x200010e0
 800915c:	0800be64 	.word	0x0800be64

08009160 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8009160:	b580      	push	{r7, lr}
 8009162:	b084      	sub	sp, #16
 8009164:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8009166:	4b0f      	ldr	r3, [pc, #60]	; (80091a4 <Get_SerialNum+0x44>)
 8009168:	681b      	ldr	r3, [r3, #0]
 800916a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800916c:	4b0e      	ldr	r3, [pc, #56]	; (80091a8 <Get_SerialNum+0x48>)
 800916e:	681b      	ldr	r3, [r3, #0]
 8009170:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8009172:	4b0e      	ldr	r3, [pc, #56]	; (80091ac <Get_SerialNum+0x4c>)
 8009174:	681b      	ldr	r3, [r3, #0]
 8009176:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8009178:	68fa      	ldr	r2, [r7, #12]
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	4413      	add	r3, r2
 800917e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8009180:	68fb      	ldr	r3, [r7, #12]
 8009182:	2b00      	cmp	r3, #0
 8009184:	d009      	beq.n	800919a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8009186:	2208      	movs	r2, #8
 8009188:	4909      	ldr	r1, [pc, #36]	; (80091b0 <Get_SerialNum+0x50>)
 800918a:	68f8      	ldr	r0, [r7, #12]
 800918c:	f000 f814 	bl	80091b8 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8009190:	2204      	movs	r2, #4
 8009192:	4908      	ldr	r1, [pc, #32]	; (80091b4 <Get_SerialNum+0x54>)
 8009194:	68b8      	ldr	r0, [r7, #8]
 8009196:	f000 f80f 	bl	80091b8 <IntToUnicode>
  }
}
 800919a:	bf00      	nop
 800919c:	3710      	adds	r7, #16
 800919e:	46bd      	mov	sp, r7
 80091a0:	bd80      	pop	{r7, pc}
 80091a2:	bf00      	nop
 80091a4:	1ffff7ac 	.word	0x1ffff7ac
 80091a8:	1ffff7b0 	.word	0x1ffff7b0
 80091ac:	1ffff7b4 	.word	0x1ffff7b4
 80091b0:	20000162 	.word	0x20000162
 80091b4:	20000172 	.word	0x20000172

080091b8 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80091b8:	b480      	push	{r7}
 80091ba:	b087      	sub	sp, #28
 80091bc:	af00      	add	r7, sp, #0
 80091be:	60f8      	str	r0, [r7, #12]
 80091c0:	60b9      	str	r1, [r7, #8]
 80091c2:	4613      	mov	r3, r2
 80091c4:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80091c6:	2300      	movs	r3, #0
 80091c8:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80091ca:	2300      	movs	r3, #0
 80091cc:	75fb      	strb	r3, [r7, #23]
 80091ce:	e027      	b.n	8009220 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80091d0:	68fb      	ldr	r3, [r7, #12]
 80091d2:	0f1b      	lsrs	r3, r3, #28
 80091d4:	2b09      	cmp	r3, #9
 80091d6:	d80b      	bhi.n	80091f0 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80091d8:	68fb      	ldr	r3, [r7, #12]
 80091da:	0f1b      	lsrs	r3, r3, #28
 80091dc:	b2da      	uxtb	r2, r3
 80091de:	7dfb      	ldrb	r3, [r7, #23]
 80091e0:	005b      	lsls	r3, r3, #1
 80091e2:	4619      	mov	r1, r3
 80091e4:	68bb      	ldr	r3, [r7, #8]
 80091e6:	440b      	add	r3, r1
 80091e8:	3230      	adds	r2, #48	; 0x30
 80091ea:	b2d2      	uxtb	r2, r2
 80091ec:	701a      	strb	r2, [r3, #0]
 80091ee:	e00a      	b.n	8009206 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80091f0:	68fb      	ldr	r3, [r7, #12]
 80091f2:	0f1b      	lsrs	r3, r3, #28
 80091f4:	b2da      	uxtb	r2, r3
 80091f6:	7dfb      	ldrb	r3, [r7, #23]
 80091f8:	005b      	lsls	r3, r3, #1
 80091fa:	4619      	mov	r1, r3
 80091fc:	68bb      	ldr	r3, [r7, #8]
 80091fe:	440b      	add	r3, r1
 8009200:	3237      	adds	r2, #55	; 0x37
 8009202:	b2d2      	uxtb	r2, r2
 8009204:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8009206:	68fb      	ldr	r3, [r7, #12]
 8009208:	011b      	lsls	r3, r3, #4
 800920a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800920c:	7dfb      	ldrb	r3, [r7, #23]
 800920e:	005b      	lsls	r3, r3, #1
 8009210:	3301      	adds	r3, #1
 8009212:	68ba      	ldr	r2, [r7, #8]
 8009214:	4413      	add	r3, r2
 8009216:	2200      	movs	r2, #0
 8009218:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800921a:	7dfb      	ldrb	r3, [r7, #23]
 800921c:	3301      	adds	r3, #1
 800921e:	75fb      	strb	r3, [r7, #23]
 8009220:	7dfa      	ldrb	r2, [r7, #23]
 8009222:	79fb      	ldrb	r3, [r7, #7]
 8009224:	429a      	cmp	r2, r3
 8009226:	d3d3      	bcc.n	80091d0 <IntToUnicode+0x18>
  }
}
 8009228:	bf00      	nop
 800922a:	371c      	adds	r7, #28
 800922c:	46bd      	mov	sp, r7
 800922e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009232:	4770      	bx	lr

08009234 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8009234:	b580      	push	{r7, lr}
 8009236:	b08a      	sub	sp, #40	; 0x28
 8009238:	af00      	add	r7, sp, #0
 800923a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800923c:	f107 0314 	add.w	r3, r7, #20
 8009240:	2200      	movs	r2, #0
 8009242:	601a      	str	r2, [r3, #0]
 8009244:	605a      	str	r2, [r3, #4]
 8009246:	609a      	str	r2, [r3, #8]
 8009248:	60da      	str	r2, [r3, #12]
 800924a:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB)
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	681b      	ldr	r3, [r3, #0]
 8009250:	4a1c      	ldr	r2, [pc, #112]	; (80092c4 <HAL_PCD_MspInit+0x90>)
 8009252:	4293      	cmp	r3, r2
 8009254:	d131      	bne.n	80092ba <HAL_PCD_MspInit+0x86>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009256:	4b1c      	ldr	r3, [pc, #112]	; (80092c8 <HAL_PCD_MspInit+0x94>)
 8009258:	695b      	ldr	r3, [r3, #20]
 800925a:	4a1b      	ldr	r2, [pc, #108]	; (80092c8 <HAL_PCD_MspInit+0x94>)
 800925c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009260:	6153      	str	r3, [r2, #20]
 8009262:	4b19      	ldr	r3, [pc, #100]	; (80092c8 <HAL_PCD_MspInit+0x94>)
 8009264:	695b      	ldr	r3, [r3, #20]
 8009266:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800926a:	613b      	str	r3, [r7, #16]
 800926c:	693b      	ldr	r3, [r7, #16]
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = DM_Pin|DP_Pin;
 800926e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8009272:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009274:	2302      	movs	r3, #2
 8009276:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009278:	2300      	movs	r3, #0
 800927a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800927c:	2303      	movs	r3, #3
 800927e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF14_USB;
 8009280:	230e      	movs	r3, #14
 8009282:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009284:	f107 0314 	add.w	r3, r7, #20
 8009288:	4619      	mov	r1, r3
 800928a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800928e:	f7f8 fcab 	bl	8001be8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8009292:	4b0d      	ldr	r3, [pc, #52]	; (80092c8 <HAL_PCD_MspInit+0x94>)
 8009294:	69db      	ldr	r3, [r3, #28]
 8009296:	4a0c      	ldr	r2, [pc, #48]	; (80092c8 <HAL_PCD_MspInit+0x94>)
 8009298:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800929c:	61d3      	str	r3, [r2, #28]
 800929e:	4b0a      	ldr	r3, [pc, #40]	; (80092c8 <HAL_PCD_MspInit+0x94>)
 80092a0:	69db      	ldr	r3, [r3, #28]
 80092a2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80092a6:	60fb      	str	r3, [r7, #12]
 80092a8:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN_RX0_IRQn, 0, 0);
 80092aa:	2200      	movs	r2, #0
 80092ac:	2100      	movs	r1, #0
 80092ae:	2014      	movs	r0, #20
 80092b0:	f7f8 fc63 	bl	8001b7a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN_RX0_IRQn);
 80092b4:	2014      	movs	r0, #20
 80092b6:	f7f8 fc7c 	bl	8001bb2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 80092ba:	bf00      	nop
 80092bc:	3728      	adds	r7, #40	; 0x28
 80092be:	46bd      	mov	sp, r7
 80092c0:	bd80      	pop	{r7, pc}
 80092c2:	bf00      	nop
 80092c4:	40005c00 	.word	0x40005c00
 80092c8:	40021000 	.word	0x40021000

080092cc <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80092cc:	b580      	push	{r7, lr}
 80092ce:	b082      	sub	sp, #8
 80092d0:	af00      	add	r7, sp, #0
 80092d2:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	f8d3 22e8 	ldr.w	r2, [r3, #744]	; 0x2e8
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 80092e0:	4619      	mov	r1, r3
 80092e2:	4610      	mov	r0, r2
 80092e4:	f7fe fdae 	bl	8007e44 <USBD_LL_SetupStage>
}
 80092e8:	bf00      	nop
 80092ea:	3708      	adds	r7, #8
 80092ec:	46bd      	mov	sp, r7
 80092ee:	bd80      	pop	{r7, pc}

080092f0 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80092f0:	b580      	push	{r7, lr}
 80092f2:	b082      	sub	sp, #8
 80092f4:	af00      	add	r7, sp, #0
 80092f6:	6078      	str	r0, [r7, #4]
 80092f8:	460b      	mov	r3, r1
 80092fa:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 8009302:	78fa      	ldrb	r2, [r7, #3]
 8009304:	6879      	ldr	r1, [r7, #4]
 8009306:	4613      	mov	r3, r2
 8009308:	009b      	lsls	r3, r3, #2
 800930a:	4413      	add	r3, r2
 800930c:	00db      	lsls	r3, r3, #3
 800930e:	440b      	add	r3, r1
 8009310:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8009314:	681a      	ldr	r2, [r3, #0]
 8009316:	78fb      	ldrb	r3, [r7, #3]
 8009318:	4619      	mov	r1, r3
 800931a:	f7fe fdde 	bl	8007eda <USBD_LL_DataOutStage>
}
 800931e:	bf00      	nop
 8009320:	3708      	adds	r7, #8
 8009322:	46bd      	mov	sp, r7
 8009324:	bd80      	pop	{r7, pc}

08009326 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009326:	b580      	push	{r7, lr}
 8009328:	b082      	sub	sp, #8
 800932a:	af00      	add	r7, sp, #0
 800932c:	6078      	str	r0, [r7, #4]
 800932e:	460b      	mov	r3, r1
 8009330:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 8009338:	78fa      	ldrb	r2, [r7, #3]
 800933a:	6879      	ldr	r1, [r7, #4]
 800933c:	4613      	mov	r3, r2
 800933e:	009b      	lsls	r3, r3, #2
 8009340:	4413      	add	r3, r2
 8009342:	00db      	lsls	r3, r3, #3
 8009344:	440b      	add	r3, r1
 8009346:	333c      	adds	r3, #60	; 0x3c
 8009348:	681a      	ldr	r2, [r3, #0]
 800934a:	78fb      	ldrb	r3, [r7, #3]
 800934c:	4619      	mov	r1, r3
 800934e:	f7fe fe35 	bl	8007fbc <USBD_LL_DataInStage>
}
 8009352:	bf00      	nop
 8009354:	3708      	adds	r7, #8
 8009356:	46bd      	mov	sp, r7
 8009358:	bd80      	pop	{r7, pc}

0800935a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800935a:	b580      	push	{r7, lr}
 800935c:	b082      	sub	sp, #8
 800935e:	af00      	add	r7, sp, #0
 8009360:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8009368:	4618      	mov	r0, r3
 800936a:	f7fe ff48 	bl	80081fe <USBD_LL_SOF>
}
 800936e:	bf00      	nop
 8009370:	3708      	adds	r7, #8
 8009372:	46bd      	mov	sp, r7
 8009374:	bd80      	pop	{r7, pc}

08009376 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009376:	b580      	push	{r7, lr}
 8009378:	b084      	sub	sp, #16
 800937a:	af00      	add	r7, sp, #0
 800937c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800937e:	2301      	movs	r3, #1
 8009380:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	689b      	ldr	r3, [r3, #8]
 8009386:	2b02      	cmp	r3, #2
 8009388:	d001      	beq.n	800938e <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800938a:	f7f8 f93f 	bl	800160c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8009394:	7bfa      	ldrb	r2, [r7, #15]
 8009396:	4611      	mov	r1, r2
 8009398:	4618      	mov	r0, r3
 800939a:	f7fe fef5 	bl	8008188 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 80093a4:	4618      	mov	r0, r3
 80093a6:	f7fe feae 	bl	8008106 <USBD_LL_Reset>
}
 80093aa:	bf00      	nop
 80093ac:	3710      	adds	r7, #16
 80093ae:	46bd      	mov	sp, r7
 80093b0:	bd80      	pop	{r7, pc}
	...

080093b4 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80093b4:	b580      	push	{r7, lr}
 80093b6:	b082      	sub	sp, #8
 80093b8:	af00      	add	r7, sp, #0
 80093ba:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 80093c2:	4618      	mov	r0, r3
 80093c4:	f7fe fef0 	bl	80081a8 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	699b      	ldr	r3, [r3, #24]
 80093cc:	2b00      	cmp	r3, #0
 80093ce:	d005      	beq.n	80093dc <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80093d0:	4b04      	ldr	r3, [pc, #16]	; (80093e4 <HAL_PCD_SuspendCallback+0x30>)
 80093d2:	691b      	ldr	r3, [r3, #16]
 80093d4:	4a03      	ldr	r2, [pc, #12]	; (80093e4 <HAL_PCD_SuspendCallback+0x30>)
 80093d6:	f043 0306 	orr.w	r3, r3, #6
 80093da:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80093dc:	bf00      	nop
 80093de:	3708      	adds	r7, #8
 80093e0:	46bd      	mov	sp, r7
 80093e2:	bd80      	pop	{r7, pc}
 80093e4:	e000ed00 	.word	0xe000ed00

080093e8 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80093e8:	b580      	push	{r7, lr}
 80093ea:	b082      	sub	sp, #8
 80093ec:	af00      	add	r7, sp, #0
 80093ee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 80093f6:	4618      	mov	r0, r3
 80093f8:	f7fe feeb 	bl	80081d2 <USBD_LL_Resume>
}
 80093fc:	bf00      	nop
 80093fe:	3708      	adds	r7, #8
 8009400:	46bd      	mov	sp, r7
 8009402:	bd80      	pop	{r7, pc}

08009404 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8009404:	b580      	push	{r7, lr}
 8009406:	b082      	sub	sp, #8
 8009408:	af00      	add	r7, sp, #0
 800940a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800940c:	4a28      	ldr	r2, [pc, #160]	; (80094b0 <USBD_LL_Init+0xac>)
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	f8c2 32e8 	str.w	r3, [r2, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	4a26      	ldr	r2, [pc, #152]	; (80094b0 <USBD_LL_Init+0xac>)
 8009418:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 800941c:	4b24      	ldr	r3, [pc, #144]	; (80094b0 <USBD_LL_Init+0xac>)
 800941e:	4a25      	ldr	r2, [pc, #148]	; (80094b4 <USBD_LL_Init+0xb0>)
 8009420:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8009422:	4b23      	ldr	r3, [pc, #140]	; (80094b0 <USBD_LL_Init+0xac>)
 8009424:	2208      	movs	r2, #8
 8009426:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8009428:	4b21      	ldr	r3, [pc, #132]	; (80094b0 <USBD_LL_Init+0xac>)
 800942a:	2202      	movs	r2, #2
 800942c:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800942e:	4b20      	ldr	r3, [pc, #128]	; (80094b0 <USBD_LL_Init+0xac>)
 8009430:	2202      	movs	r2, #2
 8009432:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8009434:	4b1e      	ldr	r3, [pc, #120]	; (80094b0 <USBD_LL_Init+0xac>)
 8009436:	2200      	movs	r2, #0
 8009438:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800943a:	4b1d      	ldr	r3, [pc, #116]	; (80094b0 <USBD_LL_Init+0xac>)
 800943c:	2200      	movs	r2, #0
 800943e:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8009440:	481b      	ldr	r0, [pc, #108]	; (80094b0 <USBD_LL_Init+0xac>)
 8009442:	f7f9 fad4 	bl	80029ee <HAL_PCD_Init>
 8009446:	4603      	mov	r3, r0
 8009448:	2b00      	cmp	r3, #0
 800944a:	d001      	beq.n	8009450 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 800944c:	f7f8 f8de 	bl	800160c <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009456:	2318      	movs	r3, #24
 8009458:	2200      	movs	r2, #0
 800945a:	2100      	movs	r1, #0
 800945c:	f7fa fd70 	bl	8003f40 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009466:	2358      	movs	r3, #88	; 0x58
 8009468:	2200      	movs	r2, #0
 800946a:	2180      	movs	r1, #128	; 0x80
 800946c:	f7fa fd68 	bl	8003f40 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009476:	23c0      	movs	r3, #192	; 0xc0
 8009478:	2200      	movs	r2, #0
 800947a:	2181      	movs	r1, #129	; 0x81
 800947c:	f7fa fd60 	bl	8003f40 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009486:	f44f 7388 	mov.w	r3, #272	; 0x110
 800948a:	2200      	movs	r2, #0
 800948c:	2101      	movs	r1, #1
 800948e:	f7fa fd57 	bl	8003f40 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009498:	f44f 7380 	mov.w	r3, #256	; 0x100
 800949c:	2200      	movs	r2, #0
 800949e:	2182      	movs	r1, #130	; 0x82
 80094a0:	f7fa fd4e 	bl	8003f40 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 80094a4:	2300      	movs	r3, #0
}
 80094a6:	4618      	mov	r0, r3
 80094a8:	3708      	adds	r7, #8
 80094aa:	46bd      	mov	sp, r7
 80094ac:	bd80      	pop	{r7, pc}
 80094ae:	bf00      	nop
 80094b0:	200012e0 	.word	0x200012e0
 80094b4:	40005c00 	.word	0x40005c00

080094b8 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80094b8:	b580      	push	{r7, lr}
 80094ba:	b084      	sub	sp, #16
 80094bc:	af00      	add	r7, sp, #0
 80094be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80094c0:	2300      	movs	r3, #0
 80094c2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80094c4:	2300      	movs	r3, #0
 80094c6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80094ce:	4618      	mov	r0, r3
 80094d0:	f7f9 fb6b 	bl	8002baa <HAL_PCD_Start>
 80094d4:	4603      	mov	r3, r0
 80094d6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80094d8:	7bfb      	ldrb	r3, [r7, #15]
 80094da:	4618      	mov	r0, r3
 80094dc:	f000 f954 	bl	8009788 <USBD_Get_USB_Status>
 80094e0:	4603      	mov	r3, r0
 80094e2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80094e4:	7bbb      	ldrb	r3, [r7, #14]
}
 80094e6:	4618      	mov	r0, r3
 80094e8:	3710      	adds	r7, #16
 80094ea:	46bd      	mov	sp, r7
 80094ec:	bd80      	pop	{r7, pc}

080094ee <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80094ee:	b580      	push	{r7, lr}
 80094f0:	b084      	sub	sp, #16
 80094f2:	af00      	add	r7, sp, #0
 80094f4:	6078      	str	r0, [r7, #4]
 80094f6:	4608      	mov	r0, r1
 80094f8:	4611      	mov	r1, r2
 80094fa:	461a      	mov	r2, r3
 80094fc:	4603      	mov	r3, r0
 80094fe:	70fb      	strb	r3, [r7, #3]
 8009500:	460b      	mov	r3, r1
 8009502:	70bb      	strb	r3, [r7, #2]
 8009504:	4613      	mov	r3, r2
 8009506:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009508:	2300      	movs	r3, #0
 800950a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800950c:	2300      	movs	r3, #0
 800950e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009516:	78bb      	ldrb	r3, [r7, #2]
 8009518:	883a      	ldrh	r2, [r7, #0]
 800951a:	78f9      	ldrb	r1, [r7, #3]
 800951c:	f7f9 fc87 	bl	8002e2e <HAL_PCD_EP_Open>
 8009520:	4603      	mov	r3, r0
 8009522:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009524:	7bfb      	ldrb	r3, [r7, #15]
 8009526:	4618      	mov	r0, r3
 8009528:	f000 f92e 	bl	8009788 <USBD_Get_USB_Status>
 800952c:	4603      	mov	r3, r0
 800952e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009530:	7bbb      	ldrb	r3, [r7, #14]
}
 8009532:	4618      	mov	r0, r3
 8009534:	3710      	adds	r7, #16
 8009536:	46bd      	mov	sp, r7
 8009538:	bd80      	pop	{r7, pc}

0800953a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800953a:	b580      	push	{r7, lr}
 800953c:	b084      	sub	sp, #16
 800953e:	af00      	add	r7, sp, #0
 8009540:	6078      	str	r0, [r7, #4]
 8009542:	460b      	mov	r3, r1
 8009544:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009546:	2300      	movs	r3, #0
 8009548:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800954a:	2300      	movs	r3, #0
 800954c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009554:	78fa      	ldrb	r2, [r7, #3]
 8009556:	4611      	mov	r1, r2
 8009558:	4618      	mov	r0, r3
 800955a:	f7f9 fcce 	bl	8002efa <HAL_PCD_EP_Close>
 800955e:	4603      	mov	r3, r0
 8009560:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009562:	7bfb      	ldrb	r3, [r7, #15]
 8009564:	4618      	mov	r0, r3
 8009566:	f000 f90f 	bl	8009788 <USBD_Get_USB_Status>
 800956a:	4603      	mov	r3, r0
 800956c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800956e:	7bbb      	ldrb	r3, [r7, #14]
}
 8009570:	4618      	mov	r0, r3
 8009572:	3710      	adds	r7, #16
 8009574:	46bd      	mov	sp, r7
 8009576:	bd80      	pop	{r7, pc}

08009578 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009578:	b580      	push	{r7, lr}
 800957a:	b084      	sub	sp, #16
 800957c:	af00      	add	r7, sp, #0
 800957e:	6078      	str	r0, [r7, #4]
 8009580:	460b      	mov	r3, r1
 8009582:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009584:	2300      	movs	r3, #0
 8009586:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009588:	2300      	movs	r3, #0
 800958a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009592:	78fa      	ldrb	r2, [r7, #3]
 8009594:	4611      	mov	r1, r2
 8009596:	4618      	mov	r0, r3
 8009598:	f7f9 fd8f 	bl	80030ba <HAL_PCD_EP_SetStall>
 800959c:	4603      	mov	r3, r0
 800959e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80095a0:	7bfb      	ldrb	r3, [r7, #15]
 80095a2:	4618      	mov	r0, r3
 80095a4:	f000 f8f0 	bl	8009788 <USBD_Get_USB_Status>
 80095a8:	4603      	mov	r3, r0
 80095aa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80095ac:	7bbb      	ldrb	r3, [r7, #14]
}
 80095ae:	4618      	mov	r0, r3
 80095b0:	3710      	adds	r7, #16
 80095b2:	46bd      	mov	sp, r7
 80095b4:	bd80      	pop	{r7, pc}

080095b6 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80095b6:	b580      	push	{r7, lr}
 80095b8:	b084      	sub	sp, #16
 80095ba:	af00      	add	r7, sp, #0
 80095bc:	6078      	str	r0, [r7, #4]
 80095be:	460b      	mov	r3, r1
 80095c0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80095c2:	2300      	movs	r3, #0
 80095c4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80095c6:	2300      	movs	r3, #0
 80095c8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80095d0:	78fa      	ldrb	r2, [r7, #3]
 80095d2:	4611      	mov	r1, r2
 80095d4:	4618      	mov	r0, r3
 80095d6:	f7f9 fdc2 	bl	800315e <HAL_PCD_EP_ClrStall>
 80095da:	4603      	mov	r3, r0
 80095dc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80095de:	7bfb      	ldrb	r3, [r7, #15]
 80095e0:	4618      	mov	r0, r3
 80095e2:	f000 f8d1 	bl	8009788 <USBD_Get_USB_Status>
 80095e6:	4603      	mov	r3, r0
 80095e8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80095ea:	7bbb      	ldrb	r3, [r7, #14]
}
 80095ec:	4618      	mov	r0, r3
 80095ee:	3710      	adds	r7, #16
 80095f0:	46bd      	mov	sp, r7
 80095f2:	bd80      	pop	{r7, pc}

080095f4 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80095f4:	b480      	push	{r7}
 80095f6:	b085      	sub	sp, #20
 80095f8:	af00      	add	r7, sp, #0
 80095fa:	6078      	str	r0, [r7, #4]
 80095fc:	460b      	mov	r3, r1
 80095fe:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009606:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8009608:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800960c:	2b00      	cmp	r3, #0
 800960e:	da0c      	bge.n	800962a <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8009610:	78fb      	ldrb	r3, [r7, #3]
 8009612:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009616:	68f9      	ldr	r1, [r7, #12]
 8009618:	1c5a      	adds	r2, r3, #1
 800961a:	4613      	mov	r3, r2
 800961c:	009b      	lsls	r3, r3, #2
 800961e:	4413      	add	r3, r2
 8009620:	00db      	lsls	r3, r3, #3
 8009622:	440b      	add	r3, r1
 8009624:	3302      	adds	r3, #2
 8009626:	781b      	ldrb	r3, [r3, #0]
 8009628:	e00b      	b.n	8009642 <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800962a:	78fb      	ldrb	r3, [r7, #3]
 800962c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009630:	68f9      	ldr	r1, [r7, #12]
 8009632:	4613      	mov	r3, r2
 8009634:	009b      	lsls	r3, r3, #2
 8009636:	4413      	add	r3, r2
 8009638:	00db      	lsls	r3, r3, #3
 800963a:	440b      	add	r3, r1
 800963c:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 8009640:	781b      	ldrb	r3, [r3, #0]
  }
}
 8009642:	4618      	mov	r0, r3
 8009644:	3714      	adds	r7, #20
 8009646:	46bd      	mov	sp, r7
 8009648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800964c:	4770      	bx	lr

0800964e <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800964e:	b580      	push	{r7, lr}
 8009650:	b084      	sub	sp, #16
 8009652:	af00      	add	r7, sp, #0
 8009654:	6078      	str	r0, [r7, #4]
 8009656:	460b      	mov	r3, r1
 8009658:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800965a:	2300      	movs	r3, #0
 800965c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800965e:	2300      	movs	r3, #0
 8009660:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009668:	78fa      	ldrb	r2, [r7, #3]
 800966a:	4611      	mov	r1, r2
 800966c:	4618      	mov	r0, r3
 800966e:	f7f9 fbb9 	bl	8002de4 <HAL_PCD_SetAddress>
 8009672:	4603      	mov	r3, r0
 8009674:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009676:	7bfb      	ldrb	r3, [r7, #15]
 8009678:	4618      	mov	r0, r3
 800967a:	f000 f885 	bl	8009788 <USBD_Get_USB_Status>
 800967e:	4603      	mov	r3, r0
 8009680:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009682:	7bbb      	ldrb	r3, [r7, #14]
}
 8009684:	4618      	mov	r0, r3
 8009686:	3710      	adds	r7, #16
 8009688:	46bd      	mov	sp, r7
 800968a:	bd80      	pop	{r7, pc}

0800968c <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800968c:	b580      	push	{r7, lr}
 800968e:	b086      	sub	sp, #24
 8009690:	af00      	add	r7, sp, #0
 8009692:	60f8      	str	r0, [r7, #12]
 8009694:	607a      	str	r2, [r7, #4]
 8009696:	461a      	mov	r2, r3
 8009698:	460b      	mov	r3, r1
 800969a:	72fb      	strb	r3, [r7, #11]
 800969c:	4613      	mov	r3, r2
 800969e:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80096a0:	2300      	movs	r3, #0
 80096a2:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80096a4:	2300      	movs	r3, #0
 80096a6:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80096a8:	68fb      	ldr	r3, [r7, #12]
 80096aa:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80096ae:	893b      	ldrh	r3, [r7, #8]
 80096b0:	7af9      	ldrb	r1, [r7, #11]
 80096b2:	687a      	ldr	r2, [r7, #4]
 80096b4:	f7f9 fcbe 	bl	8003034 <HAL_PCD_EP_Transmit>
 80096b8:	4603      	mov	r3, r0
 80096ba:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80096bc:	7dfb      	ldrb	r3, [r7, #23]
 80096be:	4618      	mov	r0, r3
 80096c0:	f000 f862 	bl	8009788 <USBD_Get_USB_Status>
 80096c4:	4603      	mov	r3, r0
 80096c6:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80096c8:	7dbb      	ldrb	r3, [r7, #22]
}
 80096ca:	4618      	mov	r0, r3
 80096cc:	3718      	adds	r7, #24
 80096ce:	46bd      	mov	sp, r7
 80096d0:	bd80      	pop	{r7, pc}

080096d2 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 80096d2:	b580      	push	{r7, lr}
 80096d4:	b086      	sub	sp, #24
 80096d6:	af00      	add	r7, sp, #0
 80096d8:	60f8      	str	r0, [r7, #12]
 80096da:	607a      	str	r2, [r7, #4]
 80096dc:	461a      	mov	r2, r3
 80096de:	460b      	mov	r3, r1
 80096e0:	72fb      	strb	r3, [r7, #11]
 80096e2:	4613      	mov	r3, r2
 80096e4:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80096e6:	2300      	movs	r3, #0
 80096e8:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80096ea:	2300      	movs	r3, #0
 80096ec:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80096ee:	68fb      	ldr	r3, [r7, #12]
 80096f0:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80096f4:	893b      	ldrh	r3, [r7, #8]
 80096f6:	7af9      	ldrb	r1, [r7, #11]
 80096f8:	687a      	ldr	r2, [r7, #4]
 80096fa:	f7f9 fc46 	bl	8002f8a <HAL_PCD_EP_Receive>
 80096fe:	4603      	mov	r3, r0
 8009700:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009702:	7dfb      	ldrb	r3, [r7, #23]
 8009704:	4618      	mov	r0, r3
 8009706:	f000 f83f 	bl	8009788 <USBD_Get_USB_Status>
 800970a:	4603      	mov	r3, r0
 800970c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800970e:	7dbb      	ldrb	r3, [r7, #22]
}
 8009710:	4618      	mov	r0, r3
 8009712:	3718      	adds	r7, #24
 8009714:	46bd      	mov	sp, r7
 8009716:	bd80      	pop	{r7, pc}

08009718 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009718:	b580      	push	{r7, lr}
 800971a:	b082      	sub	sp, #8
 800971c:	af00      	add	r7, sp, #0
 800971e:	6078      	str	r0, [r7, #4]
 8009720:	460b      	mov	r3, r1
 8009722:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800972a:	78fa      	ldrb	r2, [r7, #3]
 800972c:	4611      	mov	r1, r2
 800972e:	4618      	mov	r0, r3
 8009730:	f7f9 fc68 	bl	8003004 <HAL_PCD_EP_GetRxCount>
 8009734:	4603      	mov	r3, r0
}
 8009736:	4618      	mov	r0, r3
 8009738:	3708      	adds	r7, #8
 800973a:	46bd      	mov	sp, r7
 800973c:	bd80      	pop	{r7, pc}
	...

08009740 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8009740:	b480      	push	{r7}
 8009742:	b083      	sub	sp, #12
 8009744:	af00      	add	r7, sp, #0
 8009746:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8009748:	4b03      	ldr	r3, [pc, #12]	; (8009758 <USBD_static_malloc+0x18>)
}
 800974a:	4618      	mov	r0, r3
 800974c:	370c      	adds	r7, #12
 800974e:	46bd      	mov	sp, r7
 8009750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009754:	4770      	bx	lr
 8009756:	bf00      	nop
 8009758:	20000370 	.word	0x20000370

0800975c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800975c:	b480      	push	{r7}
 800975e:	b083      	sub	sp, #12
 8009760:	af00      	add	r7, sp, #0
 8009762:	6078      	str	r0, [r7, #4]

}
 8009764:	bf00      	nop
 8009766:	370c      	adds	r7, #12
 8009768:	46bd      	mov	sp, r7
 800976a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800976e:	4770      	bx	lr

08009770 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009770:	b480      	push	{r7}
 8009772:	b083      	sub	sp, #12
 8009774:	af00      	add	r7, sp, #0
 8009776:	6078      	str	r0, [r7, #4]
 8009778:	460b      	mov	r3, r1
 800977a:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 800977c:	bf00      	nop
 800977e:	370c      	adds	r7, #12
 8009780:	46bd      	mov	sp, r7
 8009782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009786:	4770      	bx	lr

08009788 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8009788:	b480      	push	{r7}
 800978a:	b085      	sub	sp, #20
 800978c:	af00      	add	r7, sp, #0
 800978e:	4603      	mov	r3, r0
 8009790:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009792:	2300      	movs	r3, #0
 8009794:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8009796:	79fb      	ldrb	r3, [r7, #7]
 8009798:	2b03      	cmp	r3, #3
 800979a:	d817      	bhi.n	80097cc <USBD_Get_USB_Status+0x44>
 800979c:	a201      	add	r2, pc, #4	; (adr r2, 80097a4 <USBD_Get_USB_Status+0x1c>)
 800979e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80097a2:	bf00      	nop
 80097a4:	080097b5 	.word	0x080097b5
 80097a8:	080097bb 	.word	0x080097bb
 80097ac:	080097c1 	.word	0x080097c1
 80097b0:	080097c7 	.word	0x080097c7
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80097b4:	2300      	movs	r3, #0
 80097b6:	73fb      	strb	r3, [r7, #15]
    break;
 80097b8:	e00b      	b.n	80097d2 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80097ba:	2302      	movs	r3, #2
 80097bc:	73fb      	strb	r3, [r7, #15]
    break;
 80097be:	e008      	b.n	80097d2 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80097c0:	2301      	movs	r3, #1
 80097c2:	73fb      	strb	r3, [r7, #15]
    break;
 80097c4:	e005      	b.n	80097d2 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80097c6:	2302      	movs	r3, #2
 80097c8:	73fb      	strb	r3, [r7, #15]
    break;
 80097ca:	e002      	b.n	80097d2 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80097cc:	2302      	movs	r3, #2
 80097ce:	73fb      	strb	r3, [r7, #15]
    break;
 80097d0:	bf00      	nop
  }
  return usb_status;
 80097d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80097d4:	4618      	mov	r0, r3
 80097d6:	3714      	adds	r7, #20
 80097d8:	46bd      	mov	sp, r7
 80097da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097de:	4770      	bx	lr

080097e0 <__errno>:
 80097e0:	4b01      	ldr	r3, [pc, #4]	; (80097e8 <__errno+0x8>)
 80097e2:	6818      	ldr	r0, [r3, #0]
 80097e4:	4770      	bx	lr
 80097e6:	bf00      	nop
 80097e8:	2000017c 	.word	0x2000017c

080097ec <__libc_init_array>:
 80097ec:	b570      	push	{r4, r5, r6, lr}
 80097ee:	4e0d      	ldr	r6, [pc, #52]	; (8009824 <__libc_init_array+0x38>)
 80097f0:	4c0d      	ldr	r4, [pc, #52]	; (8009828 <__libc_init_array+0x3c>)
 80097f2:	1ba4      	subs	r4, r4, r6
 80097f4:	10a4      	asrs	r4, r4, #2
 80097f6:	2500      	movs	r5, #0
 80097f8:	42a5      	cmp	r5, r4
 80097fa:	d109      	bne.n	8009810 <__libc_init_array+0x24>
 80097fc:	4e0b      	ldr	r6, [pc, #44]	; (800982c <__libc_init_array+0x40>)
 80097fe:	4c0c      	ldr	r4, [pc, #48]	; (8009830 <__libc_init_array+0x44>)
 8009800:	f002 fb00 	bl	800be04 <_init>
 8009804:	1ba4      	subs	r4, r4, r6
 8009806:	10a4      	asrs	r4, r4, #2
 8009808:	2500      	movs	r5, #0
 800980a:	42a5      	cmp	r5, r4
 800980c:	d105      	bne.n	800981a <__libc_init_array+0x2e>
 800980e:	bd70      	pop	{r4, r5, r6, pc}
 8009810:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8009814:	4798      	blx	r3
 8009816:	3501      	adds	r5, #1
 8009818:	e7ee      	b.n	80097f8 <__libc_init_array+0xc>
 800981a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800981e:	4798      	blx	r3
 8009820:	3501      	adds	r5, #1
 8009822:	e7f2      	b.n	800980a <__libc_init_array+0x1e>
 8009824:	0800c140 	.word	0x0800c140
 8009828:	0800c140 	.word	0x0800c140
 800982c:	0800c140 	.word	0x0800c140
 8009830:	0800c144 	.word	0x0800c144

08009834 <malloc>:
 8009834:	4b02      	ldr	r3, [pc, #8]	; (8009840 <malloc+0xc>)
 8009836:	4601      	mov	r1, r0
 8009838:	6818      	ldr	r0, [r3, #0]
 800983a:	f000 b859 	b.w	80098f0 <_malloc_r>
 800983e:	bf00      	nop
 8009840:	2000017c 	.word	0x2000017c

08009844 <memset>:
 8009844:	4402      	add	r2, r0
 8009846:	4603      	mov	r3, r0
 8009848:	4293      	cmp	r3, r2
 800984a:	d100      	bne.n	800984e <memset+0xa>
 800984c:	4770      	bx	lr
 800984e:	f803 1b01 	strb.w	r1, [r3], #1
 8009852:	e7f9      	b.n	8009848 <memset+0x4>

08009854 <_free_r>:
 8009854:	b538      	push	{r3, r4, r5, lr}
 8009856:	4605      	mov	r5, r0
 8009858:	2900      	cmp	r1, #0
 800985a:	d045      	beq.n	80098e8 <_free_r+0x94>
 800985c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009860:	1f0c      	subs	r4, r1, #4
 8009862:	2b00      	cmp	r3, #0
 8009864:	bfb8      	it	lt
 8009866:	18e4      	addlt	r4, r4, r3
 8009868:	f001 fb9b 	bl	800afa2 <__malloc_lock>
 800986c:	4a1f      	ldr	r2, [pc, #124]	; (80098ec <_free_r+0x98>)
 800986e:	6813      	ldr	r3, [r2, #0]
 8009870:	4610      	mov	r0, r2
 8009872:	b933      	cbnz	r3, 8009882 <_free_r+0x2e>
 8009874:	6063      	str	r3, [r4, #4]
 8009876:	6014      	str	r4, [r2, #0]
 8009878:	4628      	mov	r0, r5
 800987a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800987e:	f001 bb91 	b.w	800afa4 <__malloc_unlock>
 8009882:	42a3      	cmp	r3, r4
 8009884:	d90c      	bls.n	80098a0 <_free_r+0x4c>
 8009886:	6821      	ldr	r1, [r4, #0]
 8009888:	1862      	adds	r2, r4, r1
 800988a:	4293      	cmp	r3, r2
 800988c:	bf04      	itt	eq
 800988e:	681a      	ldreq	r2, [r3, #0]
 8009890:	685b      	ldreq	r3, [r3, #4]
 8009892:	6063      	str	r3, [r4, #4]
 8009894:	bf04      	itt	eq
 8009896:	1852      	addeq	r2, r2, r1
 8009898:	6022      	streq	r2, [r4, #0]
 800989a:	6004      	str	r4, [r0, #0]
 800989c:	e7ec      	b.n	8009878 <_free_r+0x24>
 800989e:	4613      	mov	r3, r2
 80098a0:	685a      	ldr	r2, [r3, #4]
 80098a2:	b10a      	cbz	r2, 80098a8 <_free_r+0x54>
 80098a4:	42a2      	cmp	r2, r4
 80098a6:	d9fa      	bls.n	800989e <_free_r+0x4a>
 80098a8:	6819      	ldr	r1, [r3, #0]
 80098aa:	1858      	adds	r0, r3, r1
 80098ac:	42a0      	cmp	r0, r4
 80098ae:	d10b      	bne.n	80098c8 <_free_r+0x74>
 80098b0:	6820      	ldr	r0, [r4, #0]
 80098b2:	4401      	add	r1, r0
 80098b4:	1858      	adds	r0, r3, r1
 80098b6:	4282      	cmp	r2, r0
 80098b8:	6019      	str	r1, [r3, #0]
 80098ba:	d1dd      	bne.n	8009878 <_free_r+0x24>
 80098bc:	6810      	ldr	r0, [r2, #0]
 80098be:	6852      	ldr	r2, [r2, #4]
 80098c0:	605a      	str	r2, [r3, #4]
 80098c2:	4401      	add	r1, r0
 80098c4:	6019      	str	r1, [r3, #0]
 80098c6:	e7d7      	b.n	8009878 <_free_r+0x24>
 80098c8:	d902      	bls.n	80098d0 <_free_r+0x7c>
 80098ca:	230c      	movs	r3, #12
 80098cc:	602b      	str	r3, [r5, #0]
 80098ce:	e7d3      	b.n	8009878 <_free_r+0x24>
 80098d0:	6820      	ldr	r0, [r4, #0]
 80098d2:	1821      	adds	r1, r4, r0
 80098d4:	428a      	cmp	r2, r1
 80098d6:	bf04      	itt	eq
 80098d8:	6811      	ldreq	r1, [r2, #0]
 80098da:	6852      	ldreq	r2, [r2, #4]
 80098dc:	6062      	str	r2, [r4, #4]
 80098de:	bf04      	itt	eq
 80098e0:	1809      	addeq	r1, r1, r0
 80098e2:	6021      	streq	r1, [r4, #0]
 80098e4:	605c      	str	r4, [r3, #4]
 80098e6:	e7c7      	b.n	8009878 <_free_r+0x24>
 80098e8:	bd38      	pop	{r3, r4, r5, pc}
 80098ea:	bf00      	nop
 80098ec:	20000590 	.word	0x20000590

080098f0 <_malloc_r>:
 80098f0:	b570      	push	{r4, r5, r6, lr}
 80098f2:	1ccd      	adds	r5, r1, #3
 80098f4:	f025 0503 	bic.w	r5, r5, #3
 80098f8:	3508      	adds	r5, #8
 80098fa:	2d0c      	cmp	r5, #12
 80098fc:	bf38      	it	cc
 80098fe:	250c      	movcc	r5, #12
 8009900:	2d00      	cmp	r5, #0
 8009902:	4606      	mov	r6, r0
 8009904:	db01      	blt.n	800990a <_malloc_r+0x1a>
 8009906:	42a9      	cmp	r1, r5
 8009908:	d903      	bls.n	8009912 <_malloc_r+0x22>
 800990a:	230c      	movs	r3, #12
 800990c:	6033      	str	r3, [r6, #0]
 800990e:	2000      	movs	r0, #0
 8009910:	bd70      	pop	{r4, r5, r6, pc}
 8009912:	f001 fb46 	bl	800afa2 <__malloc_lock>
 8009916:	4a21      	ldr	r2, [pc, #132]	; (800999c <_malloc_r+0xac>)
 8009918:	6814      	ldr	r4, [r2, #0]
 800991a:	4621      	mov	r1, r4
 800991c:	b991      	cbnz	r1, 8009944 <_malloc_r+0x54>
 800991e:	4c20      	ldr	r4, [pc, #128]	; (80099a0 <_malloc_r+0xb0>)
 8009920:	6823      	ldr	r3, [r4, #0]
 8009922:	b91b      	cbnz	r3, 800992c <_malloc_r+0x3c>
 8009924:	4630      	mov	r0, r6
 8009926:	f000 fc99 	bl	800a25c <_sbrk_r>
 800992a:	6020      	str	r0, [r4, #0]
 800992c:	4629      	mov	r1, r5
 800992e:	4630      	mov	r0, r6
 8009930:	f000 fc94 	bl	800a25c <_sbrk_r>
 8009934:	1c43      	adds	r3, r0, #1
 8009936:	d124      	bne.n	8009982 <_malloc_r+0x92>
 8009938:	230c      	movs	r3, #12
 800993a:	6033      	str	r3, [r6, #0]
 800993c:	4630      	mov	r0, r6
 800993e:	f001 fb31 	bl	800afa4 <__malloc_unlock>
 8009942:	e7e4      	b.n	800990e <_malloc_r+0x1e>
 8009944:	680b      	ldr	r3, [r1, #0]
 8009946:	1b5b      	subs	r3, r3, r5
 8009948:	d418      	bmi.n	800997c <_malloc_r+0x8c>
 800994a:	2b0b      	cmp	r3, #11
 800994c:	d90f      	bls.n	800996e <_malloc_r+0x7e>
 800994e:	600b      	str	r3, [r1, #0]
 8009950:	50cd      	str	r5, [r1, r3]
 8009952:	18cc      	adds	r4, r1, r3
 8009954:	4630      	mov	r0, r6
 8009956:	f001 fb25 	bl	800afa4 <__malloc_unlock>
 800995a:	f104 000b 	add.w	r0, r4, #11
 800995e:	1d23      	adds	r3, r4, #4
 8009960:	f020 0007 	bic.w	r0, r0, #7
 8009964:	1ac3      	subs	r3, r0, r3
 8009966:	d0d3      	beq.n	8009910 <_malloc_r+0x20>
 8009968:	425a      	negs	r2, r3
 800996a:	50e2      	str	r2, [r4, r3]
 800996c:	e7d0      	b.n	8009910 <_malloc_r+0x20>
 800996e:	428c      	cmp	r4, r1
 8009970:	684b      	ldr	r3, [r1, #4]
 8009972:	bf16      	itet	ne
 8009974:	6063      	strne	r3, [r4, #4]
 8009976:	6013      	streq	r3, [r2, #0]
 8009978:	460c      	movne	r4, r1
 800997a:	e7eb      	b.n	8009954 <_malloc_r+0x64>
 800997c:	460c      	mov	r4, r1
 800997e:	6849      	ldr	r1, [r1, #4]
 8009980:	e7cc      	b.n	800991c <_malloc_r+0x2c>
 8009982:	1cc4      	adds	r4, r0, #3
 8009984:	f024 0403 	bic.w	r4, r4, #3
 8009988:	42a0      	cmp	r0, r4
 800998a:	d005      	beq.n	8009998 <_malloc_r+0xa8>
 800998c:	1a21      	subs	r1, r4, r0
 800998e:	4630      	mov	r0, r6
 8009990:	f000 fc64 	bl	800a25c <_sbrk_r>
 8009994:	3001      	adds	r0, #1
 8009996:	d0cf      	beq.n	8009938 <_malloc_r+0x48>
 8009998:	6025      	str	r5, [r4, #0]
 800999a:	e7db      	b.n	8009954 <_malloc_r+0x64>
 800999c:	20000590 	.word	0x20000590
 80099a0:	20000594 	.word	0x20000594

080099a4 <__cvt>:
 80099a4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80099a8:	ec55 4b10 	vmov	r4, r5, d0
 80099ac:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 80099ae:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80099b2:	2d00      	cmp	r5, #0
 80099b4:	460e      	mov	r6, r1
 80099b6:	4691      	mov	r9, r2
 80099b8:	4619      	mov	r1, r3
 80099ba:	bfb8      	it	lt
 80099bc:	4622      	movlt	r2, r4
 80099be:	462b      	mov	r3, r5
 80099c0:	f027 0720 	bic.w	r7, r7, #32
 80099c4:	bfbb      	ittet	lt
 80099c6:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80099ca:	461d      	movlt	r5, r3
 80099cc:	2300      	movge	r3, #0
 80099ce:	232d      	movlt	r3, #45	; 0x2d
 80099d0:	bfb8      	it	lt
 80099d2:	4614      	movlt	r4, r2
 80099d4:	2f46      	cmp	r7, #70	; 0x46
 80099d6:	700b      	strb	r3, [r1, #0]
 80099d8:	d004      	beq.n	80099e4 <__cvt+0x40>
 80099da:	2f45      	cmp	r7, #69	; 0x45
 80099dc:	d100      	bne.n	80099e0 <__cvt+0x3c>
 80099de:	3601      	adds	r6, #1
 80099e0:	2102      	movs	r1, #2
 80099e2:	e000      	b.n	80099e6 <__cvt+0x42>
 80099e4:	2103      	movs	r1, #3
 80099e6:	ab03      	add	r3, sp, #12
 80099e8:	9301      	str	r3, [sp, #4]
 80099ea:	ab02      	add	r3, sp, #8
 80099ec:	9300      	str	r3, [sp, #0]
 80099ee:	4632      	mov	r2, r6
 80099f0:	4653      	mov	r3, sl
 80099f2:	ec45 4b10 	vmov	d0, r4, r5
 80099f6:	f000 fd03 	bl	800a400 <_dtoa_r>
 80099fa:	2f47      	cmp	r7, #71	; 0x47
 80099fc:	4680      	mov	r8, r0
 80099fe:	d102      	bne.n	8009a06 <__cvt+0x62>
 8009a00:	f019 0f01 	tst.w	r9, #1
 8009a04:	d026      	beq.n	8009a54 <__cvt+0xb0>
 8009a06:	2f46      	cmp	r7, #70	; 0x46
 8009a08:	eb08 0906 	add.w	r9, r8, r6
 8009a0c:	d111      	bne.n	8009a32 <__cvt+0x8e>
 8009a0e:	f898 3000 	ldrb.w	r3, [r8]
 8009a12:	2b30      	cmp	r3, #48	; 0x30
 8009a14:	d10a      	bne.n	8009a2c <__cvt+0x88>
 8009a16:	2200      	movs	r2, #0
 8009a18:	2300      	movs	r3, #0
 8009a1a:	4620      	mov	r0, r4
 8009a1c:	4629      	mov	r1, r5
 8009a1e:	f7f7 f853 	bl	8000ac8 <__aeabi_dcmpeq>
 8009a22:	b918      	cbnz	r0, 8009a2c <__cvt+0x88>
 8009a24:	f1c6 0601 	rsb	r6, r6, #1
 8009a28:	f8ca 6000 	str.w	r6, [sl]
 8009a2c:	f8da 3000 	ldr.w	r3, [sl]
 8009a30:	4499      	add	r9, r3
 8009a32:	2200      	movs	r2, #0
 8009a34:	2300      	movs	r3, #0
 8009a36:	4620      	mov	r0, r4
 8009a38:	4629      	mov	r1, r5
 8009a3a:	f7f7 f845 	bl	8000ac8 <__aeabi_dcmpeq>
 8009a3e:	b938      	cbnz	r0, 8009a50 <__cvt+0xac>
 8009a40:	2230      	movs	r2, #48	; 0x30
 8009a42:	9b03      	ldr	r3, [sp, #12]
 8009a44:	454b      	cmp	r3, r9
 8009a46:	d205      	bcs.n	8009a54 <__cvt+0xb0>
 8009a48:	1c59      	adds	r1, r3, #1
 8009a4a:	9103      	str	r1, [sp, #12]
 8009a4c:	701a      	strb	r2, [r3, #0]
 8009a4e:	e7f8      	b.n	8009a42 <__cvt+0x9e>
 8009a50:	f8cd 900c 	str.w	r9, [sp, #12]
 8009a54:	9b03      	ldr	r3, [sp, #12]
 8009a56:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009a58:	eba3 0308 	sub.w	r3, r3, r8
 8009a5c:	4640      	mov	r0, r8
 8009a5e:	6013      	str	r3, [r2, #0]
 8009a60:	b004      	add	sp, #16
 8009a62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08009a66 <__exponent>:
 8009a66:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009a68:	2900      	cmp	r1, #0
 8009a6a:	4604      	mov	r4, r0
 8009a6c:	bfba      	itte	lt
 8009a6e:	4249      	neglt	r1, r1
 8009a70:	232d      	movlt	r3, #45	; 0x2d
 8009a72:	232b      	movge	r3, #43	; 0x2b
 8009a74:	2909      	cmp	r1, #9
 8009a76:	f804 2b02 	strb.w	r2, [r4], #2
 8009a7a:	7043      	strb	r3, [r0, #1]
 8009a7c:	dd20      	ble.n	8009ac0 <__exponent+0x5a>
 8009a7e:	f10d 0307 	add.w	r3, sp, #7
 8009a82:	461f      	mov	r7, r3
 8009a84:	260a      	movs	r6, #10
 8009a86:	fb91 f5f6 	sdiv	r5, r1, r6
 8009a8a:	fb06 1115 	mls	r1, r6, r5, r1
 8009a8e:	3130      	adds	r1, #48	; 0x30
 8009a90:	2d09      	cmp	r5, #9
 8009a92:	f803 1c01 	strb.w	r1, [r3, #-1]
 8009a96:	f103 32ff 	add.w	r2, r3, #4294967295
 8009a9a:	4629      	mov	r1, r5
 8009a9c:	dc09      	bgt.n	8009ab2 <__exponent+0x4c>
 8009a9e:	3130      	adds	r1, #48	; 0x30
 8009aa0:	3b02      	subs	r3, #2
 8009aa2:	f802 1c01 	strb.w	r1, [r2, #-1]
 8009aa6:	42bb      	cmp	r3, r7
 8009aa8:	4622      	mov	r2, r4
 8009aaa:	d304      	bcc.n	8009ab6 <__exponent+0x50>
 8009aac:	1a10      	subs	r0, r2, r0
 8009aae:	b003      	add	sp, #12
 8009ab0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009ab2:	4613      	mov	r3, r2
 8009ab4:	e7e7      	b.n	8009a86 <__exponent+0x20>
 8009ab6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009aba:	f804 2b01 	strb.w	r2, [r4], #1
 8009abe:	e7f2      	b.n	8009aa6 <__exponent+0x40>
 8009ac0:	2330      	movs	r3, #48	; 0x30
 8009ac2:	4419      	add	r1, r3
 8009ac4:	7083      	strb	r3, [r0, #2]
 8009ac6:	1d02      	adds	r2, r0, #4
 8009ac8:	70c1      	strb	r1, [r0, #3]
 8009aca:	e7ef      	b.n	8009aac <__exponent+0x46>

08009acc <_printf_float>:
 8009acc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ad0:	b08d      	sub	sp, #52	; 0x34
 8009ad2:	460c      	mov	r4, r1
 8009ad4:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8009ad8:	4616      	mov	r6, r2
 8009ada:	461f      	mov	r7, r3
 8009adc:	4605      	mov	r5, r0
 8009ade:	f001 fa47 	bl	800af70 <_localeconv_r>
 8009ae2:	6803      	ldr	r3, [r0, #0]
 8009ae4:	9304      	str	r3, [sp, #16]
 8009ae6:	4618      	mov	r0, r3
 8009ae8:	f7f6 fb72 	bl	80001d0 <strlen>
 8009aec:	2300      	movs	r3, #0
 8009aee:	930a      	str	r3, [sp, #40]	; 0x28
 8009af0:	f8d8 3000 	ldr.w	r3, [r8]
 8009af4:	9005      	str	r0, [sp, #20]
 8009af6:	3307      	adds	r3, #7
 8009af8:	f023 0307 	bic.w	r3, r3, #7
 8009afc:	f103 0208 	add.w	r2, r3, #8
 8009b00:	f894 a018 	ldrb.w	sl, [r4, #24]
 8009b04:	f8d4 b000 	ldr.w	fp, [r4]
 8009b08:	f8c8 2000 	str.w	r2, [r8]
 8009b0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b10:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8009b14:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8009b18:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8009b1c:	9307      	str	r3, [sp, #28]
 8009b1e:	f8cd 8018 	str.w	r8, [sp, #24]
 8009b22:	f04f 32ff 	mov.w	r2, #4294967295
 8009b26:	4ba7      	ldr	r3, [pc, #668]	; (8009dc4 <_printf_float+0x2f8>)
 8009b28:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009b2c:	f7f6 fffe 	bl	8000b2c <__aeabi_dcmpun>
 8009b30:	bb70      	cbnz	r0, 8009b90 <_printf_float+0xc4>
 8009b32:	f04f 32ff 	mov.w	r2, #4294967295
 8009b36:	4ba3      	ldr	r3, [pc, #652]	; (8009dc4 <_printf_float+0x2f8>)
 8009b38:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009b3c:	f7f6 ffd8 	bl	8000af0 <__aeabi_dcmple>
 8009b40:	bb30      	cbnz	r0, 8009b90 <_printf_float+0xc4>
 8009b42:	2200      	movs	r2, #0
 8009b44:	2300      	movs	r3, #0
 8009b46:	4640      	mov	r0, r8
 8009b48:	4649      	mov	r1, r9
 8009b4a:	f7f6 ffc7 	bl	8000adc <__aeabi_dcmplt>
 8009b4e:	b110      	cbz	r0, 8009b56 <_printf_float+0x8a>
 8009b50:	232d      	movs	r3, #45	; 0x2d
 8009b52:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009b56:	4a9c      	ldr	r2, [pc, #624]	; (8009dc8 <_printf_float+0x2fc>)
 8009b58:	4b9c      	ldr	r3, [pc, #624]	; (8009dcc <_printf_float+0x300>)
 8009b5a:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8009b5e:	bf8c      	ite	hi
 8009b60:	4690      	movhi	r8, r2
 8009b62:	4698      	movls	r8, r3
 8009b64:	2303      	movs	r3, #3
 8009b66:	f02b 0204 	bic.w	r2, fp, #4
 8009b6a:	6123      	str	r3, [r4, #16]
 8009b6c:	6022      	str	r2, [r4, #0]
 8009b6e:	f04f 0900 	mov.w	r9, #0
 8009b72:	9700      	str	r7, [sp, #0]
 8009b74:	4633      	mov	r3, r6
 8009b76:	aa0b      	add	r2, sp, #44	; 0x2c
 8009b78:	4621      	mov	r1, r4
 8009b7a:	4628      	mov	r0, r5
 8009b7c:	f000 f9e6 	bl	8009f4c <_printf_common>
 8009b80:	3001      	adds	r0, #1
 8009b82:	f040 808d 	bne.w	8009ca0 <_printf_float+0x1d4>
 8009b86:	f04f 30ff 	mov.w	r0, #4294967295
 8009b8a:	b00d      	add	sp, #52	; 0x34
 8009b8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009b90:	4642      	mov	r2, r8
 8009b92:	464b      	mov	r3, r9
 8009b94:	4640      	mov	r0, r8
 8009b96:	4649      	mov	r1, r9
 8009b98:	f7f6 ffc8 	bl	8000b2c <__aeabi_dcmpun>
 8009b9c:	b110      	cbz	r0, 8009ba4 <_printf_float+0xd8>
 8009b9e:	4a8c      	ldr	r2, [pc, #560]	; (8009dd0 <_printf_float+0x304>)
 8009ba0:	4b8c      	ldr	r3, [pc, #560]	; (8009dd4 <_printf_float+0x308>)
 8009ba2:	e7da      	b.n	8009b5a <_printf_float+0x8e>
 8009ba4:	6861      	ldr	r1, [r4, #4]
 8009ba6:	1c4b      	adds	r3, r1, #1
 8009ba8:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 8009bac:	a80a      	add	r0, sp, #40	; 0x28
 8009bae:	d13e      	bne.n	8009c2e <_printf_float+0x162>
 8009bb0:	2306      	movs	r3, #6
 8009bb2:	6063      	str	r3, [r4, #4]
 8009bb4:	2300      	movs	r3, #0
 8009bb6:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8009bba:	ab09      	add	r3, sp, #36	; 0x24
 8009bbc:	9300      	str	r3, [sp, #0]
 8009bbe:	ec49 8b10 	vmov	d0, r8, r9
 8009bc2:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8009bc6:	6022      	str	r2, [r4, #0]
 8009bc8:	f8cd a004 	str.w	sl, [sp, #4]
 8009bcc:	6861      	ldr	r1, [r4, #4]
 8009bce:	4628      	mov	r0, r5
 8009bd0:	f7ff fee8 	bl	80099a4 <__cvt>
 8009bd4:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 8009bd8:	2b47      	cmp	r3, #71	; 0x47
 8009bda:	4680      	mov	r8, r0
 8009bdc:	d109      	bne.n	8009bf2 <_printf_float+0x126>
 8009bde:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009be0:	1cd8      	adds	r0, r3, #3
 8009be2:	db02      	blt.n	8009bea <_printf_float+0x11e>
 8009be4:	6862      	ldr	r2, [r4, #4]
 8009be6:	4293      	cmp	r3, r2
 8009be8:	dd47      	ble.n	8009c7a <_printf_float+0x1ae>
 8009bea:	f1aa 0a02 	sub.w	sl, sl, #2
 8009bee:	fa5f fa8a 	uxtb.w	sl, sl
 8009bf2:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8009bf6:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009bf8:	d824      	bhi.n	8009c44 <_printf_float+0x178>
 8009bfa:	3901      	subs	r1, #1
 8009bfc:	4652      	mov	r2, sl
 8009bfe:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8009c02:	9109      	str	r1, [sp, #36]	; 0x24
 8009c04:	f7ff ff2f 	bl	8009a66 <__exponent>
 8009c08:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009c0a:	1813      	adds	r3, r2, r0
 8009c0c:	2a01      	cmp	r2, #1
 8009c0e:	4681      	mov	r9, r0
 8009c10:	6123      	str	r3, [r4, #16]
 8009c12:	dc02      	bgt.n	8009c1a <_printf_float+0x14e>
 8009c14:	6822      	ldr	r2, [r4, #0]
 8009c16:	07d1      	lsls	r1, r2, #31
 8009c18:	d501      	bpl.n	8009c1e <_printf_float+0x152>
 8009c1a:	3301      	adds	r3, #1
 8009c1c:	6123      	str	r3, [r4, #16]
 8009c1e:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8009c22:	2b00      	cmp	r3, #0
 8009c24:	d0a5      	beq.n	8009b72 <_printf_float+0xa6>
 8009c26:	232d      	movs	r3, #45	; 0x2d
 8009c28:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009c2c:	e7a1      	b.n	8009b72 <_printf_float+0xa6>
 8009c2e:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 8009c32:	f000 8177 	beq.w	8009f24 <_printf_float+0x458>
 8009c36:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8009c3a:	d1bb      	bne.n	8009bb4 <_printf_float+0xe8>
 8009c3c:	2900      	cmp	r1, #0
 8009c3e:	d1b9      	bne.n	8009bb4 <_printf_float+0xe8>
 8009c40:	2301      	movs	r3, #1
 8009c42:	e7b6      	b.n	8009bb2 <_printf_float+0xe6>
 8009c44:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 8009c48:	d119      	bne.n	8009c7e <_printf_float+0x1b2>
 8009c4a:	2900      	cmp	r1, #0
 8009c4c:	6863      	ldr	r3, [r4, #4]
 8009c4e:	dd0c      	ble.n	8009c6a <_printf_float+0x19e>
 8009c50:	6121      	str	r1, [r4, #16]
 8009c52:	b913      	cbnz	r3, 8009c5a <_printf_float+0x18e>
 8009c54:	6822      	ldr	r2, [r4, #0]
 8009c56:	07d2      	lsls	r2, r2, #31
 8009c58:	d502      	bpl.n	8009c60 <_printf_float+0x194>
 8009c5a:	3301      	adds	r3, #1
 8009c5c:	440b      	add	r3, r1
 8009c5e:	6123      	str	r3, [r4, #16]
 8009c60:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009c62:	65a3      	str	r3, [r4, #88]	; 0x58
 8009c64:	f04f 0900 	mov.w	r9, #0
 8009c68:	e7d9      	b.n	8009c1e <_printf_float+0x152>
 8009c6a:	b913      	cbnz	r3, 8009c72 <_printf_float+0x1a6>
 8009c6c:	6822      	ldr	r2, [r4, #0]
 8009c6e:	07d0      	lsls	r0, r2, #31
 8009c70:	d501      	bpl.n	8009c76 <_printf_float+0x1aa>
 8009c72:	3302      	adds	r3, #2
 8009c74:	e7f3      	b.n	8009c5e <_printf_float+0x192>
 8009c76:	2301      	movs	r3, #1
 8009c78:	e7f1      	b.n	8009c5e <_printf_float+0x192>
 8009c7a:	f04f 0a67 	mov.w	sl, #103	; 0x67
 8009c7e:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8009c82:	4293      	cmp	r3, r2
 8009c84:	db05      	blt.n	8009c92 <_printf_float+0x1c6>
 8009c86:	6822      	ldr	r2, [r4, #0]
 8009c88:	6123      	str	r3, [r4, #16]
 8009c8a:	07d1      	lsls	r1, r2, #31
 8009c8c:	d5e8      	bpl.n	8009c60 <_printf_float+0x194>
 8009c8e:	3301      	adds	r3, #1
 8009c90:	e7e5      	b.n	8009c5e <_printf_float+0x192>
 8009c92:	2b00      	cmp	r3, #0
 8009c94:	bfd4      	ite	le
 8009c96:	f1c3 0302 	rsble	r3, r3, #2
 8009c9a:	2301      	movgt	r3, #1
 8009c9c:	4413      	add	r3, r2
 8009c9e:	e7de      	b.n	8009c5e <_printf_float+0x192>
 8009ca0:	6823      	ldr	r3, [r4, #0]
 8009ca2:	055a      	lsls	r2, r3, #21
 8009ca4:	d407      	bmi.n	8009cb6 <_printf_float+0x1ea>
 8009ca6:	6923      	ldr	r3, [r4, #16]
 8009ca8:	4642      	mov	r2, r8
 8009caa:	4631      	mov	r1, r6
 8009cac:	4628      	mov	r0, r5
 8009cae:	47b8      	blx	r7
 8009cb0:	3001      	adds	r0, #1
 8009cb2:	d12b      	bne.n	8009d0c <_printf_float+0x240>
 8009cb4:	e767      	b.n	8009b86 <_printf_float+0xba>
 8009cb6:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8009cba:	f240 80dc 	bls.w	8009e76 <_printf_float+0x3aa>
 8009cbe:	2200      	movs	r2, #0
 8009cc0:	2300      	movs	r3, #0
 8009cc2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009cc6:	f7f6 feff 	bl	8000ac8 <__aeabi_dcmpeq>
 8009cca:	2800      	cmp	r0, #0
 8009ccc:	d033      	beq.n	8009d36 <_printf_float+0x26a>
 8009cce:	2301      	movs	r3, #1
 8009cd0:	4a41      	ldr	r2, [pc, #260]	; (8009dd8 <_printf_float+0x30c>)
 8009cd2:	4631      	mov	r1, r6
 8009cd4:	4628      	mov	r0, r5
 8009cd6:	47b8      	blx	r7
 8009cd8:	3001      	adds	r0, #1
 8009cda:	f43f af54 	beq.w	8009b86 <_printf_float+0xba>
 8009cde:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009ce2:	429a      	cmp	r2, r3
 8009ce4:	db02      	blt.n	8009cec <_printf_float+0x220>
 8009ce6:	6823      	ldr	r3, [r4, #0]
 8009ce8:	07d8      	lsls	r0, r3, #31
 8009cea:	d50f      	bpl.n	8009d0c <_printf_float+0x240>
 8009cec:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009cf0:	4631      	mov	r1, r6
 8009cf2:	4628      	mov	r0, r5
 8009cf4:	47b8      	blx	r7
 8009cf6:	3001      	adds	r0, #1
 8009cf8:	f43f af45 	beq.w	8009b86 <_printf_float+0xba>
 8009cfc:	f04f 0800 	mov.w	r8, #0
 8009d00:	f104 091a 	add.w	r9, r4, #26
 8009d04:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009d06:	3b01      	subs	r3, #1
 8009d08:	4543      	cmp	r3, r8
 8009d0a:	dc09      	bgt.n	8009d20 <_printf_float+0x254>
 8009d0c:	6823      	ldr	r3, [r4, #0]
 8009d0e:	079b      	lsls	r3, r3, #30
 8009d10:	f100 8103 	bmi.w	8009f1a <_printf_float+0x44e>
 8009d14:	68e0      	ldr	r0, [r4, #12]
 8009d16:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009d18:	4298      	cmp	r0, r3
 8009d1a:	bfb8      	it	lt
 8009d1c:	4618      	movlt	r0, r3
 8009d1e:	e734      	b.n	8009b8a <_printf_float+0xbe>
 8009d20:	2301      	movs	r3, #1
 8009d22:	464a      	mov	r2, r9
 8009d24:	4631      	mov	r1, r6
 8009d26:	4628      	mov	r0, r5
 8009d28:	47b8      	blx	r7
 8009d2a:	3001      	adds	r0, #1
 8009d2c:	f43f af2b 	beq.w	8009b86 <_printf_float+0xba>
 8009d30:	f108 0801 	add.w	r8, r8, #1
 8009d34:	e7e6      	b.n	8009d04 <_printf_float+0x238>
 8009d36:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009d38:	2b00      	cmp	r3, #0
 8009d3a:	dc2b      	bgt.n	8009d94 <_printf_float+0x2c8>
 8009d3c:	2301      	movs	r3, #1
 8009d3e:	4a26      	ldr	r2, [pc, #152]	; (8009dd8 <_printf_float+0x30c>)
 8009d40:	4631      	mov	r1, r6
 8009d42:	4628      	mov	r0, r5
 8009d44:	47b8      	blx	r7
 8009d46:	3001      	adds	r0, #1
 8009d48:	f43f af1d 	beq.w	8009b86 <_printf_float+0xba>
 8009d4c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009d4e:	b923      	cbnz	r3, 8009d5a <_printf_float+0x28e>
 8009d50:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009d52:	b913      	cbnz	r3, 8009d5a <_printf_float+0x28e>
 8009d54:	6823      	ldr	r3, [r4, #0]
 8009d56:	07d9      	lsls	r1, r3, #31
 8009d58:	d5d8      	bpl.n	8009d0c <_printf_float+0x240>
 8009d5a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009d5e:	4631      	mov	r1, r6
 8009d60:	4628      	mov	r0, r5
 8009d62:	47b8      	blx	r7
 8009d64:	3001      	adds	r0, #1
 8009d66:	f43f af0e 	beq.w	8009b86 <_printf_float+0xba>
 8009d6a:	f04f 0900 	mov.w	r9, #0
 8009d6e:	f104 0a1a 	add.w	sl, r4, #26
 8009d72:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009d74:	425b      	negs	r3, r3
 8009d76:	454b      	cmp	r3, r9
 8009d78:	dc01      	bgt.n	8009d7e <_printf_float+0x2b2>
 8009d7a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009d7c:	e794      	b.n	8009ca8 <_printf_float+0x1dc>
 8009d7e:	2301      	movs	r3, #1
 8009d80:	4652      	mov	r2, sl
 8009d82:	4631      	mov	r1, r6
 8009d84:	4628      	mov	r0, r5
 8009d86:	47b8      	blx	r7
 8009d88:	3001      	adds	r0, #1
 8009d8a:	f43f aefc 	beq.w	8009b86 <_printf_float+0xba>
 8009d8e:	f109 0901 	add.w	r9, r9, #1
 8009d92:	e7ee      	b.n	8009d72 <_printf_float+0x2a6>
 8009d94:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009d96:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009d98:	429a      	cmp	r2, r3
 8009d9a:	bfa8      	it	ge
 8009d9c:	461a      	movge	r2, r3
 8009d9e:	2a00      	cmp	r2, #0
 8009da0:	4691      	mov	r9, r2
 8009da2:	dd07      	ble.n	8009db4 <_printf_float+0x2e8>
 8009da4:	4613      	mov	r3, r2
 8009da6:	4631      	mov	r1, r6
 8009da8:	4642      	mov	r2, r8
 8009daa:	4628      	mov	r0, r5
 8009dac:	47b8      	blx	r7
 8009dae:	3001      	adds	r0, #1
 8009db0:	f43f aee9 	beq.w	8009b86 <_printf_float+0xba>
 8009db4:	f104 031a 	add.w	r3, r4, #26
 8009db8:	f04f 0b00 	mov.w	fp, #0
 8009dbc:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009dc0:	9306      	str	r3, [sp, #24]
 8009dc2:	e015      	b.n	8009df0 <_printf_float+0x324>
 8009dc4:	7fefffff 	.word	0x7fefffff
 8009dc8:	0800bea8 	.word	0x0800bea8
 8009dcc:	0800bea4 	.word	0x0800bea4
 8009dd0:	0800beb0 	.word	0x0800beb0
 8009dd4:	0800beac 	.word	0x0800beac
 8009dd8:	0800beb4 	.word	0x0800beb4
 8009ddc:	2301      	movs	r3, #1
 8009dde:	9a06      	ldr	r2, [sp, #24]
 8009de0:	4631      	mov	r1, r6
 8009de2:	4628      	mov	r0, r5
 8009de4:	47b8      	blx	r7
 8009de6:	3001      	adds	r0, #1
 8009de8:	f43f aecd 	beq.w	8009b86 <_printf_float+0xba>
 8009dec:	f10b 0b01 	add.w	fp, fp, #1
 8009df0:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8009df4:	ebaa 0309 	sub.w	r3, sl, r9
 8009df8:	455b      	cmp	r3, fp
 8009dfa:	dcef      	bgt.n	8009ddc <_printf_float+0x310>
 8009dfc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009e00:	429a      	cmp	r2, r3
 8009e02:	44d0      	add	r8, sl
 8009e04:	db15      	blt.n	8009e32 <_printf_float+0x366>
 8009e06:	6823      	ldr	r3, [r4, #0]
 8009e08:	07da      	lsls	r2, r3, #31
 8009e0a:	d412      	bmi.n	8009e32 <_printf_float+0x366>
 8009e0c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009e0e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009e10:	eba3 020a 	sub.w	r2, r3, sl
 8009e14:	eba3 0a01 	sub.w	sl, r3, r1
 8009e18:	4592      	cmp	sl, r2
 8009e1a:	bfa8      	it	ge
 8009e1c:	4692      	movge	sl, r2
 8009e1e:	f1ba 0f00 	cmp.w	sl, #0
 8009e22:	dc0e      	bgt.n	8009e42 <_printf_float+0x376>
 8009e24:	f04f 0800 	mov.w	r8, #0
 8009e28:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009e2c:	f104 091a 	add.w	r9, r4, #26
 8009e30:	e019      	b.n	8009e66 <_printf_float+0x39a>
 8009e32:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009e36:	4631      	mov	r1, r6
 8009e38:	4628      	mov	r0, r5
 8009e3a:	47b8      	blx	r7
 8009e3c:	3001      	adds	r0, #1
 8009e3e:	d1e5      	bne.n	8009e0c <_printf_float+0x340>
 8009e40:	e6a1      	b.n	8009b86 <_printf_float+0xba>
 8009e42:	4653      	mov	r3, sl
 8009e44:	4642      	mov	r2, r8
 8009e46:	4631      	mov	r1, r6
 8009e48:	4628      	mov	r0, r5
 8009e4a:	47b8      	blx	r7
 8009e4c:	3001      	adds	r0, #1
 8009e4e:	d1e9      	bne.n	8009e24 <_printf_float+0x358>
 8009e50:	e699      	b.n	8009b86 <_printf_float+0xba>
 8009e52:	2301      	movs	r3, #1
 8009e54:	464a      	mov	r2, r9
 8009e56:	4631      	mov	r1, r6
 8009e58:	4628      	mov	r0, r5
 8009e5a:	47b8      	blx	r7
 8009e5c:	3001      	adds	r0, #1
 8009e5e:	f43f ae92 	beq.w	8009b86 <_printf_float+0xba>
 8009e62:	f108 0801 	add.w	r8, r8, #1
 8009e66:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009e6a:	1a9b      	subs	r3, r3, r2
 8009e6c:	eba3 030a 	sub.w	r3, r3, sl
 8009e70:	4543      	cmp	r3, r8
 8009e72:	dcee      	bgt.n	8009e52 <_printf_float+0x386>
 8009e74:	e74a      	b.n	8009d0c <_printf_float+0x240>
 8009e76:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009e78:	2a01      	cmp	r2, #1
 8009e7a:	dc01      	bgt.n	8009e80 <_printf_float+0x3b4>
 8009e7c:	07db      	lsls	r3, r3, #31
 8009e7e:	d53a      	bpl.n	8009ef6 <_printf_float+0x42a>
 8009e80:	2301      	movs	r3, #1
 8009e82:	4642      	mov	r2, r8
 8009e84:	4631      	mov	r1, r6
 8009e86:	4628      	mov	r0, r5
 8009e88:	47b8      	blx	r7
 8009e8a:	3001      	adds	r0, #1
 8009e8c:	f43f ae7b 	beq.w	8009b86 <_printf_float+0xba>
 8009e90:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009e94:	4631      	mov	r1, r6
 8009e96:	4628      	mov	r0, r5
 8009e98:	47b8      	blx	r7
 8009e9a:	3001      	adds	r0, #1
 8009e9c:	f108 0801 	add.w	r8, r8, #1
 8009ea0:	f43f ae71 	beq.w	8009b86 <_printf_float+0xba>
 8009ea4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009ea6:	2200      	movs	r2, #0
 8009ea8:	f103 3aff 	add.w	sl, r3, #4294967295
 8009eac:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009eb0:	2300      	movs	r3, #0
 8009eb2:	f7f6 fe09 	bl	8000ac8 <__aeabi_dcmpeq>
 8009eb6:	b9c8      	cbnz	r0, 8009eec <_printf_float+0x420>
 8009eb8:	4653      	mov	r3, sl
 8009eba:	4642      	mov	r2, r8
 8009ebc:	4631      	mov	r1, r6
 8009ebe:	4628      	mov	r0, r5
 8009ec0:	47b8      	blx	r7
 8009ec2:	3001      	adds	r0, #1
 8009ec4:	d10e      	bne.n	8009ee4 <_printf_float+0x418>
 8009ec6:	e65e      	b.n	8009b86 <_printf_float+0xba>
 8009ec8:	2301      	movs	r3, #1
 8009eca:	4652      	mov	r2, sl
 8009ecc:	4631      	mov	r1, r6
 8009ece:	4628      	mov	r0, r5
 8009ed0:	47b8      	blx	r7
 8009ed2:	3001      	adds	r0, #1
 8009ed4:	f43f ae57 	beq.w	8009b86 <_printf_float+0xba>
 8009ed8:	f108 0801 	add.w	r8, r8, #1
 8009edc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009ede:	3b01      	subs	r3, #1
 8009ee0:	4543      	cmp	r3, r8
 8009ee2:	dcf1      	bgt.n	8009ec8 <_printf_float+0x3fc>
 8009ee4:	464b      	mov	r3, r9
 8009ee6:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8009eea:	e6de      	b.n	8009caa <_printf_float+0x1de>
 8009eec:	f04f 0800 	mov.w	r8, #0
 8009ef0:	f104 0a1a 	add.w	sl, r4, #26
 8009ef4:	e7f2      	b.n	8009edc <_printf_float+0x410>
 8009ef6:	2301      	movs	r3, #1
 8009ef8:	e7df      	b.n	8009eba <_printf_float+0x3ee>
 8009efa:	2301      	movs	r3, #1
 8009efc:	464a      	mov	r2, r9
 8009efe:	4631      	mov	r1, r6
 8009f00:	4628      	mov	r0, r5
 8009f02:	47b8      	blx	r7
 8009f04:	3001      	adds	r0, #1
 8009f06:	f43f ae3e 	beq.w	8009b86 <_printf_float+0xba>
 8009f0a:	f108 0801 	add.w	r8, r8, #1
 8009f0e:	68e3      	ldr	r3, [r4, #12]
 8009f10:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009f12:	1a9b      	subs	r3, r3, r2
 8009f14:	4543      	cmp	r3, r8
 8009f16:	dcf0      	bgt.n	8009efa <_printf_float+0x42e>
 8009f18:	e6fc      	b.n	8009d14 <_printf_float+0x248>
 8009f1a:	f04f 0800 	mov.w	r8, #0
 8009f1e:	f104 0919 	add.w	r9, r4, #25
 8009f22:	e7f4      	b.n	8009f0e <_printf_float+0x442>
 8009f24:	2900      	cmp	r1, #0
 8009f26:	f43f ae8b 	beq.w	8009c40 <_printf_float+0x174>
 8009f2a:	2300      	movs	r3, #0
 8009f2c:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8009f30:	ab09      	add	r3, sp, #36	; 0x24
 8009f32:	9300      	str	r3, [sp, #0]
 8009f34:	ec49 8b10 	vmov	d0, r8, r9
 8009f38:	6022      	str	r2, [r4, #0]
 8009f3a:	f8cd a004 	str.w	sl, [sp, #4]
 8009f3e:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8009f42:	4628      	mov	r0, r5
 8009f44:	f7ff fd2e 	bl	80099a4 <__cvt>
 8009f48:	4680      	mov	r8, r0
 8009f4a:	e648      	b.n	8009bde <_printf_float+0x112>

08009f4c <_printf_common>:
 8009f4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009f50:	4691      	mov	r9, r2
 8009f52:	461f      	mov	r7, r3
 8009f54:	688a      	ldr	r2, [r1, #8]
 8009f56:	690b      	ldr	r3, [r1, #16]
 8009f58:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009f5c:	4293      	cmp	r3, r2
 8009f5e:	bfb8      	it	lt
 8009f60:	4613      	movlt	r3, r2
 8009f62:	f8c9 3000 	str.w	r3, [r9]
 8009f66:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009f6a:	4606      	mov	r6, r0
 8009f6c:	460c      	mov	r4, r1
 8009f6e:	b112      	cbz	r2, 8009f76 <_printf_common+0x2a>
 8009f70:	3301      	adds	r3, #1
 8009f72:	f8c9 3000 	str.w	r3, [r9]
 8009f76:	6823      	ldr	r3, [r4, #0]
 8009f78:	0699      	lsls	r1, r3, #26
 8009f7a:	bf42      	ittt	mi
 8009f7c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8009f80:	3302      	addmi	r3, #2
 8009f82:	f8c9 3000 	strmi.w	r3, [r9]
 8009f86:	6825      	ldr	r5, [r4, #0]
 8009f88:	f015 0506 	ands.w	r5, r5, #6
 8009f8c:	d107      	bne.n	8009f9e <_printf_common+0x52>
 8009f8e:	f104 0a19 	add.w	sl, r4, #25
 8009f92:	68e3      	ldr	r3, [r4, #12]
 8009f94:	f8d9 2000 	ldr.w	r2, [r9]
 8009f98:	1a9b      	subs	r3, r3, r2
 8009f9a:	42ab      	cmp	r3, r5
 8009f9c:	dc28      	bgt.n	8009ff0 <_printf_common+0xa4>
 8009f9e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8009fa2:	6822      	ldr	r2, [r4, #0]
 8009fa4:	3300      	adds	r3, #0
 8009fa6:	bf18      	it	ne
 8009fa8:	2301      	movne	r3, #1
 8009faa:	0692      	lsls	r2, r2, #26
 8009fac:	d42d      	bmi.n	800a00a <_printf_common+0xbe>
 8009fae:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009fb2:	4639      	mov	r1, r7
 8009fb4:	4630      	mov	r0, r6
 8009fb6:	47c0      	blx	r8
 8009fb8:	3001      	adds	r0, #1
 8009fba:	d020      	beq.n	8009ffe <_printf_common+0xb2>
 8009fbc:	6823      	ldr	r3, [r4, #0]
 8009fbe:	68e5      	ldr	r5, [r4, #12]
 8009fc0:	f8d9 2000 	ldr.w	r2, [r9]
 8009fc4:	f003 0306 	and.w	r3, r3, #6
 8009fc8:	2b04      	cmp	r3, #4
 8009fca:	bf08      	it	eq
 8009fcc:	1aad      	subeq	r5, r5, r2
 8009fce:	68a3      	ldr	r3, [r4, #8]
 8009fd0:	6922      	ldr	r2, [r4, #16]
 8009fd2:	bf0c      	ite	eq
 8009fd4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009fd8:	2500      	movne	r5, #0
 8009fda:	4293      	cmp	r3, r2
 8009fdc:	bfc4      	itt	gt
 8009fde:	1a9b      	subgt	r3, r3, r2
 8009fe0:	18ed      	addgt	r5, r5, r3
 8009fe2:	f04f 0900 	mov.w	r9, #0
 8009fe6:	341a      	adds	r4, #26
 8009fe8:	454d      	cmp	r5, r9
 8009fea:	d11a      	bne.n	800a022 <_printf_common+0xd6>
 8009fec:	2000      	movs	r0, #0
 8009fee:	e008      	b.n	800a002 <_printf_common+0xb6>
 8009ff0:	2301      	movs	r3, #1
 8009ff2:	4652      	mov	r2, sl
 8009ff4:	4639      	mov	r1, r7
 8009ff6:	4630      	mov	r0, r6
 8009ff8:	47c0      	blx	r8
 8009ffa:	3001      	adds	r0, #1
 8009ffc:	d103      	bne.n	800a006 <_printf_common+0xba>
 8009ffe:	f04f 30ff 	mov.w	r0, #4294967295
 800a002:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a006:	3501      	adds	r5, #1
 800a008:	e7c3      	b.n	8009f92 <_printf_common+0x46>
 800a00a:	18e1      	adds	r1, r4, r3
 800a00c:	1c5a      	adds	r2, r3, #1
 800a00e:	2030      	movs	r0, #48	; 0x30
 800a010:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a014:	4422      	add	r2, r4
 800a016:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a01a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a01e:	3302      	adds	r3, #2
 800a020:	e7c5      	b.n	8009fae <_printf_common+0x62>
 800a022:	2301      	movs	r3, #1
 800a024:	4622      	mov	r2, r4
 800a026:	4639      	mov	r1, r7
 800a028:	4630      	mov	r0, r6
 800a02a:	47c0      	blx	r8
 800a02c:	3001      	adds	r0, #1
 800a02e:	d0e6      	beq.n	8009ffe <_printf_common+0xb2>
 800a030:	f109 0901 	add.w	r9, r9, #1
 800a034:	e7d8      	b.n	8009fe8 <_printf_common+0x9c>
	...

0800a038 <_printf_i>:
 800a038:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a03c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800a040:	460c      	mov	r4, r1
 800a042:	7e09      	ldrb	r1, [r1, #24]
 800a044:	b085      	sub	sp, #20
 800a046:	296e      	cmp	r1, #110	; 0x6e
 800a048:	4617      	mov	r7, r2
 800a04a:	4606      	mov	r6, r0
 800a04c:	4698      	mov	r8, r3
 800a04e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a050:	f000 80b3 	beq.w	800a1ba <_printf_i+0x182>
 800a054:	d822      	bhi.n	800a09c <_printf_i+0x64>
 800a056:	2963      	cmp	r1, #99	; 0x63
 800a058:	d036      	beq.n	800a0c8 <_printf_i+0x90>
 800a05a:	d80a      	bhi.n	800a072 <_printf_i+0x3a>
 800a05c:	2900      	cmp	r1, #0
 800a05e:	f000 80b9 	beq.w	800a1d4 <_printf_i+0x19c>
 800a062:	2958      	cmp	r1, #88	; 0x58
 800a064:	f000 8083 	beq.w	800a16e <_printf_i+0x136>
 800a068:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a06c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800a070:	e032      	b.n	800a0d8 <_printf_i+0xa0>
 800a072:	2964      	cmp	r1, #100	; 0x64
 800a074:	d001      	beq.n	800a07a <_printf_i+0x42>
 800a076:	2969      	cmp	r1, #105	; 0x69
 800a078:	d1f6      	bne.n	800a068 <_printf_i+0x30>
 800a07a:	6820      	ldr	r0, [r4, #0]
 800a07c:	6813      	ldr	r3, [r2, #0]
 800a07e:	0605      	lsls	r5, r0, #24
 800a080:	f103 0104 	add.w	r1, r3, #4
 800a084:	d52a      	bpl.n	800a0dc <_printf_i+0xa4>
 800a086:	681b      	ldr	r3, [r3, #0]
 800a088:	6011      	str	r1, [r2, #0]
 800a08a:	2b00      	cmp	r3, #0
 800a08c:	da03      	bge.n	800a096 <_printf_i+0x5e>
 800a08e:	222d      	movs	r2, #45	; 0x2d
 800a090:	425b      	negs	r3, r3
 800a092:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800a096:	486f      	ldr	r0, [pc, #444]	; (800a254 <_printf_i+0x21c>)
 800a098:	220a      	movs	r2, #10
 800a09a:	e039      	b.n	800a110 <_printf_i+0xd8>
 800a09c:	2973      	cmp	r1, #115	; 0x73
 800a09e:	f000 809d 	beq.w	800a1dc <_printf_i+0x1a4>
 800a0a2:	d808      	bhi.n	800a0b6 <_printf_i+0x7e>
 800a0a4:	296f      	cmp	r1, #111	; 0x6f
 800a0a6:	d020      	beq.n	800a0ea <_printf_i+0xb2>
 800a0a8:	2970      	cmp	r1, #112	; 0x70
 800a0aa:	d1dd      	bne.n	800a068 <_printf_i+0x30>
 800a0ac:	6823      	ldr	r3, [r4, #0]
 800a0ae:	f043 0320 	orr.w	r3, r3, #32
 800a0b2:	6023      	str	r3, [r4, #0]
 800a0b4:	e003      	b.n	800a0be <_printf_i+0x86>
 800a0b6:	2975      	cmp	r1, #117	; 0x75
 800a0b8:	d017      	beq.n	800a0ea <_printf_i+0xb2>
 800a0ba:	2978      	cmp	r1, #120	; 0x78
 800a0bc:	d1d4      	bne.n	800a068 <_printf_i+0x30>
 800a0be:	2378      	movs	r3, #120	; 0x78
 800a0c0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a0c4:	4864      	ldr	r0, [pc, #400]	; (800a258 <_printf_i+0x220>)
 800a0c6:	e055      	b.n	800a174 <_printf_i+0x13c>
 800a0c8:	6813      	ldr	r3, [r2, #0]
 800a0ca:	1d19      	adds	r1, r3, #4
 800a0cc:	681b      	ldr	r3, [r3, #0]
 800a0ce:	6011      	str	r1, [r2, #0]
 800a0d0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a0d4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a0d8:	2301      	movs	r3, #1
 800a0da:	e08c      	b.n	800a1f6 <_printf_i+0x1be>
 800a0dc:	681b      	ldr	r3, [r3, #0]
 800a0de:	6011      	str	r1, [r2, #0]
 800a0e0:	f010 0f40 	tst.w	r0, #64	; 0x40
 800a0e4:	bf18      	it	ne
 800a0e6:	b21b      	sxthne	r3, r3
 800a0e8:	e7cf      	b.n	800a08a <_printf_i+0x52>
 800a0ea:	6813      	ldr	r3, [r2, #0]
 800a0ec:	6825      	ldr	r5, [r4, #0]
 800a0ee:	1d18      	adds	r0, r3, #4
 800a0f0:	6010      	str	r0, [r2, #0]
 800a0f2:	0628      	lsls	r0, r5, #24
 800a0f4:	d501      	bpl.n	800a0fa <_printf_i+0xc2>
 800a0f6:	681b      	ldr	r3, [r3, #0]
 800a0f8:	e002      	b.n	800a100 <_printf_i+0xc8>
 800a0fa:	0668      	lsls	r0, r5, #25
 800a0fc:	d5fb      	bpl.n	800a0f6 <_printf_i+0xbe>
 800a0fe:	881b      	ldrh	r3, [r3, #0]
 800a100:	4854      	ldr	r0, [pc, #336]	; (800a254 <_printf_i+0x21c>)
 800a102:	296f      	cmp	r1, #111	; 0x6f
 800a104:	bf14      	ite	ne
 800a106:	220a      	movne	r2, #10
 800a108:	2208      	moveq	r2, #8
 800a10a:	2100      	movs	r1, #0
 800a10c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a110:	6865      	ldr	r5, [r4, #4]
 800a112:	60a5      	str	r5, [r4, #8]
 800a114:	2d00      	cmp	r5, #0
 800a116:	f2c0 8095 	blt.w	800a244 <_printf_i+0x20c>
 800a11a:	6821      	ldr	r1, [r4, #0]
 800a11c:	f021 0104 	bic.w	r1, r1, #4
 800a120:	6021      	str	r1, [r4, #0]
 800a122:	2b00      	cmp	r3, #0
 800a124:	d13d      	bne.n	800a1a2 <_printf_i+0x16a>
 800a126:	2d00      	cmp	r5, #0
 800a128:	f040 808e 	bne.w	800a248 <_printf_i+0x210>
 800a12c:	4665      	mov	r5, ip
 800a12e:	2a08      	cmp	r2, #8
 800a130:	d10b      	bne.n	800a14a <_printf_i+0x112>
 800a132:	6823      	ldr	r3, [r4, #0]
 800a134:	07db      	lsls	r3, r3, #31
 800a136:	d508      	bpl.n	800a14a <_printf_i+0x112>
 800a138:	6923      	ldr	r3, [r4, #16]
 800a13a:	6862      	ldr	r2, [r4, #4]
 800a13c:	429a      	cmp	r2, r3
 800a13e:	bfde      	ittt	le
 800a140:	2330      	movle	r3, #48	; 0x30
 800a142:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a146:	f105 35ff 	addle.w	r5, r5, #4294967295
 800a14a:	ebac 0305 	sub.w	r3, ip, r5
 800a14e:	6123      	str	r3, [r4, #16]
 800a150:	f8cd 8000 	str.w	r8, [sp]
 800a154:	463b      	mov	r3, r7
 800a156:	aa03      	add	r2, sp, #12
 800a158:	4621      	mov	r1, r4
 800a15a:	4630      	mov	r0, r6
 800a15c:	f7ff fef6 	bl	8009f4c <_printf_common>
 800a160:	3001      	adds	r0, #1
 800a162:	d14d      	bne.n	800a200 <_printf_i+0x1c8>
 800a164:	f04f 30ff 	mov.w	r0, #4294967295
 800a168:	b005      	add	sp, #20
 800a16a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a16e:	4839      	ldr	r0, [pc, #228]	; (800a254 <_printf_i+0x21c>)
 800a170:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800a174:	6813      	ldr	r3, [r2, #0]
 800a176:	6821      	ldr	r1, [r4, #0]
 800a178:	1d1d      	adds	r5, r3, #4
 800a17a:	681b      	ldr	r3, [r3, #0]
 800a17c:	6015      	str	r5, [r2, #0]
 800a17e:	060a      	lsls	r2, r1, #24
 800a180:	d50b      	bpl.n	800a19a <_printf_i+0x162>
 800a182:	07ca      	lsls	r2, r1, #31
 800a184:	bf44      	itt	mi
 800a186:	f041 0120 	orrmi.w	r1, r1, #32
 800a18a:	6021      	strmi	r1, [r4, #0]
 800a18c:	b91b      	cbnz	r3, 800a196 <_printf_i+0x15e>
 800a18e:	6822      	ldr	r2, [r4, #0]
 800a190:	f022 0220 	bic.w	r2, r2, #32
 800a194:	6022      	str	r2, [r4, #0]
 800a196:	2210      	movs	r2, #16
 800a198:	e7b7      	b.n	800a10a <_printf_i+0xd2>
 800a19a:	064d      	lsls	r5, r1, #25
 800a19c:	bf48      	it	mi
 800a19e:	b29b      	uxthmi	r3, r3
 800a1a0:	e7ef      	b.n	800a182 <_printf_i+0x14a>
 800a1a2:	4665      	mov	r5, ip
 800a1a4:	fbb3 f1f2 	udiv	r1, r3, r2
 800a1a8:	fb02 3311 	mls	r3, r2, r1, r3
 800a1ac:	5cc3      	ldrb	r3, [r0, r3]
 800a1ae:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800a1b2:	460b      	mov	r3, r1
 800a1b4:	2900      	cmp	r1, #0
 800a1b6:	d1f5      	bne.n	800a1a4 <_printf_i+0x16c>
 800a1b8:	e7b9      	b.n	800a12e <_printf_i+0xf6>
 800a1ba:	6813      	ldr	r3, [r2, #0]
 800a1bc:	6825      	ldr	r5, [r4, #0]
 800a1be:	6961      	ldr	r1, [r4, #20]
 800a1c0:	1d18      	adds	r0, r3, #4
 800a1c2:	6010      	str	r0, [r2, #0]
 800a1c4:	0628      	lsls	r0, r5, #24
 800a1c6:	681b      	ldr	r3, [r3, #0]
 800a1c8:	d501      	bpl.n	800a1ce <_printf_i+0x196>
 800a1ca:	6019      	str	r1, [r3, #0]
 800a1cc:	e002      	b.n	800a1d4 <_printf_i+0x19c>
 800a1ce:	066a      	lsls	r2, r5, #25
 800a1d0:	d5fb      	bpl.n	800a1ca <_printf_i+0x192>
 800a1d2:	8019      	strh	r1, [r3, #0]
 800a1d4:	2300      	movs	r3, #0
 800a1d6:	6123      	str	r3, [r4, #16]
 800a1d8:	4665      	mov	r5, ip
 800a1da:	e7b9      	b.n	800a150 <_printf_i+0x118>
 800a1dc:	6813      	ldr	r3, [r2, #0]
 800a1de:	1d19      	adds	r1, r3, #4
 800a1e0:	6011      	str	r1, [r2, #0]
 800a1e2:	681d      	ldr	r5, [r3, #0]
 800a1e4:	6862      	ldr	r2, [r4, #4]
 800a1e6:	2100      	movs	r1, #0
 800a1e8:	4628      	mov	r0, r5
 800a1ea:	f7f5 fff9 	bl	80001e0 <memchr>
 800a1ee:	b108      	cbz	r0, 800a1f4 <_printf_i+0x1bc>
 800a1f0:	1b40      	subs	r0, r0, r5
 800a1f2:	6060      	str	r0, [r4, #4]
 800a1f4:	6863      	ldr	r3, [r4, #4]
 800a1f6:	6123      	str	r3, [r4, #16]
 800a1f8:	2300      	movs	r3, #0
 800a1fa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a1fe:	e7a7      	b.n	800a150 <_printf_i+0x118>
 800a200:	6923      	ldr	r3, [r4, #16]
 800a202:	462a      	mov	r2, r5
 800a204:	4639      	mov	r1, r7
 800a206:	4630      	mov	r0, r6
 800a208:	47c0      	blx	r8
 800a20a:	3001      	adds	r0, #1
 800a20c:	d0aa      	beq.n	800a164 <_printf_i+0x12c>
 800a20e:	6823      	ldr	r3, [r4, #0]
 800a210:	079b      	lsls	r3, r3, #30
 800a212:	d413      	bmi.n	800a23c <_printf_i+0x204>
 800a214:	68e0      	ldr	r0, [r4, #12]
 800a216:	9b03      	ldr	r3, [sp, #12]
 800a218:	4298      	cmp	r0, r3
 800a21a:	bfb8      	it	lt
 800a21c:	4618      	movlt	r0, r3
 800a21e:	e7a3      	b.n	800a168 <_printf_i+0x130>
 800a220:	2301      	movs	r3, #1
 800a222:	464a      	mov	r2, r9
 800a224:	4639      	mov	r1, r7
 800a226:	4630      	mov	r0, r6
 800a228:	47c0      	blx	r8
 800a22a:	3001      	adds	r0, #1
 800a22c:	d09a      	beq.n	800a164 <_printf_i+0x12c>
 800a22e:	3501      	adds	r5, #1
 800a230:	68e3      	ldr	r3, [r4, #12]
 800a232:	9a03      	ldr	r2, [sp, #12]
 800a234:	1a9b      	subs	r3, r3, r2
 800a236:	42ab      	cmp	r3, r5
 800a238:	dcf2      	bgt.n	800a220 <_printf_i+0x1e8>
 800a23a:	e7eb      	b.n	800a214 <_printf_i+0x1dc>
 800a23c:	2500      	movs	r5, #0
 800a23e:	f104 0919 	add.w	r9, r4, #25
 800a242:	e7f5      	b.n	800a230 <_printf_i+0x1f8>
 800a244:	2b00      	cmp	r3, #0
 800a246:	d1ac      	bne.n	800a1a2 <_printf_i+0x16a>
 800a248:	7803      	ldrb	r3, [r0, #0]
 800a24a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a24e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a252:	e76c      	b.n	800a12e <_printf_i+0xf6>
 800a254:	0800beb6 	.word	0x0800beb6
 800a258:	0800bec7 	.word	0x0800bec7

0800a25c <_sbrk_r>:
 800a25c:	b538      	push	{r3, r4, r5, lr}
 800a25e:	4c06      	ldr	r4, [pc, #24]	; (800a278 <_sbrk_r+0x1c>)
 800a260:	2300      	movs	r3, #0
 800a262:	4605      	mov	r5, r0
 800a264:	4608      	mov	r0, r1
 800a266:	6023      	str	r3, [r4, #0]
 800a268:	f7f7 fab2 	bl	80017d0 <_sbrk>
 800a26c:	1c43      	adds	r3, r0, #1
 800a26e:	d102      	bne.n	800a276 <_sbrk_r+0x1a>
 800a270:	6823      	ldr	r3, [r4, #0]
 800a272:	b103      	cbz	r3, 800a276 <_sbrk_r+0x1a>
 800a274:	602b      	str	r3, [r5, #0]
 800a276:	bd38      	pop	{r3, r4, r5, pc}
 800a278:	200015cc 	.word	0x200015cc

0800a27c <sniprintf>:
 800a27c:	b40c      	push	{r2, r3}
 800a27e:	b530      	push	{r4, r5, lr}
 800a280:	4b17      	ldr	r3, [pc, #92]	; (800a2e0 <sniprintf+0x64>)
 800a282:	1e0c      	subs	r4, r1, #0
 800a284:	b09d      	sub	sp, #116	; 0x74
 800a286:	681d      	ldr	r5, [r3, #0]
 800a288:	da08      	bge.n	800a29c <sniprintf+0x20>
 800a28a:	238b      	movs	r3, #139	; 0x8b
 800a28c:	602b      	str	r3, [r5, #0]
 800a28e:	f04f 30ff 	mov.w	r0, #4294967295
 800a292:	b01d      	add	sp, #116	; 0x74
 800a294:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a298:	b002      	add	sp, #8
 800a29a:	4770      	bx	lr
 800a29c:	f44f 7302 	mov.w	r3, #520	; 0x208
 800a2a0:	f8ad 3014 	strh.w	r3, [sp, #20]
 800a2a4:	bf14      	ite	ne
 800a2a6:	f104 33ff 	addne.w	r3, r4, #4294967295
 800a2aa:	4623      	moveq	r3, r4
 800a2ac:	9304      	str	r3, [sp, #16]
 800a2ae:	9307      	str	r3, [sp, #28]
 800a2b0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800a2b4:	9002      	str	r0, [sp, #8]
 800a2b6:	9006      	str	r0, [sp, #24]
 800a2b8:	f8ad 3016 	strh.w	r3, [sp, #22]
 800a2bc:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800a2be:	ab21      	add	r3, sp, #132	; 0x84
 800a2c0:	a902      	add	r1, sp, #8
 800a2c2:	4628      	mov	r0, r5
 800a2c4:	9301      	str	r3, [sp, #4]
 800a2c6:	f001 f9b1 	bl	800b62c <_svfiprintf_r>
 800a2ca:	1c43      	adds	r3, r0, #1
 800a2cc:	bfbc      	itt	lt
 800a2ce:	238b      	movlt	r3, #139	; 0x8b
 800a2d0:	602b      	strlt	r3, [r5, #0]
 800a2d2:	2c00      	cmp	r4, #0
 800a2d4:	d0dd      	beq.n	800a292 <sniprintf+0x16>
 800a2d6:	9b02      	ldr	r3, [sp, #8]
 800a2d8:	2200      	movs	r2, #0
 800a2da:	701a      	strb	r2, [r3, #0]
 800a2dc:	e7d9      	b.n	800a292 <sniprintf+0x16>
 800a2de:	bf00      	nop
 800a2e0:	2000017c 	.word	0x2000017c

0800a2e4 <quorem>:
 800a2e4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a2e8:	6903      	ldr	r3, [r0, #16]
 800a2ea:	690c      	ldr	r4, [r1, #16]
 800a2ec:	42a3      	cmp	r3, r4
 800a2ee:	4680      	mov	r8, r0
 800a2f0:	f2c0 8082 	blt.w	800a3f8 <quorem+0x114>
 800a2f4:	3c01      	subs	r4, #1
 800a2f6:	f101 0714 	add.w	r7, r1, #20
 800a2fa:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 800a2fe:	f100 0614 	add.w	r6, r0, #20
 800a302:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 800a306:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 800a30a:	eb06 030c 	add.w	r3, r6, ip
 800a30e:	3501      	adds	r5, #1
 800a310:	eb07 090c 	add.w	r9, r7, ip
 800a314:	9301      	str	r3, [sp, #4]
 800a316:	fbb0 f5f5 	udiv	r5, r0, r5
 800a31a:	b395      	cbz	r5, 800a382 <quorem+0x9e>
 800a31c:	f04f 0a00 	mov.w	sl, #0
 800a320:	4638      	mov	r0, r7
 800a322:	46b6      	mov	lr, r6
 800a324:	46d3      	mov	fp, sl
 800a326:	f850 2b04 	ldr.w	r2, [r0], #4
 800a32a:	b293      	uxth	r3, r2
 800a32c:	fb05 a303 	mla	r3, r5, r3, sl
 800a330:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a334:	b29b      	uxth	r3, r3
 800a336:	ebab 0303 	sub.w	r3, fp, r3
 800a33a:	0c12      	lsrs	r2, r2, #16
 800a33c:	f8de b000 	ldr.w	fp, [lr]
 800a340:	fb05 a202 	mla	r2, r5, r2, sl
 800a344:	fa13 f38b 	uxtah	r3, r3, fp
 800a348:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 800a34c:	fa1f fb82 	uxth.w	fp, r2
 800a350:	f8de 2000 	ldr.w	r2, [lr]
 800a354:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 800a358:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a35c:	b29b      	uxth	r3, r3
 800a35e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a362:	4581      	cmp	r9, r0
 800a364:	ea4f 4b22 	mov.w	fp, r2, asr #16
 800a368:	f84e 3b04 	str.w	r3, [lr], #4
 800a36c:	d2db      	bcs.n	800a326 <quorem+0x42>
 800a36e:	f856 300c 	ldr.w	r3, [r6, ip]
 800a372:	b933      	cbnz	r3, 800a382 <quorem+0x9e>
 800a374:	9b01      	ldr	r3, [sp, #4]
 800a376:	3b04      	subs	r3, #4
 800a378:	429e      	cmp	r6, r3
 800a37a:	461a      	mov	r2, r3
 800a37c:	d330      	bcc.n	800a3e0 <quorem+0xfc>
 800a37e:	f8c8 4010 	str.w	r4, [r8, #16]
 800a382:	4640      	mov	r0, r8
 800a384:	f001 f824 	bl	800b3d0 <__mcmp>
 800a388:	2800      	cmp	r0, #0
 800a38a:	db25      	blt.n	800a3d8 <quorem+0xf4>
 800a38c:	3501      	adds	r5, #1
 800a38e:	4630      	mov	r0, r6
 800a390:	f04f 0c00 	mov.w	ip, #0
 800a394:	f857 2b04 	ldr.w	r2, [r7], #4
 800a398:	f8d0 e000 	ldr.w	lr, [r0]
 800a39c:	b293      	uxth	r3, r2
 800a39e:	ebac 0303 	sub.w	r3, ip, r3
 800a3a2:	0c12      	lsrs	r2, r2, #16
 800a3a4:	fa13 f38e 	uxtah	r3, r3, lr
 800a3a8:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800a3ac:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a3b0:	b29b      	uxth	r3, r3
 800a3b2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a3b6:	45b9      	cmp	r9, r7
 800a3b8:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800a3bc:	f840 3b04 	str.w	r3, [r0], #4
 800a3c0:	d2e8      	bcs.n	800a394 <quorem+0xb0>
 800a3c2:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 800a3c6:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 800a3ca:	b92a      	cbnz	r2, 800a3d8 <quorem+0xf4>
 800a3cc:	3b04      	subs	r3, #4
 800a3ce:	429e      	cmp	r6, r3
 800a3d0:	461a      	mov	r2, r3
 800a3d2:	d30b      	bcc.n	800a3ec <quorem+0x108>
 800a3d4:	f8c8 4010 	str.w	r4, [r8, #16]
 800a3d8:	4628      	mov	r0, r5
 800a3da:	b003      	add	sp, #12
 800a3dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a3e0:	6812      	ldr	r2, [r2, #0]
 800a3e2:	3b04      	subs	r3, #4
 800a3e4:	2a00      	cmp	r2, #0
 800a3e6:	d1ca      	bne.n	800a37e <quorem+0x9a>
 800a3e8:	3c01      	subs	r4, #1
 800a3ea:	e7c5      	b.n	800a378 <quorem+0x94>
 800a3ec:	6812      	ldr	r2, [r2, #0]
 800a3ee:	3b04      	subs	r3, #4
 800a3f0:	2a00      	cmp	r2, #0
 800a3f2:	d1ef      	bne.n	800a3d4 <quorem+0xf0>
 800a3f4:	3c01      	subs	r4, #1
 800a3f6:	e7ea      	b.n	800a3ce <quorem+0xea>
 800a3f8:	2000      	movs	r0, #0
 800a3fa:	e7ee      	b.n	800a3da <quorem+0xf6>
 800a3fc:	0000      	movs	r0, r0
	...

0800a400 <_dtoa_r>:
 800a400:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a404:	ec57 6b10 	vmov	r6, r7, d0
 800a408:	b097      	sub	sp, #92	; 0x5c
 800a40a:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800a40c:	9106      	str	r1, [sp, #24]
 800a40e:	4604      	mov	r4, r0
 800a410:	920b      	str	r2, [sp, #44]	; 0x2c
 800a412:	9312      	str	r3, [sp, #72]	; 0x48
 800a414:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800a418:	e9cd 6700 	strd	r6, r7, [sp]
 800a41c:	b93d      	cbnz	r5, 800a42e <_dtoa_r+0x2e>
 800a41e:	2010      	movs	r0, #16
 800a420:	f7ff fa08 	bl	8009834 <malloc>
 800a424:	6260      	str	r0, [r4, #36]	; 0x24
 800a426:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800a42a:	6005      	str	r5, [r0, #0]
 800a42c:	60c5      	str	r5, [r0, #12]
 800a42e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a430:	6819      	ldr	r1, [r3, #0]
 800a432:	b151      	cbz	r1, 800a44a <_dtoa_r+0x4a>
 800a434:	685a      	ldr	r2, [r3, #4]
 800a436:	604a      	str	r2, [r1, #4]
 800a438:	2301      	movs	r3, #1
 800a43a:	4093      	lsls	r3, r2
 800a43c:	608b      	str	r3, [r1, #8]
 800a43e:	4620      	mov	r0, r4
 800a440:	f000 fde5 	bl	800b00e <_Bfree>
 800a444:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a446:	2200      	movs	r2, #0
 800a448:	601a      	str	r2, [r3, #0]
 800a44a:	1e3b      	subs	r3, r7, #0
 800a44c:	bfbb      	ittet	lt
 800a44e:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800a452:	9301      	strlt	r3, [sp, #4]
 800a454:	2300      	movge	r3, #0
 800a456:	2201      	movlt	r2, #1
 800a458:	bfac      	ite	ge
 800a45a:	f8c8 3000 	strge.w	r3, [r8]
 800a45e:	f8c8 2000 	strlt.w	r2, [r8]
 800a462:	4baf      	ldr	r3, [pc, #700]	; (800a720 <_dtoa_r+0x320>)
 800a464:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800a468:	ea33 0308 	bics.w	r3, r3, r8
 800a46c:	d114      	bne.n	800a498 <_dtoa_r+0x98>
 800a46e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800a470:	f242 730f 	movw	r3, #9999	; 0x270f
 800a474:	6013      	str	r3, [r2, #0]
 800a476:	9b00      	ldr	r3, [sp, #0]
 800a478:	b923      	cbnz	r3, 800a484 <_dtoa_r+0x84>
 800a47a:	f3c8 0013 	ubfx	r0, r8, #0, #20
 800a47e:	2800      	cmp	r0, #0
 800a480:	f000 8542 	beq.w	800af08 <_dtoa_r+0xb08>
 800a484:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a486:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 800a734 <_dtoa_r+0x334>
 800a48a:	2b00      	cmp	r3, #0
 800a48c:	f000 8544 	beq.w	800af18 <_dtoa_r+0xb18>
 800a490:	f10b 0303 	add.w	r3, fp, #3
 800a494:	f000 bd3e 	b.w	800af14 <_dtoa_r+0xb14>
 800a498:	e9dd 6700 	ldrd	r6, r7, [sp]
 800a49c:	2200      	movs	r2, #0
 800a49e:	2300      	movs	r3, #0
 800a4a0:	4630      	mov	r0, r6
 800a4a2:	4639      	mov	r1, r7
 800a4a4:	f7f6 fb10 	bl	8000ac8 <__aeabi_dcmpeq>
 800a4a8:	4681      	mov	r9, r0
 800a4aa:	b168      	cbz	r0, 800a4c8 <_dtoa_r+0xc8>
 800a4ac:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800a4ae:	2301      	movs	r3, #1
 800a4b0:	6013      	str	r3, [r2, #0]
 800a4b2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a4b4:	2b00      	cmp	r3, #0
 800a4b6:	f000 8524 	beq.w	800af02 <_dtoa_r+0xb02>
 800a4ba:	4b9a      	ldr	r3, [pc, #616]	; (800a724 <_dtoa_r+0x324>)
 800a4bc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800a4be:	f103 3bff 	add.w	fp, r3, #4294967295
 800a4c2:	6013      	str	r3, [r2, #0]
 800a4c4:	f000 bd28 	b.w	800af18 <_dtoa_r+0xb18>
 800a4c8:	aa14      	add	r2, sp, #80	; 0x50
 800a4ca:	a915      	add	r1, sp, #84	; 0x54
 800a4cc:	ec47 6b10 	vmov	d0, r6, r7
 800a4d0:	4620      	mov	r0, r4
 800a4d2:	f000 fff4 	bl	800b4be <__d2b>
 800a4d6:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800a4da:	9004      	str	r0, [sp, #16]
 800a4dc:	2d00      	cmp	r5, #0
 800a4de:	d07c      	beq.n	800a5da <_dtoa_r+0x1da>
 800a4e0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800a4e4:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 800a4e8:	46b2      	mov	sl, r6
 800a4ea:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 800a4ee:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800a4f2:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 800a4f6:	2200      	movs	r2, #0
 800a4f8:	4b8b      	ldr	r3, [pc, #556]	; (800a728 <_dtoa_r+0x328>)
 800a4fa:	4650      	mov	r0, sl
 800a4fc:	4659      	mov	r1, fp
 800a4fe:	f7f5 fec3 	bl	8000288 <__aeabi_dsub>
 800a502:	a381      	add	r3, pc, #516	; (adr r3, 800a708 <_dtoa_r+0x308>)
 800a504:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a508:	f7f6 f876 	bl	80005f8 <__aeabi_dmul>
 800a50c:	a380      	add	r3, pc, #512	; (adr r3, 800a710 <_dtoa_r+0x310>)
 800a50e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a512:	f7f5 febb 	bl	800028c <__adddf3>
 800a516:	4606      	mov	r6, r0
 800a518:	4628      	mov	r0, r5
 800a51a:	460f      	mov	r7, r1
 800a51c:	f7f6 f802 	bl	8000524 <__aeabi_i2d>
 800a520:	a37d      	add	r3, pc, #500	; (adr r3, 800a718 <_dtoa_r+0x318>)
 800a522:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a526:	f7f6 f867 	bl	80005f8 <__aeabi_dmul>
 800a52a:	4602      	mov	r2, r0
 800a52c:	460b      	mov	r3, r1
 800a52e:	4630      	mov	r0, r6
 800a530:	4639      	mov	r1, r7
 800a532:	f7f5 feab 	bl	800028c <__adddf3>
 800a536:	4606      	mov	r6, r0
 800a538:	460f      	mov	r7, r1
 800a53a:	f7f6 fb0d 	bl	8000b58 <__aeabi_d2iz>
 800a53e:	2200      	movs	r2, #0
 800a540:	4682      	mov	sl, r0
 800a542:	2300      	movs	r3, #0
 800a544:	4630      	mov	r0, r6
 800a546:	4639      	mov	r1, r7
 800a548:	f7f6 fac8 	bl	8000adc <__aeabi_dcmplt>
 800a54c:	b148      	cbz	r0, 800a562 <_dtoa_r+0x162>
 800a54e:	4650      	mov	r0, sl
 800a550:	f7f5 ffe8 	bl	8000524 <__aeabi_i2d>
 800a554:	4632      	mov	r2, r6
 800a556:	463b      	mov	r3, r7
 800a558:	f7f6 fab6 	bl	8000ac8 <__aeabi_dcmpeq>
 800a55c:	b908      	cbnz	r0, 800a562 <_dtoa_r+0x162>
 800a55e:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a562:	f1ba 0f16 	cmp.w	sl, #22
 800a566:	d859      	bhi.n	800a61c <_dtoa_r+0x21c>
 800a568:	4970      	ldr	r1, [pc, #448]	; (800a72c <_dtoa_r+0x32c>)
 800a56a:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800a56e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a572:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a576:	f7f6 facf 	bl	8000b18 <__aeabi_dcmpgt>
 800a57a:	2800      	cmp	r0, #0
 800a57c:	d050      	beq.n	800a620 <_dtoa_r+0x220>
 800a57e:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a582:	2300      	movs	r3, #0
 800a584:	930f      	str	r3, [sp, #60]	; 0x3c
 800a586:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800a588:	1b5d      	subs	r5, r3, r5
 800a58a:	f1b5 0801 	subs.w	r8, r5, #1
 800a58e:	bf49      	itett	mi
 800a590:	f1c5 0301 	rsbmi	r3, r5, #1
 800a594:	2300      	movpl	r3, #0
 800a596:	9305      	strmi	r3, [sp, #20]
 800a598:	f04f 0800 	movmi.w	r8, #0
 800a59c:	bf58      	it	pl
 800a59e:	9305      	strpl	r3, [sp, #20]
 800a5a0:	f1ba 0f00 	cmp.w	sl, #0
 800a5a4:	db3e      	blt.n	800a624 <_dtoa_r+0x224>
 800a5a6:	2300      	movs	r3, #0
 800a5a8:	44d0      	add	r8, sl
 800a5aa:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 800a5ae:	9307      	str	r3, [sp, #28]
 800a5b0:	9b06      	ldr	r3, [sp, #24]
 800a5b2:	2b09      	cmp	r3, #9
 800a5b4:	f200 8090 	bhi.w	800a6d8 <_dtoa_r+0x2d8>
 800a5b8:	2b05      	cmp	r3, #5
 800a5ba:	bfc4      	itt	gt
 800a5bc:	3b04      	subgt	r3, #4
 800a5be:	9306      	strgt	r3, [sp, #24]
 800a5c0:	9b06      	ldr	r3, [sp, #24]
 800a5c2:	f1a3 0302 	sub.w	r3, r3, #2
 800a5c6:	bfcc      	ite	gt
 800a5c8:	2500      	movgt	r5, #0
 800a5ca:	2501      	movle	r5, #1
 800a5cc:	2b03      	cmp	r3, #3
 800a5ce:	f200 808f 	bhi.w	800a6f0 <_dtoa_r+0x2f0>
 800a5d2:	e8df f003 	tbb	[pc, r3]
 800a5d6:	7f7d      	.short	0x7f7d
 800a5d8:	7131      	.short	0x7131
 800a5da:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 800a5de:	441d      	add	r5, r3
 800a5e0:	f205 4032 	addw	r0, r5, #1074	; 0x432
 800a5e4:	2820      	cmp	r0, #32
 800a5e6:	dd13      	ble.n	800a610 <_dtoa_r+0x210>
 800a5e8:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 800a5ec:	9b00      	ldr	r3, [sp, #0]
 800a5ee:	fa08 f800 	lsl.w	r8, r8, r0
 800a5f2:	f205 4012 	addw	r0, r5, #1042	; 0x412
 800a5f6:	fa23 f000 	lsr.w	r0, r3, r0
 800a5fa:	ea48 0000 	orr.w	r0, r8, r0
 800a5fe:	f7f5 ff81 	bl	8000504 <__aeabi_ui2d>
 800a602:	2301      	movs	r3, #1
 800a604:	4682      	mov	sl, r0
 800a606:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 800a60a:	3d01      	subs	r5, #1
 800a60c:	9313      	str	r3, [sp, #76]	; 0x4c
 800a60e:	e772      	b.n	800a4f6 <_dtoa_r+0xf6>
 800a610:	9b00      	ldr	r3, [sp, #0]
 800a612:	f1c0 0020 	rsb	r0, r0, #32
 800a616:	fa03 f000 	lsl.w	r0, r3, r0
 800a61a:	e7f0      	b.n	800a5fe <_dtoa_r+0x1fe>
 800a61c:	2301      	movs	r3, #1
 800a61e:	e7b1      	b.n	800a584 <_dtoa_r+0x184>
 800a620:	900f      	str	r0, [sp, #60]	; 0x3c
 800a622:	e7b0      	b.n	800a586 <_dtoa_r+0x186>
 800a624:	9b05      	ldr	r3, [sp, #20]
 800a626:	eba3 030a 	sub.w	r3, r3, sl
 800a62a:	9305      	str	r3, [sp, #20]
 800a62c:	f1ca 0300 	rsb	r3, sl, #0
 800a630:	9307      	str	r3, [sp, #28]
 800a632:	2300      	movs	r3, #0
 800a634:	930e      	str	r3, [sp, #56]	; 0x38
 800a636:	e7bb      	b.n	800a5b0 <_dtoa_r+0x1b0>
 800a638:	2301      	movs	r3, #1
 800a63a:	930a      	str	r3, [sp, #40]	; 0x28
 800a63c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a63e:	2b00      	cmp	r3, #0
 800a640:	dd59      	ble.n	800a6f6 <_dtoa_r+0x2f6>
 800a642:	9302      	str	r3, [sp, #8]
 800a644:	4699      	mov	r9, r3
 800a646:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800a648:	2200      	movs	r2, #0
 800a64a:	6072      	str	r2, [r6, #4]
 800a64c:	2204      	movs	r2, #4
 800a64e:	f102 0014 	add.w	r0, r2, #20
 800a652:	4298      	cmp	r0, r3
 800a654:	6871      	ldr	r1, [r6, #4]
 800a656:	d953      	bls.n	800a700 <_dtoa_r+0x300>
 800a658:	4620      	mov	r0, r4
 800a65a:	f000 fca4 	bl	800afa6 <_Balloc>
 800a65e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a660:	6030      	str	r0, [r6, #0]
 800a662:	f1b9 0f0e 	cmp.w	r9, #14
 800a666:	f8d3 b000 	ldr.w	fp, [r3]
 800a66a:	f200 80e6 	bhi.w	800a83a <_dtoa_r+0x43a>
 800a66e:	2d00      	cmp	r5, #0
 800a670:	f000 80e3 	beq.w	800a83a <_dtoa_r+0x43a>
 800a674:	ed9d 7b00 	vldr	d7, [sp]
 800a678:	f1ba 0f00 	cmp.w	sl, #0
 800a67c:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 800a680:	dd74      	ble.n	800a76c <_dtoa_r+0x36c>
 800a682:	4a2a      	ldr	r2, [pc, #168]	; (800a72c <_dtoa_r+0x32c>)
 800a684:	f00a 030f 	and.w	r3, sl, #15
 800a688:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800a68c:	ed93 7b00 	vldr	d7, [r3]
 800a690:	ea4f 162a 	mov.w	r6, sl, asr #4
 800a694:	06f0      	lsls	r0, r6, #27
 800a696:	ed8d 7b08 	vstr	d7, [sp, #32]
 800a69a:	d565      	bpl.n	800a768 <_dtoa_r+0x368>
 800a69c:	4b24      	ldr	r3, [pc, #144]	; (800a730 <_dtoa_r+0x330>)
 800a69e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800a6a2:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800a6a6:	f7f6 f8d1 	bl	800084c <__aeabi_ddiv>
 800a6aa:	e9cd 0100 	strd	r0, r1, [sp]
 800a6ae:	f006 060f 	and.w	r6, r6, #15
 800a6b2:	2503      	movs	r5, #3
 800a6b4:	4f1e      	ldr	r7, [pc, #120]	; (800a730 <_dtoa_r+0x330>)
 800a6b6:	e04c      	b.n	800a752 <_dtoa_r+0x352>
 800a6b8:	2301      	movs	r3, #1
 800a6ba:	930a      	str	r3, [sp, #40]	; 0x28
 800a6bc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a6be:	4453      	add	r3, sl
 800a6c0:	f103 0901 	add.w	r9, r3, #1
 800a6c4:	9302      	str	r3, [sp, #8]
 800a6c6:	464b      	mov	r3, r9
 800a6c8:	2b01      	cmp	r3, #1
 800a6ca:	bfb8      	it	lt
 800a6cc:	2301      	movlt	r3, #1
 800a6ce:	e7ba      	b.n	800a646 <_dtoa_r+0x246>
 800a6d0:	2300      	movs	r3, #0
 800a6d2:	e7b2      	b.n	800a63a <_dtoa_r+0x23a>
 800a6d4:	2300      	movs	r3, #0
 800a6d6:	e7f0      	b.n	800a6ba <_dtoa_r+0x2ba>
 800a6d8:	2501      	movs	r5, #1
 800a6da:	2300      	movs	r3, #0
 800a6dc:	9306      	str	r3, [sp, #24]
 800a6de:	950a      	str	r5, [sp, #40]	; 0x28
 800a6e0:	f04f 33ff 	mov.w	r3, #4294967295
 800a6e4:	9302      	str	r3, [sp, #8]
 800a6e6:	4699      	mov	r9, r3
 800a6e8:	2200      	movs	r2, #0
 800a6ea:	2312      	movs	r3, #18
 800a6ec:	920b      	str	r2, [sp, #44]	; 0x2c
 800a6ee:	e7aa      	b.n	800a646 <_dtoa_r+0x246>
 800a6f0:	2301      	movs	r3, #1
 800a6f2:	930a      	str	r3, [sp, #40]	; 0x28
 800a6f4:	e7f4      	b.n	800a6e0 <_dtoa_r+0x2e0>
 800a6f6:	2301      	movs	r3, #1
 800a6f8:	9302      	str	r3, [sp, #8]
 800a6fa:	4699      	mov	r9, r3
 800a6fc:	461a      	mov	r2, r3
 800a6fe:	e7f5      	b.n	800a6ec <_dtoa_r+0x2ec>
 800a700:	3101      	adds	r1, #1
 800a702:	6071      	str	r1, [r6, #4]
 800a704:	0052      	lsls	r2, r2, #1
 800a706:	e7a2      	b.n	800a64e <_dtoa_r+0x24e>
 800a708:	636f4361 	.word	0x636f4361
 800a70c:	3fd287a7 	.word	0x3fd287a7
 800a710:	8b60c8b3 	.word	0x8b60c8b3
 800a714:	3fc68a28 	.word	0x3fc68a28
 800a718:	509f79fb 	.word	0x509f79fb
 800a71c:	3fd34413 	.word	0x3fd34413
 800a720:	7ff00000 	.word	0x7ff00000
 800a724:	0800beb5 	.word	0x0800beb5
 800a728:	3ff80000 	.word	0x3ff80000
 800a72c:	0800bf10 	.word	0x0800bf10
 800a730:	0800bee8 	.word	0x0800bee8
 800a734:	0800bee1 	.word	0x0800bee1
 800a738:	07f1      	lsls	r1, r6, #31
 800a73a:	d508      	bpl.n	800a74e <_dtoa_r+0x34e>
 800a73c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800a740:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a744:	f7f5 ff58 	bl	80005f8 <__aeabi_dmul>
 800a748:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800a74c:	3501      	adds	r5, #1
 800a74e:	1076      	asrs	r6, r6, #1
 800a750:	3708      	adds	r7, #8
 800a752:	2e00      	cmp	r6, #0
 800a754:	d1f0      	bne.n	800a738 <_dtoa_r+0x338>
 800a756:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800a75a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a75e:	f7f6 f875 	bl	800084c <__aeabi_ddiv>
 800a762:	e9cd 0100 	strd	r0, r1, [sp]
 800a766:	e01a      	b.n	800a79e <_dtoa_r+0x39e>
 800a768:	2502      	movs	r5, #2
 800a76a:	e7a3      	b.n	800a6b4 <_dtoa_r+0x2b4>
 800a76c:	f000 80a0 	beq.w	800a8b0 <_dtoa_r+0x4b0>
 800a770:	f1ca 0600 	rsb	r6, sl, #0
 800a774:	4b9f      	ldr	r3, [pc, #636]	; (800a9f4 <_dtoa_r+0x5f4>)
 800a776:	4fa0      	ldr	r7, [pc, #640]	; (800a9f8 <_dtoa_r+0x5f8>)
 800a778:	f006 020f 	and.w	r2, r6, #15
 800a77c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a780:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a784:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800a788:	f7f5 ff36 	bl	80005f8 <__aeabi_dmul>
 800a78c:	e9cd 0100 	strd	r0, r1, [sp]
 800a790:	1136      	asrs	r6, r6, #4
 800a792:	2300      	movs	r3, #0
 800a794:	2502      	movs	r5, #2
 800a796:	2e00      	cmp	r6, #0
 800a798:	d17f      	bne.n	800a89a <_dtoa_r+0x49a>
 800a79a:	2b00      	cmp	r3, #0
 800a79c:	d1e1      	bne.n	800a762 <_dtoa_r+0x362>
 800a79e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a7a0:	2b00      	cmp	r3, #0
 800a7a2:	f000 8087 	beq.w	800a8b4 <_dtoa_r+0x4b4>
 800a7a6:	e9dd 6700 	ldrd	r6, r7, [sp]
 800a7aa:	2200      	movs	r2, #0
 800a7ac:	4b93      	ldr	r3, [pc, #588]	; (800a9fc <_dtoa_r+0x5fc>)
 800a7ae:	4630      	mov	r0, r6
 800a7b0:	4639      	mov	r1, r7
 800a7b2:	f7f6 f993 	bl	8000adc <__aeabi_dcmplt>
 800a7b6:	2800      	cmp	r0, #0
 800a7b8:	d07c      	beq.n	800a8b4 <_dtoa_r+0x4b4>
 800a7ba:	f1b9 0f00 	cmp.w	r9, #0
 800a7be:	d079      	beq.n	800a8b4 <_dtoa_r+0x4b4>
 800a7c0:	9b02      	ldr	r3, [sp, #8]
 800a7c2:	2b00      	cmp	r3, #0
 800a7c4:	dd35      	ble.n	800a832 <_dtoa_r+0x432>
 800a7c6:	f10a 33ff 	add.w	r3, sl, #4294967295
 800a7ca:	9308      	str	r3, [sp, #32]
 800a7cc:	4639      	mov	r1, r7
 800a7ce:	2200      	movs	r2, #0
 800a7d0:	4b8b      	ldr	r3, [pc, #556]	; (800aa00 <_dtoa_r+0x600>)
 800a7d2:	4630      	mov	r0, r6
 800a7d4:	f7f5 ff10 	bl	80005f8 <__aeabi_dmul>
 800a7d8:	e9cd 0100 	strd	r0, r1, [sp]
 800a7dc:	9f02      	ldr	r7, [sp, #8]
 800a7de:	3501      	adds	r5, #1
 800a7e0:	4628      	mov	r0, r5
 800a7e2:	f7f5 fe9f 	bl	8000524 <__aeabi_i2d>
 800a7e6:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a7ea:	f7f5 ff05 	bl	80005f8 <__aeabi_dmul>
 800a7ee:	2200      	movs	r2, #0
 800a7f0:	4b84      	ldr	r3, [pc, #528]	; (800aa04 <_dtoa_r+0x604>)
 800a7f2:	f7f5 fd4b 	bl	800028c <__adddf3>
 800a7f6:	4605      	mov	r5, r0
 800a7f8:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800a7fc:	2f00      	cmp	r7, #0
 800a7fe:	d15d      	bne.n	800a8bc <_dtoa_r+0x4bc>
 800a800:	2200      	movs	r2, #0
 800a802:	4b81      	ldr	r3, [pc, #516]	; (800aa08 <_dtoa_r+0x608>)
 800a804:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a808:	f7f5 fd3e 	bl	8000288 <__aeabi_dsub>
 800a80c:	462a      	mov	r2, r5
 800a80e:	4633      	mov	r3, r6
 800a810:	e9cd 0100 	strd	r0, r1, [sp]
 800a814:	f7f6 f980 	bl	8000b18 <__aeabi_dcmpgt>
 800a818:	2800      	cmp	r0, #0
 800a81a:	f040 8288 	bne.w	800ad2e <_dtoa_r+0x92e>
 800a81e:	462a      	mov	r2, r5
 800a820:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800a824:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a828:	f7f6 f958 	bl	8000adc <__aeabi_dcmplt>
 800a82c:	2800      	cmp	r0, #0
 800a82e:	f040 827c 	bne.w	800ad2a <_dtoa_r+0x92a>
 800a832:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800a836:	e9cd 2300 	strd	r2, r3, [sp]
 800a83a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a83c:	2b00      	cmp	r3, #0
 800a83e:	f2c0 8150 	blt.w	800aae2 <_dtoa_r+0x6e2>
 800a842:	f1ba 0f0e 	cmp.w	sl, #14
 800a846:	f300 814c 	bgt.w	800aae2 <_dtoa_r+0x6e2>
 800a84a:	4b6a      	ldr	r3, [pc, #424]	; (800a9f4 <_dtoa_r+0x5f4>)
 800a84c:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800a850:	ed93 7b00 	vldr	d7, [r3]
 800a854:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a856:	2b00      	cmp	r3, #0
 800a858:	ed8d 7b02 	vstr	d7, [sp, #8]
 800a85c:	f280 80d8 	bge.w	800aa10 <_dtoa_r+0x610>
 800a860:	f1b9 0f00 	cmp.w	r9, #0
 800a864:	f300 80d4 	bgt.w	800aa10 <_dtoa_r+0x610>
 800a868:	f040 825e 	bne.w	800ad28 <_dtoa_r+0x928>
 800a86c:	2200      	movs	r2, #0
 800a86e:	4b66      	ldr	r3, [pc, #408]	; (800aa08 <_dtoa_r+0x608>)
 800a870:	ec51 0b17 	vmov	r0, r1, d7
 800a874:	f7f5 fec0 	bl	80005f8 <__aeabi_dmul>
 800a878:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a87c:	f7f6 f942 	bl	8000b04 <__aeabi_dcmpge>
 800a880:	464f      	mov	r7, r9
 800a882:	464e      	mov	r6, r9
 800a884:	2800      	cmp	r0, #0
 800a886:	f040 8234 	bne.w	800acf2 <_dtoa_r+0x8f2>
 800a88a:	2331      	movs	r3, #49	; 0x31
 800a88c:	f10b 0501 	add.w	r5, fp, #1
 800a890:	f88b 3000 	strb.w	r3, [fp]
 800a894:	f10a 0a01 	add.w	sl, sl, #1
 800a898:	e22f      	b.n	800acfa <_dtoa_r+0x8fa>
 800a89a:	07f2      	lsls	r2, r6, #31
 800a89c:	d505      	bpl.n	800a8aa <_dtoa_r+0x4aa>
 800a89e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a8a2:	f7f5 fea9 	bl	80005f8 <__aeabi_dmul>
 800a8a6:	3501      	adds	r5, #1
 800a8a8:	2301      	movs	r3, #1
 800a8aa:	1076      	asrs	r6, r6, #1
 800a8ac:	3708      	adds	r7, #8
 800a8ae:	e772      	b.n	800a796 <_dtoa_r+0x396>
 800a8b0:	2502      	movs	r5, #2
 800a8b2:	e774      	b.n	800a79e <_dtoa_r+0x39e>
 800a8b4:	f8cd a020 	str.w	sl, [sp, #32]
 800a8b8:	464f      	mov	r7, r9
 800a8ba:	e791      	b.n	800a7e0 <_dtoa_r+0x3e0>
 800a8bc:	4b4d      	ldr	r3, [pc, #308]	; (800a9f4 <_dtoa_r+0x5f4>)
 800a8be:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800a8c2:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 800a8c6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a8c8:	2b00      	cmp	r3, #0
 800a8ca:	d047      	beq.n	800a95c <_dtoa_r+0x55c>
 800a8cc:	4602      	mov	r2, r0
 800a8ce:	460b      	mov	r3, r1
 800a8d0:	2000      	movs	r0, #0
 800a8d2:	494e      	ldr	r1, [pc, #312]	; (800aa0c <_dtoa_r+0x60c>)
 800a8d4:	f7f5 ffba 	bl	800084c <__aeabi_ddiv>
 800a8d8:	462a      	mov	r2, r5
 800a8da:	4633      	mov	r3, r6
 800a8dc:	f7f5 fcd4 	bl	8000288 <__aeabi_dsub>
 800a8e0:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800a8e4:	465d      	mov	r5, fp
 800a8e6:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a8ea:	f7f6 f935 	bl	8000b58 <__aeabi_d2iz>
 800a8ee:	4606      	mov	r6, r0
 800a8f0:	f7f5 fe18 	bl	8000524 <__aeabi_i2d>
 800a8f4:	4602      	mov	r2, r0
 800a8f6:	460b      	mov	r3, r1
 800a8f8:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a8fc:	f7f5 fcc4 	bl	8000288 <__aeabi_dsub>
 800a900:	3630      	adds	r6, #48	; 0x30
 800a902:	f805 6b01 	strb.w	r6, [r5], #1
 800a906:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800a90a:	e9cd 0100 	strd	r0, r1, [sp]
 800a90e:	f7f6 f8e5 	bl	8000adc <__aeabi_dcmplt>
 800a912:	2800      	cmp	r0, #0
 800a914:	d163      	bne.n	800a9de <_dtoa_r+0x5de>
 800a916:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a91a:	2000      	movs	r0, #0
 800a91c:	4937      	ldr	r1, [pc, #220]	; (800a9fc <_dtoa_r+0x5fc>)
 800a91e:	f7f5 fcb3 	bl	8000288 <__aeabi_dsub>
 800a922:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800a926:	f7f6 f8d9 	bl	8000adc <__aeabi_dcmplt>
 800a92a:	2800      	cmp	r0, #0
 800a92c:	f040 80b7 	bne.w	800aa9e <_dtoa_r+0x69e>
 800a930:	eba5 030b 	sub.w	r3, r5, fp
 800a934:	429f      	cmp	r7, r3
 800a936:	f77f af7c 	ble.w	800a832 <_dtoa_r+0x432>
 800a93a:	2200      	movs	r2, #0
 800a93c:	4b30      	ldr	r3, [pc, #192]	; (800aa00 <_dtoa_r+0x600>)
 800a93e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800a942:	f7f5 fe59 	bl	80005f8 <__aeabi_dmul>
 800a946:	2200      	movs	r2, #0
 800a948:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800a94c:	4b2c      	ldr	r3, [pc, #176]	; (800aa00 <_dtoa_r+0x600>)
 800a94e:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a952:	f7f5 fe51 	bl	80005f8 <__aeabi_dmul>
 800a956:	e9cd 0100 	strd	r0, r1, [sp]
 800a95a:	e7c4      	b.n	800a8e6 <_dtoa_r+0x4e6>
 800a95c:	462a      	mov	r2, r5
 800a95e:	4633      	mov	r3, r6
 800a960:	f7f5 fe4a 	bl	80005f8 <__aeabi_dmul>
 800a964:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800a968:	eb0b 0507 	add.w	r5, fp, r7
 800a96c:	465e      	mov	r6, fp
 800a96e:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a972:	f7f6 f8f1 	bl	8000b58 <__aeabi_d2iz>
 800a976:	4607      	mov	r7, r0
 800a978:	f7f5 fdd4 	bl	8000524 <__aeabi_i2d>
 800a97c:	3730      	adds	r7, #48	; 0x30
 800a97e:	4602      	mov	r2, r0
 800a980:	460b      	mov	r3, r1
 800a982:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a986:	f7f5 fc7f 	bl	8000288 <__aeabi_dsub>
 800a98a:	f806 7b01 	strb.w	r7, [r6], #1
 800a98e:	42ae      	cmp	r6, r5
 800a990:	e9cd 0100 	strd	r0, r1, [sp]
 800a994:	f04f 0200 	mov.w	r2, #0
 800a998:	d126      	bne.n	800a9e8 <_dtoa_r+0x5e8>
 800a99a:	4b1c      	ldr	r3, [pc, #112]	; (800aa0c <_dtoa_r+0x60c>)
 800a99c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800a9a0:	f7f5 fc74 	bl	800028c <__adddf3>
 800a9a4:	4602      	mov	r2, r0
 800a9a6:	460b      	mov	r3, r1
 800a9a8:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a9ac:	f7f6 f8b4 	bl	8000b18 <__aeabi_dcmpgt>
 800a9b0:	2800      	cmp	r0, #0
 800a9b2:	d174      	bne.n	800aa9e <_dtoa_r+0x69e>
 800a9b4:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800a9b8:	2000      	movs	r0, #0
 800a9ba:	4914      	ldr	r1, [pc, #80]	; (800aa0c <_dtoa_r+0x60c>)
 800a9bc:	f7f5 fc64 	bl	8000288 <__aeabi_dsub>
 800a9c0:	4602      	mov	r2, r0
 800a9c2:	460b      	mov	r3, r1
 800a9c4:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a9c8:	f7f6 f888 	bl	8000adc <__aeabi_dcmplt>
 800a9cc:	2800      	cmp	r0, #0
 800a9ce:	f43f af30 	beq.w	800a832 <_dtoa_r+0x432>
 800a9d2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800a9d6:	2b30      	cmp	r3, #48	; 0x30
 800a9d8:	f105 32ff 	add.w	r2, r5, #4294967295
 800a9dc:	d002      	beq.n	800a9e4 <_dtoa_r+0x5e4>
 800a9de:	f8dd a020 	ldr.w	sl, [sp, #32]
 800a9e2:	e04a      	b.n	800aa7a <_dtoa_r+0x67a>
 800a9e4:	4615      	mov	r5, r2
 800a9e6:	e7f4      	b.n	800a9d2 <_dtoa_r+0x5d2>
 800a9e8:	4b05      	ldr	r3, [pc, #20]	; (800aa00 <_dtoa_r+0x600>)
 800a9ea:	f7f5 fe05 	bl	80005f8 <__aeabi_dmul>
 800a9ee:	e9cd 0100 	strd	r0, r1, [sp]
 800a9f2:	e7bc      	b.n	800a96e <_dtoa_r+0x56e>
 800a9f4:	0800bf10 	.word	0x0800bf10
 800a9f8:	0800bee8 	.word	0x0800bee8
 800a9fc:	3ff00000 	.word	0x3ff00000
 800aa00:	40240000 	.word	0x40240000
 800aa04:	401c0000 	.word	0x401c0000
 800aa08:	40140000 	.word	0x40140000
 800aa0c:	3fe00000 	.word	0x3fe00000
 800aa10:	e9dd 6700 	ldrd	r6, r7, [sp]
 800aa14:	465d      	mov	r5, fp
 800aa16:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800aa1a:	4630      	mov	r0, r6
 800aa1c:	4639      	mov	r1, r7
 800aa1e:	f7f5 ff15 	bl	800084c <__aeabi_ddiv>
 800aa22:	f7f6 f899 	bl	8000b58 <__aeabi_d2iz>
 800aa26:	4680      	mov	r8, r0
 800aa28:	f7f5 fd7c 	bl	8000524 <__aeabi_i2d>
 800aa2c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800aa30:	f7f5 fde2 	bl	80005f8 <__aeabi_dmul>
 800aa34:	4602      	mov	r2, r0
 800aa36:	460b      	mov	r3, r1
 800aa38:	4630      	mov	r0, r6
 800aa3a:	4639      	mov	r1, r7
 800aa3c:	f108 0630 	add.w	r6, r8, #48	; 0x30
 800aa40:	f7f5 fc22 	bl	8000288 <__aeabi_dsub>
 800aa44:	f805 6b01 	strb.w	r6, [r5], #1
 800aa48:	eba5 060b 	sub.w	r6, r5, fp
 800aa4c:	45b1      	cmp	r9, r6
 800aa4e:	4602      	mov	r2, r0
 800aa50:	460b      	mov	r3, r1
 800aa52:	d139      	bne.n	800aac8 <_dtoa_r+0x6c8>
 800aa54:	f7f5 fc1a 	bl	800028c <__adddf3>
 800aa58:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800aa5c:	4606      	mov	r6, r0
 800aa5e:	460f      	mov	r7, r1
 800aa60:	f7f6 f85a 	bl	8000b18 <__aeabi_dcmpgt>
 800aa64:	b9c8      	cbnz	r0, 800aa9a <_dtoa_r+0x69a>
 800aa66:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800aa6a:	4630      	mov	r0, r6
 800aa6c:	4639      	mov	r1, r7
 800aa6e:	f7f6 f82b 	bl	8000ac8 <__aeabi_dcmpeq>
 800aa72:	b110      	cbz	r0, 800aa7a <_dtoa_r+0x67a>
 800aa74:	f018 0f01 	tst.w	r8, #1
 800aa78:	d10f      	bne.n	800aa9a <_dtoa_r+0x69a>
 800aa7a:	9904      	ldr	r1, [sp, #16]
 800aa7c:	4620      	mov	r0, r4
 800aa7e:	f000 fac6 	bl	800b00e <_Bfree>
 800aa82:	2300      	movs	r3, #0
 800aa84:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800aa86:	702b      	strb	r3, [r5, #0]
 800aa88:	f10a 0301 	add.w	r3, sl, #1
 800aa8c:	6013      	str	r3, [r2, #0]
 800aa8e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800aa90:	2b00      	cmp	r3, #0
 800aa92:	f000 8241 	beq.w	800af18 <_dtoa_r+0xb18>
 800aa96:	601d      	str	r5, [r3, #0]
 800aa98:	e23e      	b.n	800af18 <_dtoa_r+0xb18>
 800aa9a:	f8cd a020 	str.w	sl, [sp, #32]
 800aa9e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800aaa2:	2a39      	cmp	r2, #57	; 0x39
 800aaa4:	f105 33ff 	add.w	r3, r5, #4294967295
 800aaa8:	d108      	bne.n	800aabc <_dtoa_r+0x6bc>
 800aaaa:	459b      	cmp	fp, r3
 800aaac:	d10a      	bne.n	800aac4 <_dtoa_r+0x6c4>
 800aaae:	9b08      	ldr	r3, [sp, #32]
 800aab0:	3301      	adds	r3, #1
 800aab2:	9308      	str	r3, [sp, #32]
 800aab4:	2330      	movs	r3, #48	; 0x30
 800aab6:	f88b 3000 	strb.w	r3, [fp]
 800aaba:	465b      	mov	r3, fp
 800aabc:	781a      	ldrb	r2, [r3, #0]
 800aabe:	3201      	adds	r2, #1
 800aac0:	701a      	strb	r2, [r3, #0]
 800aac2:	e78c      	b.n	800a9de <_dtoa_r+0x5de>
 800aac4:	461d      	mov	r5, r3
 800aac6:	e7ea      	b.n	800aa9e <_dtoa_r+0x69e>
 800aac8:	2200      	movs	r2, #0
 800aaca:	4b9b      	ldr	r3, [pc, #620]	; (800ad38 <_dtoa_r+0x938>)
 800aacc:	f7f5 fd94 	bl	80005f8 <__aeabi_dmul>
 800aad0:	2200      	movs	r2, #0
 800aad2:	2300      	movs	r3, #0
 800aad4:	4606      	mov	r6, r0
 800aad6:	460f      	mov	r7, r1
 800aad8:	f7f5 fff6 	bl	8000ac8 <__aeabi_dcmpeq>
 800aadc:	2800      	cmp	r0, #0
 800aade:	d09a      	beq.n	800aa16 <_dtoa_r+0x616>
 800aae0:	e7cb      	b.n	800aa7a <_dtoa_r+0x67a>
 800aae2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800aae4:	2a00      	cmp	r2, #0
 800aae6:	f000 808b 	beq.w	800ac00 <_dtoa_r+0x800>
 800aaea:	9a06      	ldr	r2, [sp, #24]
 800aaec:	2a01      	cmp	r2, #1
 800aaee:	dc6e      	bgt.n	800abce <_dtoa_r+0x7ce>
 800aaf0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800aaf2:	2a00      	cmp	r2, #0
 800aaf4:	d067      	beq.n	800abc6 <_dtoa_r+0x7c6>
 800aaf6:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800aafa:	9f07      	ldr	r7, [sp, #28]
 800aafc:	9d05      	ldr	r5, [sp, #20]
 800aafe:	9a05      	ldr	r2, [sp, #20]
 800ab00:	2101      	movs	r1, #1
 800ab02:	441a      	add	r2, r3
 800ab04:	4620      	mov	r0, r4
 800ab06:	9205      	str	r2, [sp, #20]
 800ab08:	4498      	add	r8, r3
 800ab0a:	f000 fb20 	bl	800b14e <__i2b>
 800ab0e:	4606      	mov	r6, r0
 800ab10:	2d00      	cmp	r5, #0
 800ab12:	dd0c      	ble.n	800ab2e <_dtoa_r+0x72e>
 800ab14:	f1b8 0f00 	cmp.w	r8, #0
 800ab18:	dd09      	ble.n	800ab2e <_dtoa_r+0x72e>
 800ab1a:	4545      	cmp	r5, r8
 800ab1c:	9a05      	ldr	r2, [sp, #20]
 800ab1e:	462b      	mov	r3, r5
 800ab20:	bfa8      	it	ge
 800ab22:	4643      	movge	r3, r8
 800ab24:	1ad2      	subs	r2, r2, r3
 800ab26:	9205      	str	r2, [sp, #20]
 800ab28:	1aed      	subs	r5, r5, r3
 800ab2a:	eba8 0803 	sub.w	r8, r8, r3
 800ab2e:	9b07      	ldr	r3, [sp, #28]
 800ab30:	b1eb      	cbz	r3, 800ab6e <_dtoa_r+0x76e>
 800ab32:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ab34:	2b00      	cmp	r3, #0
 800ab36:	d067      	beq.n	800ac08 <_dtoa_r+0x808>
 800ab38:	b18f      	cbz	r7, 800ab5e <_dtoa_r+0x75e>
 800ab3a:	4631      	mov	r1, r6
 800ab3c:	463a      	mov	r2, r7
 800ab3e:	4620      	mov	r0, r4
 800ab40:	f000 fba4 	bl	800b28c <__pow5mult>
 800ab44:	9a04      	ldr	r2, [sp, #16]
 800ab46:	4601      	mov	r1, r0
 800ab48:	4606      	mov	r6, r0
 800ab4a:	4620      	mov	r0, r4
 800ab4c:	f000 fb08 	bl	800b160 <__multiply>
 800ab50:	9904      	ldr	r1, [sp, #16]
 800ab52:	9008      	str	r0, [sp, #32]
 800ab54:	4620      	mov	r0, r4
 800ab56:	f000 fa5a 	bl	800b00e <_Bfree>
 800ab5a:	9b08      	ldr	r3, [sp, #32]
 800ab5c:	9304      	str	r3, [sp, #16]
 800ab5e:	9b07      	ldr	r3, [sp, #28]
 800ab60:	1bda      	subs	r2, r3, r7
 800ab62:	d004      	beq.n	800ab6e <_dtoa_r+0x76e>
 800ab64:	9904      	ldr	r1, [sp, #16]
 800ab66:	4620      	mov	r0, r4
 800ab68:	f000 fb90 	bl	800b28c <__pow5mult>
 800ab6c:	9004      	str	r0, [sp, #16]
 800ab6e:	2101      	movs	r1, #1
 800ab70:	4620      	mov	r0, r4
 800ab72:	f000 faec 	bl	800b14e <__i2b>
 800ab76:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ab78:	4607      	mov	r7, r0
 800ab7a:	2b00      	cmp	r3, #0
 800ab7c:	f000 81d0 	beq.w	800af20 <_dtoa_r+0xb20>
 800ab80:	461a      	mov	r2, r3
 800ab82:	4601      	mov	r1, r0
 800ab84:	4620      	mov	r0, r4
 800ab86:	f000 fb81 	bl	800b28c <__pow5mult>
 800ab8a:	9b06      	ldr	r3, [sp, #24]
 800ab8c:	2b01      	cmp	r3, #1
 800ab8e:	4607      	mov	r7, r0
 800ab90:	dc40      	bgt.n	800ac14 <_dtoa_r+0x814>
 800ab92:	9b00      	ldr	r3, [sp, #0]
 800ab94:	2b00      	cmp	r3, #0
 800ab96:	d139      	bne.n	800ac0c <_dtoa_r+0x80c>
 800ab98:	9b01      	ldr	r3, [sp, #4]
 800ab9a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ab9e:	2b00      	cmp	r3, #0
 800aba0:	d136      	bne.n	800ac10 <_dtoa_r+0x810>
 800aba2:	9b01      	ldr	r3, [sp, #4]
 800aba4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800aba8:	0d1b      	lsrs	r3, r3, #20
 800abaa:	051b      	lsls	r3, r3, #20
 800abac:	b12b      	cbz	r3, 800abba <_dtoa_r+0x7ba>
 800abae:	9b05      	ldr	r3, [sp, #20]
 800abb0:	3301      	adds	r3, #1
 800abb2:	9305      	str	r3, [sp, #20]
 800abb4:	f108 0801 	add.w	r8, r8, #1
 800abb8:	2301      	movs	r3, #1
 800abba:	9307      	str	r3, [sp, #28]
 800abbc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800abbe:	2b00      	cmp	r3, #0
 800abc0:	d12a      	bne.n	800ac18 <_dtoa_r+0x818>
 800abc2:	2001      	movs	r0, #1
 800abc4:	e030      	b.n	800ac28 <_dtoa_r+0x828>
 800abc6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800abc8:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800abcc:	e795      	b.n	800aafa <_dtoa_r+0x6fa>
 800abce:	9b07      	ldr	r3, [sp, #28]
 800abd0:	f109 37ff 	add.w	r7, r9, #4294967295
 800abd4:	42bb      	cmp	r3, r7
 800abd6:	bfbf      	itttt	lt
 800abd8:	9b07      	ldrlt	r3, [sp, #28]
 800abda:	9707      	strlt	r7, [sp, #28]
 800abdc:	1afa      	sublt	r2, r7, r3
 800abde:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800abe0:	bfbb      	ittet	lt
 800abe2:	189b      	addlt	r3, r3, r2
 800abe4:	930e      	strlt	r3, [sp, #56]	; 0x38
 800abe6:	1bdf      	subge	r7, r3, r7
 800abe8:	2700      	movlt	r7, #0
 800abea:	f1b9 0f00 	cmp.w	r9, #0
 800abee:	bfb5      	itete	lt
 800abf0:	9b05      	ldrlt	r3, [sp, #20]
 800abf2:	9d05      	ldrge	r5, [sp, #20]
 800abf4:	eba3 0509 	sublt.w	r5, r3, r9
 800abf8:	464b      	movge	r3, r9
 800abfa:	bfb8      	it	lt
 800abfc:	2300      	movlt	r3, #0
 800abfe:	e77e      	b.n	800aafe <_dtoa_r+0x6fe>
 800ac00:	9f07      	ldr	r7, [sp, #28]
 800ac02:	9d05      	ldr	r5, [sp, #20]
 800ac04:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800ac06:	e783      	b.n	800ab10 <_dtoa_r+0x710>
 800ac08:	9a07      	ldr	r2, [sp, #28]
 800ac0a:	e7ab      	b.n	800ab64 <_dtoa_r+0x764>
 800ac0c:	2300      	movs	r3, #0
 800ac0e:	e7d4      	b.n	800abba <_dtoa_r+0x7ba>
 800ac10:	9b00      	ldr	r3, [sp, #0]
 800ac12:	e7d2      	b.n	800abba <_dtoa_r+0x7ba>
 800ac14:	2300      	movs	r3, #0
 800ac16:	9307      	str	r3, [sp, #28]
 800ac18:	693b      	ldr	r3, [r7, #16]
 800ac1a:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 800ac1e:	6918      	ldr	r0, [r3, #16]
 800ac20:	f000 fa47 	bl	800b0b2 <__hi0bits>
 800ac24:	f1c0 0020 	rsb	r0, r0, #32
 800ac28:	4440      	add	r0, r8
 800ac2a:	f010 001f 	ands.w	r0, r0, #31
 800ac2e:	d047      	beq.n	800acc0 <_dtoa_r+0x8c0>
 800ac30:	f1c0 0320 	rsb	r3, r0, #32
 800ac34:	2b04      	cmp	r3, #4
 800ac36:	dd3b      	ble.n	800acb0 <_dtoa_r+0x8b0>
 800ac38:	9b05      	ldr	r3, [sp, #20]
 800ac3a:	f1c0 001c 	rsb	r0, r0, #28
 800ac3e:	4403      	add	r3, r0
 800ac40:	9305      	str	r3, [sp, #20]
 800ac42:	4405      	add	r5, r0
 800ac44:	4480      	add	r8, r0
 800ac46:	9b05      	ldr	r3, [sp, #20]
 800ac48:	2b00      	cmp	r3, #0
 800ac4a:	dd05      	ble.n	800ac58 <_dtoa_r+0x858>
 800ac4c:	461a      	mov	r2, r3
 800ac4e:	9904      	ldr	r1, [sp, #16]
 800ac50:	4620      	mov	r0, r4
 800ac52:	f000 fb69 	bl	800b328 <__lshift>
 800ac56:	9004      	str	r0, [sp, #16]
 800ac58:	f1b8 0f00 	cmp.w	r8, #0
 800ac5c:	dd05      	ble.n	800ac6a <_dtoa_r+0x86a>
 800ac5e:	4639      	mov	r1, r7
 800ac60:	4642      	mov	r2, r8
 800ac62:	4620      	mov	r0, r4
 800ac64:	f000 fb60 	bl	800b328 <__lshift>
 800ac68:	4607      	mov	r7, r0
 800ac6a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ac6c:	b353      	cbz	r3, 800acc4 <_dtoa_r+0x8c4>
 800ac6e:	4639      	mov	r1, r7
 800ac70:	9804      	ldr	r0, [sp, #16]
 800ac72:	f000 fbad 	bl	800b3d0 <__mcmp>
 800ac76:	2800      	cmp	r0, #0
 800ac78:	da24      	bge.n	800acc4 <_dtoa_r+0x8c4>
 800ac7a:	2300      	movs	r3, #0
 800ac7c:	220a      	movs	r2, #10
 800ac7e:	9904      	ldr	r1, [sp, #16]
 800ac80:	4620      	mov	r0, r4
 800ac82:	f000 f9db 	bl	800b03c <__multadd>
 800ac86:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ac88:	9004      	str	r0, [sp, #16]
 800ac8a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800ac8e:	2b00      	cmp	r3, #0
 800ac90:	f000 814d 	beq.w	800af2e <_dtoa_r+0xb2e>
 800ac94:	2300      	movs	r3, #0
 800ac96:	4631      	mov	r1, r6
 800ac98:	220a      	movs	r2, #10
 800ac9a:	4620      	mov	r0, r4
 800ac9c:	f000 f9ce 	bl	800b03c <__multadd>
 800aca0:	9b02      	ldr	r3, [sp, #8]
 800aca2:	2b00      	cmp	r3, #0
 800aca4:	4606      	mov	r6, r0
 800aca6:	dc4f      	bgt.n	800ad48 <_dtoa_r+0x948>
 800aca8:	9b06      	ldr	r3, [sp, #24]
 800acaa:	2b02      	cmp	r3, #2
 800acac:	dd4c      	ble.n	800ad48 <_dtoa_r+0x948>
 800acae:	e011      	b.n	800acd4 <_dtoa_r+0x8d4>
 800acb0:	d0c9      	beq.n	800ac46 <_dtoa_r+0x846>
 800acb2:	9a05      	ldr	r2, [sp, #20]
 800acb4:	331c      	adds	r3, #28
 800acb6:	441a      	add	r2, r3
 800acb8:	9205      	str	r2, [sp, #20]
 800acba:	441d      	add	r5, r3
 800acbc:	4498      	add	r8, r3
 800acbe:	e7c2      	b.n	800ac46 <_dtoa_r+0x846>
 800acc0:	4603      	mov	r3, r0
 800acc2:	e7f6      	b.n	800acb2 <_dtoa_r+0x8b2>
 800acc4:	f1b9 0f00 	cmp.w	r9, #0
 800acc8:	dc38      	bgt.n	800ad3c <_dtoa_r+0x93c>
 800acca:	9b06      	ldr	r3, [sp, #24]
 800accc:	2b02      	cmp	r3, #2
 800acce:	dd35      	ble.n	800ad3c <_dtoa_r+0x93c>
 800acd0:	f8cd 9008 	str.w	r9, [sp, #8]
 800acd4:	9b02      	ldr	r3, [sp, #8]
 800acd6:	b963      	cbnz	r3, 800acf2 <_dtoa_r+0x8f2>
 800acd8:	4639      	mov	r1, r7
 800acda:	2205      	movs	r2, #5
 800acdc:	4620      	mov	r0, r4
 800acde:	f000 f9ad 	bl	800b03c <__multadd>
 800ace2:	4601      	mov	r1, r0
 800ace4:	4607      	mov	r7, r0
 800ace6:	9804      	ldr	r0, [sp, #16]
 800ace8:	f000 fb72 	bl	800b3d0 <__mcmp>
 800acec:	2800      	cmp	r0, #0
 800acee:	f73f adcc 	bgt.w	800a88a <_dtoa_r+0x48a>
 800acf2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800acf4:	465d      	mov	r5, fp
 800acf6:	ea6f 0a03 	mvn.w	sl, r3
 800acfa:	f04f 0900 	mov.w	r9, #0
 800acfe:	4639      	mov	r1, r7
 800ad00:	4620      	mov	r0, r4
 800ad02:	f000 f984 	bl	800b00e <_Bfree>
 800ad06:	2e00      	cmp	r6, #0
 800ad08:	f43f aeb7 	beq.w	800aa7a <_dtoa_r+0x67a>
 800ad0c:	f1b9 0f00 	cmp.w	r9, #0
 800ad10:	d005      	beq.n	800ad1e <_dtoa_r+0x91e>
 800ad12:	45b1      	cmp	r9, r6
 800ad14:	d003      	beq.n	800ad1e <_dtoa_r+0x91e>
 800ad16:	4649      	mov	r1, r9
 800ad18:	4620      	mov	r0, r4
 800ad1a:	f000 f978 	bl	800b00e <_Bfree>
 800ad1e:	4631      	mov	r1, r6
 800ad20:	4620      	mov	r0, r4
 800ad22:	f000 f974 	bl	800b00e <_Bfree>
 800ad26:	e6a8      	b.n	800aa7a <_dtoa_r+0x67a>
 800ad28:	2700      	movs	r7, #0
 800ad2a:	463e      	mov	r6, r7
 800ad2c:	e7e1      	b.n	800acf2 <_dtoa_r+0x8f2>
 800ad2e:	f8dd a020 	ldr.w	sl, [sp, #32]
 800ad32:	463e      	mov	r6, r7
 800ad34:	e5a9      	b.n	800a88a <_dtoa_r+0x48a>
 800ad36:	bf00      	nop
 800ad38:	40240000 	.word	0x40240000
 800ad3c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ad3e:	f8cd 9008 	str.w	r9, [sp, #8]
 800ad42:	2b00      	cmp	r3, #0
 800ad44:	f000 80fa 	beq.w	800af3c <_dtoa_r+0xb3c>
 800ad48:	2d00      	cmp	r5, #0
 800ad4a:	dd05      	ble.n	800ad58 <_dtoa_r+0x958>
 800ad4c:	4631      	mov	r1, r6
 800ad4e:	462a      	mov	r2, r5
 800ad50:	4620      	mov	r0, r4
 800ad52:	f000 fae9 	bl	800b328 <__lshift>
 800ad56:	4606      	mov	r6, r0
 800ad58:	9b07      	ldr	r3, [sp, #28]
 800ad5a:	2b00      	cmp	r3, #0
 800ad5c:	d04c      	beq.n	800adf8 <_dtoa_r+0x9f8>
 800ad5e:	6871      	ldr	r1, [r6, #4]
 800ad60:	4620      	mov	r0, r4
 800ad62:	f000 f920 	bl	800afa6 <_Balloc>
 800ad66:	6932      	ldr	r2, [r6, #16]
 800ad68:	3202      	adds	r2, #2
 800ad6a:	4605      	mov	r5, r0
 800ad6c:	0092      	lsls	r2, r2, #2
 800ad6e:	f106 010c 	add.w	r1, r6, #12
 800ad72:	300c      	adds	r0, #12
 800ad74:	f000 f90a 	bl	800af8c <memcpy>
 800ad78:	2201      	movs	r2, #1
 800ad7a:	4629      	mov	r1, r5
 800ad7c:	4620      	mov	r0, r4
 800ad7e:	f000 fad3 	bl	800b328 <__lshift>
 800ad82:	9b00      	ldr	r3, [sp, #0]
 800ad84:	f8cd b014 	str.w	fp, [sp, #20]
 800ad88:	f003 0301 	and.w	r3, r3, #1
 800ad8c:	46b1      	mov	r9, r6
 800ad8e:	9307      	str	r3, [sp, #28]
 800ad90:	4606      	mov	r6, r0
 800ad92:	4639      	mov	r1, r7
 800ad94:	9804      	ldr	r0, [sp, #16]
 800ad96:	f7ff faa5 	bl	800a2e4 <quorem>
 800ad9a:	4649      	mov	r1, r9
 800ad9c:	4605      	mov	r5, r0
 800ad9e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800ada2:	9804      	ldr	r0, [sp, #16]
 800ada4:	f000 fb14 	bl	800b3d0 <__mcmp>
 800ada8:	4632      	mov	r2, r6
 800adaa:	9000      	str	r0, [sp, #0]
 800adac:	4639      	mov	r1, r7
 800adae:	4620      	mov	r0, r4
 800adb0:	f000 fb28 	bl	800b404 <__mdiff>
 800adb4:	68c3      	ldr	r3, [r0, #12]
 800adb6:	4602      	mov	r2, r0
 800adb8:	bb03      	cbnz	r3, 800adfc <_dtoa_r+0x9fc>
 800adba:	4601      	mov	r1, r0
 800adbc:	9008      	str	r0, [sp, #32]
 800adbe:	9804      	ldr	r0, [sp, #16]
 800adc0:	f000 fb06 	bl	800b3d0 <__mcmp>
 800adc4:	9a08      	ldr	r2, [sp, #32]
 800adc6:	4603      	mov	r3, r0
 800adc8:	4611      	mov	r1, r2
 800adca:	4620      	mov	r0, r4
 800adcc:	9308      	str	r3, [sp, #32]
 800adce:	f000 f91e 	bl	800b00e <_Bfree>
 800add2:	9b08      	ldr	r3, [sp, #32]
 800add4:	b9a3      	cbnz	r3, 800ae00 <_dtoa_r+0xa00>
 800add6:	9a06      	ldr	r2, [sp, #24]
 800add8:	b992      	cbnz	r2, 800ae00 <_dtoa_r+0xa00>
 800adda:	9a07      	ldr	r2, [sp, #28]
 800addc:	b982      	cbnz	r2, 800ae00 <_dtoa_r+0xa00>
 800adde:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800ade2:	d029      	beq.n	800ae38 <_dtoa_r+0xa38>
 800ade4:	9b00      	ldr	r3, [sp, #0]
 800ade6:	2b00      	cmp	r3, #0
 800ade8:	dd01      	ble.n	800adee <_dtoa_r+0x9ee>
 800adea:	f105 0831 	add.w	r8, r5, #49	; 0x31
 800adee:	9b05      	ldr	r3, [sp, #20]
 800adf0:	1c5d      	adds	r5, r3, #1
 800adf2:	f883 8000 	strb.w	r8, [r3]
 800adf6:	e782      	b.n	800acfe <_dtoa_r+0x8fe>
 800adf8:	4630      	mov	r0, r6
 800adfa:	e7c2      	b.n	800ad82 <_dtoa_r+0x982>
 800adfc:	2301      	movs	r3, #1
 800adfe:	e7e3      	b.n	800adc8 <_dtoa_r+0x9c8>
 800ae00:	9a00      	ldr	r2, [sp, #0]
 800ae02:	2a00      	cmp	r2, #0
 800ae04:	db04      	blt.n	800ae10 <_dtoa_r+0xa10>
 800ae06:	d125      	bne.n	800ae54 <_dtoa_r+0xa54>
 800ae08:	9a06      	ldr	r2, [sp, #24]
 800ae0a:	bb1a      	cbnz	r2, 800ae54 <_dtoa_r+0xa54>
 800ae0c:	9a07      	ldr	r2, [sp, #28]
 800ae0e:	bb0a      	cbnz	r2, 800ae54 <_dtoa_r+0xa54>
 800ae10:	2b00      	cmp	r3, #0
 800ae12:	ddec      	ble.n	800adee <_dtoa_r+0x9ee>
 800ae14:	2201      	movs	r2, #1
 800ae16:	9904      	ldr	r1, [sp, #16]
 800ae18:	4620      	mov	r0, r4
 800ae1a:	f000 fa85 	bl	800b328 <__lshift>
 800ae1e:	4639      	mov	r1, r7
 800ae20:	9004      	str	r0, [sp, #16]
 800ae22:	f000 fad5 	bl	800b3d0 <__mcmp>
 800ae26:	2800      	cmp	r0, #0
 800ae28:	dc03      	bgt.n	800ae32 <_dtoa_r+0xa32>
 800ae2a:	d1e0      	bne.n	800adee <_dtoa_r+0x9ee>
 800ae2c:	f018 0f01 	tst.w	r8, #1
 800ae30:	d0dd      	beq.n	800adee <_dtoa_r+0x9ee>
 800ae32:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800ae36:	d1d8      	bne.n	800adea <_dtoa_r+0x9ea>
 800ae38:	9b05      	ldr	r3, [sp, #20]
 800ae3a:	9a05      	ldr	r2, [sp, #20]
 800ae3c:	1c5d      	adds	r5, r3, #1
 800ae3e:	2339      	movs	r3, #57	; 0x39
 800ae40:	7013      	strb	r3, [r2, #0]
 800ae42:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800ae46:	2b39      	cmp	r3, #57	; 0x39
 800ae48:	f105 32ff 	add.w	r2, r5, #4294967295
 800ae4c:	d04f      	beq.n	800aeee <_dtoa_r+0xaee>
 800ae4e:	3301      	adds	r3, #1
 800ae50:	7013      	strb	r3, [r2, #0]
 800ae52:	e754      	b.n	800acfe <_dtoa_r+0x8fe>
 800ae54:	9a05      	ldr	r2, [sp, #20]
 800ae56:	2b00      	cmp	r3, #0
 800ae58:	f102 0501 	add.w	r5, r2, #1
 800ae5c:	dd06      	ble.n	800ae6c <_dtoa_r+0xa6c>
 800ae5e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800ae62:	d0e9      	beq.n	800ae38 <_dtoa_r+0xa38>
 800ae64:	f108 0801 	add.w	r8, r8, #1
 800ae68:	9b05      	ldr	r3, [sp, #20]
 800ae6a:	e7c2      	b.n	800adf2 <_dtoa_r+0x9f2>
 800ae6c:	9a02      	ldr	r2, [sp, #8]
 800ae6e:	f805 8c01 	strb.w	r8, [r5, #-1]
 800ae72:	eba5 030b 	sub.w	r3, r5, fp
 800ae76:	4293      	cmp	r3, r2
 800ae78:	d021      	beq.n	800aebe <_dtoa_r+0xabe>
 800ae7a:	2300      	movs	r3, #0
 800ae7c:	220a      	movs	r2, #10
 800ae7e:	9904      	ldr	r1, [sp, #16]
 800ae80:	4620      	mov	r0, r4
 800ae82:	f000 f8db 	bl	800b03c <__multadd>
 800ae86:	45b1      	cmp	r9, r6
 800ae88:	9004      	str	r0, [sp, #16]
 800ae8a:	f04f 0300 	mov.w	r3, #0
 800ae8e:	f04f 020a 	mov.w	r2, #10
 800ae92:	4649      	mov	r1, r9
 800ae94:	4620      	mov	r0, r4
 800ae96:	d105      	bne.n	800aea4 <_dtoa_r+0xaa4>
 800ae98:	f000 f8d0 	bl	800b03c <__multadd>
 800ae9c:	4681      	mov	r9, r0
 800ae9e:	4606      	mov	r6, r0
 800aea0:	9505      	str	r5, [sp, #20]
 800aea2:	e776      	b.n	800ad92 <_dtoa_r+0x992>
 800aea4:	f000 f8ca 	bl	800b03c <__multadd>
 800aea8:	4631      	mov	r1, r6
 800aeaa:	4681      	mov	r9, r0
 800aeac:	2300      	movs	r3, #0
 800aeae:	220a      	movs	r2, #10
 800aeb0:	4620      	mov	r0, r4
 800aeb2:	f000 f8c3 	bl	800b03c <__multadd>
 800aeb6:	4606      	mov	r6, r0
 800aeb8:	e7f2      	b.n	800aea0 <_dtoa_r+0xaa0>
 800aeba:	f04f 0900 	mov.w	r9, #0
 800aebe:	2201      	movs	r2, #1
 800aec0:	9904      	ldr	r1, [sp, #16]
 800aec2:	4620      	mov	r0, r4
 800aec4:	f000 fa30 	bl	800b328 <__lshift>
 800aec8:	4639      	mov	r1, r7
 800aeca:	9004      	str	r0, [sp, #16]
 800aecc:	f000 fa80 	bl	800b3d0 <__mcmp>
 800aed0:	2800      	cmp	r0, #0
 800aed2:	dcb6      	bgt.n	800ae42 <_dtoa_r+0xa42>
 800aed4:	d102      	bne.n	800aedc <_dtoa_r+0xadc>
 800aed6:	f018 0f01 	tst.w	r8, #1
 800aeda:	d1b2      	bne.n	800ae42 <_dtoa_r+0xa42>
 800aedc:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800aee0:	2b30      	cmp	r3, #48	; 0x30
 800aee2:	f105 32ff 	add.w	r2, r5, #4294967295
 800aee6:	f47f af0a 	bne.w	800acfe <_dtoa_r+0x8fe>
 800aeea:	4615      	mov	r5, r2
 800aeec:	e7f6      	b.n	800aedc <_dtoa_r+0xadc>
 800aeee:	4593      	cmp	fp, r2
 800aef0:	d105      	bne.n	800aefe <_dtoa_r+0xafe>
 800aef2:	2331      	movs	r3, #49	; 0x31
 800aef4:	f10a 0a01 	add.w	sl, sl, #1
 800aef8:	f88b 3000 	strb.w	r3, [fp]
 800aefc:	e6ff      	b.n	800acfe <_dtoa_r+0x8fe>
 800aefe:	4615      	mov	r5, r2
 800af00:	e79f      	b.n	800ae42 <_dtoa_r+0xa42>
 800af02:	f8df b064 	ldr.w	fp, [pc, #100]	; 800af68 <_dtoa_r+0xb68>
 800af06:	e007      	b.n	800af18 <_dtoa_r+0xb18>
 800af08:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800af0a:	f8df b060 	ldr.w	fp, [pc, #96]	; 800af6c <_dtoa_r+0xb6c>
 800af0e:	b11b      	cbz	r3, 800af18 <_dtoa_r+0xb18>
 800af10:	f10b 0308 	add.w	r3, fp, #8
 800af14:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800af16:	6013      	str	r3, [r2, #0]
 800af18:	4658      	mov	r0, fp
 800af1a:	b017      	add	sp, #92	; 0x5c
 800af1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800af20:	9b06      	ldr	r3, [sp, #24]
 800af22:	2b01      	cmp	r3, #1
 800af24:	f77f ae35 	ble.w	800ab92 <_dtoa_r+0x792>
 800af28:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800af2a:	9307      	str	r3, [sp, #28]
 800af2c:	e649      	b.n	800abc2 <_dtoa_r+0x7c2>
 800af2e:	9b02      	ldr	r3, [sp, #8]
 800af30:	2b00      	cmp	r3, #0
 800af32:	dc03      	bgt.n	800af3c <_dtoa_r+0xb3c>
 800af34:	9b06      	ldr	r3, [sp, #24]
 800af36:	2b02      	cmp	r3, #2
 800af38:	f73f aecc 	bgt.w	800acd4 <_dtoa_r+0x8d4>
 800af3c:	465d      	mov	r5, fp
 800af3e:	4639      	mov	r1, r7
 800af40:	9804      	ldr	r0, [sp, #16]
 800af42:	f7ff f9cf 	bl	800a2e4 <quorem>
 800af46:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800af4a:	f805 8b01 	strb.w	r8, [r5], #1
 800af4e:	9a02      	ldr	r2, [sp, #8]
 800af50:	eba5 030b 	sub.w	r3, r5, fp
 800af54:	429a      	cmp	r2, r3
 800af56:	ddb0      	ble.n	800aeba <_dtoa_r+0xaba>
 800af58:	2300      	movs	r3, #0
 800af5a:	220a      	movs	r2, #10
 800af5c:	9904      	ldr	r1, [sp, #16]
 800af5e:	4620      	mov	r0, r4
 800af60:	f000 f86c 	bl	800b03c <__multadd>
 800af64:	9004      	str	r0, [sp, #16]
 800af66:	e7ea      	b.n	800af3e <_dtoa_r+0xb3e>
 800af68:	0800beb4 	.word	0x0800beb4
 800af6c:	0800bed8 	.word	0x0800bed8

0800af70 <_localeconv_r>:
 800af70:	4b04      	ldr	r3, [pc, #16]	; (800af84 <_localeconv_r+0x14>)
 800af72:	681b      	ldr	r3, [r3, #0]
 800af74:	6a18      	ldr	r0, [r3, #32]
 800af76:	4b04      	ldr	r3, [pc, #16]	; (800af88 <_localeconv_r+0x18>)
 800af78:	2800      	cmp	r0, #0
 800af7a:	bf08      	it	eq
 800af7c:	4618      	moveq	r0, r3
 800af7e:	30f0      	adds	r0, #240	; 0xf0
 800af80:	4770      	bx	lr
 800af82:	bf00      	nop
 800af84:	2000017c 	.word	0x2000017c
 800af88:	200001e0 	.word	0x200001e0

0800af8c <memcpy>:
 800af8c:	b510      	push	{r4, lr}
 800af8e:	1e43      	subs	r3, r0, #1
 800af90:	440a      	add	r2, r1
 800af92:	4291      	cmp	r1, r2
 800af94:	d100      	bne.n	800af98 <memcpy+0xc>
 800af96:	bd10      	pop	{r4, pc}
 800af98:	f811 4b01 	ldrb.w	r4, [r1], #1
 800af9c:	f803 4f01 	strb.w	r4, [r3, #1]!
 800afa0:	e7f7      	b.n	800af92 <memcpy+0x6>

0800afa2 <__malloc_lock>:
 800afa2:	4770      	bx	lr

0800afa4 <__malloc_unlock>:
 800afa4:	4770      	bx	lr

0800afa6 <_Balloc>:
 800afa6:	b570      	push	{r4, r5, r6, lr}
 800afa8:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800afaa:	4604      	mov	r4, r0
 800afac:	460e      	mov	r6, r1
 800afae:	b93d      	cbnz	r5, 800afc0 <_Balloc+0x1a>
 800afb0:	2010      	movs	r0, #16
 800afb2:	f7fe fc3f 	bl	8009834 <malloc>
 800afb6:	6260      	str	r0, [r4, #36]	; 0x24
 800afb8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800afbc:	6005      	str	r5, [r0, #0]
 800afbe:	60c5      	str	r5, [r0, #12]
 800afc0:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800afc2:	68eb      	ldr	r3, [r5, #12]
 800afc4:	b183      	cbz	r3, 800afe8 <_Balloc+0x42>
 800afc6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800afc8:	68db      	ldr	r3, [r3, #12]
 800afca:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800afce:	b9b8      	cbnz	r0, 800b000 <_Balloc+0x5a>
 800afd0:	2101      	movs	r1, #1
 800afd2:	fa01 f506 	lsl.w	r5, r1, r6
 800afd6:	1d6a      	adds	r2, r5, #5
 800afd8:	0092      	lsls	r2, r2, #2
 800afda:	4620      	mov	r0, r4
 800afdc:	f000 fabe 	bl	800b55c <_calloc_r>
 800afe0:	b160      	cbz	r0, 800affc <_Balloc+0x56>
 800afe2:	e9c0 6501 	strd	r6, r5, [r0, #4]
 800afe6:	e00e      	b.n	800b006 <_Balloc+0x60>
 800afe8:	2221      	movs	r2, #33	; 0x21
 800afea:	2104      	movs	r1, #4
 800afec:	4620      	mov	r0, r4
 800afee:	f000 fab5 	bl	800b55c <_calloc_r>
 800aff2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800aff4:	60e8      	str	r0, [r5, #12]
 800aff6:	68db      	ldr	r3, [r3, #12]
 800aff8:	2b00      	cmp	r3, #0
 800affa:	d1e4      	bne.n	800afc6 <_Balloc+0x20>
 800affc:	2000      	movs	r0, #0
 800affe:	bd70      	pop	{r4, r5, r6, pc}
 800b000:	6802      	ldr	r2, [r0, #0]
 800b002:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 800b006:	2300      	movs	r3, #0
 800b008:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800b00c:	e7f7      	b.n	800affe <_Balloc+0x58>

0800b00e <_Bfree>:
 800b00e:	b570      	push	{r4, r5, r6, lr}
 800b010:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800b012:	4606      	mov	r6, r0
 800b014:	460d      	mov	r5, r1
 800b016:	b93c      	cbnz	r4, 800b028 <_Bfree+0x1a>
 800b018:	2010      	movs	r0, #16
 800b01a:	f7fe fc0b 	bl	8009834 <malloc>
 800b01e:	6270      	str	r0, [r6, #36]	; 0x24
 800b020:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b024:	6004      	str	r4, [r0, #0]
 800b026:	60c4      	str	r4, [r0, #12]
 800b028:	b13d      	cbz	r5, 800b03a <_Bfree+0x2c>
 800b02a:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800b02c:	686a      	ldr	r2, [r5, #4]
 800b02e:	68db      	ldr	r3, [r3, #12]
 800b030:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b034:	6029      	str	r1, [r5, #0]
 800b036:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800b03a:	bd70      	pop	{r4, r5, r6, pc}

0800b03c <__multadd>:
 800b03c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b040:	690d      	ldr	r5, [r1, #16]
 800b042:	461f      	mov	r7, r3
 800b044:	4606      	mov	r6, r0
 800b046:	460c      	mov	r4, r1
 800b048:	f101 0c14 	add.w	ip, r1, #20
 800b04c:	2300      	movs	r3, #0
 800b04e:	f8dc 0000 	ldr.w	r0, [ip]
 800b052:	b281      	uxth	r1, r0
 800b054:	fb02 7101 	mla	r1, r2, r1, r7
 800b058:	0c0f      	lsrs	r7, r1, #16
 800b05a:	0c00      	lsrs	r0, r0, #16
 800b05c:	fb02 7000 	mla	r0, r2, r0, r7
 800b060:	b289      	uxth	r1, r1
 800b062:	3301      	adds	r3, #1
 800b064:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 800b068:	429d      	cmp	r5, r3
 800b06a:	ea4f 4710 	mov.w	r7, r0, lsr #16
 800b06e:	f84c 1b04 	str.w	r1, [ip], #4
 800b072:	dcec      	bgt.n	800b04e <__multadd+0x12>
 800b074:	b1d7      	cbz	r7, 800b0ac <__multadd+0x70>
 800b076:	68a3      	ldr	r3, [r4, #8]
 800b078:	42ab      	cmp	r3, r5
 800b07a:	dc12      	bgt.n	800b0a2 <__multadd+0x66>
 800b07c:	6861      	ldr	r1, [r4, #4]
 800b07e:	4630      	mov	r0, r6
 800b080:	3101      	adds	r1, #1
 800b082:	f7ff ff90 	bl	800afa6 <_Balloc>
 800b086:	6922      	ldr	r2, [r4, #16]
 800b088:	3202      	adds	r2, #2
 800b08a:	f104 010c 	add.w	r1, r4, #12
 800b08e:	4680      	mov	r8, r0
 800b090:	0092      	lsls	r2, r2, #2
 800b092:	300c      	adds	r0, #12
 800b094:	f7ff ff7a 	bl	800af8c <memcpy>
 800b098:	4621      	mov	r1, r4
 800b09a:	4630      	mov	r0, r6
 800b09c:	f7ff ffb7 	bl	800b00e <_Bfree>
 800b0a0:	4644      	mov	r4, r8
 800b0a2:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800b0a6:	3501      	adds	r5, #1
 800b0a8:	615f      	str	r7, [r3, #20]
 800b0aa:	6125      	str	r5, [r4, #16]
 800b0ac:	4620      	mov	r0, r4
 800b0ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800b0b2 <__hi0bits>:
 800b0b2:	0c02      	lsrs	r2, r0, #16
 800b0b4:	0412      	lsls	r2, r2, #16
 800b0b6:	4603      	mov	r3, r0
 800b0b8:	b9b2      	cbnz	r2, 800b0e8 <__hi0bits+0x36>
 800b0ba:	0403      	lsls	r3, r0, #16
 800b0bc:	2010      	movs	r0, #16
 800b0be:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800b0c2:	bf04      	itt	eq
 800b0c4:	021b      	lsleq	r3, r3, #8
 800b0c6:	3008      	addeq	r0, #8
 800b0c8:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800b0cc:	bf04      	itt	eq
 800b0ce:	011b      	lsleq	r3, r3, #4
 800b0d0:	3004      	addeq	r0, #4
 800b0d2:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800b0d6:	bf04      	itt	eq
 800b0d8:	009b      	lsleq	r3, r3, #2
 800b0da:	3002      	addeq	r0, #2
 800b0dc:	2b00      	cmp	r3, #0
 800b0de:	db06      	blt.n	800b0ee <__hi0bits+0x3c>
 800b0e0:	005b      	lsls	r3, r3, #1
 800b0e2:	d503      	bpl.n	800b0ec <__hi0bits+0x3a>
 800b0e4:	3001      	adds	r0, #1
 800b0e6:	4770      	bx	lr
 800b0e8:	2000      	movs	r0, #0
 800b0ea:	e7e8      	b.n	800b0be <__hi0bits+0xc>
 800b0ec:	2020      	movs	r0, #32
 800b0ee:	4770      	bx	lr

0800b0f0 <__lo0bits>:
 800b0f0:	6803      	ldr	r3, [r0, #0]
 800b0f2:	f013 0207 	ands.w	r2, r3, #7
 800b0f6:	4601      	mov	r1, r0
 800b0f8:	d00b      	beq.n	800b112 <__lo0bits+0x22>
 800b0fa:	07da      	lsls	r2, r3, #31
 800b0fc:	d423      	bmi.n	800b146 <__lo0bits+0x56>
 800b0fe:	0798      	lsls	r0, r3, #30
 800b100:	bf49      	itett	mi
 800b102:	085b      	lsrmi	r3, r3, #1
 800b104:	089b      	lsrpl	r3, r3, #2
 800b106:	2001      	movmi	r0, #1
 800b108:	600b      	strmi	r3, [r1, #0]
 800b10a:	bf5c      	itt	pl
 800b10c:	600b      	strpl	r3, [r1, #0]
 800b10e:	2002      	movpl	r0, #2
 800b110:	4770      	bx	lr
 800b112:	b298      	uxth	r0, r3
 800b114:	b9a8      	cbnz	r0, 800b142 <__lo0bits+0x52>
 800b116:	0c1b      	lsrs	r3, r3, #16
 800b118:	2010      	movs	r0, #16
 800b11a:	f013 0fff 	tst.w	r3, #255	; 0xff
 800b11e:	bf04      	itt	eq
 800b120:	0a1b      	lsreq	r3, r3, #8
 800b122:	3008      	addeq	r0, #8
 800b124:	071a      	lsls	r2, r3, #28
 800b126:	bf04      	itt	eq
 800b128:	091b      	lsreq	r3, r3, #4
 800b12a:	3004      	addeq	r0, #4
 800b12c:	079a      	lsls	r2, r3, #30
 800b12e:	bf04      	itt	eq
 800b130:	089b      	lsreq	r3, r3, #2
 800b132:	3002      	addeq	r0, #2
 800b134:	07da      	lsls	r2, r3, #31
 800b136:	d402      	bmi.n	800b13e <__lo0bits+0x4e>
 800b138:	085b      	lsrs	r3, r3, #1
 800b13a:	d006      	beq.n	800b14a <__lo0bits+0x5a>
 800b13c:	3001      	adds	r0, #1
 800b13e:	600b      	str	r3, [r1, #0]
 800b140:	4770      	bx	lr
 800b142:	4610      	mov	r0, r2
 800b144:	e7e9      	b.n	800b11a <__lo0bits+0x2a>
 800b146:	2000      	movs	r0, #0
 800b148:	4770      	bx	lr
 800b14a:	2020      	movs	r0, #32
 800b14c:	4770      	bx	lr

0800b14e <__i2b>:
 800b14e:	b510      	push	{r4, lr}
 800b150:	460c      	mov	r4, r1
 800b152:	2101      	movs	r1, #1
 800b154:	f7ff ff27 	bl	800afa6 <_Balloc>
 800b158:	2201      	movs	r2, #1
 800b15a:	6144      	str	r4, [r0, #20]
 800b15c:	6102      	str	r2, [r0, #16]
 800b15e:	bd10      	pop	{r4, pc}

0800b160 <__multiply>:
 800b160:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b164:	4614      	mov	r4, r2
 800b166:	690a      	ldr	r2, [r1, #16]
 800b168:	6923      	ldr	r3, [r4, #16]
 800b16a:	429a      	cmp	r2, r3
 800b16c:	bfb8      	it	lt
 800b16e:	460b      	movlt	r3, r1
 800b170:	4688      	mov	r8, r1
 800b172:	bfbc      	itt	lt
 800b174:	46a0      	movlt	r8, r4
 800b176:	461c      	movlt	r4, r3
 800b178:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800b17c:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800b180:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800b184:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800b188:	eb07 0609 	add.w	r6, r7, r9
 800b18c:	42b3      	cmp	r3, r6
 800b18e:	bfb8      	it	lt
 800b190:	3101      	addlt	r1, #1
 800b192:	f7ff ff08 	bl	800afa6 <_Balloc>
 800b196:	f100 0514 	add.w	r5, r0, #20
 800b19a:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 800b19e:	462b      	mov	r3, r5
 800b1a0:	2200      	movs	r2, #0
 800b1a2:	4573      	cmp	r3, lr
 800b1a4:	d316      	bcc.n	800b1d4 <__multiply+0x74>
 800b1a6:	f104 0214 	add.w	r2, r4, #20
 800b1aa:	f108 0114 	add.w	r1, r8, #20
 800b1ae:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 800b1b2:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 800b1b6:	9300      	str	r3, [sp, #0]
 800b1b8:	9b00      	ldr	r3, [sp, #0]
 800b1ba:	9201      	str	r2, [sp, #4]
 800b1bc:	4293      	cmp	r3, r2
 800b1be:	d80c      	bhi.n	800b1da <__multiply+0x7a>
 800b1c0:	2e00      	cmp	r6, #0
 800b1c2:	dd03      	ble.n	800b1cc <__multiply+0x6c>
 800b1c4:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800b1c8:	2b00      	cmp	r3, #0
 800b1ca:	d05d      	beq.n	800b288 <__multiply+0x128>
 800b1cc:	6106      	str	r6, [r0, #16]
 800b1ce:	b003      	add	sp, #12
 800b1d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b1d4:	f843 2b04 	str.w	r2, [r3], #4
 800b1d8:	e7e3      	b.n	800b1a2 <__multiply+0x42>
 800b1da:	f8b2 b000 	ldrh.w	fp, [r2]
 800b1de:	f1bb 0f00 	cmp.w	fp, #0
 800b1e2:	d023      	beq.n	800b22c <__multiply+0xcc>
 800b1e4:	4689      	mov	r9, r1
 800b1e6:	46ac      	mov	ip, r5
 800b1e8:	f04f 0800 	mov.w	r8, #0
 800b1ec:	f859 4b04 	ldr.w	r4, [r9], #4
 800b1f0:	f8dc a000 	ldr.w	sl, [ip]
 800b1f4:	b2a3      	uxth	r3, r4
 800b1f6:	fa1f fa8a 	uxth.w	sl, sl
 800b1fa:	fb0b a303 	mla	r3, fp, r3, sl
 800b1fe:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800b202:	f8dc 4000 	ldr.w	r4, [ip]
 800b206:	4443      	add	r3, r8
 800b208:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800b20c:	fb0b 840a 	mla	r4, fp, sl, r8
 800b210:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 800b214:	46e2      	mov	sl, ip
 800b216:	b29b      	uxth	r3, r3
 800b218:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800b21c:	454f      	cmp	r7, r9
 800b21e:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800b222:	f84a 3b04 	str.w	r3, [sl], #4
 800b226:	d82b      	bhi.n	800b280 <__multiply+0x120>
 800b228:	f8cc 8004 	str.w	r8, [ip, #4]
 800b22c:	9b01      	ldr	r3, [sp, #4]
 800b22e:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 800b232:	3204      	adds	r2, #4
 800b234:	f1ba 0f00 	cmp.w	sl, #0
 800b238:	d020      	beq.n	800b27c <__multiply+0x11c>
 800b23a:	682b      	ldr	r3, [r5, #0]
 800b23c:	4689      	mov	r9, r1
 800b23e:	46a8      	mov	r8, r5
 800b240:	f04f 0b00 	mov.w	fp, #0
 800b244:	f8b9 c000 	ldrh.w	ip, [r9]
 800b248:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 800b24c:	fb0a 440c 	mla	r4, sl, ip, r4
 800b250:	445c      	add	r4, fp
 800b252:	46c4      	mov	ip, r8
 800b254:	b29b      	uxth	r3, r3
 800b256:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800b25a:	f84c 3b04 	str.w	r3, [ip], #4
 800b25e:	f859 3b04 	ldr.w	r3, [r9], #4
 800b262:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 800b266:	0c1b      	lsrs	r3, r3, #16
 800b268:	fb0a b303 	mla	r3, sl, r3, fp
 800b26c:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800b270:	454f      	cmp	r7, r9
 800b272:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 800b276:	d805      	bhi.n	800b284 <__multiply+0x124>
 800b278:	f8c8 3004 	str.w	r3, [r8, #4]
 800b27c:	3504      	adds	r5, #4
 800b27e:	e79b      	b.n	800b1b8 <__multiply+0x58>
 800b280:	46d4      	mov	ip, sl
 800b282:	e7b3      	b.n	800b1ec <__multiply+0x8c>
 800b284:	46e0      	mov	r8, ip
 800b286:	e7dd      	b.n	800b244 <__multiply+0xe4>
 800b288:	3e01      	subs	r6, #1
 800b28a:	e799      	b.n	800b1c0 <__multiply+0x60>

0800b28c <__pow5mult>:
 800b28c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b290:	4615      	mov	r5, r2
 800b292:	f012 0203 	ands.w	r2, r2, #3
 800b296:	4606      	mov	r6, r0
 800b298:	460f      	mov	r7, r1
 800b29a:	d007      	beq.n	800b2ac <__pow5mult+0x20>
 800b29c:	3a01      	subs	r2, #1
 800b29e:	4c21      	ldr	r4, [pc, #132]	; (800b324 <__pow5mult+0x98>)
 800b2a0:	2300      	movs	r3, #0
 800b2a2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b2a6:	f7ff fec9 	bl	800b03c <__multadd>
 800b2aa:	4607      	mov	r7, r0
 800b2ac:	10ad      	asrs	r5, r5, #2
 800b2ae:	d035      	beq.n	800b31c <__pow5mult+0x90>
 800b2b0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800b2b2:	b93c      	cbnz	r4, 800b2c4 <__pow5mult+0x38>
 800b2b4:	2010      	movs	r0, #16
 800b2b6:	f7fe fabd 	bl	8009834 <malloc>
 800b2ba:	6270      	str	r0, [r6, #36]	; 0x24
 800b2bc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b2c0:	6004      	str	r4, [r0, #0]
 800b2c2:	60c4      	str	r4, [r0, #12]
 800b2c4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800b2c8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800b2cc:	b94c      	cbnz	r4, 800b2e2 <__pow5mult+0x56>
 800b2ce:	f240 2171 	movw	r1, #625	; 0x271
 800b2d2:	4630      	mov	r0, r6
 800b2d4:	f7ff ff3b 	bl	800b14e <__i2b>
 800b2d8:	2300      	movs	r3, #0
 800b2da:	f8c8 0008 	str.w	r0, [r8, #8]
 800b2de:	4604      	mov	r4, r0
 800b2e0:	6003      	str	r3, [r0, #0]
 800b2e2:	f04f 0800 	mov.w	r8, #0
 800b2e6:	07eb      	lsls	r3, r5, #31
 800b2e8:	d50a      	bpl.n	800b300 <__pow5mult+0x74>
 800b2ea:	4639      	mov	r1, r7
 800b2ec:	4622      	mov	r2, r4
 800b2ee:	4630      	mov	r0, r6
 800b2f0:	f7ff ff36 	bl	800b160 <__multiply>
 800b2f4:	4639      	mov	r1, r7
 800b2f6:	4681      	mov	r9, r0
 800b2f8:	4630      	mov	r0, r6
 800b2fa:	f7ff fe88 	bl	800b00e <_Bfree>
 800b2fe:	464f      	mov	r7, r9
 800b300:	106d      	asrs	r5, r5, #1
 800b302:	d00b      	beq.n	800b31c <__pow5mult+0x90>
 800b304:	6820      	ldr	r0, [r4, #0]
 800b306:	b938      	cbnz	r0, 800b318 <__pow5mult+0x8c>
 800b308:	4622      	mov	r2, r4
 800b30a:	4621      	mov	r1, r4
 800b30c:	4630      	mov	r0, r6
 800b30e:	f7ff ff27 	bl	800b160 <__multiply>
 800b312:	6020      	str	r0, [r4, #0]
 800b314:	f8c0 8000 	str.w	r8, [r0]
 800b318:	4604      	mov	r4, r0
 800b31a:	e7e4      	b.n	800b2e6 <__pow5mult+0x5a>
 800b31c:	4638      	mov	r0, r7
 800b31e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b322:	bf00      	nop
 800b324:	0800bfd8 	.word	0x0800bfd8

0800b328 <__lshift>:
 800b328:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b32c:	460c      	mov	r4, r1
 800b32e:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b332:	6923      	ldr	r3, [r4, #16]
 800b334:	6849      	ldr	r1, [r1, #4]
 800b336:	eb0a 0903 	add.w	r9, sl, r3
 800b33a:	68a3      	ldr	r3, [r4, #8]
 800b33c:	4607      	mov	r7, r0
 800b33e:	4616      	mov	r6, r2
 800b340:	f109 0501 	add.w	r5, r9, #1
 800b344:	42ab      	cmp	r3, r5
 800b346:	db32      	blt.n	800b3ae <__lshift+0x86>
 800b348:	4638      	mov	r0, r7
 800b34a:	f7ff fe2c 	bl	800afa6 <_Balloc>
 800b34e:	2300      	movs	r3, #0
 800b350:	4680      	mov	r8, r0
 800b352:	f100 0114 	add.w	r1, r0, #20
 800b356:	461a      	mov	r2, r3
 800b358:	4553      	cmp	r3, sl
 800b35a:	db2b      	blt.n	800b3b4 <__lshift+0x8c>
 800b35c:	6920      	ldr	r0, [r4, #16]
 800b35e:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b362:	f104 0314 	add.w	r3, r4, #20
 800b366:	f016 021f 	ands.w	r2, r6, #31
 800b36a:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b36e:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800b372:	d025      	beq.n	800b3c0 <__lshift+0x98>
 800b374:	f1c2 0e20 	rsb	lr, r2, #32
 800b378:	2000      	movs	r0, #0
 800b37a:	681e      	ldr	r6, [r3, #0]
 800b37c:	468a      	mov	sl, r1
 800b37e:	4096      	lsls	r6, r2
 800b380:	4330      	orrs	r0, r6
 800b382:	f84a 0b04 	str.w	r0, [sl], #4
 800b386:	f853 0b04 	ldr.w	r0, [r3], #4
 800b38a:	459c      	cmp	ip, r3
 800b38c:	fa20 f00e 	lsr.w	r0, r0, lr
 800b390:	d814      	bhi.n	800b3bc <__lshift+0x94>
 800b392:	6048      	str	r0, [r1, #4]
 800b394:	b108      	cbz	r0, 800b39a <__lshift+0x72>
 800b396:	f109 0502 	add.w	r5, r9, #2
 800b39a:	3d01      	subs	r5, #1
 800b39c:	4638      	mov	r0, r7
 800b39e:	f8c8 5010 	str.w	r5, [r8, #16]
 800b3a2:	4621      	mov	r1, r4
 800b3a4:	f7ff fe33 	bl	800b00e <_Bfree>
 800b3a8:	4640      	mov	r0, r8
 800b3aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b3ae:	3101      	adds	r1, #1
 800b3b0:	005b      	lsls	r3, r3, #1
 800b3b2:	e7c7      	b.n	800b344 <__lshift+0x1c>
 800b3b4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800b3b8:	3301      	adds	r3, #1
 800b3ba:	e7cd      	b.n	800b358 <__lshift+0x30>
 800b3bc:	4651      	mov	r1, sl
 800b3be:	e7dc      	b.n	800b37a <__lshift+0x52>
 800b3c0:	3904      	subs	r1, #4
 800b3c2:	f853 2b04 	ldr.w	r2, [r3], #4
 800b3c6:	f841 2f04 	str.w	r2, [r1, #4]!
 800b3ca:	459c      	cmp	ip, r3
 800b3cc:	d8f9      	bhi.n	800b3c2 <__lshift+0x9a>
 800b3ce:	e7e4      	b.n	800b39a <__lshift+0x72>

0800b3d0 <__mcmp>:
 800b3d0:	6903      	ldr	r3, [r0, #16]
 800b3d2:	690a      	ldr	r2, [r1, #16]
 800b3d4:	1a9b      	subs	r3, r3, r2
 800b3d6:	b530      	push	{r4, r5, lr}
 800b3d8:	d10c      	bne.n	800b3f4 <__mcmp+0x24>
 800b3da:	0092      	lsls	r2, r2, #2
 800b3dc:	3014      	adds	r0, #20
 800b3de:	3114      	adds	r1, #20
 800b3e0:	1884      	adds	r4, r0, r2
 800b3e2:	4411      	add	r1, r2
 800b3e4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800b3e8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800b3ec:	4295      	cmp	r5, r2
 800b3ee:	d003      	beq.n	800b3f8 <__mcmp+0x28>
 800b3f0:	d305      	bcc.n	800b3fe <__mcmp+0x2e>
 800b3f2:	2301      	movs	r3, #1
 800b3f4:	4618      	mov	r0, r3
 800b3f6:	bd30      	pop	{r4, r5, pc}
 800b3f8:	42a0      	cmp	r0, r4
 800b3fa:	d3f3      	bcc.n	800b3e4 <__mcmp+0x14>
 800b3fc:	e7fa      	b.n	800b3f4 <__mcmp+0x24>
 800b3fe:	f04f 33ff 	mov.w	r3, #4294967295
 800b402:	e7f7      	b.n	800b3f4 <__mcmp+0x24>

0800b404 <__mdiff>:
 800b404:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b408:	460d      	mov	r5, r1
 800b40a:	4607      	mov	r7, r0
 800b40c:	4611      	mov	r1, r2
 800b40e:	4628      	mov	r0, r5
 800b410:	4614      	mov	r4, r2
 800b412:	f7ff ffdd 	bl	800b3d0 <__mcmp>
 800b416:	1e06      	subs	r6, r0, #0
 800b418:	d108      	bne.n	800b42c <__mdiff+0x28>
 800b41a:	4631      	mov	r1, r6
 800b41c:	4638      	mov	r0, r7
 800b41e:	f7ff fdc2 	bl	800afa6 <_Balloc>
 800b422:	2301      	movs	r3, #1
 800b424:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800b428:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b42c:	bfa4      	itt	ge
 800b42e:	4623      	movge	r3, r4
 800b430:	462c      	movge	r4, r5
 800b432:	4638      	mov	r0, r7
 800b434:	6861      	ldr	r1, [r4, #4]
 800b436:	bfa6      	itte	ge
 800b438:	461d      	movge	r5, r3
 800b43a:	2600      	movge	r6, #0
 800b43c:	2601      	movlt	r6, #1
 800b43e:	f7ff fdb2 	bl	800afa6 <_Balloc>
 800b442:	692b      	ldr	r3, [r5, #16]
 800b444:	60c6      	str	r6, [r0, #12]
 800b446:	6926      	ldr	r6, [r4, #16]
 800b448:	f105 0914 	add.w	r9, r5, #20
 800b44c:	f104 0214 	add.w	r2, r4, #20
 800b450:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 800b454:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 800b458:	f100 0514 	add.w	r5, r0, #20
 800b45c:	f04f 0e00 	mov.w	lr, #0
 800b460:	f852 ab04 	ldr.w	sl, [r2], #4
 800b464:	f859 4b04 	ldr.w	r4, [r9], #4
 800b468:	fa1e f18a 	uxtah	r1, lr, sl
 800b46c:	b2a3      	uxth	r3, r4
 800b46e:	1ac9      	subs	r1, r1, r3
 800b470:	0c23      	lsrs	r3, r4, #16
 800b472:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 800b476:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800b47a:	b289      	uxth	r1, r1
 800b47c:	ea4f 4e23 	mov.w	lr, r3, asr #16
 800b480:	45c8      	cmp	r8, r9
 800b482:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800b486:	4694      	mov	ip, r2
 800b488:	f845 3b04 	str.w	r3, [r5], #4
 800b48c:	d8e8      	bhi.n	800b460 <__mdiff+0x5c>
 800b48e:	45bc      	cmp	ip, r7
 800b490:	d304      	bcc.n	800b49c <__mdiff+0x98>
 800b492:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 800b496:	b183      	cbz	r3, 800b4ba <__mdiff+0xb6>
 800b498:	6106      	str	r6, [r0, #16]
 800b49a:	e7c5      	b.n	800b428 <__mdiff+0x24>
 800b49c:	f85c 1b04 	ldr.w	r1, [ip], #4
 800b4a0:	fa1e f381 	uxtah	r3, lr, r1
 800b4a4:	141a      	asrs	r2, r3, #16
 800b4a6:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800b4aa:	b29b      	uxth	r3, r3
 800b4ac:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b4b0:	ea4f 4e22 	mov.w	lr, r2, asr #16
 800b4b4:	f845 3b04 	str.w	r3, [r5], #4
 800b4b8:	e7e9      	b.n	800b48e <__mdiff+0x8a>
 800b4ba:	3e01      	subs	r6, #1
 800b4bc:	e7e9      	b.n	800b492 <__mdiff+0x8e>

0800b4be <__d2b>:
 800b4be:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800b4c2:	460e      	mov	r6, r1
 800b4c4:	2101      	movs	r1, #1
 800b4c6:	ec59 8b10 	vmov	r8, r9, d0
 800b4ca:	4615      	mov	r5, r2
 800b4cc:	f7ff fd6b 	bl	800afa6 <_Balloc>
 800b4d0:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800b4d4:	4607      	mov	r7, r0
 800b4d6:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b4da:	bb34      	cbnz	r4, 800b52a <__d2b+0x6c>
 800b4dc:	9301      	str	r3, [sp, #4]
 800b4de:	f1b8 0300 	subs.w	r3, r8, #0
 800b4e2:	d027      	beq.n	800b534 <__d2b+0x76>
 800b4e4:	a802      	add	r0, sp, #8
 800b4e6:	f840 3d08 	str.w	r3, [r0, #-8]!
 800b4ea:	f7ff fe01 	bl	800b0f0 <__lo0bits>
 800b4ee:	9900      	ldr	r1, [sp, #0]
 800b4f0:	b1f0      	cbz	r0, 800b530 <__d2b+0x72>
 800b4f2:	9a01      	ldr	r2, [sp, #4]
 800b4f4:	f1c0 0320 	rsb	r3, r0, #32
 800b4f8:	fa02 f303 	lsl.w	r3, r2, r3
 800b4fc:	430b      	orrs	r3, r1
 800b4fe:	40c2      	lsrs	r2, r0
 800b500:	617b      	str	r3, [r7, #20]
 800b502:	9201      	str	r2, [sp, #4]
 800b504:	9b01      	ldr	r3, [sp, #4]
 800b506:	61bb      	str	r3, [r7, #24]
 800b508:	2b00      	cmp	r3, #0
 800b50a:	bf14      	ite	ne
 800b50c:	2102      	movne	r1, #2
 800b50e:	2101      	moveq	r1, #1
 800b510:	6139      	str	r1, [r7, #16]
 800b512:	b1c4      	cbz	r4, 800b546 <__d2b+0x88>
 800b514:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800b518:	4404      	add	r4, r0
 800b51a:	6034      	str	r4, [r6, #0]
 800b51c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800b520:	6028      	str	r0, [r5, #0]
 800b522:	4638      	mov	r0, r7
 800b524:	b003      	add	sp, #12
 800b526:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b52a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b52e:	e7d5      	b.n	800b4dc <__d2b+0x1e>
 800b530:	6179      	str	r1, [r7, #20]
 800b532:	e7e7      	b.n	800b504 <__d2b+0x46>
 800b534:	a801      	add	r0, sp, #4
 800b536:	f7ff fddb 	bl	800b0f0 <__lo0bits>
 800b53a:	9b01      	ldr	r3, [sp, #4]
 800b53c:	617b      	str	r3, [r7, #20]
 800b53e:	2101      	movs	r1, #1
 800b540:	6139      	str	r1, [r7, #16]
 800b542:	3020      	adds	r0, #32
 800b544:	e7e5      	b.n	800b512 <__d2b+0x54>
 800b546:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 800b54a:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800b54e:	6030      	str	r0, [r6, #0]
 800b550:	6918      	ldr	r0, [r3, #16]
 800b552:	f7ff fdae 	bl	800b0b2 <__hi0bits>
 800b556:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800b55a:	e7e1      	b.n	800b520 <__d2b+0x62>

0800b55c <_calloc_r>:
 800b55c:	b538      	push	{r3, r4, r5, lr}
 800b55e:	fb02 f401 	mul.w	r4, r2, r1
 800b562:	4621      	mov	r1, r4
 800b564:	f7fe f9c4 	bl	80098f0 <_malloc_r>
 800b568:	4605      	mov	r5, r0
 800b56a:	b118      	cbz	r0, 800b574 <_calloc_r+0x18>
 800b56c:	4622      	mov	r2, r4
 800b56e:	2100      	movs	r1, #0
 800b570:	f7fe f968 	bl	8009844 <memset>
 800b574:	4628      	mov	r0, r5
 800b576:	bd38      	pop	{r3, r4, r5, pc}

0800b578 <__ssputs_r>:
 800b578:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b57c:	688e      	ldr	r6, [r1, #8]
 800b57e:	429e      	cmp	r6, r3
 800b580:	4682      	mov	sl, r0
 800b582:	460c      	mov	r4, r1
 800b584:	4690      	mov	r8, r2
 800b586:	4699      	mov	r9, r3
 800b588:	d837      	bhi.n	800b5fa <__ssputs_r+0x82>
 800b58a:	898a      	ldrh	r2, [r1, #12]
 800b58c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800b590:	d031      	beq.n	800b5f6 <__ssputs_r+0x7e>
 800b592:	6825      	ldr	r5, [r4, #0]
 800b594:	6909      	ldr	r1, [r1, #16]
 800b596:	1a6f      	subs	r7, r5, r1
 800b598:	6965      	ldr	r5, [r4, #20]
 800b59a:	2302      	movs	r3, #2
 800b59c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b5a0:	fb95 f5f3 	sdiv	r5, r5, r3
 800b5a4:	f109 0301 	add.w	r3, r9, #1
 800b5a8:	443b      	add	r3, r7
 800b5aa:	429d      	cmp	r5, r3
 800b5ac:	bf38      	it	cc
 800b5ae:	461d      	movcc	r5, r3
 800b5b0:	0553      	lsls	r3, r2, #21
 800b5b2:	d530      	bpl.n	800b616 <__ssputs_r+0x9e>
 800b5b4:	4629      	mov	r1, r5
 800b5b6:	f7fe f99b 	bl	80098f0 <_malloc_r>
 800b5ba:	4606      	mov	r6, r0
 800b5bc:	b950      	cbnz	r0, 800b5d4 <__ssputs_r+0x5c>
 800b5be:	230c      	movs	r3, #12
 800b5c0:	f8ca 3000 	str.w	r3, [sl]
 800b5c4:	89a3      	ldrh	r3, [r4, #12]
 800b5c6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b5ca:	81a3      	strh	r3, [r4, #12]
 800b5cc:	f04f 30ff 	mov.w	r0, #4294967295
 800b5d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b5d4:	463a      	mov	r2, r7
 800b5d6:	6921      	ldr	r1, [r4, #16]
 800b5d8:	f7ff fcd8 	bl	800af8c <memcpy>
 800b5dc:	89a3      	ldrh	r3, [r4, #12]
 800b5de:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800b5e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b5e6:	81a3      	strh	r3, [r4, #12]
 800b5e8:	6126      	str	r6, [r4, #16]
 800b5ea:	6165      	str	r5, [r4, #20]
 800b5ec:	443e      	add	r6, r7
 800b5ee:	1bed      	subs	r5, r5, r7
 800b5f0:	6026      	str	r6, [r4, #0]
 800b5f2:	60a5      	str	r5, [r4, #8]
 800b5f4:	464e      	mov	r6, r9
 800b5f6:	454e      	cmp	r6, r9
 800b5f8:	d900      	bls.n	800b5fc <__ssputs_r+0x84>
 800b5fa:	464e      	mov	r6, r9
 800b5fc:	4632      	mov	r2, r6
 800b5fe:	4641      	mov	r1, r8
 800b600:	6820      	ldr	r0, [r4, #0]
 800b602:	f000 f91d 	bl	800b840 <memmove>
 800b606:	68a3      	ldr	r3, [r4, #8]
 800b608:	1b9b      	subs	r3, r3, r6
 800b60a:	60a3      	str	r3, [r4, #8]
 800b60c:	6823      	ldr	r3, [r4, #0]
 800b60e:	441e      	add	r6, r3
 800b610:	6026      	str	r6, [r4, #0]
 800b612:	2000      	movs	r0, #0
 800b614:	e7dc      	b.n	800b5d0 <__ssputs_r+0x58>
 800b616:	462a      	mov	r2, r5
 800b618:	f000 f92b 	bl	800b872 <_realloc_r>
 800b61c:	4606      	mov	r6, r0
 800b61e:	2800      	cmp	r0, #0
 800b620:	d1e2      	bne.n	800b5e8 <__ssputs_r+0x70>
 800b622:	6921      	ldr	r1, [r4, #16]
 800b624:	4650      	mov	r0, sl
 800b626:	f7fe f915 	bl	8009854 <_free_r>
 800b62a:	e7c8      	b.n	800b5be <__ssputs_r+0x46>

0800b62c <_svfiprintf_r>:
 800b62c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b630:	461d      	mov	r5, r3
 800b632:	898b      	ldrh	r3, [r1, #12]
 800b634:	061f      	lsls	r7, r3, #24
 800b636:	b09d      	sub	sp, #116	; 0x74
 800b638:	4680      	mov	r8, r0
 800b63a:	460c      	mov	r4, r1
 800b63c:	4616      	mov	r6, r2
 800b63e:	d50f      	bpl.n	800b660 <_svfiprintf_r+0x34>
 800b640:	690b      	ldr	r3, [r1, #16]
 800b642:	b96b      	cbnz	r3, 800b660 <_svfiprintf_r+0x34>
 800b644:	2140      	movs	r1, #64	; 0x40
 800b646:	f7fe f953 	bl	80098f0 <_malloc_r>
 800b64a:	6020      	str	r0, [r4, #0]
 800b64c:	6120      	str	r0, [r4, #16]
 800b64e:	b928      	cbnz	r0, 800b65c <_svfiprintf_r+0x30>
 800b650:	230c      	movs	r3, #12
 800b652:	f8c8 3000 	str.w	r3, [r8]
 800b656:	f04f 30ff 	mov.w	r0, #4294967295
 800b65a:	e0c8      	b.n	800b7ee <_svfiprintf_r+0x1c2>
 800b65c:	2340      	movs	r3, #64	; 0x40
 800b65e:	6163      	str	r3, [r4, #20]
 800b660:	2300      	movs	r3, #0
 800b662:	9309      	str	r3, [sp, #36]	; 0x24
 800b664:	2320      	movs	r3, #32
 800b666:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b66a:	2330      	movs	r3, #48	; 0x30
 800b66c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b670:	9503      	str	r5, [sp, #12]
 800b672:	f04f 0b01 	mov.w	fp, #1
 800b676:	4637      	mov	r7, r6
 800b678:	463d      	mov	r5, r7
 800b67a:	f815 3b01 	ldrb.w	r3, [r5], #1
 800b67e:	b10b      	cbz	r3, 800b684 <_svfiprintf_r+0x58>
 800b680:	2b25      	cmp	r3, #37	; 0x25
 800b682:	d13e      	bne.n	800b702 <_svfiprintf_r+0xd6>
 800b684:	ebb7 0a06 	subs.w	sl, r7, r6
 800b688:	d00b      	beq.n	800b6a2 <_svfiprintf_r+0x76>
 800b68a:	4653      	mov	r3, sl
 800b68c:	4632      	mov	r2, r6
 800b68e:	4621      	mov	r1, r4
 800b690:	4640      	mov	r0, r8
 800b692:	f7ff ff71 	bl	800b578 <__ssputs_r>
 800b696:	3001      	adds	r0, #1
 800b698:	f000 80a4 	beq.w	800b7e4 <_svfiprintf_r+0x1b8>
 800b69c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b69e:	4453      	add	r3, sl
 800b6a0:	9309      	str	r3, [sp, #36]	; 0x24
 800b6a2:	783b      	ldrb	r3, [r7, #0]
 800b6a4:	2b00      	cmp	r3, #0
 800b6a6:	f000 809d 	beq.w	800b7e4 <_svfiprintf_r+0x1b8>
 800b6aa:	2300      	movs	r3, #0
 800b6ac:	f04f 32ff 	mov.w	r2, #4294967295
 800b6b0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b6b4:	9304      	str	r3, [sp, #16]
 800b6b6:	9307      	str	r3, [sp, #28]
 800b6b8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b6bc:	931a      	str	r3, [sp, #104]	; 0x68
 800b6be:	462f      	mov	r7, r5
 800b6c0:	2205      	movs	r2, #5
 800b6c2:	f817 1b01 	ldrb.w	r1, [r7], #1
 800b6c6:	4850      	ldr	r0, [pc, #320]	; (800b808 <_svfiprintf_r+0x1dc>)
 800b6c8:	f7f4 fd8a 	bl	80001e0 <memchr>
 800b6cc:	9b04      	ldr	r3, [sp, #16]
 800b6ce:	b9d0      	cbnz	r0, 800b706 <_svfiprintf_r+0xda>
 800b6d0:	06d9      	lsls	r1, r3, #27
 800b6d2:	bf44      	itt	mi
 800b6d4:	2220      	movmi	r2, #32
 800b6d6:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800b6da:	071a      	lsls	r2, r3, #28
 800b6dc:	bf44      	itt	mi
 800b6de:	222b      	movmi	r2, #43	; 0x2b
 800b6e0:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800b6e4:	782a      	ldrb	r2, [r5, #0]
 800b6e6:	2a2a      	cmp	r2, #42	; 0x2a
 800b6e8:	d015      	beq.n	800b716 <_svfiprintf_r+0xea>
 800b6ea:	9a07      	ldr	r2, [sp, #28]
 800b6ec:	462f      	mov	r7, r5
 800b6ee:	2000      	movs	r0, #0
 800b6f0:	250a      	movs	r5, #10
 800b6f2:	4639      	mov	r1, r7
 800b6f4:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b6f8:	3b30      	subs	r3, #48	; 0x30
 800b6fa:	2b09      	cmp	r3, #9
 800b6fc:	d94d      	bls.n	800b79a <_svfiprintf_r+0x16e>
 800b6fe:	b1b8      	cbz	r0, 800b730 <_svfiprintf_r+0x104>
 800b700:	e00f      	b.n	800b722 <_svfiprintf_r+0xf6>
 800b702:	462f      	mov	r7, r5
 800b704:	e7b8      	b.n	800b678 <_svfiprintf_r+0x4c>
 800b706:	4a40      	ldr	r2, [pc, #256]	; (800b808 <_svfiprintf_r+0x1dc>)
 800b708:	1a80      	subs	r0, r0, r2
 800b70a:	fa0b f000 	lsl.w	r0, fp, r0
 800b70e:	4318      	orrs	r0, r3
 800b710:	9004      	str	r0, [sp, #16]
 800b712:	463d      	mov	r5, r7
 800b714:	e7d3      	b.n	800b6be <_svfiprintf_r+0x92>
 800b716:	9a03      	ldr	r2, [sp, #12]
 800b718:	1d11      	adds	r1, r2, #4
 800b71a:	6812      	ldr	r2, [r2, #0]
 800b71c:	9103      	str	r1, [sp, #12]
 800b71e:	2a00      	cmp	r2, #0
 800b720:	db01      	blt.n	800b726 <_svfiprintf_r+0xfa>
 800b722:	9207      	str	r2, [sp, #28]
 800b724:	e004      	b.n	800b730 <_svfiprintf_r+0x104>
 800b726:	4252      	negs	r2, r2
 800b728:	f043 0302 	orr.w	r3, r3, #2
 800b72c:	9207      	str	r2, [sp, #28]
 800b72e:	9304      	str	r3, [sp, #16]
 800b730:	783b      	ldrb	r3, [r7, #0]
 800b732:	2b2e      	cmp	r3, #46	; 0x2e
 800b734:	d10c      	bne.n	800b750 <_svfiprintf_r+0x124>
 800b736:	787b      	ldrb	r3, [r7, #1]
 800b738:	2b2a      	cmp	r3, #42	; 0x2a
 800b73a:	d133      	bne.n	800b7a4 <_svfiprintf_r+0x178>
 800b73c:	9b03      	ldr	r3, [sp, #12]
 800b73e:	1d1a      	adds	r2, r3, #4
 800b740:	681b      	ldr	r3, [r3, #0]
 800b742:	9203      	str	r2, [sp, #12]
 800b744:	2b00      	cmp	r3, #0
 800b746:	bfb8      	it	lt
 800b748:	f04f 33ff 	movlt.w	r3, #4294967295
 800b74c:	3702      	adds	r7, #2
 800b74e:	9305      	str	r3, [sp, #20]
 800b750:	4d2e      	ldr	r5, [pc, #184]	; (800b80c <_svfiprintf_r+0x1e0>)
 800b752:	7839      	ldrb	r1, [r7, #0]
 800b754:	2203      	movs	r2, #3
 800b756:	4628      	mov	r0, r5
 800b758:	f7f4 fd42 	bl	80001e0 <memchr>
 800b75c:	b138      	cbz	r0, 800b76e <_svfiprintf_r+0x142>
 800b75e:	2340      	movs	r3, #64	; 0x40
 800b760:	1b40      	subs	r0, r0, r5
 800b762:	fa03 f000 	lsl.w	r0, r3, r0
 800b766:	9b04      	ldr	r3, [sp, #16]
 800b768:	4303      	orrs	r3, r0
 800b76a:	3701      	adds	r7, #1
 800b76c:	9304      	str	r3, [sp, #16]
 800b76e:	7839      	ldrb	r1, [r7, #0]
 800b770:	4827      	ldr	r0, [pc, #156]	; (800b810 <_svfiprintf_r+0x1e4>)
 800b772:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b776:	2206      	movs	r2, #6
 800b778:	1c7e      	adds	r6, r7, #1
 800b77a:	f7f4 fd31 	bl	80001e0 <memchr>
 800b77e:	2800      	cmp	r0, #0
 800b780:	d038      	beq.n	800b7f4 <_svfiprintf_r+0x1c8>
 800b782:	4b24      	ldr	r3, [pc, #144]	; (800b814 <_svfiprintf_r+0x1e8>)
 800b784:	bb13      	cbnz	r3, 800b7cc <_svfiprintf_r+0x1a0>
 800b786:	9b03      	ldr	r3, [sp, #12]
 800b788:	3307      	adds	r3, #7
 800b78a:	f023 0307 	bic.w	r3, r3, #7
 800b78e:	3308      	adds	r3, #8
 800b790:	9303      	str	r3, [sp, #12]
 800b792:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b794:	444b      	add	r3, r9
 800b796:	9309      	str	r3, [sp, #36]	; 0x24
 800b798:	e76d      	b.n	800b676 <_svfiprintf_r+0x4a>
 800b79a:	fb05 3202 	mla	r2, r5, r2, r3
 800b79e:	2001      	movs	r0, #1
 800b7a0:	460f      	mov	r7, r1
 800b7a2:	e7a6      	b.n	800b6f2 <_svfiprintf_r+0xc6>
 800b7a4:	2300      	movs	r3, #0
 800b7a6:	3701      	adds	r7, #1
 800b7a8:	9305      	str	r3, [sp, #20]
 800b7aa:	4619      	mov	r1, r3
 800b7ac:	250a      	movs	r5, #10
 800b7ae:	4638      	mov	r0, r7
 800b7b0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b7b4:	3a30      	subs	r2, #48	; 0x30
 800b7b6:	2a09      	cmp	r2, #9
 800b7b8:	d903      	bls.n	800b7c2 <_svfiprintf_r+0x196>
 800b7ba:	2b00      	cmp	r3, #0
 800b7bc:	d0c8      	beq.n	800b750 <_svfiprintf_r+0x124>
 800b7be:	9105      	str	r1, [sp, #20]
 800b7c0:	e7c6      	b.n	800b750 <_svfiprintf_r+0x124>
 800b7c2:	fb05 2101 	mla	r1, r5, r1, r2
 800b7c6:	2301      	movs	r3, #1
 800b7c8:	4607      	mov	r7, r0
 800b7ca:	e7f0      	b.n	800b7ae <_svfiprintf_r+0x182>
 800b7cc:	ab03      	add	r3, sp, #12
 800b7ce:	9300      	str	r3, [sp, #0]
 800b7d0:	4622      	mov	r2, r4
 800b7d2:	4b11      	ldr	r3, [pc, #68]	; (800b818 <_svfiprintf_r+0x1ec>)
 800b7d4:	a904      	add	r1, sp, #16
 800b7d6:	4640      	mov	r0, r8
 800b7d8:	f7fe f978 	bl	8009acc <_printf_float>
 800b7dc:	f1b0 3fff 	cmp.w	r0, #4294967295
 800b7e0:	4681      	mov	r9, r0
 800b7e2:	d1d6      	bne.n	800b792 <_svfiprintf_r+0x166>
 800b7e4:	89a3      	ldrh	r3, [r4, #12]
 800b7e6:	065b      	lsls	r3, r3, #25
 800b7e8:	f53f af35 	bmi.w	800b656 <_svfiprintf_r+0x2a>
 800b7ec:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b7ee:	b01d      	add	sp, #116	; 0x74
 800b7f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b7f4:	ab03      	add	r3, sp, #12
 800b7f6:	9300      	str	r3, [sp, #0]
 800b7f8:	4622      	mov	r2, r4
 800b7fa:	4b07      	ldr	r3, [pc, #28]	; (800b818 <_svfiprintf_r+0x1ec>)
 800b7fc:	a904      	add	r1, sp, #16
 800b7fe:	4640      	mov	r0, r8
 800b800:	f7fe fc1a 	bl	800a038 <_printf_i>
 800b804:	e7ea      	b.n	800b7dc <_svfiprintf_r+0x1b0>
 800b806:	bf00      	nop
 800b808:	0800bfe4 	.word	0x0800bfe4
 800b80c:	0800bfea 	.word	0x0800bfea
 800b810:	0800bfee 	.word	0x0800bfee
 800b814:	08009acd 	.word	0x08009acd
 800b818:	0800b579 	.word	0x0800b579

0800b81c <__ascii_mbtowc>:
 800b81c:	b082      	sub	sp, #8
 800b81e:	b901      	cbnz	r1, 800b822 <__ascii_mbtowc+0x6>
 800b820:	a901      	add	r1, sp, #4
 800b822:	b142      	cbz	r2, 800b836 <__ascii_mbtowc+0x1a>
 800b824:	b14b      	cbz	r3, 800b83a <__ascii_mbtowc+0x1e>
 800b826:	7813      	ldrb	r3, [r2, #0]
 800b828:	600b      	str	r3, [r1, #0]
 800b82a:	7812      	ldrb	r2, [r2, #0]
 800b82c:	1c10      	adds	r0, r2, #0
 800b82e:	bf18      	it	ne
 800b830:	2001      	movne	r0, #1
 800b832:	b002      	add	sp, #8
 800b834:	4770      	bx	lr
 800b836:	4610      	mov	r0, r2
 800b838:	e7fb      	b.n	800b832 <__ascii_mbtowc+0x16>
 800b83a:	f06f 0001 	mvn.w	r0, #1
 800b83e:	e7f8      	b.n	800b832 <__ascii_mbtowc+0x16>

0800b840 <memmove>:
 800b840:	4288      	cmp	r0, r1
 800b842:	b510      	push	{r4, lr}
 800b844:	eb01 0302 	add.w	r3, r1, r2
 800b848:	d807      	bhi.n	800b85a <memmove+0x1a>
 800b84a:	1e42      	subs	r2, r0, #1
 800b84c:	4299      	cmp	r1, r3
 800b84e:	d00a      	beq.n	800b866 <memmove+0x26>
 800b850:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b854:	f802 4f01 	strb.w	r4, [r2, #1]!
 800b858:	e7f8      	b.n	800b84c <memmove+0xc>
 800b85a:	4283      	cmp	r3, r0
 800b85c:	d9f5      	bls.n	800b84a <memmove+0xa>
 800b85e:	1881      	adds	r1, r0, r2
 800b860:	1ad2      	subs	r2, r2, r3
 800b862:	42d3      	cmn	r3, r2
 800b864:	d100      	bne.n	800b868 <memmove+0x28>
 800b866:	bd10      	pop	{r4, pc}
 800b868:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b86c:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800b870:	e7f7      	b.n	800b862 <memmove+0x22>

0800b872 <_realloc_r>:
 800b872:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b874:	4607      	mov	r7, r0
 800b876:	4614      	mov	r4, r2
 800b878:	460e      	mov	r6, r1
 800b87a:	b921      	cbnz	r1, 800b886 <_realloc_r+0x14>
 800b87c:	4611      	mov	r1, r2
 800b87e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800b882:	f7fe b835 	b.w	80098f0 <_malloc_r>
 800b886:	b922      	cbnz	r2, 800b892 <_realloc_r+0x20>
 800b888:	f7fd ffe4 	bl	8009854 <_free_r>
 800b88c:	4625      	mov	r5, r4
 800b88e:	4628      	mov	r0, r5
 800b890:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b892:	f000 f821 	bl	800b8d8 <_malloc_usable_size_r>
 800b896:	42a0      	cmp	r0, r4
 800b898:	d20f      	bcs.n	800b8ba <_realloc_r+0x48>
 800b89a:	4621      	mov	r1, r4
 800b89c:	4638      	mov	r0, r7
 800b89e:	f7fe f827 	bl	80098f0 <_malloc_r>
 800b8a2:	4605      	mov	r5, r0
 800b8a4:	2800      	cmp	r0, #0
 800b8a6:	d0f2      	beq.n	800b88e <_realloc_r+0x1c>
 800b8a8:	4631      	mov	r1, r6
 800b8aa:	4622      	mov	r2, r4
 800b8ac:	f7ff fb6e 	bl	800af8c <memcpy>
 800b8b0:	4631      	mov	r1, r6
 800b8b2:	4638      	mov	r0, r7
 800b8b4:	f7fd ffce 	bl	8009854 <_free_r>
 800b8b8:	e7e9      	b.n	800b88e <_realloc_r+0x1c>
 800b8ba:	4635      	mov	r5, r6
 800b8bc:	e7e7      	b.n	800b88e <_realloc_r+0x1c>

0800b8be <__ascii_wctomb>:
 800b8be:	b149      	cbz	r1, 800b8d4 <__ascii_wctomb+0x16>
 800b8c0:	2aff      	cmp	r2, #255	; 0xff
 800b8c2:	bf85      	ittet	hi
 800b8c4:	238a      	movhi	r3, #138	; 0x8a
 800b8c6:	6003      	strhi	r3, [r0, #0]
 800b8c8:	700a      	strbls	r2, [r1, #0]
 800b8ca:	f04f 30ff 	movhi.w	r0, #4294967295
 800b8ce:	bf98      	it	ls
 800b8d0:	2001      	movls	r0, #1
 800b8d2:	4770      	bx	lr
 800b8d4:	4608      	mov	r0, r1
 800b8d6:	4770      	bx	lr

0800b8d8 <_malloc_usable_size_r>:
 800b8d8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b8dc:	1f18      	subs	r0, r3, #4
 800b8de:	2b00      	cmp	r3, #0
 800b8e0:	bfbc      	itt	lt
 800b8e2:	580b      	ldrlt	r3, [r1, r0]
 800b8e4:	18c0      	addlt	r0, r0, r3
 800b8e6:	4770      	bx	lr

0800b8e8 <atan2>:
 800b8e8:	f000 b802 	b.w	800b8f0 <__ieee754_atan2>
 800b8ec:	0000      	movs	r0, r0
	...

0800b8f0 <__ieee754_atan2>:
 800b8f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b8f4:	ec57 6b11 	vmov	r6, r7, d1
 800b8f8:	4273      	negs	r3, r6
 800b8fa:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 800b8fe:	4333      	orrs	r3, r6
 800b900:	f8df e1a4 	ldr.w	lr, [pc, #420]	; 800baa8 <__ieee754_atan2+0x1b8>
 800b904:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 800b908:	4573      	cmp	r3, lr
 800b90a:	ec51 0b10 	vmov	r0, r1, d0
 800b90e:	ee11 8a10 	vmov	r8, s2
 800b912:	d80a      	bhi.n	800b92a <__ieee754_atan2+0x3a>
 800b914:	4244      	negs	r4, r0
 800b916:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800b91a:	4304      	orrs	r4, r0
 800b91c:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 800b920:	4574      	cmp	r4, lr
 800b922:	468c      	mov	ip, r1
 800b924:	ee10 9a10 	vmov	r9, s0
 800b928:	d907      	bls.n	800b93a <__ieee754_atan2+0x4a>
 800b92a:	4632      	mov	r2, r6
 800b92c:	463b      	mov	r3, r7
 800b92e:	f7f4 fcad 	bl	800028c <__adddf3>
 800b932:	ec41 0b10 	vmov	d0, r0, r1
 800b936:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b93a:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 800b93e:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800b942:	4334      	orrs	r4, r6
 800b944:	d103      	bne.n	800b94e <__ieee754_atan2+0x5e>
 800b946:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b94a:	f000 b8b1 	b.w	800bab0 <atan>
 800b94e:	17bc      	asrs	r4, r7, #30
 800b950:	f004 0402 	and.w	r4, r4, #2
 800b954:	ea53 0909 	orrs.w	r9, r3, r9
 800b958:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 800b95c:	d107      	bne.n	800b96e <__ieee754_atan2+0x7e>
 800b95e:	2c02      	cmp	r4, #2
 800b960:	d073      	beq.n	800ba4a <__ieee754_atan2+0x15a>
 800b962:	2c03      	cmp	r4, #3
 800b964:	d1e5      	bne.n	800b932 <__ieee754_atan2+0x42>
 800b966:	a13e      	add	r1, pc, #248	; (adr r1, 800ba60 <__ieee754_atan2+0x170>)
 800b968:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b96c:	e7e1      	b.n	800b932 <__ieee754_atan2+0x42>
 800b96e:	ea52 0808 	orrs.w	r8, r2, r8
 800b972:	d106      	bne.n	800b982 <__ieee754_atan2+0x92>
 800b974:	f1bc 0f00 	cmp.w	ip, #0
 800b978:	da6b      	bge.n	800ba52 <__ieee754_atan2+0x162>
 800b97a:	a13b      	add	r1, pc, #236	; (adr r1, 800ba68 <__ieee754_atan2+0x178>)
 800b97c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b980:	e7d7      	b.n	800b932 <__ieee754_atan2+0x42>
 800b982:	4572      	cmp	r2, lr
 800b984:	d120      	bne.n	800b9c8 <__ieee754_atan2+0xd8>
 800b986:	4293      	cmp	r3, r2
 800b988:	d111      	bne.n	800b9ae <__ieee754_atan2+0xbe>
 800b98a:	2c02      	cmp	r4, #2
 800b98c:	d007      	beq.n	800b99e <__ieee754_atan2+0xae>
 800b98e:	2c03      	cmp	r4, #3
 800b990:	d009      	beq.n	800b9a6 <__ieee754_atan2+0xb6>
 800b992:	2c01      	cmp	r4, #1
 800b994:	d155      	bne.n	800ba42 <__ieee754_atan2+0x152>
 800b996:	a136      	add	r1, pc, #216	; (adr r1, 800ba70 <__ieee754_atan2+0x180>)
 800b998:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b99c:	e7c9      	b.n	800b932 <__ieee754_atan2+0x42>
 800b99e:	a136      	add	r1, pc, #216	; (adr r1, 800ba78 <__ieee754_atan2+0x188>)
 800b9a0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b9a4:	e7c5      	b.n	800b932 <__ieee754_atan2+0x42>
 800b9a6:	a136      	add	r1, pc, #216	; (adr r1, 800ba80 <__ieee754_atan2+0x190>)
 800b9a8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b9ac:	e7c1      	b.n	800b932 <__ieee754_atan2+0x42>
 800b9ae:	2c02      	cmp	r4, #2
 800b9b0:	d04b      	beq.n	800ba4a <__ieee754_atan2+0x15a>
 800b9b2:	2c03      	cmp	r4, #3
 800b9b4:	d0d7      	beq.n	800b966 <__ieee754_atan2+0x76>
 800b9b6:	2c01      	cmp	r4, #1
 800b9b8:	f04f 0000 	mov.w	r0, #0
 800b9bc:	d102      	bne.n	800b9c4 <__ieee754_atan2+0xd4>
 800b9be:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 800b9c2:	e7b6      	b.n	800b932 <__ieee754_atan2+0x42>
 800b9c4:	2100      	movs	r1, #0
 800b9c6:	e7b4      	b.n	800b932 <__ieee754_atan2+0x42>
 800b9c8:	4573      	cmp	r3, lr
 800b9ca:	d0d3      	beq.n	800b974 <__ieee754_atan2+0x84>
 800b9cc:	1a9b      	subs	r3, r3, r2
 800b9ce:	151b      	asrs	r3, r3, #20
 800b9d0:	2b3c      	cmp	r3, #60	; 0x3c
 800b9d2:	dc1e      	bgt.n	800ba12 <__ieee754_atan2+0x122>
 800b9d4:	2f00      	cmp	r7, #0
 800b9d6:	da01      	bge.n	800b9dc <__ieee754_atan2+0xec>
 800b9d8:	333c      	adds	r3, #60	; 0x3c
 800b9da:	db1e      	blt.n	800ba1a <__ieee754_atan2+0x12a>
 800b9dc:	4632      	mov	r2, r6
 800b9de:	463b      	mov	r3, r7
 800b9e0:	f7f4 ff34 	bl	800084c <__aeabi_ddiv>
 800b9e4:	ec41 0b10 	vmov	d0, r0, r1
 800b9e8:	f000 fa02 	bl	800bdf0 <fabs>
 800b9ec:	f000 f860 	bl	800bab0 <atan>
 800b9f0:	ec51 0b10 	vmov	r0, r1, d0
 800b9f4:	2c01      	cmp	r4, #1
 800b9f6:	d013      	beq.n	800ba20 <__ieee754_atan2+0x130>
 800b9f8:	2c02      	cmp	r4, #2
 800b9fa:	d015      	beq.n	800ba28 <__ieee754_atan2+0x138>
 800b9fc:	2c00      	cmp	r4, #0
 800b9fe:	d098      	beq.n	800b932 <__ieee754_atan2+0x42>
 800ba00:	a321      	add	r3, pc, #132	; (adr r3, 800ba88 <__ieee754_atan2+0x198>)
 800ba02:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba06:	f7f4 fc3f 	bl	8000288 <__aeabi_dsub>
 800ba0a:	a321      	add	r3, pc, #132	; (adr r3, 800ba90 <__ieee754_atan2+0x1a0>)
 800ba0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba10:	e014      	b.n	800ba3c <__ieee754_atan2+0x14c>
 800ba12:	a121      	add	r1, pc, #132	; (adr r1, 800ba98 <__ieee754_atan2+0x1a8>)
 800ba14:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ba18:	e7ec      	b.n	800b9f4 <__ieee754_atan2+0x104>
 800ba1a:	2000      	movs	r0, #0
 800ba1c:	2100      	movs	r1, #0
 800ba1e:	e7e9      	b.n	800b9f4 <__ieee754_atan2+0x104>
 800ba20:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ba24:	4619      	mov	r1, r3
 800ba26:	e784      	b.n	800b932 <__ieee754_atan2+0x42>
 800ba28:	a317      	add	r3, pc, #92	; (adr r3, 800ba88 <__ieee754_atan2+0x198>)
 800ba2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba2e:	f7f4 fc2b 	bl	8000288 <__aeabi_dsub>
 800ba32:	4602      	mov	r2, r0
 800ba34:	460b      	mov	r3, r1
 800ba36:	a116      	add	r1, pc, #88	; (adr r1, 800ba90 <__ieee754_atan2+0x1a0>)
 800ba38:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ba3c:	f7f4 fc24 	bl	8000288 <__aeabi_dsub>
 800ba40:	e777      	b.n	800b932 <__ieee754_atan2+0x42>
 800ba42:	a117      	add	r1, pc, #92	; (adr r1, 800baa0 <__ieee754_atan2+0x1b0>)
 800ba44:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ba48:	e773      	b.n	800b932 <__ieee754_atan2+0x42>
 800ba4a:	a111      	add	r1, pc, #68	; (adr r1, 800ba90 <__ieee754_atan2+0x1a0>)
 800ba4c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ba50:	e76f      	b.n	800b932 <__ieee754_atan2+0x42>
 800ba52:	a111      	add	r1, pc, #68	; (adr r1, 800ba98 <__ieee754_atan2+0x1a8>)
 800ba54:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ba58:	e76b      	b.n	800b932 <__ieee754_atan2+0x42>
 800ba5a:	bf00      	nop
 800ba5c:	f3af 8000 	nop.w
 800ba60:	54442d18 	.word	0x54442d18
 800ba64:	c00921fb 	.word	0xc00921fb
 800ba68:	54442d18 	.word	0x54442d18
 800ba6c:	bff921fb 	.word	0xbff921fb
 800ba70:	54442d18 	.word	0x54442d18
 800ba74:	bfe921fb 	.word	0xbfe921fb
 800ba78:	7f3321d2 	.word	0x7f3321d2
 800ba7c:	4002d97c 	.word	0x4002d97c
 800ba80:	7f3321d2 	.word	0x7f3321d2
 800ba84:	c002d97c 	.word	0xc002d97c
 800ba88:	33145c07 	.word	0x33145c07
 800ba8c:	3ca1a626 	.word	0x3ca1a626
 800ba90:	54442d18 	.word	0x54442d18
 800ba94:	400921fb 	.word	0x400921fb
 800ba98:	54442d18 	.word	0x54442d18
 800ba9c:	3ff921fb 	.word	0x3ff921fb
 800baa0:	54442d18 	.word	0x54442d18
 800baa4:	3fe921fb 	.word	0x3fe921fb
 800baa8:	7ff00000 	.word	0x7ff00000
 800baac:	00000000 	.word	0x00000000

0800bab0 <atan>:
 800bab0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bab4:	ec55 4b10 	vmov	r4, r5, d0
 800bab8:	4bc3      	ldr	r3, [pc, #780]	; (800bdc8 <atan+0x318>)
 800baba:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800babe:	429e      	cmp	r6, r3
 800bac0:	46ab      	mov	fp, r5
 800bac2:	dd18      	ble.n	800baf6 <atan+0x46>
 800bac4:	4bc1      	ldr	r3, [pc, #772]	; (800bdcc <atan+0x31c>)
 800bac6:	429e      	cmp	r6, r3
 800bac8:	dc01      	bgt.n	800bace <atan+0x1e>
 800baca:	d109      	bne.n	800bae0 <atan+0x30>
 800bacc:	b144      	cbz	r4, 800bae0 <atan+0x30>
 800bace:	4622      	mov	r2, r4
 800bad0:	462b      	mov	r3, r5
 800bad2:	4620      	mov	r0, r4
 800bad4:	4629      	mov	r1, r5
 800bad6:	f7f4 fbd9 	bl	800028c <__adddf3>
 800bada:	4604      	mov	r4, r0
 800badc:	460d      	mov	r5, r1
 800bade:	e006      	b.n	800baee <atan+0x3e>
 800bae0:	f1bb 0f00 	cmp.w	fp, #0
 800bae4:	f340 8131 	ble.w	800bd4a <atan+0x29a>
 800bae8:	a59b      	add	r5, pc, #620	; (adr r5, 800bd58 <atan+0x2a8>)
 800baea:	e9d5 4500 	ldrd	r4, r5, [r5]
 800baee:	ec45 4b10 	vmov	d0, r4, r5
 800baf2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800baf6:	4bb6      	ldr	r3, [pc, #728]	; (800bdd0 <atan+0x320>)
 800baf8:	429e      	cmp	r6, r3
 800bafa:	dc14      	bgt.n	800bb26 <atan+0x76>
 800bafc:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 800bb00:	429e      	cmp	r6, r3
 800bb02:	dc0d      	bgt.n	800bb20 <atan+0x70>
 800bb04:	a396      	add	r3, pc, #600	; (adr r3, 800bd60 <atan+0x2b0>)
 800bb06:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb0a:	ee10 0a10 	vmov	r0, s0
 800bb0e:	4629      	mov	r1, r5
 800bb10:	f7f4 fbbc 	bl	800028c <__adddf3>
 800bb14:	2200      	movs	r2, #0
 800bb16:	4baf      	ldr	r3, [pc, #700]	; (800bdd4 <atan+0x324>)
 800bb18:	f7f4 fffe 	bl	8000b18 <__aeabi_dcmpgt>
 800bb1c:	2800      	cmp	r0, #0
 800bb1e:	d1e6      	bne.n	800baee <atan+0x3e>
 800bb20:	f04f 3aff 	mov.w	sl, #4294967295
 800bb24:	e02b      	b.n	800bb7e <atan+0xce>
 800bb26:	f000 f963 	bl	800bdf0 <fabs>
 800bb2a:	4bab      	ldr	r3, [pc, #684]	; (800bdd8 <atan+0x328>)
 800bb2c:	429e      	cmp	r6, r3
 800bb2e:	ec55 4b10 	vmov	r4, r5, d0
 800bb32:	f300 80bf 	bgt.w	800bcb4 <atan+0x204>
 800bb36:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 800bb3a:	429e      	cmp	r6, r3
 800bb3c:	f300 80a0 	bgt.w	800bc80 <atan+0x1d0>
 800bb40:	ee10 2a10 	vmov	r2, s0
 800bb44:	ee10 0a10 	vmov	r0, s0
 800bb48:	462b      	mov	r3, r5
 800bb4a:	4629      	mov	r1, r5
 800bb4c:	f7f4 fb9e 	bl	800028c <__adddf3>
 800bb50:	2200      	movs	r2, #0
 800bb52:	4ba0      	ldr	r3, [pc, #640]	; (800bdd4 <atan+0x324>)
 800bb54:	f7f4 fb98 	bl	8000288 <__aeabi_dsub>
 800bb58:	2200      	movs	r2, #0
 800bb5a:	4606      	mov	r6, r0
 800bb5c:	460f      	mov	r7, r1
 800bb5e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800bb62:	4620      	mov	r0, r4
 800bb64:	4629      	mov	r1, r5
 800bb66:	f7f4 fb91 	bl	800028c <__adddf3>
 800bb6a:	4602      	mov	r2, r0
 800bb6c:	460b      	mov	r3, r1
 800bb6e:	4630      	mov	r0, r6
 800bb70:	4639      	mov	r1, r7
 800bb72:	f7f4 fe6b 	bl	800084c <__aeabi_ddiv>
 800bb76:	f04f 0a00 	mov.w	sl, #0
 800bb7a:	4604      	mov	r4, r0
 800bb7c:	460d      	mov	r5, r1
 800bb7e:	4622      	mov	r2, r4
 800bb80:	462b      	mov	r3, r5
 800bb82:	4620      	mov	r0, r4
 800bb84:	4629      	mov	r1, r5
 800bb86:	f7f4 fd37 	bl	80005f8 <__aeabi_dmul>
 800bb8a:	4602      	mov	r2, r0
 800bb8c:	460b      	mov	r3, r1
 800bb8e:	4680      	mov	r8, r0
 800bb90:	4689      	mov	r9, r1
 800bb92:	f7f4 fd31 	bl	80005f8 <__aeabi_dmul>
 800bb96:	a374      	add	r3, pc, #464	; (adr r3, 800bd68 <atan+0x2b8>)
 800bb98:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb9c:	4606      	mov	r6, r0
 800bb9e:	460f      	mov	r7, r1
 800bba0:	f7f4 fd2a 	bl	80005f8 <__aeabi_dmul>
 800bba4:	a372      	add	r3, pc, #456	; (adr r3, 800bd70 <atan+0x2c0>)
 800bba6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bbaa:	f7f4 fb6f 	bl	800028c <__adddf3>
 800bbae:	4632      	mov	r2, r6
 800bbb0:	463b      	mov	r3, r7
 800bbb2:	f7f4 fd21 	bl	80005f8 <__aeabi_dmul>
 800bbb6:	a370      	add	r3, pc, #448	; (adr r3, 800bd78 <atan+0x2c8>)
 800bbb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bbbc:	f7f4 fb66 	bl	800028c <__adddf3>
 800bbc0:	4632      	mov	r2, r6
 800bbc2:	463b      	mov	r3, r7
 800bbc4:	f7f4 fd18 	bl	80005f8 <__aeabi_dmul>
 800bbc8:	a36d      	add	r3, pc, #436	; (adr r3, 800bd80 <atan+0x2d0>)
 800bbca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bbce:	f7f4 fb5d 	bl	800028c <__adddf3>
 800bbd2:	4632      	mov	r2, r6
 800bbd4:	463b      	mov	r3, r7
 800bbd6:	f7f4 fd0f 	bl	80005f8 <__aeabi_dmul>
 800bbda:	a36b      	add	r3, pc, #428	; (adr r3, 800bd88 <atan+0x2d8>)
 800bbdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bbe0:	f7f4 fb54 	bl	800028c <__adddf3>
 800bbe4:	4632      	mov	r2, r6
 800bbe6:	463b      	mov	r3, r7
 800bbe8:	f7f4 fd06 	bl	80005f8 <__aeabi_dmul>
 800bbec:	a368      	add	r3, pc, #416	; (adr r3, 800bd90 <atan+0x2e0>)
 800bbee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bbf2:	f7f4 fb4b 	bl	800028c <__adddf3>
 800bbf6:	4642      	mov	r2, r8
 800bbf8:	464b      	mov	r3, r9
 800bbfa:	f7f4 fcfd 	bl	80005f8 <__aeabi_dmul>
 800bbfe:	a366      	add	r3, pc, #408	; (adr r3, 800bd98 <atan+0x2e8>)
 800bc00:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc04:	4680      	mov	r8, r0
 800bc06:	4689      	mov	r9, r1
 800bc08:	4630      	mov	r0, r6
 800bc0a:	4639      	mov	r1, r7
 800bc0c:	f7f4 fcf4 	bl	80005f8 <__aeabi_dmul>
 800bc10:	a363      	add	r3, pc, #396	; (adr r3, 800bda0 <atan+0x2f0>)
 800bc12:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc16:	f7f4 fb37 	bl	8000288 <__aeabi_dsub>
 800bc1a:	4632      	mov	r2, r6
 800bc1c:	463b      	mov	r3, r7
 800bc1e:	f7f4 fceb 	bl	80005f8 <__aeabi_dmul>
 800bc22:	a361      	add	r3, pc, #388	; (adr r3, 800bda8 <atan+0x2f8>)
 800bc24:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc28:	f7f4 fb2e 	bl	8000288 <__aeabi_dsub>
 800bc2c:	4632      	mov	r2, r6
 800bc2e:	463b      	mov	r3, r7
 800bc30:	f7f4 fce2 	bl	80005f8 <__aeabi_dmul>
 800bc34:	a35e      	add	r3, pc, #376	; (adr r3, 800bdb0 <atan+0x300>)
 800bc36:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc3a:	f7f4 fb25 	bl	8000288 <__aeabi_dsub>
 800bc3e:	4632      	mov	r2, r6
 800bc40:	463b      	mov	r3, r7
 800bc42:	f7f4 fcd9 	bl	80005f8 <__aeabi_dmul>
 800bc46:	a35c      	add	r3, pc, #368	; (adr r3, 800bdb8 <atan+0x308>)
 800bc48:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc4c:	f7f4 fb1c 	bl	8000288 <__aeabi_dsub>
 800bc50:	4632      	mov	r2, r6
 800bc52:	463b      	mov	r3, r7
 800bc54:	f7f4 fcd0 	bl	80005f8 <__aeabi_dmul>
 800bc58:	4602      	mov	r2, r0
 800bc5a:	460b      	mov	r3, r1
 800bc5c:	4640      	mov	r0, r8
 800bc5e:	4649      	mov	r1, r9
 800bc60:	f7f4 fb14 	bl	800028c <__adddf3>
 800bc64:	4622      	mov	r2, r4
 800bc66:	462b      	mov	r3, r5
 800bc68:	f7f4 fcc6 	bl	80005f8 <__aeabi_dmul>
 800bc6c:	f1ba 3fff 	cmp.w	sl, #4294967295
 800bc70:	4602      	mov	r2, r0
 800bc72:	460b      	mov	r3, r1
 800bc74:	d14b      	bne.n	800bd0e <atan+0x25e>
 800bc76:	4620      	mov	r0, r4
 800bc78:	4629      	mov	r1, r5
 800bc7a:	f7f4 fb05 	bl	8000288 <__aeabi_dsub>
 800bc7e:	e72c      	b.n	800bada <atan+0x2a>
 800bc80:	ee10 0a10 	vmov	r0, s0
 800bc84:	2200      	movs	r2, #0
 800bc86:	4b53      	ldr	r3, [pc, #332]	; (800bdd4 <atan+0x324>)
 800bc88:	4629      	mov	r1, r5
 800bc8a:	f7f4 fafd 	bl	8000288 <__aeabi_dsub>
 800bc8e:	2200      	movs	r2, #0
 800bc90:	4606      	mov	r6, r0
 800bc92:	460f      	mov	r7, r1
 800bc94:	4b4f      	ldr	r3, [pc, #316]	; (800bdd4 <atan+0x324>)
 800bc96:	4620      	mov	r0, r4
 800bc98:	4629      	mov	r1, r5
 800bc9a:	f7f4 faf7 	bl	800028c <__adddf3>
 800bc9e:	4602      	mov	r2, r0
 800bca0:	460b      	mov	r3, r1
 800bca2:	4630      	mov	r0, r6
 800bca4:	4639      	mov	r1, r7
 800bca6:	f7f4 fdd1 	bl	800084c <__aeabi_ddiv>
 800bcaa:	f04f 0a01 	mov.w	sl, #1
 800bcae:	4604      	mov	r4, r0
 800bcb0:	460d      	mov	r5, r1
 800bcb2:	e764      	b.n	800bb7e <atan+0xce>
 800bcb4:	4b49      	ldr	r3, [pc, #292]	; (800bddc <atan+0x32c>)
 800bcb6:	429e      	cmp	r6, r3
 800bcb8:	dc1d      	bgt.n	800bcf6 <atan+0x246>
 800bcba:	ee10 0a10 	vmov	r0, s0
 800bcbe:	2200      	movs	r2, #0
 800bcc0:	4b47      	ldr	r3, [pc, #284]	; (800bde0 <atan+0x330>)
 800bcc2:	4629      	mov	r1, r5
 800bcc4:	f7f4 fae0 	bl	8000288 <__aeabi_dsub>
 800bcc8:	2200      	movs	r2, #0
 800bcca:	4606      	mov	r6, r0
 800bccc:	460f      	mov	r7, r1
 800bcce:	4b44      	ldr	r3, [pc, #272]	; (800bde0 <atan+0x330>)
 800bcd0:	4620      	mov	r0, r4
 800bcd2:	4629      	mov	r1, r5
 800bcd4:	f7f4 fc90 	bl	80005f8 <__aeabi_dmul>
 800bcd8:	2200      	movs	r2, #0
 800bcda:	4b3e      	ldr	r3, [pc, #248]	; (800bdd4 <atan+0x324>)
 800bcdc:	f7f4 fad6 	bl	800028c <__adddf3>
 800bce0:	4602      	mov	r2, r0
 800bce2:	460b      	mov	r3, r1
 800bce4:	4630      	mov	r0, r6
 800bce6:	4639      	mov	r1, r7
 800bce8:	f7f4 fdb0 	bl	800084c <__aeabi_ddiv>
 800bcec:	f04f 0a02 	mov.w	sl, #2
 800bcf0:	4604      	mov	r4, r0
 800bcf2:	460d      	mov	r5, r1
 800bcf4:	e743      	b.n	800bb7e <atan+0xce>
 800bcf6:	462b      	mov	r3, r5
 800bcf8:	ee10 2a10 	vmov	r2, s0
 800bcfc:	2000      	movs	r0, #0
 800bcfe:	4939      	ldr	r1, [pc, #228]	; (800bde4 <atan+0x334>)
 800bd00:	f7f4 fda4 	bl	800084c <__aeabi_ddiv>
 800bd04:	f04f 0a03 	mov.w	sl, #3
 800bd08:	4604      	mov	r4, r0
 800bd0a:	460d      	mov	r5, r1
 800bd0c:	e737      	b.n	800bb7e <atan+0xce>
 800bd0e:	4b36      	ldr	r3, [pc, #216]	; (800bde8 <atan+0x338>)
 800bd10:	4e36      	ldr	r6, [pc, #216]	; (800bdec <atan+0x33c>)
 800bd12:	ea4f 0aca 	mov.w	sl, sl, lsl #3
 800bd16:	4456      	add	r6, sl
 800bd18:	449a      	add	sl, r3
 800bd1a:	e9da 2300 	ldrd	r2, r3, [sl]
 800bd1e:	f7f4 fab3 	bl	8000288 <__aeabi_dsub>
 800bd22:	4622      	mov	r2, r4
 800bd24:	462b      	mov	r3, r5
 800bd26:	f7f4 faaf 	bl	8000288 <__aeabi_dsub>
 800bd2a:	4602      	mov	r2, r0
 800bd2c:	460b      	mov	r3, r1
 800bd2e:	e9d6 0100 	ldrd	r0, r1, [r6]
 800bd32:	f7f4 faa9 	bl	8000288 <__aeabi_dsub>
 800bd36:	f1bb 0f00 	cmp.w	fp, #0
 800bd3a:	4604      	mov	r4, r0
 800bd3c:	460d      	mov	r5, r1
 800bd3e:	f6bf aed6 	bge.w	800baee <atan+0x3e>
 800bd42:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800bd46:	461d      	mov	r5, r3
 800bd48:	e6d1      	b.n	800baee <atan+0x3e>
 800bd4a:	a51d      	add	r5, pc, #116	; (adr r5, 800bdc0 <atan+0x310>)
 800bd4c:	e9d5 4500 	ldrd	r4, r5, [r5]
 800bd50:	e6cd      	b.n	800baee <atan+0x3e>
 800bd52:	bf00      	nop
 800bd54:	f3af 8000 	nop.w
 800bd58:	54442d18 	.word	0x54442d18
 800bd5c:	3ff921fb 	.word	0x3ff921fb
 800bd60:	8800759c 	.word	0x8800759c
 800bd64:	7e37e43c 	.word	0x7e37e43c
 800bd68:	e322da11 	.word	0xe322da11
 800bd6c:	3f90ad3a 	.word	0x3f90ad3a
 800bd70:	24760deb 	.word	0x24760deb
 800bd74:	3fa97b4b 	.word	0x3fa97b4b
 800bd78:	a0d03d51 	.word	0xa0d03d51
 800bd7c:	3fb10d66 	.word	0x3fb10d66
 800bd80:	c54c206e 	.word	0xc54c206e
 800bd84:	3fb745cd 	.word	0x3fb745cd
 800bd88:	920083ff 	.word	0x920083ff
 800bd8c:	3fc24924 	.word	0x3fc24924
 800bd90:	5555550d 	.word	0x5555550d
 800bd94:	3fd55555 	.word	0x3fd55555
 800bd98:	2c6a6c2f 	.word	0x2c6a6c2f
 800bd9c:	bfa2b444 	.word	0xbfa2b444
 800bda0:	52defd9a 	.word	0x52defd9a
 800bda4:	3fadde2d 	.word	0x3fadde2d
 800bda8:	af749a6d 	.word	0xaf749a6d
 800bdac:	3fb3b0f2 	.word	0x3fb3b0f2
 800bdb0:	fe231671 	.word	0xfe231671
 800bdb4:	3fbc71c6 	.word	0x3fbc71c6
 800bdb8:	9998ebc4 	.word	0x9998ebc4
 800bdbc:	3fc99999 	.word	0x3fc99999
 800bdc0:	54442d18 	.word	0x54442d18
 800bdc4:	bff921fb 	.word	0xbff921fb
 800bdc8:	440fffff 	.word	0x440fffff
 800bdcc:	7ff00000 	.word	0x7ff00000
 800bdd0:	3fdbffff 	.word	0x3fdbffff
 800bdd4:	3ff00000 	.word	0x3ff00000
 800bdd8:	3ff2ffff 	.word	0x3ff2ffff
 800bddc:	40037fff 	.word	0x40037fff
 800bde0:	3ff80000 	.word	0x3ff80000
 800bde4:	bff00000 	.word	0xbff00000
 800bde8:	0800c120 	.word	0x0800c120
 800bdec:	0800c100 	.word	0x0800c100

0800bdf0 <fabs>:
 800bdf0:	ec51 0b10 	vmov	r0, r1, d0
 800bdf4:	ee10 2a10 	vmov	r2, s0
 800bdf8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800bdfc:	ec43 2b10 	vmov	d0, r2, r3
 800be00:	4770      	bx	lr
	...

0800be04 <_init>:
 800be04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800be06:	bf00      	nop
 800be08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800be0a:	bc08      	pop	{r3}
 800be0c:	469e      	mov	lr, r3
 800be0e:	4770      	bx	lr

0800be10 <_fini>:
 800be10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800be12:	bf00      	nop
 800be14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800be16:	bc08      	pop	{r3}
 800be18:	469e      	mov	lr, r3
 800be1a:	4770      	bx	lr
